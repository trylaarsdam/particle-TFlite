
c:/Users/toddr/dev/particle-TFlite/target/5.1.0/argon/particle-TFlite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015d04  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c9d24  000c9d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000009b4  2003bc74  000c9d48  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000021c8  2003c628  2003c628  0002c628  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000ca6fc  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000ca700  000ca700  0002a700  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000ca706  000ca706  0002a706  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000ca72a  000ca72a  0002a72a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   002e5fd0  00000000  00000000  0002a72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000265b6  00000000  00000000  003106fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00082428  00000000  00000000  00336cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003420  00000000  00000000  003b90dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000125b8  00000000  00000000  003bc4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b94a  00000000  00000000  003ceab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0007b853  00000000  00000000  0041a3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001cb579  00000000  00000000  00495c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a144  00000000  00000000  006611cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2uiz>:
   b491c:	004a      	lsls	r2, r1, #1
   b491e:	d211      	bcs.n	b4944 <__aeabi_d2uiz+0x28>
   b4920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4924:	d211      	bcs.n	b494a <__aeabi_d2uiz+0x2e>
   b4926:	d50d      	bpl.n	b4944 <__aeabi_d2uiz+0x28>
   b4928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b492c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4930:	d40e      	bmi.n	b4950 <__aeabi_d2uiz+0x34>
   b4932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b493a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b493e:	fa23 f002 	lsr.w	r0, r3, r2
   b4942:	4770      	bx	lr
   b4944:	f04f 0000 	mov.w	r0, #0
   b4948:	4770      	bx	lr
   b494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b494e:	d102      	bne.n	b4956 <__aeabi_d2uiz+0x3a>
   b4950:	f04f 30ff 	mov.w	r0, #4294967295
   b4954:	4770      	bx	lr
   b4956:	f04f 0000 	mov.w	r0, #0
   b495a:	4770      	bx	lr

000b495c <__aeabi_d2f>:
   b495c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4964:	bf24      	itt	cs
   b4966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b496a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b496e:	d90d      	bls.n	b498c <__aeabi_d2f+0x30>
   b4970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b497c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4984:	bf08      	it	eq
   b4986:	f020 0001 	biceq.w	r0, r0, #1
   b498a:	4770      	bx	lr
   b498c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4990:	d121      	bne.n	b49d6 <__aeabi_d2f+0x7a>
   b4992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4996:	bfbc      	itt	lt
   b4998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b499c:	4770      	bxlt	lr
   b499e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49a6:	f1c2 0218 	rsb	r2, r2, #24
   b49aa:	f1c2 0c20 	rsb	ip, r2, #32
   b49ae:	fa10 f30c 	lsls.w	r3, r0, ip
   b49b2:	fa20 f002 	lsr.w	r0, r0, r2
   b49b6:	bf18      	it	ne
   b49b8:	f040 0001 	orrne.w	r0, r0, #1
   b49bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49c8:	ea40 000c 	orr.w	r0, r0, ip
   b49cc:	fa23 f302 	lsr.w	r3, r3, r2
   b49d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49d4:	e7cc      	b.n	b4970 <__aeabi_d2f+0x14>
   b49d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49da:	d107      	bne.n	b49ec <__aeabi_d2f+0x90>
   b49dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49e0:	bf1e      	ittt	ne
   b49e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49ea:	4770      	bxne	lr
   b49ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49f8:	4770      	bx	lr
   b49fa:	bf00      	nop

000b49fc <__aeabi_d2lz>:
   b49fc:	b538      	push	{r3, r4, r5, lr}
   b49fe:	2200      	movs	r2, #0
   b4a00:	2300      	movs	r3, #0
   b4a02:	4604      	mov	r4, r0
   b4a04:	460d      	mov	r5, r1
   b4a06:	f7ff ff39 	bl	b487c <__aeabi_dcmplt>
   b4a0a:	b928      	cbnz	r0, b4a18 <__aeabi_d2lz+0x1c>
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	4629      	mov	r1, r5
   b4a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a14:	f000 b80a 	b.w	b4a2c <__aeabi_d2ulz>
   b4a18:	4620      	mov	r0, r4
   b4a1a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a1e:	f000 f805 	bl	b4a2c <__aeabi_d2ulz>
   b4a22:	4240      	negs	r0, r0
   b4a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a28:	bd38      	pop	{r3, r4, r5, pc}
   b4a2a:	bf00      	nop

000b4a2c <__aeabi_d2ulz>:
   b4a2c:	b5d0      	push	{r4, r6, r7, lr}
   b4a2e:	4b0c      	ldr	r3, [pc, #48]	; (b4a60 <__aeabi_d2ulz+0x34>)
   b4a30:	2200      	movs	r2, #0
   b4a32:	4606      	mov	r6, r0
   b4a34:	460f      	mov	r7, r1
   b4a36:	f7ff fcaf 	bl	b4398 <__aeabi_dmul>
   b4a3a:	f7ff ff6f 	bl	b491c <__aeabi_d2uiz>
   b4a3e:	4604      	mov	r4, r0
   b4a40:	f7ff fc30 	bl	b42a4 <__aeabi_ui2d>
   b4a44:	4b07      	ldr	r3, [pc, #28]	; (b4a64 <__aeabi_d2ulz+0x38>)
   b4a46:	2200      	movs	r2, #0
   b4a48:	f7ff fca6 	bl	b4398 <__aeabi_dmul>
   b4a4c:	4602      	mov	r2, r0
   b4a4e:	460b      	mov	r3, r1
   b4a50:	4630      	mov	r0, r6
   b4a52:	4639      	mov	r1, r7
   b4a54:	f7ff fae8 	bl	b4028 <__aeabi_dsub>
   b4a58:	f7ff ff60 	bl	b491c <__aeabi_d2uiz>
   b4a5c:	4621      	mov	r1, r4
   b4a5e:	bdd0      	pop	{r4, r6, r7, pc}
   b4a60:	3df00000 	.word	0x3df00000
   b4a64:	41f00000 	.word	0x41f00000

000b4a68 <strcmp>:
   b4a68:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a70:	2a01      	cmp	r2, #1
   b4a72:	bf28      	it	cs
   b4a74:	429a      	cmpcs	r2, r3
   b4a76:	d0f7      	beq.n	b4a68 <strcmp>
   b4a78:	1ad0      	subs	r0, r2, r3
   b4a7a:	4770      	bx	lr

000b4a7c <strlen>:
   b4a7c:	4603      	mov	r3, r0
   b4a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a82:	2a00      	cmp	r2, #0
   b4a84:	d1fb      	bne.n	b4a7e <strlen+0x2>
   b4a86:	1a18      	subs	r0, r3, r0
   b4a88:	3801      	subs	r0, #1
   b4a8a:	4770      	bx	lr

000b4a8c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a8c:	4809      	ldr	r0, [pc, #36]	; (b4ab4 <module_user_pre_init+0x28>)
   b4a8e:	490a      	ldr	r1, [pc, #40]	; (b4ab8 <module_user_pre_init+0x2c>)
   b4a90:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a92:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a94:	d005      	beq.n	b4aa2 <module_user_pre_init+0x16>
   b4a96:	4a09      	ldr	r2, [pc, #36]	; (b4abc <module_user_pre_init+0x30>)
   b4a98:	4282      	cmp	r2, r0
   b4a9a:	d002      	beq.n	b4aa2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a9c:	1a12      	subs	r2, r2, r0
   b4a9e:	f012 f839 	bl	c6b14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4aa2:	4807      	ldr	r0, [pc, #28]	; (b4ac0 <module_user_pre_init+0x34>)
   b4aa4:	4a07      	ldr	r2, [pc, #28]	; (b4ac4 <module_user_pre_init+0x38>)
   b4aa6:	2100      	movs	r1, #0
   b4aa8:	1a12      	subs	r2, r2, r0
   b4aaa:	f012 f85b 	bl	c6b64 <memset>
    return &link_global_data_start;
}
   b4aae:	4801      	ldr	r0, [pc, #4]	; (b4ab4 <module_user_pre_init+0x28>)
   b4ab0:	bd08      	pop	{r3, pc}
   b4ab2:	bf00      	nop
   b4ab4:	2003bc74 	.word	0x2003bc74
   b4ab8:	000c9d48 	.word	0x000c9d48
   b4abc:	2003c628 	.word	0x2003c628
   b4ac0:	2003c628 	.word	0x2003c628
   b4ac4:	2003e7f0 	.word	0x2003e7f0

000b4ac8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4ac8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aca:	4e07      	ldr	r6, [pc, #28]	; (b4ae8 <module_user_init+0x20>)
   b4acc:	4c07      	ldr	r4, [pc, #28]	; (b4aec <module_user_init+0x24>)
    module_user_init_hook();
   b4ace:	f010 f81d 	bl	c4b0c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4ad2:	1ba4      	subs	r4, r4, r6
   b4ad4:	08a4      	lsrs	r4, r4, #2
   b4ad6:	2500      	movs	r5, #0
   b4ad8:	42ac      	cmp	r4, r5
   b4ada:	d100      	bne.n	b4ade <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4adc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4ade:	f856 3b04 	ldr.w	r3, [r6], #4
   b4ae2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4ae4:	3501      	adds	r5, #1
   b4ae6:	e7f7      	b.n	b4ad8 <module_user_init+0x10>
   b4ae8:	000c9d00 	.word	0x000c9d00
   b4aec:	000c9d24 	.word	0x000c9d24

000b4af0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4af0:	f000 b876 	b.w	b4be0 <setup>

000b4af4 <module_user_loop>:
}

void module_user_loop() {
   b4af4:	b508      	push	{r3, lr}
    loop();
   b4af6:	f000 f8a9 	bl	b4c4c <loop>
    _post_loop();
}
   b4afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4afe:	f00f bfbd 	b.w	c4a7c <_post_loop>

000b4b02 <_Znaj>:
   b4b02:	f00f be63 	b.w	c47cc <malloc>

000b4b06 <_ZdaPv>:
   b4b06:	f00f be69 	b.w	c47dc <free>

000b4b0a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b0a:	f00f be67 	b.w	c47dc <free>
	...

000b4b10 <_exit>:
int _getpid(void)
{
	return 1;
}

void _exit(int status) {
   b4b10:	b508      	push	{r3, lr}
    PANIC(Exit,"Exit Called");
   b4b12:	4a03      	ldr	r2, [pc, #12]	; (b4b20 <_exit+0x10>)
   b4b14:	4903      	ldr	r1, [pc, #12]	; (b4b24 <_exit+0x14>)
   b4b16:	2007      	movs	r0, #7
   b4b18:	f00f fdc4 	bl	c46a4 <panic_>

    while (1) {
   b4b1c:	e7fe      	b.n	b4b1c <_exit+0xc>
   b4b1e:	bf00      	nop
   b4b20:	000c4585 	.word	0x000c4585
   b4b24:	000c6de4 	.word	0x000c6de4

000b4b28 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b28:	7800      	ldrb	r0, [r0, #0]
   b4b2a:	fab0 f080 	clz	r0, r0
   b4b2e:	0940      	lsrs	r0, r0, #5
   b4b30:	4770      	bx	lr

000b4b32 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b32:	2301      	movs	r3, #1
   b4b34:	7003      	strb	r3, [r0, #0]
   b4b36:	4770      	bx	lr

000b4b38 <TfLiteIntArrayEqualsArray>:
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray *a, int b_size,
                              const int b_data[])
{
   b4b38:	b530      	push	{r4, r5, lr}
  if (a == NULL)
   b4b3a:	b918      	cbnz	r0, b4b44 <TfLiteIntArrayEqualsArray+0xc>
    return (b_size == 0);
   b4b3c:	fab1 f081 	clz	r0, r1
   b4b40:	0940      	lsrs	r0, r0, #5
  int i = 0;
  for (; i < a->size; i++)
    if (a->data[i] != b_data[i])
      return 0;
  return 1;
}
   b4b42:	bd30      	pop	{r4, r5, pc}
  if (a->size != b_size)
   b4b44:	6803      	ldr	r3, [r0, #0]
   b4b46:	428b      	cmp	r3, r1
   b4b48:	d10d      	bne.n	b4b66 <TfLiteIntArrayEqualsArray+0x2e>
   b4b4a:	3004      	adds	r0, #4
  int i = 0;
   b4b4c:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   b4b4e:	428b      	cmp	r3, r1
   b4b50:	db01      	blt.n	b4b56 <TfLiteIntArrayEqualsArray+0x1e>
  return 1;
   b4b52:	2001      	movs	r0, #1
   b4b54:	e7f5      	b.n	b4b42 <TfLiteIntArrayEqualsArray+0xa>
    if (a->data[i] != b_data[i])
   b4b56:	f850 5b04 	ldr.w	r5, [r0], #4
   b4b5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b4b5e:	42a5      	cmp	r5, r4
   b4b60:	d101      	bne.n	b4b66 <TfLiteIntArrayEqualsArray+0x2e>
  for (; i < a->size; i++)
   b4b62:	3301      	adds	r3, #1
   b4b64:	e7f3      	b.n	b4b4e <TfLiteIntArrayEqualsArray+0x16>
    return 0;
   b4b66:	2000      	movs	r0, #0
   b4b68:	e7eb      	b.n	b4b42 <TfLiteIntArrayEqualsArray+0xa>

000b4b6a <TfLiteIntArrayEqual>:
  if (a == b)
   b4b6a:	4288      	cmp	r0, r1
   b4b6c:	d005      	beq.n	b4b7a <TfLiteIntArrayEqual+0x10>
  if (a == NULL || b == NULL)
   b4b6e:	b130      	cbz	r0, b4b7e <TfLiteIntArrayEqual+0x14>
   b4b70:	b131      	cbz	r1, b4b80 <TfLiteIntArrayEqual+0x16>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   b4b72:	1d0a      	adds	r2, r1, #4
   b4b74:	6809      	ldr	r1, [r1, #0]
   b4b76:	f7ff bfdf 	b.w	b4b38 <TfLiteIntArrayEqualsArray>
    return 1;
   b4b7a:	2001      	movs	r0, #1
   b4b7c:	4770      	bx	lr
   b4b7e:	4770      	bx	lr
    return 0;
   b4b80:	4608      	mov	r0, r1
}
   b4b82:	4770      	bx	lr

000b4b84 <TfLiteTypeGetName>:
}
#endif // TF_LITE_STATIC_MEMORY

const char *TfLiteTypeGetName(TfLiteType type)
{
  switch (type)
   b4b84:	280a      	cmp	r0, #10
   b4b86:	bf9a      	itte	ls
   b4b88:	4b02      	ldrls	r3, [pc, #8]	; (b4b94 <TfLiteTypeGetName+0x10>)
   b4b8a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   b4b8e:	4802      	ldrhi	r0, [pc, #8]	; (b4b98 <TfLiteTypeGetName+0x14>)
    return "STRING";
  case kTfLiteFloat16:
    return "FLOAT16";
  }
  return "Unknown type";
}
   b4b90:	4770      	bx	lr
   b4b92:	bf00      	nop
   b4b94:	000c6e44 	.word	0x000c6e44
   b4b98:	000c6df0 	.word	0x000c6df0

000b4b9c <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b9c:	b40e      	push	{r1, r2, r3}
   b4b9e:	b503      	push	{r0, r1, lr}
   b4ba0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4ba2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ba4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ba8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4baa:	f00f fef8 	bl	c499e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4bae:	b002      	add	sp, #8
   b4bb0:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bb4:	b003      	add	sp, #12
   b4bb6:	4770      	bx	lr

000b4bb8 <_Z9randFloatff>:

TfLiteTensor *input = nullptr;
TfLiteTensor *output = nullptr;

float randFloat(float min, float max)
{
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	ed2d 8b02 	vpush	{d8}
  return ((max - min) * ((float)rand() / RAND_MAX)) + min;
   b4bbe:	ee70 8ac0 	vsub.f32	s17, s1, s0
{
   b4bc2:	eeb0 8a40 	vmov.f32	s16, s0
  return ((max - min) * ((float)rand() / RAND_MAX)) + min;
   b4bc6:	f012 f803 	bl	c6bd0 <rand>
   b4bca:	ee07 0a90 	vmov	s15, r0
   b4bce:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
   b4bd2:	eeb0 0a48 	vmov.f32	s0, s16
   b4bd6:	eea8 0aa7 	vfma.f32	s0, s17, s15
   b4bda:	ecbd 8b02 	vpop	{d8}
   b4bde:	bd08      	pop	{r3, pc}

000b4be0 <setup>:
																		kTensorArenaSize, error_reporter);
TfLiteStatus allocate_status = interpreter.AllocateTensors();

// setup() runs once, when the device is first turned on.
void setup()
{
   b4be0:	b510      	push	{r4, lr}
	// Put initialization like pinMode and begin functions here.
	Serial.begin();
   b4be2:	f010 f89b 	bl	c4d1c <_Z16_fetch_usbserialv>
   b4be6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bea:	f010 f88b 	bl	c4d04 <_ZN9USBSerial5beginEl>
	if (model->version() != TFLITE_SCHEMA_VERSION)
   b4bee:	4b11      	ldr	r3, [pc, #68]	; (b4c34 <setup+0x54>)
   b4bf0:	6819      	ldr	r1, [r3, #0]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
   b4bf2:	680b      	ldr	r3, [r1, #0]
   b4bf4:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b4bf6:	881a      	ldrh	r2, [r3, #0]
   b4bf8:	2a04      	cmp	r2, #4
   b4bfa:	d90c      	bls.n	b4c16 <setup+0x36>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
   b4bfc:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b4bfe:	b112      	cbz	r2, b4c06 <setup+0x26>
   b4c00:	588a      	ldr	r2, [r1, r2]
   b4c02:	2a03      	cmp	r2, #3
   b4c04:	d009      	beq.n	b4c1a <setup+0x3a>
	{
		error_reporter->Report(
   b4c06:	480c      	ldr	r0, [pc, #48]	; (b4c38 <setup+0x58>)
   b4c08:	490c      	ldr	r1, [pc, #48]	; (b4c3c <setup+0x5c>)
   b4c0a:	6800      	ldr	r0, [r0, #0]

	

	input = interpreter.input(0);
	output = interpreter.output(0);
}
   b4c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		error_reporter->Report(
   b4c10:	2303      	movs	r3, #3
   b4c12:	f00f bc7d 	b.w	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   b4c16:	2200      	movs	r2, #0
   b4c18:	e7f5      	b.n	b4c06 <setup+0x26>
	input = interpreter.input(0);
   b4c1a:	2100      	movs	r1, #0
   b4c1c:	4808      	ldr	r0, [pc, #32]	; (b4c40 <setup+0x60>)
   b4c1e:	f001 fa87 	bl	b6130 <_ZN6tflite16MicroInterpreter5inputEj>
   b4c22:	4b08      	ldr	r3, [pc, #32]	; (b4c44 <setup+0x64>)
	output = interpreter.output(0);
   b4c24:	2100      	movs	r1, #0
	input = interpreter.input(0);
   b4c26:	6018      	str	r0, [r3, #0]
	output = interpreter.output(0);
   b4c28:	4805      	ldr	r0, [pc, #20]	; (b4c40 <setup+0x60>)
   b4c2a:	f001 fa9d 	bl	b6168 <_ZN6tflite16MicroInterpreter6outputEj>
   b4c2e:	4b06      	ldr	r3, [pc, #24]	; (b4c48 <setup+0x68>)
   b4c30:	6018      	str	r0, [r3, #0]
}
   b4c32:	bd10      	pop	{r4, pc}
   b4c34:	2003d6c4 	.word	0x2003d6c4
   b4c38:	2003bc74 	.word	0x2003bc74
   b4c3c:	000c6e70 	.word	0x000c6e70
   b4c40:	2003d644 	.word	0x2003d644
   b4c44:	2003d640 	.word	0x2003d640
   b4c48:	2003d6c8 	.word	0x2003d6c8

000b4c4c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   b4c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	float x_val = randFloat(0, 1);
   b4c4e:	ed9f 0a1f 	vldr	s0, [pc, #124]	; b4ccc <loop+0x80>
   b4c52:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   b4c56:	f7ff ffaf 	bl	b4bb8 <_Z9randFloatff>
	input->data.f[0] = x_val;
   b4c5a:	4b1d      	ldr	r3, [pc, #116]	; (b4cd0 <loop+0x84>)

	TfLiteStatus invoke_status = interpreter.Invoke();
   b4c5c:	481d      	ldr	r0, [pc, #116]	; (b4cd4 <loop+0x88>)
	input->data.f[0] = x_val;
   b4c5e:	681b      	ldr	r3, [r3, #0]
   b4c60:	685b      	ldr	r3, [r3, #4]
   b4c62:	ed83 0a00 	vstr	s0, [r3]
	float x_val = randFloat(0, 1);
   b4c66:	ee10 4a10 	vmov	r4, s0
	TfLiteStatus invoke_status = interpreter.Invoke();
   b4c6a:	f001 f95d 	bl	b5f28 <_ZN6tflite16MicroInterpreter6InvokeEv>
	if (invoke_status != kTfLiteOk)
   b4c6e:	b160      	cbz	r0, b4c8a <loop+0x3e>
	{
		error_reporter->Report("Invoke failed on x_val: %f\n",
   b4c70:	4620      	mov	r0, r4
   b4c72:	f7ff fb39 	bl	b42e8 <__aeabi_f2d>
   b4c76:	4602      	mov	r2, r0
   b4c78:	4817      	ldr	r0, [pc, #92]	; (b4cd8 <loop+0x8c>)
   b4c7a:	460b      	mov	r3, r1
   b4c7c:	6800      	ldr	r0, [r0, #0]
   b4c7e:	4917      	ldr	r1, [pc, #92]	; (b4cdc <loop+0x90>)

	float y_val = output->data.f[0];

	Serial.printlnf("%.2f, %.2f", x_val, y_val);
	delay(500);
   b4c80:	b004      	add	sp, #16
   b4c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		error_reporter->Report("Invoke failed on x_val: %f\n",
   b4c86:	f00f bc43 	b.w	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	float y_val = output->data.f[0];
   b4c8a:	4b15      	ldr	r3, [pc, #84]	; (b4ce0 <loop+0x94>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	685b      	ldr	r3, [r3, #4]
   b4c90:	681e      	ldr	r6, [r3, #0]
	Serial.printlnf("%.2f, %.2f", x_val, y_val);
   b4c92:	f010 f843 	bl	c4d1c <_Z16_fetch_usbserialv>
   b4c96:	4605      	mov	r5, r0
   b4c98:	4620      	mov	r0, r4
   b4c9a:	f7ff fb25 	bl	b42e8 <__aeabi_f2d>
   b4c9e:	4602      	mov	r2, r0
   b4ca0:	460b      	mov	r3, r1
   b4ca2:	4630      	mov	r0, r6
   b4ca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4ca8:	f7ff fb1e 	bl	b42e8 <__aeabi_f2d>
   b4cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4cb0:	e9cd 0100 	strd	r0, r1, [sp]
   b4cb4:	490b      	ldr	r1, [pc, #44]	; (b4ce4 <loop+0x98>)
   b4cb6:	4628      	mov	r0, r5
   b4cb8:	f7ff ff70 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
	delay(500);
   b4cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4cc0:	b004      	add	sp, #16
   b4cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay(500);
   b4cc6:	f00f bead 	b.w	c4a24 <delay>
   b4cca:	bf00      	nop
   b4ccc:	00000000 	.word	0x00000000
   b4cd0:	2003d640 	.word	0x2003d640
   b4cd4:	2003d644 	.word	0x2003d644
   b4cd8:	2003bc74 	.word	0x2003bc74
   b4cdc:	000c6eb7 	.word	0x000c6eb7
   b4ce0:	2003d6c8 	.word	0x2003d6c8
   b4ce4:	000c6ed3 	.word	0x000c6ed3

000b4ce8 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ce8:	4b13      	ldr	r3, [pc, #76]	; (b4d38 <_GLOBAL__sub_I_SystemMode+0x50>)
   b4cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4cec:	2200      	movs	r2, #0
   b4cee:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4cf2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4cf6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4cf8:	2003      	movs	r0, #3
   b4cfa:	f00f fcdb 	bl	c46b4 <set_system_mode>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   b4cfe:	4b0f      	ldr	r3, [pc, #60]	; (b4d3c <_GLOBAL__sub_I_SystemMode+0x54>)
const tflite::Model *model = tflite::GetModel(g_linear_regresion_model_data);
   b4d00:	4d0f      	ldr	r5, [pc, #60]	; (b4d40 <_GLOBAL__sub_I_SystemMode+0x58>)
   b4d02:	681a      	ldr	r2, [r3, #0]
																		kTensorArenaSize, error_reporter);
   b4d04:	4c0f      	ldr	r4, [pc, #60]	; (b4d44 <_GLOBAL__sub_I_SystemMode+0x5c>)
   b4d06:	4413      	add	r3, r2
static tflite::ops::micro::AllOpsResolver resolver;
   b4d08:	4a0f      	ldr	r2, [pc, #60]	; (b4d48 <_GLOBAL__sub_I_SystemMode+0x60>)
const tflite::Model *model = tflite::GetModel(g_linear_regresion_model_data);
   b4d0a:	602b      	str	r3, [r5, #0]
static tflite::ops::micro::AllOpsResolver resolver;
   b4d0c:	4610      	mov	r0, r2
   b4d0e:	f00b fe15 	bl	c093c <_ZN6tflite3ops5micro14AllOpsResolverC1Ev>
																		kTensorArenaSize, error_reporter);
   b4d12:	4b0e      	ldr	r3, [pc, #56]	; (b4d4c <_GLOBAL__sub_I_SystemMode+0x64>)
   b4d14:	4a0c      	ldr	r2, [pc, #48]	; (b4d48 <_GLOBAL__sub_I_SystemMode+0x60>)
   b4d16:	681b      	ldr	r3, [r3, #0]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b4d1e:	6829      	ldr	r1, [r5, #0]
   b4d20:	9300      	str	r3, [sp, #0]
   b4d22:	4620      	mov	r0, r4
   b4d24:	4b0a      	ldr	r3, [pc, #40]	; (b4d50 <_GLOBAL__sub_I_SystemMode+0x68>)
   b4d26:	f001 f89d 	bl	b5e64 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE>
TfLiteStatus allocate_status = interpreter.AllocateTensors();
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	f001 f8f0 	bl	b5f10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
   b4d30:	4b08      	ldr	r3, [pc, #32]	; (b4d54 <_GLOBAL__sub_I_SystemMode+0x6c>)
   b4d32:	7018      	strb	r0, [r3, #0]
   b4d34:	b003      	add	sp, #12
   b4d36:	bd30      	pop	{r4, r5, pc}
   b4d38:	2003c628 	.word	0x2003c628
   b4d3c:	2003bc78 	.word	0x2003bc78
   b4d40:	2003d6c4 	.word	0x2003d6c4
   b4d44:	2003d644 	.word	0x2003d644
   b4d48:	2003c634 	.word	0x2003c634
   b4d4c:	2003bc74 	.word	0x2003bc74
   b4d50:	2003d6cc 	.word	0x2003d6cc
   b4d54:	2003d63c 	.word	0x2003d63c

000b4d58 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
   b4d58:	b510      	push	{r4, lr}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   b4d5a:	edd0 7a00 	vldr	s15, [r0]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   b4d5e:	ee80 0a27 	vdiv.f32	s0, s0, s15
  auto quantize = [scale, zero_point](float f) {
   b4d62:	4604      	mov	r4, r0
   b4d64:	f010 fbaa 	bl	c54bc <roundf>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   b4d68:	6860      	ldr	r0, [r4, #4]
   b4d6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  };
   b4d6e:	ee10 3a10 	vmov	r3, s0
   b4d72:	4403      	add	r3, r0
   b4d74:	4618      	mov	r0, r3
   b4d76:	bd10      	pop	{r4, pc}

000b4d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
   b4d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  if (activation == kTfLiteActRelu) {
   b4d7a:	2801      	cmp	r0, #1
                                           int32_t* act_min, int32_t* act_max) {
   b4d7c:	4614      	mov	r4, r2
  const auto zero_point = output->params.zero_point;
   b4d7e:	691a      	ldr	r2, [r3, #16]
  };
   b4d80:	68db      	ldr	r3, [r3, #12]
   b4d82:	9300      	str	r3, [sp, #0]
                                           int32_t* act_min, int32_t* act_max) {
   b4d84:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   b4d88:	460d      	mov	r5, r1
  };
   b4d8a:	9201      	str	r2, [sp, #4]
  if (activation == kTfLiteActRelu) {
   b4d8c:	d10a      	bne.n	b4da4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x2c>
    *act_min = std::max(qmin, quantize(0.0));
   b4d8e:	ed9f 0a18 	vldr	s0, [pc, #96]	; b4df0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x78>
   b4d92:	4668      	mov	r0, sp
   b4d94:	f7ff ffe0 	bl	b4d58 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   b4d98:	42a8      	cmp	r0, r5
   b4d9a:	bfac      	ite	ge
   b4d9c:	6038      	strge	r0, [r7, #0]
   b4d9e:	603d      	strlt	r5, [r7, #0]
  } else if (activation == kTfLiteActRelu1) {
    *act_min = std::max(qmin, quantize(-1.0));
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
   b4da0:	6034      	str	r4, [r6, #0]
  }
}
   b4da2:	e013      	b.n	b4dcc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x54>
  } else if (activation == kTfLiteActRelu6) {
   b4da4:	2803      	cmp	r0, #3
   b4da6:	d113      	bne.n	b4dd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x58>
    *act_min = std::max(qmin, quantize(0.0));
   b4da8:	ed9f 0a11 	vldr	s0, [pc, #68]	; b4df0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x78>
   b4dac:	4668      	mov	r0, sp
   b4dae:	f7ff ffd3 	bl	b4d58 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   b4db2:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   b4db6:	42a8      	cmp	r0, r5
   b4db8:	bfac      	ite	ge
   b4dba:	6038      	strge	r0, [r7, #0]
   b4dbc:	603d      	strlt	r5, [r7, #0]
    *act_max = std::min(qmax, quantize(1.0));
   b4dbe:	4668      	mov	r0, sp
   b4dc0:	f7ff ffca 	bl	b4d58 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   b4dc4:	4284      	cmp	r4, r0
   b4dc6:	bfd4      	ite	le
   b4dc8:	6034      	strle	r4, [r6, #0]
   b4dca:	6030      	strgt	r0, [r6, #0]
}
   b4dcc:	b003      	add	sp, #12
   b4dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (activation == kTfLiteActRelu1) {
   b4dd0:	2802      	cmp	r0, #2
   b4dd2:	d10b      	bne.n	b4dec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x74>
    *act_min = std::max(qmin, quantize(-1.0));
   b4dd4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b4dd8:	4668      	mov	r0, sp
   b4dda:	f7ff ffbd 	bl	b4d58 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   b4dde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   b4de2:	42a8      	cmp	r0, r5
   b4de4:	bfac      	ite	ge
   b4de6:	6038      	strge	r0, [r7, #0]
   b4de8:	603d      	strlt	r5, [r7, #0]
    *act_max = std::min(qmax, quantize(1.0));
   b4dea:	e7e8      	b.n	b4dbe <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x46>
    *act_min = qmin;
   b4dec:	6039      	str	r1, [r7, #0]
   b4dee:	e7d7      	b.n	b4da0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x28>
   b4df0:	00000000 	.word	0x00000000

000b4df4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
   b4df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4df6:	edd1 7a03 	vldr	s15, [r1, #12]
   b4dfa:	ed92 7a03 	vldr	s14, [r2, #12]
   b4dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   b4e02:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   b4e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e0c:	da09      	bge.n	b4e22 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   b4e0e:	4b0f      	ldr	r3, [pc, #60]	; (b4e4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   b4e10:	9300      	str	r3, [sp, #0]
   b4e12:	6944      	ldr	r4, [r0, #20]
   b4e14:	4a0e      	ldr	r2, [pc, #56]	; (b4e50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   b4e16:	490f      	ldr	r1, [pc, #60]	; (b4e54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   b4e18:	2376      	movs	r3, #118	; 0x76
   b4e1a:	47a0      	blx	r4
   b4e1c:	2001      	movs	r0, #1
}
   b4e1e:	b002      	add	sp, #8
   b4e20:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e22:	ee17 0a90 	vmov	r0, s15
   b4e26:	f7ff fa5f 	bl	b42e8 <__aeabi_f2d>
   b4e2a:	4604      	mov	r4, r0
  *multiplier = input_product_scale / output->params.scale;
   b4e2c:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e2e:	460d      	mov	r5, r1
  *multiplier = input_product_scale / output->params.scale;
   b4e30:	f7ff fa5a 	bl	b42e8 <__aeabi_f2d>
   b4e34:	460b      	mov	r3, r1
   b4e36:	4602      	mov	r2, r0
   b4e38:	4629      	mov	r1, r5
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	f7ff fbd6 	bl	b45ec <__aeabi_ddiv>
   b4e40:	9b06      	ldr	r3, [sp, #24]
   b4e42:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   b4e46:	2000      	movs	r0, #0
   b4e48:	e7e9      	b.n	b4e1e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   b4e4a:	bf00      	nop
   b4e4c:	000c6f57 	.word	0x000c6f57
   b4e50:	000c6ede 	.word	0x000c6ede
   b4e54:	000c6f40 	.word	0x000c6f40

000b4e58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
   b4e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e5c:	ed2d 8b02 	vpush	{d8}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e60:	ed91 8a03 	vldr	s16, [r1, #12]
   b4e64:	edd2 7a03 	vldr	s15, [r2, #12]
                                              double* multiplier) {
   b4e68:	b087      	sub	sp, #28
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e6a:	ee28 8a27 	vmul.f32	s16, s16, s15
                                              double* multiplier) {
   b4e6e:	461e      	mov	r6, r3
   b4e70:	e9dd b312 	ldrd	fp, r3, [sp, #72]	; 0x48
   b4e74:	4604      	mov	r4, r0
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e76:	ee18 0a10 	vmov	r0, s16
                                              double* multiplier) {
   b4e7a:	460d      	mov	r5, r1
   b4e7c:	4692      	mov	sl, r2
   b4e7e:	9305      	str	r3, [sp, #20]
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e80:	f7ff fa32 	bl	b42e8 <__aeabi_f2d>
   b4e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (bias) {
   b4e88:	b31e      	cbz	r6, b4ed2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7a>
    const double bias_scale = bias->params.scale;
   b4e8a:	edd6 8a03 	vldr	s17, [r6, #12]
   b4e8e:	ee18 0a90 	vmov	r0, s17
   b4e92:	f7ff fa29 	bl	b42e8 <__aeabi_f2d>
    TF_LITE_ENSURE(context,
   b4e96:	4602      	mov	r2, r0
   b4e98:	460b      	mov	r3, r1
    const double bias_scale = bias->params.scale;
   b4e9a:	4606      	mov	r6, r0
   b4e9c:	460f      	mov	r7, r1
    TF_LITE_ENSURE(context,
   b4e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b4ea2:	f7ff f8c1 	bl	b4028 <__aeabi_dsub>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   b4ea6:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   b4eae:	4680      	mov	r8, r0
   b4eb0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   b4eb4:	dc01      	bgt.n	b4eba <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x62>
	return __b;
      return __a;
   b4eb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   b4eba:	a316      	add	r3, pc, #88	; (adr r3, b4f14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xbc>)
   b4ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ec0:	4630      	mov	r0, r6
   b4ec2:	4639      	mov	r1, r7
   b4ec4:	f7ff fa68 	bl	b4398 <__aeabi_dmul>
   b4ec8:	4642      	mov	r2, r8
   b4eca:	464b      	mov	r3, r9
   b4ecc:	f7ff fcea 	bl	b48a4 <__aeabi_dcmpge>
   b4ed0:	b160      	cbz	r0, b4eec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x94>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   b4ed2:	9b05      	ldr	r3, [sp, #20]
   b4ed4:	9312      	str	r3, [sp, #72]	; 0x48
   b4ed6:	4652      	mov	r2, sl
   b4ed8:	465b      	mov	r3, fp
   b4eda:	4629      	mov	r1, r5
   b4edc:	4620      	mov	r0, r4
}
   b4ede:	b007      	add	sp, #28
   b4ee0:	ecbd 8b02 	vpop	{d8}
   b4ee4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   b4ee8:	f7ff bf84 	b.w	b4df4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context,
   b4eec:	4b06      	ldr	r3, [pc, #24]	; (b4f08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
   b4eee:	9300      	str	r3, [sp, #0]
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	6965      	ldr	r5, [r4, #20]
   b4ef4:	4a05      	ldr	r2, [pc, #20]	; (b4f0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
   b4ef6:	4906      	ldr	r1, [pc, #24]	; (b4f10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb8>)
   b4ef8:	2368      	movs	r3, #104	; 0x68
   b4efa:	47a8      	blx	r5
}
   b4efc:	2001      	movs	r0, #1
   b4efe:	b007      	add	sp, #28
   b4f00:	ecbd 8b02 	vpop	{d8}
   b4f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f08:	000c6f70 	.word	0x000c6f70
   b4f0c:	000c6ede 	.word	0x000c6ede
   b4f10:	000c6f40 	.word	0x000c6f40
   b4f14:	a0b5ed8d 	.word	0xa0b5ed8d
   b4f18:	3eb0c6f7 	.word	0x3eb0c6f7

000b4f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   b4f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4f1e:	460c      	mov	r4, r1
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   b4f20:	7811      	ldrb	r1, [r2, #0]
   b4f22:	2903      	cmp	r1, #3
   b4f24:	d00d      	beq.n	b4f42 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x26>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   b4f26:	2909      	cmp	r1, #9
   b4f28:	d017      	beq.n	b4f5a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3e>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   b4f2a:	2907      	cmp	r1, #7
   b4f2c:	d019      	beq.n	b4f62 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   b4f2e:	4b0f      	ldr	r3, [pc, #60]	; (b4f6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x50>)
   b4f30:	9300      	str	r3, [sp, #0]
   b4f32:	6944      	ldr	r4, [r0, #20]
   b4f34:	4a0e      	ldr	r2, [pc, #56]	; (b4f70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x54>)
   b4f36:	490f      	ldr	r1, [pc, #60]	; (b4f74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x58>)
   b4f38:	23a9      	movs	r3, #169	; 0xa9
   b4f3a:	47a0      	blx	r4
   b4f3c:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   b4f3e:	b003      	add	sp, #12
   b4f40:	bd30      	pop	{r4, r5, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   b4f42:	20ff      	movs	r0, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   b4f44:	2100      	movs	r1, #0
  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b4f46:	9d06      	ldr	r5, [sp, #24]
   b4f48:	e9cd 3500 	strd	r3, r5, [sp]
   b4f4c:	4613      	mov	r3, r2
   b4f4e:	4602      	mov	r2, r0
   b4f50:	4620      	mov	r0, r4
   b4f52:	f7ff ff11 	bl	b4d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
  return kTfLiteOk;
   b4f56:	2000      	movs	r0, #0
   b4f58:	e7f1      	b.n	b4f3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x22>
    qmax = std::numeric_limits<int8_t>::max();
   b4f5a:	207f      	movs	r0, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   b4f5c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   b4f60:	e7f1      	b.n	b4f46 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2a>
    qmin = std::numeric_limits<int16_t>::min();
   b4f62:	4905      	ldr	r1, [pc, #20]	; (b4f78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5c>)
    qmax = std::numeric_limits<int16_t>::max();
   b4f64:	f647 70ff 	movw	r0, #32767	; 0x7fff
   b4f68:	e7ed      	b.n	b4f46 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2a>
   b4f6a:	bf00      	nop
   b4f6c:	000c6fcf 	.word	0x000c6fcf
   b4f70:	000c6ede 	.word	0x000c6ede
   b4f74:	000c6f40 	.word	0x000c6f40
   b4f78:	ffff8000 	.word	0xffff8000

000b4f7c <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>:

void CalculateActivationRangeUint8(TfLiteFusedActivation activation,
                                   TfLiteTensor* output, int32_t* act_min,
                                   int32_t* act_max) {
   b4f7c:	b507      	push	{r0, r1, r2, lr}
  const int32_t qmin = std::numeric_limits<uint8_t>::min();
  const int32_t qmax = std::numeric_limits<uint8_t>::max();

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b4f7e:	e9cd 2300 	strd	r2, r3, [sp]
   b4f82:	460b      	mov	r3, r1
   b4f84:	22ff      	movs	r2, #255	; 0xff
   b4f86:	2100      	movs	r1, #0
   b4f88:	f7ff fef6 	bl	b4d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
}
   b4f8c:	b003      	add	sp, #12
   b4f8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>:
    int32_t* per_channel_multiplier, int* per_channel_shift) {
   b4f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f98:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   b4f9c:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
   b4fa0:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift) {
   b4fa4:	ee09 3a10 	vmov	s18, r3
   b4fa8:	b08b      	sub	sp, #44	; 0x2c
   b4faa:	4605      	mov	r5, r0
   b4fac:	460e      	mov	r6, r1
   b4fae:	4617      	mov	r7, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   b4fb0:	d00c      	beq.n	b4fcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x38>
   b4fb2:	2401      	movs	r4, #1
   b4fb4:	4b66      	ldr	r3, [pc, #408]	; (b5150 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1bc>)
   b4fb6:	9301      	str	r3, [sp, #4]
   b4fb8:	e9cd 8402 	strd	r8, r4, [sp, #8]
   b4fbc:	4b65      	ldr	r3, [pc, #404]	; (b5154 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c0>)
   b4fbe:	9300      	str	r3, [sp, #0]
   b4fc0:	6945      	ldr	r5, [r0, #20]
   b4fc2:	2320      	movs	r3, #32
    TF_LITE_ENSURE_EQ(
   b4fc4:	4a64      	ldr	r2, [pc, #400]	; (b5158 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b4fc6:	4965      	ldr	r1, [pc, #404]	; (b515c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c8>)
   b4fc8:	47a8      	blx	r5
   b4fca:	e00f      	b.n	b4fec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   b4fcc:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   b4fd0:	2c01      	cmp	r4, #1
   b4fd2:	d011      	beq.n	b4ff8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x64>
   b4fd4:	e9cd 4802 	strd	r4, r8, [sp, #8]
   b4fd8:	4b5d      	ldr	r3, [pc, #372]	; (b5150 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1bc>)
   b4fda:	9301      	str	r3, [sp, #4]
   b4fdc:	4b60      	ldr	r3, [pc, #384]	; (b5160 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1cc>)
   b4fde:	9300      	str	r3, [sp, #0]
   b4fe0:	6944      	ldr	r4, [r0, #20]
   b4fe2:	4a5d      	ldr	r2, [pc, #372]	; (b5158 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b4fe4:	495d      	ldr	r1, [pc, #372]	; (b515c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c8>)
   b4fe6:	2322      	movs	r3, #34	; 0x22
   b4fe8:	47a0      	blx	r4
   b4fea:	4644      	mov	r4, r8
}
   b4fec:	4620      	mov	r0, r4
   b4fee:	b00b      	add	sp, #44	; 0x2c
   b4ff0:	ecbd 8b04 	vpop	{d8-d9}
   b4ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto* affine_quantization =
   b4ff8:	6b51      	ldr	r1, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   b4ffa:	b939      	cbnz	r1, b500c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x78>
   b4ffc:	4b59      	ldr	r3, [pc, #356]	; (b5164 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d0>)
   b4ffe:	9300      	str	r3, [sp, #0]
   b5000:	6945      	ldr	r5, [r0, #20]
   b5002:	232d      	movs	r3, #45	; 0x2d
  TF_LITE_ENSURE(context, affine_quantization->scale);
   b5004:	4a54      	ldr	r2, [pc, #336]	; (b5158 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b5006:	4958      	ldr	r1, [pc, #352]	; (b5168 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d4>)
   b5008:	47a8      	blx	r5
   b500a:	e7ef      	b.n	b4fec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
   b500c:	680b      	ldr	r3, [r1, #0]
   b500e:	b923      	cbnz	r3, b501a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x86>
   b5010:	4b56      	ldr	r3, [pc, #344]	; (b516c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d8>)
   b5012:	9300      	str	r3, [sp, #0]
   b5014:	6945      	ldr	r5, [r0, #20]
   b5016:	232e      	movs	r3, #46	; 0x2e
   b5018:	e7f4      	b.n	b5004 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   b501a:	f8d3 a000 	ldr.w	sl, [r3]
  if (is_per_channel) {
   b501e:	f1ba 0f01 	cmp.w	sl, #1
   b5022:	dd2a      	ble.n	b507a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xe6>
    TF_LITE_ENSURE_EQ(context, input->type, kTfLiteInt8);
   b5024:	7832      	ldrb	r2, [r6, #0]
   b5026:	2a09      	cmp	r2, #9
   b5028:	d009      	beq.n	b503e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xaa>
   b502a:	2309      	movs	r3, #9
   b502c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b5030:	4b4f      	ldr	r3, [pc, #316]	; (b5170 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1dc>)
   b5032:	9301      	str	r3, [sp, #4]
   b5034:	4b4f      	ldr	r3, [pc, #316]	; (b5174 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e0>)
   b5036:	9300      	str	r3, [sp, #0]
   b5038:	6945      	ldr	r5, [r0, #20]
   b503a:	2332      	movs	r3, #50	; 0x32
   b503c:	e7c2      	b.n	b4fc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   b503e:	f897 c000 	ldrb.w	ip, [r7]
   b5042:	f1bc 0f09 	cmp.w	ip, #9
   b5046:	d008      	beq.n	b505a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xc6>
   b5048:	4b49      	ldr	r3, [pc, #292]	; (b5170 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1dc>)
   b504a:	9301      	str	r3, [sp, #4]
   b504c:	e9cd c202 	strd	ip, r2, [sp, #8]
   b5050:	4b49      	ldr	r3, [pc, #292]	; (b5178 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e4>)
   b5052:	9300      	str	r3, [sp, #0]
   b5054:	6945      	ldr	r5, [r0, #20]
   b5056:	2333      	movs	r3, #51	; 0x33
   b5058:	e7b4      	b.n	b4fc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
    TF_LITE_ENSURE_EQ(
   b505a:	68ba      	ldr	r2, [r7, #8]
   b505c:	6889      	ldr	r1, [r1, #8]
   b505e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   b5062:	6852      	ldr	r2, [r2, #4]
   b5064:	4592      	cmp	sl, r2
   b5066:	d008      	beq.n	b507a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xe6>
   b5068:	4b44      	ldr	r3, [pc, #272]	; (b517c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e8>)
   b506a:	9301      	str	r3, [sp, #4]
   b506c:	e9cd a202 	strd	sl, r2, [sp, #8]
   b5070:	4b43      	ldr	r3, [pc, #268]	; (b5180 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1ec>)
   b5072:	9300      	str	r3, [sp, #0]
   b5074:	6945      	ldr	r5, [r0, #20]
   b5076:	2334      	movs	r3, #52	; 0x34
   b5078:	e7a4      	b.n	b4fc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
  const float input_scale = input->params.scale;
   b507a:	edd6 7a03 	vldr	s15, [r6, #12]
  const float output_scale = output->params.scale;
   b507e:	9a18      	ldr	r2, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   b5080:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   b5084:	edd2 7a03 	vldr	s15, [r2, #12]
   b5088:	3304      	adds	r3, #4
   b508a:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   b508e:	9304      	str	r3, [sp, #16]
   b5090:	f04f 0b00 	mov.w	fp, #0
   b5094:	45da      	cmp	sl, fp
   b5096:	dd32      	ble.n	b50fe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x16a>
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b5098:	9b04      	ldr	r3, [sp, #16]
   b509a:	461a      	mov	r2, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   b509c:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b50a0:	f852 3b04 	ldr.w	r3, [r2], #4
   b50a4:	9204      	str	r2, [sp, #16]
   b50a6:	9305      	str	r3, [sp, #20]
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50a8:	f7ff f91e 	bl	b42e8 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b50ac:	9b05      	ldr	r3, [sp, #20]
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50ae:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b50b0:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50b2:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b50b4:	f7ff f918 	bl	b42e8 <__aeabi_f2d>
   b50b8:	4602      	mov	r2, r0
   b50ba:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50bc:	4640      	mov	r0, r8
   b50be:	4649      	mov	r1, r9
   b50c0:	f7ff f96a 	bl	b4398 <__aeabi_dmul>
   b50c4:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   b50c6:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50ca:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   b50cc:	f7ff f90c 	bl	b42e8 <__aeabi_f2d>
   b50d0:	4602      	mov	r2, r0
   b50d2:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   b50d4:	4640      	mov	r0, r8
   b50d6:	4649      	mov	r1, r9
   b50d8:	f7ff fa88 	bl	b45ec <__aeabi_ddiv>
   b50dc:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &shift);
   b50e0:	a908      	add	r1, sp, #32
   b50e2:	a807      	add	r0, sp, #28
   b50e4:	f000 f864 	bl	b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
   b50e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   b50ea:	9b07      	ldr	r3, [sp, #28]
   b50ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    per_channel_shift[i] = shift;
   b50f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b50f2:	9b08      	ldr	r3, [sp, #32]
   b50f4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   b50f8:	f10b 0b01 	add.w	fp, fp, #1
   b50fc:	e7ca      	b.n	b5094 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x100>
  if (input->type == kTfLiteUInt8) {
   b50fe:	7833      	ldrb	r3, [r6, #0]
   b5100:	2b03      	cmp	r3, #3
   b5102:	d122      	bne.n	b514a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1b6>
    double real_multiplier = 0.0;
   b5104:	2200      	movs	r2, #0
   b5106:	2300      	movs	r3, #0
   b5108:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   b510c:	ab08      	add	r3, sp, #32
   b510e:	9301      	str	r3, [sp, #4]
   b5110:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5112:	9300      	str	r3, [sp, #0]
   b5114:	463a      	mov	r2, r7
   b5116:	ee19 3a10 	vmov	r3, s18
   b511a:	4631      	mov	r1, r6
   b511c:	4628      	mov	r0, r5
   b511e:	f7ff fe9b 	bl	b4e58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   b5122:	2800      	cmp	r0, #0
   b5124:	f47f af62 	bne.w	b4fec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   b5128:	981a      	ldr	r0, [sp, #104]	; 0x68
   b512a:	a907      	add	r1, sp, #28
   b512c:	ed9d 0b08 	vldr	d0, [sp, #32]
   b5130:	f000 f83e 	bl	b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
   b5134:	9b07      	ldr	r3, [sp, #28]
   b5136:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    CalculateActivationRangeUint8(activation, output, output_activation_min,
   b5138:	e9dd 1018 	ldrd	r1, r0, [sp, #96]	; 0x60
    *shift = -exponent;
   b513c:	425b      	negs	r3, r3
   b513e:	6013      	str	r3, [r2, #0]
    CalculateActivationRangeUint8(activation, output, output_activation_min,
   b5140:	7800      	ldrb	r0, [r0, #0]
   b5142:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
   b5146:	f7ff ff19 	bl	b4f7c <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  return kTfLiteOk;
   b514a:	2400      	movs	r4, #0
   b514c:	e74e      	b.n	b4fec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
   b514e:	bf00      	nop
   b5150:	000c6fef 	.word	0x000c6fef
   b5154:	000c7009 	.word	0x000c7009
   b5158:	000c6ede 	.word	0x000c6ede
   b515c:	000c6fd5 	.word	0x000c6fd5
   b5160:	000c7022 	.word	0x000c7022
   b5164:	000c703c 	.word	0x000c703c
   b5168:	000c6f40 	.word	0x000c6f40
   b516c:	000c7050 	.word	0x000c7050
   b5170:	000c9197 	.word	0x000c9197
   b5174:	000c706b 	.word	0x000c706b
   b5178:	000c7077 	.word	0x000c7077
   b517c:	000c7084 	.word	0x000c7084
   b5180:	000c70c1 	.word	0x000c70c1

000b5184 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>:

void CalculateActivationRangeInt8(TfLiteFusedActivation activation,
                                  TfLiteTensor* output, int32_t* act_min,
                                  int32_t* act_max) {
   b5184:	b507      	push	{r0, r1, r2, lr}
  const int32_t qmin = std::numeric_limits<int8_t>::min();
  const int32_t qmax = std::numeric_limits<int8_t>::max();

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b5186:	e9cd 2300 	strd	r2, r3, [sp]
   b518a:	460b      	mov	r3, r1
   b518c:	227f      	movs	r2, #127	; 0x7f
   b518e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   b5192:	f7ff fdf1 	bl	b4d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
}
   b5196:	b003      	add	sp, #12
   b5198:	f85d fb04 	ldr.w	pc, [sp], #4

000b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   b519c:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   b519e:	6889      	ldr	r1, [r1, #8]
   b51a0:	6880      	ldr	r0, [r0, #8]
   b51a2:	f7ff fce2 	bl	b4b6a <TfLiteIntArrayEqual>
}
   b51a6:	3800      	subs	r0, #0
   b51a8:	bf18      	it	ne
   b51aa:	2001      	movne	r0, #1
   b51ac:	bd08      	pop	{r3, pc}
	...

000b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
   b51b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
   b51b2:	2200      	movs	r2, #0
                        int* shift) {
   b51b4:	4606      	mov	r6, r0
   b51b6:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   b51b8:	2300      	movs	r3, #0
   b51ba:	ec51 0b10 	vmov	r0, r1, d0
   b51be:	ed8d 0b00 	vstr	d0, [sp]
   b51c2:	f7ff fb51 	bl	b4868 <__aeabi_dcmpeq>
   b51c6:	ed9d 0b00 	vldr	d0, [sp]
   b51ca:	4605      	mov	r5, r0
   b51cc:	b120      	cbz	r0, b51d8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
   b51ce:	2300      	movs	r3, #0
   b51d0:	6033      	str	r3, [r6, #0]
    *shift = 0;
   b51d2:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
   b51d4:	b002      	add	sp, #8
   b51d6:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
   b51d8:	4620      	mov	r0, r4
   b51da:	f00f ffcd 	bl	c5178 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b51de:	4b14      	ldr	r3, [pc, #80]	; (b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
   b51e0:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   b51e2:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b51e6:	f7ff f8d7 	bl	b4398 <__aeabi_dmul>
}
inline double TfLiteRound(const double x) { return ::round(x); }
#else
template <class T>
inline T TfLiteRound(const T x) {
  return std::round(x);
   b51ea:	ec41 0b10 	vmov	d0, r0, r1
   b51ee:	f00f fff9 	bl	c51e4 <round>
   b51f2:	ec51 0b10 	vmov	r0, r1, d0
   b51f6:	f7ff fc01 	bl	b49fc <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   b51fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b51fe:	4282      	cmp	r2, r0
   b5200:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b5204:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   b5206:	da01      	bge.n	b520c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
   b5208:	f00f faf8 	bl	c47fc <abort>
  if (q_fixed == (1ll << 31)) {
   b520c:	42a9      	cmp	r1, r5
   b520e:	bf08      	it	eq
   b5210:	4290      	cmpeq	r0, r2
    ++*shift;
   b5212:	bf02      	ittt	eq
   b5214:	6823      	ldreq	r3, [r4, #0]
   b5216:	3301      	addeq	r3, #1
   b5218:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   b521a:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
   b521c:	bf08      	it	eq
   b521e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
   b5222:	321f      	adds	r2, #31
    *shift = 0;
   b5224:	bfbc      	itt	lt
   b5226:	2300      	movlt	r3, #0
   b5228:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   b522a:	6033      	str	r3, [r6, #0]
   b522c:	e7d2      	b.n	b51d4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
   b522e:	bf00      	nop
   b5230:	41e00000 	.word	0x41e00000

000b5234 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
   b5234:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   b5236:	4b0c      	ldr	r3, [pc, #48]	; (b5268 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
   b5238:	4605      	mov	r5, r0
   b523a:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   b523c:	2200      	movs	r2, #0
   b523e:	ec51 0b10 	vmov	r0, r1, d0
   b5242:	ed8d 0b00 	vstr	d0, [sp]
   b5246:	f7ff fb37 	bl	b48b8 <__aeabi_dcmpgt>
   b524a:	ed9d 0b00 	vldr	d0, [sp]
   b524e:	b908      	cbnz	r0, b5254 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
   b5250:	f00f fad4 	bl	c47fc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   b5254:	4621      	mov	r1, r4
   b5256:	4628      	mov	r0, r5
   b5258:	f7ff ffaa 	bl	b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
   b525c:	6823      	ldr	r3, [r4, #0]
   b525e:	2b00      	cmp	r3, #0
   b5260:	dbf6      	blt.n	b5250 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
   b5262:	b003      	add	sp, #12
   b5264:	bd30      	pop	{r4, r5, pc}
   b5266:	bf00      	nop
   b5268:	3ff00000 	.word	0x3ff00000

000b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
   b526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b526e:	ec55 4b10 	vmov	r4, r5, d0
   b5272:	4607      	mov	r7, r0
   b5274:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   b5276:	4b0f      	ldr	r3, [pc, #60]	; (b52b4 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x48>)
   b5278:	ee10 0a10 	vmov	r0, s0
   b527c:	2200      	movs	r2, #0
   b527e:	4629      	mov	r1, r5
   b5280:	f7ff fafc 	bl	b487c <__aeabi_dcmplt>
   b5284:	b908      	cbnz	r0, b528a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1e>
   b5286:	f00f fab9 	bl	c47fc <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   b528a:	2200      	movs	r2, #0
   b528c:	2300      	movs	r3, #0
   b528e:	4620      	mov	r0, r4
   b5290:	4629      	mov	r1, r5
   b5292:	f7ff fb11 	bl	b48b8 <__aeabi_dcmpgt>
   b5296:	2800      	cmp	r0, #0
   b5298:	d0f5      	beq.n	b5286 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   b529a:	ec45 4b10 	vmov	d0, r4, r5
   b529e:	a901      	add	r1, sp, #4
   b52a0:	4638      	mov	r0, r7
   b52a2:	f7ff ff85 	bl	b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
   b52a6:	9b01      	ldr	r3, [sp, #4]
   b52a8:	2b00      	cmp	r3, #0
   b52aa:	dcec      	bgt.n	b5286 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  *left_shift = shift;
   b52ac:	6033      	str	r3, [r6, #0]
}
   b52ae:	b003      	add	sp, #12
   b52b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b52b2:	bf00      	nop
   b52b4:	3ff00000 	.word	0x3ff00000

000b52b8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   b52b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b52bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   b52c0:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b52c4:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   b52c8:	ec57 6b10 	vmov	r6, r7, d0
   b52cc:	ec59 8b11 	vmov	r8, r9, d1
   b52d0:	4693      	mov	fp, r2
   b52d2:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b52d4:	f7fe fff6 	bl	b42c4 <__aeabi_i2d>
   b52d8:	4642      	mov	r2, r8
   b52da:	4604      	mov	r4, r0
   b52dc:	460d      	mov	r5, r1
   b52de:	464b      	mov	r3, r9
   b52e0:	4630      	mov	r0, r6
   b52e2:	4639      	mov	r1, r7
   b52e4:	f7ff f858 	bl	b4398 <__aeabi_dmul>
   b52e8:	4602      	mov	r2, r0
   b52ea:	460b      	mov	r3, r1
   b52ec:	4620      	mov	r0, r4
   b52ee:	4629      	mov	r1, r5
   b52f0:	f7ff f852 	bl	b4398 <__aeabi_dmul>
   b52f4:	4602      	mov	r2, r0
   b52f6:	460b      	mov	r3, r1
   b52f8:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   b52fc:	a30a      	add	r3, pc, #40	; (adr r3, b5328 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
   b52fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5302:	f7ff fad9 	bl	b48b8 <__aeabi_dcmpgt>
   b5306:	b108      	cbz	r0, b530c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
   b5308:	ed9f 8b07 	vldr	d8, [pc, #28]	; b5328 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b530c:	eeb0 0a48 	vmov.f32	s0, s16
   b5310:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
   b5314:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b5318:	4659      	mov	r1, fp
   b531a:	4650      	mov	r0, sl
}
   b531c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b5320:	f7ff bf88 	b.w	b5234 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
   b5324:	f3af 8000 	nop.w
   b5328:	ffc00000 	.word	0xffc00000
   b532c:	41dfffff 	.word	0x41dfffff

000b5330 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   b5330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   b5334:	2401      	movs	r4, #1
                         int total_signed_bits) {
   b5336:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   b5338:	fa04 f000 	lsl.w	r0, r4, r0
   b533c:	3801      	subs	r0, #1
                         int total_signed_bits) {
   b533e:	4688      	mov	r8, r1
   b5340:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   b5342:	f7fe ffbf 	bl	b42c4 <__aeabi_i2d>
   b5346:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   b5348:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   b534c:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   b534e:	f1c0 0320 	rsb	r3, r0, #32
   b5352:	f1a0 0120 	sub.w	r1, r0, #32
   b5356:	fa24 f303 	lsr.w	r3, r4, r3
   b535a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   b535e:	fa04 f000 	lsl.w	r0, r4, r0
   b5362:	4319      	orrs	r1, r3
   b5364:	f7fe ffea 	bl	b433c <__aeabi_l2d>
   b5368:	4602      	mov	r2, r0
   b536a:	460b      	mov	r3, r1
   b536c:	4630      	mov	r0, r6
   b536e:	4639      	mov	r1, r7
   b5370:	f7ff f812 	bl	b4398 <__aeabi_dmul>
      (1ll << input_left_shift);
   b5374:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   b5378:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   b537a:	f1a8 0120 	sub.w	r1, r8, #32
   b537e:	fa24 f303 	lsr.w	r3, r4, r3
   b5382:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   b5386:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   b5388:	4319      	orrs	r1, r3
   b538a:	fa04 f008 	lsl.w	r0, r4, r8
   b538e:	f7fe ffd5 	bl	b433c <__aeabi_l2d>
   b5392:	4602      	mov	r2, r0
   b5394:	460b      	mov	r3, r1
  const double max_input_rescaled =
   b5396:	4630      	mov	r0, r6
   b5398:	4639      	mov	r1, r7
   b539a:	f7ff f927 	bl	b45ec <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   b539e:	ec41 0b10 	vmov	d0, r0, r1
   b53a2:	f00f fe65 	bl	c5070 <floor>
   b53a6:	ec51 0b10 	vmov	r0, r1, d0
   b53aa:	f7ff fa8f 	bl	b48cc <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   b53ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b53b2 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi>:
#include "tensorflow/lite/experimental/micro/micro_mutable_op_resolver.h"

namespace tflite {

const TfLiteRegistration* MicroMutableOpResolver::FindOp(
    tflite::BuiltinOperator op, int version) const {
   b53b2:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < registrations_len_; ++i) {
   b53b4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   b53b8:	2400      	movs	r4, #0
   b53ba:	685d      	ldr	r5, [r3, #4]
   b53bc:	4603      	mov	r3, r0
   b53be:	42a5      	cmp	r5, r4
   b53c0:	dd0c      	ble.n	b53dc <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x2a>
    const TfLiteRegistration& registration = registrations_[i];
    if ((registration.builtin_code == op) &&
   b53c2:	699e      	ldr	r6, [r3, #24]
   b53c4:	428e      	cmp	r6, r1
   b53c6:	d106      	bne.n	b53d6 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x24>
   b53c8:	6a1e      	ldr	r6, [r3, #32]
   b53ca:	4296      	cmp	r6, r2
   b53cc:	d103      	bne.n	b53d6 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x24>
    const TfLiteRegistration& registration = registrations_[i];
   b53ce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   b53d2:	3004      	adds	r0, #4
        (registration.version == version)) {
      return &registration;
    }
  }
  return nullptr;
}
   b53d4:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < registrations_len_; ++i) {
   b53d6:	3401      	adds	r4, #1
   b53d8:	3320      	adds	r3, #32
   b53da:	e7f0      	b.n	b53be <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0xc>
  return nullptr;
   b53dc:	2000      	movs	r0, #0
   b53de:	e7f9      	b.n	b53d4 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x22>

000b53e0 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci>:

const TfLiteRegistration* MicroMutableOpResolver::FindOp(const char* op,
                                                         int version) const {
   b53e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (int i = 0; i < registrations_len_; ++i) {
   b53e4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
                                                         int version) const {
   b53e8:	4606      	mov	r6, r0
  for (int i = 0; i < registrations_len_; ++i) {
   b53ea:	f8d3 8004 	ldr.w	r8, [r3, #4]
                                                         int version) const {
   b53ee:	4689      	mov	r9, r1
   b53f0:	4617      	mov	r7, r2
   b53f2:	4605      	mov	r5, r0
  for (int i = 0; i < registrations_len_; ++i) {
   b53f4:	2400      	movs	r4, #0
   b53f6:	45a0      	cmp	r8, r4
   b53f8:	dd12      	ble.n	b5420 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x40>
    const TfLiteRegistration& registration = registrations_[i];
    if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   b53fa:	69ab      	ldr	r3, [r5, #24]
   b53fc:	2b20      	cmp	r3, #32
   b53fe:	d10c      	bne.n	b541a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
        (strcmp(registration.custom_name, op) == 0) &&
   b5400:	69e8      	ldr	r0, [r5, #28]
   b5402:	4649      	mov	r1, r9
   b5404:	f7ff fb30 	bl	b4a68 <strcmp>
    if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   b5408:	b938      	cbnz	r0, b541a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
        (strcmp(registration.custom_name, op) == 0) &&
   b540a:	6a2b      	ldr	r3, [r5, #32]
   b540c:	42bb      	cmp	r3, r7
   b540e:	d104      	bne.n	b541a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
    const TfLiteRegistration& registration = registrations_[i];
   b5410:	eb06 1044 	add.w	r0, r6, r4, lsl #5
   b5414:	3004      	adds	r0, #4
        (registration.version == version)) {
      return &registration;
    }
  }
  return nullptr;
}
   b5416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (int i = 0; i < registrations_len_; ++i) {
   b541a:	3401      	adds	r4, #1
   b541c:	3520      	adds	r5, #32
   b541e:	e7ea      	b.n	b53f6 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x16>
  return nullptr;
   b5420:	2000      	movs	r0, #0
   b5422:	e7f8      	b.n	b5416 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x36>

000b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>:

void MicroMutableOpResolver::AddBuiltin(tflite::BuiltinOperator op,
                                        TfLiteRegistration* registration,
                                        int min_version, int max_version) {
   b5424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5428:	4686      	mov	lr, r0
   b542a:	4688      	mov	r8, r1
   b542c:	4691      	mov	r9, r2
   b542e:	461f      	mov	r7, r3
  for (int version = min_version; version <= max_version; ++version) {
    if (registrations_len_ >= TFLITE_REGISTRATIONS_MAX) {
   b5430:	f500 5a80 	add.w	sl, r0, #4096	; 0x1000
  for (int version = min_version; version <= max_version; ++version) {
   b5434:	9b08      	ldr	r3, [sp, #32]
   b5436:	429f      	cmp	r7, r3
   b5438:	dc15      	bgt.n	b5466 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x42>
    if (registrations_len_ >= TFLITE_REGISTRATIONS_MAX) {
   b543a:	f8da 6004 	ldr.w	r6, [sl, #4]
   b543e:	2e7f      	cmp	r6, #127	; 0x7f
   b5440:	dc11      	bgt.n	b5466 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x42>
      // TODO(petewarden) - Add error reporting hooks so we can report this!
      return;
    }
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
    registrations_len_ += 1;
   b5442:	1c73      	adds	r3, r6, #1
   b5444:	f8ca 3004 	str.w	r3, [sl, #4]

    *new_registration = *registration;
   b5448:	464d      	mov	r5, r9
   b544a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b544c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
   b5450:	1d34      	adds	r4, r6, #4
   b5452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5454:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b5458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    new_registration->builtin_code = op;
    new_registration->version = version;
   b545c:	6237      	str	r7, [r6, #32]
    new_registration->builtin_code = op;
   b545e:	f8c6 8018 	str.w	r8, [r6, #24]
  for (int version = min_version; version <= max_version; ++version) {
   b5462:	3701      	adds	r7, #1
   b5464:	e7e6      	b.n	b5434 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x10>
  }
}
   b5466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b546a <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() {}
   b546a:	4770      	bx	lr

000b546c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
  DebugLog("\r\n");
}
} // namespace

int MicroErrorReporter::Report(const char *format, va_list args)
{
   b546c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int output_cache_index = 0;
   b546e:	2300      	movs	r3, #0
{
   b5470:	b093      	sub	sp, #76	; 0x4c
   b5472:	460d      	mov	r5, r1
   b5474:	4614      	mov	r4, r2
      output_cache[output_cache_index] = 0;
   b5476:	461f      	mov	r7, r3
  while (*current != 0)
   b5478:	782a      	ldrb	r2, [r5, #0]
   b547a:	2a00      	cmp	r2, #0
   b547c:	d03c      	beq.n	b54f8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x8c>
    if (*current == '%')
   b547e:	2a25      	cmp	r2, #37	; 0x25
   b5480:	d12d      	bne.n	b54de <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x72>
      const char next = *(current + 1);
   b5482:	786e      	ldrb	r6, [r5, #1]
      if ((next == 'd') || (next == 's') || (next == 'f'))
   b5484:	f006 02fd 	and.w	r2, r6, #253	; 0xfd
   b5488:	2a64      	cmp	r2, #100	; 0x64
   b548a:	d001      	beq.n	b5490 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x24>
   b548c:	2e73      	cmp	r6, #115	; 0x73
   b548e:	d12b      	bne.n	b54e8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x7c>
        current += 1;
   b5490:	3501      	adds	r5, #1
        if (output_cache_index > 0)
   b5492:	b133      	cbz	r3, b54a2 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x36>
          output_cache[output_cache_index] = 0;
   b5494:	aa12      	add	r2, sp, #72	; 0x48
   b5496:	4413      	add	r3, r2
          DebugLog(output_cache);
   b5498:	a801      	add	r0, sp, #4
          output_cache[output_cache_index] = 0;
   b549a:	f803 7c44 	strb.w	r7, [r3, #-68]
          DebugLog(output_cache);
   b549e:	f00d fe19 	bl	c30d4 <DebugLog>
        if (next == 'd')
   b54a2:	2e64      	cmp	r6, #100	; 0x64
   b54a4:	d106      	bne.n	b54b4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>
          DebugLogInt32(va_arg(args, int));
   b54a6:	f854 0b04 	ldr.w	r0, [r4], #4
   b54aa:	f000 feaf 	bl	b620c <DebugLogInt32>
   b54ae:	2300      	movs	r3, #0
    current += 1;
   b54b0:	3501      	adds	r5, #1
  while (*current != 0)
   b54b2:	e7e1      	b.n	b5478 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xc>
        else if (next == 's')
   b54b4:	2e73      	cmp	r6, #115	; 0x73
   b54b6:	d104      	bne.n	b54c2 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x56>
          DebugLog(va_arg(args, char *));
   b54b8:	f854 0b04 	ldr.w	r0, [r4], #4
      DebugLog(output_cache);
   b54bc:	f00d fe0a 	bl	c30d4 <DebugLog>
      output_cache_index = 0;
   b54c0:	e7f5      	b.n	b54ae <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
        else if (next == 'f')
   b54c2:	2e66      	cmp	r6, #102	; 0x66
   b54c4:	d1f3      	bne.n	b54ae <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
          DebugLogFloat(va_arg(args, double));
   b54c6:	3407      	adds	r4, #7
   b54c8:	f024 0407 	bic.w	r4, r4, #7
   b54cc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   b54d0:	f7ff fa44 	bl	b495c <__aeabi_d2f>
   b54d4:	ee00 0a10 	vmov	s0, r0
   b54d8:	f000 feae 	bl	b6238 <DebugLogFloat>
   b54dc:	e7e7      	b.n	b54ae <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
      output_cache[output_cache_index] = *current;
   b54de:	a912      	add	r1, sp, #72	; 0x48
   b54e0:	4419      	add	r1, r3
      output_cache_index += 1;
   b54e2:	3301      	adds	r3, #1
      output_cache[output_cache_index] = *current;
   b54e4:	f801 2c44 	strb.w	r2, [r1, #-68]
    if (output_cache_index >= output_cache_size)
   b54e8:	2b3f      	cmp	r3, #63	; 0x3f
   b54ea:	dde1      	ble.n	b54b0 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x44>
      output_cache[output_cache_index] = 0;
   b54ec:	aa12      	add	r2, sp, #72	; 0x48
   b54ee:	4413      	add	r3, r2
      DebugLog(output_cache);
   b54f0:	a801      	add	r0, sp, #4
      output_cache[output_cache_index] = 0;
   b54f2:	f803 7c44 	strb.w	r7, [r3, #-68]
      DebugLog(output_cache);
   b54f6:	e7e1      	b.n	b54bc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x50>
  if (output_cache_index > 0)
   b54f8:	b133      	cbz	r3, b5508 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x9c>
    output_cache[output_cache_index] = 0;
   b54fa:	a912      	add	r1, sp, #72	; 0x48
   b54fc:	440b      	add	r3, r1
    DebugLog(output_cache);
   b54fe:	a801      	add	r0, sp, #4
    output_cache[output_cache_index] = 0;
   b5500:	f803 2c44 	strb.w	r2, [r3, #-68]
    DebugLog(output_cache);
   b5504:	f00d fde6 	bl	c30d4 <DebugLog>
  DebugLog("\r\n");
   b5508:	4802      	ldr	r0, [pc, #8]	; (b5514 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xa8>)
   b550a:	f00d fde3 	bl	c30d4 <DebugLog>
  DebugLogPrintf(format, args);
  return 0;
}
   b550e:	2000      	movs	r0, #0
   b5510:	b013      	add	sp, #76	; 0x4c
   b5512:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5514:	000c70e2 	.word	0x000c70e2

000b5518 <_ZN6tflite18MicroErrorReporterD0Ev>:
   b5518:	b510      	push	{r4, lr}
   b551a:	2104      	movs	r1, #4
   b551c:	4604      	mov	r4, r0
   b551e:	f7ff faf4 	bl	b4b0a <_ZdlPvj>
   b5522:	4620      	mov	r0, r4
   b5524:	bd10      	pop	{r4, pc}

000b5526 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
static const int8_t kAsymmetricInt8Max = 127;
static const int kSymmetricInt8Scale = kAsymmetricInt8Max;

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
   b5526:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   b5528:	f850 4b04 	ldr.w	r4, [r0], #4
   b552c:	2200      	movs	r2, #0
  int result = 1;
   b552e:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   b5530:	4294      	cmp	r4, r2
   b5532:	dd04      	ble.n	b553e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   b5534:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   b5538:	3201      	adds	r2, #1
    result *= dims.data[i];
   b553a:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   b553c:	e7f8      	b.n	b5530 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   b553e:	4618      	mov	r0, r3
   b5540:	bd10      	pop	{r4, pc}
	...

000b5544 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf>:

void SignedSymmetricPerChannelQuantize(const float* values,
                                       TfLiteIntArray* dims,
                                       int quantized_dimension,
                                       int8_t* quantized_values,
                                       float* scaling_factors) {
   b5544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5548:	ed2d 8b06 	vpush	{d8-d10}
   b554c:	b089      	sub	sp, #36	; 0x24
   b554e:	460e      	mov	r6, r1
   b5550:	9003      	str	r0, [sp, #12]
  int input_size = ElementCount(*dims);
   b5552:	4608      	mov	r0, r1
                                       float* scaling_factors) {
   b5554:	9304      	str	r3, [sp, #16]
   b5556:	9202      	str	r2, [sp, #8]
  int input_size = ElementCount(*dims);
   b5558:	f7ff ffe5 	bl	b5526 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  int channel_count = dims->data[quantized_dimension];
   b555c:	9b02      	ldr	r3, [sp, #8]
   b555e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  int per_channel_size = input_size / channel_count;
  for (int channel = 0; channel < channel_count; channel++) {
    float min = 0;
    float max = 0;
   b5562:	ed9f 9a3e 	vldr	s18, [pc, #248]	; b565c <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x118>
      int idx = channel * channel_stride + i * stride;
      min = fminf(min, values[idx]);
      max = fmaxf(max, values[idx]);
    }
    scaling_factors[channel] =
        fmaxf(fabs(min), fabs(max)) / kSymmetricInt8Scale;
   b5566:	eddf 9a3e 	vldr	s19, [pc, #248]	; b5660 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x11c>
    for (int i = 0; i < per_channel_size; i++) {
      int idx = channel * channel_stride + i * stride;
      const int32_t quantized_value =
          static_cast<int32_t>(roundf(values[idx] / scaling_factors[channel]));
      // Clamp: just in case some odd numeric offset.
      quantized_values[idx] = fminf(
   b556a:	ed9f aa3e 	vldr	s20, [pc, #248]	; b5664 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x120>
  int channel_count = dims->data[quantized_dimension];
   b556e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  for (int channel = 0; channel < channel_count; channel++) {
   b5572:	2700      	movs	r7, #0
  int channel_count = dims->data[quantized_dimension];
   b5574:	685b      	ldr	r3, [r3, #4]
   b5576:	9301      	str	r3, [sp, #4]
  int per_channel_size = input_size / channel_count;
   b5578:	fb90 f5f3 	sdiv	r5, r0, r3
  for (int channel = 0; channel < channel_count; channel++) {
   b557c:	9b01      	ldr	r3, [sp, #4]
   b557e:	429f      	cmp	r7, r3
   b5580:	da67      	bge.n	b5652 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x10e>
   b5582:	1d31      	adds	r1, r6, #4
    for (int i = 0; i < quantized_dimension; i++) {
   b5584:	2200      	movs	r2, #0
    int stride = 1;
   b5586:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < quantized_dimension; i++) {
   b558a:	9b02      	ldr	r3, [sp, #8]
   b558c:	429a      	cmp	r2, r3
   b558e:	da05      	bge.n	b559c <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x58>
      stride *= dims->data[i];
   b5590:	f851 0b04 	ldr.w	r0, [r1], #4
    for (int i = 0; i < quantized_dimension; i++) {
   b5594:	3201      	adds	r2, #1
      stride *= dims->data[i];
   b5596:	fb00 fa0a 	mul.w	sl, r0, sl
    for (int i = 0; i < quantized_dimension; i++) {
   b559a:	e7f6      	b.n	b558a <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x46>
    for (int i = 0; i < per_channel_size; i++) {
   b559c:	9b03      	ldr	r3, [sp, #12]
    int channel_stride = per_channel_size / stride;
   b559e:	fb95 f4fa 	sdiv	r4, r5, sl
      int idx = channel * channel_stride + i * stride;
   b55a2:	437c      	muls	r4, r7
   b55a4:	eb03 0884 	add.w	r8, r3, r4, lsl #2
   b55a8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   b55ac:	4641      	mov	r1, r8
    for (int i = 0; i < per_channel_size; i++) {
   b55ae:	2000      	movs	r0, #0
    float max = 0;
   b55b0:	eef0 8a49 	vmov.f32	s17, s18
    float min = 0;
   b55b4:	eeb0 8a49 	vmov.f32	s16, s18
    for (int i = 0; i < per_channel_size; i++) {
   b55b8:	42a8      	cmp	r0, r5
   b55ba:	9007      	str	r0, [sp, #28]
   b55bc:	da17      	bge.n	b55ee <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0xaa>
      min = fminf(min, values[idx]);
   b55be:	edd1 0a00 	vldr	s1, [r1]
   b55c2:	9106      	str	r1, [sp, #24]
   b55c4:	eeb0 0a48 	vmov.f32	s0, s16
   b55c8:	edcd 0a05 	vstr	s1, [sp, #20]
   b55cc:	f00f ff3c 	bl	c5448 <fminf>
      max = fmaxf(max, values[idx]);
   b55d0:	eddd 0a05 	vldr	s1, [sp, #20]
      min = fminf(min, values[idx]);
   b55d4:	eeb0 8a40 	vmov.f32	s16, s0
      max = fmaxf(max, values[idx]);
   b55d8:	eeb0 0a68 	vmov.f32	s0, s17
   b55dc:	f00f ff16 	bl	c540c <fmaxf>
    for (int i = 0; i < per_channel_size; i++) {
   b55e0:	9807      	ldr	r0, [sp, #28]
   b55e2:	9906      	ldr	r1, [sp, #24]
      max = fmaxf(max, values[idx]);
   b55e4:	eef0 8a40 	vmov.f32	s17, s0
    for (int i = 0; i < per_channel_size; i++) {
   b55e8:	3001      	adds	r0, #1
   b55ea:	4459      	add	r1, fp
   b55ec:	e7e4      	b.n	b55b8 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x74>
        fmaxf(fabs(min), fabs(max)) / kSymmetricInt8Scale;
   b55ee:	eef0 0ae8 	vabs.f32	s1, s17
   b55f2:	eeb0 0ac8 	vabs.f32	s0, s16
   b55f6:	f00f ff09 	bl	c540c <fmaxf>
   b55fa:	eec0 7a29 	vdiv.f32	s15, s0, s19
   b55fe:	9b04      	ldr	r3, [sp, #16]
    for (int i = 0; i < per_channel_size; i++) {
   b5600:	2100      	movs	r1, #0
   b5602:	441c      	add	r4, r3
    scaling_factors[channel] =
   b5604:	ece9 7a01 	vstmia	r9!, {s15}
    for (int i = 0; i < per_channel_size; i++) {
   b5608:	42a9      	cmp	r1, r5
   b560a:	9105      	str	r1, [sp, #20]
   b560c:	da1f      	bge.n	b564e <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x10a>
          static_cast<int32_t>(roundf(values[idx] / scaling_factors[channel]));
   b560e:	ed59 7a01 	vldr	s15, [r9, #-4]
   b5612:	ed98 0a00 	vldr	s0, [r8]
   b5616:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b561a:	f00f ff4f 	bl	c54bc <roundf>
      quantized_values[idx] = fminf(
   b561e:	44d8      	add	r8, fp
      const int32_t quantized_value =
   b5620:	eebd 0ac0 	vcvt.s32.f32	s0, s0
      quantized_values[idx] = fminf(
   b5624:	eef8 0ac0 	vcvt.f32.s32	s1, s0
   b5628:	eeb0 0a4a 	vmov.f32	s0, s20
   b562c:	f00f feee 	bl	c540c <fmaxf>
   b5630:	eef0 0a40 	vmov.f32	s1, s0
   b5634:	eeb0 0a69 	vmov.f32	s0, s19
   b5638:	f00f ff06 	bl	c5448 <fminf>
   b563c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    for (int i = 0; i < per_channel_size; i++) {
   b5640:	9905      	ldr	r1, [sp, #20]
      quantized_values[idx] = fminf(
   b5642:	ee17 0a90 	vmov	r0, s15
    for (int i = 0; i < per_channel_size; i++) {
   b5646:	3101      	adds	r1, #1
      quantized_values[idx] = fminf(
   b5648:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < per_channel_size; i++) {
   b564a:	4454      	add	r4, sl
   b564c:	e7dc      	b.n	b5608 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0xc4>
  for (int channel = 0; channel < channel_count; channel++) {
   b564e:	3701      	adds	r7, #1
   b5650:	e794      	b.n	b557c <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x38>
          kSymmetricInt8Scale, fmaxf(-kSymmetricInt8Scale, quantized_value));
    }
  }
}
   b5652:	b009      	add	sp, #36	; 0x24
   b5654:	ecbd 8b06 	vpop	{d8-d10}
   b5658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b565c:	00000000 	.word	0x00000000
   b5660:	42fe0000 	.word	0x42fe0000
   b5664:	c2fe0000 	.word	0xc2fe0000

000b5668 <_ZN6tflite19SymmetricDequantizeEPKaifPf>:
}

void SymmetricDequantize(const int8_t* values, const int size,
                         const float dequantization_scale,
                         float* dequantized_values) {
  for (int i = 0; i < size; ++i) {
   b5668:	2300      	movs	r3, #0
   b566a:	428b      	cmp	r3, r1
   b566c:	da0b      	bge.n	b5686 <_ZN6tflite19SymmetricDequantizeEPKaifPf+0x1e>
    dequantized_values[i] = values[i] * dequantization_scale;
   b566e:	f910 c003 	ldrsb.w	ip, [r0, r3]
   b5672:	ee07 ca90 	vmov	s15, ip
   b5676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < size; ++i) {
   b567a:	3301      	adds	r3, #1
    dequantized_values[i] = values[i] * dequantization_scale;
   b567c:	ee67 7a80 	vmul.f32	s15, s15, s0
   b5680:	ece2 7a01 	vstmia	r2!, {s15}
  for (int i = 0; i < size; ++i) {
   b5684:	e7f1      	b.n	b566a <_ZN6tflite19SymmetricDequantizeEPKaifPf+0x2>
  }
}
   b5686:	4770      	bx	lr

000b5688 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  size_t data_as_size_t = reinterpret_cast<size_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_size_t + (alignment - 1)) / alignment) * alignment);
   b5688:	1e4b      	subs	r3, r1, #1
   b568a:	4418      	add	r0, r3
   b568c:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   b5690:	4348      	muls	r0, r1
   b5692:	4770      	bx	lr

000b5694 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  size_t data_as_size_t = reinterpret_cast<size_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_size_t / alignment) * alignment);
   b5694:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   b5698:	4348      	muls	r0, r1
   b569a:	4770      	bx	lr

000b569c <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   b569c:	3801      	subs	r0, #1
   b569e:	4408      	add	r0, r1
   b56a0:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
   b56a4:	4348      	muls	r0, r1
   b56a6:	4770      	bx	lr

000b56a8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
   b56a8:	b513      	push	{r0, r1, r4, lr}
   b56aa:	4614      	mov	r4, r2
   b56ac:	1e42      	subs	r2, r0, #1
   b56ae:	4603      	mov	r3, r0
   b56b0:	2a08      	cmp	r2, #8
   b56b2:	d811      	bhi.n	b56d8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x30>
   b56b4:	e8df f002 	tbb	[pc, r2]
   b56b8:	0e0c0505 	.word	0x0e0c0505
   b56bc:	0e0a0c10 	.word	0x0e0a0c10
   b56c0:	0c          	.byte	0x0c
   b56c1:	00          	.byte	0x00
  switch (type) {
    case kTfLiteFloat32:
      *size = sizeof(float);
   b56c2:	2304      	movs	r3, #4
      break;
    case kTfLiteInt16:
      *size = sizeof(int16_t);
   b56c4:	600b      	str	r3, [r1, #0]
    default:
      reporter->Report("Type %s (%d) not is not supported",
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   b56c6:	2000      	movs	r0, #0
}
   b56c8:	b002      	add	sp, #8
   b56ca:	bd10      	pop	{r4, pc}
      *size = sizeof(int16_t);
   b56cc:	2302      	movs	r3, #2
   b56ce:	e7f9      	b.n	b56c4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(uint8_t);
   b56d0:	2301      	movs	r3, #1
   b56d2:	e7f7      	b.n	b56c4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(int64_t);
   b56d4:	2308      	movs	r3, #8
   b56d6:	e7f5      	b.n	b56c4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      reporter->Report("Type %s (%d) not is not supported",
   b56d8:	4618      	mov	r0, r3
   b56da:	9301      	str	r3, [sp, #4]
   b56dc:	f7ff fa52 	bl	b4b84 <TfLiteTypeGetName>
   b56e0:	9b01      	ldr	r3, [sp, #4]
   b56e2:	4903      	ldr	r1, [pc, #12]	; (b56f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x48>)
   b56e4:	4602      	mov	r2, r0
   b56e6:	4620      	mov	r0, r4
   b56e8:	f00e ff12 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   b56ec:	2001      	movs	r0, #1
   b56ee:	e7eb      	b.n	b56c8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x20>
   b56f0:	000c70fc 	.word	0x000c70fc

000b56f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   b56f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return data_ - ReadScalar<soffset_t>(data_);
   b56f8:	6804      	ldr	r4, [r0, #0]
   b56fa:	1b04      	subs	r4, r0, r4
   b56fc:	4615      	mov	r5, r2
   b56fe:	f8b4 c000 	ldrh.w	ip, [r4]
   b5702:	461a      	mov	r2, r3
   b5704:	460e      	mov	r6, r1
  int element_count = 1;
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5706:	2300      	movs	r3, #0
  int element_count = 1;
   b5708:	2701      	movs	r7, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b570a:	f1bc 0f04 	cmp.w	ip, #4
   b570e:	d930      	bls.n	b5772 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7e>
   b5710:	88a1      	ldrh	r1, [r4, #4]
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
   b5712:	eb00 0801 	add.w	r8, r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5716:	b361      	cbz	r1, b5772 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7e>
   b5718:	f850 e001 	ldr.w	lr, [r0, r1]
   b571c:	eb08 010e 	add.w	r1, r8, lr
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5720:	f858 e00e 	ldr.w	lr, [r8, lr]
   b5724:	4573      	cmp	r3, lr
   b5726:	d205      	bcs.n	b5734 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x40>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b5728:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   b572c:	3301      	adds	r3, #1
    element_count *= flatbuffer_tensor.shape()->Get(n);
   b572e:	6849      	ldr	r1, [r1, #4]
   b5730:	434f      	muls	r7, r1
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5732:	e7ea      	b.n	b570a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x16>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b5734:	f1bc 0f06 	cmp.w	ip, #6
   b5738:	d90e      	bls.n	b5758 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
   b573a:	88e4      	ldrh	r4, [r4, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b573c:	b104      	cbz	r4, b5740 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
   b573e:	5704      	ldrsb	r4, [r0, r4]
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b5740:	9201      	str	r2, [sp, #4]
   b5742:	f10d 010f 	add.w	r1, sp, #15
   b5746:	b2e0      	uxtb	r0, r4
   b5748:	f00d fe74 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   b574c:	9a01      	ldr	r2, [sp, #4]
   b574e:	b128      	cbz	r0, b575c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
   b5750:	2001      	movs	r0, #1
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
   b5752:	b004      	add	sp, #16
   b5754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5758:	2400      	movs	r4, #0
   b575a:	e7f1      	b.n	b5740 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
  TF_LITE_ENSURE_STATUS(
   b575c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   b5760:	4629      	mov	r1, r5
   b5762:	f7ff ffa1 	bl	b56a8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
   b5766:	2800      	cmp	r0, #0
   b5768:	d1f2      	bne.n	b5750 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5c>
  *bytes = element_count * (*type_size);
   b576a:	682b      	ldr	r3, [r5, #0]
   b576c:	435f      	muls	r7, r3
   b576e:	6037      	str	r7, [r6, #0]
  return kTfLiteOk;
   b5770:	e7ef      	b.n	b5752 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5e>
  uoffset_t size() const { return EndianScalar(length_); }
   b5772:	2300      	movs	r3, #0
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	deff      	udf	#255	; 0xff

000b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
#include "tensorflow/lite/experimental/micro/memory_helpers.h"

namespace tflite {

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
   b5778:	b538      	push	{r3, r4, r5, lr}
   b577a:	4605      	mov	r5, r0
  uint8_t* previous_free = (data_ + data_size_max_) - data_size_;
   b577c:	e9d5 3400 	ldrd	r3, r4, [r5]
   b5780:	1ae3      	subs	r3, r4, r3
   b5782:	68ac      	ldr	r4, [r5, #8]
                                                 size_t alignment) {
   b5784:	4608      	mov	r0, r1
  uint8_t* previous_free = (data_ + data_size_max_) - data_size_;
   b5786:	441c      	add	r4, r3
  uint8_t* current_data = previous_free - size;
  uint8_t* aligned_result = AlignPointerDown(current_data, alignment);
   b5788:	4611      	mov	r1, r2
   b578a:	1a20      	subs	r0, r4, r0
   b578c:	f7ff ff82 	bl	b5694 <_ZN6tflite16AlignPointerDownEPhj>
  size_t aligned_size = (previous_free - aligned_result);
  if ((data_size_ + aligned_size) > data_size_max_) {
   b5790:	682b      	ldr	r3, [r5, #0]
  size_t aligned_size = (previous_free - aligned_result);
   b5792:	1a24      	subs	r4, r4, r0
  if ((data_size_ + aligned_size) > data_size_max_) {
   b5794:	441c      	add	r4, r3
   b5796:	686b      	ldr	r3, [r5, #4]
   b5798:	429c      	cmp	r4, r3
    // TODO(petewarden): Add error reporting beyond returning null!
    return nullptr;
  }
  data_size_ += aligned_size;
   b579a:	bf94      	ite	ls
   b579c:	602c      	strls	r4, [r5, #0]
    return nullptr;
   b579e:	2000      	movhi	r0, #0
  return aligned_result;
}
   b57a0:	bd38      	pop	{r3, r4, r5, pc}

000b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   b57a2:	6803      	ldr	r3, [r0, #0]
   b57a4:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b57a6:	8803      	ldrh	r3, [r0, #0]
   b57a8:	428b      	cmp	r3, r1
   b57aa:	bf8c      	ite	hi
   b57ac:	5a40      	ldrhhi	r0, [r0, r1]
   b57ae:	2000      	movls	r0, #0
  }
   b57b0:	4770      	bx	lr

000b57b2 <_ZNK6tflite22QuantizationParameters5scaleEv>:
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MIN);
  }
  const flatbuffers::Vector<float> *max() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MAX);
  }
  const flatbuffers::Vector<float> *scale() const {
   b57b2:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b57b4:	2108      	movs	r1, #8
   b57b6:	4604      	mov	r4, r0
   b57b8:	f7ff fff3 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57bc:	b110      	cbz	r0, b57c4 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   b57be:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57c0:	5820      	ldr	r0, [r4, r0]
   b57c2:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
  }
   b57c4:	bd10      	pop	{r4, pc}

000b57c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   b57c6:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b57c8:	210a      	movs	r1, #10
   b57ca:	4604      	mov	r4, r0
   b57cc:	f7ff ffe9 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57d0:	b110      	cbz	r0, b57d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   b57d2:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57d4:	5820      	ldr	r0, [r4, r0]
   b57d6:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
  }
   b57d8:	bd10      	pop	{r4, pc}

000b57da <_ZNK6tflite6Tensor11is_variableEv>:
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const QuantizationParameters *quantization() const {
    return GetPointer<const QuantizationParameters *>(VT_QUANTIZATION);
  }
  bool is_variable() const {
   b57da:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b57dc:	210e      	movs	r1, #14
   b57de:	4604      	mov	r4, r0
   b57e0:	f7ff ffdf 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b57e4:	b100      	cbz	r0, b57e8 <_ZNK6tflite6Tensor11is_variableEv+0xe>
   b57e6:	5c20      	ldrb	r0, [r4, r0]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
  }
   b57e8:	3800      	subs	r0, #0
   b57ea:	bf18      	it	ne
   b57ec:	2001      	movne	r0, #1
   b57ee:	bd10      	pop	{r4, pc}

000b57f0 <_ZNK6tflite5Model7buffersEv>:
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubGraph>> *>(VT_SUBGRAPHS);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *buffers() const {
   b57f0:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b57f2:	210c      	movs	r1, #12
   b57f4:	4604      	mov	r4, r0
   b57f6:	f7ff ffd4 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57fa:	b110      	cbz	r0, b5802 <_ZNK6tflite5Model7buffersEv+0x12>
    auto p = data_ + field_offset;
   b57fc:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b57fe:	5820      	ldr	r0, [r4, r0]
   b5800:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *>(VT_BUFFERS);
  }
   b5802:	bd10      	pop	{r4, pc}

000b5804 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>:
// requirement for SIMD extensions.
constexpr int kBufferAlignment = 16;

}  // namespace

MicroAllocator::MicroAllocator(TfLiteContext* context, const Model* model,
   b5804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5806:	4615      	mov	r5, r2
   b5808:	e9dd 2706 	ldrd	r2, r7, [sp, #24]
   b580c:	460e      	mov	r6, r1
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 public:
  SimpleMemoryAllocator(uint8_t* buffer, size_t buffer_size)
      : data_size_(0), data_size_max_(buffer_size), data_(buffer) {}
   b580e:	2100      	movs	r1, #0
   b5810:	e9c0 1201 	strd	r1, r2, [r0, #4]
    : model_(model),
      memory_allocator_(tensor_arena, arena_size),
      error_reporter_(error_reporter),
      context_(context),
      arena_(tensor_arena),
      arena_size_(arena_size) {
   b5814:	e9c0 3703 	strd	r3, r7, [r0, #12]
   b5818:	e9c0 6305 	strd	r6, r3, [r0, #20]
MicroAllocator::MicroAllocator(TfLiteContext* context, const Model* model,
   b581c:	4604      	mov	r4, r0
      arena_size_(arena_size) {
   b581e:	6005      	str	r5, [r0, #0]
   b5820:	61c2      	str	r2, [r0, #28]
    auto field_offset = GetOptionalFieldOffset(field);
   b5822:	2108      	movs	r1, #8
   b5824:	4628      	mov	r0, r5
   b5826:	f7ff ffbc 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b582a:	2800      	cmp	r0, #0
   b582c:	d038      	beq.n	b58a0 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x9c>
   b582e:	582a      	ldr	r2, [r5, r0]
    auto p = data_ + field_offset;
   b5830:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5832:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   b5834:	588a      	ldr	r2, [r1, r2]
   b5836:	2a01      	cmp	r2, #1
   b5838:	d005      	beq.n	b5846 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x42>
    error_reporter->Report("Only 1 subgraph is currently supported.\n");
   b583a:	491a      	ldr	r1, [pc, #104]	; (b58a4 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0xa0>)
   b583c:	4638      	mov	r0, r7
   b583e:	f00e fe67 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  // Null all inputs so we can later perform a null check to avoid re-allocating
  // registered pre-allocated inputs.
  for (size_t i = 0; i < context_->tensors_size; ++i) {
    context_->tensors[i].data.raw = nullptr;
  }
}
   b5842:	4620      	mov	r0, r4
   b5844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5846:	1d1f      	adds	r7, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5848:	685b      	ldr	r3, [r3, #4]
   b584a:	441f      	add	r7, r3
  subgraph_ = (*subgraphs)[0];
   b584c:	6227      	str	r7, [r4, #32]
    auto field_offset = GetOptionalFieldOffset(field);
   b584e:	2104      	movs	r1, #4
   b5850:	4638      	mov	r0, r7
   b5852:	f7ff ffa6 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5856:	b308      	cbz	r0, b589c <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x98>
    auto p = data_ + field_offset;
   b5858:	183d      	adds	r5, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b585a:	5838      	ldr	r0, [r7, r0]
   b585c:	4405      	add	r5, r0
  tensors_ = subgraph_->tensors();
   b585e:	62a5      	str	r5, [r4, #40]	; 0x28
    auto field_offset = GetOptionalFieldOffset(field);
   b5860:	210a      	movs	r1, #10
   b5862:	4638      	mov	r0, r7
   b5864:	f7ff ff9d 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5868:	b110      	cbz	r0, b5870 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x6c>
    auto p = data_ + field_offset;
   b586a:	183b      	adds	r3, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b586c:	5838      	ldr	r0, [r7, r0]
   b586e:	4418      	add	r0, r3
  uoffset_t size() const { return EndianScalar(length_); }
   b5870:	6829      	ldr	r1, [r5, #0]
  operators_ = subgraph_->operators();
   b5872:	6260      	str	r0, [r4, #36]	; 0x24
      reinterpret_cast<TfLiteTensor*>(memory_allocator_.AllocateFromTail(
   b5874:	2204      	movs	r2, #4
   b5876:	2538      	movs	r5, #56	; 0x38
  context_->tensors_size = tensors_->size();
   b5878:	6031      	str	r1, [r6, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_.AllocateFromTail(
   b587a:	18a0      	adds	r0, r4, r2
   b587c:	4369      	muls	r1, r5
   b587e:	f7ff ff7b 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5882:	2300      	movs	r3, #0
  context_->tensors =
   b5884:	60b0      	str	r0, [r6, #8]
    context_->tensors[i].data.raw = nullptr;
   b5886:	4619      	mov	r1, r3
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5888:	6962      	ldr	r2, [r4, #20]
   b588a:	6810      	ldr	r0, [r2, #0]
   b588c:	4298      	cmp	r0, r3
   b588e:	d9d8      	bls.n	b5842 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x3e>
    context_->tensors[i].data.raw = nullptr;
   b5890:	6892      	ldr	r2, [r2, #8]
   b5892:	fb05 2203 	mla	r2, r5, r3, r2
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5896:	3301      	adds	r3, #1
    context_->tensors[i].data.raw = nullptr;
   b5898:	6051      	str	r1, [r2, #4]
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b589a:	e7f5      	b.n	b5888 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x84>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b589c:	4605      	mov	r5, r0
   b589e:	e7de      	b.n	b585e <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
   b58a0:	6803      	ldr	r3, [r0, #0]
   b58a2:	deff      	udf	#255	; 0xff
   b58a4:	000c711e 	.word	0x000c711e

000b58a8 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
   b58a8:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b58aa:	6803      	ldr	r3, [r0, #0]
   b58ac:	4299      	cmp	r1, r3
   b58ae:	d305      	bcc.n	b58bc <_ZNK11flatbuffers6VectorIfE3GetEm+0x14>
   b58b0:	4b05      	ldr	r3, [pc, #20]	; (b58c8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x20>)
   b58b2:	4a06      	ldr	r2, [pc, #24]	; (b58cc <_ZNK11flatbuffers6VectorIfE3GetEm+0x24>)
   b58b4:	4806      	ldr	r0, [pc, #24]	; (b58d0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x28>)
   b58b6:	21ed      	movs	r1, #237	; 0xed
   b58b8:	f00e ffb0 	bl	c481c <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b58bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
   b58c0:	ed90 0a01 	vldr	s0, [r0, #4]
   b58c4:	bd08      	pop	{r3, pc}
   b58c6:	bf00      	nop
   b58c8:	000c7147 	.word	0x000c7147
   b58cc:	000c7152 	.word	0x000c7152
   b58d0:	000c721a 	.word	0x000c721a

000b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
   b58d4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b58d6:	6803      	ldr	r3, [r0, #0]
   b58d8:	4299      	cmp	r1, r3
   b58da:	d305      	bcc.n	b58e8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x14>
   b58dc:	4b04      	ldr	r3, [pc, #16]	; (b58f0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x1c>)
   b58de:	4a05      	ldr	r2, [pc, #20]	; (b58f4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x20>)
   b58e0:	4805      	ldr	r0, [pc, #20]	; (b58f8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x24>)
   b58e2:	21ed      	movs	r1, #237	; 0xed
   b58e4:	f00e ff9a 	bl	c481c <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b58e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
   b58ec:	6840      	ldr	r0, [r0, #4]
   b58ee:	bd08      	pop	{r3, pc}
   b58f0:	000c7147 	.word	0x000c7147
   b58f4:	000c728e 	.word	0x000c728e
   b58f8:	000c721a 	.word	0x000c721a

000b58fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
   b58fc:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b58fe:	6803      	ldr	r3, [r0, #0]
   b5900:	4299      	cmp	r1, r3
   b5902:	d305      	bcc.n	b5910 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x14>
   b5904:	4b06      	ldr	r3, [pc, #24]	; (b5920 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x24>)
   b5906:	4a07      	ldr	r2, [pc, #28]	; (b5924 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x28>)
   b5908:	4807      	ldr	r0, [pc, #28]	; (b5928 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x2c>)
   b590a:	21ed      	movs	r1, #237	; 0xed
   b590c:	f00e ff86 	bl	c481c <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5910:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   b5912:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5916:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   b591a:	4410      	add	r0, r2
   b591c:	bd08      	pop	{r3, pc}
   b591e:	bf00      	nop
   b5920:	000c7147 	.word	0x000c7147
   b5924:	000c735c 	.word	0x000c735c
   b5928:	000c721a 	.word	0x000c721a

000b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   b592c:	b510      	push	{r4, lr}
   b592e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   b5930:	f7ff ff37 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5934:	b110      	cbz	r0, b593c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x10>
    auto p = data_ + field_offset;
   b5936:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5938:	5820      	ldr	r0, [r4, r0]
   b593a:	4418      	add	r0, r3
                        : nullptr;
  }
   b593c:	bd10      	pop	{r4, pc}
	...

000b5940 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh>:

TfLiteStatus MicroAllocator::InitializeRuntimeTensor(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result,
    uint8_t* preallocated_buffer) {
   b5940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5944:	460d      	mov	r5, r1
   b5946:	b087      	sub	sp, #28
   b5948:	4683      	mov	fp, r0
    auto field_offset = GetOptionalFieldOffset(field);
   b594a:	2106      	movs	r1, #6
   b594c:	4628      	mov	r0, r5
   b594e:	e9dd 4610 	ldrd	r4, r6, [sp, #64]	; 0x40
   b5952:	4617      	mov	r7, r2
   b5954:	4698      	mov	r8, r3
   b5956:	f7ff ff24 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b595a:	b100      	cbz	r0, b595e <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1e>
   b595c:	5628      	ldrsb	r0, [r5, r0]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b595e:	4642      	mov	r2, r8
   b5960:	4621      	mov	r1, r4
   b5962:	b2c0      	uxtb	r0, r0
   b5964:	f00d fd66 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   b5968:	4682      	mov	sl, r0
   b596a:	2800      	cmp	r0, #0
   b596c:	f040 80f2 	bne.w	b5b54 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x214>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
   b5970:	4628      	mov	r0, r5
   b5972:	f7ff ff32 	bl	b57da <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
   b5976:	2108      	movs	r1, #8
   b5978:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  // We need to figure out where the actual contents of this tensor are stored
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  result->data.raw = nullptr;
   b597c:	f8c4 a004 	str.w	sl, [r4, #4]
  result->bytes = 0;
   b5980:	f8c4 a018 	str.w	sl, [r4, #24]
   b5984:	4628      	mov	r0, r5
   b5986:	f7ff ff0c 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b598a:	4601      	mov	r1, r0
   b598c:	b100      	cbz	r0, b5990 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x50>
   b598e:	5829      	ldr	r1, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
   b5990:	683b      	ldr	r3, [r7, #0]
   b5992:	428b      	cmp	r3, r1
   b5994:	d805      	bhi.n	b59a2 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x62>
   b5996:	4b74      	ldr	r3, [pc, #464]	; (b5b68 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x228>)
   b5998:	4a74      	ldr	r2, [pc, #464]	; (b5b6c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x22c>)
   b599a:	4875      	ldr	r0, [pc, #468]	; (b5b70 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x230>)
   b599c:	21ed      	movs	r1, #237	; 0xed
   b599e:	f00e ff3d 	bl	c481c <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b59a2:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
   b59a4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b59a8:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
   b59ac:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
   b59ae:	2104      	movs	r1, #4
   b59b0:	4638      	mov	r0, r7
   b59b2:	f7ff fef6 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b59b6:	2800      	cmp	r0, #0
   b59b8:	f000 80ce 	beq.w	b5b58 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x218>
   b59bc:	583a      	ldr	r2, [r7, r0]
    auto p = data_ + field_offset;
   b59be:	1839      	adds	r1, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b59c0:	188b      	adds	r3, r1, r2
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
      // If it has any data, is the data size larger than zero?
      if (size_t array_size = array->size()) {
   b59c2:	588a      	ldr	r2, [r1, r2]
   b59c4:	2a00      	cmp	r2, #0
   b59c6:	f000 80c7 	beq.w	b5b58 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x218>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b59ca:	3304      	adds	r3, #4
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.raw =
   b59cc:	6063      	str	r3, [r4, #4]
            const_cast<char*>(reinterpret_cast<const char*>(array->data()));
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
   b59ce:	2301      	movs	r3, #1
   b59d0:	7523      	strb	r3, [r4, #20]
    }
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
   b59d2:	4643      	mov	r3, r8
   b59d4:	aa05      	add	r2, sp, #20
   b59d6:	f104 0118 	add.w	r1, r4, #24
   b59da:	4628      	mov	r0, r5
   b59dc:	f7ff fe8a 	bl	b56f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   b59e0:	4607      	mov	r7, r0
   b59e2:	2800      	cmp	r0, #0
   b59e4:	f040 80b6 	bne.w	b5b54 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x214>
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b59e8:	2104      	movs	r1, #4
   b59ea:	4628      	mov	r0, r5
   b59ec:	f7ff ff9e 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));
  // Copy the shape of the tensor from the serialized data into the runtime
  // form. We have to allocate memory for this.
  result->dims =
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
          sizeof(int) * (flatbuffer_tensor.shape()->Length() + 1),
   b59f0:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
   b59f2:	f10b 0b04 	add.w	fp, fp, #4
          sizeof(int) * (flatbuffer_tensor.shape()->Length() + 1),
   b59f6:	3101      	adds	r1, #1
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
   b59f8:	2204      	movs	r2, #4
   b59fa:	0089      	lsls	r1, r1, #2
   b59fc:	4658      	mov	r0, fp
   b59fe:	f7ff febb 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
   b5a02:	2104      	movs	r1, #4
   b5a04:	4606      	mov	r6, r0
  result->dims =
   b5a06:	60a0      	str	r0, [r4, #8]
   b5a08:	4628      	mov	r0, r5
   b5a0a:	f7ff ff8f 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          sizeof(int)));
  result->dims->size = flatbuffer_tensor.shape()->Length();
   b5a0e:	6803      	ldr	r3, [r0, #0]
   b5a10:	6033      	str	r3, [r6, #0]
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5a12:	463e      	mov	r6, r7
   b5a14:	2104      	movs	r1, #4
   b5a16:	4628      	mov	r0, r5
   b5a18:	f7ff ff88 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5a1c:	6803      	ldr	r3, [r0, #0]
   b5a1e:	42b3      	cmp	r3, r6
   b5a20:	d90a      	bls.n	b5a38 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0xf8>
    result->dims->data[n] = flatbuffer_tensor.shape()->Get(n);
   b5a22:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b5a26:	4631      	mov	r1, r6
   b5a28:	f7ff ff54 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b5a2c:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5a30:	3601      	adds	r6, #1
    result->dims->data[n] = flatbuffer_tensor.shape()->Get(n);
   b5a32:	f8c8 0004 	str.w	r0, [r8, #4]
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5a36:	e7ed      	b.n	b5a14 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0xd4>
    auto field_offset = GetOptionalFieldOffset(field);
   b5a38:	210c      	movs	r1, #12
   b5a3a:	4628      	mov	r0, r5
   b5a3c:	f7ff feb1 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5a40:	2800      	cmp	r0, #0
   b5a42:	d073      	beq.n	b5b2c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
   b5a44:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
   b5a46:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5a48:	441e      	add	r6, r3
  }
  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
  if (src_quantization && src_quantization->scale() &&
   b5a4a:	4630      	mov	r0, r6
   b5a4c:	f7ff feb1 	bl	b57b2 <_ZNK6tflite22QuantizationParameters5scaleEv>
   b5a50:	4680      	mov	r8, r0
   b5a52:	2800      	cmp	r0, #0
   b5a54:	d06a      	beq.n	b5b2c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
   b5a56:	6803      	ldr	r3, [r0, #0]
   b5a58:	2b00      	cmp	r3, #0
   b5a5a:	d067      	beq.n	b5b2c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
   b5a5c:	4630      	mov	r0, r6
   b5a5e:	f7ff feb2 	bl	b57c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
   b5a62:	2800      	cmp	r0, #0
   b5a64:	d062      	beq.n	b5b2c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      src_quantization->zero_point() &&
   b5a66:	6803      	ldr	r3, [r0, #0]
   b5a68:	2b00      	cmp	r3, #0
   b5a6a:	d05f      	beq.n	b5b2c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      (src_quantization->zero_point()->size() > 0)) {
    result->params.scale = src_quantization->scale()->Get(0);
   b5a6c:	4640      	mov	r0, r8
   b5a6e:	2100      	movs	r1, #0
   b5a70:	f7ff ff1a 	bl	b58a8 <_ZNK11flatbuffers6VectorIfE3GetEm>
   b5a74:	f104 090f 	add.w	r9, r4, #15
   b5a78:	ed84 0a03 	vstr	s0, [r4, #12]
    // This magic handles issues with little-endianness.
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5a7c:	f04f 0800 	mov.w	r8, #0
      *(reinterpret_cast<char*>(&result->params.zero_point) + b) =
          *(reinterpret_cast<const char*>(
                src_quantization->zero_point()->Data()) +
   b5a80:	4630      	mov	r0, r6
   b5a82:	f7ff fea0 	bl	b57c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
          *(reinterpret_cast<const char*>(
   b5a86:	4440      	add	r0, r8
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5a88:	f108 0801 	add.w	r8, r8, #1
          *(reinterpret_cast<const char*>(
   b5a8c:	7903      	ldrb	r3, [r0, #4]
      *(reinterpret_cast<char*>(&result->params.zero_point) + b) =
   b5a8e:	f809 3f01 	strb.w	r3, [r9, #1]!
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5a92:	f1b8 0f08 	cmp.w	r8, #8
   b5a96:	d1f3      	bne.n	b5a80 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x140>
            b);
    result->params.zero_point =
        flatbuffers::EndianScalar(result->params.zero_point);

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
   b5a98:	4630      	mov	r0, r6
   b5a9a:	f7ff fe8a 	bl	b57b2 <_ZNK6tflite22QuantizationParameters5scaleEv>
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            memory_allocator_.AllocateFromTail(sizeof(TfLiteAffineQuantization),
   b5a9e:	2204      	movs	r2, #4
  uoffset_t size() const { return EndianScalar(length_); }
   b5aa0:	f8d0 a000 	ldr.w	sl, [r0]
   b5aa4:	210c      	movs	r1, #12
   b5aa6:	4658      	mov	r0, fp
   b5aa8:	f7ff fe66 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
                                               sizeof(int)));
    int* zero_point_array =
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
            channels * sizeof(int) + sizeof(int), sizeof(int)));
   b5aac:	f10a 0101 	add.w	r1, sl, #1
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5ab0:	0089      	lsls	r1, r1, #2
            memory_allocator_.AllocateFromTail(sizeof(TfLiteAffineQuantization),
   b5ab2:	9001      	str	r0, [sp, #4]
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5ab4:	2204      	movs	r2, #4
   b5ab6:	4658      	mov	r0, fp
   b5ab8:	9102      	str	r1, [sp, #8]
   b5aba:	f7ff fe5d 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
    int* scale_array =
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5abe:	9902      	ldr	r1, [sp, #8]
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5ac0:	4681      	mov	r9, r0
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5ac2:	2204      	movs	r2, #4
   b5ac4:	4658      	mov	r0, fp
   b5ac6:	f7ff fe57 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
            channels * sizeof(float) + sizeof(int), sizeof(int)));
    zero_point_array[0] = channels;
    scale_array[0] = channels;
   b5aca:	4680      	mov	r8, r0
    zero_point_array[0] = channels;
   b5acc:	f8c9 a000 	str.w	sl, [r9]
    scale_array[0] = channels;
   b5ad0:	f848 ab04 	str.w	sl, [r8], #4
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5ad4:	9002      	str	r0, [sp, #8]
    int* zero_point_data = &zero_point_array[1];
    float* scale_data = reinterpret_cast<float*>(&scale_array[1]);
    for (int i = 0; i < channels; i++) {
   b5ad6:	f8cd 900c 	str.w	r9, [sp, #12]
   b5ada:	f04f 0b00 	mov.w	fp, #0
   b5ade:	45da      	cmp	sl, fp
   b5ae0:	dd1a      	ble.n	b5b18 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1d8>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   b5ae2:	4630      	mov	r0, r6
   b5ae4:	f7ff fe6f 	bl	b57c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    FLATBUFFERS_ASSERT(i < size());
   b5ae8:	6802      	ldr	r2, [r0, #0]
   b5aea:	4593      	cmp	fp, r2
   b5aec:	d302      	bcc.n	b5af4 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1b4>
   b5aee:	4b1e      	ldr	r3, [pc, #120]	; (b5b68 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x228>)
   b5af0:	4a20      	ldr	r2, [pc, #128]	; (b5b74 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x234>)
   b5af2:	e752      	b.n	b599a <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x5a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b5af4:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
   b5af8:	9b03      	ldr	r3, [sp, #12]
   b5afa:	6842      	ldr	r2, [r0, #4]
   b5afc:	f843 2f04 	str.w	r2, [r3, #4]!
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b00:	4630      	mov	r0, r6
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   b5b02:	9303      	str	r3, [sp, #12]
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b04:	f7ff fe55 	bl	b57b2 <_ZNK6tflite22QuantizationParameters5scaleEv>
   b5b08:	4659      	mov	r1, fp
   b5b0a:	f7ff fecd 	bl	b58a8 <_ZNK11flatbuffers6VectorIfE3GetEm>
    for (int i = 0; i < channels; i++) {
   b5b0e:	f10b 0b01 	add.w	fp, fp, #1
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b12:	eca8 0a01 	vstmia	r8!, {s0}
    for (int i = 0; i < channels; i++) {
   b5b16:	e7e2      	b.n	b5ade <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x19e>
    }
    quantization->scale = reinterpret_cast<TfLiteFloatArray*>(scale_array);
   b5b18:	9b01      	ldr	r3, [sp, #4]
   b5b1a:	461a      	mov	r2, r3
   b5b1c:	9b02      	ldr	r3, [sp, #8]
   b5b1e:	6013      	str	r3, [r2, #0]
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(zero_point_array);

    result->quantization = {kTfLiteAffineQuantization, quantization};
   b5b20:	2301      	movs	r3, #1
    quantization->zero_point =
   b5b22:	f8c2 9004 	str.w	r9, [r2, #4]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   b5b26:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5b2a:	6362      	str	r2, [r4, #52]	; 0x34
    auto field_offset = GetOptionalFieldOffset(field);
   b5b2c:	210a      	movs	r1, #10
   b5b2e:	4628      	mov	r0, r5
   b5b30:	f7ff fe37 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5b34:	b110      	cbz	r0, b5b3c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1fc>
    auto p = data_ + field_offset;
   b5b36:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5b38:	5828      	ldr	r0, [r5, r0]
   b5b3a:	4418      	add	r0, r3
    result->name = flatbuffer_tensor.name()->c_str();
  } else {
    result->name = "<No name>";
  }
  // These aren't used by the micro flavor of TFL, so set them to defaults.
  result->allocation = nullptr;
   b5b3c:	2300      	movs	r3, #0
  result->delegate = nullptr;
  result->buffer_handle = 0;
   b5b3e:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5b42:	3004      	adds	r0, #4
    result->name = flatbuffer_tensor.name()->c_str();
   b5b44:	6220      	str	r0, [r4, #32]
  result->allocation = nullptr;
   b5b46:	61e3      	str	r3, [r4, #28]
  result->data_is_stale = false;
   b5b48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return kTfLiteOk;
}
   b5b4c:	4638      	mov	r0, r7
   b5b4e:	b007      	add	sp, #28
   b5b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b5b54:	2701      	movs	r7, #1
   b5b56:	e7f9      	b.n	b5b4c <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x20c>
    result->allocation_type = kTfLiteArenaRw;
   b5b58:	2302      	movs	r3, #2
   b5b5a:	7523      	strb	r3, [r4, #20]
    if (preallocated_buffer != nullptr) {
   b5b5c:	2e00      	cmp	r6, #0
   b5b5e:	f43f af38 	beq.w	b59d2 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x92>
      result->data.raw = reinterpret_cast<char*>(preallocated_buffer);
   b5b62:	6066      	str	r6, [r4, #4]
   b5b64:	e735      	b.n	b59d2 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x92>
   b5b66:	bf00      	nop
   b5b68:	000c7147 	.word	0x000c7147
   b5b6c:	000c7452 	.word	0x000c7452
   b5b70:	000c721a 	.word	0x000c721a
   b5b74:	000c7548 	.word	0x000c7548

000b5b78 <_ZN6tflite14MicroAllocator15AllocateTensorsEv>:
TfLiteStatus MicroAllocator::AllocateTensors() {
   b5b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uoffset_t size() const { return EndianScalar(length_); }
   b5b7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b5b7e:	f8d3 9000 	ldr.w	r9, [r3]
      reinterpret_cast<TensorInfo*>(memory_allocator_.AllocateFromTail(
   b5b82:	2214      	movs	r2, #20
   b5b84:	fb02 f109 	mul.w	r1, r2, r9
TfLiteStatus MicroAllocator::AllocateTensors() {
   b5b88:	b093      	sub	sp, #76	; 0x4c
   b5b8a:	4604      	mov	r4, r0
      reinterpret_cast<TensorInfo*>(memory_allocator_.AllocateFromTail(
   b5b8c:	3004      	adds	r0, #4
   b5b8e:	f7ff fdf3 	bl	b5778 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
   b5b92:	4605      	mov	r5, r0
      model_->buffers();
   b5b94:	6820      	ldr	r0, [r4, #0]
   b5b96:	f7ff fe2b 	bl	b57f0 <_ZNK6tflite5Model7buffersEv>
  for (size_t i = 0; i < tensors_size; ++i) {
   b5b9a:	f04f 0800 	mov.w	r8, #0
      model_->buffers();
   b5b9e:	4602      	mov	r2, r0
  for (size_t i = 0; i < tensors_size; ++i) {
   b5ba0:	462f      	mov	r7, r5
      model_->buffers();
   b5ba2:	462e      	mov	r6, r5
      current->first_created = -1;
   b5ba4:	f04f 3aff 	mov.w	sl, #4294967295
      current->first_created = 0;
   b5ba8:	46c3      	mov	fp, r8
  for (size_t i = 0; i < tensors_size; ++i) {
   b5baa:	45c8      	cmp	r8, r9
   b5bac:	9205      	str	r2, [sp, #20]
   b5bae:	d02e      	beq.n	b5c0e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x96>
    current->flatbuffer_tensor = &(*(tensors_->Get(i)));
   b5bb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bb2:	4641      	mov	r1, r8
   b5bb4:	f7ff fea2 	bl	b58fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
   b5bb8:	6030      	str	r0, [r6, #0]
    current->runtime_tensor = &context_->tensors[i];
   b5bba:	6963      	ldr	r3, [r4, #20]
    current->flatbuffer_tensor = &(*(tensors_->Get(i)));
   b5bbc:	9004      	str	r0, [sp, #16]
    current->runtime_tensor = &context_->tensors[i];
   b5bbe:	689b      	ldr	r3, [r3, #8]
   b5bc0:	2238      	movs	r2, #56	; 0x38
   b5bc2:	fb02 3308 	mla	r3, r2, r8, r3
   b5bc6:	6073      	str	r3, [r6, #4]
   b5bc8:	9303      	str	r3, [sp, #12]
    const bool is_variable = current->flatbuffer_tensor->is_variable();
   b5bca:	f7ff fe06 	bl	b57da <_ZNK6tflite6Tensor11is_variableEv>
    if (is_variable) {
   b5bce:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
   b5bd2:	9a05      	ldr	r2, [sp, #20]
   b5bd4:	b160      	cbz	r0, b5bf0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x78>
      current->first_created = 0;
   b5bd6:	f8c6 b008 	str.w	fp, [r6, #8]
   b5bda:	6a60      	ldr	r0, [r4, #36]	; 0x24
      current->last_used = operators_->size();
   b5bdc:	6800      	ldr	r0, [r0, #0]
   b5bde:	60f0      	str	r0, [r6, #12]
    current->needs_allocating = false;
   b5be0:	f886 b010 	strb.w	fp, [r6, #16]
    if (!is_preallocated_input) {
   b5be4:	6858      	ldr	r0, [r3, #4]
   b5be6:	b130      	cbz	r0, b5bf6 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x7e>
  for (size_t i = 0; i < tensors_size; ++i) {
   b5be8:	f108 0801 	add.w	r8, r8, #1
   b5bec:	3614      	adds	r6, #20
   b5bee:	e7dc      	b.n	b5baa <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x32>
      current->last_used = -1;
   b5bf0:	e9c6 aa02 	strd	sl, sl, [r6, #8]
   b5bf4:	e7f4      	b.n	b5be0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x68>
      TF_LITE_ENSURE_STATUS(InitializeRuntimeTensor(
   b5bf6:	e9cd 3000 	strd	r3, r0, [sp]
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	6923      	ldr	r3, [r4, #16]
   b5bfe:	9203      	str	r2, [sp, #12]
   b5c00:	f7ff fe9e 	bl	b5940 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh>
   b5c04:	9a03      	ldr	r2, [sp, #12]
   b5c06:	2800      	cmp	r0, #0
   b5c08:	d0ee      	beq.n	b5be8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x70>
   b5c0a:	2401      	movs	r4, #1
   b5c0c:	e0b3      	b.n	b5d76 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1fe>
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c0e:	2600      	movs	r6, #0
    TensorInfo* current = &tensor_info[tensor_index];
   b5c10:	f04f 0914 	mov.w	r9, #20
    current->first_created = 0;
   b5c14:	46b0      	mov	r8, r6
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b5c16:	6a20      	ldr	r0, [r4, #32]
   b5c18:	2106      	movs	r1, #6
   b5c1a:	f7ff fe87 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c1e:	6803      	ldr	r3, [r0, #0]
   b5c20:	429e      	cmp	r6, r3
   b5c22:	d20e      	bcs.n	b5c42 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xca>
    const int tensor_index = subgraph_->inputs()->Get(i);
   b5c24:	4631      	mov	r1, r6
   b5c26:	f7ff fe55 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
    TensorInfo* current = &tensor_info[tensor_index];
   b5c2a:	fb09 5000 	mla	r0, r9, r0, r5
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c2e:	3601      	adds	r6, #1
    current->needs_allocating = (current->runtime_tensor->data.raw == nullptr);
   b5c30:	6843      	ldr	r3, [r0, #4]
   b5c32:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
   b5c34:	f8c0 8008 	str.w	r8, [r0, #8]
    current->needs_allocating = (current->runtime_tensor->data.raw == nullptr);
   b5c38:	fab3 f383 	clz	r3, r3
   b5c3c:	095b      	lsrs	r3, r3, #5
   b5c3e:	7403      	strb	r3, [r0, #16]
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c40:	e7e9      	b.n	b5c16 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x9e>
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5c42:	2600      	movs	r6, #0
    current->last_used = operators_->size() - 1;
   b5c44:	f04f 0814 	mov.w	r8, #20
   b5c48:	6a20      	ldr	r0, [r4, #32]
   b5c4a:	2108      	movs	r1, #8
   b5c4c:	f7ff fe6e 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5c50:	6803      	ldr	r3, [r0, #0]
   b5c52:	429e      	cmp	r6, r3
   b5c54:	d20a      	bcs.n	b5c6c <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xf4>
    const int tensor_index = subgraph_->outputs()->Get(i);
   b5c56:	4631      	mov	r1, r6
   b5c58:	f7ff fe3c 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
  uoffset_t size() const { return EndianScalar(length_); }
   b5c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    current->last_used = operators_->size() - 1;
   b5c5e:	681b      	ldr	r3, [r3, #0]
   b5c60:	fb08 5000 	mla	r0, r8, r0, r5
   b5c64:	3b01      	subs	r3, #1
   b5c66:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5c68:	3601      	adds	r6, #1
   b5c6a:	e7ed      	b.n	b5c48 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xd0>
   b5c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5c6e:	681e      	ldr	r6, [r3, #0]
      TensorInfo* current = &tensor_info[tensor_index];
   b5c70:	f04f 0914 	mov.w	r9, #20
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5c74:	3e01      	subs	r6, #1
   b5c76:	2e00      	cmp	r6, #0
   b5c78:	db3f      	blt.n	b5cfa <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x182>
    const auto* op = operators_->Get(i);
   b5c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    FLATBUFFERS_ASSERT(i < size());
   b5c7c:	681a      	ldr	r2, [r3, #0]
   b5c7e:	42b2      	cmp	r2, r6
   b5c80:	d805      	bhi.n	b5c8e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x116>
   b5c82:	4b63      	ldr	r3, [pc, #396]	; (b5e10 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x298>)
   b5c84:	4a63      	ldr	r2, [pc, #396]	; (b5e14 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x29c>)
   b5c86:	4864      	ldr	r0, [pc, #400]	; (b5e18 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a0>)
   b5c88:	21ed      	movs	r1, #237	; 0xed
   b5c8a:	f00e fdc7 	bl	c481c <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5c8e:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   b5c90:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5c94:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   b5c98:	f04f 0800 	mov.w	r8, #0
   b5c9c:	449a      	add	sl, r3
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b5c9e:	2106      	movs	r1, #6
   b5ca0:	4650      	mov	r0, sl
   b5ca2:	f7ff fe43 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5ca6:	6803      	ldr	r3, [r0, #0]
   b5ca8:	4598      	cmp	r8, r3
   b5caa:	d20d      	bcs.n	b5cc8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x150>
      const int tensor_index = op->inputs()->Get(n);
   b5cac:	4641      	mov	r1, r8
   b5cae:	f7ff fe11 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TensorInfo* current = &tensor_info[tensor_index];
   b5cb2:	fb09 5000 	mla	r0, r9, r0, r5
      if ((current->last_used == -1) || (current->last_used > i)) {
   b5cb6:	68c3      	ldr	r3, [r0, #12]
   b5cb8:	1c59      	adds	r1, r3, #1
   b5cba:	d001      	beq.n	b5cc0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x148>
   b5cbc:	42b3      	cmp	r3, r6
   b5cbe:	dd00      	ble.n	b5cc2 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x14a>
        current->last_used = i;
   b5cc0:	60c6      	str	r6, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   b5cc2:	f108 0801 	add.w	r8, r8, #1
   b5cc6:	e7ea      	b.n	b5c9e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x126>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   b5cc8:	f04f 0800 	mov.w	r8, #0
   b5ccc:	2108      	movs	r1, #8
   b5cce:	4650      	mov	r0, sl
   b5cd0:	f7ff fe2c 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5cd4:	6803      	ldr	r3, [r0, #0]
   b5cd6:	4598      	cmp	r8, r3
   b5cd8:	d20d      	bcs.n	b5cf6 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x17e>
      const int tensor_index = op->outputs()->Get(n);
   b5cda:	4641      	mov	r1, r8
   b5cdc:	f7ff fdfa 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TensorInfo* current = &tensor_info[tensor_index];
   b5ce0:	fb09 5000 	mla	r0, r9, r0, r5
      if ((current->first_created == -1) || (current->first_created < i)) {
   b5ce4:	6883      	ldr	r3, [r0, #8]
   b5ce6:	1c5a      	adds	r2, r3, #1
   b5ce8:	d001      	beq.n	b5cee <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x176>
   b5cea:	42b3      	cmp	r3, r6
   b5cec:	da00      	bge.n	b5cf0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x178>
        current->first_created = i;
   b5cee:	6086      	str	r6, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   b5cf0:	f108 0801 	add.w	r8, r8, #1
   b5cf4:	e7ea      	b.n	b5ccc <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x154>
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5cf6:	3e01      	subs	r6, #1
   b5cf8:	e7bd      	b.n	b5c76 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xfe>
   b5cfa:	462b      	mov	r3, r5
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5cfc:	2200      	movs	r2, #0
      current->needs_allocating = true;
   b5cfe:	2001      	movs	r0, #1
  uoffset_t size() const { return EndianScalar(length_); }
   b5d00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d02:	6809      	ldr	r1, [r1, #0]
   b5d04:	428a      	cmp	r2, r1
   b5d06:	d213      	bcs.n	b5d30 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b8>
        (current->first_created == -1) && (current->last_used != -1);
   b5d08:	6899      	ldr	r1, [r3, #8]
   b5d0a:	3101      	adds	r1, #1
   b5d0c:	68d9      	ldr	r1, [r3, #12]
   b5d0e:	d106      	bne.n	b5d1e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1a6>
   b5d10:	3101      	adds	r1, #1
   b5d12:	d10a      	bne.n	b5d2a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b2>
      error_reporter_->Report(
   b5d14:	4941      	ldr	r1, [pc, #260]	; (b5e1c <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a4>)
   b5d16:	6920      	ldr	r0, [r4, #16]
   b5d18:	f00e fbfa 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   b5d1c:	e775      	b.n	b5c0a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x92>
        ((current->first_created == -1) || (current->last_used == -1));
   b5d1e:	3101      	adds	r1, #1
   b5d20:	d0f8      	beq.n	b5d14 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x19c>
        (current->runtime_tensor->data.raw != nullptr);
   b5d22:	6859      	ldr	r1, [r3, #4]
    if (!is_read_only && !is_preallocated_input) {
   b5d24:	6849      	ldr	r1, [r1, #4]
   b5d26:	b901      	cbnz	r1, b5d2a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b2>
      current->needs_allocating = true;
   b5d28:	7418      	strb	r0, [r3, #16]
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d2a:	3201      	adds	r2, #1
   b5d2c:	3314      	adds	r3, #20
   b5d2e:	e7e7      	b.n	b5d00 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x188>
  uint8_t* aligned_arena = AlignPointerUp(arena_, kBufferAlignment);
   b5d30:	2110      	movs	r1, #16
   b5d32:	69a0      	ldr	r0, [r4, #24]
   b5d34:	f7ff fca8 	bl	b5688 <_ZN6tflite14AlignPointerUpEPhj>
      arena_size_ - (memory_allocator_.GetDataSize() + alignment_loss);
   b5d38:	6863      	ldr	r3, [r4, #4]
   b5d3a:	69e6      	ldr	r6, [r4, #28]
   b5d3c:	1af6      	subs	r6, r6, r3
  const size_t alignment_loss = (aligned_arena - arena_);
   b5d3e:	69a3      	ldr	r3, [r4, #24]
   b5d40:	1ac3      	subs	r3, r0, r3
      arena_size_ - (memory_allocator_.GetDataSize() + alignment_loss);
   b5d42:	1af6      	subs	r6, r6, r3
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5d44:	4601      	mov	r1, r0
  uint8_t* aligned_arena = AlignPointerUp(arena_, kBufferAlignment);
   b5d46:	4680      	mov	r8, r0
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5d48:	4632      	mov	r2, r6
   b5d4a:	a808      	add	r0, sp, #32
   b5d4c:	f00d fa20 	bl	c3190 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d50:	f04f 0900 	mov.w	r9, #0
   b5d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5d56:	681b      	ldr	r3, [r3, #0]
   b5d58:	4599      	cmp	r9, r3
   b5d5a:	d220      	bcs.n	b5d9e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x226>
    if (current->needs_allocating) {
   b5d5c:	7c2b      	ldrb	r3, [r5, #16]
   b5d5e:	b1d3      	cbz	r3, b5d96 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x21e>
      TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(*current->flatbuffer_tensor,
   b5d60:	6923      	ldr	r3, [r4, #16]
   b5d62:	6828      	ldr	r0, [r5, #0]
   b5d64:	aa07      	add	r2, sp, #28
   b5d66:	a906      	add	r1, sp, #24
   b5d68:	f7ff fcc4 	bl	b56f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   b5d6c:	b138      	cbz	r0, b5d7e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x206>
    return kTfLiteError;
   b5d6e:	2401      	movs	r4, #1
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5d70:	a808      	add	r0, sp, #32
   b5d72:	f00d f9c5 	bl	c3100 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
}
   b5d76:	4620      	mov	r0, r4
   b5d78:	b013      	add	sp, #76	; 0x4c
   b5d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          AlignSizeUp(bytes_required, kBufferAlignment);
   b5d7e:	2110      	movs	r1, #16
   b5d80:	9806      	ldr	r0, [sp, #24]
   b5d82:	f7ff fc8b 	bl	b569c <_ZN6tflite11AlignSizeUpEjj>
      planner.AddBuffer(error_reporter_, aligned_bytes_required,
   b5d86:	68eb      	ldr	r3, [r5, #12]
   b5d88:	9300      	str	r3, [sp, #0]
          AlignSizeUp(bytes_required, kBufferAlignment);
   b5d8a:	4602      	mov	r2, r0
      planner.AddBuffer(error_reporter_, aligned_bytes_required,
   b5d8c:	68ab      	ldr	r3, [r5, #8]
   b5d8e:	6921      	ldr	r1, [r4, #16]
   b5d90:	a808      	add	r0, sp, #32
   b5d92:	f00d f9bf 	bl	c3114 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d96:	f109 0901 	add.w	r9, r9, #1
   b5d9a:	3514      	adds	r5, #20
   b5d9c:	e7da      	b.n	b5d54 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1dc>
  if (planner.GetMaximumMemorySize() > remaining_arena_size) {
   b5d9e:	a808      	add	r0, sp, #32
   b5da0:	f00d fad5 	bl	c334e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   b5da4:	42b0      	cmp	r0, r6
   b5da6:	dd0a      	ble.n	b5dbe <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x246>
    error_reporter_->Report(
   b5da8:	a808      	add	r0, sp, #32
   b5daa:	6924      	ldr	r4, [r4, #16]
   b5dac:	f00d facf 	bl	c334e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   b5db0:	491b      	ldr	r1, [pc, #108]	; (b5e20 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a8>)
   b5db2:	4602      	mov	r2, r0
   b5db4:	4633      	mov	r3, r6
   b5db6:	4620      	mov	r0, r4
   b5db8:	f00e fbaa 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   b5dbc:	e7d7      	b.n	b5d6e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5dbe:	2500      	movs	r5, #0
  int planner_index = 0;
   b5dc0:	462e      	mov	r6, r5
   b5dc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	429d      	cmp	r5, r3
   b5dc8:	d21f      	bcs.n	b5e0a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x292>
    if (current->needs_allocating) {
   b5dca:	7c3b      	ldrb	r3, [r7, #16]
   b5dcc:	b163      	cbz	r3, b5de8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x270>
      TF_LITE_ENSURE_STATUS(
   b5dce:	6921      	ldr	r1, [r4, #16]
   b5dd0:	ab07      	add	r3, sp, #28
   b5dd2:	4632      	mov	r2, r6
   b5dd4:	a808      	add	r0, sp, #32
   b5dd6:	f00d fad5 	bl	c3384 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
   b5dda:	2800      	cmp	r0, #0
   b5ddc:	d1c7      	bne.n	b5d6e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
      current->runtime_tensor->data.uint8 = aligned_arena + offset;
   b5dde:	9b07      	ldr	r3, [sp, #28]
   b5de0:	687a      	ldr	r2, [r7, #4]
   b5de2:	4443      	add	r3, r8
   b5de4:	6053      	str	r3, [r2, #4]
      ++planner_index;
   b5de6:	3601      	adds	r6, #1
    if (current->flatbuffer_tensor->is_variable()) {
   b5de8:	6838      	ldr	r0, [r7, #0]
   b5dea:	f7ff fcf6 	bl	b57da <_ZNK6tflite6Tensor11is_variableEv>
   b5dee:	b148      	cbz	r0, b5e04 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x28c>
      if (current->runtime_tensor->data.uint8 == nullptr) {
   b5df0:	6878      	ldr	r0, [r7, #4]
   b5df2:	6843      	ldr	r3, [r0, #4]
   b5df4:	b923      	cbnz	r3, b5e00 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x288>
        error_reporter_->Report("Variable is not allocated");
   b5df6:	490b      	ldr	r1, [pc, #44]	; (b5e24 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2ac>)
   b5df8:	6920      	ldr	r0, [r4, #16]
   b5dfa:	f00e fb89 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   b5dfe:	e7b6      	b.n	b5d6e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
      tflite::ResetVariableTensor(current->runtime_tensor);
   b5e00:	f00e fb94 	bl	c452c <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5e04:	3501      	adds	r5, #1
   b5e06:	3714      	adds	r7, #20
   b5e08:	e7db      	b.n	b5dc2 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x24a>
  return kTfLiteOk;
   b5e0a:	2400      	movs	r4, #0
   b5e0c:	e7b0      	b.n	b5d70 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f8>
   b5e0e:	bf00      	nop
   b5e10:	000c7147 	.word	0x000c7147
   b5e14:	000c7620 	.word	0x000c7620
   b5e18:	000c721a 	.word	0x000c721a
   b5e1c:	000c771a 	.word	0x000c771a
   b5e20:	000c775b 	.word	0x000c775b
   b5e24:	000c77b0 	.word	0x000c77b0

000b5e28 <_ZN6tflite12_GLOBAL__N_118StackDataAllocator8AllocateEj>:
namespace {
const int kStackDataAllocatorSize = 128;
class StackDataAllocator : public BuiltinDataAllocator {
 public:
  void* Allocate(size_t size) override {
    if (size > kStackDataAllocatorSize) {
   b5e28:	2980      	cmp	r1, #128	; 0x80
      return nullptr;
    } else {
      return data_;
   b5e2a:	bf94      	ite	ls
   b5e2c:	3004      	addls	r0, #4
      return nullptr;
   b5e2e:	2000      	movhi	r0, #0
    }
  }
   b5e30:	4770      	bx	lr

000b5e32 <_ZN6tflite12_GLOBAL__N_118StackDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
    // Do nothing.
  }
   b5e32:	4770      	bx	lr

000b5e34 <_ZN6tflite12_GLOBAL__N_118StackDataAllocatorD1Ev>:
class StackDataAllocator : public BuiltinDataAllocator {
   b5e34:	4770      	bx	lr

000b5e36 <_ZN6tflite12_GLOBAL__N_113ReportOpErrorEP13TfLiteContextPKcz>:
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}

void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5e36:	b40e      	push	{r1, r2, r3}
   b5e38:	b503      	push	{r0, r1, lr}
  MicroInterpreter* interpreter =
   b5e3a:	68c3      	ldr	r3, [r0, #12]
  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }

  TfLiteStatus initialization_status() const { return initialization_status_; }

  ErrorReporter* error_reporter() { return error_reporter_; }
   b5e3c:	6898      	ldr	r0, [r3, #8]
void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5e3e:	aa03      	add	r2, sp, #12
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
  interpreter->error_reporter()->Report(format, args);
   b5e40:	6803      	ldr	r3, [r0, #0]
void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5e42:	f852 1b04 	ldr.w	r1, [r2], #4
  interpreter->error_reporter()->Report(format, args);
   b5e46:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   b5e48:	9201      	str	r2, [sp, #4]
  interpreter->error_reporter()->Report(format, args);
   b5e4a:	4798      	blx	r3
  va_end(args);
}
   b5e4c:	b002      	add	sp, #8
   b5e4e:	f85d eb04 	ldr.w	lr, [sp], #4
   b5e52:	b003      	add	sp, #12
   b5e54:	4770      	bx	lr

000b5e56 <_ZN6tflite12_GLOBAL__N_118StackDataAllocatorD0Ev>:
class StackDataAllocator : public BuiltinDataAllocator {
   b5e56:	b510      	push	{r4, lr}
   b5e58:	2184      	movs	r1, #132	; 0x84
   b5e5a:	4604      	mov	r4, r0
   b5e5c:	f7fe fe55 	bl	b4b0a <_ZdlPvj>
   b5e60:	4620      	mov	r0, r4
   b5e62:	bd10      	pop	{r4, pc}

000b5e64 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE>:

}  // namespace

MicroInterpreter::MicroInterpreter(const Model* model,
   b5e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e66:	b085      	sub	sp, #20
      op_resolver_(op_resolver),
      error_reporter_(error_reporter),
      context_(),
      allocator_(&context_, model_, tensor_arena, tensor_arena_size,
                 error_reporter_),
      tensors_allocated_(false) {
   b5e68:	f100 070c 	add.w	r7, r0, #12
MicroInterpreter::MicroInterpreter(const Model* model,
   b5e6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
      tensors_allocated_(false) {
   b5e6e:	6086      	str	r6, [r0, #8]
   b5e70:	e9c0 1200 	strd	r1, r2, [r0]
MicroInterpreter::MicroInterpreter(const Model* model,
   b5e74:	4604      	mov	r4, r0
   b5e76:	460d      	mov	r5, r1
      tensors_allocated_(false) {
   b5e78:	2238      	movs	r2, #56	; 0x38
   b5e7a:	2100      	movs	r1, #0
   b5e7c:	4638      	mov	r0, r7
MicroInterpreter::MicroInterpreter(const Model* model,
   b5e7e:	9303      	str	r3, [sp, #12]
      tensors_allocated_(false) {
   b5e80:	f010 fe70 	bl	c6b64 <memset>
   b5e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5e86:	9b03      	ldr	r3, [sp, #12]
   b5e88:	9200      	str	r2, [sp, #0]
   b5e8a:	4639      	mov	r1, r7
   b5e8c:	9601      	str	r6, [sp, #4]
   b5e8e:	462a      	mov	r2, r5
   b5e90:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5e94:	f7ff fcb6 	bl	b5804 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>
   b5e98:	2300      	movs	r3, #0
   b5e9a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    auto field_offset = GetOptionalFieldOffset(field);
   b5e9e:	2108      	movs	r1, #8
   b5ea0:	4628      	mov	r0, r5
   b5ea2:	f7ff fc7e 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5ea6:	b360      	cbz	r0, b5f02 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x9e>
   b5ea8:	582a      	ldr	r2, [r5, r0]
    auto p = data_ + field_offset;
   b5eaa:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5eac:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   b5eae:	588a      	ldr	r2, [r1, r2]
   b5eb0:	2a01      	cmp	r2, #1
   b5eb2:	d009      	beq.n	b5ec8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x64>
    error_reporter->Report("Only 1 subgraph is currently supported.\n");
   b5eb4:	4914      	ldr	r1, [pc, #80]	; (b5f08 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0xa4>)
   b5eb6:	4630      	mov	r0, r6
   b5eb8:	f00e fb2a 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
   b5ebc:	2301      	movs	r3, #1
        CorrectTensorEndianness(thisTensor);
    }
  }

  initialization_status_ = kTfLiteOk;
}
   b5ebe:	4620      	mov	r0, r4
  initialization_status_ = kTfLiteOk;
   b5ec0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
   b5ec4:	b005      	add	sp, #20
   b5ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5ec8:	1d1d      	adds	r5, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5eca:	685b      	ldr	r3, [r3, #4]
   b5ecc:	441d      	add	r5, r3
  subgraph_ = (*subgraphs)[0];
   b5ece:	67e5      	str	r5, [r4, #124]	; 0x7c
    auto field_offset = GetOptionalFieldOffset(field);
   b5ed0:	2104      	movs	r1, #4
   b5ed2:	4628      	mov	r0, r5
   b5ed4:	f7ff fc65 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5ed8:	b110      	cbz	r0, b5ee0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x7c>
    auto p = data_ + field_offset;
   b5eda:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5edc:	5828      	ldr	r0, [r5, r0]
   b5ede:	4418      	add	r0, r3
  tensors_ = subgraph_->tensors();
   b5ee0:	6760      	str	r0, [r4, #116]	; 0x74
    auto field_offset = GetOptionalFieldOffset(field);
   b5ee2:	210a      	movs	r1, #10
   b5ee4:	4628      	mov	r0, r5
   b5ee6:	f7ff fc5c 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5eea:	b110      	cbz	r0, b5ef2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x8e>
    auto p = data_ + field_offset;
   b5eec:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5eee:	5828      	ldr	r0, [r5, r0]
   b5ef0:	4418      	add	r0, r3
  context_.ReportError = ReportOpError;
   b5ef2:	4b06      	ldr	r3, [pc, #24]	; (b5f0c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0xa8>)
   b5ef4:	6223      	str	r3, [r4, #32]
  context_.recommended_num_threads = 1;
   b5ef6:	2301      	movs	r3, #1
   b5ef8:	6323      	str	r3, [r4, #48]	; 0x30
  operators_ = subgraph_->operators();
   b5efa:	67a0      	str	r0, [r4, #120]	; 0x78
  context_.impl_ = static_cast<void*>(this);
   b5efc:	61a4      	str	r4, [r4, #24]
  initialization_status_ = kTfLiteOk;
   b5efe:	2300      	movs	r3, #0
   b5f00:	e7dd      	b.n	b5ebe <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
   b5f02:	6803      	ldr	r3, [r0, #0]
   b5f04:	deff      	udf	#255	; 0xff
   b5f06:	bf00      	nop
   b5f08:	000c711e 	.word	0x000c711e
   b5f0c:	000b5e37 	.word	0x000b5e37

000b5f10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::RegisterPreallocatedInput(uint8_t* buffer,
                                                         size_t input_index) {
  return allocator_.RegisterPreallocatedInput(buffer, input_index);
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
   b5f10:	b510      	push	{r4, lr}
   b5f12:	4604      	mov	r4, r0
  TfLiteStatus status = allocator_.AllocateTensors();
   b5f14:	3044      	adds	r0, #68	; 0x44
   b5f16:	f7ff fe2f 	bl	b5b78 <_ZN6tflite14MicroAllocator15AllocateTensorsEv>
  TF_LITE_ENSURE_OK(&context_, status);
   b5f1a:	2301      	movs	r3, #1
   b5f1c:	b910      	cbnz	r0, b5f24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x14>
  tensors_allocated_ = true;
   b5f1e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  return kTfLiteOk;
}
   b5f22:	bd10      	pop	{r4, pc}
  TF_LITE_ENSURE_OK(&context_, status);
   b5f24:	4618      	mov	r0, r3
   b5f26:	e7fc      	b.n	b5f22 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x12>

000b5f28 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
   b5f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
   b5f2c:	f890 a071 	ldrb.w	sl, [r0, #113]	; 0x71
TfLiteStatus MicroInterpreter::Invoke() {
   b5f30:	b0c3      	sub	sp, #268	; 0x10c
   b5f32:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
   b5f34:	f1ba 0f00 	cmp.w	sl, #0
   b5f38:	d009      	beq.n	b5f4e <_ZN6tflite16MicroInterpreter6InvokeEv+0x26>
    error_reporter_->Report("Invoke() called after initialization failed\n");
   b5f3a:	4974      	ldr	r1, [pc, #464]	; (b610c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e4>)
   b5f3c:	6880      	ldr	r0, [r0, #8]
   b5f3e:	f00e fae7 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   b5f42:	f04f 0a01 	mov.w	sl, #1
    if (registration->free) {
      registration->free(&context_, user_data);
    }
  }
  return status;
}
   b5f46:	4650      	mov	r0, sl
   b5f48:	b043      	add	sp, #268	; 0x10c
   b5f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
   b5f4e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   b5f52:	b90b      	cbnz	r3, b5f58 <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>
    AllocateTensors();
   b5f54:	f7ff ffdc 	bl	b5f10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OperatorCode>> *>(VT_OPERATOR_CODES);
   b5f58:	6826      	ldr	r6, [r4, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   b5f5a:	2106      	movs	r1, #6
   b5f5c:	4630      	mov	r0, r6
   b5f5e:	f7ff fc20 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f62:	b300      	cbz	r0, b5fa6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x7e>
   b5f64:	5835      	ldr	r5, [r6, r0]
    auto p = data_ + field_offset;
   b5f66:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f68:	441d      	add	r5, r3
  for (size_t i = 0; i < operators_->size(); ++i) {
   b5f6a:	f04f 0900 	mov.w	r9, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5f6e:	46cb      	mov	fp, r9
   b5f70:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b5f72:	681a      	ldr	r2, [r3, #0]
   b5f74:	4591      	cmp	r9, r2
   b5f76:	d2e6      	bcs.n	b5f46 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5f78:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   b5f7a:	eb03 0689 	add.w	r6, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5f7e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   b5f82:	441e      	add	r6, r3
    auto field_offset = GetOptionalFieldOffset(field);
   b5f84:	2104      	movs	r1, #4
   b5f86:	4630      	mov	r0, r6
   b5f88:	f7ff fc0b 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5f8c:	b168      	cbz	r0, b5faa <_ZN6tflite16MicroInterpreter6InvokeEv+0x82>
   b5f8e:	5837      	ldr	r7, [r6, r0]
    if (index < 0 || index >= opcodes->size()) {
   b5f90:	682b      	ldr	r3, [r5, #0]
      error_reporter_->Report("Missing registration for opcode_index %d\n",
   b5f92:	68a0      	ldr	r0, [r4, #8]
    if (index < 0 || index >= opcodes->size()) {
   b5f94:	42bb      	cmp	r3, r7
   b5f96:	d80a      	bhi.n	b5fae <_ZN6tflite16MicroInterpreter6InvokeEv+0x86>
      error_reporter_->Report("Missing registration for opcode_index %d\n",
   b5f98:	495d      	ldr	r1, [pc, #372]	; (b6110 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e8>)
   b5f9a:	463a      	mov	r2, r7
      error_reporter_->Report(
   b5f9c:	f00e fab8 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class StackDataAllocator : public BuiltinDataAllocator {
   b5fa0:	2001      	movs	r0, #1
      return kTfLiteError;
   b5fa2:	4682      	mov	sl, r0
   b5fa4:	e7cf      	b.n	b5f46 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5fa6:	4605      	mov	r5, r0
   b5fa8:	e7df      	b.n	b5f6a <_ZN6tflite16MicroInterpreter6InvokeEv+0x42>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5faa:	4607      	mov	r7, r0
   b5fac:	e7f0      	b.n	b5f90 <_ZN6tflite16MicroInterpreter6InvokeEv+0x68>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5fae:	1d2b      	adds	r3, r5, #4
    p += i * sizeof(uoffset_t);
   b5fb0:	eb03 0c87 	add.w	ip, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5fb4:	f853 e027 	ldr.w	lr, [r3, r7, lsl #2]
    status = GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
   b5fb8:	6861      	ldr	r1, [r4, #4]
    const TfLiteRegistration* registration = nullptr;
   b5fba:	f8cd b014 	str.w	fp, [sp, #20]
    status = GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
   b5fbe:	4602      	mov	r2, r0
   b5fc0:	ab05      	add	r3, sp, #20
   b5fc2:	eb0c 000e 	add.w	r0, ip, lr
   b5fc6:	f00e fa49 	bl	c445c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
    if (status != kTfLiteOk) {
   b5fca:	2800      	cmp	r0, #0
   b5fcc:	d1e9      	bne.n	b5fa2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x7a>
    if (registration == nullptr) {
   b5fce:	9b05      	ldr	r3, [sp, #20]
   b5fd0:	b91b      	cbnz	r3, b5fda <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
      error_reporter_->Report("Skipping op for opcode_index %d\n", index);
   b5fd2:	4950      	ldr	r1, [pc, #320]	; (b6114 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1ec>)
   b5fd4:	463a      	mov	r2, r7
      error_reporter_->Report(
   b5fd6:	68a0      	ldr	r0, [r4, #8]
   b5fd8:	e7e0      	b.n	b5f9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x74>
    BuiltinOperator op_type =
   b5fda:	7d1f      	ldrb	r7, [r3, #20]
    if (op_type != BuiltinOperator_CUSTOM && op->custom_options()) {
   b5fdc:	2f20      	cmp	r7, #32
   b5fde:	d00c      	beq.n	b5ffa <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
    auto field_offset = GetOptionalFieldOffset(field);
   b5fe0:	210e      	movs	r1, #14
   b5fe2:	4630      	mov	r0, r6
   b5fe4:	f7ff fbdd 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5fe8:	b138      	cbz	r0, b5ffa <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b5fea:	2f79      	cmp	r7, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b5fec:	bf96      	itet	ls
   b5fee:	4b4a      	ldrls	r3, [pc, #296]	; (b6118 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b5ff0:	4a4a      	ldrhi	r2, [pc, #296]	; (b611c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b5ff2:	f853 2027 	ldrls.w	r2, [r3, r7, lsl #2]
      error_reporter_->Report(
   b5ff6:	494a      	ldr	r1, [pc, #296]	; (b6120 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f8>)
   b5ff8:	e7ed      	b.n	b5fd6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xae>
class StackDataAllocator : public BuiltinDataAllocator {
   b5ffa:	4b4a      	ldr	r3, [pc, #296]	; (b6124 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1fc>)
   b5ffc:	9321      	str	r3, [sp, #132]	; 0x84
    auto field_offset = GetOptionalFieldOffset(field);
   b5ffe:	210e      	movs	r1, #14
   b6000:	4630      	mov	r0, r6
    unsigned char* builtin_data = nullptr;
   b6002:	f8cd b018 	str.w	fp, [sp, #24]
   b6006:	f7ff fbcc 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
   b600a:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b600c:	2800      	cmp	r0, #0
   b600e:	d042      	beq.n	b6096 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16e>
   b6010:	5832      	ldr	r2, [r6, r0]
   b6012:	188b      	adds	r3, r1, r2
  uoffset_t size() const { return EndianScalar(length_); }
   b6014:	f851 8002 	ldr.w	r8, [r1, r2]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b6018:	3304      	adds	r3, #4
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b601a:	9805      	ldr	r0, [sp, #20]
   b601c:	6942      	ldr	r2, [r0, #20]
    if (registration->init) {
   b601e:	6807      	ldr	r7, [r0, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b6020:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(builtin_data);
   b6022:	bf19      	ittee	ne
   b6024:	9906      	ldrne	r1, [sp, #24]
      init_data_size = 0;
   b6026:	2200      	movne	r2, #0
      init_data_size = custom_data_size;
   b6028:	4642      	moveq	r2, r8
      init_data = custom_data;
   b602a:	4619      	moveq	r1, r3
    if (registration->init) {
   b602c:	b12f      	cbz	r7, b603a <_ZN6tflite16MicroInterpreter6InvokeEv+0x112>
      user_data = registration->init(&context_, init_data, init_data_size);
   b602e:	f104 000c 	add.w	r0, r4, #12
   b6032:	9302      	str	r3, [sp, #8]
   b6034:	47b8      	blx	r7
   b6036:	9b02      	ldr	r3, [sp, #8]
   b6038:	4607      	mov	r7, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b603a:	2106      	movs	r1, #6
   b603c:	4630      	mov	r0, r6
   b603e:	9303      	str	r3, [sp, #12]
   b6040:	f7ff fc74 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b6044:	2108      	movs	r1, #8
   b6046:	9002      	str	r0, [sp, #8]
   b6048:	4630      	mov	r0, r6
   b604a:	f7ff fc6f 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    node.inputs = inputs_array;
   b604e:	9a02      	ldr	r2, [sp, #8]
    node.custom_initial_data = custom_data;
   b6050:	9b03      	ldr	r3, [sp, #12]
    node.delegate = nullptr;
   b6052:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    node.outputs = outputs_array;
   b6056:	e9cd 2007 	strd	r2, r0, [sp, #28]
    node.temporaries = temporaries_array;
   b605a:	aa10      	add	r2, sp, #64	; 0x40
    node.user_data = user_data;
   b605c:	e9cd 270a 	strd	r2, r7, [sp, #40]	; 0x28
    node.custom_initial_data_size = custom_data_size;
   b6060:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
    node.builtin_data = reinterpret_cast<void*>(builtin_data);
   b6064:	9a06      	ldr	r2, [sp, #24]
    if (registration->prepare) {
   b6066:	9b05      	ldr	r3, [sp, #20]
    node.builtin_data = reinterpret_cast<void*>(builtin_data);
   b6068:	920c      	str	r2, [sp, #48]	; 0x30
    if (registration->prepare) {
   b606a:	689b      	ldr	r3, [r3, #8]
    temporaries_array->size = 0;
   b606c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    if (registration->prepare) {
   b6070:	b33b      	cbz	r3, b60c2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x19a>
      TfLiteStatus prepare_status = registration->prepare(&context_, &node);
   b6072:	a907      	add	r1, sp, #28
   b6074:	f104 000c 	add.w	r0, r4, #12
   b6078:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
   b607a:	4601      	mov	r1, r0
   b607c:	b308      	cbz	r0, b60c2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x19a>
        error_reporter_->Report(
   b607e:	9a05      	ldr	r2, [sp, #20]
   b6080:	68a0      	ldr	r0, [r4, #8]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b6082:	6953      	ldr	r3, [r2, #20]
   b6084:	2b20      	cmp	r3, #32
   b6086:	d114      	bne.n	b60b2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18a>
    return registration->custom_name;
   b6088:	6992      	ldr	r2, [r2, #24]
        error_reporter_->Report(
   b608a:	9100      	str	r1, [sp, #0]
   b608c:	4926      	ldr	r1, [pc, #152]	; (b6128 <_ZN6tflite16MicroInterpreter6InvokeEv+0x200>)
   b608e:	464b      	mov	r3, r9
        error_reporter_->Report(
   b6090:	f00e fa3e 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   b6094:	e784      	b.n	b5fa0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
      TF_LITE_ENSURE_STATUS(ParseOpData(op, op_type, error_reporter_,
   b6096:	ab06      	add	r3, sp, #24
   b6098:	9300      	str	r3, [sp, #0]
   b609a:	68a2      	ldr	r2, [r4, #8]
   b609c:	ab21      	add	r3, sp, #132	; 0x84
   b609e:	4639      	mov	r1, r7
   b60a0:	4630      	mov	r0, r6
   b60a2:	f00d fa27 	bl	c34f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   b60a6:	2800      	cmp	r0, #0
   b60a8:	f47f af7a 	bne.w	b5fa0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
    size_t custom_data_size = 0;
   b60ac:	4680      	mov	r8, r0
    const char* custom_data = nullptr;
   b60ae:	4603      	mov	r3, r0
   b60b0:	e7b3      	b.n	b601a <_ZN6tflite16MicroInterpreter6InvokeEv+0xf2>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b60b2:	b2db      	uxtb	r3, r3
   b60b4:	2b79      	cmp	r3, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b60b6:	bf96      	itet	ls
   b60b8:	4a17      	ldrls	r2, [pc, #92]	; (b6118 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b60ba:	4a18      	ldrhi	r2, [pc, #96]	; (b611c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b60bc:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   b60c0:	e7e3      	b.n	b608a <_ZN6tflite16MicroInterpreter6InvokeEv+0x162>
    if (registration->invoke) {
   b60c2:	9b05      	ldr	r3, [sp, #20]
   b60c4:	68db      	ldr	r3, [r3, #12]
   b60c6:	b1bb      	cbz	r3, b60f8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1d0>
      TfLiteStatus invoke_status = registration->invoke(&context_, &node);
   b60c8:	a907      	add	r1, sp, #28
   b60ca:	f104 000c 	add.w	r0, r4, #12
   b60ce:	4798      	blx	r3
      if (invoke_status != kTfLiteOk) {
   b60d0:	4601      	mov	r1, r0
   b60d2:	b188      	cbz	r0, b60f8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1d0>
        error_reporter_->Report(
   b60d4:	9a05      	ldr	r2, [sp, #20]
   b60d6:	68a0      	ldr	r0, [r4, #8]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b60d8:	6953      	ldr	r3, [r2, #20]
   b60da:	2b20      	cmp	r3, #32
   b60dc:	d104      	bne.n	b60e8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c0>
    return registration->custom_name;
   b60de:	6992      	ldr	r2, [r2, #24]
        error_reporter_->Report(
   b60e0:	9100      	str	r1, [sp, #0]
   b60e2:	464b      	mov	r3, r9
   b60e4:	4911      	ldr	r1, [pc, #68]	; (b612c <_ZN6tflite16MicroInterpreter6InvokeEv+0x204>)
   b60e6:	e7d3      	b.n	b6090 <_ZN6tflite16MicroInterpreter6InvokeEv+0x168>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b60e8:	b2db      	uxtb	r3, r3
   b60ea:	2b79      	cmp	r3, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b60ec:	bf96      	itet	ls
   b60ee:	4a0a      	ldrls	r2, [pc, #40]	; (b6118 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b60f0:	4a0a      	ldrhi	r2, [pc, #40]	; (b611c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b60f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   b60f6:	e7f3      	b.n	b60e0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1b8>
    if (registration->free) {
   b60f8:	9b05      	ldr	r3, [sp, #20]
   b60fa:	685b      	ldr	r3, [r3, #4]
   b60fc:	b11b      	cbz	r3, b6106 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1de>
      registration->free(&context_, user_data);
   b60fe:	4639      	mov	r1, r7
   b6100:	f104 000c 	add.w	r0, r4, #12
   b6104:	4798      	blx	r3
  for (size_t i = 0; i < operators_->size(); ++i) {
   b6106:	f109 0901 	add.w	r9, r9, #1
   b610a:	e731      	b.n	b5f70 <_ZN6tflite16MicroInterpreter6InvokeEv+0x48>
   b610c:	000c77ca 	.word	0x000c77ca
   b6110:	000c77f7 	.word	0x000c77f7
   b6114:	000c7821 	.word	0x000c7821
   b6118:	000c7df8 	.word	0x000c7df8
   b611c:	000c70e4 	.word	0x000c70e4
   b6120:	000c7842 	.word	0x000c7842
   b6124:	000c7fec 	.word	0x000c7fec
   b6128:	000c7888 	.word	0x000c7888
   b612c:	000c78bd 	.word	0x000c78bd

000b6130 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
   b6130:	b513      	push	{r0, r1, r4, lr}
   b6132:	4604      	mov	r4, r0
   b6134:	9101      	str	r1, [sp, #4]
   b6136:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b6138:	2106      	movs	r1, #6
   b613a:	f7ff fbf7 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  const flatbuffers::Vector<int32_t>* inputs = subgraph_->inputs();
  const size_t length = inputs->size();
  if ((index < 0) || (index >= length)) {
   b613e:	9a01      	ldr	r2, [sp, #4]
  uoffset_t size() const { return EndianScalar(length_); }
   b6140:	6803      	ldr	r3, [r0, #0]
   b6142:	429a      	cmp	r2, r3
   b6144:	d306      	bcc.n	b6154 <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    error_reporter_->Report("Input index %d out of range (length is %d)", index,
   b6146:	4907      	ldr	r1, [pc, #28]	; (b6164 <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
   b6148:	68a0      	ldr	r0, [r4, #8]
   b614a:	f00e f9e1 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                            length);
    return nullptr;
   b614e:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs->Get(index)]);
}
   b6150:	b002      	add	sp, #8
   b6152:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs->Get(index)]);
   b6154:	4611      	mov	r1, r2
   b6156:	f7ff fbbd 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b615a:	6963      	ldr	r3, [r4, #20]
   b615c:	2238      	movs	r2, #56	; 0x38
   b615e:	fb02 3000 	mla	r0, r2, r0, r3
   b6162:	e7f5      	b.n	b6150 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
   b6164:	000c78f1 	.word	0x000c78f1

000b6168 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
   b6168:	b513      	push	{r0, r1, r4, lr}
   b616a:	4604      	mov	r4, r0
   b616c:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b616e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b6170:	2108      	movs	r1, #8
   b6172:	f7ff fbdb 	bl	b592c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  const flatbuffers::Vector<int32_t>* outputs = subgraph_->outputs();
  const size_t length = outputs->size();
  if ((index < 0) || (index >= outputs->size())) {
   b6176:	9a01      	ldr	r2, [sp, #4]
  uoffset_t size() const { return EndianScalar(length_); }
   b6178:	6803      	ldr	r3, [r0, #0]
   b617a:	4293      	cmp	r3, r2
   b617c:	d806      	bhi.n	b618c <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    error_reporter_->Report("Output index %d out of range (length is %d)",
   b617e:	4907      	ldr	r1, [pc, #28]	; (b619c <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
   b6180:	68a0      	ldr	r0, [r4, #8]
   b6182:	f00e f9c5 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                            index, length);
    return nullptr;
   b6186:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs->Get(index)]);
}
   b6188:	b002      	add	sp, #8
   b618a:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs->Get(index)]);
   b618c:	4611      	mov	r1, r2
   b618e:	f7ff fba1 	bl	b58d4 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b6192:	6963      	ldr	r3, [r4, #20]
   b6194:	2238      	movs	r2, #56	; 0x38
   b6196:	fb02 3000 	mla	r0, r2, r0, r3
   b619a:	e7f5      	b.n	b6188 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
   b619c:	000c791c 	.word	0x000c791c

000b61a0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
  return start;
}

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   b61a0:	b530      	push	{r4, r5, lr}
   b61a2:	4603      	mov	r3, r0
  char* current = main;
   b61a4:	4604      	mov	r4, r0
   b61a6:	4620      	mov	r0, r4
  while (*current != 0) {
   b61a8:	f814 5b01 	ldrb.w	r5, [r4], #1
   b61ac:	2d00      	cmp	r5, #0
   b61ae:	d1fa      	bne.n	b61a6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
    ++current;
  }
  char* current_end = main + (main_max_length - 1);
   b61b0:	3901      	subs	r1, #1
   b61b2:	440b      	add	r3, r1
   b61b4:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   b61b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b61ba:	b121      	cbz	r1, b61c6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   b61bc:	4298      	cmp	r0, r3
   b61be:	d202      	bcs.n	b61c6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   b61c0:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   b61c4:	e7f7      	b.n	b61b6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
    ++current;
    ++to_append;
  }
  *current = 0;
   b61c6:	2300      	movs	r3, #0
   b61c8:	7003      	strb	r3, [r0, #0]
  return current;
}
   b61ca:	bd30      	pop	{r4, r5, pc}

000b61cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   b61cc:	b570      	push	{r4, r5, r6, lr}
   b61ce:	460c      	mov	r4, r1
  char* start = buffer;
  do {
    int32_t digit = i % base;
   b61d0:	fbb0 f6f2 	udiv	r6, r0, r2
   b61d4:	fb02 0516 	mls	r5, r2, r6, r0
    char character;
    if (digit < 10) {
      character = '0' + digit;
   b61d8:	b2eb      	uxtb	r3, r5
    if (digit < 10) {
   b61da:	2d09      	cmp	r5, #9
      character = '0' + digit;
   b61dc:	bf94      	ite	ls
   b61de:	3330      	addls	r3, #48	; 0x30
    } else {
      character = 'a' + (digit - 10);
   b61e0:	3357      	addhi	r3, #87	; 0x57
    }
    *buffer++ = character;
   b61e2:	4625      	mov	r5, r4
      character = 'a' + (digit - 10);
   b61e4:	b2db      	uxtb	r3, r3
    i /= base;
  } while (i > 0);
   b61e6:	4282      	cmp	r2, r0
    *buffer++ = character;
   b61e8:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   b61ec:	d90a      	bls.n	b6204 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x38>
  *buffer = 0;
   b61ee:	2300      	movs	r3, #0
   b61f0:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   b61f2:	428c      	cmp	r4, r1
   b61f4:	d909      	bls.n	b620a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x3e>
    char tmp = *p1;
   b61f6:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   b61f8:	7822      	ldrb	r2, [r4, #0]
   b61fa:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   b61fe:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   b6202:	e7f6      	b.n	b61f2 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x26>
   b6204:	462c      	mov	r4, r5
    i /= base;
   b6206:	4630      	mov	r0, r6
   b6208:	e7e2      	b.n	b61d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x4>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
   b620a:	bd70      	pop	{r4, r5, r6, pc}

000b620c <DebugLogInt32>:
  return current;
}

}  // namespace

extern "C" void DebugLogInt32(int32_t i) {
   b620c:	b500      	push	{lr}
  if (i < 0) {
   b620e:	2800      	cmp	r0, #0
extern "C" void DebugLogInt32(int32_t i) {
   b6210:	b08d      	sub	sp, #52	; 0x34
    *buffer++ = '-';
   b6212:	bfbd      	ittte	lt
   b6214:	232d      	movlt	r3, #45	; 0x2d
    u = -u;
   b6216:	4240      	neglt	r0, r0
    *buffer++ = '-';
   b6218:	f10d 0101 	addlt.w	r1, sp, #1
   b621c:	4669      	movge	r1, sp
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b621e:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
   b6222:	bfb8      	it	lt
   b6224:	f88d 3000 	strblt.w	r3, [sp]
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b6228:	f7ff ffd0 	bl	b61cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(i, number_string);
  DebugLog(number_string);
   b622c:	4668      	mov	r0, sp
   b622e:	f00c ff51 	bl	c30d4 <DebugLog>
}
   b6232:	b00d      	add	sp, #52	; 0x34
   b6234:	f85d fb04 	ldr.w	pc, [sp], #4

000b6238 <DebugLogFloat>:
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(i, number_string, 16);
  DebugLog(number_string);
}

extern "C" void DebugLogFloat(float i) {
   b6238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b623c:	b09e      	sub	sp, #120	; 0x78
   b623e:	ed8d 0a01 	vstr	s0, [sp, #4]
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
   b6242:	9b01      	ldr	r3, [sp, #4]
  if (u & sign_mask) {
   b6244:	2b00      	cmp	r3, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   b6246:	f3c3 57c7 	ubfx	r7, r3, #23, #8
  const uint32_t fraction = (u & fraction_mask);
   b624a:	f3c3 0e16 	ubfx	lr, r3, #0, #23
    *current = '-';
   b624e:	bfbb      	ittet	lt
   b6250:	232d      	movlt	r3, #45	; 0x2d
   b6252:	f88d 3018 	strblt.w	r3, [sp, #24]
  char* current = buffer;
   b6256:	ab06      	addge	r3, sp, #24
    current += 1;
   b6258:	f10d 0319 	addlt.w	r3, sp, #25
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   b625c:	f1a7 067f 	sub.w	r6, r7, #127	; 0x7f
  *current = 0;
   b6260:	2200      	movs	r2, #0
  if (exponent == 128) {
   b6262:	2e80      	cmp	r6, #128	; 0x80
  *current = 0;
   b6264:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
   b6266:	d111      	bne.n	b628c <DebugLogFloat+0x54>
      current = StrCatStr(current, (current_end - current), "Inf");
   b6268:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   b626c:	1ac9      	subs	r1, r1, r3
    if (fraction == 0) {
   b626e:	f1be 0f00 	cmp.w	lr, #0
   b6272:	d109      	bne.n	b6288 <DebugLogFloat+0x50>
      current = StrCatStr(current, (current_end - current), "Inf");
   b6274:	4a2c      	ldr	r2, [pc, #176]	; (b6328 <DebugLogFloat+0xf0>)
      current = StrCatStr(current, (current_end - current), "NaN");
   b6276:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
   b6278:	f7ff ff92 	bl	b61a0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  char number_string[kFastToBufferSize];
  FastFloatToBufferLeft(i, number_string);
  DebugLog(number_string);
   b627c:	a806      	add	r0, sp, #24
   b627e:	f00c ff29 	bl	c30d4 <DebugLog>
}
   b6282:	b01e      	add	sp, #120	; 0x78
   b6284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      current = StrCatStr(current, (current_end - current), "NaN");
   b6288:	4a28      	ldr	r2, [pc, #160]	; (b632c <DebugLogFloat+0xf4>)
   b628a:	e7f4      	b.n	b6276 <DebugLogFloat+0x3e>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
   b628c:	4a28      	ldr	r2, [pc, #160]	; (b6330 <DebugLogFloat+0xf8>)
   b628e:	ac02      	add	r4, sp, #8
   b6290:	f102 0808 	add.w	r8, r2, #8
   b6294:	4625      	mov	r5, r4
   b6296:	6810      	ldr	r0, [r2, #0]
   b6298:	6851      	ldr	r1, [r2, #4]
   b629a:	46a4      	mov	ip, r4
   b629c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b62a0:	3208      	adds	r2, #8
   b62a2:	4542      	cmp	r2, r8
   b62a4:	4664      	mov	r4, ip
   b62a6:	d1f6      	bne.n	b6296 <DebugLogFloat+0x5e>
   b62a8:	6810      	ldr	r0, [r2, #0]
   b62aa:	7912      	ldrb	r2, [r2, #4]
   b62ac:	f8cc 0000 	str.w	r0, [ip]
   b62b0:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
   b62b4:	4670      	mov	r0, lr
   b62b6:	462a      	mov	r2, r5
  for (int i = 0; i < scale_shifts_size; ++i) {
   b62b8:	2100      	movs	r1, #0
    scaled_fraction += (fraction >> scale_shifts[i]);
   b62ba:	f912 4b01 	ldrsb.w	r4, [r2], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
   b62be:	3101      	adds	r1, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
   b62c0:	fa2e f404 	lsr.w	r4, lr, r4
  for (int i = 0; i < scale_shifts_size; ++i) {
   b62c4:	290d      	cmp	r1, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
   b62c6:	4420      	add	r0, r4
  for (int i = 0; i < scale_shifts_size; ++i) {
   b62c8:	d1f7      	bne.n	b62ba <DebugLogFloat+0x82>
  *current = '1';
   b62ca:	2231      	movs	r2, #49	; 0x31
   b62cc:	701a      	strb	r2, [r3, #0]
  *current = '.';
   b62ce:	222e      	movs	r2, #46	; 0x2e
   b62d0:	705a      	strb	r2, [r3, #1]
  *current = 0;
   b62d2:	2200      	movs	r2, #0
  current += 1;
   b62d4:	1c9d      	adds	r5, r3, #2
  *current = 0;
   b62d6:	709a      	strb	r2, [r3, #2]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
   b62d8:	f10d 0447 	add.w	r4, sp, #71	; 0x47
  FastUInt32ToBufferLeft(number, number_string, base);
   b62dc:	220a      	movs	r2, #10
   b62de:	a912      	add	r1, sp, #72	; 0x48
   b62e0:	f7ff ff74 	bl	b61cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  return StrCatStr(main, main_max_length, number_string);
   b62e4:	1b61      	subs	r1, r4, r5
   b62e6:	aa12      	add	r2, sp, #72	; 0x48
   b62e8:	4628      	mov	r0, r5
   b62ea:	f7ff ff59 	bl	b61a0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatStr(current, (current_end - current), "*2^");
   b62ee:	4a11      	ldr	r2, [pc, #68]	; (b6334 <DebugLogFloat+0xfc>)
   b62f0:	1a21      	subs	r1, r4, r0
   b62f2:	f7ff ff55 	bl	b61a0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  if (i < 0) {
   b62f6:	2e00      	cmp	r6, #0
    u = -u;
   b62f8:	bfb8      	it	lt
   b62fa:	f1c7 067f 	rsblt	r6, r7, #127	; 0x7f
  current = StrCatStr(current, (current_end - current), "*2^");
   b62fe:	4605      	mov	r5, r0
  current = StrCatInt32(current, (current_end - current), exponent);
   b6300:	eba4 0400 	sub.w	r4, r4, r0
    *buffer++ = '-';
   b6304:	bfba      	itte	lt
   b6306:	232d      	movlt	r3, #45	; 0x2d
   b6308:	f10d 0149 	addlt.w	r1, sp, #73	; 0x49
   b630c:	a912      	addge	r1, sp, #72	; 0x48
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b630e:	f04f 020a 	mov.w	r2, #10
   b6312:	4630      	mov	r0, r6
    *buffer++ = '-';
   b6314:	bfb8      	it	lt
   b6316:	f88d 3048 	strblt.w	r3, [sp, #72]	; 0x48
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b631a:	f7ff ff57 	bl	b61cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  return StrCatStr(main, main_max_length, number_string);
   b631e:	aa12      	add	r2, sp, #72	; 0x48
   b6320:	4621      	mov	r1, r4
   b6322:	4628      	mov	r0, r5
   b6324:	e7a8      	b.n	b6278 <DebugLogFloat+0x40>
   b6326:	bf00      	nop
   b6328:	000c7ffc 	.word	0x000c7ffc
   b632c:	000c8000 	.word	0x000c8000
   b6330:	000c8008 	.word	0x000c8008
   b6334:	000c8004 	.word	0x000c8004

000b6338 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
  int32 output_offset;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b6338:	2000      	movs	r0, #0
   b633a:	4770      	bx	lr

000b633c <_ZN6tflite3ops5micro3add4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b633c:	4770      	bx	lr

000b633e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b633e:	2000      	movs	r0, #0
   b6340:	4770      	bx	lr

000b6342 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
   b6342:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   b6344:	6803      	ldr	r3, [r0, #0]
   b6346:	2b04      	cmp	r3, #4
  ~RuntimeShape() {
   b6348:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   b634a:	dd03      	ble.n	b6354 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b634c:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b634e:	b108      	cbz	r0, b6354 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b6350:	f7fe fbd9 	bl	b4b06 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b6354:	4620      	mov	r0, r4
   b6356:	bd10      	pop	{r4, pc}

000b6358 <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32 DimensionsCount() const { return size_; }
  inline int32 Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   b6358:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   b635a:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b635c:	da01      	bge.n	b6362 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   b635e:	f00e fa4d 	bl	c47fc <abort>
    TFLITE_DCHECK_LT(i, size_);
   b6362:	6803      	ldr	r3, [r0, #0]
   b6364:	428b      	cmp	r3, r1
   b6366:	ddfa      	ble.n	b635e <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   b6368:	2b04      	cmp	r3, #4
   b636a:	bfcb      	itete	gt
   b636c:	6843      	ldrgt	r3, [r0, #4]
   b636e:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   b6372:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   b6376:	6840      	ldrle	r0, [r0, #4]
  }
   b6378:	bd08      	pop	{r3, pc}

000b637a <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
    TFLITE_DCHECK_GE(i, 0);
   b637a:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   b637c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b637e:	da01      	bge.n	b6384 <_ZN6tflite12RuntimeShape6SetDimEil+0xa>
   b6380:	f00e fa3c 	bl	c47fc <abort>
    TFLITE_DCHECK_LT(i, size_);
   b6384:	6803      	ldr	r3, [r0, #0]
   b6386:	428b      	cmp	r3, r1
   b6388:	ddfa      	ble.n	b6380 <_ZN6tflite12RuntimeShape6SetDimEil+0x6>
    if (size_ > kMaxSmallSize) {
   b638a:	2b04      	cmp	r3, #4
      dims_pointer_[i] = val;
   b638c:	bfcb      	itete	gt
   b638e:	6843      	ldrgt	r3, [r0, #4]
    } else {
      dims_[i] = val;
   b6390:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   b6394:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   b6398:	6042      	strle	r2, [r0, #4]
    }
  }
   b639a:	bd08      	pop	{r3, pc}

000b639c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 4-D.
  inline const int32* DimsDataUpTo4D() const { return dims_; }

  inline void Resize(int dimensions_count) {
   b639c:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   b639e:	6803      	ldr	r3, [r0, #0]
   b63a0:	2b04      	cmp	r3, #4
  inline void Resize(int dimensions_count) {
   b63a2:	4605      	mov	r5, r0
   b63a4:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   b63a6:	dd03      	ble.n	b63b0 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b63a8:	6840      	ldr	r0, [r0, #4]
   b63aa:	b108      	cbz	r0, b63b0 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   b63ac:	f7fe fbab 	bl	b4b06 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    if (dimensions_count > kMaxSmallSize) {
   b63b0:	2c04      	cmp	r4, #4
    size_ = dimensions_count;
   b63b2:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   b63b4:	dd09      	ble.n	b63ca <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
   b63b6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b63ba:	429c      	cmp	r4, r3
   b63bc:	bfb4      	ite	lt
   b63be:	00a0      	lsllt	r0, r4, #2
   b63c0:	f04f 30ff 	movge.w	r0, #4294967295
   b63c4:	f7fe fb9d 	bl	b4b02 <_Znaj>
   b63c8:	6068      	str	r0, [r5, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b63ca:	bd38      	pop	{r3, r4, r5, pc}

000b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b63cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63d0:	4698      	mov	r8, r3
      : size_(0) {
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b63d2:	6813      	ldr	r3, [r2, #0]
      : size_(0) {
   b63d4:	2700      	movs	r7, #0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b63d6:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b63d8:	4605      	mov	r5, r0
   b63da:	460e      	mov	r6, r1
   b63dc:	4614      	mov	r4, r2
      : size_(0) {
   b63de:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b63e0:	da01      	bge.n	b63e6 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   b63e2:	f00e fa0b 	bl	c47fc <abort>
    Resize(new_shape_size);
   b63e6:	f7ff ffd9 	bl	b639c <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   b63ea:	6820      	ldr	r0, [r4, #0]
   b63ec:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   b63ee:	42b7      	cmp	r7, r6
   b63f0:	da06      	bge.n	b6400 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   b63f2:	4639      	mov	r1, r7
   b63f4:	4642      	mov	r2, r8
   b63f6:	4628      	mov	r0, r5
   b63f8:	f7ff ffbf 	bl	b637a <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
   b63fc:	3701      	adds	r7, #1
   b63fe:	e7f6      	b.n	b63ee <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6400:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6402:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6404:	2b04      	cmp	r3, #4
   b6406:	bfcc      	ite	gt
   b6408:	6868      	ldrgt	r0, [r5, #4]
   b640a:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b640c:	2a04      	cmp	r2, #4
   b640e:	bfc8      	it	gt
   b6410:	6861      	ldrgt	r1, [r4, #4]
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b6412:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6416:	bfd8      	it	le
   b6418:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b641a:	0092      	lsls	r2, r2, #2
   b641c:	f010 fb7a 	bl	c6b14 <memcpy>
                sizeof(int32) * shape.DimensionsCount());
  }
   b6420:	4628      	mov	r0, r5
   b6422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b6426:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b6428:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b642a:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b642c:	2d04      	cmp	r5, #4
   b642e:	d001      	beq.n	b6434 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   b6430:	f00e f9e4 	bl	c47fc <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo4D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   b6434:	2900      	cmp	r1, #0
   b6436:	dbfb      	blt.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b6438:	6845      	ldr	r5, [r0, #4]
   b643a:	428d      	cmp	r5, r1
   b643c:	ddf8      	ble.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   b643e:	2a00      	cmp	r2, #0
   b6440:	dbf6      	blt.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b6442:	6886      	ldr	r6, [r0, #8]
   b6444:	4296      	cmp	r6, r2
   b6446:	ddf3      	ble.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   b6448:	2b00      	cmp	r3, #0
   b644a:	dbf1      	blt.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b644c:	68c5      	ldr	r5, [r0, #12]
   b644e:	429d      	cmp	r5, r3
   b6450:	ddee      	ble.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   b6452:	2c00      	cmp	r4, #0
   b6454:	dbec      	blt.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b6456:	6900      	ldr	r0, [r0, #16]
   b6458:	42a0      	cmp	r0, r4
   b645a:	dde9      	ble.n	b6430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   b645c:	fb01 2206 	mla	r2, r1, r6, r2
   b6460:	fb05 3302 	mla	r3, r5, r2, r3
}
   b6464:	fb00 4003 	mla	r0, r0, r3, r4
   b6468:	bd70      	pop	{r4, r5, r6, pc}

000b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
  return shape.FlatSize();
}

inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0,
                            const RuntimeShape& check_shape_1) {
   b646a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32 DimensionsCount() const { return size_; }
   b646e:	6805      	ldr	r5, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b6470:	680b      	ldr	r3, [r1, #0]
   b6472:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   b6474:	4604      	mov	r4, r0
   b6476:	4688      	mov	r8, r1
   b6478:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b647a:	d001      	beq.n	b6480 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   b647c:	f00e f9be 	bl	c47fc <abort>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   b6480:	2600      	movs	r6, #0
   b6482:	42ae      	cmp	r6, r5
   b6484:	da0c      	bge.n	b64a0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b6486:	4631      	mov	r1, r6
   b6488:	4620      	mov	r0, r4
   b648a:	f7ff ff65 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b648e:	4631      	mov	r1, r6
   b6490:	4681      	mov	r9, r0
   b6492:	4640      	mov	r0, r8
   b6494:	f7ff ff60 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6498:	4581      	cmp	r9, r0
   b649a:	d1ef      	bne.n	b647c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b649c:	3601      	adds	r6, #1
   b649e:	e7f0      	b.n	b6482 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b64a0:	683b      	ldr	r3, [r7, #0]
   b64a2:	429d      	cmp	r5, r3
   b64a4:	d1ea      	bne.n	b647c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b64a6:	2600      	movs	r6, #0
   b64a8:	42b5      	cmp	r5, r6
   b64aa:	dd0c      	ble.n	b64c6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b64ac:	4631      	mov	r1, r6
   b64ae:	4620      	mov	r0, r4
   b64b0:	f7ff ff52 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b64b4:	4631      	mov	r1, r6
   b64b6:	4680      	mov	r8, r0
   b64b8:	4638      	mov	r0, r7
   b64ba:	f7ff ff4d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b64be:	4580      	cmp	r8, r0
   b64c0:	d1dc      	bne.n	b647c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b64c2:	3601      	adds	r6, #1
   b64c4:	e7f0      	b.n	b64a8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b64c6:	2d04      	cmp	r5, #4
   b64c8:	bfcc      	ite	gt
   b64ca:	6864      	ldrgt	r4, [r4, #4]
   b64cc:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   b64ce:	2300      	movs	r3, #0
    int buffer_size = 1;
   b64d0:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   b64d2:	429d      	cmp	r5, r3
   b64d4:	dd04      	ble.n	b64e0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   b64d6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b64da:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b64dc:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   b64de:	e7f8      	b.n	b64d2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
  }
  return MatchingFlatSize(shape, check_shape_1);
}
   b64e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b64e4:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
   b64e6:	b510      	push	{r4, lr}
   b64e8:	d123      	bne.n	b6532 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x4e>
   b64ea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   b64ee:	425c      	negs	r4, r3
   b64f0:	415c      	adcs	r4, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   b64f2:	fb80 0101 	smull	r0, r1, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b64f6:	2900      	cmp	r1, #0
   b64f8:	4b1a      	ldr	r3, [pc, #104]	; (b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x80>)
   b64fa:	bfa8      	it	ge
   b64fc:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b6500:	b9cc      	cbnz	r4, b6536 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x52>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b6502:	1818      	adds	r0, r3, r0
   b6504:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   b6508:	2900      	cmp	r1, #0
   b650a:	da04      	bge.n	b6516 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x32>
   b650c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b6510:	18c0      	adds	r0, r0, r3
   b6512:	f141 0100 	adc.w	r1, r1, #0
   b6516:	0fc0      	lsrs	r0, r0, #31
   b6518:	ea40 0041 	orr.w	r0, r0, r1, lsl #1

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   b651c:	2a00      	cmp	r2, #0
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   b651e:	f1c2 0100 	rsb	r1, r2, #0
   b6522:	dd0b      	ble.n	b653c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x58>
   b6524:	4b10      	ldr	r3, [pc, #64]	; (b6568 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x84>)
   b6526:	4a11      	ldr	r2, [pc, #68]	; (b656c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x88>)
   b6528:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   b652c:	4810      	ldr	r0, [pc, #64]	; (b6570 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x8c>)
   b652e:	f00e f975 	bl	c481c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b6532:	2400      	movs	r4, #0
   b6534:	e7dd      	b.n	b64f2 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xe>
   b6536:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b653a:	e7ef      	b.n	b651c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x38>
  assert(exponent <= 31);
   b653c:	321f      	adds	r2, #31
   b653e:	da04      	bge.n	b654a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x66>
   b6540:	4b0c      	ldr	r3, [pc, #48]	; (b6574 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x90>)
   b6542:	4a0a      	ldr	r2, [pc, #40]	; (b656c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x88>)
   b6544:	f240 1167 	movw	r1, #359	; 0x167
   b6548:	e7f0      	b.n	b652c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x48>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b654a:	2301      	movs	r3, #1
   b654c:	408b      	lsls	r3, r1
   b654e:	3b01      	subs	r3, #1
  return a & b;
   b6550:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   b6554:	105b      	asrs	r3, r3, #1
  return a + b;
   b6556:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   b655a:	4108      	asrs	r0, r1
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
   b655c:	429a      	cmp	r2, r3
   b655e:	bfc8      	it	gt
   b6560:	3001      	addgt	r0, #1
   b6562:	bd10      	pop	{r4, pc}
   b6564:	c0000001 	.word	0xc0000001
   b6568:	000c8016 	.word	0x000c8016
   b656c:	000c8024 	.word	0x000c8024
   b6570:	000c807e 	.word	0x000c807e
   b6574:	000c80e5 	.word	0x000c80e5

000b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
   b6578:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b657a:	2900      	cmp	r1, #0
                            int i3) {
   b657c:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b657e:	db02      	blt.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b6580:	6804      	ldr	r4, [r0, #0]
   b6582:	428c      	cmp	r4, r1
   b6584:	dc01      	bgt.n	b658a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   b6586:	f00e f939 	bl	c47fc <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   b658a:	2a00      	cmp	r2, #0
   b658c:	dbfb      	blt.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b658e:	6844      	ldr	r4, [r0, #4]
   b6590:	4294      	cmp	r4, r2
   b6592:	ddf8      	ble.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   b6594:	2b00      	cmp	r3, #0
   b6596:	dbf6      	blt.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b6598:	6884      	ldr	r4, [r0, #8]
   b659a:	429c      	cmp	r4, r3
   b659c:	ddf3      	ble.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   b659e:	2d00      	cmp	r5, #0
   b65a0:	dbf1      	blt.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b65a2:	68c4      	ldr	r4, [r0, #12]
   b65a4:	42ac      	cmp	r4, r5
   b65a6:	ddee      	ble.n	b6586 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b65a8:	e9d0 6404 	ldrd	r6, r4, [r0, #16]
   b65ac:	4354      	muls	r4, r2
   b65ae:	6982      	ldr	r2, [r0, #24]
         i3 * desc.strides[3];
   b65b0:	69c0      	ldr	r0, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b65b2:	fb06 4101 	mla	r1, r6, r1, r4
   b65b6:	fb02 1203 	mla	r2, r2, r3, r1
}
   b65ba:	fb00 2005 	mla	r0, r0, r5, r2
   b65be:	bd70      	pop	{r4, r5, r6, pc}

000b65c0 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   b65c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65c4:	4604      	mov	r4, r0
   b65c6:	4690      	mov	r8, r2
   b65c8:	4608      	mov	r0, r1
   b65ca:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b65cc:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   b65d0:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   b65d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b65d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b65d6:	dd01      	ble.n	b65dc <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   b65d8:	f00e f910 	bl	c47fc <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b65dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b65de:	f7ff ff44 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   b65e2:	6862      	ldr	r2, [r4, #4]
   b65e4:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b65e8:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   b65ea:	dbf5      	blt.n	b65d8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   b65ec:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   b65ee:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   b65f0:	dcf2      	bgt.n	b65d8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   b65f2:	33ff      	adds	r3, #255	; 0xff
   b65f4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   b65f8:	d8ee      	bhi.n	b65d8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   b65fa:	2700      	movs	r7, #0
   b65fc:	45b9      	cmp	r9, r7
   b65fe:	dd28      	ble.n	b6652 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   b6600:	f816 a007 	ldrb.w	sl, [r6, r7]
   b6604:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   b6606:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   b6608:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   b660a:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   b660c:	f818 3007 	ldrb.w	r3, [r8, r7]
   b6610:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   b6612:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6616:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b661a:	fa03 f000 	lsl.w	r0, r3, r0
   b661e:	f7ff ff61 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6622:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6626:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6628:	4650      	mov	r0, sl
   b662a:	f7ff ff5b 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b662e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6632:	4458      	add	r0, fp
   b6634:	f7ff ff56 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
   b6638:	68e3      	ldr	r3, [r4, #12]
   b663a:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   b663c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   b663e:	4283      	cmp	r3, r0
   b6640:	bfb8      	it	lt
   b6642:	4603      	movlt	r3, r0
   b6644:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b6646:	4283      	cmp	r3, r0
   b6648:	bfa8      	it	ge
   b664a:	4603      	movge	r3, r0
   b664c:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   b664e:	3701      	adds	r7, #1
   b6650:	e7d4      	b.n	b65fc <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   b6652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6656 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   b6656:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b665a:	4604      	mov	r4, r0
   b665c:	4690      	mov	r8, r2
   b665e:	4608      	mov	r0, r1
   b6660:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b6662:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   b6666:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   b6668:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b666a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b666c:	dd01      	ble.n	b6672 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   b666e:	f00e f8c5 	bl	c47fc <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b6672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6674:	f7ff fef9 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   b6678:	6862      	ldr	r2, [r4, #4]
   b667a:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b667e:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   b6680:	dbf5      	blt.n	b666e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   b6682:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   b6684:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   b6686:	dcf2      	bgt.n	b666e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   b6688:	337f      	adds	r3, #127	; 0x7f
   b668a:	2bfe      	cmp	r3, #254	; 0xfe
   b668c:	d8ef      	bhi.n	b666e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   b668e:	2700      	movs	r7, #0
   b6690:	45b9      	cmp	r9, r7
   b6692:	dd28      	ble.n	b66e6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   b6694:	f916 a007 	ldrsb.w	sl, [r6, r7]
   b6698:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   b669a:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   b669c:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   b669e:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   b66a0:	f918 3007 	ldrsb.w	r3, [r8, r7]
   b66a4:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   b66a6:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66aa:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b66ae:	fa03 f000 	lsl.w	r0, r3, r0
   b66b2:	f7ff ff17 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66b6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66ba:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66bc:	4650      	mov	r0, sl
   b66be:	f7ff ff11 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66c2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b66c6:	4458      	add	r0, fp
   b66c8:	f7ff ff0c 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
   b66cc:	68e3      	ldr	r3, [r4, #12]
   b66ce:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   b66d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   b66d2:	4283      	cmp	r3, r0
   b66d4:	bfb8      	it	lt
   b66d6:	4603      	movlt	r3, r0
   b66d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b66da:	4283      	cmp	r3, r0
   b66dc:	bfa8      	it	ge
   b66de:	4603      	movge	r3, r0
   b66e0:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   b66e2:	3701      	adds	r7, #1
   b66e4:	e7d4      	b.n	b6690 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   b66e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b66ea <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   b66ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66ee:	6804      	ldr	r4, [r0, #0]
   b66f0:	680b      	ldr	r3, [r1, #0]
   b66f2:	429c      	cmp	r4, r3
   b66f4:	b090      	sub	sp, #64	; 0x40
   b66f6:	bfb8      	it	lt
   b66f8:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b66fa:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   b66fc:	4680      	mov	r8, r0
   b66fe:	460f      	mov	r7, r1
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   b6700:	2600      	movs	r6, #0
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b6702:	7013      	strb	r3, [r2, #0]
    Resize(shape_size);
   b6704:	4621      	mov	r1, r4
   b6706:	eb0d 0003 	add.w	r0, sp, r3
                                   tflite::ArithmeticParams* params) {
   b670a:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   b670c:	9601      	str	r6, [sp, #4]
    Resize(shape_size);
   b670e:	f7ff fe45 	bl	b639c <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   b6712:	42a6      	cmp	r6, r4
   b6714:	da06      	bge.n	b6724 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x3a>
      SetDim(i, value);
   b6716:	4631      	mov	r1, r6
   b6718:	2201      	movs	r2, #1
   b671a:	a801      	add	r0, sp, #4
   b671c:	f7ff fe2d 	bl	b637a <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
   b6720:	3601      	adds	r6, #1
   b6722:	e7f6      	b.n	b6712 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28>
    return RuntimeShape(new_shape_size, shape, 1);
   b6724:	2301      	movs	r3, #1
   b6726:	4642      	mov	r2, r8
   b6728:	4621      	mov	r1, r4
   b672a:	a806      	add	r0, sp, #24
   b672c:	f7ff fe4e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b6730:	2301      	movs	r3, #1
   b6732:	463a      	mov	r2, r7
   b6734:	4621      	mov	r1, r4
   b6736:	a80b      	add	r0, sp, #44	; 0x2c
   b6738:	f7ff fe48 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   b673c:	9a06      	ldr	r2, [sp, #24]
   b673e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6740:	429a      	cmp	r2, r3
   b6742:	d10f      	bne.n	b6764 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6744:	2a04      	cmp	r2, #4
   b6746:	bfcc      	ite	gt
   b6748:	9807      	ldrgt	r0, [sp, #28]
   b674a:	a807      	addle	r0, sp, #28
   b674c:	2b04      	cmp	r3, #4
   b674e:	bfcc      	ite	gt
   b6750:	990c      	ldrgt	r1, [sp, #48]	; 0x30
   b6752:	a90c      	addle	r1, sp, #48	; 0x30
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   b6754:	0092      	lsls	r2, r2, #2
   b6756:	f010 f9cd 	bl	c6af4 <memcmp>
    return this->size_ == comp.size_ &&
   b675a:	b918      	cbnz	r0, b6764 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7a>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   b675c:	2301      	movs	r3, #1
   b675e:	702b      	strb	r3, [r5, #0]

  if (params->broadcast_category !=
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    return false;
   b6760:	2400      	movs	r4, #0
   b6762:	e03f      	b.n	b67e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfa>
  for (int i = dims_count - 1; i >= 0; --i) {
   b6764:	3c01      	subs	r4, #1
   b6766:	4626      	mov	r6, r4
   b6768:	2e00      	cmp	r6, #0
   b676a:	db10      	blt.n	b678e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xa4>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   b676c:	4631      	mov	r1, r6
   b676e:	a806      	add	r0, sp, #24
   b6770:	f7ff fdf2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6774:	4631      	mov	r1, r6
   b6776:	4607      	mov	r7, r0
   b6778:	a80b      	add	r0, sp, #44	; 0x2c
   b677a:	f7ff fded 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b677e:	4287      	cmp	r7, r0
   b6780:	d101      	bne.n	b6786 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x9c>
  for (int i = dims_count - 1; i >= 0; --i) {
   b6782:	3e01      	subs	r6, #1
   b6784:	e7f0      	b.n	b6768 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7e>
    } else if (extended_shape0.Dims(i) == 1) {
   b6786:	2f01      	cmp	r7, #1
   b6788:	d125      	bne.n	b67d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xec>
      params->broadcast_category =
   b678a:	2302      	movs	r3, #2
      params->broadcast_category =
   b678c:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   b678e:	782b      	ldrb	r3, [r5, #0]
   b6790:	1e9a      	subs	r2, r3, #2
   b6792:	2a01      	cmp	r2, #1
   b6794:	d8e4      	bhi.n	b6760 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
   b6796:	2b03      	cmp	r3, #3
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
   b6798:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   b679c:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  params->broadcast_shape[2] = 1;
  params->broadcast_shape[3] = 1;
   b67a0:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  const RuntimeShape* shape_a =
   b67a4:	bf19      	ittee	ne
   b67a6:	af06      	addne	r7, sp, #24
  const RuntimeShape* shape_b =
   b67a8:	ae0b      	addne	r6, sp, #44	; 0x2c
  const RuntimeShape* shape_a =
   b67aa:	af0b      	addeq	r7, sp, #44	; 0x2c
  const RuntimeShape* shape_b =
   b67ac:	ae06      	addeq	r6, sp, #24
  params->broadcast_shape[4] = 1;
   b67ae:	64eb      	str	r3, [r5, #76]	; 0x4c
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b67b0:	2c00      	cmp	r4, #0
   b67b2:	db16      	blt.n	b67e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
   b67b4:	4621      	mov	r1, r4
   b67b6:	4638      	mov	r0, r7
   b67b8:	f7ff fdce 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b67bc:	4621      	mov	r1, r4
   b67be:	4680      	mov	r8, r0
   b67c0:	4630      	mov	r0, r6
   b67c2:	f7ff fdc9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b67c6:	4580      	cmp	r8, r0
   b67c8:	d119      	bne.n	b67fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x114>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   b67ca:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   b67cc:	fb08 f000 	mul.w	r0, r8, r0
   b67d0:	64e8      	str	r0, [r5, #76]	; 0x4c
    --i;
   b67d2:	3c01      	subs	r4, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b67d4:	e7ec      	b.n	b67b0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
    } else if (extended_shape1.Dims(i) == 1) {
   b67d6:	2801      	cmp	r0, #1
   b67d8:	d101      	bne.n	b67de <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
      params->broadcast_category =
   b67da:	2303      	movs	r3, #3
   b67dc:	e7d6      	b.n	b678c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xa2>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b67de:	2304      	movs	r3, #4
   b67e0:	702b      	strb	r3, [r5, #0]
  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
   b67e2:	2401      	movs	r4, #1
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   b67e4:	a80b      	add	r0, sp, #44	; 0x2c
   b67e6:	f7ff fdac 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   b67ea:	a806      	add	r0, sp, #24
   b67ec:	f7ff fda9 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   b67f0:	a801      	add	r0, sp, #4
   b67f2:	f7ff fda6 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b67f6:	4620      	mov	r0, r4
   b67f8:	b010      	add	sp, #64	; 0x40
   b67fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b67fe:	4621      	mov	r1, r4
   b6800:	4638      	mov	r0, r7
   b6802:	f7ff fda9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6806:	2801      	cmp	r0, #1
   b6808:	d10a      	bne.n	b6820 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x136>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b680a:	4621      	mov	r1, r4
   b680c:	4630      	mov	r0, r6
   b680e:	f7ff fda3 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6812:	6cab      	ldr	r3, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b6814:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b6816:	fb03 f000 	mul.w	r0, r3, r0
   b681a:	64a8      	str	r0, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b681c:	d2ef      	bcs.n	b67fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x114>
   b681e:	e7e0      	b.n	b67e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6820:	4621      	mov	r1, r4
   b6822:	4638      	mov	r0, r7
   b6824:	f7ff fd98 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6828:	4621      	mov	r1, r4
   b682a:	4680      	mov	r8, r0
   b682c:	4630      	mov	r0, r6
   b682e:	f7ff fd93 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6832:	4580      	cmp	r8, r0
   b6834:	d106      	bne.n	b6844 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15a>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b6836:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6838:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b683a:	fb08 f000 	mul.w	r0, r8, r0
   b683e:	6468      	str	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6840:	d2ee      	bcs.n	b6820 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x136>
   b6842:	e7ce      	b.n	b67e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b6844:	4621      	mov	r1, r4
   b6846:	4630      	mov	r0, r6
   b6848:	f7ff fd86 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b684c:	2801      	cmp	r0, #1
   b684e:	d10a      	bne.n	b6866 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17c>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b6850:	4621      	mov	r1, r4
   b6852:	4638      	mov	r0, r7
   b6854:	f7ff fd80 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6858:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b685a:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b685c:	fb03 f000 	mul.w	r0, r3, r0
   b6860:	6428      	str	r0, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b6862:	d2ef      	bcs.n	b6844 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15a>
   b6864:	e7bd      	b.n	b67e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6866:	4621      	mov	r1, r4
   b6868:	4638      	mov	r0, r7
   b686a:	f7ff fd75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b686e:	4621      	mov	r1, r4
   b6870:	4680      	mov	r8, r0
   b6872:	4630      	mov	r0, r6
   b6874:	f7ff fd70 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6878:	4580      	cmp	r8, r0
   b687a:	d1b0      	bne.n	b67de <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b687c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b687e:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b6880:	fb08 f000 	mul.w	r0, r8, r0
   b6884:	63e8      	str	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6886:	d2ee      	bcs.n	b6866 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17c>
   b6888:	e7ab      	b.n	b67e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>

000b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   b688a:	b570      	push	{r4, r5, r6, lr}
   b688c:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   b688e:	b911      	cbnz	r1, b6896 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   b6890:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   b6892:	4620      	mov	r0, r4
   b6894:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   b6896:	688d      	ldr	r5, [r1, #8]
   b6898:	f855 6b04 	ldr.w	r6, [r5], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b689c:	2300      	movs	r3, #0
   b689e:	6003      	str	r3, [r0, #0]
    Resize(dimensions_count);
   b68a0:	4631      	mov	r1, r6
   b68a2:	f7ff fd7b 	bl	b639c <_ZN6tflite12RuntimeShape6ResizeEi>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b68a6:	6823      	ldr	r3, [r4, #0]
   b68a8:	2b04      	cmp	r3, #4
   b68aa:	bfcc      	ite	gt
   b68ac:	6860      	ldrgt	r0, [r4, #4]
   b68ae:	1d20      	addle	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   b68b0:	00b2      	lsls	r2, r6, #2
   b68b2:	4629      	mov	r1, r5
   b68b4:	f010 f92e 	bl	c6b14 <memcpy>
  }
   b68b8:	e7eb      	b.n	b6892 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
	...

000b68bc <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   b68bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b68c0:	ed2d 8b06 	vpush	{d8-d10}
   b68c4:	4688      	mov	r8, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   b68c6:	4610      	mov	r0, r2
   b68c8:	4619      	mov	r1, r3
                             OpData* data) {
   b68ca:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
   b68ce:	461e      	mov	r6, r3
   b68d0:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   b68d2:	f7fe fc63 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   b68d6:	f080 0001 	eor.w	r0, r0, #1
   b68da:	7020      	strb	r0, [r4, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b68dc:	782b      	ldrb	r3, [r5, #0]
   b68de:	2b03      	cmp	r3, #3
   b68e0:	d001      	beq.n	b68e6 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2a>
   b68e2:	2b09      	cmp	r3, #9
   b68e4:	d16c      	bne.n	b69c0 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x104>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
   b68e6:	693b      	ldr	r3, [r7, #16]
   b68e8:	425b      	negs	r3, r3
   b68ea:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   b68ec:	6933      	ldr	r3, [r6, #16]
   b68ee:	425b      	negs	r3, r3
   b68f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   b68f2:	692b      	ldr	r3, [r5, #16]
   b68f4:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   b68f6:	2314      	movs	r3, #20
   b68f8:	6263      	str	r3, [r4, #36]	; 0x24
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   b68fa:	ed96 8a03 	vldr	s16, [r6, #12]
   b68fe:	ed97 aa03 	vldr	s20, [r7, #12]
    const double twice_max_input_scale =
        2 * std::max(input1->params.scale, input2->params.scale);
   b6902:	eeb4 aac8 	vcmpe.f32	s20, s16
   b6906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b690a:	bf54      	ite	pl
   b690c:	eef0 7a4a 	vmovpl.f32	s15, s20
   b6910:	eef0 7a48 	vmovmi.f32	s15, s16
   b6914:	ee77 7aa7 	vadd.f32	s15, s15, s15
        input2->params.scale / twice_max_input_scale;
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * output->params.scale);

    QuantizeMultiplierSmallerThanOneExp(
   b6918:	f104 0a04 	add.w	sl, r4, #4
        2 * std::max(input1->params.scale, input2->params.scale);
   b691c:	ee17 0a90 	vmov	r0, s15
   b6920:	f7fd fce2 	bl	b42e8 <__aeabi_f2d>
   b6924:	4606      	mov	r6, r0
   b6926:	460f      	mov	r7, r1
        input2->params.scale / twice_max_input_scale;
   b6928:	ee18 0a10 	vmov	r0, s16
   b692c:	f7fd fcdc 	bl	b42e8 <__aeabi_f2d>
    const double real_input2_multiplier =
   b6930:	4632      	mov	r2, r6
   b6932:	463b      	mov	r3, r7
   b6934:	f7fd fe5a 	bl	b45ec <__aeabi_ddiv>
        ((1 << data->left_shift) * output->params.scale);
   b6938:	ed95 7a03 	vldr	s14, [r5, #12]
   b693c:	eddf 7a24 	vldr	s15, [pc, #144]	; b69d0 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x114>
   b6940:	ee67 7a27 	vmul.f32	s15, s14, s15
    const double real_input2_multiplier =
   b6944:	ec41 0b19 	vmov	d9, r0, r1
        ((1 << data->left_shift) * output->params.scale);
   b6948:	ee17 0a90 	vmov	r0, s15
   b694c:	f7fd fccc 	bl	b42e8 <__aeabi_f2d>
   b6950:	4602      	mov	r2, r0
   b6952:	460b      	mov	r3, r1
    const double real_output_multiplier =
   b6954:	4630      	mov	r0, r6
   b6956:	4639      	mov	r1, r7
   b6958:	f7fd fe48 	bl	b45ec <__aeabi_ddiv>
   b695c:	ec41 0b18 	vmov	d8, r0, r1
        input1->params.scale / twice_max_input_scale;
   b6960:	ee1a 0a10 	vmov	r0, s20
   b6964:	f7fd fcc0 	bl	b42e8 <__aeabi_f2d>
    const double real_input1_multiplier =
   b6968:	4632      	mov	r2, r6
   b696a:	463b      	mov	r3, r7
   b696c:	f7fd fe3e 	bl	b45ec <__aeabi_ddiv>
    QuantizeMultiplierSmallerThanOneExp(
   b6970:	f104 0914 	add.w	r9, r4, #20
    const double real_input1_multiplier =
   b6974:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
   b6978:	4651      	mov	r1, sl
   b697a:	4648      	mov	r0, r9
   b697c:	f7fe fc76 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   b6980:	eeb0 0a49 	vmov.f32	s0, s18
   b6984:	eef0 0a69 	vmov.f32	s1, s19
   b6988:	f104 0108 	add.w	r1, r4, #8
   b698c:	f104 0018 	add.w	r0, r4, #24
   b6990:	f7fe fc6c 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   b6994:	eeb0 0a48 	vmov.f32	s0, s16
   b6998:	eef0 0a68 	vmov.f32	s1, s17
   b699c:	f104 0120 	add.w	r1, r4, #32
   b69a0:	f104 001c 	add.w	r0, r4, #28
   b69a4:	f7fe fc62 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    if (output->type == kTfLiteUInt8) {
   b69a8:	7829      	ldrb	r1, [r5, #0]
   b69aa:	f898 0000 	ldrb.w	r0, [r8]
   b69ae:	2903      	cmp	r1, #3
      CalculateActivationRangeUint8(params->activation, output,
   b69b0:	f104 020c 	add.w	r2, r4, #12
   b69b4:	f104 0310 	add.w	r3, r4, #16
   b69b8:	4629      	mov	r1, r5
    if (output->type == kTfLiteUInt8) {
   b69ba:	d106      	bne.n	b69ca <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x10e>
      CalculateActivationRangeUint8(params->activation, output,
   b69bc:	f7fe fade 	bl	b4f7c <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
                                   &data->output_activation_max);
    }
  }

  return kTfLiteOk;
}
   b69c0:	ecbd 8b06 	vpop	{d8-d10}
   b69c4:	2000      	movs	r0, #0
   b69c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      CalculateActivationRangeInt8(params->activation, output,
   b69ca:	f7fe fbdb 	bl	b5184 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
   b69ce:	e7f7      	b.n	b69c0 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x104>
   b69d0:	49800000 	.word	0x49800000

000b69d4 <_ZN6tflite3ops5micro12Register_ADDEv>:
}  // namespace add

TfLiteRegistration* Register_ADD() {
  static TfLiteRegistration r = {add::Init, add::Free, add::Prepare, add::Eval};
  return &r;
}
   b69d4:	4800      	ldr	r0, [pc, #0]	; (b69d8 <_ZN6tflite3ops5micro12Register_ADDEv+0x4>)
   b69d6:	4770      	bx	lr
   b69d8:	2003c098 	.word	0x2003c098

000b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    }
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
   b69dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b69e0:	460c      	mov	r4, r1
   b69e2:	b08a      	sub	sp, #40	; 0x28
   b69e4:	461e      	mov	r6, r3
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
   b69e6:	4615      	mov	r5, r2
   b69e8:	b90a      	cbnz	r2, b69ee <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   b69ea:	f00d ff07 	bl	c47fc <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   b69ee:	2b00      	cmp	r3, #0
   b69f0:	d0fb      	beq.n	b69ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   b69f2:	4602      	mov	r2, r0
   b69f4:	2301      	movs	r3, #1
   b69f6:	2104      	movs	r1, #4
   b69f8:	4668      	mov	r0, sp
   b69fa:	f7ff fce7 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b69fe:	4622      	mov	r2, r4
   b6a00:	2301      	movs	r3, #1
   b6a02:	2104      	movs	r1, #4
   b6a04:	a805      	add	r0, sp, #20
   b6a06:	f7ff fce1 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);

  // Copy dims to desc, calculating strides.
  int desc0_stride = 1;
  int desc1_stride = 1;
   b6a0a:	2701      	movs	r7, #1
   b6a0c:	f105 0a0c 	add.w	sl, r5, #12
   b6a10:	f106 080c 	add.w	r8, r6, #12
  for (int i = N - 1; i >= 0; --i) {
   b6a14:	2403      	movs	r4, #3
  int desc0_stride = 1;
   b6a16:	46b9      	mov	r9, r7
    desc0_out->extents[i] = extended_input0_shape.Dims(i);
   b6a18:	4621      	mov	r1, r4
   b6a1a:	4668      	mov	r0, sp
   b6a1c:	f7ff fc9c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6a20:	f84a 0904 	str.w	r0, [sl], #-4
    desc0_out->strides[i] = desc0_stride;
    desc0_stride *= extended_input0_shape.Dims(i);
   b6a24:	4621      	mov	r1, r4
    desc0_out->strides[i] = desc0_stride;
   b6a26:	f8ca 9014 	str.w	r9, [sl, #20]
    desc0_stride *= extended_input0_shape.Dims(i);
   b6a2a:	4668      	mov	r0, sp
   b6a2c:	f7ff fc94 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   b6a30:	4621      	mov	r1, r4
    desc0_stride *= extended_input0_shape.Dims(i);
   b6a32:	fb00 f909 	mul.w	r9, r0, r9
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   b6a36:	a805      	add	r0, sp, #20
   b6a38:	f7ff fc8e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6a3c:	f848 0904 	str.w	r0, [r8], #-4
    desc1_out->strides[i] = desc1_stride;
    desc1_stride *= extended_input1_shape.Dims(i);
   b6a40:	4621      	mov	r1, r4
    desc1_out->strides[i] = desc1_stride;
   b6a42:	f8c8 7014 	str.w	r7, [r8, #20]
    desc1_stride *= extended_input1_shape.Dims(i);
   b6a46:	a805      	add	r0, sp, #20
   b6a48:	f7ff fc86 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   b6a4c:	3c01      	subs	r4, #1
    desc1_stride *= extended_input1_shape.Dims(i);
   b6a4e:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   b6a52:	d2e1      	bcs.n	b6a18 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x3c>
  }

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
   b6a54:	2400      	movs	r4, #0
   b6a56:	46a0      	mov	r8, r4
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
   b6a58:	f106 0910 	add.w	r9, r6, #16
    const int extent0 = extended_input0_shape.Dims(i);
   b6a5c:	4621      	mov	r1, r4
   b6a5e:	4668      	mov	r0, sp
   b6a60:	f7ff fc7a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   b6a64:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   b6a66:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   b6a68:	a805      	add	r0, sp, #20
   b6a6a:	f7ff fc75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   b6a6e:	4287      	cmp	r7, r0
   b6a70:	d004      	beq.n	b6a7c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa0>
      if (extent0 == 1) {
   b6a72:	2f01      	cmp	r7, #1
   b6a74:	d110      	bne.n	b6a98 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xbc>
        desc0_out->strides[i] = 0;
   b6a76:	f8c5 8010 	str.w	r8, [r5, #16]
        desc0_out->extents[i] = extent1;
   b6a7a:	6028      	str	r0, [r5, #0]
  for (int i = 0; i < N; ++i) {
   b6a7c:	3401      	adds	r4, #1
   b6a7e:	2c04      	cmp	r4, #4
   b6a80:	f105 0504 	add.w	r5, r5, #4
   b6a84:	d1ea      	bne.n	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x80>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   b6a86:	a805      	add	r0, sp, #20
   b6a88:	f7ff fc5b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   b6a8c:	4668      	mov	r0, sp
   b6a8e:	f7ff fc58 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        desc1_out->extents[i] = extent0;
      }
    }
  }
}
   b6a92:	b00a      	add	sp, #40	; 0x28
   b6a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   b6a98:	2801      	cmp	r0, #1
   b6a9a:	d1a6      	bne.n	b69ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   b6a9c:	f849 8024 	str.w	r8, [r9, r4, lsl #2]
        desc1_out->extents[i] = extent0;
   b6aa0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   b6aa4:	e7ea      	b.n	b6a7c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa0>

000b6aa6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   b6aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6aaa:	ed2d 8b02 	vpush	{d8}
   b6aae:	b099      	sub	sp, #100	; 0x64
   b6ab0:	4683      	mov	fp, r0
   b6ab2:	4616      	mov	r6, r2
   b6ab4:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6ab6:	aa08      	add	r2, sp, #32
                               float* output_data) {
   b6ab8:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6aba:	ab10      	add	r3, sp, #64	; 0x40
   b6abc:	f7ff ff8e 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   b6ac0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6ac2:	2301      	movs	r3, #1
   b6ac4:	2104      	movs	r1, #4
   b6ac6:	a803      	add	r0, sp, #12
   b6ac8:	f7ff fc80 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6acc:	2400      	movs	r4, #0
   b6ace:	2100      	movs	r1, #0
   b6ad0:	a803      	add	r0, sp, #12
   b6ad2:	f7ff fc41 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6ad6:	42a0      	cmp	r0, r4
   b6ad8:	dd5b      	ble.n	b6b92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6ada:	2500      	movs	r5, #0
   b6adc:	f10d 080c 	add.w	r8, sp, #12
   b6ae0:	2101      	movs	r1, #1
   b6ae2:	4640      	mov	r0, r8
   b6ae4:	f7ff fc38 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6ae8:	42a8      	cmp	r0, r5
   b6aea:	dd50      	ble.n	b6b8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6aec:	2700      	movs	r7, #0
   b6aee:	2102      	movs	r1, #2
   b6af0:	4640      	mov	r0, r8
   b6af2:	f7ff fc31 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6af6:	42b8      	cmp	r0, r7
   b6af8:	dd47      	ble.n	b6b8a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6afa:	f04f 0900 	mov.w	r9, #0
   b6afe:	2103      	movs	r1, #3
   b6b00:	4640      	mov	r0, r8
   b6b02:	f7ff fc29 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6b06:	4548      	cmp	r0, r9
   b6b08:	dd3d      	ble.n	b6b86 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe0>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6b0a:	f8cd 9000 	str.w	r9, [sp]
   b6b0e:	463b      	mov	r3, r7
   b6b10:	462a      	mov	r2, r5
   b6b12:	4621      	mov	r1, r4
   b6b14:	a808      	add	r0, sp, #32
   b6b16:	f7ff fd2f 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6b1a:	f8cd 9000 	str.w	r9, [sp]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6b1e:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6b20:	463b      	mov	r3, r7
   b6b22:	462a      	mov	r2, r5
   b6b24:	4621      	mov	r1, r4
   b6b26:	a810      	add	r0, sp, #64	; 0x40
   b6b28:	f7ff fd26 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6b2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  params.float_activation_min, params.float_activation_max);
   b6b2e:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6b32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6b36:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
              ActivationFunctionWithMinMax(
   b6b3a:	ed90 7a00 	vldr	s14, [r0]
   b6b3e:	edda 7a00 	vldr	s15, [sl]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6b42:	f8cd 9000 	str.w	r9, [sp]
              ActivationFunctionWithMinMax(
   b6b46:	ee77 7a87 	vadd.f32	s15, s15, s14
                  params.float_activation_min, params.float_activation_max);
   b6b4a:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
	return __b;
      return __a;
   b6b4e:	eef4 7ac8 	vcmpe.f32	s15, s16
   b6b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6b56:	bf58      	it	pl
   b6b58:	eeb0 8a67 	vmovpl.f32	s16, s15
	return __b;
   b6b5c:	eeb4 7a48 	vcmp.f32	s14, s16
   b6b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6b64:	463b      	mov	r3, r7
   b6b66:	462a      	mov	r2, r5
   b6b68:	4621      	mov	r1, r4
   b6b6a:	4640      	mov	r0, r8
   b6b6c:	bf48      	it	mi
   b6b6e:	eeb0 8a47 	vmovmi.f32	s16, s14
   b6b72:	f7ff fc58 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b6b76:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b6b78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6b7c:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6b80:	f109 0901 	add.w	r9, r9, #1
   b6b84:	e7bb      	b.n	b6afe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x58>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6b86:	3701      	adds	r7, #1
   b6b88:	e7b1      	b.n	b6aee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x48>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6b8a:	3501      	adds	r5, #1
   b6b8c:	e7a6      	b.n	b6adc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6b8e:	3401      	adds	r4, #1
   b6b90:	e79d      	b.n	b6ace <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6b92:	a803      	add	r0, sp, #12
   b6b94:	f7ff fbd5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   b6b98:	b019      	add	sp, #100	; 0x64
   b6b9a:	ecbd 8b02 	vpop	{d8}
   b6b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b6ba4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   b6ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   b6ba6:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   b6ba8:	b0a9      	sub	sp, #164	; 0xa4
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   b6baa:	2a01      	cmp	r2, #1
   b6bac:	e9dd 652e 	ldrd	r6, r5, [sp, #184]	; 0xb8
   b6bb0:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   b6bb2:	d03d      	beq.n	b6c30 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   b6bb4:	2a03      	cmp	r2, #3
   b6bb6:	d040      	beq.n	b6c3a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x96>
  } else if (activation == kTfLiteActRelu1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   b6bb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; b6ca8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
   b6bbc:	eddf 6a3b 	vldr	s13, [pc, #236]	; b6cac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
   b6bc0:	2a02      	cmp	r2, #2
   b6bc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6bc6:	bf18      	it	ne
   b6bc8:	eef0 7a47 	vmovne.f32	s15, s14
   b6bcc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b6bd0:	bf18      	it	ne
   b6bd2:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
   b6bd6:	781b      	ldrb	r3, [r3, #0]
  int output_shift;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
   b6bd8:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
  params->float_activation_max = max;
   b6bdc:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
   b6be0:	af0f      	add	r7, sp, #60	; 0x3c
    TF_LITE_ADD(BroadcastAdd4DSlow);
   b6be2:	4631      	mov	r1, r6
   b6be4:	a805      	add	r0, sp, #20
  if (data->requires_broadcast) {
   b6be6:	b35b      	cbz	r3, b6c40 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x9c>
    TF_LITE_ADD(BroadcastAdd4DSlow);
   b6be8:	f7ff fe4f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6bec:	b106      	cbz	r6, b6bf0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x4c>
   b6bee:	6876      	ldr	r6, [r6, #4]
   b6bf0:	4629      	mov	r1, r5
   b6bf2:	a80a      	add	r0, sp, #40	; 0x28
   b6bf4:	f7ff fe49 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6bf8:	b105      	cbz	r5, b6bfc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
   b6bfa:	686d      	ldr	r5, [r5, #4]
   b6bfc:	4621      	mov	r1, r4
   b6bfe:	4638      	mov	r0, r7
   b6c00:	f7ff fe43 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b6c04:	b104      	cbz	r4, b6c08 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
   b6c06:	6864      	ldr	r4, [r4, #4]
   b6c08:	9500      	str	r5, [sp, #0]
   b6c0a:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b6c0e:	ab0a      	add	r3, sp, #40	; 0x28
   b6c10:	4632      	mov	r2, r6
   b6c12:	a905      	add	r1, sp, #20
   b6c14:	a814      	add	r0, sp, #80	; 0x50
   b6c16:	f7ff ff46 	bl	b6aa6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
   b6c1a:	4638      	mov	r0, r7
   b6c1c:	f7ff fb91 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b6c20:	a80a      	add	r0, sp, #40	; 0x28
   b6c22:	f7ff fb8e 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b6c26:	a805      	add	r0, sp, #20
   b6c28:	f7ff fb8b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b6c2c:	b029      	add	sp, #164	; 0xa4
   b6c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
   b6c30:	eddf 7a1d 	vldr	s15, [pc, #116]	; b6ca8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    *activation_min = 0;
   b6c34:	ed9f 7a1e 	vldr	s14, [pc, #120]	; b6cb0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10c>
   b6c38:	e7cd      	b.n	b6bd6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x32>
    *activation_max = 6;
   b6c3a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b6c3e:	e7f9      	b.n	b6c34 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x90>
    TF_LITE_ADD(Add);
   b6c40:	f7ff fe23 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6c44:	b106      	cbz	r6, b6c48 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa4>
   b6c46:	6876      	ldr	r6, [r6, #4]
   b6c48:	4629      	mov	r1, r5
   b6c4a:	a80a      	add	r0, sp, #40	; 0x28
   b6c4c:	f7ff fe1d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6c50:	b105      	cbz	r5, b6c54 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb0>
   b6c52:	686d      	ldr	r5, [r5, #4]
   b6c54:	4621      	mov	r1, r4
   b6c56:	4638      	mov	r0, r7
   b6c58:	f7ff fe17 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b6c5c:	b104      	cbz	r4, b6c60 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xbc>
   b6c5e:	6864      	ldr	r4, [r4, #4]
  const int size = MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b6c60:	463a      	mov	r2, r7
   b6c62:	a90a      	add	r1, sp, #40	; 0x28
   b6c64:	a805      	add	r0, sp, #20
   b6c66:	f7ff fc00 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < size; i++) {
   b6c6a:	2300      	movs	r3, #0
   b6c6c:	4298      	cmp	r0, r3
   b6c6e:	ddd4      	ble.n	b6c1a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x76>
    auto x = input1_data[i] + input2_data[i];
   b6c70:	ecf5 7a01 	vldmia	r5!, {s15}
   b6c74:	ecb6 7a01 	vldmia	r6!, {s14}
        x, params.float_activation_min, params.float_activation_max);
   b6c78:	eddd 6a22 	vldr	s13, [sp, #136]	; 0x88
    auto x = input1_data[i] + input2_data[i];
   b6c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
        x, params.float_activation_min, params.float_activation_max);
   b6c80:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
      return __a;
   b6c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c8c:	bf58      	it	pl
   b6c8e:	eef0 7a47 	vmovpl.f32	s15, s14
	return __b;
   b6c92:	eef4 6a67 	vcmp.f32	s13, s15
   b6c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c9a:	bf48      	it	mi
   b6c9c:	eef0 7a66 	vmovmi.f32	s15, s13
    output_data[i] = ActivationFunctionWithMinMax(
   b6ca0:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < size; i++) {
   b6ca4:	3301      	adds	r3, #1
   b6ca6:	e7e1      	b.n	b6c6c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
   b6ca8:	7f7fffff 	.word	0x7f7fffff
   b6cac:	ff7fffff 	.word	0xff7fffff
   b6cb0:	00000000 	.word	0x00000000

000b6cb4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   b6cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cb8:	b09b      	sub	sp, #108	; 0x6c
   b6cba:	4604      	mov	r4, r0
   b6cbc:	4693      	mov	fp, r2
   b6cbe:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6cc0:	aa0a      	add	r2, sp, #40	; 0x28
                               int8_t* output_data) {
   b6cc2:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6cc4:	ab12      	add	r3, sp, #72	; 0x48
   b6cc6:	f7ff fe89 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   b6cca:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6ccc:	2301      	movs	r3, #1
   b6cce:	2104      	movs	r1, #4
   b6cd0:	a805      	add	r0, sp, #20
   b6cd2:	f7ff fb7b 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6cd6:	2600      	movs	r6, #0
   b6cd8:	2100      	movs	r1, #0
   b6cda:	a805      	add	r0, sp, #20
   b6cdc:	f7ff fb3c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6ce0:	42b0      	cmp	r0, r6
   b6ce2:	dd66      	ble.n	b6db2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfe>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6ce4:	2700      	movs	r7, #0
   b6ce6:	f10d 0914 	add.w	r9, sp, #20
   b6cea:	2101      	movs	r1, #1
   b6cec:	4648      	mov	r0, r9
   b6cee:	f7ff fb33 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6cf2:	42b8      	cmp	r0, r7
   b6cf4:	dd5b      	ble.n	b6dae <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfa>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6cf6:	f04f 0800 	mov.w	r8, #0
   b6cfa:	2102      	movs	r1, #2
   b6cfc:	4648      	mov	r0, r9
   b6cfe:	f7ff fb2b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d02:	4540      	cmp	r0, r8
   b6d04:	dd51      	ble.n	b6daa <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6d06:	f04f 0a00 	mov.w	sl, #0
   b6d0a:	2103      	movs	r1, #3
   b6d0c:	4648      	mov	r0, r9
   b6d0e:	f7ff fb23 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d12:	4550      	cmp	r0, sl
   b6d14:	dd46      	ble.n	b6da4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf0>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6d16:	f8cd a000 	str.w	sl, [sp]
   b6d1a:	4643      	mov	r3, r8
   b6d1c:	463a      	mov	r2, r7
   b6d1e:	4631      	mov	r1, r6
   b6d20:	a80a      	add	r0, sp, #40	; 0x28
   b6d22:	f7ff fc29 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6d26:	6863      	ldr	r3, [r4, #4]
   b6d28:	f91b 5000 	ldrsb.w	r5, [fp, r0]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6d2c:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6d30:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6d32:	463a      	mov	r2, r7
   b6d34:	4643      	mov	r3, r8
   b6d36:	4631      	mov	r1, r6
   b6d38:	a812      	add	r0, sp, #72	; 0x48
   b6d3a:	f7ff fc1d 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6d40:	68a2      	ldr	r2, [r4, #8]
   b6d42:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   b6d44:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6d48:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   b6d4a:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d4e:	fa05 f00c 	lsl.w	r0, r5, ip
   b6d52:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   b6d56:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d58:	f7ff fbc4 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d5c:	9b03      	ldr	r3, [sp, #12]
   b6d5e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d62:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d64:	4618      	mov	r0, r3
   b6d66:	f7ff fbbd 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d6a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6d6e:	4428      	add	r0, r5
   b6d70:	f7ff fbb8 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  raw_sum, params.output_multiplier, params.output_shift) +
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6d74:	f8cd a000 	str.w	sl, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6d78:	4605      	mov	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6d7a:	4643      	mov	r3, r8
   b6d7c:	463a      	mov	r2, r7
   b6d7e:	4631      	mov	r1, r6
   b6d80:	4648      	mov	r0, r9
   b6d82:	f7ff fb50 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   b6d86:	68e3      	ldr	r3, [r4, #12]
   b6d88:	441d      	add	r5, r3
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6d8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6d8c:	429d      	cmp	r5, r3
   b6d8e:	bfb8      	it	lt
   b6d90:	461d      	movlt	r5, r3
   b6d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6d94:	429d      	cmp	r5, r3
   b6d96:	bfa8      	it	ge
   b6d98:	461d      	movge	r5, r3
   b6d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6d9c:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6da0:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6da2:	e7b2      	b.n	b6d0a <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x56>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6da4:	f108 0801 	add.w	r8, r8, #1
   b6da8:	e7a7      	b.n	b6cfa <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6daa:	3701      	adds	r7, #1
   b6dac:	e79b      	b.n	b6ce6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x32>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6dae:	3601      	adds	r6, #1
   b6db0:	e792      	b.n	b6cd8 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x24>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6db2:	a805      	add	r0, sp, #20
   b6db4:	f7ff fac5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   b6db8:	b01b      	add	sp, #108	; 0x6c
   b6dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6dbe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   b6dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6dc2:	b09b      	sub	sp, #108	; 0x6c
   b6dc4:	4604      	mov	r4, r0
   b6dc6:	4693      	mov	fp, r2
   b6dc8:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6dca:	aa0a      	add	r2, sp, #40	; 0x28
                               uint8* output_data) {
   b6dcc:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6dce:	ab12      	add	r3, sp, #72	; 0x48
   b6dd0:	f7ff fe04 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   b6dd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6dd6:	2301      	movs	r3, #1
   b6dd8:	2104      	movs	r1, #4
   b6dda:	a805      	add	r0, sp, #20
   b6ddc:	f7ff faf6 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6de0:	2600      	movs	r6, #0
   b6de2:	2100      	movs	r1, #0
   b6de4:	a805      	add	r0, sp, #20
   b6de6:	f7ff fab7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6dea:	42b0      	cmp	r0, r6
   b6dec:	dd66      	ble.n	b6ebc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfe>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6dee:	2700      	movs	r7, #0
   b6df0:	f10d 0914 	add.w	r9, sp, #20
   b6df4:	2101      	movs	r1, #1
   b6df6:	4648      	mov	r0, r9
   b6df8:	f7ff faae 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6dfc:	42b8      	cmp	r0, r7
   b6dfe:	dd5b      	ble.n	b6eb8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfa>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6e00:	f04f 0800 	mov.w	r8, #0
   b6e04:	2102      	movs	r1, #2
   b6e06:	4648      	mov	r0, r9
   b6e08:	f7ff faa6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e0c:	4540      	cmp	r0, r8
   b6e0e:	dd51      	ble.n	b6eb4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6e10:	f04f 0a00 	mov.w	sl, #0
   b6e14:	2103      	movs	r1, #3
   b6e16:	4648      	mov	r0, r9
   b6e18:	f7ff fa9e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e1c:	4550      	cmp	r0, sl
   b6e1e:	dd46      	ble.n	b6eae <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf0>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6e20:	f8cd a000 	str.w	sl, [sp]
   b6e24:	4643      	mov	r3, r8
   b6e26:	463a      	mov	r2, r7
   b6e28:	4631      	mov	r1, r6
   b6e2a:	a80a      	add	r0, sp, #40	; 0x28
   b6e2c:	f7ff fba4 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6e30:	6863      	ldr	r3, [r4, #4]
   b6e32:	f81b 5000 	ldrb.w	r5, [fp, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6e36:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6e3a:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6e3c:	463a      	mov	r2, r7
   b6e3e:	4643      	mov	r3, r8
   b6e40:	4631      	mov	r1, r6
   b6e42:	a812      	add	r0, sp, #72	; 0x48
   b6e44:	f7ff fb98 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6e4a:	68a2      	ldr	r2, [r4, #8]
   b6e4c:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   b6e4e:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6e52:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   b6e54:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e58:	fa05 f00c 	lsl.w	r0, r5, ip
   b6e5c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   b6e60:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e62:	f7ff fb3f 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e66:	9b03      	ldr	r3, [sp, #12]
   b6e68:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e6c:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e6e:	4618      	mov	r0, r3
   b6e70:	f7ff fb38 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e74:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6e78:	4428      	add	r0, r5
   b6e7a:	f7ff fb33 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  raw_sum, params.output_multiplier, params.output_shift) +
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6e7e:	f8cd a000 	str.w	sl, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6e82:	4605      	mov	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6e84:	4643      	mov	r3, r8
   b6e86:	463a      	mov	r2, r7
   b6e88:	4631      	mov	r1, r6
   b6e8a:	4648      	mov	r0, r9
   b6e8c:	f7ff facb 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   b6e90:	68e3      	ldr	r3, [r4, #12]
   b6e92:	441d      	add	r5, r3
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6e96:	429d      	cmp	r5, r3
   b6e98:	bfb8      	it	lt
   b6e9a:	461d      	movlt	r5, r3
   b6e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6e9e:	429d      	cmp	r5, r3
   b6ea0:	bfa8      	it	ge
   b6ea2:	461d      	movge	r5, r3
   b6ea4:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6ea6:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6eaa:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6eac:	e7b2      	b.n	b6e14 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x56>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6eae:	f108 0801 	add.w	r8, r8, #1
   b6eb2:	e7a7      	b.n	b6e04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6eb4:	3701      	adds	r7, #1
   b6eb6:	e79b      	b.n	b6df0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x32>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6eb8:	3601      	adds	r6, #1
   b6eba:	e792      	b.n	b6de2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x24>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6ebc:	a805      	add	r0, sp, #20
   b6ebe:	f7ff fa40 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   b6ec2:	b01b      	add	sp, #108	; 0x6c
   b6ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6ec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6eca:	b0a9      	sub	sp, #164	; 0xa4
   b6ecc:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   b6ece:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6ed0:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.input1_offset = data->input1_offset;
   b6ed2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b6ed4:	9315      	str	r3, [sp, #84]	; 0x54
    op_params.input1_multiplier = data->input1_multiplier;
   b6ed6:	6943      	ldr	r3, [r0, #20]
   b6ed8:	931b      	str	r3, [sp, #108]	; 0x6c
    op_params.input1_shift = data->input1_shift;
   b6eda:	6843      	ldr	r3, [r0, #4]
   b6edc:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input2_offset = data->input2_offset;
   b6ede:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6ee0:	9316      	str	r3, [sp, #88]	; 0x58
    op_params.input2_multiplier = data->input2_multiplier;
   b6ee2:	6983      	ldr	r3, [r0, #24]
   b6ee4:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input2_shift = data->input2_shift;
   b6ee6:	6883      	ldr	r3, [r0, #8]
   b6ee8:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.output_offset = data->output_offset;
   b6eea:	6b03      	ldr	r3, [r0, #48]	; 0x30
   b6eec:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.output_multiplier = data->output_multiplier;
   b6eee:	69c3      	ldr	r3, [r0, #28]
   b6ef0:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.output_shift = data->output_shift;
   b6ef2:	6a03      	ldr	r3, [r0, #32]
   b6ef4:	9319      	str	r3, [sp, #100]	; 0x64
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6ef6:	4614      	mov	r4, r2
}

template <typename P>
inline void SetActivationParams(int32 min, int32 max, P* params) {
  params->quantized_activation_min = min;
   b6ef8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6efc:	a80f      	add	r0, sp, #60	; 0x3c
  params->quantized_activation_max = max;
   b6efe:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6f02:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6f04:	f7ff fcc1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f08:	4621      	mov	r1, r4
   b6f0a:	a80a      	add	r0, sp, #40	; 0x28
   b6f0c:	f7ff fcbd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   b6f10:	a90a      	add	r1, sp, #40	; 0x28
   b6f12:	aa14      	add	r2, sp, #80	; 0x50
   b6f14:	a80f      	add	r0, sp, #60	; 0x3c
   b6f16:	f7ff fbe8 	bl	b66ea <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   b6f1a:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6f1c:	a80a      	add	r0, sp, #40	; 0x28
   b6f1e:	f7ff fa10 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b6f22:	a80f      	add	r0, sp, #60	; 0x3c
   b6f24:	f7ff fa0d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   b6f28:	7833      	ldrb	r3, [r6, #0]
   b6f2a:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   b6f2c:	4629      	mov	r1, r5
   b6f2e:	a80f      	add	r0, sp, #60	; 0x3c
    if (output->type == kTfLiteInt8) {
   b6f30:	d13e      	bne.n	b6fb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   b6f32:	b31f      	cbz	r7, b6f7c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   b6f34:	f7ff fca9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6f38:	b105      	cbz	r5, b6f3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   b6f3a:	686d      	ldr	r5, [r5, #4]
   b6f3c:	4621      	mov	r1, r4
   b6f3e:	a80a      	add	r0, sp, #40	; 0x28
   b6f40:	f7ff fca3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f44:	b104      	cbz	r4, b6f48 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   b6f46:	6864      	ldr	r4, [r4, #4]
   b6f48:	4631      	mov	r1, r6
   b6f4a:	a805      	add	r0, sp, #20
   b6f4c:	f7ff fc9d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f50:	6873      	ldr	r3, [r6, #4]
   b6f52:	9302      	str	r3, [sp, #8]
   b6f54:	ab05      	add	r3, sp, #20
   b6f56:	e9cd 4300 	strd	r4, r3, [sp]
   b6f5a:	462a      	mov	r2, r5
   b6f5c:	ab0a      	add	r3, sp, #40	; 0x28
   b6f5e:	a90f      	add	r1, sp, #60	; 0x3c
   b6f60:	a814      	add	r0, sp, #80	; 0x50
   b6f62:	f7ff fea7 	bl	b6cb4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   b6f66:	a805      	add	r0, sp, #20
   b6f68:	f7ff f9eb 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b6f6c:	a80a      	add	r0, sp, #40	; 0x28
   b6f6e:	f7ff f9e8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b6f72:	a80f      	add	r0, sp, #60	; 0x3c
   b6f74:	f7ff f9e5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b6f78:	b029      	add	sp, #164	; 0xa4
   b6f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   b6f7c:	f7ff fc85 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f80:	b105      	cbz	r5, b6f84 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   b6f82:	686d      	ldr	r5, [r5, #4]
   b6f84:	4621      	mov	r1, r4
   b6f86:	a80a      	add	r0, sp, #40	; 0x28
   b6f88:	f7ff fc7f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f8c:	b104      	cbz	r4, b6f90 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   b6f8e:	6864      	ldr	r4, [r4, #4]
   b6f90:	4631      	mov	r1, r6
   b6f92:	a805      	add	r0, sp, #20
   b6f94:	f7ff fc79 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f98:	6873      	ldr	r3, [r6, #4]
   b6f9a:	9302      	str	r3, [sp, #8]
   b6f9c:	ab05      	add	r3, sp, #20
   b6f9e:	e9cd 4300 	strd	r4, r3, [sp]
   b6fa2:	462a      	mov	r2, r5
   b6fa4:	ab0a      	add	r3, sp, #40	; 0x28
   b6fa6:	a90f      	add	r1, sp, #60	; 0x3c
   b6fa8:	a814      	add	r0, sp, #80	; 0x50
   b6faa:	f7ff fb54 	bl	b6656 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   b6fae:	e7da      	b.n	b6f66 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   b6fb0:	b1cf      	cbz	r7, b6fe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   b6fb2:	f7ff fc6a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fb6:	b105      	cbz	r5, b6fba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   b6fb8:	686d      	ldr	r5, [r5, #4]
   b6fba:	4621      	mov	r1, r4
   b6fbc:	a80a      	add	r0, sp, #40	; 0x28
   b6fbe:	f7ff fc64 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fc2:	b104      	cbz	r4, b6fc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   b6fc4:	6864      	ldr	r4, [r4, #4]
   b6fc6:	4631      	mov	r1, r6
   b6fc8:	a805      	add	r0, sp, #20
   b6fca:	f7ff fc5e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fce:	6873      	ldr	r3, [r6, #4]
   b6fd0:	9302      	str	r3, [sp, #8]
   b6fd2:	ab05      	add	r3, sp, #20
   b6fd4:	e9cd 4300 	strd	r4, r3, [sp]
   b6fd8:	462a      	mov	r2, r5
   b6fda:	ab0a      	add	r3, sp, #40	; 0x28
   b6fdc:	a90f      	add	r1, sp, #60	; 0x3c
   b6fde:	a814      	add	r0, sp, #80	; 0x50
   b6fe0:	f7ff feed 	bl	b6dbe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   b6fe4:	e7bf      	b.n	b6f66 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   b6fe6:	f7ff fc50 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fea:	b105      	cbz	r5, b6fee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   b6fec:	686d      	ldr	r5, [r5, #4]
   b6fee:	4621      	mov	r1, r4
   b6ff0:	a80a      	add	r0, sp, #40	; 0x28
   b6ff2:	f7ff fc4a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6ff6:	b104      	cbz	r4, b6ffa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   b6ff8:	6864      	ldr	r4, [r4, #4]
   b6ffa:	4631      	mov	r1, r6
   b6ffc:	a805      	add	r0, sp, #20
   b6ffe:	f7ff fc44 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7002:	6873      	ldr	r3, [r6, #4]
   b7004:	9302      	str	r3, [sp, #8]
   b7006:	ab05      	add	r3, sp, #20
   b7008:	e9cd 4300 	strd	r4, r3, [sp]
   b700c:	462a      	mov	r2, r5
   b700e:	ab0a      	add	r3, sp, #40	; 0x28
   b7010:	a90f      	add	r1, sp, #60	; 0x3c
   b7012:	a814      	add	r0, sp, #80	; 0x50
   b7014:	f7ff fad4 	bl	b65c0 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   b7018:	e7a5      	b.n	b6f66 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

000b701a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   b701a:	b508      	push	{r3, lr}
   b701c:	4618      	mov	r0, r3
   b701e:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b7020:	781a      	ldrb	r2, [r3, #0]
   b7022:	2a03      	cmp	r2, #3
   b7024:	d001      	beq.n	b702a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   b7026:	2a09      	cmp	r2, #9
   b7028:	d103      	bne.n	b7032 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   b702a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   b702e:	f7ff ff4b 	bl	b6ec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   b7032:	2000      	movs	r0, #0
   b7034:	bd08      	pop	{r3, pc}
	...

000b7038 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b7038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b703c:	460e      	mov	r6, r1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b703e:	f8d0 9008 	ldr.w	r9, [r0, #8]
   b7042:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   b7044:	6949      	ldr	r1, [r1, #20]
   b7046:	685f      	ldr	r7, [r3, #4]
   b7048:	689b      	ldr	r3, [r3, #8]
   b704a:	2238      	movs	r2, #56	; 0x38
   b704c:	fb02 9803 	mla	r8, r2, r3, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7050:	6873      	ldr	r3, [r6, #4]
   b7052:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b7054:	b095      	sub	sp, #84	; 0x54
   b7056:	4353      	muls	r3, r2
   b7058:	eb09 0b03 	add.w	fp, r9, r3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b705c:	fb02 9707 	mla	r7, r2, r7, r9
  TF_LITE_ENSURE_STATUS(
   b7060:	f10d 0a1c 	add.w	sl, sp, #28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7064:	9304      	str	r3, [sp, #16]
   b7066:	e9cd ba00 	strd	fp, sl, [sp]
   b706a:	4643      	mov	r3, r8
   b706c:	463a      	mov	r2, r7
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b706e:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   b7070:	9105      	str	r1, [sp, #20]
   b7072:	f7ff fc23 	bl	b68bc <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   b7076:	4604      	mov	r4, r0
   b7078:	bb38      	cbnz	r0, b70ca <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  if (output->type == kTfLiteFloat32) {
   b707a:	9b04      	ldr	r3, [sp, #16]
   b707c:	9905      	ldr	r1, [sp, #20]
   b707e:	f819 3003 	ldrb.w	r3, [r9, r3]
   b7082:	2b01      	cmp	r3, #1
   b7084:	d10c      	bne.n	b70a0 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
   b7086:	460a      	mov	r2, r1
   b7088:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   b708c:	9700      	str	r7, [sp, #0]
   b708e:	4653      	mov	r3, sl
   b7090:	4631      	mov	r1, r6
   b7092:	4628      	mov	r0, r5
   b7094:	f7ff fd86 	bl	b6ba4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   b7098:	4620      	mov	r0, r4
   b709a:	b015      	add	sp, #84	; 0x54
   b709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b70a0:	2b03      	cmp	r3, #3
   b70a2:	d001      	beq.n	b70a8 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b70a4:	2b09      	cmp	r3, #9
   b70a6:	d10c      	bne.n	b70c2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
   b70a8:	460a      	mov	r2, r1
   b70aa:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   b70ae:	9700      	str	r7, [sp, #0]
   b70b0:	4653      	mov	r3, sl
   b70b2:	4631      	mov	r1, r6
   b70b4:	4628      	mov	r0, r5
   b70b6:	f7ff ffb0 	bl	b701a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
  TF_LITE_ENSURE_STATUS(
   b70ba:	1e04      	subs	r4, r0, #0
   b70bc:	bf18      	it	ne
   b70be:	2401      	movne	r4, #1
   b70c0:	e7ea      	b.n	b7098 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    context->ReportError(context,
   b70c2:	696b      	ldr	r3, [r5, #20]
   b70c4:	4902      	ldr	r1, [pc, #8]	; (b70d0 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x98>)
   b70c6:	4628      	mov	r0, r5
   b70c8:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
   b70ca:	2401      	movs	r4, #1
   b70cc:	e7e4      	b.n	b7098 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   b70ce:	bf00      	nop
   b70d0:	000c80f4 	.word	0x000c80f4

000b70d4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

constexpr int kInputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b70d4:	2000      	movs	r0, #0
   b70d6:	4770      	bx	lr

000b70d8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b70d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b70dc:	680a      	ldr	r2, [r1, #0]
   b70de:	6885      	ldr	r5, [r0, #8]
  TfLiteUnpackParams* data =
   b70e0:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b70e2:	b085      	sub	sp, #20
   b70e4:	9001      	str	r0, [sp, #4]
   b70e6:	6850      	ldr	r0, [r2, #4]
   b70e8:	2238      	movs	r2, #56	; 0x38
   b70ea:	4350      	muls	r0, r2
   b70ec:	182a      	adds	r2, r5, r0
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);

  switch (input->type) {
   b70ee:	5c28      	ldrb	r0, [r5, r0]
   b70f0:	1e46      	subs	r6, r0, #1
   b70f2:	2e08      	cmp	r6, #8
   b70f4:	f200 81bc 	bhi.w	b7470 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
   b70f8:	e8df f016 	tbh	[pc, r6, lsl #1]
   b70fc:	00780009 	.word	0x00780009
   b7100:	01ba00e2 	.word	0x01ba00e2
   b7104:	01ba01ba 	.word	0x01ba01ba
   b7108:	01ba01ba 	.word	0x01ba01ba
   b710c:	014e      	.short	0x014e
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   b710e:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b7112:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7114:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b7116:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b711a:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b711c:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b711e:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b7120:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b7124:	bfb8      	it	lt
   b7126:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b7128:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b712a:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b712c:	dd0c      	ble.n	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b712e:	f106 0c04 	add.w	ip, r6, #4
   b7132:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b7134:	2000      	movs	r0, #0
  int outer_size = 1;
   b7136:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b7138:	4283      	cmp	r3, r0
   b713a:	dd07      	ble.n	b714c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74>
    outer_size *= input_dims->data[i];
   b713c:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b7140:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b7142:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b7146:	e7f7      	b.n	b7138 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
  TFLITE_DCHECK_LT(axis, dimensions);
   b7148:	f00d fb58 	bl	c47fc <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
   b714c:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b714e:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b7150:	4586      	cmp	lr, r0
   b7152:	d10c      	bne.n	b716e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_dims->size; ++i) {
   b7154:	4638      	mov	r0, r7
  int output_size = 1;
   b7156:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b7158:	f850 eb04 	ldr.w	lr, [r0], #4
   b715c:	2700      	movs	r7, #0
   b715e:	45be      	cmp	lr, r7
   b7160:	dd0a      	ble.n	b7178 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
    output_size *= output_dims->data[i];
   b7162:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b7166:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b7168:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b716c:	e7f7      	b.n	b715e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
    copy_size *= input_dims->data[i];
   b716e:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b7172:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b7174:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b7176:	e7eb      	b.n	b7150 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b7178:	fb03 f006 	mul.w	r0, r3, r6
   b717c:	4285      	cmp	r5, r0
   b717e:	d1e3      	bne.n	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b7180:	6852      	ldr	r2, [r2, #4]
   b7182:	9202      	str	r2, [sp, #8]
   b7184:	2000      	movs	r0, #0
   b7186:	fb03 f209 	mul.w	r2, r3, r9
   b718a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
   b718c:	4605      	mov	r5, r0
   b718e:	45a9      	cmp	r9, r5
   b7190:	dc03      	bgt.n	b719a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   b7192:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   b7194:	b005      	add	sp, #20
   b7196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b719a:	684a      	ldr	r2, [r1, #4]
   b719c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b71a0:	2438      	movs	r4, #56	; 0x38
   b71a2:	6857      	ldr	r7, [r2, #4]
   b71a4:	9a01      	ldr	r2, [sp, #4]
   b71a6:	6892      	ldr	r2, [r2, #8]
   b71a8:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b71ac:	b102      	cbz	r2, b71b0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   b71ae:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b71b0:	2700      	movs	r7, #0
   b71b2:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b71b4:	46be      	mov	lr, r7
   b71b6:	4576      	cmp	r6, lr
   b71b8:	dd15      	ble.n	b71e6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10e>
   b71ba:	9c02      	ldr	r4, [sp, #8]
   b71bc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
   b71c0:	eb04 0b8c 	add.w	fp, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b71c4:	f04f 0800 	mov.w	r8, #0
   b71c8:	4543      	cmp	r3, r8
   b71ca:	dd06      	ble.n	b71da <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
   b71cc:	ecfb 7a01 	vldmia	fp!, {s15}
   b71d0:	f108 0801 	add.w	r8, r8, #1
   b71d4:	ecea 7a01 	vstmia	sl!, {s15}
   b71d8:	e7f6      	b.n	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    for (int k = 0; k < outer_size; ++k) {
   b71da:	9c03      	ldr	r4, [sp, #12]
   b71dc:	f10e 0e01 	add.w	lr, lr, #1
   b71e0:	44a4      	add	ip, r4
   b71e2:	441f      	add	r7, r3
   b71e4:	e7e7      	b.n	b71b6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xde>
  for (int i = 0; i < output_count; ++i) {
   b71e6:	3501      	adds	r5, #1
   b71e8:	4418      	add	r0, r3
   b71ea:	e7d0      	b.n	b718e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
   b71ec:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b71f0:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b71f2:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b71f4:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b71f8:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b71fa:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b71fc:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b71fe:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b7202:	bfb8      	it	lt
   b7204:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b7206:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b7208:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b720a:	dd9d      	ble.n	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b720c:	f106 0c04 	add.w	ip, r6, #4
   b7210:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b7212:	2000      	movs	r0, #0
  int outer_size = 1;
   b7214:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b7216:	4283      	cmp	r3, r0
   b7218:	dd05      	ble.n	b7226 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    outer_size *= input_dims->data[i];
   b721a:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b721e:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b7220:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b7224:	e7f7      	b.n	b7216 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
  for (int i = axis + 1; i < dimensions; ++i) {
   b7226:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b7228:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b722a:	4586      	cmp	lr, r0
   b722c:	d10c      	bne.n	b7248 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>
  for (int i = 0; i < output_dims->size; ++i) {
   b722e:	4638      	mov	r0, r7
  int output_size = 1;
   b7230:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b7232:	f850 eb04 	ldr.w	lr, [r0], #4
   b7236:	2700      	movs	r7, #0
   b7238:	45be      	cmp	lr, r7
   b723a:	dd0a      	ble.n	b7252 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    output_size *= output_dims->data[i];
   b723c:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b7240:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b7242:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b7246:	e7f7      	b.n	b7238 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
    copy_size *= input_dims->data[i];
   b7248:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b724c:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b724e:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b7250:	e7eb      	b.n	b722a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b7252:	fb03 f006 	mul.w	r0, r3, r6
   b7256:	4285      	cmp	r5, r0
   b7258:	f47f af76 	bne.w	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b725c:	6852      	ldr	r2, [r2, #4]
   b725e:	9203      	str	r2, [sp, #12]
   b7260:	2000      	movs	r0, #0
   b7262:	fb03 f20b 	mul.w	r2, r3, fp
   b7266:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < output_count; ++i) {
   b7268:	4605      	mov	r5, r0
   b726a:	45ab      	cmp	fp, r5
   b726c:	dd91      	ble.n	b7192 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b726e:	684a      	ldr	r2, [r1, #4]
   b7270:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b7274:	2438      	movs	r4, #56	; 0x38
   b7276:	6857      	ldr	r7, [r2, #4]
   b7278:	9a01      	ldr	r2, [sp, #4]
   b727a:	6892      	ldr	r2, [r2, #8]
   b727c:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7280:	b102      	cbz	r2, b7284 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   b7282:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b7284:	2700      	movs	r7, #0
   b7286:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b7288:	46be      	mov	lr, r7
   b728a:	4576      	cmp	r6, lr
   b728c:	dd15      	ble.n	b72ba <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   b728e:	9c03      	ldr	r4, [sp, #12]
   b7290:	eb02 0987 	add.w	r9, r2, r7, lsl #2
   b7294:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b7298:	f04f 0800 	mov.w	r8, #0
   b729c:	4543      	cmp	r3, r8
   b729e:	dd06      	ble.n	b72ae <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
   b72a0:	f85a 4b04 	ldr.w	r4, [sl], #4
   b72a4:	f849 4b04 	str.w	r4, [r9], #4
   b72a8:	f108 0801 	add.w	r8, r8, #1
   b72ac:	e7f6      	b.n	b729c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    for (int k = 0; k < outer_size; ++k) {
   b72ae:	9c02      	ldr	r4, [sp, #8]
   b72b0:	f10e 0e01 	add.w	lr, lr, #1
   b72b4:	44a4      	add	ip, r4
   b72b6:	441f      	add	r7, r3
   b72b8:	e7e7      	b.n	b728a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b2>
  for (int i = 0; i < output_count; ++i) {
   b72ba:	3501      	adds	r5, #1
   b72bc:	4418      	add	r0, r3
   b72be:	e7d4      	b.n	b726a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
   b72c0:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b72c4:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b72c6:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b72c8:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b72cc:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b72ce:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b72d0:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b72d2:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b72d6:	bfb8      	it	lt
   b72d8:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b72da:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b72dc:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b72de:	f77f af33 	ble.w	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b72e2:	f106 0c04 	add.w	ip, r6, #4
   b72e6:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b72e8:	2000      	movs	r0, #0
  int outer_size = 1;
   b72ea:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b72ec:	4283      	cmp	r3, r0
   b72ee:	dd05      	ble.n	b72fc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    outer_size *= input_dims->data[i];
   b72f0:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b72f4:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b72f6:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b72fa:	e7f7      	b.n	b72ec <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
  for (int i = axis + 1; i < dimensions; ++i) {
   b72fc:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b72fe:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b7300:	4586      	cmp	lr, r0
   b7302:	d10c      	bne.n	b731e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
  for (int i = 0; i < output_dims->size; ++i) {
   b7304:	4638      	mov	r0, r7
  int output_size = 1;
   b7306:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b7308:	f850 eb04 	ldr.w	lr, [r0], #4
   b730c:	2700      	movs	r7, #0
   b730e:	45be      	cmp	lr, r7
   b7310:	dd0a      	ble.n	b7328 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
    output_size *= output_dims->data[i];
   b7312:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b7316:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b7318:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b731c:	e7f7      	b.n	b730e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
    copy_size *= input_dims->data[i];
   b731e:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b7322:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b7324:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b7326:	e7eb      	b.n	b7300 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b7328:	fb03 f006 	mul.w	r0, r3, r6
   b732c:	4285      	cmp	r5, r0
   b732e:	f47f af0b 	bne.w	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7332:	6852      	ldr	r2, [r2, #4]
   b7334:	9202      	str	r2, [sp, #8]
   b7336:	2000      	movs	r0, #0
   b7338:	fb03 f20b 	mul.w	r2, r3, fp
   b733c:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
   b733e:	4605      	mov	r5, r0
   b7340:	45ab      	cmp	fp, r5
   b7342:	f77f af26 	ble.w	b7192 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b7346:	684a      	ldr	r2, [r1, #4]
   b7348:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b734c:	2438      	movs	r4, #56	; 0x38
   b734e:	6857      	ldr	r7, [r2, #4]
   b7350:	9a01      	ldr	r2, [sp, #4]
   b7352:	6892      	ldr	r2, [r2, #8]
   b7354:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7358:	b102      	cbz	r2, b735c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
   b735a:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b735c:	2700      	movs	r7, #0
   b735e:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b7360:	46be      	mov	lr, r7
   b7362:	4576      	cmp	r6, lr
   b7364:	dd15      	ble.n	b7392 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
   b7366:	9c02      	ldr	r4, [sp, #8]
   b7368:	eb02 0907 	add.w	r9, r2, r7
   b736c:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b7370:	f04f 0800 	mov.w	r8, #0
   b7374:	4543      	cmp	r3, r8
   b7376:	dd06      	ble.n	b7386 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ae>
   b7378:	f81a 4b01 	ldrb.w	r4, [sl], #1
   b737c:	f809 4b01 	strb.w	r4, [r9], #1
   b7380:	f108 0801 	add.w	r8, r8, #1
   b7384:	e7f6      	b.n	b7374 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>
    for (int k = 0; k < outer_size; ++k) {
   b7386:	9c03      	ldr	r4, [sp, #12]
   b7388:	f10e 0e01 	add.w	lr, lr, #1
   b738c:	44a4      	add	ip, r4
   b738e:	441f      	add	r7, r3
   b7390:	e7e7      	b.n	b7362 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28a>
  for (int i = 0; i < output_count; ++i) {
   b7392:	3501      	adds	r5, #1
   b7394:	4418      	add	r0, r3
   b7396:	e7d3      	b.n	b7340 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x268>
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
   b7398:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b739c:	6890      	ldr	r0, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b739e:	684e      	ldr	r6, [r1, #4]
  const int dimensions = input_dims->size;
   b73a0:	f8d0 e000 	ldr.w	lr, [r0]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b73a4:	6876      	ldr	r6, [r6, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b73a6:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b73a8:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b73aa:	fb07 5506 	mla	r5, r7, r6, r5
    axis += NumDimensions(input);
   b73ae:	bfb8      	it	lt
   b73b0:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b73b2:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b73b4:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b73b6:	f77f aec7 	ble.w	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b73ba:	f100 0c04 	add.w	ip, r0, #4
   b73be:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b73c0:	2000      	movs	r0, #0
  int outer_size = 1;
   b73c2:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b73c4:	4283      	cmp	r3, r0
   b73c6:	dd05      	ble.n	b73d4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    outer_size *= input_dims->data[i];
   b73c8:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b73cc:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b73ce:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b73d2:	e7f7      	b.n	b73c4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
  for (int i = axis + 1; i < dimensions; ++i) {
   b73d4:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b73d6:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b73d8:	4586      	cmp	lr, r0
   b73da:	d10c      	bne.n	b73f6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
  for (int i = 0; i < output_dims->size; ++i) {
   b73dc:	4638      	mov	r0, r7
  int output_size = 1;
   b73de:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b73e0:	f850 eb04 	ldr.w	lr, [r0], #4
   b73e4:	2700      	movs	r7, #0
   b73e6:	45be      	cmp	lr, r7
   b73e8:	dd0a      	ble.n	b7400 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x328>
    output_size *= output_dims->data[i];
   b73ea:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b73ee:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b73f0:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b73f4:	e7f7      	b.n	b73e6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30e>
    copy_size *= input_dims->data[i];
   b73f6:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b73fa:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b73fc:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b73fe:	e7eb      	b.n	b73d8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b7400:	fb03 f006 	mul.w	r0, r3, r6
   b7404:	4285      	cmp	r5, r0
   b7406:	f47f ae9f 	bne.w	b7148 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b740a:	6852      	ldr	r2, [r2, #4]
   b740c:	9203      	str	r2, [sp, #12]
   b740e:	2000      	movs	r0, #0
   b7410:	fb03 f20b 	mul.w	r2, r3, fp
   b7414:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < output_count; ++i) {
   b7416:	4605      	mov	r5, r0
   b7418:	45ab      	cmp	fp, r5
   b741a:	f77f aeba 	ble.w	b7192 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b741e:	684a      	ldr	r2, [r1, #4]
   b7420:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b7424:	2438      	movs	r4, #56	; 0x38
   b7426:	6857      	ldr	r7, [r2, #4]
   b7428:	9a01      	ldr	r2, [sp, #4]
   b742a:	6892      	ldr	r2, [r2, #8]
   b742c:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7430:	b102      	cbz	r2, b7434 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>
   b7432:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b7434:	2700      	movs	r7, #0
   b7436:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b7438:	46be      	mov	lr, r7
   b743a:	4576      	cmp	r6, lr
   b743c:	dd15      	ble.n	b746a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
   b743e:	9c03      	ldr	r4, [sp, #12]
   b7440:	eb02 0907 	add.w	r9, r2, r7
   b7444:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b7448:	f04f 0800 	mov.w	r8, #0
   b744c:	4543      	cmp	r3, r8
   b744e:	dd06      	ble.n	b745e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x386>
   b7450:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   b7454:	f809 4b01 	strb.w	r4, [r9], #1
   b7458:	f108 0801 	add.w	r8, r8, #1
   b745c:	e7f6      	b.n	b744c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    for (int k = 0; k < outer_size; ++k) {
   b745e:	9c02      	ldr	r4, [sp, #8]
   b7460:	f10e 0e01 	add.w	lr, lr, #1
   b7464:	44a4      	add	ip, r4
   b7466:	441f      	add	r7, r3
   b7468:	e7e7      	b.n	b743a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x362>
  for (int i = 0; i < output_count; ++i) {
   b746a:	3501      	adds	r5, #1
   b746c:	4418      	add	r0, r3
   b746e:	e7d3      	b.n	b7418 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x340>
      context->ReportError(context, "Type '%s' is not supported by unpack.",
   b7470:	9b01      	ldr	r3, [sp, #4]
   b7472:	695d      	ldr	r5, [r3, #20]
   b7474:	f7fd fb86 	bl	b4b84 <TfLiteTypeGetName>
   b7478:	4902      	ldr	r1, [pc, #8]	; (b7484 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
   b747a:	4602      	mov	r2, r0
   b747c:	9801      	ldr	r0, [sp, #4]
   b747e:	47a8      	blx	r5
      return kTfLiteError;
   b7480:	2001      	movs	r0, #1
   b7482:	e687      	b.n	b7194 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
   b7484:	000c8127 	.word	0x000c8127

000b7488 <_ZN6tflite3ops5micro15Register_UNPACKEv>:

TfLiteRegistration* Register_UNPACK() {
  static TfLiteRegistration r = {nullptr, nullptr, unpack::Prepare,
                                 unpack::Eval};
  return &r;
}
   b7488:	4800      	ldr	r0, [pc, #0]	; (b748c <_ZN6tflite3ops5micro15Register_UNPACKEv+0x4>)
   b748a:	4770      	bx	lr
   b748c:	2003c0b8 	.word	0x2003c0b8

000b7490 <_ZN6tflite3ops5micro11arg_min_max7PrepareEP13TfLiteContextP10TfLiteNode>:
constexpr int kAxis = 1;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b7490:	2000      	movs	r0, #0
   b7492:	4770      	bx	lr

000b7494 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
                             output_shape, output_data, micro::Less());
  }
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   b7494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7498:	4614      	mov	r4, r2
   b749a:	680a      	ldr	r2, [r1, #0]
   b749c:	6883      	ldr	r3, [r0, #8]
   b749e:	4605      	mov	r5, r0
   b74a0:	6890      	ldr	r0, [r2, #8]
   b74a2:	2738      	movs	r7, #56	; 0x38
   b74a4:	4378      	muls	r0, r7
   b74a6:	eb03 0800 	add.w	r8, r3, r0

#define TF_LITE_ARG_MIN_MAX(data_type, axis_type, output_type)            \
  ArgMinMaxHelper(GetTensorShape(input), GetTensorData<data_type>(input), \
                  GetTensorData<axis_type>(axis), GetTensorShape(output), \
                  GetTensorData<output_type>(output), is_arg_max)
  if (axis->type == kTfLiteInt32) {
   b74aa:	5c18      	ldrb	r0, [r3, r0]
   b74ac:	2802      	cmp	r0, #2
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   b74ae:	b0a5      	sub	sp, #148	; 0x94
  if (axis->type == kTfLiteInt32) {
   b74b0:	f040 8312 	bne.w	b7ad8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x644>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b74b4:	6849      	ldr	r1, [r1, #4]
   b74b6:	6849      	ldr	r1, [r1, #4]
   b74b8:	4379      	muls	r1, r7
   b74ba:	185e      	adds	r6, r3, r1
    if (output->type == kTfLiteInt32) {
   b74bc:	5c58      	ldrb	r0, [r3, r1]
   b74be:	2802      	cmp	r0, #2
   b74c0:	f040 830a 	bne.w	b7ad8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x644>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b74c4:	6852      	ldr	r2, [r2, #4]
   b74c6:	437a      	muls	r2, r7
   b74c8:	189f      	adds	r7, r3, r2
      switch (input->type) {
   b74ca:	5c98      	ldrb	r0, [r3, r2]
   b74cc:	2803      	cmp	r0, #3
   b74ce:	f000 8110 	beq.w	b76f2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x25e>
   b74d2:	2809      	cmp	r0, #9
   b74d4:	f000 8202 	beq.w	b78dc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x448>
   b74d8:	2801      	cmp	r0, #1
   b74da:	f040 82f4 	bne.w	b7ac6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x632>
        case kTfLiteFloat32:
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   b74de:	4639      	mov	r1, r7
   b74e0:	a806      	add	r0, sp, #24
   b74e2:	f7ff f9d2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b74e6:	687b      	ldr	r3, [r7, #4]
   b74e8:	9301      	str	r3, [sp, #4]
   b74ea:	4631      	mov	r1, r6
   b74ec:	a80b      	add	r0, sp, #44	; 0x2c
   b74ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b74f2:	f7ff f9ca 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b74f6:	6873      	ldr	r3, [r6, #4]
   b74f8:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b74fa:	9e06      	ldr	r6, [sp, #24]
  if (is_arg_max) {
   b74fc:	2c00      	cmp	r4, #0
   b74fe:	d077      	beq.n	b75f0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x15c>

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7500:	2e00      	cmp	r6, #0
   b7502:	dc01      	bgt.n	b7508 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x74>
   b7504:	f00d f97a 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b750a:	1e73      	subs	r3, r6, #1
   b750c:	4293      	cmp	r3, r2
   b750e:	d1f9      	bne.n	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   b7510:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7512:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7514:	bfb8      	it	lt
   b7516:	19a4      	addlt	r4, r4, r6
  }
  const int axis_size = input1_shape.Dims(axis);
   b7518:	4621      	mov	r1, r4
   b751a:	a806      	add	r0, sp, #24
   b751c:	f7fe ff1c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   b7520:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7522:	4605      	mov	r5, r0
  int outer_size = 1;
   b7524:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7528:	42bc      	cmp	r4, r7
   b752a:	dd0e      	ble.n	b754a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xb6>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b752c:	4639      	mov	r1, r7
   b752e:	a806      	add	r0, sp, #24
   b7530:	f7fe ff12 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7534:	4639      	mov	r1, r7
   b7536:	4681      	mov	r9, r0
   b7538:	a80b      	add	r0, sp, #44	; 0x2c
   b753a:	f7fe ff0d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b753e:	4581      	cmp	r9, r0
   b7540:	d1e0      	bne.n	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7542:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b7546:	3701      	adds	r7, #1
   b7548:	e7ee      	b.n	b7528 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x94>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   b754a:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b754c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b754e:	42be      	cmp	r6, r7
   b7550:	dc31      	bgt.n	b75b6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x122>
   b7552:	fb04 f305 	mul.w	r3, r4, r5
   b7556:	9305      	str	r3, [sp, #20]
   b7558:	00a3      	lsls	r3, r4, #2
   b755a:	9304      	str	r3, [sp, #16]
   b755c:	2300      	movs	r3, #0
   b755e:	2001      	movs	r0, #1
   b7560:	461e      	mov	r6, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   b7562:	461f      	mov	r7, r3
   b7564:	45b8      	cmp	r8, r7
   b7566:	f340 80ba 	ble.w	b76de <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x24a>
   b756a:	9a03      	ldr	r2, [sp, #12]
   b756c:	9901      	ldr	r1, [sp, #4]
   b756e:	eb02 0986 	add.w	r9, r2, r6, lsl #2
   b7572:	fb04 f200 	mul.w	r2, r4, r0
   b7576:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b757a:	9202      	str	r2, [sp, #8]
   b757c:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   b7580:	f04f 0c00 	mov.w	ip, #0
   b7584:	4564      	cmp	r4, ip
   b7586:	dd2d      	ble.n	b75e4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x150>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7588:	ecfb 7a01 	vldmia	fp!, {s15}
   b758c:	f8dd e008 	ldr.w	lr, [sp, #8]
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   b7590:	2101      	movs	r1, #1
      T2 min_max_index = 0;
   b7592:	f04f 0a00 	mov.w	sl, #0
      for (int i = 1; i < axis_size; ++i) {
   b7596:	428d      	cmp	r5, r1
   b7598:	dd1c      	ble.n	b75d4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x140>
// Same as gtl::Greater but defined here to reduce dependencies and
// binary size for micro environment.
struct Greater {
  template <typename T>
  bool operator()(const T& x, const T& y) const {
    return x > y;
   b759a:	ed9e 7a00 	vldr	s14, [lr]
   b759e:	9a04      	ldr	r2, [sp, #16]
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   b75a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b75a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75a8:	bfc4      	itt	gt
   b75aa:	468a      	movgt	sl, r1
          min_max_value = curr_value;
   b75ac:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   b75b0:	3101      	adds	r1, #1
   b75b2:	4496      	add	lr, r2
   b75b4:	e7ef      	b.n	b7596 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x102>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b75b6:	4639      	mov	r1, r7
   b75b8:	a806      	add	r0, sp, #24
   b75ba:	f7fe fecd 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b75be:	1e79      	subs	r1, r7, #1
   b75c0:	4681      	mov	r9, r0
   b75c2:	a80b      	add	r0, sp, #44	; 0x2c
   b75c4:	f7fe fec8 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b75c8:	4581      	cmp	r9, r0
   b75ca:	d19b      	bne.n	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b75cc:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b75d0:	3701      	adds	r7, #1
   b75d2:	e7bc      	b.n	b754e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xba>
   b75d4:	9a02      	ldr	r2, [sp, #8]
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   b75d6:	f849 ab04 	str.w	sl, [r9], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b75da:	3204      	adds	r2, #4
   b75dc:	f10c 0c01 	add.w	ip, ip, #1
   b75e0:	9202      	str	r2, [sp, #8]
   b75e2:	e7cf      	b.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf0>
  for (int outer = 0; outer < outer_size; ++outer) {
   b75e4:	9a05      	ldr	r2, [sp, #20]
   b75e6:	3701      	adds	r7, #1
   b75e8:	4426      	add	r6, r4
   b75ea:	4428      	add	r0, r5
   b75ec:	4413      	add	r3, r2
   b75ee:	e7b9      	b.n	b7564 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xd0>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b75f0:	2e00      	cmp	r6, #0
   b75f2:	dd87      	ble.n	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b75f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b75f6:	1e73      	subs	r3, r6, #1
   b75f8:	4293      	cmp	r3, r2
   b75fa:	d183      	bne.n	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b75fc:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b75fe:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7600:	bfb8      	it	lt
   b7602:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b7604:	4621      	mov	r1, r4
   b7606:	a806      	add	r0, sp, #24
   b7608:	f7fe fea6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b760c:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b760e:	4605      	mov	r5, r0
  int outer_size = 1;
   b7610:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7614:	42bc      	cmp	r4, r7
   b7616:	dd0f      	ble.n	b7638 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1a4>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7618:	4639      	mov	r1, r7
   b761a:	a806      	add	r0, sp, #24
   b761c:	f7fe fe9c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7620:	4639      	mov	r1, r7
   b7622:	4681      	mov	r9, r0
   b7624:	a80b      	add	r0, sp, #44	; 0x2c
   b7626:	f7fe fe97 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b762a:	4581      	cmp	r9, r0
   b762c:	f47f af6a 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7630:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b7634:	3701      	adds	r7, #1
   b7636:	e7ed      	b.n	b7614 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x180>
  for (int i = axis + 1; i < dims_count; ++i) {
   b7638:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b763a:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b763c:	42be      	cmp	r6, r7
   b763e:	dc30      	bgt.n	b76a2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x20e>
   b7640:	fb05 f304 	mul.w	r3, r5, r4
   b7644:	9305      	str	r3, [sp, #20]
   b7646:	00a3      	lsls	r3, r4, #2
   b7648:	9304      	str	r3, [sp, #16]
   b764a:	2300      	movs	r3, #0
   b764c:	2001      	movs	r0, #1
   b764e:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7650:	461f      	mov	r7, r3
   b7652:	45b8      	cmp	r8, r7
   b7654:	dd43      	ble.n	b76de <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x24a>
   b7656:	9a03      	ldr	r2, [sp, #12]
   b7658:	9901      	ldr	r1, [sp, #4]
   b765a:	eb02 0986 	add.w	r9, r2, r6, lsl #2
   b765e:	fb04 f200 	mul.w	r2, r4, r0
   b7662:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b7666:	9202      	str	r2, [sp, #8]
   b7668:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   b766c:	f04f 0c00 	mov.w	ip, #0
   b7670:	4564      	cmp	r4, ip
   b7672:	dd2e      	ble.n	b76d2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x23e>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7674:	ecfb 7a01 	vldmia	fp!, {s15}
   b7678:	f8dd e008 	ldr.w	lr, [sp, #8]
      for (int i = 1; i < axis_size; ++i) {
   b767c:	2101      	movs	r1, #1
      T2 min_max_index = 0;
   b767e:	f04f 0a00 	mov.w	sl, #0
      for (int i = 1; i < axis_size; ++i) {
   b7682:	428d      	cmp	r5, r1
   b7684:	dd1d      	ble.n	b76c2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x22e>
};

struct Less {
  template <typename T>
  bool operator()(const T& x, const T& y) const {
    return x < y;
   b7686:	ed9e 7a00 	vldr	s14, [lr]
   b768a:	9a04      	ldr	r2, [sp, #16]
        if (cmp(curr_value, min_max_value)) {
   b768c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7694:	bf44      	itt	mi
   b7696:	468a      	movmi	sl, r1
          min_max_value = curr_value;
   b7698:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   b769c:	3101      	adds	r1, #1
   b769e:	4496      	add	lr, r2
   b76a0:	e7ef      	b.n	b7682 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1ee>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b76a2:	4639      	mov	r1, r7
   b76a4:	a806      	add	r0, sp, #24
   b76a6:	f7fe fe57 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b76aa:	1e79      	subs	r1, r7, #1
   b76ac:	4681      	mov	r9, r0
   b76ae:	a80b      	add	r0, sp, #44	; 0x2c
   b76b0:	f7fe fe52 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b76b4:	4581      	cmp	r9, r0
   b76b6:	f47f af25 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b76ba:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b76be:	3701      	adds	r7, #1
   b76c0:	e7bc      	b.n	b763c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1a8>
   b76c2:	9a02      	ldr	r2, [sp, #8]
      output_data[outer * inner_size + inner] = min_max_index;
   b76c4:	f849 ab04 	str.w	sl, [r9], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b76c8:	3204      	adds	r2, #4
   b76ca:	f10c 0c01 	add.w	ip, ip, #1
   b76ce:	9202      	str	r2, [sp, #8]
   b76d0:	e7ce      	b.n	b7670 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1dc>
  for (int outer = 0; outer < outer_size; ++outer) {
   b76d2:	9a05      	ldr	r2, [sp, #20]
   b76d4:	3701      	adds	r7, #1
   b76d6:	4426      	add	r6, r4
   b76d8:	4428      	add	r0, r5
   b76da:	4413      	add	r3, r2
   b76dc:	e7b9      	b.n	b7652 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1be>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   b76de:	a80b      	add	r0, sp, #44	; 0x2c
   b76e0:	f7fe fe2f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b76e4:	a806      	add	r0, sp, #24
          break;
        case kTfLiteUInt8:
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
          break;
        case kTfLiteInt8:
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b76e6:	f7fe fe2c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
    return kTfLiteError;
  }

#undef TF_LITE_ARG_MIN_MAX

  return kTfLiteOk;
   b76ea:	2000      	movs	r0, #0
}
   b76ec:	b025      	add	sp, #148	; 0x94
   b76ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   b76f2:	4639      	mov	r1, r7
   b76f4:	a810      	add	r0, sp, #64	; 0x40
   b76f6:	f7ff f8c8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b76fa:	687b      	ldr	r3, [r7, #4]
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	4631      	mov	r1, r6
   b7700:	a815      	add	r0, sp, #84	; 0x54
   b7702:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7706:	f7ff f8c0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b770a:	6873      	ldr	r3, [r6, #4]
   b770c:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b770e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (is_arg_max) {
   b7710:	2c00      	cmp	r4, #0
   b7712:	d06f      	beq.n	b77f4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x360>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7714:	2e00      	cmp	r6, #0
   b7716:	f77f aef5 	ble.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b771a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b771c:	1e73      	subs	r3, r6, #1
   b771e:	4293      	cmp	r3, r2
   b7720:	f47f aef0 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b7724:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7726:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7728:	bfb8      	it	lt
   b772a:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b772c:	4621      	mov	r1, r4
   b772e:	a810      	add	r0, sp, #64	; 0x40
   b7730:	f7fe fe12 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b7734:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7736:	4605      	mov	r5, r0
  int outer_size = 1;
   b7738:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b773c:	42bc      	cmp	r4, r7
   b773e:	dd0f      	ble.n	b7760 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2cc>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7740:	4639      	mov	r1, r7
   b7742:	a810      	add	r0, sp, #64	; 0x40
   b7744:	f7fe fe08 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7748:	4639      	mov	r1, r7
   b774a:	4681      	mov	r9, r0
   b774c:	a815      	add	r0, sp, #84	; 0x54
   b774e:	f7fe fe03 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7752:	4581      	cmp	r9, r0
   b7754:	f47f aed6 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7758:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b775c:	3701      	adds	r7, #1
   b775e:	e7ed      	b.n	b773c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2a8>
  for (int i = axis + 1; i < dims_count; ++i) {
   b7760:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b7762:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b7764:	42be      	cmp	r6, r7
   b7766:	dc29      	bgt.n	b77bc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x328>
   b7768:	fb05 f304 	mul.w	r3, r5, r4
   b776c:	9305      	str	r3, [sp, #20]
   b776e:	2301      	movs	r3, #1
   b7770:	9302      	str	r3, [sp, #8]
   b7772:	2300      	movs	r3, #0
   b7774:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7776:	461f      	mov	r7, r3
   b7778:	45b8      	cmp	r8, r7
   b777a:	f340 80aa 	ble.w	b78d2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x43e>
   b777e:	9a03      	ldr	r2, [sp, #12]
   b7780:	9902      	ldr	r1, [sp, #8]
   b7782:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7786:	9a01      	ldr	r2, [sp, #4]
   b7788:	eb03 0902 	add.w	r9, r3, r2
   b778c:	fb01 2204 	mla	r2, r1, r4, r2
   b7790:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b7792:	2200      	movs	r2, #0
   b7794:	4294      	cmp	r4, r2
   b7796:	dd25      	ble.n	b77e4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x350>
   b7798:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b779a:	f819 ab01 	ldrb.w	sl, [r9], #1
   b779e:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b77a2:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b77a4:	2101      	movs	r1, #1
   b77a6:	428d      	cmp	r5, r1
   b77a8:	dd18      	ble.n	b77dc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x348>
    return x > y;
   b77aa:	f89c b000 	ldrb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b77ae:	45d3      	cmp	fp, sl
   b77b0:	bf84      	itt	hi
   b77b2:	4608      	movhi	r0, r1
   b77b4:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b77b6:	3101      	adds	r1, #1
   b77b8:	44a4      	add	ip, r4
   b77ba:	e7f4      	b.n	b77a6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x312>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b77bc:	4639      	mov	r1, r7
   b77be:	a810      	add	r0, sp, #64	; 0x40
   b77c0:	f7fe fdca 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b77c4:	1e79      	subs	r1, r7, #1
   b77c6:	4681      	mov	r9, r0
   b77c8:	a815      	add	r0, sp, #84	; 0x54
   b77ca:	f7fe fdc5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b77ce:	4581      	cmp	r9, r0
   b77d0:	f47f ae98 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b77d4:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b77d8:	3701      	adds	r7, #1
   b77da:	e7c3      	b.n	b7764 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2d0>
      output_data[outer * inner_size + inner] = min_max_index;
   b77dc:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b77e0:	3201      	adds	r2, #1
   b77e2:	e7d7      	b.n	b7794 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x300>
  for (int outer = 0; outer < outer_size; ++outer) {
   b77e4:	9a05      	ldr	r2, [sp, #20]
   b77e6:	4413      	add	r3, r2
   b77e8:	9a02      	ldr	r2, [sp, #8]
   b77ea:	442a      	add	r2, r5
   b77ec:	3701      	adds	r7, #1
   b77ee:	4426      	add	r6, r4
   b77f0:	9202      	str	r2, [sp, #8]
   b77f2:	e7c1      	b.n	b7778 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2e4>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b77f4:	2e00      	cmp	r6, #0
   b77f6:	f77f ae85 	ble.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b77fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b77fc:	1e73      	subs	r3, r6, #1
   b77fe:	4293      	cmp	r3, r2
   b7800:	f47f ae80 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b7804:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7806:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7808:	bfb8      	it	lt
   b780a:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b780c:	4621      	mov	r1, r4
   b780e:	a810      	add	r0, sp, #64	; 0x40
   b7810:	f7fe fda2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b7814:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7816:	4605      	mov	r5, r0
  int outer_size = 1;
   b7818:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b781c:	42bc      	cmp	r4, r7
   b781e:	dd0f      	ble.n	b7840 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3ac>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7820:	4639      	mov	r1, r7
   b7822:	a810      	add	r0, sp, #64	; 0x40
   b7824:	f7fe fd98 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7828:	4639      	mov	r1, r7
   b782a:	4681      	mov	r9, r0
   b782c:	a815      	add	r0, sp, #84	; 0x54
   b782e:	f7fe fd93 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7832:	4581      	cmp	r9, r0
   b7834:	f47f ae66 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7838:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b783c:	3701      	adds	r7, #1
   b783e:	e7ed      	b.n	b781c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x388>
  for (int i = axis + 1; i < dims_count; ++i) {
   b7840:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b7842:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b7844:	42be      	cmp	r6, r7
   b7846:	dc28      	bgt.n	b789a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x406>
   b7848:	fb05 f304 	mul.w	r3, r5, r4
   b784c:	9305      	str	r3, [sp, #20]
   b784e:	2301      	movs	r3, #1
   b7850:	9302      	str	r3, [sp, #8]
   b7852:	2300      	movs	r3, #0
   b7854:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7856:	461f      	mov	r7, r3
   b7858:	45b8      	cmp	r8, r7
   b785a:	dd3a      	ble.n	b78d2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x43e>
   b785c:	9a03      	ldr	r2, [sp, #12]
   b785e:	9902      	ldr	r1, [sp, #8]
   b7860:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7864:	9a01      	ldr	r2, [sp, #4]
   b7866:	eb03 0902 	add.w	r9, r3, r2
   b786a:	fb01 2204 	mla	r2, r1, r4, r2
   b786e:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b7870:	2200      	movs	r2, #0
   b7872:	4294      	cmp	r4, r2
   b7874:	dd25      	ble.n	b78c2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x42e>
   b7876:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7878:	f819 ab01 	ldrb.w	sl, [r9], #1
   b787c:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7880:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7882:	2101      	movs	r1, #1
   b7884:	428d      	cmp	r5, r1
   b7886:	dd18      	ble.n	b78ba <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x426>
    return x < y;
   b7888:	f89c b000 	ldrb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b788c:	45d3      	cmp	fp, sl
   b788e:	bf3c      	itt	cc
   b7890:	4608      	movcc	r0, r1
   b7892:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7894:	3101      	adds	r1, #1
   b7896:	44a4      	add	ip, r4
   b7898:	e7f4      	b.n	b7884 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3f0>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b789a:	4639      	mov	r1, r7
   b789c:	a810      	add	r0, sp, #64	; 0x40
   b789e:	f7fe fd5b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b78a2:	1e79      	subs	r1, r7, #1
   b78a4:	4681      	mov	r9, r0
   b78a6:	a815      	add	r0, sp, #84	; 0x54
   b78a8:	f7fe fd56 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b78ac:	4581      	cmp	r9, r0
   b78ae:	f47f ae29 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b78b2:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b78b6:	3701      	adds	r7, #1
   b78b8:	e7c4      	b.n	b7844 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3b0>
      output_data[outer * inner_size + inner] = min_max_index;
   b78ba:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b78be:	3201      	adds	r2, #1
   b78c0:	e7d7      	b.n	b7872 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3de>
  for (int outer = 0; outer < outer_size; ++outer) {
   b78c2:	9a05      	ldr	r2, [sp, #20]
   b78c4:	4413      	add	r3, r2
   b78c6:	9a02      	ldr	r2, [sp, #8]
   b78c8:	442a      	add	r2, r5
   b78ca:	3701      	adds	r7, #1
   b78cc:	4426      	add	r6, r4
   b78ce:	9202      	str	r2, [sp, #8]
   b78d0:	e7c2      	b.n	b7858 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3c4>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   b78d2:	a815      	add	r0, sp, #84	; 0x54
   b78d4:	f7fe fd35 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b78d8:	a810      	add	r0, sp, #64	; 0x40
   b78da:	e704      	b.n	b76e6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x252>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b78dc:	4639      	mov	r1, r7
   b78de:	a81a      	add	r0, sp, #104	; 0x68
   b78e0:	f7fe ffd3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b78e4:	687b      	ldr	r3, [r7, #4]
   b78e6:	9301      	str	r3, [sp, #4]
   b78e8:	4631      	mov	r1, r6
   b78ea:	a81f      	add	r0, sp, #124	; 0x7c
   b78ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b78f0:	f7fe ffcb 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b78f4:	6873      	ldr	r3, [r6, #4]
   b78f6:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b78f8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
  if (is_arg_max) {
   b78fa:	2c00      	cmp	r4, #0
   b78fc:	d06f      	beq.n	b79de <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x54a>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b78fe:	2e00      	cmp	r6, #0
   b7900:	f77f ae00 	ble.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7904:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b7906:	1e73      	subs	r3, r6, #1
   b7908:	4293      	cmp	r3, r2
   b790a:	f47f adfb 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b790e:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7910:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7912:	bfb8      	it	lt
   b7914:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b7916:	4621      	mov	r1, r4
   b7918:	a81a      	add	r0, sp, #104	; 0x68
   b791a:	f7fe fd1d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b791e:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7920:	4605      	mov	r5, r0
  int outer_size = 1;
   b7922:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7926:	42bc      	cmp	r4, r7
   b7928:	dd0f      	ble.n	b794a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4b6>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b792a:	4639      	mov	r1, r7
   b792c:	a81a      	add	r0, sp, #104	; 0x68
   b792e:	f7fe fd13 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7932:	4639      	mov	r1, r7
   b7934:	4681      	mov	r9, r0
   b7936:	a81f      	add	r0, sp, #124	; 0x7c
   b7938:	f7fe fd0e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b793c:	4581      	cmp	r9, r0
   b793e:	f47f ade1 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7942:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b7946:	3701      	adds	r7, #1
   b7948:	e7ed      	b.n	b7926 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x492>
  for (int i = axis + 1; i < dims_count; ++i) {
   b794a:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b794c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b794e:	42be      	cmp	r6, r7
   b7950:	dc29      	bgt.n	b79a6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x512>
   b7952:	fb05 f304 	mul.w	r3, r5, r4
   b7956:	9305      	str	r3, [sp, #20]
   b7958:	2301      	movs	r3, #1
   b795a:	9302      	str	r3, [sp, #8]
   b795c:	2300      	movs	r3, #0
   b795e:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7960:	461f      	mov	r7, r3
   b7962:	45b8      	cmp	r8, r7
   b7964:	f340 80aa 	ble.w	b7abc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x628>
   b7968:	9a03      	ldr	r2, [sp, #12]
   b796a:	9902      	ldr	r1, [sp, #8]
   b796c:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7970:	9a01      	ldr	r2, [sp, #4]
   b7972:	eb03 0902 	add.w	r9, r3, r2
   b7976:	fb01 2204 	mla	r2, r1, r4, r2
   b797a:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b797c:	2200      	movs	r2, #0
   b797e:	4294      	cmp	r4, r2
   b7980:	dd25      	ble.n	b79ce <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x53a>
   b7982:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7984:	f919 ab01 	ldrsb.w	sl, [r9], #1
   b7988:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b798c:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b798e:	2101      	movs	r1, #1
   b7990:	428d      	cmp	r5, r1
   b7992:	dd18      	ble.n	b79c6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x532>
    return x > y;
   b7994:	f99c b000 	ldrsb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b7998:	45d3      	cmp	fp, sl
   b799a:	bfc4      	itt	gt
   b799c:	4608      	movgt	r0, r1
   b799e:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b79a0:	3101      	adds	r1, #1
   b79a2:	44a4      	add	ip, r4
   b79a4:	e7f4      	b.n	b7990 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4fc>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b79a6:	4639      	mov	r1, r7
   b79a8:	a81a      	add	r0, sp, #104	; 0x68
   b79aa:	f7fe fcd5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b79ae:	1e79      	subs	r1, r7, #1
   b79b0:	4681      	mov	r9, r0
   b79b2:	a81f      	add	r0, sp, #124	; 0x7c
   b79b4:	f7fe fcd0 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b79b8:	4581      	cmp	r9, r0
   b79ba:	f47f ada3 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b79be:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b79c2:	3701      	adds	r7, #1
   b79c4:	e7c3      	b.n	b794e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ba>
      output_data[outer * inner_size + inner] = min_max_index;
   b79c6:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b79ca:	3201      	adds	r2, #1
   b79cc:	e7d7      	b.n	b797e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ea>
  for (int outer = 0; outer < outer_size; ++outer) {
   b79ce:	9a05      	ldr	r2, [sp, #20]
   b79d0:	4413      	add	r3, r2
   b79d2:	9a02      	ldr	r2, [sp, #8]
   b79d4:	442a      	add	r2, r5
   b79d6:	3701      	adds	r7, #1
   b79d8:	4426      	add	r6, r4
   b79da:	9202      	str	r2, [sp, #8]
   b79dc:	e7c1      	b.n	b7962 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ce>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b79de:	2e00      	cmp	r6, #0
   b79e0:	f77f ad90 	ble.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b79e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b79e6:	1e73      	subs	r3, r6, #1
   b79e8:	4293      	cmp	r3, r2
   b79ea:	f47f ad8b 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b79ee:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b79f0:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b79f2:	bfb8      	it	lt
   b79f4:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b79f6:	4621      	mov	r1, r4
   b79f8:	a81a      	add	r0, sp, #104	; 0x68
   b79fa:	f7fe fcad 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b79fe:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7a00:	4605      	mov	r5, r0
  int outer_size = 1;
   b7a02:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7a06:	42bc      	cmp	r4, r7
   b7a08:	dd0f      	ble.n	b7a2a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x596>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7a0a:	4639      	mov	r1, r7
   b7a0c:	a81a      	add	r0, sp, #104	; 0x68
   b7a0e:	f7fe fca3 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a12:	4639      	mov	r1, r7
   b7a14:	4681      	mov	r9, r0
   b7a16:	a81f      	add	r0, sp, #124	; 0x7c
   b7a18:	f7fe fc9e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a1c:	4581      	cmp	r9, r0
   b7a1e:	f47f ad71 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7a22:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b7a26:	3701      	adds	r7, #1
   b7a28:	e7ed      	b.n	b7a06 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x572>
  for (int i = axis + 1; i < dims_count; ++i) {
   b7a2a:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b7a2c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b7a2e:	42be      	cmp	r6, r7
   b7a30:	dc28      	bgt.n	b7a84 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5f0>
   b7a32:	fb05 f304 	mul.w	r3, r5, r4
   b7a36:	9305      	str	r3, [sp, #20]
   b7a38:	2301      	movs	r3, #1
   b7a3a:	9302      	str	r3, [sp, #8]
   b7a3c:	2300      	movs	r3, #0
   b7a3e:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7a40:	461f      	mov	r7, r3
   b7a42:	45b8      	cmp	r8, r7
   b7a44:	dd3a      	ble.n	b7abc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x628>
   b7a46:	9a03      	ldr	r2, [sp, #12]
   b7a48:	9902      	ldr	r1, [sp, #8]
   b7a4a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7a4e:	9a01      	ldr	r2, [sp, #4]
   b7a50:	eb03 0902 	add.w	r9, r3, r2
   b7a54:	fb01 2204 	mla	r2, r1, r4, r2
   b7a58:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b7a5a:	2200      	movs	r2, #0
   b7a5c:	4294      	cmp	r4, r2
   b7a5e:	dd25      	ble.n	b7aac <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x618>
   b7a60:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7a62:	f919 ab01 	ldrsb.w	sl, [r9], #1
   b7a66:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7a6a:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7a6c:	2101      	movs	r1, #1
   b7a6e:	428d      	cmp	r5, r1
   b7a70:	dd18      	ble.n	b7aa4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x610>
    return x < y;
   b7a72:	f99c b000 	ldrsb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b7a76:	45d3      	cmp	fp, sl
   b7a78:	bfbc      	itt	lt
   b7a7a:	4608      	movlt	r0, r1
   b7a7c:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7a7e:	3101      	adds	r1, #1
   b7a80:	44a4      	add	ip, r4
   b7a82:	e7f4      	b.n	b7a6e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5da>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b7a84:	4639      	mov	r1, r7
   b7a86:	a81a      	add	r0, sp, #104	; 0x68
   b7a88:	f7fe fc66 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a8c:	1e79      	subs	r1, r7, #1
   b7a8e:	4681      	mov	r9, r0
   b7a90:	a81f      	add	r0, sp, #124	; 0x7c
   b7a92:	f7fe fc61 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a96:	4581      	cmp	r9, r0
   b7a98:	f47f ad34 	bne.w	b7504 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b7a9c:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7aa0:	3701      	adds	r7, #1
   b7aa2:	e7c4      	b.n	b7a2e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x59a>
      output_data[outer * inner_size + inner] = min_max_index;
   b7aa4:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b7aa8:	3201      	adds	r2, #1
   b7aaa:	e7d7      	b.n	b7a5c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5c8>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7aac:	9a05      	ldr	r2, [sp, #20]
   b7aae:	4413      	add	r3, r2
   b7ab0:	9a02      	ldr	r2, [sp, #8]
   b7ab2:	442a      	add	r2, r5
   b7ab4:	3701      	adds	r7, #1
   b7ab6:	4426      	add	r6, r4
   b7ab8:	9202      	str	r2, [sp, #8]
   b7aba:	e7c2      	b.n	b7a42 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5ae>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b7abc:	a81f      	add	r0, sp, #124	; 0x7c
   b7abe:	f7fe fc40 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b7ac2:	a81a      	add	r0, sp, #104	; 0x68
   b7ac4:	e60f      	b.n	b76e6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x252>
          context->ReportError(context,
   b7ac6:	696c      	ldr	r4, [r5, #20]
   b7ac8:	f7fd f85c 	bl	b4b84 <TfLiteTypeGetName>
   b7acc:	4905      	ldr	r1, [pc, #20]	; (b7ae4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x650>)
   b7ace:	4602      	mov	r2, r0
    context->ReportError(context, "Only int32 are supported currently, got %s.",
   b7ad0:	4628      	mov	r0, r5
   b7ad2:	47a0      	blx	r4
    return kTfLiteError;
   b7ad4:	2001      	movs	r0, #1
   b7ad6:	e609      	b.n	b76ec <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x258>
    context->ReportError(context, "Only int32 are supported currently, got %s.",
   b7ad8:	696c      	ldr	r4, [r5, #20]
   b7ada:	f7fd f853 	bl	b4b84 <TfLiteTypeGetName>
   b7ade:	4902      	ldr	r1, [pc, #8]	; (b7ae8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x654>)
   b7ae0:	4602      	mov	r2, r0
   b7ae2:	e7f5      	b.n	b7ad0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x63c>
   b7ae4:	000c814d 	.word	0x000c814d
   b7ae8:	000c818b 	.word	0x000c818b

000b7aec <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ArgMinEval(TfLiteContext* context, TfLiteNode* node) {
  return Eval(context, node, false);
   b7aec:	2200      	movs	r2, #0
   b7aee:	f7ff bcd1 	b.w	b7494 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000b7af2 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus ArgMaxEval(TfLiteContext* context, TfLiteNode* node) {
  return Eval(context, node, true);
   b7af2:	2201      	movs	r2, #1
   b7af4:	f7ff bcce 	b.w	b7494 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000b7af8 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:

TfLiteRegistration* Register_ARG_MAX() {
  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,
                                 arg_min_max::ArgMaxEval};
  return &r;
}
   b7af8:	4800      	ldr	r0, [pc, #0]	; (b7afc <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x4>)
   b7afa:	4770      	bx	lr
   b7afc:	2003c0d8 	.word	0x2003c0d8

000b7b00 <_ZN6tflite3ops5micro16Register_ARG_MINEv>:

TfLiteRegistration* Register_ARG_MIN() {
  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,
                                 arg_min_max::ArgMinEval};
  return &r;
}
   b7b00:	4800      	ldr	r0, [pc, #0]	; (b7b04 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x4>)
   b7b02:	4770      	bx	lr
   b7b04:	2003c0f8 	.word	0x2003c0f8

000b7b08 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 4);
   b7b08:	2904      	cmp	r1, #4
                                   int dim_count) {
   b7b0a:	b570      	push	{r4, r5, r6, lr}
   b7b0c:	4604      	mov	r4, r0
   b7b0e:	460d      	mov	r5, r1
  TFLITE_CHECK_LE(dim_count, 4);
   b7b10:	dd01      	ble.n	b7b16 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xe>
   b7b12:	f00c fe73 	bl	c47fc <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   b7b16:	f990 2000 	ldrsb.w	r2, [r0]
   b7b1a:	428a      	cmp	r2, r1
   b7b1c:	dcf9      	bgt.n	b7b12 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   b7b1e:	f990 300a 	ldrsb.w	r3, [r0, #10]
   b7b22:	429a      	cmp	r2, r3
   b7b24:	d1f5      	bne.n	b7b12 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   b7b26:	f990 3014 	ldrsb.w	r3, [r0, #20]
   b7b2a:	4293      	cmp	r3, r2
   b7b2c:	d1f1      	bne.n	b7b12 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>

  const int pad_count = dim_count - p->start_indices_count;
   b7b2e:	1ace      	subs	r6, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   b7b30:	eb00 0245 	add.w	r2, r0, r5, lsl #1
   b7b34:	1e59      	subs	r1, r3, #1
   b7b36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b7b3a:	2900      	cmp	r1, #0
   b7b3c:	da11      	bge.n	b7b62 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
    p->start_indices[i] = 0;
   b7b3e:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   b7b42:	0052      	lsls	r2, r2, #1
   b7b44:	2100      	movs	r1, #0
   b7b46:	1ca0      	adds	r0, r4, #2
   b7b48:	f00f f80c 	bl	c6b64 <memset>
   b7b4c:	f104 020c 	add.w	r2, r4, #12
  for (int i = 0; i < pad_count; ++i) {
   b7b50:	2300      	movs	r3, #0
    p->stop_indices[i] = 1;
   b7b52:	2101      	movs	r1, #1
  for (int i = 0; i < pad_count; ++i) {
   b7b54:	42b3      	cmp	r3, r6
   b7b56:	da10      	bge.n	b7b7a <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x72>
    p->stop_indices[i] = 1;
   b7b58:	f822 1b02 	strh.w	r1, [r2], #2
  for (int i = 0; i < pad_count; ++i) {
   b7b5c:	3301      	adds	r3, #1
    p->strides[i] = 1;
   b7b5e:	8111      	strh	r1, [r2, #8]
  for (int i = 0; i < pad_count; ++i) {
   b7b60:	e7f8      	b.n	b7b54 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4c>
    p->strides[i + pad_count] = p->strides[i];
   b7b62:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
   b7b66:	8290      	strh	r0, [r2, #20]
    p->start_indices[i + pad_count] = p->start_indices[i];
   b7b68:	f933 0902 	ldrsh.w	r0, [r3], #-2
   b7b6c:	f822 0902 	strh.w	r0, [r2], #-2
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   b7b70:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
   b7b74:	8190      	strh	r0, [r2, #12]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   b7b76:	3901      	subs	r1, #1
   b7b78:	e7df      	b.n	b7b3a <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x32>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   b7b7a:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   b7b7e:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
  p->shrink_axis_mask <<= pad_count;
   b7b82:	40b3      	lsls	r3, r6
   b7b84:	84e3      	strh	r3, [r4, #38]	; 0x26
  p->ellipsis_mask <<= pad_count;
   b7b86:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
   b7b8a:	40b3      	lsls	r3, r6
   b7b8c:	8423      	strh	r3, [r4, #32]
  p->new_axis_mask <<= pad_count;
   b7b8e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
   b7b92:	40b3      	lsls	r3, r6
   b7b94:	84a3      	strh	r3, [r4, #36]	; 0x24
  p->end_mask <<= pad_count;
   b7b96:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
   b7b9a:	fa03 f206 	lsl.w	r2, r3, r6
  p->begin_mask |= (1 << pad_count) - 1;
   b7b9e:	2301      	movs	r3, #1
   b7ba0:	40b3      	lsls	r3, r6
   b7ba2:	3b01      	subs	r3, #1
   b7ba4:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   b7ba6:	fa01 f606 	lsl.w	r6, r1, r6
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   b7baa:	b26d      	sxtb	r5, r5
  p->begin_mask |= (1 << pad_count) - 1;
   b7bac:	431e      	orrs	r6, r3
  p->end_mask |= (1 << pad_count) - 1;
   b7bae:	4313      	orrs	r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   b7bb0:	83e6      	strh	r6, [r4, #30]
  p->end_mask |= (1 << pad_count) - 1;
   b7bb2:	8463      	strh	r3, [r4, #34]	; 0x22
  p->start_indices_count = dim_count;
   b7bb4:	7025      	strb	r5, [r4, #0]
  p->stop_indices_count = dim_count;
   b7bb6:	72a5      	strb	r5, [r4, #10]
  p->strides_count = dim_count;
   b7bb8:	7525      	strb	r5, [r4, #20]
}
   b7bba:	bd70      	pop	{r4, r5, r6, pc}

000b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   b7bbc:	b510      	push	{r4, lr}
   b7bbe:	4603      	mov	r3, r0
   b7bc0:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  // Begin with the specified index.
  int start = start_indices[axis];
   b7bc2:	eb03 0142 	add.w	r1, r3, r2, lsl #1

  // begin_mask override
  if (begin_mask & 1 << axis) {
   b7bc6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
  int start = start_indices[axis];
   b7bca:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  if (begin_mask & 1 << axis) {
   b7bce:	4113      	asrs	r3, r2
   b7bd0:	07db      	lsls	r3, r3, #31
   b7bd2:	d507      	bpl.n	b7be4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x28>
    if (strides[axis] > 0) {
   b7bd4:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   b7bd8:	2b00      	cmp	r3, #0
   b7bda:	bfcc      	ite	gt
   b7bdc:	f04f 4400 	movgt.w	r4, #2147483648	; 0x80000000
   b7be0:	f06f 4400 	mvnle.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  int axis_size = input_shape.Dims(axis);
   b7be4:	4611      	mov	r1, r2
   b7be6:	f7fe fbb7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (start < 0) {
   b7bea:	2c00      	cmp	r4, #0
    start += axis_size;
   b7bec:	bfb8      	it	lt
   b7bee:	1824      	addlt	r4, r4, r0
  TFLITE_DCHECK(!(hi < lo));
   b7bf0:	3801      	subs	r0, #1
   b7bf2:	d501      	bpl.n	b7bf8 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3c>
   b7bf4:	f00c fe02 	bl	c47fc <abort>
  if (hi < v) return hi;
   b7bf8:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   b7bfa:	bfa8      	it	ge
   b7bfc:	ea24 70e4 	bicge.w	r0, r4, r4, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   b7c00:	bd10      	pop	{r4, pc}

000b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   b7c02:	b570      	push	{r4, r5, r6, lr}
   b7c04:	4605      	mov	r5, r0
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
   b7c06:	f105 0616 	add.w	r6, r5, #22

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
  int stop = stop_indices[axis];
   b7c0a:	eb05 0442 	add.w	r4, r5, r2, lsl #1
                       int start_for_axis) {
   b7c0e:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
   b7c10:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   b7c14:	f9b5 5026 	ldrsh.w	r5, [r5, #38]	; 0x26
  int stop = stop_indices[axis];
   b7c18:	f9b4 400c 	ldrsh.w	r4, [r4, #12]
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   b7c1c:	4115      	asrs	r5, r2

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   b7c1e:	07ed      	lsls	r5, r5, #31
    stop = start_for_axis + 1;
   b7c20:	bf48      	it	mi
   b7c22:	1c5c      	addmi	r4, r3, #1
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   b7c24:	fa41 f302 	asr.w	r3, r1, r2
   b7c28:	07d9      	lsls	r1, r3, #31
    if (strides[axis] > 0) {
   b7c2a:	f936 5012 	ldrsh.w	r5, [r6, r2, lsl #1]
  if (end_mask & (1 << axis)) {
   b7c2e:	d505      	bpl.n	b7c3c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3a>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
   b7c30:	2d00      	cmp	r5, #0
   b7c32:	bfd4      	ite	le
   b7c34:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
   b7c38:	f06f 4400 	mvngt.w	r4, #2147483648	; 0x80000000
      stop = std::numeric_limits<int>::lowest();
    }
  }

  // Handle negative indices
  const int axis_size = input_shape.Dims(axis);
   b7c3c:	4611      	mov	r1, r2
   b7c3e:	f7fe fb8b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (stop < 0) {
   b7c42:	2c00      	cmp	r4, #0
    stop += axis_size;
   b7c44:	bfb8      	it	lt
   b7c46:	1824      	addlt	r4, r4, r0
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   b7c48:	2d00      	cmp	r5, #0
   b7c4a:	dd08      	ble.n	b7c5e <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  TFLITE_DCHECK(!(hi < lo));
   b7c4c:	2800      	cmp	r0, #0
   b7c4e:	da01      	bge.n	b7c54 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x52>
   b7c50:	f00c fdd4 	bl	c47fc <abort>
  if (hi < v) return hi;
   b7c54:	4284      	cmp	r4, r0
   b7c56:	dc01      	bgt.n	b7c5c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
  if (v < lo) return lo;
   b7c58:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   b7c5c:	bd70      	pop	{r4, r5, r6, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   b7c5e:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   b7c60:	1c43      	adds	r3, r0, #1
   b7c62:	dbf5      	blt.n	b7c50 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4e>
  if (hi < v) return hi;
   b7c64:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   b7c66:	bfa8      	it	ge
   b7c68:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
  return stop;
   b7c6c:	e7f6      	b.n	b7c5c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>

000b7c6e <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
constexpr int kEndTensor = 2;
constexpr int kStridesTensor = 3;
constexpr int kOutputTensor = 0;

struct StridedSliceContext {
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   b7c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c70:	6816      	ldr	r6, [r2, #0]
   b7c72:	6889      	ldr	r1, [r1, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   b7c74:	6954      	ldr	r4, [r2, #20]
   b7c76:	68b7      	ldr	r7, [r6, #8]
   b7c78:	6875      	ldr	r5, [r6, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7c7a:	6852      	ldr	r2, [r2, #4]
   b7c7c:	6004      	str	r4, [r0, #0]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b7c7e:	2438      	movs	r4, #56	; 0x38
   b7c80:	fb04 1707 	mla	r7, r4, r7, r1
   b7c84:	fb04 1505 	mla	r5, r4, r5, r1
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7c88:	6852      	ldr	r2, [r2, #4]
    input = GetInput(context, node, kInputTensor);
    begin = GetInput(context, node, kBeginTensor);
   b7c8a:	6087      	str	r7, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b7c8c:	68f7      	ldr	r7, [r6, #12]
   b7c8e:	6936      	ldr	r6, [r6, #16]
    input = GetInput(context, node, kInputTensor);
   b7c90:	6045      	str	r5, [r0, #4]
   b7c92:	fb04 1707 	mla	r7, r4, r7, r1
   b7c96:	fb04 1606 	mla	r6, r4, r6, r1
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7c9a:	fb04 1102 	mla	r1, r4, r2, r1
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   b7c9e:	68aa      	ldr	r2, [r5, #8]
    end = GetInput(context, node, kEndTensor);
   b7ca0:	60c7      	str	r7, [r0, #12]
    strides = GetInput(context, node, kStridesTensor);
    output = GetOutput(context, node, kOutputTensor);
    dims = NumDimensions(input);
   b7ca2:	6812      	ldr	r2, [r2, #0]
    strides = GetInput(context, node, kStridesTensor);
   b7ca4:	6106      	str	r6, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   b7ca6:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   b7ca8:	6182      	str	r2, [r0, #24]
  }
   b7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7cac <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
// This Op only supports 1-4D cases and since we use the reference 4D
// implementation, the 1-3D tensors are mapped to 4D.
const int kMaxDim = 4;

tflite::StridedSliceParams BuildStridedSliceParams(
    StridedSliceContext* op_context) {
   b7cac:	b570      	push	{r4, r5, r6, lr}
  tflite::StridedSliceParams op_params;
  op_params.start_indices_count = op_context->dims;
   b7cae:	698e      	ldr	r6, [r1, #24]
   b7cb0:	b273      	sxtb	r3, r6
   b7cb2:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   b7cb4:	7283      	strb	r3, [r0, #10]
  op_params.strides_count = op_context->dims;
   b7cb6:	7503      	strb	r3, [r0, #20]

  for (int i = 0; i < op_context->dims; ++i) {
   b7cb8:	2200      	movs	r2, #0
   b7cba:	4603      	mov	r3, r0
   b7cbc:	4296      	cmp	r6, r2
   b7cbe:	dd13      	ble.n	b7ce8 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3c>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   b7cc0:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7cc2:	b104      	cbz	r4, b7cc6 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1a>
   b7cc4:	6864      	ldr	r4, [r4, #4]
   b7cc6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   b7cca:	805c      	strh	r4, [r3, #2]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   b7ccc:	68cc      	ldr	r4, [r1, #12]
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   b7cce:	0095      	lsls	r5, r2, #2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7cd0:	b104      	cbz	r4, b7cd4 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x28>
   b7cd2:	6864      	ldr	r4, [r4, #4]
   b7cd4:	5964      	ldr	r4, [r4, r5]
   b7cd6:	819c      	strh	r4, [r3, #12]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   b7cd8:	690c      	ldr	r4, [r1, #16]
   b7cda:	b104      	cbz	r4, b7cde <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x32>
   b7cdc:	6864      	ldr	r4, [r4, #4]
   b7cde:	5964      	ldr	r4, [r4, r5]
   b7ce0:	82dc      	strh	r4, [r3, #22]
  for (int i = 0; i < op_context->dims; ++i) {
   b7ce2:	3201      	adds	r2, #1
   b7ce4:	3302      	adds	r3, #2
   b7ce6:	e7e9      	b.n	b7cbc <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x10>
  }

  op_params.begin_mask = op_context->params->begin_mask;
   b7ce8:	680b      	ldr	r3, [r1, #0]
   b7cea:	681a      	ldr	r2, [r3, #0]
  op_params.ellipsis_mask = 0;
  op_params.end_mask = op_context->params->end_mask;
   b7cec:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   b7cee:	83c2      	strh	r2, [r0, #30]
  op_params.new_axis_mask = 0;
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   b7cf0:	691b      	ldr	r3, [r3, #16]
  op_params.end_mask = op_context->params->end_mask;
   b7cf2:	8441      	strh	r1, [r0, #34]	; 0x22
  op_params.ellipsis_mask = 0;
   b7cf4:	2200      	movs	r2, #0
   b7cf6:	8402      	strh	r2, [r0, #32]
  op_params.new_axis_mask = 0;
   b7cf8:	8482      	strh	r2, [r0, #36]	; 0x24
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   b7cfa:	84c3      	strh	r3, [r0, #38]	; 0x26
  return op_params;
}
   b7cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7d00 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
   b7d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d04:	460e      	mov	r6, r1
  using ::tflite::strided_slice::StartForAxis;
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
   b7d06:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
   b7d08:	b095      	sub	sp, #84	; 0x54
   b7d0a:	4604      	mov	r4, r0
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
   b7d0c:	a80a      	add	r0, sp, #40	; 0x28
  TfLiteIntArray* output_shape = op_context->output->dims;
   b7d0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
   b7d12:	f7ff ffcb 	bl	b7cac <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
   b7d16:	6871      	ldr	r1, [r6, #4]
   b7d18:	a805      	add	r0, sp, #20
   b7d1a:	f7fe fdb6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7d1e:	2500      	movs	r5, #0
   b7d20:	f8d6 9018 	ldr.w	r9, [r6, #24]
  int shape_size = 0;
   b7d24:	462f      	mov	r7, r5
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7d26:	45a9      	cmp	r9, r5
   b7d28:	dd4d      	ble.n	b7dc6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
   b7d2a:	6933      	ldr	r3, [r6, #16]
   b7d2c:	b103      	cbz	r3, b7d30 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
   b7d2e:	685b      	ldr	r3, [r3, #4]
   b7d30:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
   b7d34:	f1bb 0f00 	cmp.w	fp, #0
   b7d38:	d10b      	bne.n	b7d52 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
   b7d3a:	6963      	ldr	r3, [r4, #20]
   b7d3c:	4929      	ldr	r1, [pc, #164]	; (b7de4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
   b7d3e:	4620      	mov	r0, r4
   b7d40:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7d42:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
   b7d44:	a805      	add	r0, sp, #20
   b7d46:	f7fe fafc 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
   b7d4a:	4620      	mov	r0, r4
   b7d4c:	b015      	add	sp, #84	; 0x54
   b7d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   b7d52:	462a      	mov	r2, r5
   b7d54:	a905      	add	r1, sp, #20
   b7d56:	a80a      	add	r0, sp, #40	; 0x28
   b7d58:	f7ff ff30 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   b7d5c:	462a      	mov	r2, r5
   b7d5e:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   b7d60:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   b7d62:	a905      	add	r1, sp, #20
   b7d64:	a80a      	add	r0, sp, #40	; 0x28
   b7d66:	f7ff ff4c 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
   b7d6a:	6833      	ldr	r3, [r6, #0]
   b7d6c:	691b      	ldr	r3, [r3, #16]
   b7d6e:	412b      	asrs	r3, r5
    if (shrink_axis) {
   b7d70:	07db      	lsls	r3, r3, #31
   b7d72:	d426      	bmi.n	b7dc2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   b7d74:	eba0 000a 	sub.w	r0, r0, sl
   b7d78:	ee07 0a90 	vmov	s15, r0
   b7d7c:	ee07 ba10 	vmov	s14, fp
   b7d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7d84:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
  { return __builtin_ceilf(__x); }
   b7d88:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7d8c:	f00d fa7a 	bl	c5284 <ceilf>
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   b7d90:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   b7d94:	6852      	ldr	r2, [r2, #4]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   b7d96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7d9a:	ee17 3a90 	vmov	r3, s15
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
   b7d9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   b7da2:	429a      	cmp	r2, r3
   b7da4:	d00c      	beq.n	b7dc0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
   b7da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7daa:	4b0f      	ldr	r3, [pc, #60]	; (b7de8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
   b7dac:	9301      	str	r3, [sp, #4]
   b7dae:	4b0f      	ldr	r3, [pc, #60]	; (b7dec <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
   b7db0:	9300      	str	r3, [sp, #0]
   b7db2:	6965      	ldr	r5, [r4, #20]
   b7db4:	2373      	movs	r3, #115	; 0x73
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7db6:	4a0e      	ldr	r2, [pc, #56]	; (b7df0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
   b7db8:	490e      	ldr	r1, [pc, #56]	; (b7df4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
   b7dba:	4620      	mov	r0, r4
   b7dbc:	47a8      	blx	r5
   b7dbe:	e7c0      	b.n	b7d42 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
   b7dc0:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7dc2:	3501      	adds	r5, #1
   b7dc4:	e7af      	b.n	b7d26 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7dc6:	f8d8 3000 	ldr.w	r3, [r8]
   b7dca:	42bb      	cmp	r3, r7
   b7dcc:	d008      	beq.n	b7de0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
   b7dce:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b7dd2:	4b09      	ldr	r3, [pc, #36]	; (b7df8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
   b7dd4:	9301      	str	r3, [sp, #4]
   b7dd6:	4b09      	ldr	r3, [pc, #36]	; (b7dfc <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
   b7dd8:	9300      	str	r3, [sp, #0]
   b7dda:	6965      	ldr	r5, [r4, #20]
   b7ddc:	2377      	movs	r3, #119	; 0x77
   b7dde:	e7ea      	b.n	b7db6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
   b7de0:	2400      	movs	r4, #0
   b7de2:	e7af      	b.n	b7d44 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
   b7de4:	000c81b7 	.word	0x000c81b7
   b7de8:	000c82c5 	.word	0x000c82c5
   b7dec:	000c82cf 	.word	0x000c82cf
   b7df0:	000c824e 	.word	0x000c824e
   b7df4:	000c6fd5 	.word	0x000c6fd5
   b7df8:	000c82ee 	.word	0x000c82ee
   b7dfc:	000c82f9 	.word	0x000c82f9

000b7e00 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b7e00:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b7e02:	680b      	ldr	r3, [r1, #0]
   b7e04:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   b7e06:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b7e08:	b08c      	sub	sp, #48	; 0x30
   b7e0a:	4605      	mov	r5, r0
   b7e0c:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   b7e0e:	d00e      	beq.n	b7e2e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   b7e10:	2204      	movs	r2, #4
   b7e12:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b7e16:	4b15      	ldr	r3, [pc, #84]	; (b7e6c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
   b7e18:	9301      	str	r3, [sp, #4]
   b7e1a:	4b15      	ldr	r3, [pc, #84]	; (b7e70 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   b7e1c:	9300      	str	r3, [sp, #0]
   b7e1e:	6944      	ldr	r4, [r0, #20]
   b7e20:	237c      	movs	r3, #124	; 0x7c
   b7e22:	4a14      	ldr	r2, [pc, #80]	; (b7e74 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   b7e24:	4914      	ldr	r1, [pc, #80]	; (b7e78 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   b7e26:	47a0      	blx	r4
   b7e28:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
   b7e2a:	b00c      	add	sp, #48	; 0x30
   b7e2c:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b7e2e:	684b      	ldr	r3, [r1, #4]
   b7e30:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b7e32:	2c01      	cmp	r4, #1
   b7e34:	d009      	beq.n	b7e4a <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   b7e36:	2601      	movs	r6, #1
   b7e38:	4b10      	ldr	r3, [pc, #64]	; (b7e7c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   b7e3a:	9301      	str	r3, [sp, #4]
   b7e3c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b7e40:	4b0f      	ldr	r3, [pc, #60]	; (b7e80 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   b7e42:	9300      	str	r3, [sp, #0]
   b7e44:	6944      	ldr	r4, [r0, #20]
   b7e46:	237d      	movs	r3, #125	; 0x7d
   b7e48:	e7eb      	b.n	b7e22 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
   b7e4a:	4601      	mov	r1, r0
   b7e4c:	a805      	add	r0, sp, #20
   b7e4e:	f7ff ff0e 	bl	b7c6e <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
   b7e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7e54:	2b04      	cmp	r3, #4
   b7e56:	dd04      	ble.n	b7e62 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   b7e58:	696b      	ldr	r3, [r5, #20]
   b7e5a:	490a      	ldr	r1, [pc, #40]	; (b7e84 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   b7e5c:	4628      	mov	r0, r5
   b7e5e:	4798      	blx	r3
   b7e60:	e7e2      	b.n	b7e28 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
   b7e62:	a905      	add	r1, sp, #20
   b7e64:	4628      	mov	r0, r5
   b7e66:	f7ff ff4b 	bl	b7d00 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
   b7e6a:	e7de      	b.n	b7e2a <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   b7e6c:	000c83c0 	.word	0x000c83c0
   b7e70:	000c830c 	.word	0x000c830c
   b7e74:	000c824e 	.word	0x000c824e
   b7e78:	000c6fd5 	.word	0x000c6fd5
   b7e7c:	000c8aca 	.word	0x000c8aca
   b7e80:	000c831c 	.word	0x000c831c
   b7e84:	000c832d 	.word	0x000c832d

000b7e88 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
TfLiteRegistration* Register_STRIDED_SLICE() {
  static TfLiteRegistration r = {
      nullptr, nullptr, strided_slice::Prepare,
      strided_slice::Eval<strided_slice::kReference>};
  return &r;
}
   b7e88:	4800      	ldr	r0, [pc, #0]	; (b7e8c <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x4>)
   b7e8a:	4770      	bx	lr
   b7e8c:	2003c118 	.word	0x2003c118

000b7e90 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b7e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e94:	b09f      	sub	sp, #124	; 0x7c
   b7e96:	460e      	mov	r6, r1
   b7e98:	9207      	str	r2, [sp, #28]
   b7e9a:	461d      	mov	r5, r3
                         const RuntimeShape& unextended_input_shape,
                         const T* input_data,
                         const RuntimeShape& unextended_output_shape,
                         T* output_data) {
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   b7e9c:	4604      	mov	r4, r0
   b7e9e:	aa14      	add	r2, sp, #80	; 0x50
   b7ea0:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b7ea4:	6820      	ldr	r0, [r4, #0]
   b7ea6:	6861      	ldr	r1, [r4, #4]
   b7ea8:	4613      	mov	r3, r2
   b7eaa:	c303      	stmia	r3!, {r0, r1}
   b7eac:	3408      	adds	r4, #8
   b7eae:	42bc      	cmp	r4, r7
   b7eb0:	461a      	mov	r2, r3
   b7eb2:	d1f7      	bne.n	b7ea4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b7eb4:	6833      	ldr	r3, [r6, #0]
   b7eb6:	2b04      	cmp	r3, #4
   b7eb8:	dd01      	ble.n	b7ebe <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b7eba:	f00c fc9f 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b7ebe:	682b      	ldr	r3, [r5, #0]
   b7ec0:	2b04      	cmp	r3, #4
   b7ec2:	dcfa      	bgt.n	b7eba <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
    return RuntimeShape(new_shape_size, shape, 1);
   b7ec4:	4632      	mov	r2, r6
   b7ec6:	2301      	movs	r3, #1
   b7ec8:	2104      	movs	r1, #4
   b7eca:	a80a      	add	r0, sp, #40	; 0x28
   b7ecc:	f7fe fa7e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b7ed0:	2301      	movs	r3, #1
   b7ed2:	462a      	mov	r2, r5
   b7ed4:	2104      	movs	r1, #4
   b7ed6:	a80f      	add	r0, sp, #60	; 0x3c
   b7ed8:	f7fe fa78 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  // Reverse and pad to 4 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 4D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b7edc:	2104      	movs	r1, #4
   b7ede:	a814      	add	r0, sp, #80	; 0x50
   b7ee0:	f7ff fe12 	bl	b7b08 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b7ee4:	2200      	movs	r2, #0
   b7ee6:	a90a      	add	r1, sp, #40	; 0x28
   b7ee8:	a814      	add	r0, sp, #80	; 0x50
   b7eea:	f7ff fe67 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_b =
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7eee:	2200      	movs	r2, #0
   b7ef0:	4603      	mov	r3, r0
   b7ef2:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b7ef4:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7ef6:	a814      	add	r0, sp, #80	; 0x50
   b7ef8:	f7ff fe83 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7efc:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7efe:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7f00:	a90a      	add	r1, sp, #40	; 0x28
   b7f02:	a814      	add	r0, sp, #80	; 0x50
   b7f04:	f7ff fe5a 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_h =
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f08:	2201      	movs	r2, #1
   b7f0a:	4603      	mov	r3, r0
   b7f0c:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7f0e:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f10:	a814      	add	r0, sp, #80	; 0x50
   b7f12:	f7ff fe76 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7f16:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f18:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7f1a:	a90a      	add	r1, sp, #40	; 0x28
   b7f1c:	a814      	add	r0, sp, #80	; 0x50
   b7f1e:	f7ff fe4d 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_w =
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7f22:	2202      	movs	r2, #2
   b7f24:	4603      	mov	r3, r0
   b7f26:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7f28:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7f2a:	a814      	add	r0, sp, #80	; 0x50
   b7f2c:	f7ff fe69 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7f30:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7f32:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7f34:	a90a      	add	r1, sp, #40	; 0x28
   b7f36:	a814      	add	r0, sp, #80	; 0x50
   b7f38:	f7ff fe40 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_d =
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7f3c:	2203      	movs	r2, #3
   b7f3e:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7f40:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7f42:	a90a      	add	r1, sp, #40	; 0x28
   b7f44:	a814      	add	r0, sp, #80	; 0x50
   b7f46:	f7ff fe5c 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int in_b = start_b;
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b7f4a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b7f4e:	9302      	str	r3, [sp, #8]
       in_b += params_copy.strides[0]) {
    for (int in_h = start_h;
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
         in_h += params_copy.strides[1]) {
      for (int in_w = start_w;
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b7f50:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b7f54:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
           in_w += params_copy.strides[2]) {
        for (int in_d = start_d; !strided_slice::LoopCondition(
                 in_d, stop_d, params_copy.strides[3]);
   b7f58:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b7f5c:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7f5e:	4681      	mov	r9, r0

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   b7f60:	9b02      	ldr	r3, [sp, #8]
   b7f62:	2b00      	cmp	r3, #0
   b7f64:	9b04      	ldr	r3, [sp, #16]
   b7f66:	dd07      	ble.n	b7f78 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b7f68:	429c      	cmp	r4, r3
   b7f6a:	bfb4      	ite	lt
   b7f6c:	2300      	movlt	r3, #0
   b7f6e:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b7f70:	2b00      	cmp	r3, #0
   b7f72:	d14c      	bne.n	b800e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17e>
   b7f74:	4632      	mov	r2, r6
   b7f76:	e03c      	b.n	b7ff2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x162>
   b7f78:	429c      	cmp	r4, r3
   b7f7a:	bfcc      	ite	gt
   b7f7c:	2300      	movgt	r3, #0
   b7f7e:	2301      	movle	r3, #1
   b7f80:	e7f6      	b.n	b7f70 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b7f82:	429a      	cmp	r2, r3
   b7f84:	bfcc      	ite	gt
   b7f86:	2300      	movgt	r3, #0
   b7f88:	2301      	movle	r3, #1
   b7f8a:	e03a      	b.n	b8002 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x172>
   b7f8c:	428b      	cmp	r3, r1
   b7f8e:	bfcc      	ite	gt
   b7f90:	2100      	movgt	r1, #0
   b7f92:	2101      	movle	r1, #1
   b7f94:	e028      	b.n	b7fe8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x158>
   b7f96:	454d      	cmp	r5, r9
   b7f98:	bfcc      	ite	gt
   b7f9a:	2100      	movgt	r1, #0
   b7f9c:	2101      	movle	r1, #1
   b7f9e:	e018      	b.n	b7fd2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x142>
             in_d += params_copy.strides[3]) {
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b7fa0:	9500      	str	r5, [sp, #0]
   b7fa2:	4621      	mov	r1, r4
   b7fa4:	a80a      	add	r0, sp, #40	; 0x28
   b7fa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7faa:	f7fe fa3c 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b7fae:	9b07      	ldr	r3, [sp, #28]
   b7fb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7fb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b7fb6:	6801      	ldr	r1, [r0, #0]
   b7fb8:	f843 1b04 	str.w	r1, [r3], #4
   b7fbc:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b7fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b7fc2:	445d      	add	r5, fp
   b7fc4:	f1bb 0f00 	cmp.w	fp, #0
   b7fc8:	dde5      	ble.n	b7f96 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b7fca:	454d      	cmp	r5, r9
   b7fcc:	bfb4      	ite	lt
   b7fce:	2100      	movlt	r1, #0
   b7fd0:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b7fd2:	2900      	cmp	r1, #0
   b7fd4:	d0e4      	beq.n	b7fa0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b7fd6:	4453      	add	r3, sl
   b7fd8:	f1ba 0f00 	cmp.w	sl, #0
   b7fdc:	9906      	ldr	r1, [sp, #24]
   b7fde:	ddd5      	ble.n	b7f8c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b7fe0:	428b      	cmp	r3, r1
   b7fe2:	bfb4      	ite	lt
   b7fe4:	2100      	movlt	r1, #0
   b7fe6:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b7fe8:	b909      	cbnz	r1, b7fee <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b7fea:	4645      	mov	r5, r8
   b7fec:	e7ea      	b.n	b7fc4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
         in_h += params_copy.strides[1]) {
   b7fee:	9b03      	ldr	r3, [sp, #12]
   b7ff0:	441a      	add	r2, r3
   b7ff2:	9b03      	ldr	r3, [sp, #12]
   b7ff4:	2b00      	cmp	r3, #0
   b7ff6:	9b05      	ldr	r3, [sp, #20]
   b7ff8:	ddc3      	ble.n	b7f82 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b7ffa:	429a      	cmp	r2, r3
   b7ffc:	bfb4      	ite	lt
   b7ffe:	2300      	movlt	r3, #0
   b8000:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b8002:	b90b      	cbnz	r3, b8008 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x178>
   b8004:	463b      	mov	r3, r7
   b8006:	e7e7      	b.n	b7fd8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x148>
       in_b += params_copy.strides[0]) {
   b8008:	9b02      	ldr	r3, [sp, #8]
   b800a:	441c      	add	r4, r3
  for (int in_b = start_b;
   b800c:	e7a8      	b.n	b7f60 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b800e:	a80f      	add	r0, sp, #60	; 0x3c
   b8010:	f7fe f997 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b8014:	a80a      	add	r0, sp, #40	; 0x28
   b8016:	f7fe f994 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   b801a:	b01f      	add	sp, #124	; 0x7c
   b801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8020 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b8020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8024:	b09f      	sub	sp, #124	; 0x7c
   b8026:	460e      	mov	r6, r1
   b8028:	9207      	str	r2, [sp, #28]
   b802a:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   b802c:	4604      	mov	r4, r0
   b802e:	aa14      	add	r2, sp, #80	; 0x50
   b8030:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b8034:	6820      	ldr	r0, [r4, #0]
   b8036:	6861      	ldr	r1, [r4, #4]
   b8038:	4613      	mov	r3, r2
   b803a:	c303      	stmia	r3!, {r0, r1}
   b803c:	3408      	adds	r4, #8
   b803e:	42bc      	cmp	r4, r7
   b8040:	461a      	mov	r2, r3
   b8042:	d1f7      	bne.n	b8034 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b8044:	6833      	ldr	r3, [r6, #0]
   b8046:	2b04      	cmp	r3, #4
   b8048:	dd01      	ble.n	b804e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b804a:	f00c fbd7 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b804e:	682b      	ldr	r3, [r5, #0]
   b8050:	2b04      	cmp	r3, #4
   b8052:	dcfa      	bgt.n	b804a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
   b8054:	4632      	mov	r2, r6
   b8056:	2301      	movs	r3, #1
   b8058:	2104      	movs	r1, #4
   b805a:	a80a      	add	r0, sp, #40	; 0x28
   b805c:	f7fe f9b6 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b8060:	2301      	movs	r3, #1
   b8062:	462a      	mov	r2, r5
   b8064:	2104      	movs	r1, #4
   b8066:	a80f      	add	r0, sp, #60	; 0x3c
   b8068:	f7fe f9b0 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b806c:	2104      	movs	r1, #4
   b806e:	a814      	add	r0, sp, #80	; 0x50
   b8070:	f7ff fd4a 	bl	b7b08 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8074:	2200      	movs	r2, #0
   b8076:	a90a      	add	r1, sp, #40	; 0x28
   b8078:	a814      	add	r0, sp, #80	; 0x50
   b807a:	f7ff fd9f 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b807e:	2200      	movs	r2, #0
   b8080:	4603      	mov	r3, r0
   b8082:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8084:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b8086:	a814      	add	r0, sp, #80	; 0x50
   b8088:	f7ff fdbb 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b808c:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b808e:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b8090:	a90a      	add	r1, sp, #40	; 0x28
   b8092:	a814      	add	r0, sp, #80	; 0x50
   b8094:	f7ff fd92 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8098:	2201      	movs	r2, #1
   b809a:	4603      	mov	r3, r0
   b809c:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b809e:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b80a0:	a814      	add	r0, sp, #80	; 0x50
   b80a2:	f7ff fdae 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b80a6:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b80a8:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b80aa:	a90a      	add	r1, sp, #40	; 0x28
   b80ac:	a814      	add	r0, sp, #80	; 0x50
   b80ae:	f7ff fd85 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b80b2:	2202      	movs	r2, #2
   b80b4:	4603      	mov	r3, r0
   b80b6:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b80b8:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b80ba:	a814      	add	r0, sp, #80	; 0x50
   b80bc:	f7ff fda1 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b80c0:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b80c2:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b80c4:	a90a      	add	r1, sp, #40	; 0x28
   b80c6:	a814      	add	r0, sp, #80	; 0x50
   b80c8:	f7ff fd78 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b80cc:	2203      	movs	r2, #3
   b80ce:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b80d0:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b80d2:	a90a      	add	r1, sp, #40	; 0x28
   b80d4:	a814      	add	r0, sp, #80	; 0x50
   b80d6:	f7ff fd94 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b80da:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b80de:	9302      	str	r3, [sp, #8]
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b80e0:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b80e4:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
                 in_d, stop_d, params_copy.strides[3]);
   b80e8:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b80ec:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b80ee:	4681      	mov	r9, r0
   b80f0:	9b02      	ldr	r3, [sp, #8]
   b80f2:	2b00      	cmp	r3, #0
   b80f4:	9b04      	ldr	r3, [sp, #16]
   b80f6:	dd07      	ble.n	b8108 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b80f8:	429c      	cmp	r4, r3
   b80fa:	bfb4      	ite	lt
   b80fc:	2300      	movlt	r3, #0
   b80fe:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b8100:	2b00      	cmp	r3, #0
   b8102:	d14a      	bne.n	b819a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17a>
   b8104:	4632      	mov	r2, r6
   b8106:	e03a      	b.n	b817e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
   b8108:	429c      	cmp	r4, r3
   b810a:	bfcc      	ite	gt
   b810c:	2300      	movgt	r3, #0
   b810e:	2301      	movle	r3, #1
   b8110:	e7f6      	b.n	b8100 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b8112:	429a      	cmp	r2, r3
   b8114:	bfcc      	ite	gt
   b8116:	2300      	movgt	r3, #0
   b8118:	2301      	movle	r3, #1
   b811a:	e038      	b.n	b818e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x16e>
   b811c:	428b      	cmp	r3, r1
   b811e:	bfcc      	ite	gt
   b8120:	2100      	movgt	r1, #0
   b8122:	2101      	movle	r1, #1
   b8124:	e026      	b.n	b8174 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x154>
   b8126:	454d      	cmp	r5, r9
   b8128:	bfcc      	ite	gt
   b812a:	2100      	movgt	r1, #0
   b812c:	2101      	movle	r1, #1
   b812e:	e016      	b.n	b815e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b8130:	9500      	str	r5, [sp, #0]
   b8132:	4621      	mov	r1, r4
   b8134:	a80a      	add	r0, sp, #40	; 0x28
   b8136:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b813a:	f7fe f974 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b813e:	9b07      	ldr	r3, [sp, #28]
   b8140:	5c19      	ldrb	r1, [r3, r0]
   b8142:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b8144:	f803 1b01 	strb.w	r1, [r3], #1
   b8148:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b814a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b814e:	445d      	add	r5, fp
   b8150:	f1bb 0f00 	cmp.w	fp, #0
   b8154:	dde7      	ble.n	b8126 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b8156:	454d      	cmp	r5, r9
   b8158:	bfb4      	ite	lt
   b815a:	2100      	movlt	r1, #0
   b815c:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b815e:	2900      	cmp	r1, #0
   b8160:	d0e6      	beq.n	b8130 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b8162:	4453      	add	r3, sl
   b8164:	f1ba 0f00 	cmp.w	sl, #0
   b8168:	9906      	ldr	r1, [sp, #24]
   b816a:	ddd7      	ble.n	b811c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b816c:	428b      	cmp	r3, r1
   b816e:	bfb4      	ite	lt
   b8170:	2100      	movlt	r1, #0
   b8172:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b8174:	b909      	cbnz	r1, b817a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15a>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b8176:	4645      	mov	r5, r8
   b8178:	e7ea      	b.n	b8150 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
         in_h += params_copy.strides[1]) {
   b817a:	9b03      	ldr	r3, [sp, #12]
   b817c:	441a      	add	r2, r3
   b817e:	9b03      	ldr	r3, [sp, #12]
   b8180:	2b00      	cmp	r3, #0
   b8182:	9b05      	ldr	r3, [sp, #20]
   b8184:	ddc5      	ble.n	b8112 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b8186:	429a      	cmp	r2, r3
   b8188:	bfb4      	ite	lt
   b818a:	2300      	movlt	r3, #0
   b818c:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b818e:	b90b      	cbnz	r3, b8194 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x174>
   b8190:	463b      	mov	r3, r7
   b8192:	e7e7      	b.n	b8164 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x144>
       in_b += params_copy.strides[0]) {
   b8194:	9b02      	ldr	r3, [sp, #8]
   b8196:	441c      	add	r4, r3
  for (int in_b = start_b;
   b8198:	e7aa      	b.n	b80f0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b819a:	a80f      	add	r0, sp, #60	; 0x3c
   b819c:	f7fe f8d1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b81a0:	a80a      	add	r0, sp, #40	; 0x28
   b81a2:	f7fe f8ce 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b81a6:	b01f      	add	sp, #124	; 0x7c
   b81a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b81ac <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b81ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81b0:	b09f      	sub	sp, #124	; 0x7c
   b81b2:	460e      	mov	r6, r1
   b81b4:	9207      	str	r2, [sp, #28]
   b81b6:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   b81b8:	4604      	mov	r4, r0
   b81ba:	aa14      	add	r2, sp, #80	; 0x50
   b81bc:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b81c0:	6820      	ldr	r0, [r4, #0]
   b81c2:	6861      	ldr	r1, [r4, #4]
   b81c4:	4613      	mov	r3, r2
   b81c6:	c303      	stmia	r3!, {r0, r1}
   b81c8:	3408      	adds	r4, #8
   b81ca:	42bc      	cmp	r4, r7
   b81cc:	461a      	mov	r2, r3
   b81ce:	d1f7      	bne.n	b81c0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b81d0:	6833      	ldr	r3, [r6, #0]
   b81d2:	2b04      	cmp	r3, #4
   b81d4:	dd01      	ble.n	b81da <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b81d6:	f00c fb11 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b81da:	682b      	ldr	r3, [r5, #0]
   b81dc:	2b04      	cmp	r3, #4
   b81de:	dcfa      	bgt.n	b81d6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
   b81e0:	4632      	mov	r2, r6
   b81e2:	2301      	movs	r3, #1
   b81e4:	2104      	movs	r1, #4
   b81e6:	a80a      	add	r0, sp, #40	; 0x28
   b81e8:	f7fe f8f0 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b81ec:	2301      	movs	r3, #1
   b81ee:	462a      	mov	r2, r5
   b81f0:	2104      	movs	r1, #4
   b81f2:	a80f      	add	r0, sp, #60	; 0x3c
   b81f4:	f7fe f8ea 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b81f8:	2104      	movs	r1, #4
   b81fa:	a814      	add	r0, sp, #80	; 0x50
   b81fc:	f7ff fc84 	bl	b7b08 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8200:	2200      	movs	r2, #0
   b8202:	a90a      	add	r1, sp, #40	; 0x28
   b8204:	a814      	add	r0, sp, #80	; 0x50
   b8206:	f7ff fcd9 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b820a:	2200      	movs	r2, #0
   b820c:	4603      	mov	r3, r0
   b820e:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8210:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b8212:	a814      	add	r0, sp, #80	; 0x50
   b8214:	f7ff fcf5 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b8218:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b821a:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b821c:	a90a      	add	r1, sp, #40	; 0x28
   b821e:	a814      	add	r0, sp, #80	; 0x50
   b8220:	f7ff fccc 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8224:	2201      	movs	r2, #1
   b8226:	4603      	mov	r3, r0
   b8228:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b822a:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b822c:	a814      	add	r0, sp, #80	; 0x50
   b822e:	f7ff fce8 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b8232:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8234:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b8236:	a90a      	add	r1, sp, #40	; 0x28
   b8238:	a814      	add	r0, sp, #80	; 0x50
   b823a:	f7ff fcbf 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b823e:	2202      	movs	r2, #2
   b8240:	4603      	mov	r3, r0
   b8242:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b8244:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b8246:	a814      	add	r0, sp, #80	; 0x50
   b8248:	f7ff fcdb 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b824c:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b824e:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b8250:	a90a      	add	r1, sp, #40	; 0x28
   b8252:	a814      	add	r0, sp, #80	; 0x50
   b8254:	f7ff fcb2 	bl	b7bbc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b8258:	2203      	movs	r2, #3
   b825a:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b825c:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b825e:	a90a      	add	r1, sp, #40	; 0x28
   b8260:	a814      	add	r0, sp, #80	; 0x50
   b8262:	f7ff fcce 	bl	b7c02 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b8266:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b826a:	9302      	str	r3, [sp, #8]
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b826c:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b8270:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
                 in_d, stop_d, params_copy.strides[3]);
   b8274:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b8278:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b827a:	4681      	mov	r9, r0
   b827c:	9b02      	ldr	r3, [sp, #8]
   b827e:	2b00      	cmp	r3, #0
   b8280:	9b04      	ldr	r3, [sp, #16]
   b8282:	dd07      	ble.n	b8294 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b8284:	429c      	cmp	r4, r3
   b8286:	bfb4      	ite	lt
   b8288:	2300      	movlt	r3, #0
   b828a:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b828c:	2b00      	cmp	r3, #0
   b828e:	d14a      	bne.n	b8326 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17a>
   b8290:	4632      	mov	r2, r6
   b8292:	e03a      	b.n	b830a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
   b8294:	429c      	cmp	r4, r3
   b8296:	bfcc      	ite	gt
   b8298:	2300      	movgt	r3, #0
   b829a:	2301      	movle	r3, #1
   b829c:	e7f6      	b.n	b828c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b829e:	429a      	cmp	r2, r3
   b82a0:	bfcc      	ite	gt
   b82a2:	2300      	movgt	r3, #0
   b82a4:	2301      	movle	r3, #1
   b82a6:	e038      	b.n	b831a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x16e>
   b82a8:	428b      	cmp	r3, r1
   b82aa:	bfcc      	ite	gt
   b82ac:	2100      	movgt	r1, #0
   b82ae:	2101      	movle	r1, #1
   b82b0:	e026      	b.n	b8300 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x154>
   b82b2:	454d      	cmp	r5, r9
   b82b4:	bfcc      	ite	gt
   b82b6:	2100      	movgt	r1, #0
   b82b8:	2101      	movle	r1, #1
   b82ba:	e016      	b.n	b82ea <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b82bc:	9500      	str	r5, [sp, #0]
   b82be:	4621      	mov	r1, r4
   b82c0:	a80a      	add	r0, sp, #40	; 0x28
   b82c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b82c6:	f7fe f8ae 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b82ca:	9b07      	ldr	r3, [sp, #28]
   b82cc:	5619      	ldrsb	r1, [r3, r0]
   b82ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b82d0:	f803 1b01 	strb.w	r1, [r3], #1
   b82d4:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b82d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b82da:	445d      	add	r5, fp
   b82dc:	f1bb 0f00 	cmp.w	fp, #0
   b82e0:	dde7      	ble.n	b82b2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b82e2:	454d      	cmp	r5, r9
   b82e4:	bfb4      	ite	lt
   b82e6:	2100      	movlt	r1, #0
   b82e8:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b82ea:	2900      	cmp	r1, #0
   b82ec:	d0e6      	beq.n	b82bc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b82ee:	4453      	add	r3, sl
   b82f0:	f1ba 0f00 	cmp.w	sl, #0
   b82f4:	9906      	ldr	r1, [sp, #24]
   b82f6:	ddd7      	ble.n	b82a8 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b82f8:	428b      	cmp	r3, r1
   b82fa:	bfb4      	ite	lt
   b82fc:	2100      	movlt	r1, #0
   b82fe:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b8300:	b909      	cbnz	r1, b8306 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15a>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b8302:	4645      	mov	r5, r8
   b8304:	e7ea      	b.n	b82dc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
         in_h += params_copy.strides[1]) {
   b8306:	9b03      	ldr	r3, [sp, #12]
   b8308:	441a      	add	r2, r3
   b830a:	9b03      	ldr	r3, [sp, #12]
   b830c:	2b00      	cmp	r3, #0
   b830e:	9b05      	ldr	r3, [sp, #20]
   b8310:	ddc5      	ble.n	b829e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b8312:	429a      	cmp	r2, r3
   b8314:	bfb4      	ite	lt
   b8316:	2300      	movlt	r3, #0
   b8318:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b831a:	b90b      	cbnz	r3, b8320 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x174>
   b831c:	463b      	mov	r3, r7
   b831e:	e7e7      	b.n	b82f0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x144>
       in_b += params_copy.strides[0]) {
   b8320:	9b02      	ldr	r3, [sp, #8]
   b8322:	441c      	add	r4, r3
  for (int in_b = start_b;
   b8324:	e7aa      	b.n	b827c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b8326:	a80f      	add	r0, sp, #60	; 0x3c
   b8328:	f7fe f80b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b832c:	a80a      	add	r0, sp, #40	; 0x28
   b832e:	f7fe f808 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b8332:	b01f      	add	sp, #124	; 0x7c
   b8334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8338 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8338:	b510      	push	{r4, lr}
   b833a:	b09e      	sub	sp, #120	; 0x78
   b833c:	460a      	mov	r2, r1
   b833e:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
   b8340:	4601      	mov	r1, r0
   b8342:	a80d      	add	r0, sp, #52	; 0x34
   b8344:	f7ff fc93 	bl	b7c6e <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
   b8348:	a90d      	add	r1, sp, #52	; 0x34
   b834a:	a814      	add	r0, sp, #80	; 0x50
   b834c:	f7ff fcae 	bl	b7cac <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
   b8350:	990e      	ldr	r1, [sp, #56]	; 0x38
   b8352:	780a      	ldrb	r2, [r1, #0]
   b8354:	2a03      	cmp	r2, #3
   b8356:	d020      	beq.n	b839a <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
   b8358:	2a09      	cmp	r2, #9
   b835a:	d033      	beq.n	b83c4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   b835c:	2a01      	cmp	r2, #1
   b835e:	d146      	bne.n	b83ee <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb6>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
   b8360:	a803      	add	r0, sp, #12
   b8362:	f7fe fa92 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8366:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   b8368:	b104      	cbz	r4, b836c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
   b836a:	6864      	ldr	r4, [r4, #4]
   b836c:	9912      	ldr	r1, [sp, #72]	; 0x48
   b836e:	a808      	add	r0, sp, #32
   b8370:	f7fe fa8b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8374:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8376:	b103      	cbz	r3, b837a <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
   b8378:	685b      	ldr	r3, [r3, #4]
   b837a:	9300      	str	r3, [sp, #0]
   b837c:	4622      	mov	r2, r4
   b837e:	ab08      	add	r3, sp, #32
   b8380:	a903      	add	r1, sp, #12
   b8382:	a814      	add	r0, sp, #80	; 0x50
   b8384:	f7ff fd84 	bl	b7e90 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   b8388:	a808      	add	r0, sp, #32
   b838a:	f7fd ffda 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   b838e:	a803      	add	r0, sp, #12
   b8390:	f7fd ffd7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   b8394:	2000      	movs	r0, #0
}
   b8396:	b01e      	add	sp, #120	; 0x78
   b8398:	bd10      	pop	{r4, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   b839a:	a803      	add	r0, sp, #12
   b839c:	f7fe fa75 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b83a2:	b104      	cbz	r4, b83a6 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x6e>
   b83a4:	6864      	ldr	r4, [r4, #4]
   b83a6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b83a8:	a808      	add	r0, sp, #32
   b83aa:	f7fe fa6e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b83b0:	b103      	cbz	r3, b83b4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
   b83b2:	685b      	ldr	r3, [r3, #4]
   b83b4:	9300      	str	r3, [sp, #0]
   b83b6:	4622      	mov	r2, r4
   b83b8:	ab08      	add	r3, sp, #32
   b83ba:	a903      	add	r1, sp, #12
   b83bc:	a814      	add	r0, sp, #80	; 0x50
   b83be:	f7ff fe2f 	bl	b8020 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   b83c2:	e7e1      	b.n	b8388 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
   b83c4:	a803      	add	r0, sp, #12
   b83c6:	f7fe fa60 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b83cc:	b104      	cbz	r4, b83d0 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>
   b83ce:	6864      	ldr	r4, [r4, #4]
   b83d0:	9912      	ldr	r1, [sp, #72]	; 0x48
   b83d2:	a808      	add	r0, sp, #32
   b83d4:	f7fe fa59 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b83da:	b103      	cbz	r3, b83de <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa6>
   b83dc:	685b      	ldr	r3, [r3, #4]
   b83de:	9300      	str	r3, [sp, #0]
   b83e0:	4622      	mov	r2, r4
   b83e2:	ab08      	add	r3, sp, #32
   b83e4:	a903      	add	r1, sp, #12
   b83e6:	a814      	add	r0, sp, #80	; 0x50
   b83e8:	f7ff fee0 	bl	b81ac <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   b83ec:	e7cc      	b.n	b8388 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      context->ReportError(context,
   b83ee:	4620      	mov	r0, r4
   b83f0:	6963      	ldr	r3, [r4, #20]
   b83f2:	4902      	ldr	r1, [pc, #8]	; (b83fc <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
   b83f4:	4798      	blx	r3
      return kTfLiteError;
   b83f6:	2001      	movs	r0, #1
   b83f8:	e7cd      	b.n	b8396 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
   b83fa:	bf00      	nop
   b83fc:	000c83c2 	.word	0x000c83c2

000b8400 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8400:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b8402:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b8404:	683d      	ldr	r5, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8406:	2d01      	cmp	r5, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8408:	b085      	sub	sp, #20
   b840a:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b840c:	d00c      	beq.n	b8428 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   b840e:	2401      	movs	r4, #1
   b8410:	4b3b      	ldr	r3, [pc, #236]	; (b8500 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   b8412:	9301      	str	r3, [sp, #4]
   b8414:	e9cd 5402 	strd	r5, r4, [sp, #8]
   b8418:	4b3a      	ldr	r3, [pc, #232]	; (b8504 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   b841a:	9300      	str	r3, [sp, #0]
   b841c:	6945      	ldr	r5, [r0, #20]
   b841e:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   b8420:	4a39      	ldr	r2, [pc, #228]	; (b8508 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b8422:	493a      	ldr	r1, [pc, #232]	; (b850c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b8424:	47a8      	blx	r5
   b8426:	e00f      	b.n	b8448 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b8428:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b842a:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b842c:	2c01      	cmp	r4, #1
   b842e:	d00e      	beq.n	b844e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
   b8430:	4b33      	ldr	r3, [pc, #204]	; (b8500 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   b8432:	9301      	str	r3, [sp, #4]
   b8434:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b8438:	4b35      	ldr	r3, [pc, #212]	; (b8510 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   b843a:	9300      	str	r3, [sp, #0]
   b843c:	6944      	ldr	r4, [r0, #20]
   b843e:	2322      	movs	r3, #34	; 0x22
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   b8440:	4a31      	ldr	r2, [pc, #196]	; (b8508 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b8442:	4932      	ldr	r1, [pc, #200]	; (b850c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   b8444:	47a0      	blx	r4
   b8446:	462c      	mov	r4, r5
  }
  return kTfLiteOk;
}
   b8448:	4620      	mov	r0, r4
   b844a:	b005      	add	sp, #20
   b844c:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b844e:	6879      	ldr	r1, [r7, #4]
   b8450:	6882      	ldr	r2, [r0, #8]
   b8452:	2738      	movs	r7, #56	; 0x38
   b8454:	4379      	muls	r1, r7
   b8456:	eb02 0c01 	add.w	ip, r2, r1
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   b845a:	5c55      	ldrb	r5, [r2, r1]
   b845c:	2d01      	cmp	r5, #1
   b845e:	d008      	beq.n	b8472 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   b8460:	4b2c      	ldr	r3, [pc, #176]	; (b8514 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
   b8462:	9301      	str	r3, [sp, #4]
   b8464:	e9cd 5402 	strd	r5, r4, [sp, #8]
   b8468:	4b2b      	ldr	r3, [pc, #172]	; (b8518 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   b846a:	9300      	str	r3, [sp, #0]
   b846c:	6945      	ldr	r5, [r0, #20]
   b846e:	2323      	movs	r3, #35	; 0x23
   b8470:	e7d6      	b.n	b8420 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b8472:	685b      	ldr	r3, [r3, #4]
   b8474:	437b      	muls	r3, r7
   b8476:	18d1      	adds	r1, r2, r3
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   b8478:	5cd4      	ldrb	r4, [r2, r3]
   b847a:	2c01      	cmp	r4, #1
   b847c:	d008      	beq.n	b8490 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   b847e:	4b26      	ldr	r3, [pc, #152]	; (b8518 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b8486:	4b25      	ldr	r3, [pc, #148]	; (b851c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
   b8488:	9300      	str	r3, [sp, #0]
   b848a:	6944      	ldr	r4, [r0, #20]
   b848c:	2324      	movs	r3, #36	; 0x24
   b848e:	e7d7      	b.n	b8440 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   b8490:	698b      	ldr	r3, [r1, #24]
   b8492:	f8dc 2018 	ldr.w	r2, [ip, #24]
   b8496:	4293      	cmp	r3, r2
   b8498:	d008      	beq.n	b84ac <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
   b849a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b849e:	4b20      	ldr	r3, [pc, #128]	; (b8520 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	4b20      	ldr	r3, [pc, #128]	; (b8524 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   b84a4:	9300      	str	r3, [sp, #0]
   b84a6:	6945      	ldr	r5, [r0, #20]
   b84a8:	2325      	movs	r3, #37	; 0x25
   b84aa:	e7b9      	b.n	b8420 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   b84ac:	688f      	ldr	r7, [r1, #8]
   b84ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
   b84b2:	6839      	ldr	r1, [r7, #0]
   b84b4:	6813      	ldr	r3, [r2, #0]
   b84b6:	4299      	cmp	r1, r3
   b84b8:	d008      	beq.n	b84cc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   b84ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
   b84be:	4b1a      	ldr	r3, [pc, #104]	; (b8528 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	4b1a      	ldr	r3, [pc, #104]	; (b852c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   b84c4:	9300      	str	r3, [sp, #0]
   b84c6:	6945      	ldr	r5, [r0, #20]
   b84c8:	2326      	movs	r3, #38	; 0x26
   b84ca:	e7a9      	b.n	b8420 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
   b84cc:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b84ce:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   b84d0:	1e58      	subs	r0, r3, #1
   b84d2:	4281      	cmp	r1, r0
   b84d4:	dd12      	ble.n	b84fc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b84d6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   b84da:	3301      	adds	r3, #1
   b84dc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b84e0:	42a8      	cmp	r0, r5
   b84e2:	d0f5      	beq.n	b84d0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   b84e4:	4b12      	ldr	r3, [pc, #72]	; (b8530 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   b84e6:	9301      	str	r3, [sp, #4]
   b84e8:	4b12      	ldr	r3, [pc, #72]	; (b8534 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   b84ea:	9300      	str	r3, [sp, #0]
   b84ec:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b84f0:	4a05      	ldr	r2, [pc, #20]	; (b8508 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b84f2:	6975      	ldr	r5, [r6, #20]
   b84f4:	4905      	ldr	r1, [pc, #20]	; (b850c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   b84f6:	2328      	movs	r3, #40	; 0x28
   b84f8:	4630      	mov	r0, r6
   b84fa:	e793      	b.n	b8424 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   b84fc:	2400      	movs	r4, #0
   b84fe:	e7a3      	b.n	b8448 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   b8500:	000c8aca 	.word	0x000c8aca
   b8504:	000c830c 	.word	0x000c830c
   b8508:	000c83f6 	.word	0x000c83f6
   b850c:	000c6fd5 	.word	0x000c6fd5
   b8510:	000c831c 	.word	0x000c831c
   b8514:	000c8adb 	.word	0x000c8adb
   b8518:	000c706b 	.word	0x000c706b
   b851c:	000c8464 	.word	0x000c8464
   b8520:	000c8471 	.word	0x000c8471
   b8524:	000c847e 	.word	0x000c847e
   b8528:	000c848c 	.word	0x000c848c
   b852c:	000c849e 	.word	0x000c849e
   b8530:	000c84b1 	.word	0x000c84b1
   b8534:	000c84c6 	.word	0x000c84c6

000b8538 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b853c:	680b      	ldr	r3, [r1, #0]
   b853e:	6884      	ldr	r4, [r0, #8]
   b8540:	685d      	ldr	r5, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b8542:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b8544:	2338      	movs	r3, #56	; 0x38
   b8546:	fb03 4505 	mla	r5, r3, r5, r4
   b854a:	b08a      	sub	sp, #40	; 0x28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b854c:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   b854e:	4629      	mov	r1, r5
   b8550:	4668      	mov	r0, sp
   b8552:	fb03 4402 	mla	r4, r3, r2, r4
   b8556:	f7fe f998 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b855a:	b105      	cbz	r5, b855e <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x26>
   b855c:	686d      	ldr	r5, [r5, #4]
                      GetTensorShape(output), GetTensorData<float>(output));
   b855e:	4621      	mov	r1, r4
   b8560:	a805      	add	r0, sp, #20
   b8562:	f7fe f992 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8566:	b104      	cbz	r4, b856a <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   b8568:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   b856a:	9f00      	ldr	r7, [sp, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b856c:	9b05      	ldr	r3, [sp, #20]
   b856e:	429f      	cmp	r7, r3
   b8570:	d001      	beq.n	b8576 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   b8572:	f00c f943 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   b8576:	2600      	movs	r6, #0
   b8578:	42b7      	cmp	r7, r6
   b857a:	dd0c      	ble.n	b8596 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b857c:	4631      	mov	r1, r6
   b857e:	4668      	mov	r0, sp
   b8580:	f7fd feea 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8584:	4631      	mov	r1, r6
   b8586:	4680      	mov	r8, r0
   b8588:	a805      	add	r0, sp, #20
   b858a:	f7fd fee5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b858e:	4580      	cmp	r8, r0
   b8590:	d1ef      	bne.n	b8572 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  for (int i = 0; i < dims_count; ++i) {
   b8592:	3601      	adds	r6, #1
   b8594:	e7f0      	b.n	b8578 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8596:	2f04      	cmp	r7, #4
   b8598:	bfcc      	ite	gt
   b859a:	9a01      	ldrgt	r2, [sp, #4]
   b859c:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   b859e:	2300      	movs	r3, #0
    int buffer_size = 1;
   b85a0:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
   b85a4:	429f      	cmp	r7, r3
   b85a6:	dc0a      	bgt.n	b85be <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x86>

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   b85a8:	2600      	movs	r6, #0
   b85aa:	4546      	cmp	r6, r8
   b85ac:	da0d      	bge.n	b85ca <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x92>
   b85ae:	ecb5 0a01 	vldmia	r5!, {s0}
   b85b2:	f00c fe67 	bl	c5284 <ceilf>
   b85b6:	3601      	adds	r6, #1
    output_data[i] = std::ceil(input_data[i]);
   b85b8:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   b85bc:	e7f5      	b.n	b85aa <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      buffer_size *= dims_data[i];
   b85be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b85c2:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b85c4:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
   b85c8:	e7ec      	b.n	b85a4 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
   b85ca:	a805      	add	r0, sp, #20
   b85cc:	f7fd feb9 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   b85d0:	4668      	mov	r0, sp
   b85d2:	f7fd feb6 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>

  return kTfLiteOk;
}
   b85d6:	2000      	movs	r0, #0
   b85d8:	b00a      	add	sp, #40	; 0x28
   b85da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b85e0 <_ZN6tflite3ops5micro13Register_CEILEv>:

TfLiteRegistration* Register_CEIL() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, ceil::Prepare, ceil::Eval};
  return &r;
}
   b85e0:	4800      	ldr	r0, [pc, #0]	; (b85e4 <_ZN6tflite3ops5micro13Register_CEILEv+0x4>)
   b85e2:	4770      	bx	lr
   b85e4:	2003c138 	.word	0x2003c138

000b85e8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b85e8:	2000      	movs	r0, #0
   b85ea:	4770      	bx	lr

000b85ec <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b85ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85f0:	684a      	ldr	r2, [r1, #4]
   b85f2:	6885      	ldr	r5, [r0, #8]
  const TfLitePackParams* data =
   b85f4:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b85f6:	b085      	sub	sp, #20
   b85f8:	9001      	str	r0, [sp, #4]
   b85fa:	6850      	ldr	r0, [r2, #4]
   b85fc:	2238      	movs	r2, #56	; 0x38
   b85fe:	4350      	muls	r0, r2
   b8600:	182a      	adds	r2, r5, r0
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (output->type) {
   b8602:	5c28      	ldrb	r0, [r5, r0]
   b8604:	1e46      	subs	r6, r0, #1
   b8606:	2e08      	cmp	r6, #8
   b8608:	f200 821a 	bhi.w	b8a40 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
   b860c:	e8df f016 	tbh	[pc, r6, lsl #1]
   b8610:	01460009 	.word	0x01460009
   b8614:	01af0076 	.word	0x01af0076
   b8618:	02180218 	.word	0x02180218
   b861c:	02180218 	.word	0x02180218
   b8620:	00dd      	.short	0x00dd
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8622:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b8624:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8626:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8628:	f8d6 e000 	ldr.w	lr, [r6]
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
   b862c:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b8630:	2738      	movs	r7, #56	; 0x38
   b8632:	fb07 5500 	mla	r5, r7, r0, r5
   b8636:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b863a:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b863c:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b863e:	bfb8      	it	lt
   b8640:	4473      	addlt	r3, lr
   b8642:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b8644:	2000      	movs	r0, #0
  int outer_size = 1;
   b8646:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8648:	4283      	cmp	r3, r0
   b864a:	dd05      	ble.n	b8658 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    outer_size *= output_dims->data[i];
   b864c:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b8650:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b8652:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b8656:	e7f7      	b.n	b8648 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8658:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b865a:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b865c:	4586      	cmp	lr, r0
   b865e:	dc0c      	bgt.n	b867a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  for (int i = 0; i < input_dims->size; ++i) {
   b8660:	4638      	mov	r0, r7
  int input_size = 1;
   b8662:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b8664:	f850 eb04 	ldr.w	lr, [r0], #4
   b8668:	2700      	movs	r7, #0
   b866a:	45be      	cmp	lr, r7
   b866c:	dd0a      	ble.n	b8684 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
    input_size *= input_dims->data[i];
   b866e:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b8672:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b8674:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b8678:	e7f7      	b.n	b866a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    copy_size *= output_dims->data[i];
   b867a:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b867e:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b8680:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b8682:	e7eb      	b.n	b865c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b8684:	fb03 f006 	mul.w	r0, r3, r6
   b8688:	4285      	cmp	r5, r0
   b868a:	d001      	beq.n	b8690 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   b868c:	f00c f8b6 	bl	c47fc <abort>
   b8690:	6852      	ldr	r2, [r2, #4]
   b8692:	9202      	str	r2, [sp, #8]
   b8694:	2000      	movs	r0, #0
   b8696:	fb03 f209 	mul.w	r2, r3, r9
   b869a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b869c:	4605      	mov	r5, r0
   b869e:	45a9      	cmp	r9, r5
   b86a0:	dc03      	bgt.n	b86aa <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
      return PackImpl<float>(context, node, output, data->values_count,
   b86a2:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   b86a4:	b005      	add	sp, #20
   b86a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b86aa:	680a      	ldr	r2, [r1, #0]
   b86ac:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b86b0:	2438      	movs	r4, #56	; 0x38
   b86b2:	6857      	ldr	r7, [r2, #4]
   b86b4:	9a01      	ldr	r2, [sp, #4]
   b86b6:	6892      	ldr	r2, [r2, #8]
   b86b8:	fb04 2207 	mla	r2, r4, r7, r2
   b86bc:	b102      	cbz	r2, b86c0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   b86be:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b86c0:	2700      	movs	r7, #0
   b86c2:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b86c4:	46be      	mov	lr, r7
   b86c6:	4576      	cmp	r6, lr
   b86c8:	dd15      	ble.n	b86f6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a>
   b86ca:	9c02      	ldr	r4, [sp, #8]
   b86cc:	eb02 0b87 	add.w	fp, r2, r7, lsl #2
   b86d0:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b86d4:	f04f 0800 	mov.w	r8, #0
   b86d8:	4543      	cmp	r3, r8
   b86da:	dd06      	ble.n	b86ea <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
   b86dc:	ecfb 7a01 	vldmia	fp!, {s15}
   b86e0:	f108 0801 	add.w	r8, r8, #1
   b86e4:	ecea 7a01 	vstmia	sl!, {s15}
   b86e8:	e7f6      	b.n	b86d8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>
    for (int k = 0; k < outer_size; ++k) {
   b86ea:	9c03      	ldr	r4, [sp, #12]
   b86ec:	f10e 0e01 	add.w	lr, lr, #1
   b86f0:	441f      	add	r7, r3
   b86f2:	44a4      	add	ip, r4
   b86f4:	e7e7      	b.n	b86c6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  for (int i = 0; i < values_count; ++i) {
   b86f6:	3501      	adds	r5, #1
   b86f8:	4418      	add	r0, r3
   b86fa:	e7d0      	b.n	b869e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b86fc:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b86fe:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8700:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8702:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b8706:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b870a:	2738      	movs	r7, #56	; 0x38
   b870c:	fb07 5500 	mla	r5, r7, r0, r5
   b8710:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8714:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8716:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b8718:	bfb8      	it	lt
   b871a:	4473      	addlt	r3, lr
   b871c:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b871e:	2000      	movs	r0, #0
  int outer_size = 1;
   b8720:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8722:	4283      	cmp	r3, r0
   b8724:	dd05      	ble.n	b8732 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
    outer_size *= output_dims->data[i];
   b8726:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b872a:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b872c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b8730:	e7f7      	b.n	b8722 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x136>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8732:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b8734:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b8736:	4586      	cmp	lr, r0
   b8738:	dc0c      	bgt.n	b8754 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x168>
  for (int i = 0; i < input_dims->size; ++i) {
   b873a:	4638      	mov	r0, r7
  int input_size = 1;
   b873c:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b873e:	f850 eb04 	ldr.w	lr, [r0], #4
   b8742:	2700      	movs	r7, #0
   b8744:	45be      	cmp	lr, r7
   b8746:	dd0a      	ble.n	b875e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    input_size *= input_dims->data[i];
   b8748:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b874c:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b874e:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b8752:	e7f7      	b.n	b8744 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x158>
    copy_size *= output_dims->data[i];
   b8754:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b8758:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b875a:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b875c:	e7eb      	b.n	b8736 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b875e:	fb03 f006 	mul.w	r0, r3, r6
   b8762:	4285      	cmp	r5, r0
   b8764:	d192      	bne.n	b868c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b8766:	6852      	ldr	r2, [r2, #4]
   b8768:	9202      	str	r2, [sp, #8]
   b876a:	2000      	movs	r0, #0
   b876c:	fb03 f20b 	mul.w	r2, r3, fp
   b8770:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b8772:	4605      	mov	r5, r0
   b8774:	45ab      	cmp	fp, r5
   b8776:	dd94      	ble.n	b86a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b8778:	680a      	ldr	r2, [r1, #0]
   b877a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b877e:	2438      	movs	r4, #56	; 0x38
   b8780:	6857      	ldr	r7, [r2, #4]
   b8782:	9a01      	ldr	r2, [sp, #4]
   b8784:	6892      	ldr	r2, [r2, #8]
   b8786:	fb04 2207 	mla	r2, r4, r7, r2
   b878a:	b102      	cbz	r2, b878e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
   b878c:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b878e:	2700      	movs	r7, #0
   b8790:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8792:	46be      	mov	lr, r7
   b8794:	4576      	cmp	r6, lr
   b8796:	dd15      	ble.n	b87c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
   b8798:	9c02      	ldr	r4, [sp, #8]
   b879a:	eb02 0a07 	add.w	sl, r2, r7
   b879e:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b87a2:	f04f 0800 	mov.w	r8, #0
   b87a6:	4543      	cmp	r3, r8
   b87a8:	dd06      	ble.n	b87b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
   b87aa:	f81a 4b01 	ldrb.w	r4, [sl], #1
   b87ae:	f809 4b01 	strb.w	r4, [r9], #1
   b87b2:	f108 0801 	add.w	r8, r8, #1
   b87b6:	e7f6      	b.n	b87a6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    for (int k = 0; k < outer_size; ++k) {
   b87b8:	9c03      	ldr	r4, [sp, #12]
   b87ba:	f10e 0e01 	add.w	lr, lr, #1
   b87be:	441f      	add	r7, r3
   b87c0:	44a4      	add	ip, r4
   b87c2:	e7e7      	b.n	b8794 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
  for (int i = 0; i < values_count; ++i) {
   b87c4:	3501      	adds	r5, #1
   b87c6:	4418      	add	r0, r3
   b87c8:	e7d4      	b.n	b8774 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b87ca:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b87cc:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b87ce:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b87d0:	f8d6 e000 	ldr.w	lr, [r6]
                              data->axis);
   b87d4:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b87d8:	2738      	movs	r7, #56	; 0x38
   b87da:	fb07 5500 	mla	r5, r7, r0, r5
   b87de:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b87e2:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b87e4:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b87e6:	bfb8      	it	lt
   b87e8:	4473      	addlt	r3, lr
   b87ea:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b87ec:	2000      	movs	r0, #0
  int outer_size = 1;
   b87ee:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b87f0:	4283      	cmp	r3, r0
   b87f2:	dd05      	ble.n	b8800 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
    outer_size *= output_dims->data[i];
   b87f4:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b87f8:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b87fa:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b87fe:	e7f7      	b.n	b87f0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x204>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8800:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b8802:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b8804:	4586      	cmp	lr, r0
   b8806:	dc0c      	bgt.n	b8822 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
  for (int i = 0; i < input_dims->size; ++i) {
   b8808:	4638      	mov	r0, r7
  int input_size = 1;
   b880a:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b880c:	f850 eb04 	ldr.w	lr, [r0], #4
   b8810:	2700      	movs	r7, #0
   b8812:	45be      	cmp	lr, r7
   b8814:	dd0a      	ble.n	b882c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
    input_size *= input_dims->data[i];
   b8816:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b881a:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b881c:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b8820:	e7f7      	b.n	b8812 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
    copy_size *= output_dims->data[i];
   b8822:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b8826:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b8828:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b882a:	e7eb      	b.n	b8804 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x218>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b882c:	fb03 f006 	mul.w	r0, r3, r6
   b8830:	4285      	cmp	r5, r0
   b8832:	f47f af2b 	bne.w	b868c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b8836:	6852      	ldr	r2, [r2, #4]
   b8838:	9203      	str	r2, [sp, #12]
   b883a:	2000      	movs	r0, #0
   b883c:	fb03 f20b 	mul.w	r2, r3, fp
   b8840:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
   b8842:	4605      	mov	r5, r0
   b8844:	45ab      	cmp	fp, r5
   b8846:	f77f af2c 	ble.w	b86a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b884a:	680a      	ldr	r2, [r1, #0]
   b884c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b8850:	2438      	movs	r4, #56	; 0x38
   b8852:	6857      	ldr	r7, [r2, #4]
   b8854:	9a01      	ldr	r2, [sp, #4]
   b8856:	6892      	ldr	r2, [r2, #8]
   b8858:	fb04 2207 	mla	r2, r4, r7, r2
   b885c:	b102      	cbz	r2, b8860 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
   b885e:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b8860:	2700      	movs	r7, #0
   b8862:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8864:	46be      	mov	lr, r7
   b8866:	4576      	cmp	r6, lr
   b8868:	dd15      	ble.n	b8896 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
   b886a:	9c03      	ldr	r4, [sp, #12]
   b886c:	eb02 0a07 	add.w	sl, r2, r7
   b8870:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8874:	f04f 0800 	mov.w	r8, #0
   b8878:	4543      	cmp	r3, r8
   b887a:	dd06      	ble.n	b888a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
   b887c:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   b8880:	f809 4b01 	strb.w	r4, [r9], #1
   b8884:	f108 0801 	add.w	r8, r8, #1
   b8888:	e7f6      	b.n	b8878 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>
    for (int k = 0; k < outer_size; ++k) {
   b888a:	9c02      	ldr	r4, [sp, #8]
   b888c:	f10e 0e01 	add.w	lr, lr, #1
   b8890:	441f      	add	r7, r3
   b8892:	44a4      	add	ip, r4
   b8894:	e7e7      	b.n	b8866 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
  for (int i = 0; i < values_count; ++i) {
   b8896:	3501      	adds	r5, #1
   b8898:	4418      	add	r0, r3
   b889a:	e7d3      	b.n	b8844 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b889c:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b889e:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b88a0:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b88a2:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b88a6:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b88aa:	2738      	movs	r7, #56	; 0x38
   b88ac:	fb07 5500 	mla	r5, r7, r0, r5
   b88b0:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b88b4:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b88b6:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b88b8:	bfb8      	it	lt
   b88ba:	4473      	addlt	r3, lr
   b88bc:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b88be:	2000      	movs	r0, #0
  int outer_size = 1;
   b88c0:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b88c2:	4283      	cmp	r3, r0
   b88c4:	dd05      	ble.n	b88d2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
    outer_size *= output_dims->data[i];
   b88c6:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b88ca:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b88cc:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b88d0:	e7f7      	b.n	b88c2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d6>
  for (int i = axis + 1; i < dimensions; ++i) {
   b88d2:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b88d4:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b88d6:	4586      	cmp	lr, r0
   b88d8:	dc0c      	bgt.n	b88f4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
  for (int i = 0; i < input_dims->size; ++i) {
   b88da:	4638      	mov	r0, r7
  int input_size = 1;
   b88dc:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b88de:	f850 eb04 	ldr.w	lr, [r0], #4
   b88e2:	2700      	movs	r7, #0
   b88e4:	45be      	cmp	lr, r7
   b88e6:	dd0a      	ble.n	b88fe <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x312>
    input_size *= input_dims->data[i];
   b88e8:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b88ec:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b88ee:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b88f2:	e7f7      	b.n	b88e4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    copy_size *= output_dims->data[i];
   b88f4:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b88f8:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b88fa:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b88fc:	e7eb      	b.n	b88d6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b88fe:	fb03 f006 	mul.w	r0, r3, r6
   b8902:	4285      	cmp	r5, r0
   b8904:	f47f aec2 	bne.w	b868c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b8908:	6852      	ldr	r2, [r2, #4]
   b890a:	9202      	str	r2, [sp, #8]
   b890c:	2000      	movs	r0, #0
   b890e:	fb03 f20b 	mul.w	r2, r3, fp
   b8912:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b8914:	4605      	mov	r5, r0
   b8916:	45ab      	cmp	fp, r5
   b8918:	f77f aec3 	ble.w	b86a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b891c:	680a      	ldr	r2, [r1, #0]
   b891e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b8922:	2438      	movs	r4, #56	; 0x38
   b8924:	6857      	ldr	r7, [r2, #4]
   b8926:	9a01      	ldr	r2, [sp, #4]
   b8928:	6892      	ldr	r2, [r2, #8]
   b892a:	fb04 2207 	mla	r2, r4, r7, r2
   b892e:	b102      	cbz	r2, b8932 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x346>
   b8930:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b8932:	2700      	movs	r7, #0
   b8934:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8936:	46be      	mov	lr, r7
   b8938:	4576      	cmp	r6, lr
   b893a:	dd15      	ble.n	b8968 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
   b893c:	9c02      	ldr	r4, [sp, #8]
   b893e:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
   b8942:	eb04 098c 	add.w	r9, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8946:	f04f 0800 	mov.w	r8, #0
   b894a:	4543      	cmp	r3, r8
   b894c:	dd06      	ble.n	b895c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
   b894e:	f85a 4b04 	ldr.w	r4, [sl], #4
   b8952:	f849 4b04 	str.w	r4, [r9], #4
   b8956:	f108 0801 	add.w	r8, r8, #1
   b895a:	e7f6      	b.n	b894a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35e>
    for (int k = 0; k < outer_size; ++k) {
   b895c:	9c03      	ldr	r4, [sp, #12]
   b895e:	f10e 0e01 	add.w	lr, lr, #1
   b8962:	441f      	add	r7, r3
   b8964:	44a4      	add	ip, r4
   b8966:	e7e7      	b.n	b8938 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x34c>
  for (int i = 0; i < values_count; ++i) {
   b8968:	3501      	adds	r5, #1
   b896a:	4418      	add	r0, r3
   b896c:	e7d3      	b.n	b8916 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32a>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b896e:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b8970:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8972:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8974:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b8978:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b897c:	2738      	movs	r7, #56	; 0x38
   b897e:	fb07 5500 	mla	r5, r7, r0, r5
   b8982:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8986:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8988:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b898a:	bfb8      	it	lt
   b898c:	4473      	addlt	r3, lr
   b898e:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b8990:	2000      	movs	r0, #0
  int outer_size = 1;
   b8992:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8994:	4283      	cmp	r3, r0
   b8996:	dd05      	ble.n	b89a4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
    outer_size *= output_dims->data[i];
   b8998:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b899c:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b899e:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b89a2:	e7f7      	b.n	b8994 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a8>
  for (int i = axis + 1; i < dimensions; ++i) {
   b89a4:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b89a6:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b89a8:	4586      	cmp	lr, r0
   b89aa:	dc0c      	bgt.n	b89c6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3da>
  for (int i = 0; i < input_dims->size; ++i) {
   b89ac:	4638      	mov	r0, r7
  int input_size = 1;
   b89ae:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b89b0:	f850 eb04 	ldr.w	lr, [r0], #4
   b89b4:	2700      	movs	r7, #0
   b89b6:	45be      	cmp	lr, r7
   b89b8:	dd0a      	ble.n	b89d0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    input_size *= input_dims->data[i];
   b89ba:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b89be:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b89c0:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b89c4:	e7f7      	b.n	b89b6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ca>
    copy_size *= output_dims->data[i];
   b89c6:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b89ca:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b89cc:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b89ce:	e7eb      	b.n	b89a8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b89d0:	fb03 f006 	mul.w	r0, r3, r6
   b89d4:	4285      	cmp	r5, r0
   b89d6:	f47f ae59 	bne.w	b868c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b89da:	6852      	ldr	r2, [r2, #4]
   b89dc:	9203      	str	r2, [sp, #12]
   b89de:	2000      	movs	r0, #0
   b89e0:	fb03 f209 	mul.w	r2, r3, r9
   b89e4:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
   b89e6:	4605      	mov	r5, r0
   b89e8:	45a9      	cmp	r9, r5
   b89ea:	f77f ae5a 	ble.w	b86a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b89ee:	680a      	ldr	r2, [r1, #0]
   b89f0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b89f4:	2438      	movs	r4, #56	; 0x38
   b89f6:	6857      	ldr	r7, [r2, #4]
   b89f8:	9a01      	ldr	r2, [sp, #4]
   b89fa:	6892      	ldr	r2, [r2, #8]
   b89fc:	fb04 2207 	mla	r2, r4, r7, r2
   b8a00:	b102      	cbz	r2, b8a04 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x418>
   b8a02:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b8a04:	2700      	movs	r7, #0
   b8a06:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8a08:	46be      	mov	lr, r7
   b8a0a:	4576      	cmp	r6, lr
   b8a0c:	dd15      	ble.n	b8a3a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44e>
   b8a0e:	9c03      	ldr	r4, [sp, #12]
   b8a10:	eb02 0bc7 	add.w	fp, r2, r7, lsl #3
   b8a14:	eb04 0acc 	add.w	sl, r4, ip, lsl #3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8a18:	f04f 0800 	mov.w	r8, #0
   b8a1c:	4543      	cmp	r3, r8
   b8a1e:	dd06      	ble.n	b8a2e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
   b8a20:	ecbb 7b02 	vldmia	fp!, {d7}
   b8a24:	f108 0801 	add.w	r8, r8, #1
   b8a28:	ecaa 7b02 	vstmia	sl!, {d7}
   b8a2c:	e7f6      	b.n	b8a1c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x430>
    for (int k = 0; k < outer_size; ++k) {
   b8a2e:	9c02      	ldr	r4, [sp, #8]
   b8a30:	f10e 0e01 	add.w	lr, lr, #1
   b8a34:	441f      	add	r7, r3
   b8a36:	44a4      	add	ip, r4
   b8a38:	e7e7      	b.n	b8a0a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41e>
  for (int i = 0; i < values_count; ++i) {
   b8a3a:	3501      	adds	r5, #1
   b8a3c:	4418      	add	r0, r3
   b8a3e:	e7d3      	b.n	b89e8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
      context->ReportError(context, "Type '%s' is not supported by pack.",
   b8a40:	9b01      	ldr	r3, [sp, #4]
   b8a42:	695d      	ldr	r5, [r3, #20]
   b8a44:	f7fc f89e 	bl	b4b84 <TfLiteTypeGetName>
   b8a48:	4902      	ldr	r1, [pc, #8]	; (b8a54 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x468>)
   b8a4a:	4602      	mov	r2, r0
   b8a4c:	9801      	ldr	r0, [sp, #4]
   b8a4e:	47a8      	blx	r5
      return kTfLiteError;
   b8a50:	2001      	movs	r0, #1
   b8a52:	e627      	b.n	b86a4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   b8a54:	000c84dc 	.word	0x000c84dc

000b8a58 <_ZN6tflite3ops5micro13Register_PACKEv>:
}  // namespace pack

TfLiteRegistration* Register_PACK() {
  static TfLiteRegistration r = {nullptr, nullptr, pack::Prepare, pack::Eval};
  return &r;
}
   b8a58:	4800      	ldr	r0, [pc, #0]	; (b8a5c <_ZN6tflite3ops5micro13Register_PACKEv+0x4>)
   b8a5a:	4770      	bx	lr
   b8a5c:	2003c158 	.word	0x2003c158

000b8a60 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b8a64:	680a      	ldr	r2, [r1, #0]
   b8a66:	6884      	ldr	r4, [r0, #8]
   b8a68:	6852      	ldr	r2, [r2, #4]
   b8a6a:	2638      	movs	r6, #56	; 0x38
   b8a6c:	4372      	muls	r2, r6
   b8a6e:	18a5      	adds	r5, r4, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
   b8a70:	5ca2      	ldrb	r2, [r4, r2]
   b8a72:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8a74:	b08a      	sub	sp, #40	; 0x28
  switch (input->type) {
   b8a76:	d148      	bne.n	b8b0a <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b8a78:	684b      	ldr	r3, [r1, #4]
   b8a7a:	685b      	ldr	r3, [r3, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   b8a7c:	4629      	mov	r1, r5
   b8a7e:	fb06 4403 	mla	r4, r6, r3, r4
   b8a82:	4668      	mov	r0, sp
   b8a84:	f7fd ff01 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
   b8a88:	4621      	mov	r1, r4
   b8a8a:	a805      	add	r0, sp, #20
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b8a8c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   b8a90:	f7fd fefb 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8a94:	b104      	cbz	r4, b8a98 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   b8a96:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   b8a98:	9e00      	ldr	r6, [sp, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8a9a:	9b05      	ldr	r3, [sp, #20]
   b8a9c:	429e      	cmp	r6, r3
   b8a9e:	d001      	beq.n	b8aa4 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   b8aa0:	f00b feac 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   b8aa4:	2500      	movs	r5, #0
   b8aa6:	42ae      	cmp	r6, r5
   b8aa8:	dd0c      	ble.n	b8ac4 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b8aaa:	4629      	mov	r1, r5
   b8aac:	4668      	mov	r0, sp
   b8aae:	f7fd fc53 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8ab2:	4629      	mov	r1, r5
   b8ab4:	4607      	mov	r7, r0
   b8ab6:	a805      	add	r0, sp, #20
   b8ab8:	f7fd fc4e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8abc:	4287      	cmp	r7, r0
   b8abe:	d1ef      	bne.n	b8aa0 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   b8ac0:	3501      	adds	r5, #1
   b8ac2:	e7f0      	b.n	b8aa6 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8ac4:	2e04      	cmp	r6, #4
   b8ac6:	bfcc      	ite	gt
   b8ac8:	9a01      	ldrgt	r2, [sp, #4]
   b8aca:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   b8acc:	2300      	movs	r3, #0
    int buffer_size = 1;
   b8ace:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   b8ad0:	429e      	cmp	r6, r3
   b8ad2:	dc0b      	bgt.n	b8aec <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
   b8ad4:	4643      	mov	r3, r8
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   b8ad6:	2200      	movs	r2, #0
   b8ad8:	428a      	cmp	r2, r1
   b8ada:	da0c      	bge.n	b8af6 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
   b8adc:	ecf3 7a01 	vldmia	r3!, {s15}
   b8ae0:	eef1 7a67 	vneg.f32	s15, s15
   b8ae4:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   b8ae8:	3201      	adds	r2, #1
   b8aea:	e7f5      	b.n	b8ad8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
   b8aec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8af0:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b8af2:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   b8af4:	e7ec      	b.n	b8ad0 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b8af6:	a805      	add	r0, sp, #20
   b8af8:	f7fd fc23 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   b8afc:	4668      	mov	r0, sp
   b8afe:	f7fd fc20 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      context->ReportError(
          context, "Neg only currently supports float32, got %d.", input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   b8b02:	2000      	movs	r0, #0
}
   b8b04:	b00a      	add	sp, #40	; 0x28
   b8b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      context->ReportError(
   b8b0a:	6943      	ldr	r3, [r0, #20]
   b8b0c:	4901      	ldr	r1, [pc, #4]	; (b8b14 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
   b8b0e:	4798      	blx	r3
      return kTfLiteError;
   b8b10:	2001      	movs	r0, #1
   b8b12:	e7f7      	b.n	b8b04 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   b8b14:	000c8500 	.word	0x000c8500

000b8b18 <_ZN6tflite3ops5micro12Register_NEGEv>:

TfLiteRegistration* Register_NEG() {
  static TfLiteRegistration r = {/*init=*/nullptr, /*free=*/nullptr,
                                 /*prepare=*/nullptr, neg::Eval};
  return &r;
}
   b8b18:	4800      	ldr	r0, [pc, #0]	; (b8b1c <_ZN6tflite3ops5micro12Register_NEGEv+0x4>)
   b8b1a:	4770      	bx	lr
   b8b1c:	2003c178 	.word	0x2003c178

000b8b20 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace tflite {
namespace ops {
namespace micro {
namespace dequantize {

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b8b22:	680a      	ldr	r2, [r1, #0]
   b8b24:	6816      	ldr	r6, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8b26:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8b28:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8b2a:	d00e      	beq.n	b8b4a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   b8b2c:	2401      	movs	r4, #1
   b8b2e:	4b1f      	ldr	r3, [pc, #124]	; (b8bac <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   b8b30:	9301      	str	r3, [sp, #4]
   b8b32:	e9cd 6402 	strd	r6, r4, [sp, #8]
   b8b36:	4b1e      	ldr	r3, [pc, #120]	; (b8bb0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   b8b38:	9300      	str	r3, [sp, #0]
   b8b3a:	6945      	ldr	r5, [r0, #20]
   b8b3c:	4a1d      	ldr	r2, [pc, #116]	; (b8bb4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8b3e:	491e      	ldr	r1, [pc, #120]	; (b8bb8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
   b8b40:	231d      	movs	r3, #29
   b8b42:	47a8      	blx	r5
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];

  TF_LITE_ENSURE(context,
                 input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
   b8b44:	2001      	movs	r0, #1

  return kTfLiteOk;
}
   b8b46:	b004      	add	sp, #16
   b8b48:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b8b4a:	684b      	ldr	r3, [r1, #4]
   b8b4c:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b8b4e:	2c01      	cmp	r4, #1
   b8b50:	d00b      	beq.n	b8b6a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   b8b52:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b8b56:	4b15      	ldr	r3, [pc, #84]	; (b8bac <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	4b18      	ldr	r3, [pc, #96]	; (b8bbc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
   b8b5c:	9300      	str	r3, [sp, #0]
   b8b5e:	6944      	ldr	r4, [r0, #20]
   b8b60:	4a14      	ldr	r2, [pc, #80]	; (b8bb4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8b62:	4915      	ldr	r1, [pc, #84]	; (b8bb8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
   b8b64:	231e      	movs	r3, #30
   b8b66:	47a0      	blx	r4
   b8b68:	e7ec      	b.n	b8b44 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8b6a:	6852      	ldr	r2, [r2, #4]
   b8b6c:	6881      	ldr	r1, [r0, #8]
  TF_LITE_ENSURE(context,
   b8b6e:	2638      	movs	r6, #56	; 0x38
   b8b70:	4372      	muls	r2, r6
   b8b72:	5c8a      	ldrb	r2, [r1, r2]
   b8b74:	2a03      	cmp	r2, #3
   b8b76:	d009      	beq.n	b8b8c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   b8b78:	2a09      	cmp	r2, #9
   b8b7a:	d007      	beq.n	b8b8c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   b8b7c:	4b10      	ldr	r3, [pc, #64]	; (b8bc0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
   b8b7e:	9300      	str	r3, [sp, #0]
   b8b80:	6945      	ldr	r5, [r0, #20]
   b8b82:	4a0c      	ldr	r2, [pc, #48]	; (b8bb4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8b84:	490f      	ldr	r1, [pc, #60]	; (b8bc4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
   b8b86:	2324      	movs	r3, #36	; 0x24
   b8b88:	47a8      	blx	r5
   b8b8a:	e7db      	b.n	b8b44 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8b8c:	685b      	ldr	r3, [r3, #4]
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
   b8b8e:	4373      	muls	r3, r6
   b8b90:	5ccb      	ldrb	r3, [r1, r3]
   b8b92:	2b01      	cmp	r3, #1
   b8b94:	d008      	beq.n	b8ba8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x88>
   b8b96:	4b0c      	ldr	r3, [pc, #48]	; (b8bc8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
   b8b98:	9300      	str	r3, [sp, #0]
   b8b9a:	696c      	ldr	r4, [r5, #20]
   b8b9c:	4a05      	ldr	r2, [pc, #20]	; (b8bb4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8b9e:	4909      	ldr	r1, [pc, #36]	; (b8bc4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
   b8ba0:	2326      	movs	r3, #38	; 0x26
   b8ba2:	4628      	mov	r0, r5
   b8ba4:	47a0      	blx	r4
   b8ba6:	e7cd      	b.n	b8b44 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   b8ba8:	2000      	movs	r0, #0
   b8baa:	e7cc      	b.n	b8b46 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   b8bac:	000c8aca 	.word	0x000c8aca
   b8bb0:	000c830c 	.word	0x000c830c
   b8bb4:	000c852d 	.word	0x000c852d
   b8bb8:	000c6fd5 	.word	0x000c6fd5
   b8bbc:	000c831c 	.word	0x000c831c
   b8bc0:	000c85a1 	.word	0x000c85a1
   b8bc4:	000c6f40 	.word	0x000c6f40
   b8bc8:	000c85db 	.word	0x000c85db

000b8bcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   b8bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  inline int32 DimensionsCount() const { return size_; }
   b8bd0:	6806      	ldr	r6, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8bd2:	680b      	ldr	r3, [r1, #0]
   b8bd4:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   b8bd6:	4604      	mov	r4, r0
   b8bd8:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8bda:	d001      	beq.n	b8be0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   b8bdc:	f00b fe0e 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   b8be0:	2500      	movs	r5, #0
   b8be2:	42b5      	cmp	r5, r6
   b8be4:	da0c      	bge.n	b8c00 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b8be6:	4629      	mov	r1, r5
   b8be8:	4620      	mov	r0, r4
   b8bea:	f7fd fbb5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8bee:	4629      	mov	r1, r5
   b8bf0:	4680      	mov	r8, r0
   b8bf2:	4638      	mov	r0, r7
   b8bf4:	f7fd fbb0 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8bf8:	4580      	cmp	r8, r0
   b8bfa:	d1ef      	bne.n	b8bdc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   b8bfc:	3501      	adds	r5, #1
   b8bfe:	e7f0      	b.n	b8be2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8c00:	2e04      	cmp	r6, #4
   b8c02:	bfcc      	ite	gt
   b8c04:	6864      	ldrgt	r4, [r4, #4]
   b8c06:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   b8c08:	2300      	movs	r3, #0
    int buffer_size = 1;
   b8c0a:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   b8c0c:	429e      	cmp	r6, r3
   b8c0e:	dd04      	ble.n	b8c1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   b8c10:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8c14:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b8c16:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   b8c18:	e7f8      	b.n	b8c0c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   b8c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b8c20 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8c24:	680b      	ldr	r3, [r1, #0]
   b8c26:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b8c2a:	685f      	ldr	r7, [r3, #4]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8c2c:	684a      	ldr	r2, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8c2e:	2338      	movs	r3, #56	; 0x38
   b8c30:	435f      	muls	r7, r3
   b8c32:	eb0a 0507 	add.w	r5, sl, r7
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8c36:	6854      	ldr	r4, [r2, #4]

  tflite::DequantizationParams op_params;
  op_params.zero_point = input->params.zero_point;
   b8c38:	f8d5 b010 	ldr.w	fp, [r5, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8c3c:	b08b      	sub	sp, #44	; 0x2c
   b8c3e:	4606      	mov	r6, r0
  op_params.scale = input->params.scale;
   b8c40:	68e8      	ldr	r0, [r5, #12]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8c42:	fb03 a404 	mla	r4, r3, r4, sl
  op_params.scale = input->params.scale;
   b8c46:	f7fb fb4f 	bl	b42e8 <__aeabi_f2d>
   b8c4a:	4680      	mov	r8, r0
  switch (input->type) {
   b8c4c:	f81a 0007 	ldrb.w	r0, [sl, r7]
   b8c50:	2803      	cmp	r0, #3
  op_params.scale = input->params.scale;
   b8c52:	4689      	mov	r9, r1
  switch (input->type) {
   b8c54:	d00c      	beq.n	b8c70 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   b8c56:	2809      	cmp	r0, #9
   b8c58:	d02c      	beq.n	b8cb4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x94>
      reference_ops::Dequantize(
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<float>(output));
      break;
    default:
      context->ReportError(context, "Type %s (%d) not supported.",
   b8c5a:	6974      	ldr	r4, [r6, #20]
   b8c5c:	f7fb ff92 	bl	b4b84 <TfLiteTypeGetName>
   b8c60:	f81a 3007 	ldrb.w	r3, [sl, r7]
   b8c64:	4929      	ldr	r1, [pc, #164]	; (b8d0c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xec>)
   b8c66:	4602      	mov	r2, r0
   b8c68:	4630      	mov	r0, r6
   b8c6a:	47a0      	blx	r4
                           TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   b8c6c:	2001      	movs	r0, #1
   b8c6e:	e04a      	b.n	b8d06 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b8c70:	4629      	mov	r1, r5
   b8c72:	4668      	mov	r0, sp
   b8c74:	f7fd fe09 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   b8c78:	4621      	mov	r1, r4
   b8c7a:	a805      	add	r0, sp, #20
   b8c7c:	686f      	ldr	r7, [r5, #4]
   b8c7e:	f7fd fe04 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8c82:	b104      	cbz	r4, b8c86 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x66>
   b8c84:	6864      	ldr	r4, [r4, #4]
inline void Dequantize(const tflite::DequantizationParams& op_params,
                       const RuntimeShape& input_shape, const T* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8c86:	a905      	add	r1, sp, #20
   b8c88:	4668      	mov	r0, sp
   b8c8a:	f7ff ff9f 	bl	b8bcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   b8c8e:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8c90:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   b8c92:	42ae      	cmp	r6, r5
   b8c94:	dd30      	ble.n	b8cf8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
    const int32 val = input_data[i];
   b8c96:	5d78      	ldrb	r0, [r7, r5]
    const float result = static_cast<float>(scale * (val - zero_point));
   b8c98:	eba0 000b 	sub.w	r0, r0, fp
   b8c9c:	f7fb fb12 	bl	b42c4 <__aeabi_i2d>
   b8ca0:	4642      	mov	r2, r8
   b8ca2:	464b      	mov	r3, r9
   b8ca4:	f7fb fb78 	bl	b4398 <__aeabi_dmul>
   b8ca8:	f7fb fe58 	bl	b495c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
   b8cac:	3501      	adds	r5, #1
    const float result = static_cast<float>(scale * (val - zero_point));
   b8cae:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   b8cb2:	e7ee      	b.n	b8c92 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x72>
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b8cb4:	4629      	mov	r1, r5
   b8cb6:	4668      	mov	r0, sp
   b8cb8:	f7fd fde7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   b8cbc:	4621      	mov	r1, r4
   b8cbe:	a805      	add	r0, sp, #20
   b8cc0:	686f      	ldr	r7, [r5, #4]
   b8cc2:	f7fd fde2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8cc6:	b104      	cbz	r4, b8cca <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
   b8cc8:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8cca:	a905      	add	r1, sp, #20
   b8ccc:	4668      	mov	r0, sp
   b8cce:	f7ff ff7d 	bl	b8bcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   b8cd2:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8cd4:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   b8cd6:	42ae      	cmp	r6, r5
   b8cd8:	dd0e      	ble.n	b8cf8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
    const int32 val = input_data[i];
   b8cda:	5778      	ldrsb	r0, [r7, r5]
    const float result = static_cast<float>(scale * (val - zero_point));
   b8cdc:	eba0 000b 	sub.w	r0, r0, fp
   b8ce0:	f7fb faf0 	bl	b42c4 <__aeabi_i2d>
   b8ce4:	4642      	mov	r2, r8
   b8ce6:	464b      	mov	r3, r9
   b8ce8:	f7fb fb56 	bl	b4398 <__aeabi_dmul>
   b8cec:	f7fb fe36 	bl	b495c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
   b8cf0:	3501      	adds	r5, #1
    const float result = static_cast<float>(scale * (val - zero_point));
   b8cf2:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   b8cf6:	e7ee      	b.n	b8cd6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb6>
   b8cf8:	a805      	add	r0, sp, #20
   b8cfa:	f7fd fb22 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b8cfe:	4668      	mov	r0, sp
   b8d00:	f7fd fb1f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  }

  return kTfLiteOk;
   b8d04:	2000      	movs	r0, #0
}
   b8d06:	b00b      	add	sp, #44	; 0x2c
   b8d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d0c:	000c85fa 	.word	0x000c85fa

000b8d10 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:

TfLiteRegistration* Register_DEQUANTIZE() {
  static TfLiteRegistration r = {nullptr, nullptr, dequantize::Prepare,
                                 dequantize::Eval};
  return &r;
}
   b8d10:	4800      	ldr	r0, [pc, #0]	; (b8d14 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x4>)
   b8d12:	4770      	bx	lr
   b8d14:	2003c198 	.word	0x2003c198

000b8d18 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b8d18:	2000      	movs	r0, #0
   b8d1a:	4770      	bx	lr

000b8d1c <_ZN6tflite3ops5micro7pooling4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b8d1c:	4770      	bx	lr

000b8d1e <_ZN6tflite3ops5micro7pooling7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b8d1e:	2000      	movs	r0, #0
   b8d20:	4770      	bx	lr

000b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   b8d22:	b570      	push	{r4, r5, r6, lr}
   b8d24:	4615      	mov	r5, r2
   b8d26:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   b8d28:	f7fd fb16 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8d2c:	4631      	mov	r1, r6
   b8d2e:	4604      	mov	r4, r0
   b8d30:	4628      	mov	r0, r5
   b8d32:	f7fd fb11 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8d36:	4284      	cmp	r4, r0
   b8d38:	d001      	beq.n	b8d3e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   b8d3a:	f00b fd5f 	bl	c47fc <abort>
}
   b8d3e:	bd70      	pop	{r4, r5, r6, pc}

000b8d40 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
   b8d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d44:	ed2d 8b04 	vpush	{d8-d9}
   b8d48:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8d4a:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
   b8d4c:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8d4e:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
   b8d50:	4604      	mov	r4, r0
   b8d52:	460e      	mov	r6, r1
   b8d54:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8d56:	d001      	beq.n	b8d5c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   b8d58:	f00b fd50 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b8d5c:	683b      	ldr	r3, [r7, #0]
   b8d5e:	2b04      	cmp	r3, #4
   b8d60:	d1fa      	bne.n	b8d58 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8d62:	2300      	movs	r3, #0
   b8d64:	4619      	mov	r1, r3
   b8d66:	463a      	mov	r2, r7
   b8d68:	4630      	mov	r0, r6
   b8d6a:	f7ff ffda 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8d6e:	2303      	movs	r3, #3
   b8d70:	4619      	mov	r1, r3
   b8d72:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8d74:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8d76:	4630      	mov	r0, r6
   b8d78:	f7ff ffd3 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b8d7c:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8d7e:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
   b8d80:	4630      	mov	r0, r6
   b8d82:	f7fd fae9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b8d86:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b8d88:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
   b8d8a:	4630      	mov	r0, r6
   b8d8c:	f7fd fae4 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b8d90:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b8d92:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   b8d94:	4638      	mov	r0, r7
   b8d96:	f7fd fadf 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b8d9a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b8d9c:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   b8d9e:	4638      	mov	r0, r7
   b8da0:	f7fd fada 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b8da4:	68e3      	ldr	r3, [r4, #12]
   b8da6:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   b8da8:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b8daa:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   b8dac:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   b8dae:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   b8db2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
   b8db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8db8:	459b      	cmp	fp, r3
   b8dba:	f280 8093 	bge.w	b8ee4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
   b8dbe:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8dc2:	f8cd a00c 	str.w	sl, [sp, #12]
   b8dc6:	9b03      	ldr	r3, [sp, #12]
   b8dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8dca:	4293      	cmp	r3, r2
   b8dcc:	f280 8087 	bge.w	b8ede <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19e>
   b8dd0:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8dd4:	f8cd 9010 	str.w	r9, [sp, #16]
   b8dd8:	9b04      	ldr	r3, [sp, #16]
   b8dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8ddc:	4293      	cmp	r3, r2
   b8dde:	da78      	bge.n	b8ed2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   b8de0:	2300      	movs	r3, #0
   b8de2:	9302      	str	r3, [sp, #8]
   b8de4:	9b02      	ldr	r3, [sp, #8]
   b8de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8de8:	4293      	cmp	r3, r2
   b8dea:	da6c      	bge.n	b8ec6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x186>
              (out_x * stride_width) - params.padding_values.width;
   b8dec:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   b8df0:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          float filter_count = 0;
   b8df4:	ed9f 8a3e 	vldr	s16, [pc, #248]	; b8ef0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
          const int in_x_origin =
   b8df8:	eba9 0308 	sub.w	r3, r9, r8
   b8dfc:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
   b8dfe:	ebaa 0305 	sub.w	r3, sl, r5
   b8e02:	9307      	str	r3, [sp, #28]
          const int filter_x_start = std::max(0, -in_x_origin);
   b8e04:	eba8 0309 	sub.w	r3, r8, r9
   b8e08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
              std::min(params.filter_width, input_width - in_x_origin);
   b8e0c:	9a06      	ldr	r2, [sp, #24]
   b8e0e:	9305      	str	r3, [sp, #20]
   b8e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8e12:	1a9a      	subs	r2, r3, r2
   b8e14:	69a3      	ldr	r3, [r4, #24]
   b8e16:	429a      	cmp	r2, r3
   b8e18:	bfa8      	it	ge
   b8e1a:	461a      	movge	r2, r3
   b8e1c:	9211      	str	r2, [sp, #68]	; 0x44
              std::min(params.filter_height, input_height - in_y_origin);
   b8e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8e20:	9a07      	ldr	r2, [sp, #28]
   b8e22:	1a9a      	subs	r2, r3, r2
   b8e24:	6963      	ldr	r3, [r4, #20]
   b8e26:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b8e28:	eba5 050a 	sub.w	r5, r5, sl
   b8e2c:	bfa8      	it	ge
   b8e2e:	461a      	movge	r2, r3
   b8e30:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b8e34:	9208      	str	r2, [sp, #32]
          float total = 0.f;
   b8e36:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b8e3a:	9b08      	ldr	r3, [sp, #32]
   b8e3c:	42ab      	cmp	r3, r5
   b8e3e:	dd1e      	ble.n	b8e7e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8e40:	9b07      	ldr	r3, [sp, #28]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8e42:	f8dd 8014 	ldr.w	r8, [sp, #20]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8e46:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b8e4a:	4598      	cmp	r8, r3
   b8e4c:	da15      	bge.n	b8e7a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8e4e:	9b02      	ldr	r3, [sp, #8]
   b8e50:	9300      	str	r3, [sp, #0]
   b8e52:	9b06      	ldr	r3, [sp, #24]
   b8e54:	9213      	str	r2, [sp, #76]	; 0x4c
   b8e56:	4443      	add	r3, r8
   b8e58:	4659      	mov	r1, fp
   b8e5a:	4630      	mov	r0, r6
   b8e5c:	f7fd fae3 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b8e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8e62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
   b8e68:	edd0 7a00 	vldr	s15, [r0]
              filter_count++;
   b8e6c:	ee38 8a09 	vadd.f32	s16, s16, s18
              total +=
   b8e70:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8e74:	f108 0801 	add.w	r8, r8, #1
   b8e78:	e7e6      	b.n	b8e48 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b8e7a:	3501      	adds	r5, #1
   b8e7c:	e7dd      	b.n	b8e3a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfa>
            }
          }
          const float average = total / filter_count;
   b8e7e:	ee88 7a88 	vdiv.f32	s14, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8e82:	9b02      	ldr	r3, [sp, #8]
   b8e84:	9300      	str	r3, [sp, #0]
   b8e86:	4659      	mov	r1, fp
   b8e88:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   b8e8c:	4638      	mov	r0, r7
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   b8e8e:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
   b8e92:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
      return __a;
   b8e96:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b8e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8e9e:	bfd8      	it	le
   b8ea0:	eeb0 8a47 	vmovle.f32	s16, s14
	return __b;
   b8ea4:	eef4 7a48 	vcmp.f32	s15, s16
   b8ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8eac:	bf48      	it	mi
   b8eae:	eeb0 8a67 	vmovmi.f32	s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8eb2:	f7fd fab8 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b8eb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b8eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   b8ebc:	9b02      	ldr	r3, [sp, #8]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8ebe:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   b8ec2:	3301      	adds	r3, #1
   b8ec4:	e78d      	b.n	b8de2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8ec6:	9b04      	ldr	r3, [sp, #16]
   b8ec8:	3301      	adds	r3, #1
   b8eca:	9304      	str	r3, [sp, #16]
   b8ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b8ece:	4499      	add	r9, r3
   b8ed0:	e782      	b.n	b8dd8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8ed2:	9b03      	ldr	r3, [sp, #12]
   b8ed4:	3301      	adds	r3, #1
   b8ed6:	9303      	str	r3, [sp, #12]
   b8ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b8eda:	449a      	add	sl, r3
   b8edc:	e773      	b.n	b8dc6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b8ede:	f10b 0b01 	add.w	fp, fp, #1
   b8ee2:	e768      	b.n	b8db6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
   b8ee4:	b015      	add	sp, #84	; 0x54
   b8ee6:	ecbd 8b04 	vpop	{d8-d9}
   b8eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8eee:	bf00      	nop
   b8ef0:	00000000 	.word	0x00000000

000b8ef4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   b8ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ef8:	b097      	sub	sp, #92	; 0x5c
   b8efa:	4698      	mov	r8, r3
   b8efc:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b8efe:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b8f02:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   b8f04:	4604      	mov	r4, r0
   b8f06:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b8f08:	dd01      	ble.n	b8f0e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   b8f0a:	f00b fc77 	bl	c47fc <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8f0e:	680b      	ldr	r3, [r1, #0]
   b8f10:	2b04      	cmp	r3, #4
   b8f12:	d1fa      	bne.n	b8f0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b8f14:	f8d8 3000 	ldr.w	r3, [r8]
   b8f18:	2b04      	cmp	r3, #4
   b8f1a:	d1f6      	bne.n	b8f0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8f1c:	2300      	movs	r3, #0
   b8f1e:	4619      	mov	r1, r3
   b8f20:	4642      	mov	r2, r8
   b8f22:	4638      	mov	r0, r7
   b8f24:	f7ff fefd 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8f28:	2303      	movs	r3, #3
   b8f2a:	4619      	mov	r1, r3
   b8f2c:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8f2e:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8f30:	4638      	mov	r0, r7
   b8f32:	f7ff fef6 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b8f36:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8f38:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   b8f3a:	4638      	mov	r0, r7
   b8f3c:	f7fd fa0c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b8f40:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b8f42:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   b8f44:	4638      	mov	r0, r7
   b8f46:	f7fd fa07 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b8f4a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b8f4c:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   b8f4e:	4640      	mov	r0, r8
   b8f50:	f7fd fa02 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b8f54:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b8f56:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   b8f58:	4640      	mov	r0, r8
   b8f5a:	f7fd f9fd 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b8f5e:	68e3      	ldr	r3, [r4, #12]
   b8f60:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   b8f62:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b8f64:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   b8f66:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   b8f68:	2100      	movs	r1, #0
   b8f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f6c:	4299      	cmp	r1, r3
   b8f6e:	f280 8090 	bge.w	b9092 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19e>
   b8f72:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8f76:	f8cd b010 	str.w	fp, [sp, #16]
   b8f7a:	9b04      	ldr	r3, [sp, #16]
   b8f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b8f7e:	4293      	cmp	r3, r2
   b8f80:	f280 8085 	bge.w	b908e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   b8f84:	2300      	movs	r3, #0
   b8f86:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8f88:	9305      	str	r3, [sp, #20]
   b8f8a:	9b05      	ldr	r3, [sp, #20]
   b8f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b8f8e:	4293      	cmp	r3, r2
   b8f90:	da77      	bge.n	b9082 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
   b8f92:	2300      	movs	r3, #0
   b8f94:	9302      	str	r3, [sp, #8]
   b8f96:	9b02      	ldr	r3, [sp, #8]
   b8f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b8f9a:	4293      	cmp	r3, r2
   b8f9c:	da69      	bge.n	b9072 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b8f9e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_x_origin =
   b8fa2:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b8fa4:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
          const int in_x_origin =
   b8fa8:	eba3 0309 	sub.w	r3, r3, r9
   b8fac:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   b8fae:	ebab 0306 	sub.w	r3, fp, r6
   b8fb2:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b8fb4:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b8fb6:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b8fb8:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   b8fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b8fbe:	1a9a      	subs	r2, r3, r2
   b8fc0:	69a3      	ldr	r3, [r4, #24]
   b8fc2:	429a      	cmp	r2, r3
   b8fc4:	bfa8      	it	ge
   b8fc6:	461a      	movge	r2, r3
   b8fc8:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b8fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8fce:	1a9a      	subs	r2, r3, r2
   b8fd0:	6963      	ldr	r3, [r4, #20]
   b8fd2:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b8fd4:	eba6 060b 	sub.w	r6, r6, fp
   b8fd8:	bfa8      	it	ge
   b8fda:	461a      	movge	r2, r3
          int32 acc = 0;
   b8fdc:	2500      	movs	r5, #0
   b8fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   b8fe2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b8fe6:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   b8fe8:	46aa      	mov	sl, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b8fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8fec:	429e      	cmp	r6, r3
   b8fee:	da24      	bge.n	b903a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x146>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ff2:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ff6:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ff8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   b8ffc:	4283      	cmp	r3, r0
   b8ffe:	da12      	bge.n	b9026 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9000:	9b02      	ldr	r3, [sp, #8]
   b9002:	9806      	ldr	r0, [sp, #24]
   b9004:	9300      	str	r3, [sp, #0]
   b9006:	9b08      	ldr	r3, [sp, #32]
   b9008:	4403      	add	r3, r0
   b900a:	4638      	mov	r0, r7
   b900c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   b9010:	f7fd fa09 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   b9014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9016:	5c1b      	ldrb	r3, [r3, r0]
   b9018:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b901a:	9b06      	ldr	r3, [sp, #24]
   b901c:	3301      	adds	r3, #1
   b901e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   b9022:	9306      	str	r3, [sp, #24]
   b9024:	e7e8      	b.n	b8ff8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   b9026:	9b07      	ldr	r3, [sp, #28]
   b9028:	9a07      	ldr	r2, [sp, #28]
   b902a:	eba3 0309 	sub.w	r3, r3, r9
   b902e:	454a      	cmp	r2, r9
   b9030:	bfb8      	it	lt
   b9032:	2300      	movlt	r3, #0
   b9034:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9036:	3601      	adds	r6, #1
   b9038:	e7d7      	b.n	b8fea <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b903a:	9b02      	ldr	r3, [sp, #8]
   b903c:	9300      	str	r3, [sp, #0]
   b903e:	4640      	mov	r0, r8
   b9040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b9044:	9106      	str	r1, [sp, #24]
          acc = (acc + filter_count / 2) / filter_count;
   b9046:	eb05 056a 	add.w	r5, r5, sl, asr #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b904a:	f7fd f9ec 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc = (acc + filter_count / 2) / filter_count;
   b904e:	fbb5 fafa 	udiv	sl, r5, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9052:	69e5      	ldr	r5, [r4, #28]
   b9054:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   b9056:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9058:	45aa      	cmp	sl, r5
   b905a:	bfb8      	it	lt
   b905c:	46aa      	movlt	sl, r5
   b905e:	6a25      	ldr	r5, [r4, #32]
   b9060:	45aa      	cmp	sl, r5
   b9062:	bfa8      	it	ge
   b9064:	46aa      	movge	sl, r5
   b9066:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b906a:	9b02      	ldr	r3, [sp, #8]
   b906c:	3301      	adds	r3, #1
   b906e:	9302      	str	r3, [sp, #8]
   b9070:	e791      	b.n	b8f96 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9072:	9b05      	ldr	r3, [sp, #20]
   b9074:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9076:	3301      	adds	r3, #1
   b9078:	9305      	str	r3, [sp, #20]
   b907a:	9b03      	ldr	r3, [sp, #12]
   b907c:	4413      	add	r3, r2
   b907e:	9303      	str	r3, [sp, #12]
   b9080:	e783      	b.n	b8f8a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9082:	9b04      	ldr	r3, [sp, #16]
   b9084:	3301      	adds	r3, #1
   b9086:	9304      	str	r3, [sp, #16]
   b9088:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b908a:	449b      	add	fp, r3
   b908c:	e775      	b.n	b8f7a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b908e:	3101      	adds	r1, #1
   b9090:	e76b      	b.n	b8f6a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   b9092:	b017      	add	sp, #92	; 0x5c
   b9094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9098 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   b9098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b909c:	ed2d 8b02 	vpush	{d8}
   b90a0:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b90a2:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   b90a4:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b90a6:	2b04      	cmp	r3, #4
                    float* output_data) {
   b90a8:	4604      	mov	r4, r0
   b90aa:	460e      	mov	r6, r1
   b90ac:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b90ae:	d001      	beq.n	b90b4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   b90b0:	f00b fba4 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b90b4:	683b      	ldr	r3, [r7, #0]
   b90b6:	2b04      	cmp	r3, #4
   b90b8:	d1fa      	bne.n	b90b0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b90ba:	2300      	movs	r3, #0
   b90bc:	4619      	mov	r1, r3
   b90be:	463a      	mov	r2, r7
   b90c0:	4630      	mov	r0, r6
   b90c2:	f7ff fe2e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b90c6:	2303      	movs	r3, #3
   b90c8:	4619      	mov	r1, r3
   b90ca:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b90cc:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b90ce:	4630      	mov	r0, r6
   b90d0:	f7ff fe27 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b90d4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b90d6:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   b90d8:	4630      	mov	r0, r6
   b90da:	f7fd f93d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b90de:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b90e0:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   b90e2:	4630      	mov	r0, r6
   b90e4:	f7fd f938 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b90e8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b90ea:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   b90ec:	4638      	mov	r0, r7
   b90ee:	f7fd f933 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b90f2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b90f4:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   b90f6:	4638      	mov	r0, r7
   b90f8:	f7fd f92e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b90fc:	68e3      	ldr	r3, [r4, #12]
   b90fe:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   b9100:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b9102:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   b9104:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   b9106:	2100      	movs	r1, #0
   b9108:	9b08      	ldr	r3, [sp, #32]
   b910a:	4299      	cmp	r1, r3
   b910c:	f280 8099 	bge.w	b9242 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1aa>
   b9110:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9114:	46da      	mov	sl, fp
   b9116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9118:	459a      	cmp	sl, r3
   b911a:	f280 8090 	bge.w	b923e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a6>
   b911e:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9122:	f8cd 900c 	str.w	r9, [sp, #12]
   b9126:	9b03      	ldr	r3, [sp, #12]
   b9128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b912a:	4293      	cmp	r3, r2
   b912c:	f280 8082 	bge.w	b9234 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
        for (int channel = 0; channel < depth; ++channel) {
   b9130:	2300      	movs	r3, #0
   b9132:	9302      	str	r3, [sp, #8]
   b9134:	9b02      	ldr	r3, [sp, #8]
   b9136:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b9138:	4293      	cmp	r3, r2
   b913a:	da75      	bge.n	b9228 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x190>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b913c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b9140:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   b9144:	eba9 0308 	sub.w	r3, r9, r8
   b9148:	9305      	str	r3, [sp, #20]
          const int in_y_origin =
   b914a:	ebab 0305 	sub.w	r3, fp, r5
   b914e:	9306      	str	r3, [sp, #24]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b9150:	eba8 0309 	sub.w	r3, r8, r9
   b9154:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b9158:	9a05      	ldr	r2, [sp, #20]
   b915a:	9304      	str	r3, [sp, #16]
   b915c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b915e:	1a9a      	subs	r2, r3, r2
   b9160:	69a3      	ldr	r3, [r4, #24]
   b9162:	429a      	cmp	r2, r3
   b9164:	bfa8      	it	ge
   b9166:	461a      	movge	r2, r3
   b9168:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b916a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b916c:	9a06      	ldr	r2, [sp, #24]
   b916e:	1a9a      	subs	r2, r3, r2
   b9170:	6963      	ldr	r3, [r4, #20]
   b9172:	429a      	cmp	r2, r3
   b9174:	bfa8      	it	ge
   b9176:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b9178:	eba5 050b 	sub.w	r5, r5, fp
          float max = std::numeric_limits<float>::lowest();
   b917c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   b9180:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   b9184:	9207      	str	r2, [sp, #28]
   b9186:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9188:	9b07      	ldr	r3, [sp, #28]
   b918a:	429d      	cmp	r5, r3
   b918c:	da26      	bge.n	b91dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b918e:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9190:	f8dd 8010 	ldr.w	r8, [sp, #16]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b9194:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (__a < __b)
   b9198:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   b919c:	4598      	cmp	r8, r3
   b919e:	da1b      	bge.n	b91d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b91a0:	9b02      	ldr	r3, [sp, #8]
   b91a2:	9300      	str	r3, [sp, #0]
   b91a4:	9b05      	ldr	r3, [sp, #20]
   b91a6:	4630      	mov	r0, r6
   b91a8:	4443      	add	r3, r8
   b91aa:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   b91ae:	f7fd f93a 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b91b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b91b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b91b8:	edd0 7a00 	vldr	s15, [r0]
   b91bc:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   b91c0:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   b91c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   b91c6:	bfd8      	it	le
   b91c8:	4618      	movle	r0, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b91ca:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              max = std::max(
   b91ce:	6803      	ldr	r3, [r0, #0]
   b91d0:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b91d2:	f108 0801 	add.w	r8, r8, #1
   b91d6:	e7de      	b.n	b9196 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b91d8:	3501      	adds	r5, #1
   b91da:	e7d5      	b.n	b9188 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   b91dc:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
   b91e0:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
   b91e4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b91e8:	9b02      	ldr	r3, [sp, #8]
   b91ea:	9300      	str	r3, [sp, #0]
   b91ec:	eeb4 7ac8 	vcmpe.f32	s14, s16
   b91f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b91f4:	bf58      	it	pl
   b91f6:	eeb0 8a47 	vmovpl.f32	s16, s14
	return __b;
   b91fa:	eef4 7a48 	vcmp.f32	s15, s16
   b91fe:	9b03      	ldr	r3, [sp, #12]
   b9200:	9104      	str	r1, [sp, #16]
   b9202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9206:	4652      	mov	r2, sl
   b9208:	4638      	mov	r0, r7
   b920a:	bf48      	it	mi
   b920c:	eeb0 8a67 	vmovmi.f32	s16, s15
   b9210:	f7fd f909 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9214:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int channel = 0; channel < depth; ++channel) {
   b9216:	9904      	ldr	r1, [sp, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   b921c:	9b02      	ldr	r3, [sp, #8]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b921e:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   b9222:	3301      	adds	r3, #1
   b9224:	9302      	str	r3, [sp, #8]
   b9226:	e785      	b.n	b9134 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9228:	9b03      	ldr	r3, [sp, #12]
   b922a:	3301      	adds	r3, #1
   b922c:	9303      	str	r3, [sp, #12]
   b922e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b9230:	4499      	add	r9, r3
   b9232:	e778      	b.n	b9126 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b9236:	f10a 0a01 	add.w	sl, sl, #1
   b923a:	449b      	add	fp, r3
   b923c:	e76b      	b.n	b9116 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
   b923e:	3101      	adds	r1, #1
   b9240:	e762      	b.n	b9108 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
        }
      }
    }
  }
}
   b9242:	b017      	add	sp, #92	; 0x5c
   b9244:	ecbd 8b02 	vpop	{d8}
   b9248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b924c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   b924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9250:	b099      	sub	sp, #100	; 0x64
   b9252:	461f      	mov	r7, r3
   b9254:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b9256:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b925a:	429a      	cmp	r2, r3
                    uint8* output_data) {
   b925c:	4604      	mov	r4, r0
   b925e:	460e      	mov	r6, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b9260:	dd01      	ble.n	b9266 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   b9262:	f00b facb 	bl	c47fc <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   b9266:	2a00      	cmp	r2, #0
   b9268:	dbfb      	blt.n	b9262 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   b926a:	2bff      	cmp	r3, #255	; 0xff
   b926c:	dcf9      	bgt.n	b9262 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b926e:	680b      	ldr	r3, [r1, #0]
   b9270:	2b04      	cmp	r3, #4
   b9272:	d1f6      	bne.n	b9262 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b9274:	683b      	ldr	r3, [r7, #0]
   b9276:	2b04      	cmp	r3, #4
   b9278:	d1f3      	bne.n	b9262 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b927a:	2300      	movs	r3, #0
   b927c:	4619      	mov	r1, r3
   b927e:	463a      	mov	r2, r7
   b9280:	4630      	mov	r0, r6
   b9282:	f7ff fd4e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9286:	2303      	movs	r3, #3
   b9288:	4619      	mov	r1, r3
   b928a:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b928c:	900c      	str	r0, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b928e:	4630      	mov	r0, r6
   b9290:	f7ff fd47 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b9294:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9296:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_height = input_shape.Dims(1);
   b9298:	4630      	mov	r0, r6
   b929a:	f7fd f85d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b929e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b92a0:	900e      	str	r0, [sp, #56]	; 0x38
  const int input_width = input_shape.Dims(2);
   b92a2:	4630      	mov	r0, r6
   b92a4:	f7fd f858 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b92a8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b92aa:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
   b92ac:	4638      	mov	r0, r7
   b92ae:	f7fd f853 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b92b2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b92b4:	9011      	str	r0, [sp, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
   b92b6:	4638      	mov	r0, r7
   b92b8:	f7fd f84e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b92bc:	68e3      	ldr	r3, [r4, #12]
   b92be:	9313      	str	r3, [sp, #76]	; 0x4c
  const int stride_width = params.stride_width;
   b92c0:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b92c2:	9012      	str	r0, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   b92c4:	9314      	str	r3, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   b92c6:	f04f 0b00 	mov.w	fp, #0
   b92ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b92cc:	459b      	cmp	fp, r3
   b92ce:	f280 808d 	bge.w	b93ec <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a0>
   b92d2:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b92d6:	46d1      	mov	r9, sl
   b92d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b92da:	4599      	cmp	r9, r3
   b92dc:	f280 8083 	bge.w	b93e6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   b92e0:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b92e4:	f8cd 8010 	str.w	r8, [sp, #16]
   b92e8:	9b04      	ldr	r3, [sp, #16]
   b92ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b92ec:	4293      	cmp	r3, r2
   b92ee:	da75      	bge.n	b93dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
        for (int channel = 0; channel < depth; ++channel) {
   b92f0:	2300      	movs	r3, #0
   b92f2:	9303      	str	r3, [sp, #12]
   b92f4:	9b03      	ldr	r3, [sp, #12]
   b92f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b92f8:	4293      	cmp	r3, r2
   b92fa:	da69      	bge.n	b93d0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x184>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b92fc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b9300:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   b9304:	eba8 0203 	sub.w	r2, r8, r3
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b9308:	eba3 0308 	sub.w	r3, r3, r8
          const int in_x_origin =
   b930c:	9207      	str	r2, [sp, #28]
          const int in_y_origin =
   b930e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9312:	ebaa 0205 	sub.w	r2, sl, r5
   b9316:	9208      	str	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b9318:	9306      	str	r3, [sp, #24]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b931a:	9a07      	ldr	r2, [sp, #28]
   b931c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b931e:	1a9a      	subs	r2, r3, r2
   b9320:	69a3      	ldr	r3, [r4, #24]
   b9322:	429a      	cmp	r2, r3
   b9324:	bfa8      	it	ge
   b9326:	461a      	movge	r2, r3
   b9328:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b932a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b932c:	9a08      	ldr	r2, [sp, #32]
   b932e:	1a9a      	subs	r2, r3, r2
   b9330:	6963      	ldr	r3, [r4, #20]
   b9332:	429a      	cmp	r2, r3
   b9334:	bfa8      	it	ge
   b9336:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b9338:	eba5 050a 	sub.w	r5, r5, sl
          uint8 max = 0;
   b933c:	2300      	movs	r3, #0
   b933e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b9342:	9210      	str	r2, [sp, #64]	; 0x40
   b9344:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9348:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b934a:	429d      	cmp	r5, r3
   b934c:	da28      	bge.n	b93a0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x154>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b934e:	9b06      	ldr	r3, [sp, #24]
   b9350:	9305      	str	r3, [sp, #20]
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b9352:	9b08      	ldr	r3, [sp, #32]
   b9354:	18ea      	adds	r2, r5, r3
      if (__a < __b)
   b9356:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b935a:	9905      	ldr	r1, [sp, #20]
   b935c:	9309      	str	r3, [sp, #36]	; 0x24
   b935e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9360:	428b      	cmp	r3, r1
   b9362:	dd1b      	ble.n	b939c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x150>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b9364:	9b03      	ldr	r3, [sp, #12]
   b9366:	9300      	str	r3, [sp, #0]
   b9368:	460b      	mov	r3, r1
   b936a:	9907      	ldr	r1, [sp, #28]
   b936c:	9215      	str	r2, [sp, #84]	; 0x54
   b936e:	440b      	add	r3, r1
   b9370:	4630      	mov	r0, r6
   b9372:	4659      	mov	r1, fp
   b9374:	f7fd f857 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b937a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b937c:	4403      	add	r3, r0
   b937e:	5c10      	ldrb	r0, [r2, r0]
   b9380:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b9382:	4290      	cmp	r0, r2
      return __a;
   b9384:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
   b9388:	bf98      	it	ls
   b938a:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b938c:	9a15      	ldr	r2, [sp, #84]	; 0x54
              max = std::max(
   b938e:	781b      	ldrb	r3, [r3, #0]
   b9390:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9394:	9b05      	ldr	r3, [sp, #20]
   b9396:	3301      	adds	r3, #1
   b9398:	9305      	str	r3, [sp, #20]
   b939a:	e7dc      	b.n	b9356 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x10a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b939c:	3501      	adds	r5, #1
   b939e:	e7d3      	b.n	b9348 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfc>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   b93a0:	7f25      	ldrb	r5, [r4, #28]
   b93a2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   b93a6:	429d      	cmp	r5, r3
   b93a8:	bf38      	it	cc
   b93aa:	461d      	movcc	r5, r3
   b93ac:	f894 3020 	ldrb.w	r3, [r4, #32]
   b93b0:	429d      	cmp	r5, r3
   b93b2:	bf28      	it	cs
   b93b4:	461d      	movcs	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b93b6:	9b03      	ldr	r3, [sp, #12]
   b93b8:	9300      	str	r3, [sp, #0]
   b93ba:	464a      	mov	r2, r9
   b93bc:	9b04      	ldr	r3, [sp, #16]
   b93be:	4659      	mov	r1, fp
   b93c0:	4638      	mov	r0, r7
   b93c2:	f7fd f830 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b93c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b93c8:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b93ca:	9b03      	ldr	r3, [sp, #12]
   b93cc:	3301      	adds	r3, #1
   b93ce:	e790      	b.n	b92f2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b93d0:	9b04      	ldr	r3, [sp, #16]
   b93d2:	3301      	adds	r3, #1
   b93d4:	9304      	str	r3, [sp, #16]
   b93d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b93d8:	4498      	add	r8, r3
   b93da:	e785      	b.n	b92e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b93dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b93de:	f109 0901 	add.w	r9, r9, #1
   b93e2:	449a      	add	sl, r3
   b93e4:	e778      	b.n	b92d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8c>
  for (int batch = 0; batch < batches; ++batch) {
   b93e6:	f10b 0b01 	add.w	fp, fp, #1
   b93ea:	e76e      	b.n	b92ca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   b93ec:	b019      	add	sp, #100	; 0x64
   b93ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b93f2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   b93f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b93f6:	b097      	sub	sp, #92	; 0x5c
   b93f8:	4698      	mov	r8, r3
   b93fa:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b93fc:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b9400:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   b9402:	4605      	mov	r5, r0
   b9404:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b9406:	dd01      	ble.n	b940c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   b9408:	f00b f9f8 	bl	c47fc <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b940c:	680b      	ldr	r3, [r1, #0]
   b940e:	2b04      	cmp	r3, #4
   b9410:	d1fa      	bne.n	b9408 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b9412:	f8d8 3000 	ldr.w	r3, [r8]
   b9416:	2b04      	cmp	r3, #4
   b9418:	d1f6      	bne.n	b9408 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b941a:	2300      	movs	r3, #0
   b941c:	4619      	mov	r1, r3
   b941e:	4642      	mov	r2, r8
   b9420:	4638      	mov	r0, r7
   b9422:	f7ff fc7e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9426:	2303      	movs	r3, #3
   b9428:	4619      	mov	r1, r3
   b942a:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b942c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b942e:	4638      	mov	r0, r7
   b9430:	f7ff fc77 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b9434:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9436:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   b9438:	4638      	mov	r0, r7
   b943a:	f7fc ff8d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b943e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b9440:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   b9442:	4638      	mov	r0, r7
   b9444:	f7fc ff88 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b9448:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b944a:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   b944c:	4640      	mov	r0, r8
   b944e:	f7fc ff83 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b9452:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b9454:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   b9456:	4640      	mov	r0, r8
   b9458:	f7fc ff7e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b945c:	68eb      	ldr	r3, [r5, #12]
   b945e:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   b9460:	692b      	ldr	r3, [r5, #16]
  const int output_width = output_shape.Dims(2);
   b9462:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   b9464:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   b9466:	2100      	movs	r1, #0
   b9468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b946a:	4299      	cmp	r1, r3
   b946c:	f280 809b 	bge.w	b95a6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1b4>
   b9470:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9474:	f8cd b010 	str.w	fp, [sp, #16]
   b9478:	9b04      	ldr	r3, [sp, #16]
   b947a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b947c:	4293      	cmp	r3, r2
   b947e:	f280 8090 	bge.w	b95a2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1b0>
   b9482:	2300      	movs	r3, #0
   b9484:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9486:	9305      	str	r3, [sp, #20]
   b9488:	9b05      	ldr	r3, [sp, #20]
   b948a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b948c:	4293      	cmp	r3, r2
   b948e:	f280 8082 	bge.w	b9596 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a4>
        for (int channel = 0; channel < depth; ++channel) {
   b9492:	2300      	movs	r3, #0
   b9494:	9302      	str	r3, [sp, #8]
   b9496:	9b02      	ldr	r3, [sp, #8]
   b9498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b949a:	4293      	cmp	r3, r2
   b949c:	da73      	bge.n	b9586 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b949e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
          const int in_x_origin =
   b94a2:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b94a4:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
          const int in_x_origin =
   b94a8:	eba3 0309 	sub.w	r3, r3, r9
   b94ac:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   b94ae:	ebab 0306 	sub.w	r3, fp, r6
   b94b2:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b94b4:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b94b6:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b94b8:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   b94bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b94be:	1a9a      	subs	r2, r3, r2
   b94c0:	69ab      	ldr	r3, [r5, #24]
   b94c2:	429a      	cmp	r2, r3
   b94c4:	bfa8      	it	ge
   b94c6:	461a      	movge	r2, r3
   b94c8:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b94ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b94cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b94ce:	1a9a      	subs	r2, r3, r2
   b94d0:	696b      	ldr	r3, [r5, #20]
   b94d2:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b94d4:	eba6 060b 	sub.w	r6, r6, fp
   b94d8:	bfa8      	it	ge
   b94da:	461a      	movge	r2, r3
          int32 acc = 0;
   b94dc:	2400      	movs	r4, #0
   b94de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   b94e2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b94e6:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   b94e8:	46a2      	mov	sl, r4
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b94ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b94ec:	429e      	cmp	r6, r3
   b94ee:	da24      	bge.n	b953a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x148>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b94f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b94f2:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b94f6:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b94f8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   b94fc:	4283      	cmp	r3, r0
   b94fe:	da12      	bge.n	b9526 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9500:	9b02      	ldr	r3, [sp, #8]
   b9502:	9806      	ldr	r0, [sp, #24]
   b9504:	9300      	str	r3, [sp, #0]
   b9506:	9b08      	ldr	r3, [sp, #32]
   b9508:	4403      	add	r3, r0
   b950a:	4638      	mov	r0, r7
   b950c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   b9510:	f7fc ff89 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   b9514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9516:	561b      	ldrsb	r3, [r3, r0]
   b9518:	441c      	add	r4, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b951a:	9b06      	ldr	r3, [sp, #24]
   b951c:	3301      	adds	r3, #1
   b951e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   b9522:	9306      	str	r3, [sp, #24]
   b9524:	e7e8      	b.n	b94f8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   b9526:	9b07      	ldr	r3, [sp, #28]
   b9528:	9a07      	ldr	r2, [sp, #28]
   b952a:	eba3 0309 	sub.w	r3, r3, r9
   b952e:	454a      	cmp	r2, r9
   b9530:	bfb8      	it	lt
   b9532:	2300      	movlt	r3, #0
   b9534:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9536:	3601      	adds	r6, #1
   b9538:	e7d7      	b.n	b94ea <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf8>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b953a:	2c00      	cmp	r4, #0
                        : (acc - filter_count / 2) / filter_count;
   b953c:	bfdc      	itt	le
   b953e:	eb0a 73da 	addle.w	r3, sl, sl, lsr #31
   b9542:	eba4 0463 	suble.w	r4, r4, r3, asr #1
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9546:	9b02      	ldr	r3, [sp, #8]
   b9548:	9300      	str	r3, [sp, #0]
   b954a:	4640      	mov	r0, r8
   b954c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b9550:	bfd4      	ite	le
   b9552:	fb94 fafa 	sdivle	sl, r4, sl
   b9556:	eb04 046a 	addgt.w	r4, r4, sl, asr #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b955a:	9106      	str	r1, [sp, #24]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b955c:	bfc8      	it	gt
   b955e:	fbb4 fafa 	udivgt	sl, r4, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9562:	f7fc ff60 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9566:	69ec      	ldr	r4, [r5, #28]
   b9568:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   b956a:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b956c:	45a2      	cmp	sl, r4
   b956e:	bfb8      	it	lt
   b9570:	46a2      	movlt	sl, r4
   b9572:	6a2c      	ldr	r4, [r5, #32]
   b9574:	45a2      	cmp	sl, r4
   b9576:	bfa8      	it	ge
   b9578:	46a2      	movge	sl, r4
   b957a:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b957e:	9b02      	ldr	r3, [sp, #8]
   b9580:	3301      	adds	r3, #1
   b9582:	9302      	str	r3, [sp, #8]
   b9584:	e787      	b.n	b9496 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9586:	9b05      	ldr	r3, [sp, #20]
   b9588:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b958a:	3301      	adds	r3, #1
   b958c:	9305      	str	r3, [sp, #20]
   b958e:	9b03      	ldr	r3, [sp, #12]
   b9590:	4413      	add	r3, r2
   b9592:	9303      	str	r3, [sp, #12]
   b9594:	e778      	b.n	b9488 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9596:	9b04      	ldr	r3, [sp, #16]
   b9598:	3301      	adds	r3, #1
   b959a:	9304      	str	r3, [sp, #16]
   b959c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b959e:	449b      	add	fp, r3
   b95a0:	e76a      	b.n	b9478 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b95a2:	3101      	adds	r1, #1
   b95a4:	e760      	b.n	b9468 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   b95a6:	b017      	add	sp, #92	; 0x5c
   b95a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
   b95ac:	2801      	cmp	r0, #1
   b95ae:	d003      	beq.n	b95b8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   b95b0:	2802      	cmp	r0, #2
   b95b2:	d006      	beq.n	b95c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   b95b4:	2000      	movs	r0, #0
   b95b6:	4770      	bx	lr
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
   b95b8:	4419      	add	r1, r3
   b95ba:	3901      	subs	r1, #1
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
   b95bc:	fb91 f0f3 	sdiv	r0, r1, r3
    default:
      return 0;
  }
}
   b95c0:	4770      	bx	lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b95c2:	1e50      	subs	r0, r2, #1
   b95c4:	9a00      	ldr	r2, [sp, #0]
   b95c6:	4350      	muls	r0, r2
      return (image_size + stride - effective_filter_size) / stride;
   b95c8:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b95ca:	3001      	adds	r0, #1
      return (image_size + stride - effective_filter_size) / stride;
   b95cc:	1a09      	subs	r1, r1, r0
   b95ce:	e7f5      	b.n	b95bc <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

000b95d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b95d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return t->dims->data[dim];
   b95d4:	e9d1 9302 	ldrd	r9, r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   b95d8:	e9d0 5403 	ldrd	r5, r4, [r0, #12]
      params->stride_height, params->stride_width,
   b95dc:	e9d0 8a01 	ldrd	r8, sl, [r0, #4]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b95e0:	b085      	sub	sp, #20
      params->filter_width, params->padding, &out_height, &out_width);
   b95e2:	f890 b000 	ldrb.w	fp, [r0]
   b95e6:	9302      	str	r3, [sp, #8]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b95e8:	2701      	movs	r7, #1
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b95ea:	4616      	mov	r6, r2
   b95ec:	9902      	ldr	r1, [sp, #8]
   b95ee:	9700      	str	r7, [sp, #0]
   b95f0:	4643      	mov	r3, r8
   b95f2:	462a      	mov	r2, r5
   b95f4:	4658      	mov	r0, fp
   b95f6:	f7ff ffd9 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b95fa:	9700      	str	r7, [sp, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b95fc:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b95fe:	4653      	mov	r3, sl
   b9600:	4622      	mov	r2, r4
   b9602:	4649      	mov	r1, r9
   b9604:	4658      	mov	r0, fp
   b9606:	f7ff ffd1 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b960a:	9b03      	ldr	r3, [sp, #12]
   b960c:	1e5f      	subs	r7, r3, #1
  int total_padding =
   b960e:	9b02      	ldr	r3, [sp, #8]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b9610:	3801      	subs	r0, #1
   b9612:	fb08 5507 	mla	r5, r8, r7, r5
   b9616:	fb0a 4a00 	mla	sl, sl, r0, r4
  int total_padding =
   b961a:	1aed      	subs	r5, r5, r3
   b961c:	ebaa 0909 	sub.w	r9, sl, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   b9620:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   b9624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   b9628:	106b      	asrs	r3, r5, #1
      params->filter_width, params->padding, &out_height, &out_width);
   b962a:	6033      	str	r3, [r6, #0]
  *offset = total_padding % 2;
   b962c:	f005 0501 	and.w	r5, r5, #1
  return total_padding / 2;
   b9630:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   b9634:	f009 0401 	and.w	r4, r9, #1
}
   b9638:	2000      	movs	r0, #0
      params->filter_width, params->padding, &out_height, &out_width);
   b963a:	6073      	str	r3, [r6, #4]
   b963c:	60b5      	str	r5, [r6, #8]
   b963e:	60f4      	str	r4, [r6, #12]
}
   b9640:	b005      	add	sp, #20
   b9642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b9648 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   b9648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b964c:	680b      	ldr	r3, [r1, #0]
   b964e:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b9652:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   b9654:	694d      	ldr	r5, [r1, #20]
   b9656:	2438      	movs	r4, #56	; 0x38
   b9658:	fb04 f903 	mul.w	r9, r4, r3
   b965c:	eb0a 0809 	add.w	r8, sl, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b9660:	684b      	ldr	r3, [r1, #4]
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b9662:	f8d8 1008 	ldr.w	r1, [r8, #8]
   b9666:	f8d3 b004 	ldr.w	fp, [r3, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   b966a:	b0a1      	sub	sp, #132	; 0x84
   b966c:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b966e:	aa07      	add	r2, sp, #28
   b9670:	4628      	mov	r0, r5
   b9672:	f7ff ffad 	bl	b95d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>
   b9676:	4606      	mov	r6, r0
   b9678:	b970      	cbnz	r0, b9698 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x50>

  switch (input->type) {
   b967a:	f81a 0009 	ldrb.w	r0, [sl, r9]
   b967e:	2801      	cmp	r0, #1
   b9680:	fb04 a40b 	mla	r4, r4, fp, sl
   b9684:	d00a      	beq.n	b969c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
   b9686:	2803      	cmp	r0, #3
   b9688:	d054      	beq.n	b9734 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
      break;
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, &data, input, output);
      break;
    default:
      context->ReportError(context, "Type %s not currently supported.",
   b968a:	697c      	ldr	r4, [r7, #20]
   b968c:	f7fb fa7a 	bl	b4b84 <TfLiteTypeGetName>
   b9690:	493f      	ldr	r1, [pc, #252]	; (b9790 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   b9692:	4602      	mov	r2, r0
   b9694:	4638      	mov	r0, r7
   b9696:	47a0      	blx	r4
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b9698:	2601      	movs	r6, #1
   b969a:	e03f      	b.n	b971c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  CalculateActivationRange(params->activation, &activation_min,
   b969c:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
   b969e:	2b01      	cmp	r3, #1
   b96a0:	d040      	beq.n	b9724 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xdc>
  } else if (activation == kTfLiteActRelu6) {
   b96a2:	2b03      	cmp	r3, #3
   b96a4:	d043      	beq.n	b972e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
    *activation_max = std::numeric_limits<T>::max();
   b96a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; b9794 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>
   b96aa:	eddf 6a3b 	vldr	s13, [pc, #236]	; b9798 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
   b96ae:	2b02      	cmp	r3, #2
   b96b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b96b4:	bf18      	it	ne
   b96b6:	eef0 7a47 	vmovne.f32	s15, s14
   b96ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b96be:	bf18      	it	ne
   b96c0:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.stride_height = params->stride_height;
   b96c4:	68ab      	ldr	r3, [r5, #8]
   b96c6:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b96c8:	686b      	ldr	r3, [r5, #4]
   b96ca:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b96cc:	692b      	ldr	r3, [r5, #16]
   b96ce:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b96d0:	68eb      	ldr	r3, [r5, #12]
   b96d2:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b96d4:	9b08      	ldr	r3, [sp, #32]
   b96d6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b96da:	4641      	mov	r1, r8
  op_params.padding_values.width = data->padding.width;
   b96dc:	9b07      	ldr	r3, [sp, #28]
   b96de:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b96e2:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.float_activation_min = activation_min;
   b96e4:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  op_params.float_activation_max = activation_max;
   b96e8:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b96ec:	f7fd f8cd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b96f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b96f4:	9203      	str	r2, [sp, #12]
                         GetTensorData<float>(input), GetTensorShape(output),
   b96f6:	4621      	mov	r1, r4
   b96f8:	a810      	add	r0, sp, #64	; 0x40
   b96fa:	f7fd f8c6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b96fe:	9a03      	ldr	r2, [sp, #12]
   b9700:	b104      	cbz	r4, b9704 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   b9702:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9704:	9400      	str	r4, [sp, #0]
   b9706:	ab10      	add	r3, sp, #64	; 0x40
   b9708:	a90b      	add	r1, sp, #44	; 0x2c
   b970a:	a815      	add	r0, sp, #84	; 0x54
   b970c:	f7ff fcc4 	bl	b9098 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
   b9710:	a810      	add	r0, sp, #64	; 0x40
   b9712:	f7fc fe16 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9716:	a80b      	add	r0, sp, #44	; 0x2c
   b9718:	f7fc fe13 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                           TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   b971c:	4630      	mov	r0, r6
   b971e:	b021      	add	sp, #132	; 0x84
   b9720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   b9724:	eddf 7a1b 	vldr	s15, [pc, #108]	; b9794 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>
    *activation_min = 0;
   b9728:	ed9f 7a1c 	vldr	s14, [pc, #112]	; b979c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
   b972c:	e7ca      	b.n	b96c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
    *activation_max = 6;
   b972e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b9732:	e7f9      	b.n	b9728 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe0>
  CalculateActivationRangeUint8(params->activation, output, &activation_min,
   b9734:	aa05      	add	r2, sp, #20
   b9736:	7d28      	ldrb	r0, [r5, #20]
   b9738:	ab06      	add	r3, sp, #24
   b973a:	4621      	mov	r1, r4
   b973c:	f7fb fc1e 	bl	b4f7c <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b9740:	68ab      	ldr	r3, [r5, #8]
   b9742:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9744:	686b      	ldr	r3, [r5, #4]
   b9746:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b9748:	692b      	ldr	r3, [r5, #16]
   b974a:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b974c:	68eb      	ldr	r3, [r5, #12]
   b974e:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b9750:	9b08      	ldr	r3, [sp, #32]
   b9752:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b9756:	9b07      	ldr	r3, [sp, #28]
   b9758:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b975c:	9b05      	ldr	r3, [sp, #20]
   b975e:	931c      	str	r3, [sp, #112]	; 0x70
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9760:	4641      	mov	r1, r8
  op_params.quantized_activation_max = activation_max;
   b9762:	9b06      	ldr	r3, [sp, #24]
   b9764:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9766:	a80b      	add	r0, sp, #44	; 0x2c
   b9768:	f7fd f88f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b976c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b9770:	9203      	str	r2, [sp, #12]
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
   b9772:	4621      	mov	r1, r4
   b9774:	a810      	add	r0, sp, #64	; 0x40
   b9776:	f7fd f888 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b977a:	9a03      	ldr	r2, [sp, #12]
   b977c:	b104      	cbz	r4, b9780 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x138>
   b977e:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9780:	9400      	str	r4, [sp, #0]
   b9782:	ab10      	add	r3, sp, #64	; 0x40
   b9784:	a90b      	add	r1, sp, #44	; 0x2c
   b9786:	a815      	add	r0, sp, #84	; 0x54
   b9788:	f7ff fd60 	bl	b924c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   b978c:	e7c0      	b.n	b9710 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
   b978e:	bf00      	nop
   b9790:	000c8616 	.word	0x000c8616
   b9794:	7f7fffff 	.word	0x7f7fffff
   b9798:	ff7fffff 	.word	0xff7fffff
   b979c:	00000000 	.word	0x00000000

000b97a0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   b97a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b97a4:	680b      	ldr	r3, [r1, #0]
   b97a6:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b97aa:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   b97ac:	694d      	ldr	r5, [r1, #20]
   b97ae:	2438      	movs	r4, #56	; 0x38
   b97b0:	fb04 f903 	mul.w	r9, r4, r3
   b97b4:	eb0a 0609 	add.w	r6, sl, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b97b8:	684b      	ldr	r3, [r1, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b97ba:	68b1      	ldr	r1, [r6, #8]
   b97bc:	f8d3 b004 	ldr.w	fp, [r3, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   b97c0:	b0a1      	sub	sp, #132	; 0x84
   b97c2:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b97c4:	aa07      	add	r2, sp, #28
   b97c6:	4628      	mov	r0, r5
   b97c8:	f7ff ff02 	bl	b95d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>
   b97cc:	4607      	mov	r7, r0
   b97ce:	2800      	cmp	r0, #0
   b97d0:	f040 80b6 	bne.w	b9940 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
  switch (input->type) {
   b97d4:	f81a 0009 	ldrb.w	r0, [sl, r9]
   b97d8:	2803      	cmp	r0, #3
   b97da:	fb04 a40b 	mla	r4, r4, fp, sl
   b97de:	d04f      	beq.n	b9880 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe0>
   b97e0:	2809      	cmp	r0, #9
   b97e2:	d079      	beq.n	b98d8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x138>
   b97e4:	2801      	cmp	r0, #1
   b97e6:	f040 80a3 	bne.w	b9930 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x190>
  CalculateActivationRange(params->activation, &activation_min,
   b97ea:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
   b97ec:	2b01      	cmp	r3, #1
   b97ee:	d03f      	beq.n	b9870 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>
  } else if (activation == kTfLiteActRelu6) {
   b97f0:	2b03      	cmp	r3, #3
   b97f2:	d042      	beq.n	b987a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xda>
    *activation_max = std::numeric_limits<T>::max();
   b97f4:	ed9f 7a53 	vldr	s14, [pc, #332]	; b9944 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   b97f8:	eddf 6a53 	vldr	s13, [pc, #332]	; b9948 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
   b97fc:	2b02      	cmp	r3, #2
   b97fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b9802:	bf18      	it	ne
   b9804:	eef0 7a47 	vmovne.f32	s15, s14
   b9808:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b980c:	bf18      	it	ne
   b980e:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.stride_height = params->stride_height;
   b9812:	68ab      	ldr	r3, [r5, #8]
   b9814:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9816:	686b      	ldr	r3, [r5, #4]
   b9818:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b981a:	692b      	ldr	r3, [r5, #16]
   b981c:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b981e:	68eb      	ldr	r3, [r5, #12]
   b9820:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b9822:	9b08      	ldr	r3, [sp, #32]
   b9824:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b9828:	4631      	mov	r1, r6
  op_params.padding_values.width = data->padding.width;
   b982a:	9b07      	ldr	r3, [sp, #28]
   b982c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b9830:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.float_activation_min = activation_min;
   b9832:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  op_params.float_activation_max = activation_max;
   b9836:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b983a:	f7fd f826 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b983e:	6872      	ldr	r2, [r6, #4]
   b9840:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<float>(output));
   b9842:	4621      	mov	r1, r4
   b9844:	a810      	add	r0, sp, #64	; 0x40
   b9846:	f7fd f820 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b984a:	9a03      	ldr	r2, [sp, #12]
   b984c:	b104      	cbz	r4, b9850 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>
   b984e:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   b9850:	9400      	str	r4, [sp, #0]
   b9852:	ab10      	add	r3, sp, #64	; 0x40
   b9854:	a90b      	add	r1, sp, #44	; 0x2c
   b9856:	a815      	add	r0, sp, #84	; 0x54
   b9858:	f7ff fa72 	bl	b8d40 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<int8_t>(output));
   b985c:	a810      	add	r0, sp, #64	; 0x40
   b985e:	f7fc fd70 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b9862:	a80b      	add	r0, sp, #44	; 0x2c
   b9864:	f7fc fd6d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b9868:	4638      	mov	r0, r7
   b986a:	b021      	add	sp, #132	; 0x84
   b986c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   b9870:	eddf 7a34 	vldr	s15, [pc, #208]	; b9944 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    *activation_min = 0;
   b9874:	ed9f 7a35 	vldr	s14, [pc, #212]	; b994c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   b9878:	e7cb      	b.n	b9812 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
    *activation_max = 6;
   b987a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b987e:	e7f9      	b.n	b9874 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  CalculateActivationRangeUint8(params->activation, output, &activation_min,
   b9880:	aa05      	add	r2, sp, #20
   b9882:	7d28      	ldrb	r0, [r5, #20]
   b9884:	ab06      	add	r3, sp, #24
   b9886:	4621      	mov	r1, r4
   b9888:	f7fb fb78 	bl	b4f7c <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b988c:	68ab      	ldr	r3, [r5, #8]
   b988e:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9890:	686b      	ldr	r3, [r5, #4]
   b9892:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b9894:	692b      	ldr	r3, [r5, #16]
   b9896:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b9898:	68eb      	ldr	r3, [r5, #12]
   b989a:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b989c:	9b08      	ldr	r3, [sp, #32]
   b989e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b98a2:	9b07      	ldr	r3, [sp, #28]
   b98a4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b98a8:	9b05      	ldr	r3, [sp, #20]
   b98aa:	931c      	str	r3, [sp, #112]	; 0x70
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b98ac:	4631      	mov	r1, r6
  op_params.quantized_activation_max = activation_max;
   b98ae:	9b06      	ldr	r3, [sp, #24]
   b98b0:	931d      	str	r3, [sp, #116]	; 0x74
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b98b2:	a80b      	add	r0, sp, #44	; 0x2c
   b98b4:	f7fc ffe9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b98b8:	6872      	ldr	r2, [r6, #4]
   b98ba:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   b98bc:	4621      	mov	r1, r4
   b98be:	a810      	add	r0, sp, #64	; 0x40
   b98c0:	f7fc ffe3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b98c4:	9a03      	ldr	r2, [sp, #12]
   b98c6:	b104      	cbz	r4, b98ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x12a>
   b98c8:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   b98ca:	9400      	str	r4, [sp, #0]
   b98cc:	ab10      	add	r3, sp, #64	; 0x40
   b98ce:	a90b      	add	r1, sp, #44	; 0x2c
   b98d0:	a815      	add	r0, sp, #84	; 0x54
   b98d2:	f7ff fb0f 	bl	b8ef4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   b98d6:	e7c1      	b.n	b985c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  CalculateActivationRangeInt8(params->activation, output, &activation_min,
   b98d8:	aa05      	add	r2, sp, #20
   b98da:	7d28      	ldrb	r0, [r5, #20]
   b98dc:	ab06      	add	r3, sp, #24
   b98de:	4621      	mov	r1, r4
   b98e0:	f7fb fc50 	bl	b5184 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b98e4:	68ab      	ldr	r3, [r5, #8]
   b98e6:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b98e8:	686b      	ldr	r3, [r5, #4]
   b98ea:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b98ec:	692b      	ldr	r3, [r5, #16]
   b98ee:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b98f0:	68eb      	ldr	r3, [r5, #12]
   b98f2:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b98f4:	9b08      	ldr	r3, [sp, #32]
   b98f6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b98fa:	9b07      	ldr	r3, [sp, #28]
   b98fc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b9900:	9b05      	ldr	r3, [sp, #20]
   b9902:	931c      	str	r3, [sp, #112]	; 0x70
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b9904:	4631      	mov	r1, r6
  op_params.quantized_activation_max = activation_max;
   b9906:	9b06      	ldr	r3, [sp, #24]
   b9908:	931d      	str	r3, [sp, #116]	; 0x74
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b990a:	a80b      	add	r0, sp, #44	; 0x2c
   b990c:	f7fc ffbd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9910:	6872      	ldr	r2, [r6, #4]
   b9912:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   b9914:	4621      	mov	r1, r4
   b9916:	a810      	add	r0, sp, #64	; 0x40
   b9918:	f7fc ffb7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b991c:	9a03      	ldr	r2, [sp, #12]
   b991e:	b104      	cbz	r4, b9922 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x182>
   b9920:	6864      	ldr	r4, [r4, #4]
  reference_integer_ops::AveragePool(
   b9922:	9400      	str	r4, [sp, #0]
   b9924:	ab10      	add	r3, sp, #64	; 0x40
   b9926:	a90b      	add	r1, sp, #44	; 0x2c
   b9928:	a815      	add	r0, sp, #84	; 0x54
   b992a:	f7ff fd62 	bl	b93f2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   b992e:	e795      	b.n	b985c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xbc>
      context->ReportError(context, "Input type %s is not currently supported",
   b9930:	f8d8 4014 	ldr.w	r4, [r8, #20]
   b9934:	f7fb f926 	bl	b4b84 <TfLiteTypeGetName>
   b9938:	4905      	ldr	r1, [pc, #20]	; (b9950 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b0>)
   b993a:	4602      	mov	r2, r0
   b993c:	4640      	mov	r0, r8
   b993e:	47a0      	blx	r4
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b9940:	2701      	movs	r7, #1
   b9942:	e791      	b.n	b9868 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xc8>
   b9944:	7f7fffff 	.word	0x7f7fffff
   b9948:	ff7fffff 	.word	0xff7fffff
   b994c:	00000000 	.word	0x00000000
   b9950:	000c8637 	.word	0x000c8637

000b9954 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
      pooling::Free,
      pooling::Prepare,
      pooling::AverageEval,
  };
  return &r;
}
   b9954:	4800      	ldr	r0, [pc, #0]	; (b9958 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x4>)
   b9956:	4770      	bx	lr
   b9958:	2003c1d8 	.word	0x2003c1d8

000b995c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:

TfLiteRegistration* Register_MAX_POOL_2D() {
  static TfLiteRegistration r = {pooling::Init, pooling::Free, pooling::Prepare,
                                 pooling::MaxEval};
  return &r;
}
   b995c:	4800      	ldr	r0, [pc, #0]	; (b9960 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x4>)
   b995e:	4770      	bx	lr
   b9960:	2003c1b8 	.word	0x2003c1b8

000b9964 <_ZN6tflite3ops5micro11activations4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b9964:	2000      	movs	r0, #0
   b9966:	4770      	bx	lr

000b9968 <_ZN6tflite3ops5micro11activations4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b9968:	4770      	bx	lr

000b996a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b996a:	2000      	movs	r0, #0
   b996c:	4770      	bx	lr
	...

000b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b9970:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   b9972:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b9974:	d119      	bne.n	b99aa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3a>
   b9976:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   b997a:	425c      	negs	r4, r3
   b997c:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   b997e:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b9982:	2b00      	cmp	r3, #0
   b9984:	4a0b      	ldr	r2, [pc, #44]	; (b99b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x44>)
   b9986:	bfa8      	it	ge
   b9988:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b998c:	b97c      	cbnz	r4, b99ae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b998e:	1811      	adds	r1, r2, r0
   b9990:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
   b9994:	2800      	cmp	r0, #0
   b9996:	da04      	bge.n	b99a2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x32>
   b9998:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b999c:	18c9      	adds	r1, r1, r3
   b999e:	f140 0000 	adc.w	r0, r0, #0
   b99a2:	0fc9      	lsrs	r1, r1, #31
   b99a4:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
   b99a8:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b99aa:	2400      	movs	r4, #0
   b99ac:	e7e7      	b.n	b997e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe>
   b99ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b99b2:	e7f9      	b.n	b99a8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x38>
   b99b4:	c0000001 	.word	0xc0000001

000b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b99b8:	460b      	mov	r3, r1
    if (dimensions_count > kMaxSmallSize) {
   b99ba:	2b04      	cmp	r3, #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b99bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b99be:	4604      	mov	r4, r0
   b99c0:	4611      	mov	r1, r2
    size_ = dimensions_count;
   b99c2:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32[dimensions_count];
   b99c4:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   b99c8:	dc06      	bgt.n	b99d8 <_ZN6tflite12RuntimeShapeC1EiPKl+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b99ca:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   b99cc:	462a      	mov	r2, r5
   b99ce:	f00d f8a1 	bl	c6b14 <memcpy>
  }
   b99d2:	4620      	mov	r0, r4
   b99d4:	b003      	add	sp, #12
   b99d6:	bd30      	pop	{r4, r5, pc}
   b99d8:	9201      	str	r2, [sp, #4]
      dims_pointer_ = new int32[dimensions_count];
   b99da:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   b99de:	4293      	cmp	r3, r2
   b99e0:	bfb4      	ite	lt
   b99e2:	4628      	movlt	r0, r5
   b99e4:	f04f 30ff 	movge.w	r0, #4294967295
   b99e8:	f7fb f88b 	bl	b4b02 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b99ec:	6823      	ldr	r3, [r4, #0]
   b99ee:	9901      	ldr	r1, [sp, #4]
      dims_pointer_ = new int32[dimensions_count];
   b99f0:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b99f2:	2b04      	cmp	r3, #4
   b99f4:	dcea      	bgt.n	b99cc <_ZN6tflite12RuntimeShapeC1EiPKl+0x14>
   b99f6:	e7e8      	b.n	b99ca <_ZN6tflite12RuntimeShapeC1EiPKl+0x12>

000b99f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   b99f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32 DimensionsCount() const { return size_; }
   b99fc:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   b99fe:	4604      	mov	r4, r0
   b9a00:	460d      	mov	r5, r1
   b9a02:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   b9a04:	2600      	movs	r6, #0
   b9a06:	42be      	cmp	r6, r7
   b9a08:	da10      	bge.n	b9a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   b9a0a:	42ae      	cmp	r6, r5
   b9a0c:	d00c      	beq.n	b9a28 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b9a0e:	4631      	mov	r1, r6
   b9a10:	4620      	mov	r0, r4
   b9a12:	f7fc fca1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9a16:	4631      	mov	r1, r6
   b9a18:	4681      	mov	r9, r0
   b9a1a:	4640      	mov	r0, r8
   b9a1c:	f7fc fc9c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9a20:	4581      	cmp	r9, r0
   b9a22:	d001      	beq.n	b9a28 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   b9a24:	f00a feea 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   b9a28:	3601      	adds	r6, #1
   b9a2a:	e7ec      	b.n	b9a06 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   b9a2c:	2d00      	cmp	r5, #0
   b9a2e:	dbf9      	blt.n	b9a24 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   b9a30:	42bd      	cmp	r5, r7
   b9a32:	daf7      	bge.n	b9a24 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9a34:	2f04      	cmp	r7, #4
   b9a36:	bfcc      	ite	gt
   b9a38:	6864      	ldrgt	r4, [r4, #4]
   b9a3a:	3404      	addle	r4, #4
  int flat_size = 1;
   b9a3c:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   b9a3e:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9a40:	429d      	cmp	r5, r3
   b9a42:	bf18      	it	ne
   b9a44:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   b9a48:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9a4c:	bf08      	it	eq
   b9a4e:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   b9a50:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9a52:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   b9a56:	dcf3      	bgt.n	b9a40 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   b9a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9a5c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   b9a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a60:	ed2d 8b02 	vpush	{d8}
   b9a64:	b089      	sub	sp, #36	; 0x24
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9a66:	680d      	ldr	r5, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
   b9a68:	9001      	str	r0, [sp, #4]
   b9a6a:	460e      	mov	r6, r1
   b9a6c:	4614      	mov	r4, r2
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9a6e:	1e69      	subs	r1, r5, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9a70:	461a      	mov	r2, r3
   b9a72:	4630      	mov	r0, r6
                    const RuntimeShape& output_shape, float* output_data) {
   b9a74:	4698      	mov	r8, r3
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9a76:	9102      	str	r1, [sp, #8]
   b9a78:	f7ff ffbe 	bl	b99f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   b9a7c:	9902      	ldr	r1, [sp, #8]
   b9a7e:	9004      	str	r0, [sp, #16]
   b9a80:	4630      	mov	r0, r6
   b9a82:	f7fc fc69 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9a86:	9902      	ldr	r1, [sp, #8]
   b9a88:	4605      	mov	r5, r0
   b9a8a:	4640      	mov	r0, r8
   b9a8c:	f7fc fc64 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9a90:	4285      	cmp	r5, r0
   b9a92:	d120      	bne.n	b9ad6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7a>
   b9a94:	00ab      	lsls	r3, r5, #2
   b9a96:	f04f 0800 	mov.w	r8, #0

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   b9a9a:	ed9f 8a3f 	vldr	s16, [pc, #252]	; b9b98 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
   b9a9e:	9305      	str	r3, [sp, #20]
  for (int i = 0; i < outer_size; ++i) {
   b9aa0:	4647      	mov	r7, r8
   b9aa2:	9b04      	ldr	r3, [sp, #16]
   b9aa4:	429f      	cmp	r7, r3
   b9aa6:	da72      	bge.n	b9b8e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x132>
    float max = std::numeric_limits<float>::lowest();
   b9aa8:	ed8d 8a07 	vstr	s16, [sp, #28]
   b9aac:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
   b9aae:	2200      	movs	r2, #0
   b9ab0:	42aa      	cmp	r2, r5
   b9ab2:	da12      	bge.n	b9ada <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
      max = std::max(max, input_data[i * depth + c]);
   b9ab4:	460b      	mov	r3, r1
      if (__a < __b)
   b9ab6:	ed93 7a00 	vldr	s14, [r3]
   b9aba:	eddd 7a07 	vldr	s15, [sp, #28]
   b9abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b9ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   b9ac6:	a807      	add	r0, sp, #28
   b9ac8:	bfd8      	it	le
   b9aca:	4603      	movle	r3, r0
   b9acc:	3104      	adds	r1, #4
   b9ace:	681b      	ldr	r3, [r3, #0]
   b9ad0:	9307      	str	r3, [sp, #28]
    for (int c = 0; c < depth; ++c) {
   b9ad2:	3201      	adds	r2, #1
   b9ad4:	e7ec      	b.n	b9ab0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x54>
   b9ad6:	f00a fe91 	bl	c47fc <abort>
   b9ada:	46a2      	mov	sl, r4
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
   b9adc:	f04f 0900 	mov.w	r9, #0
    float sum = 0.f;
   b9ae0:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
   b9ae2:	45a9      	cmp	r9, r5
   b9ae4:	db2c      	blt.n	b9b40 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
   b9ae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9ae8:	46a3      	mov	fp, r4
   b9aea:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   b9aee:	f04f 0900 	mov.w	r9, #0
   b9af2:	45a9      	cmp	r9, r5
   b9af4:	da46      	bge.n	b9b84 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x128>
      output_data[i * depth + c] =
          std::exp((input_data[i * depth + c] - max) * params.beta) / sum;
   b9af6:	ecbb 7a01 	vldmia	fp!, {s14}
   b9afa:	eddd 7a07 	vldr	s15, [sp, #28]
   b9afe:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (int c = 0; c < depth; ++c) {
   b9b02:	f109 0901 	add.w	r9, r9, #1
          std::exp((input_data[i * depth + c] - max) * params.beta) / sum;
   b9b06:	ee17 0a90 	vmov	r0, s15
   b9b0a:	f7fa fbed 	bl	b42e8 <__aeabi_f2d>
   b9b0e:	9b01      	ldr	r3, [sp, #4]
   b9b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b14:	f7fa fc40 	bl	b4398 <__aeabi_dmul>
   b9b18:	ec41 0b10 	vmov	d0, r0, r1
   b9b1c:	f00b fd30 	bl	c5580 <exp>
   b9b20:	4630      	mov	r0, r6
   b9b22:	ed8d 0b02 	vstr	d0, [sp, #8]
   b9b26:	f7fa fbdf 	bl	b42e8 <__aeabi_f2d>
   b9b2a:	4602      	mov	r2, r0
   b9b2c:	460b      	mov	r3, r1
   b9b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b9b32:	f7fa fd5b 	bl	b45ec <__aeabi_ddiv>
   b9b36:	f7fa ff11 	bl	b495c <__aeabi_d2f>
   b9b3a:	f84a 0b04 	str.w	r0, [sl], #4
    for (int c = 0; c < depth; ++c) {
   b9b3e:	e7d8      	b.n	b9af2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x96>
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
   b9b40:	ecba 7a01 	vldmia	sl!, {s14}
   b9b44:	eddd 7a07 	vldr	s15, [sp, #28]
   b9b48:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (int c = 0; c < depth; ++c) {
   b9b4c:	f109 0901 	add.w	r9, r9, #1
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
   b9b50:	ee17 0a90 	vmov	r0, s15
   b9b54:	f7fa fbc8 	bl	b42e8 <__aeabi_f2d>
   b9b58:	9b01      	ldr	r3, [sp, #4]
   b9b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b5e:	f7fa fc1b 	bl	b4398 <__aeabi_dmul>
   b9b62:	ec41 0b10 	vmov	d0, r0, r1
   b9b66:	f00b fd0b 	bl	c5580 <exp>
   b9b6a:	4630      	mov	r0, r6
   b9b6c:	ed8d 0b02 	vstr	d0, [sp, #8]
   b9b70:	f7fa fbba 	bl	b42e8 <__aeabi_f2d>
   b9b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9b78:	f7fa fa58 	bl	b402c <__adddf3>
   b9b7c:	f7fa feee 	bl	b495c <__aeabi_d2f>
   b9b80:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
   b9b82:	e7ae      	b.n	b9ae2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int i = 0; i < outer_size; ++i) {
   b9b84:	9b05      	ldr	r3, [sp, #20]
   b9b86:	3701      	adds	r7, #1
   b9b88:	441c      	add	r4, r3
   b9b8a:	44a8      	add	r8, r5
   b9b8c:	e789      	b.n	b9aa2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x46>
    }
  }
}
   b9b8e:	b009      	add	sp, #36	; 0x24
   b9b90:	ecbd 8b02 	vpop	{d8}
   b9b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b98:	ff7fffff 	.word	0xff7fffff

000b9b9c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>:
  }
}

// Performs softmax along the input of size (input_size * batch_size).
inline void Softmax(const float* in, const int input_size, const int batch_size,
                    const float beta, float* out) {
   b9b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ba0:	ed2d 8b04 	vpush	{d8-d9}
   b9ba4:	4604      	mov	r4, r0
   b9ba6:	b083      	sub	sp, #12
   b9ba8:	460e      	mov	r6, r1
   b9baa:	4690      	mov	r8, r2
   b9bac:	eef0 8a40 	vmov.f32	s17, s0
   b9bb0:	461d      	mov	r5, r3
    for (int i = 0; i < input_size; i++) {
      out[i] *= reciprocal_sum_exp;
    }

    // Advance in and out pointers for the next batch.
    in += input_size;
   b9bb2:	ea4f 0b81 	mov.w	fp, r1, lsl #2
  for (int b = 0; b < batch_size; b++) {
   b9bb6:	2700      	movs	r7, #0
    float reciprocal_sum_exp = 1.f / exp_sum;
   b9bb8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int b = 0; b < batch_size; b++) {
   b9bbc:	4547      	cmp	r7, r8
   b9bbe:	da3d      	bge.n	b9c3c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0xa0>
    float max_coeff = in[0];
   b9bc0:	ed94 8a00 	vldr	s16, [r4]
    for (int i = 1; i < input_size; i++) {
   b9bc4:	4622      	mov	r2, r4
   b9bc6:	1d21      	adds	r1, r4, #4
   b9bc8:	2301      	movs	r3, #1
   b9bca:	42b3      	cmp	r3, r6
   b9bcc:	db1a      	blt.n	b9c04 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x68>
    float exp_sum = 0.0;
   b9bce:	ed9f 9a1e 	vldr	s18, [pc, #120]	; b9c48 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0xac>
   b9bd2:	46a9      	mov	r9, r5
    for (int i = 1; i < input_size; i++) {
   b9bd4:	462b      	mov	r3, r5
    for (int i = 0; i < input_size; i++) {
   b9bd6:	f04f 0a00 	mov.w	sl, #0
   b9bda:	45b2      	cmp	sl, r6
   b9bdc:	9301      	str	r3, [sp, #4]
   b9bde:	da1c      	bge.n	b9c1a <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x7e>
      out[i] = std::exp((in[i] - max_coeff) * beta);
   b9be0:	ecb2 0a01 	vldmia	r2!, {s0}
   b9be4:	ee30 0a48 	vsub.f32	s0, s0, s16
   b9be8:	9200      	str	r2, [sp, #0]
  { return __builtin_expf(__x); }
   b9bea:	ee20 0a28 	vmul.f32	s0, s0, s17
   b9bee:	f00b fd19 	bl	c5624 <expf>
   b9bf2:	9b01      	ldr	r3, [sp, #4]
    for (int i = 0; i < input_size; i++) {
   b9bf4:	9a00      	ldr	r2, [sp, #0]
      out[i] = std::exp((in[i] - max_coeff) * beta);
   b9bf6:	eca3 0a01 	vstmia	r3!, {s0}
      exp_sum += out[i];
   b9bfa:	ee39 9a00 	vadd.f32	s18, s18, s0
    for (int i = 0; i < input_size; i++) {
   b9bfe:	f10a 0a01 	add.w	sl, sl, #1
   b9c02:	e7ea      	b.n	b9bda <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x3e>
      if (in[i] > max_coeff) max_coeff = in[i];
   b9c04:	ecf1 7a01 	vldmia	r1!, {s15}
   b9c08:	eef4 7a48 	vcmp.f32	s15, s16
   b9c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9c10:	bfc8      	it	gt
   b9c12:	eeb0 8a67 	vmovgt.f32	s16, s15
    for (int i = 1; i < input_size; i++) {
   b9c16:	3301      	adds	r3, #1
   b9c18:	e7d7      	b.n	b9bca <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x2e>
    float reciprocal_sum_exp = 1.f / exp_sum;
   b9c1a:	ee89 7a89 	vdiv.f32	s14, s19, s18
    for (int i = 0; i < input_size; i++) {
   b9c1e:	2300      	movs	r3, #0
   b9c20:	42b3      	cmp	r3, r6
   b9c22:	da07      	bge.n	b9c34 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x98>
   b9c24:	3301      	adds	r3, #1
      out[i] *= reciprocal_sum_exp;
   b9c26:	edd9 7a00 	vldr	s15, [r9]
   b9c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b9c2e:	ece9 7a01 	vstmia	r9!, {s15}
    for (int i = 0; i < input_size; i++) {
   b9c32:	e7f5      	b.n	b9c20 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x84>
    in += input_size;
   b9c34:	445c      	add	r4, fp
    out += input_size;
   b9c36:	445d      	add	r5, fp
  for (int b = 0; b < batch_size; b++) {
   b9c38:	3701      	adds	r7, #1
   b9c3a:	e7bf      	b.n	b9bbc <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x20>
  }
}
   b9c3c:	b003      	add	sp, #12
   b9c3e:	ecbd 8b04 	vpop	{d8-d9}
   b9c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c46:	bf00      	nop
   b9c48:	00000000 	.word	0x00000000

000b9c4c <_ZN6tflite3ops5micro11activations14Softmax1DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:

// Takes a 1D tensor and performs softmax along it.
void Softmax1DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9c4c:	b510      	push	{r4, lr}
  const int input_size = input->dims->data[0];
   b9c4e:	6884      	ldr	r4, [r0, #8]
  tflite::reference_ops::Softmax(input->data.f, input_size, 1, params->beta,
   b9c50:	684b      	ldr	r3, [r1, #4]
   b9c52:	ed92 0a00 	vldr	s0, [r2]
   b9c56:	6861      	ldr	r1, [r4, #4]
   b9c58:	6840      	ldr	r0, [r0, #4]
   b9c5a:	2201      	movs	r2, #1
   b9c5c:	f7ff ff9e 	bl	b9b9c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>
                                 output->data.f);
}
   b9c60:	bd10      	pop	{r4, pc}

000b9c62 <_ZN6tflite3ops5micro11activations14Softmax2DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:

// Takes a 2D tensor and perform softmax along the last dimension.
void Softmax2DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9c62:	b510      	push	{r4, lr}
  const int batch_size = input->dims->data[0];
   b9c64:	6884      	ldr	r4, [r0, #8]
  const int input_size = input->dims->data[1];
  tflite::reference_ops::Softmax(input->data.f, input_size, batch_size,
   b9c66:	684b      	ldr	r3, [r1, #4]
   b9c68:	ed92 0a00 	vldr	s0, [r2]
   b9c6c:	6840      	ldr	r0, [r0, #4]
   b9c6e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   b9c72:	f7ff ff93 	bl	b9b9c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>
                                 params->beta, output->data.f);
}
   b9c76:	bd10      	pop	{r4, pc}

000b9c78 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:
                                 GetTensorData<uint8_t>(output));
}

// Takes a 4D tensor and perform softmax along the forth dimension.
void Softmax4DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9c78:	b530      	push	{r4, r5, lr}
   b9c7a:	4604      	mov	r4, r0
   b9c7c:	b097      	sub	sp, #92	; 0x5c
  SoftmaxParams op_params;
  op_params.beta = params->beta;
   b9c7e:	6810      	ldr	r0, [r2, #0]
                    TfLiteSoftmaxParams* params) {
   b9c80:	460d      	mov	r5, r1
  op_params.beta = params->beta;
   b9c82:	f7fa fb31 	bl	b42e8 <__aeabi_f2d>
   b9c86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  if (tensor == nullptr) {
   b9c8a:	b98c      	cbnz	r4, b9cb0 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x38>
  RuntimeShape() : size_(0) {}
   b9c8c:	9402      	str	r4, [sp, #8]
   b9c8e:	b9bd      	cbnz	r5, b9cc0 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x48>
   b9c90:	9507      	str	r5, [sp, #28]
  tflite::reference_ops::Softmax(
   b9c92:	ab07      	add	r3, sp, #28
   b9c94:	4622      	mov	r2, r4
   b9c96:	a902      	add	r1, sp, #8
   b9c98:	a80c      	add	r0, sp, #48	; 0x30
   b9c9a:	9500      	str	r5, [sp, #0]
   b9c9c:	f7ff fede 	bl	b9a5c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(output), GetTensorData<float>(output));
   b9ca0:	a807      	add	r0, sp, #28
   b9ca2:	f7fc fb4e 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b9ca6:	a802      	add	r0, sp, #8
   b9ca8:	f7fc fb4b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b9cac:	b017      	add	sp, #92	; 0x5c
   b9cae:	bd30      	pop	{r4, r5, pc}
  TfLiteIntArray* dims = tensor->dims;
   b9cb0:	68a3      	ldr	r3, [r4, #8]
  return RuntimeShape(dims_size, dims_data);
   b9cb2:	a802      	add	r0, sp, #8
   b9cb4:	6819      	ldr	r1, [r3, #0]
   b9cb6:	1d1a      	adds	r2, r3, #4
   b9cb8:	f7ff fe7e 	bl	b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9cbc:	6864      	ldr	r4, [r4, #4]
   b9cbe:	e7e6      	b.n	b9c8e <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x16>
  TfLiteIntArray* dims = tensor->dims;
   b9cc0:	68ab      	ldr	r3, [r5, #8]
  return RuntimeShape(dims_size, dims_data);
   b9cc2:	a807      	add	r0, sp, #28
   b9cc4:	6819      	ldr	r1, [r3, #0]
   b9cc6:	1d1a      	adds	r2, r3, #4
   b9cc8:	f7ff fe76 	bl	b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b9ccc:	686d      	ldr	r5, [r5, #4]
   b9cce:	e7e0      	b.n	b9c92 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x1a>

000b9cd0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
TfLiteRegistration* Register_SOFTMAX() {
  static TfLiteRegistration r = {activations::Init, activations::Free,
                                 activations::SoftmaxPrepare,
                                 activations::SoftmaxEval};
  return &r;
}
   b9cd0:	4800      	ldr	r0, [pc, #0]	; (b9cd4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x4>)
   b9cd2:	4770      	bx	lr
   b9cd4:	2003c1f8 	.word	0x2003c1f8

000b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
  assert(exponent >= 0);
   b9cd8:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   b9cda:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   b9cdc:	da06      	bge.n	b9cec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x14>
   b9cde:	4b0d      	ldr	r3, [pc, #52]	; (b9d14 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x3c>)
   b9ce0:	4a0d      	ldr	r2, [pc, #52]	; (b9d18 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
   b9ce2:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   b9ce6:	480d      	ldr	r0, [pc, #52]	; (b9d1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x44>)
   b9ce8:	f00a fd98 	bl	c481c <__assert_func>
   b9cec:	291f      	cmp	r1, #31
   b9cee:	dd04      	ble.n	b9cfa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x22>
   b9cf0:	4b0b      	ldr	r3, [pc, #44]	; (b9d20 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x48>)
   b9cf2:	4a09      	ldr	r2, [pc, #36]	; (b9d18 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
   b9cf4:	f240 1167 	movw	r1, #359	; 0x167
   b9cf8:	e7f5      	b.n	b9ce6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b9cfa:	2301      	movs	r3, #1
   b9cfc:	408b      	lsls	r3, r1
   b9cfe:	3b01      	subs	r3, #1
  return a & b;
   b9d00:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   b9d04:	105b      	asrs	r3, r3, #1
  return a + b;
   b9d06:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   b9d0a:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   b9d0c:	429a      	cmp	r2, r3
   b9d0e:	bfc8      	it	gt
   b9d10:	3001      	addgt	r0, #1
   b9d12:	bd08      	pop	{r3, pc}
   b9d14:	000c8016 	.word	0x000c8016
   b9d18:	000c8024 	.word	0x000c8024
   b9d1c:	000c807e 	.word	0x000c807e
   b9d20:	000c80e5 	.word	0x000c80e5

000b9d24 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   b9d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  std::int64_t sum = a64 + b64;
   b9d26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  std::int64_t a64 = a;
   b9d2a:	17c5      	asrs	r5, r0, #31
  std::int64_t sum = a64 + b64;
   b9d2c:	18c0      	adds	r0, r0, r3
   b9d2e:	f145 0500 	adc.w	r5, r5, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
   b9d32:	f1b5 3fff 	cmp.w	r5, #4294967295
   b9d36:	bf08      	it	eq
   b9d38:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   b9d3c:	bf0b      	itete	eq
   b9d3e:	4603      	moveq	r3, r0
   b9d40:	2301      	movne	r3, #1
   b9d42:	462a      	moveq	r2, r5
   b9d44:	2200      	movne	r2, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   b9d46:	18c0      	adds	r0, r0, r3
   b9d48:	eb45 0502 	adc.w	r5, r5, r2
   b9d4c:	0feb      	lsrs	r3, r5, #31
   b9d4e:	1818      	adds	r0, r3, r0
   b9d50:	f145 0500 	adc.w	r5, r5, #0
   b9d54:	0840      	lsrs	r0, r0, #1
   b9d56:	ea40 75c5 	orr.w	r5, r0, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9d5a:	4936      	ldr	r1, [pc, #216]	; (b9e34 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x110>)
   b9d5c:	4628      	mov	r0, r5
   b9d5e:	f7ff fe07 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a + b;
   b9d62:	2603      	movs	r6, #3
   b9d64:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9d68:	4621      	mov	r1, r4
   b9d6a:	4628      	mov	r0, r5
   b9d6c:	f7ff fe00 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
   b9d70:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   b9d74:	4620      	mov	r0, r4
   b9d76:	f7ff fdfb 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   b9d7a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b9d7e:	da45      	bge.n	b9e0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xe8>
   b9d80:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   b9d84:	f04f 31ff 	mov.w	r1, #4294967295
   b9d88:	f04f 0700 	mov.w	r7, #0
   b9d8c:	bfc8      	it	gt
   b9d8e:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   b9d90:	17c2      	asrs	r2, r0, #31
   b9d92:	0092      	lsls	r2, r2, #2
   b9d94:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   b9d98:	0080      	lsls	r0, r0, #2
             ? min
   b9d9a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   b9d9e:	f172 33ff 	sbcs.w	r3, r2, #4294967295
   b9da2:	db37      	blt.n	b9e14 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xf0>
             : wide_shifted > max ? max
   b9da4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   b9da8:	f172 0300 	sbcs.w	r3, r2, #0
   b9dac:	da35      	bge.n	b9e1a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xf6>
  return a & b;
   b9dae:	ea20 0307 	bic.w	r3, r0, r7
   b9db2:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  return a ^ b;
   b9db6:	407b      	eors	r3, r7
  return a & b;
   b9db8:	ea23 0301 	bic.w	r3, r3, r1
   b9dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   b9dc0:	404b      	eors	r3, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   b9dc2:	3e01      	subs	r6, #1
  return a + b;
   b9dc4:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
   b9dc6:	d1cf      	bne.n	b9d68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x44>
  return a ? BitNot(zero) : zero;
   b9dc8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   b9dcc:	da28      	bge.n	b9e20 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xfc>
   b9dce:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   b9dd2:	f04f 30ff 	mov.w	r0, #4294967295
   b9dd6:	4633      	mov	r3, r6
   b9dd8:	bfc8      	it	gt
   b9dda:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   b9ddc:	17e2      	asrs	r2, r4, #31
   b9dde:	1924      	adds	r4, r4, r4
   b9de0:	4152      	adcs	r2, r2
             ? min
   b9de2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   b9de6:	f172 31ff 	sbcs.w	r1, r2, #4294967295
   b9dea:	db1d      	blt.n	b9e28 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x104>
             : wide_shifted > max ? max
   b9dec:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   b9df0:	f172 0200 	sbcs.w	r2, r2, #0
   b9df4:	da1b      	bge.n	b9e2e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x10a>
  return a & b;
   b9df6:	ea24 0403 	bic.w	r4, r4, r3
   b9dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  return a ^ b;
   b9dfe:	405c      	eors	r4, r3
  return a & b;
   b9e00:	ea24 0400 	bic.w	r4, r4, r0
   b9e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   b9e08:	4060      	eors	r0, r4
   b9e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   b9e0c:	f04f 37ff 	mov.w	r7, #4294967295
   b9e10:	2100      	movs	r1, #0
   b9e12:	e7bd      	b.n	b9d90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x6c>
             ? min
   b9e14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   b9e18:	e7c9      	b.n	b9dae <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x8a>
             : wide_shifted > max ? max
   b9e1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b9e1e:	e7c6      	b.n	b9dae <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x8a>
  return a ? BitNot(zero) : zero;
   b9e20:	f04f 33ff 	mov.w	r3, #4294967295
   b9e24:	4630      	mov	r0, r6
   b9e26:	e7d9      	b.n	b9ddc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xb8>
             ? min
   b9e28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   b9e2c:	e7e3      	b.n	b9df6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd2>
             : wide_shifted > max ? max
   b9e2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   b9e32:	e7e0      	b.n	b9df6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd2>
   b9e34:	c3c3c3c4 	.word	0xc3c3c3c4

000b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   b9e38:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   b9e3a:	2100      	movs	r1, #0
   b9e3c:	f7ff ff4c 	bl	b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
}
   b9e40:	bd08      	pop	{r3, pc}

000b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   b9e42:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9e44:	f7ff fd94 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
}
   b9e48:	bd08      	pop	{r3, pc}
	...

000b9e4c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   b9e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9e50:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   b9e52:	4814      	ldr	r0, [pc, #80]	; (b9ea4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
   b9e54:	f7ff fff0 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9e58:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   b9e5a:	4813      	ldr	r0, [pc, #76]	; (b9ea8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   b9e5c:	f7ff ffec 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
  return a + b;
   b9e60:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   b9e64:	4680      	mov	r8, r0
  F x2 = x * x;
   b9e66:	4621      	mov	r1, r4
   b9e68:	4620      	mov	r0, r4
   b9e6a:	f7ff ffea 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   b9e6e:	4621      	mov	r1, r4
  F x2 = x * x;
   b9e70:	4605      	mov	r5, r0
  F x3 = x2 * x;
   b9e72:	f7ff ffe6 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   b9e76:	4629      	mov	r1, r5
  F x3 = x2 * x;
   b9e78:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   b9e7a:	4628      	mov	r0, r5
   b9e7c:	f7ff ffe1 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   b9e80:	2102      	movs	r1, #2
   b9e82:	f7ff ff29 	bl	b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   b9e86:	4641      	mov	r1, r8
   b9e88:	4438      	add	r0, r7
   b9e8a:	f7ff ffda 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   b9e8e:	2101      	movs	r1, #1
   b9e90:	4428      	add	r0, r5
   b9e92:	f7ff ff21 	bl	b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return AddSaturatingIf16Bit(
   b9e96:	1821      	adds	r1, r4, r0
   b9e98:	4630      	mov	r0, r6
   b9e9a:	f7ff ffd2 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   b9e9e:	4430      	add	r0, r6
   b9ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ea4:	70f5a894 	.word	0x70f5a894
   b9ea8:	2aaaaaab 	.word	0x2aaaaaab

000b9eac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   b9eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   b9eb0:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   b9eb4:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   b9eb6:	0160      	lsls	r0, r4, #5
   b9eb8:	f7ff ffc8 	bl	b9e4c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
   b9ebc:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   b9ebe:	4842      	ldr	r0, [pc, #264]	; (b9fc8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   b9ec0:	f7ff ffba 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9ec4:	4601      	mov	r1, r0
   b9ec6:	4630      	mov	r0, r6
  return a - b;
   b9ec8:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   b9eca:	f7ff ffba 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9ece:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   b9ed2:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   b9ed6:	f10b 3bff 	add.w	fp, fp, #4294967295
   b9eda:	ea00 0909 	and.w	r9, r0, r9
   b9ede:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   b9ee2:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   b9ee6:	4839      	ldr	r0, [pc, #228]	; (b9fcc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   b9ee8:	f7ff ffa6 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9eec:	4601      	mov	r1, r0
   b9eee:	4650      	mov	r0, sl
   b9ef0:	f7ff ffa7 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9ef4:	f3c4 6940 	ubfx	r9, r4, #25, #1
   b9ef8:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   b9efc:	f109 39ff 	add.w	r9, r9, #4294967295
   b9f00:	ea00 0008 	and.w	r0, r0, r8
   b9f04:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   b9f08:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   b9f0c:	4830      	ldr	r0, [pc, #192]	; (b9fd0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   b9f0e:	f7ff ff93 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f12:	4601      	mov	r1, r0
   b9f14:	4648      	mov	r0, r9
   b9f16:	f7ff ff94 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f1a:	f3c4 6780 	ubfx	r7, r4, #26, #1
   b9f1e:	427e      	negs	r6, r7
  return a & b;
   b9f20:	3f01      	subs	r7, #1
   b9f22:	4030      	ands	r0, r6
   b9f24:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   b9f28:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   b9f2a:	482a      	ldr	r0, [pc, #168]	; (b9fd4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   b9f2c:	f7ff ff84 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f30:	4601      	mov	r1, r0
   b9f32:	4638      	mov	r0, r7
   b9f34:	f7ff ff85 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f38:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   b9f3c:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   b9f40:	f10b 3bff 	add.w	fp, fp, #4294967295
   b9f44:	ea00 000a 	and.w	r0, r0, sl
   b9f48:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   b9f4c:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   b9f50:	4821      	ldr	r0, [pc, #132]	; (b9fd8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   b9f52:	f7ff ff71 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f56:	4601      	mov	r1, r0
   b9f58:	4658      	mov	r0, fp
   b9f5a:	f7ff ff72 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f5e:	f3c4 7900 	ubfx	r9, r4, #28, #1
   b9f62:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   b9f66:	f109 39ff 	add.w	r9, r9, #4294967295
   b9f6a:	ea00 0008 	and.w	r0, r0, r8
   b9f6e:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   b9f72:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   b9f76:	4819      	ldr	r0, [pc, #100]	; (b9fdc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   b9f78:	f7ff ff5e 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f7c:	4601      	mov	r1, r0
   b9f7e:	4648      	mov	r0, r9
   b9f80:	f7ff ff5f 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f84:	f3c4 7740 	ubfx	r7, r4, #29, #1
   b9f88:	427e      	negs	r6, r7
  return a & b;
   b9f8a:	3f01      	subs	r7, #1
   b9f8c:	4030      	ands	r0, r6
   b9f8e:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   b9f92:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   b9f94:	20f2      	movs	r0, #242	; 0xf2
   b9f96:	f7ff ff4f 	bl	b9e38 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f9a:	4601      	mov	r1, r0
   b9f9c:	4638      	mov	r0, r7
   b9f9e:	f7ff ff50 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9fa2:	f3c4 7480 	ubfx	r4, r4, #30, #1
   b9fa6:	4263      	negs	r3, r4
  return a & b;
   b9fa8:	4018      	ands	r0, r3
   b9faa:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
   b9fac:	fab5 f385 	clz	r3, r5
  return a & b;
   b9fb0:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   b9fb2:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   b9fb4:	4044      	eors	r4, r0
  return a & b;
   b9fb6:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   b9fb8:	425b      	negs	r3, r3
  return a & b;
   b9fba:	4020      	ands	r0, r4
   b9fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   b9fc0:	4058      	eors	r0, r3
   b9fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9fc6:	bf00      	nop
   b9fc8:	63afbe7b 	.word	0x63afbe7b
   b9fcc:	4da2cbf2 	.word	0x4da2cbf2
   b9fd0:	2f16ac6c 	.word	0x2f16ac6c
   b9fd4:	1152aaa4 	.word	0x1152aaa4
   b9fd8:	02582ab7 	.word	0x02582ab7
   b9fdc:	000afe11 	.word	0x000afe11

000b9fe0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>:
                    const RuntimeShape& output_shape, uint8* output_data) {
   b9fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9fe4:	461d      	mov	r5, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   b9fe6:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
                    const RuntimeShape& output_shape, uint8* output_data) {
   b9fea:	b08b      	sub	sp, #44	; 0x2c
   b9fec:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9fee:	6809      	ldr	r1, [r1, #0]
                    const RuntimeShape& output_shape, uint8* output_data) {
   b9ff0:	9203      	str	r2, [sp, #12]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9ff2:	3901      	subs	r1, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9ff4:	462a      	mov	r2, r5
  const int32 input_beta_left_shift = params.input_left_shift;
   b9ff6:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   b9ff8:	6983      	ldr	r3, [r0, #24]
   b9ffa:	9301      	str	r3, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	9104      	str	r1, [sp, #16]
   ba000:	f7ff fcfa 	bl	b99f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   ba004:	9904      	ldr	r1, [sp, #16]
   ba006:	9002      	str	r0, [sp, #8]
   ba008:	4620      	mov	r0, r4
   ba00a:	f7fc f9a5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   ba00e:	9904      	ldr	r1, [sp, #16]
   ba010:	4604      	mov	r4, r0
   ba012:	4628      	mov	r0, r5
   ba014:	f7fc f9a0 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   ba018:	4284      	cmp	r4, r0
   ba01a:	d11c      	bne.n	ba056 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
   ba01c:	2500      	movs	r5, #0
  for (int i = 0; i < outer_size; ++i) {
   ba01e:	46a8      	mov	r8, r5
    uint8 max_in_row = 0;
   ba020:	46a9      	mov	r9, r5
  for (int i = 0; i < outer_size; ++i) {
   ba022:	9b02      	ldr	r3, [sp, #8]
   ba024:	4598      	cmp	r8, r3
   ba026:	da78      	bge.n	ba11a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x13a>
    uint8 max_in_row = 0;
   ba028:	9b03      	ldr	r3, [sp, #12]
   ba02a:	f88d 901b 	strb.w	r9, [sp, #27]
    for (int c = 0; c < depth; ++c) {
   ba02e:	195e      	adds	r6, r3, r5
    uint8 max_in_row = 0;
   ba030:	4631      	mov	r1, r6
    for (int c = 0; c < depth; ++c) {
   ba032:	2200      	movs	r2, #0
   ba034:	42a2      	cmp	r2, r4
   ba036:	da10      	bge.n	ba05a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7a>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   ba038:	460b      	mov	r3, r1
      if (__a < __b)
   ba03a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   ba03e:	781f      	ldrb	r7, [r3, #0]
   ba040:	4287      	cmp	r7, r0
      return __a;
   ba042:	f10d 001b 	add.w	r0, sp, #27
   ba046:	bf98      	it	ls
   ba048:	4603      	movls	r3, r0
   ba04a:	3101      	adds	r1, #1
   ba04c:	781b      	ldrb	r3, [r3, #0]
   ba04e:	f88d 301b 	strb.w	r3, [sp, #27]
    for (int c = 0; c < depth; ++c) {
   ba052:	3201      	adds	r2, #1
   ba054:	e7ee      	b.n	ba034 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x54>
   ba056:	f00a fbd1 	bl	c47fc <abort>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   ba05a:	f04f 0a00 	mov.w	sl, #0
   ba05e:	4633      	mov	r3, r6
    for (int c = 0; c < depth; ++c) {
   ba060:	4657      	mov	r7, sl
   ba062:	42a7      	cmp	r7, r4
   ba064:	da16      	bge.n	ba094 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb4>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   ba066:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba06a:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   ba06e:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   ba070:	9a01      	ldr	r2, [sp, #4]
   ba072:	4282      	cmp	r2, r0
   ba074:	dc0c      	bgt.n	ba090 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
   ba076:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   ba078:	9b00      	ldr	r3, [sp, #0]
   ba07a:	4659      	mov	r1, fp
   ba07c:	4098      	lsls	r0, r3
   ba07e:	f7ff fc77 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
                                        exp_on_negative_values(scaled_diff_f8));
   ba082:	f7ff ff13 	bl	b9eac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   ba086:	210c      	movs	r1, #12
   ba088:	f7ff fe26 	bl	b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return a + b;
   ba08c:	9b04      	ldr	r3, [sp, #16]
   ba08e:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
   ba090:	3701      	adds	r7, #1
   ba092:	e7e6      	b.n	ba062 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x82>
  return integer_input ? __builtin_clz(integer_input)
   ba094:	faba f78a 	clz	r7, sl
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   ba098:	fa0a f007 	lsl.w	r0, sl, r7
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   ba09c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   ba0a0:	f7ff fe40 	bl	b9d24 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
   ba0a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba0a6:	4682      	mov	sl, r0
    for (int c = 0; c < depth; ++c) {
   ba0a8:	442b      	add	r3, r5
   ba0aa:	2200      	movs	r2, #0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   ba0ac:	f1c7 0723 	rsb	r7, r7, #35	; 0x23
    for (int c = 0; c < depth; ++c) {
   ba0b0:	42a2      	cmp	r2, r4
   ba0b2:	da2e      	bge.n	ba112 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   ba0b4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   ba0b8:	f816 0b01 	ldrb.w	r0, [r6], #1
      int32 input_diff =
   ba0bc:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   ba0be:	9901      	ldr	r1, [sp, #4]
   ba0c0:	4281      	cmp	r1, r0
   ba0c2:	dc23      	bgt.n	ba10c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12c>
   ba0c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   ba0c8:	9b00      	ldr	r3, [sp, #0]
   ba0ca:	4659      	mov	r1, fp
   ba0cc:	4098      	lsls	r0, r3
   ba0ce:	f7ff fc4f 	bl	b9970 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   ba0d2:	f7ff feeb 	bl	b9eac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   ba0d6:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(), num_bits_over_unit + 31 - 8);
   ba0d8:	4650      	mov	r0, sl
   ba0da:	f7ff feb2 	bl	b9e42 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   ba0de:	4639      	mov	r1, r7
   ba0e0:	f7ff fdfa 	bl	b9cd8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
            std::max(std::min(unsat_output, static_cast<int32>(255)),
   ba0e4:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   ba0e6:	4298      	cmp	r0, r3
	return __b;
   ba0e8:	bfcc      	ite	gt
   ba0ea:	a908      	addgt	r1, sp, #32
      return __a;
   ba0ec:	a907      	addle	r1, sp, #28
   ba0ee:	9308      	str	r3, [sp, #32]
            (shifted_scale * exp_in_0).raw(), num_bits_over_unit + 31 - 8);
   ba0f0:	9007      	str	r0, [sp, #28]
      if (__a < __b)
   ba0f2:	6808      	ldr	r0, [r1, #0]
                     static_cast<int32>(0)));
   ba0f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   ba0f8:	2800      	cmp	r0, #0
      if (__b < __a)
   ba0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	return __b;
   ba0fe:	bfb8      	it	lt
   ba100:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<uint8>(
   ba102:	6809      	ldr	r1, [r1, #0]
   ba104:	7019      	strb	r1, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   ba106:	3201      	adds	r2, #1
   ba108:	3301      	adds	r3, #1
   ba10a:	e7d1      	b.n	ba0b0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xd0>
        output_data[i * depth + c] = 0;
   ba10c:	f883 9000 	strb.w	r9, [r3]
   ba110:	e7f9      	b.n	ba106 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x126>
  for (int i = 0; i < outer_size; ++i) {
   ba112:	f108 0801 	add.w	r8, r8, #1
   ba116:	4425      	add	r5, r4
   ba118:	e783      	b.n	ba022 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x42>
}
   ba11a:	b00b      	add	sp, #44	; 0x2c
   ba11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba120 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba124:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba128:	680b      	ldr	r3, [r1, #0]
   ba12a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   ba12e:	685a      	ldr	r2, [r3, #4]
  auto* params = reinterpret_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   ba130:	694f      	ldr	r7, [r1, #20]
   ba132:	2338      	movs	r3, #56	; 0x38
   ba134:	fb03 f902 	mul.w	r9, r3, r2
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   ba138:	684a      	ldr	r2, [r1, #4]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba13a:	b09d      	sub	sp, #116	; 0x74
   ba13c:	6854      	ldr	r4, [r2, #4]
  OpData local_data_object;
   ba13e:	2210      	movs	r2, #16
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba140:	4605      	mov	r5, r0
  OpData local_data_object;
   ba142:	2100      	movs	r1, #0
   ba144:	eb0d 0002 	add.w	r0, sp, r2
   ba148:	fb03 8404 	mla	r4, r3, r4, r8
   ba14c:	f00c fd0a 	bl	c6b64 <memset>
  if (input->type == kTfLiteUInt8) {
   ba150:	f818 3009 	ldrb.w	r3, [r8, r9]
   ba154:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba156:	eb08 0609 	add.w	r6, r8, r9
   ba15a:	d143      	bne.n	ba1e4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   ba15c:	6923      	ldr	r3, [r4, #16]
   ba15e:	b17b      	cbz	r3, ba180 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>
   ba160:	2200      	movs	r2, #0
   ba162:	e9cd 3202 	strd	r3, r2, [sp, #8]
   ba166:	4b63      	ldr	r3, [pc, #396]	; (ba2f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
   ba168:	9301      	str	r3, [sp, #4]
   ba16a:	4b63      	ldr	r3, [pc, #396]	; (ba2f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
   ba16c:	9300      	str	r3, [sp, #0]
   ba16e:	696c      	ldr	r4, [r5, #20]
   ba170:	4a62      	ldr	r2, [pc, #392]	; (ba2fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
   ba172:	4963      	ldr	r1, [pc, #396]	; (ba300 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
   ba174:	232c      	movs	r3, #44	; 0x2c
   ba176:	4628      	mov	r0, r5
   ba178:	47a0      	blx	r4
      return kTfLiteError;
   ba17a:	f04f 0801 	mov.w	r8, #1
   ba17e:	e05d      	b.n	ba23c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11c>
    TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   ba180:	ed94 7a03 	vldr	s14, [r4, #12]
   ba184:	eddf 7a5f 	vldr	s15, [pc, #380]	; ba304 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   ba188:	eeb4 7a67 	vcmp.f32	s14, s15
   ba18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba190:	d008      	beq.n	ba1a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x84>
   ba192:	4b5d      	ldr	r3, [pc, #372]	; (ba308 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
   ba194:	9300      	str	r3, [sp, #0]
   ba196:	696c      	ldr	r4, [r5, #20]
   ba198:	4a58      	ldr	r2, [pc, #352]	; (ba2fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
   ba19a:	495c      	ldr	r1, [pc, #368]	; (ba30c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
   ba19c:	232d      	movs	r3, #45	; 0x2d
   ba19e:	4628      	mov	r0, r5
   ba1a0:	47a0      	blx	r4
   ba1a2:	e7ea      	b.n	ba17a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
    tflite::PreprocessSoftmaxScaling(
   ba1a4:	68f0      	ldr	r0, [r6, #12]
   ba1a6:	f7fa f89f 	bl	b42e8 <__aeabi_f2d>
   ba1aa:	ec41 0b18 	vmov	d8, r0, r1
   ba1ae:	6838      	ldr	r0, [r7, #0]
   ba1b0:	f7fa f89a 	bl	b42e8 <__aeabi_f2d>
   ba1b4:	eeb0 1a48 	vmov.f32	s2, s16
   ba1b8:	eef0 1a68 	vmov.f32	s3, s17
   ba1bc:	ec41 0b10 	vmov	d0, r0, r1
   ba1c0:	aa05      	add	r2, sp, #20
   ba1c2:	a904      	add	r1, sp, #16
   ba1c4:	2005      	movs	r0, #5
   ba1c6:	f7fb f877 	bl	b52b8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
    data->diff_min = -1.0 * tflite::CalculateInputRadius(
   ba1ca:	221f      	movs	r2, #31
   ba1cc:	9905      	ldr	r1, [sp, #20]
   ba1ce:	2005      	movs	r0, #5
   ba1d0:	f7fb f8ae 	bl	b5330 <_ZN6tflite20CalculateInputRadiusEiii>
   ba1d4:	f7fa f876 	bl	b42c4 <__aeabi_i2d>
   ba1d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba1dc:	4619      	mov	r1, r3
   ba1de:	f7fa fb75 	bl	b48cc <__aeabi_d2iz>
   ba1e2:	9007      	str	r0, [sp, #28]
  switch (input->type) {
   ba1e4:	f818 8009 	ldrb.w	r8, [r8, r9]
   ba1e8:	f1b8 0f01 	cmp.w	r8, #1
   ba1ec:	d006      	beq.n	ba1fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xdc>
   ba1ee:	f1b8 0f03 	cmp.w	r8, #3
   ba1f2:	d029      	beq.n	ba248 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x128>
      context->ReportError(
   ba1f4:	696b      	ldr	r3, [r5, #20]
   ba1f6:	4946      	ldr	r1, [pc, #280]	; (ba310 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f0>)
   ba1f8:	4642      	mov	r2, r8
   ba1fa:	e077      	b.n	ba2ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1cc>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   ba1fc:	68b3      	ldr	r3, [r6, #8]
   ba1fe:	681a      	ldr	r2, [r3, #0]
      if (NumDimensions(input) == 1) {
   ba200:	2a01      	cmp	r2, #1
   ba202:	d107      	bne.n	ba214 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf4>
        Softmax1DFloat(input, output, params);
   ba204:	463a      	mov	r2, r7
   ba206:	4621      	mov	r1, r4
   ba208:	4630      	mov	r0, r6
   ba20a:	f7ff fd1f 	bl	b9c4c <_ZN6tflite3ops5micro11activations14Softmax1DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba20e:	f04f 0800 	mov.w	r8, #0
}
   ba212:	e013      	b.n	ba23c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11c>
      if (NumDimensions(input) == 2) {
   ba214:	2a02      	cmp	r2, #2
   ba216:	d105      	bne.n	ba224 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x104>
        Softmax2DFloat(input, output, params);
   ba218:	463a      	mov	r2, r7
   ba21a:	4621      	mov	r1, r4
   ba21c:	4630      	mov	r0, r6
   ba21e:	f7ff fd20 	bl	b9c62 <_ZN6tflite3ops5micro11activations14Softmax2DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba222:	e7f4      	b.n	ba20e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      if (NumDimensions(input) == 4) {
   ba224:	2a04      	cmp	r2, #4
   ba226:	d105      	bne.n	ba234 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
        Softmax4DFloat(input, output, params);
   ba228:	463a      	mov	r2, r7
   ba22a:	4621      	mov	r1, r4
   ba22c:	4630      	mov	r0, r6
   ba22e:	f7ff fd23 	bl	b9c78 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba232:	e7ec      	b.n	ba20e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      context->ReportError(
   ba234:	696b      	ldr	r3, [r5, #20]
   ba236:	4937      	ldr	r1, [pc, #220]	; (ba314 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>)
   ba238:	4628      	mov	r0, r5
   ba23a:	4798      	blx	r3
}
   ba23c:	4640      	mov	r0, r8
   ba23e:	b01d      	add	sp, #116	; 0x74
   ba240:	ecbd 8b02 	vpop	{d8}
   ba244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba248:	68b3      	ldr	r3, [r6, #8]
   ba24a:	681a      	ldr	r2, [r3, #0]
      if (NumDimensions(input) == 1) {
   ba24c:	2a01      	cmp	r2, #1
   ba24e:	d11c      	bne.n	ba28a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16a>
  const int input_size = input->dims->data[0];
   ba250:	685b      	ldr	r3, [r3, #4]
  const int32_t shape_data[4] = {1, 1, 1, input_size};
   ba252:	e9cd 2208 	strd	r2, r2, [sp, #32]
   ba256:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RuntimeShape shape(4, shape_data);
   ba25a:	aa08      	add	r2, sp, #32
   ba25c:	2104      	movs	r1, #4
   ba25e:	a80d      	add	r0, sp, #52	; 0x34
   ba260:	f7ff fbaa 	bl	b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>
  op_params.input_multiplier = data->input_multiplier;
   ba264:	9b04      	ldr	r3, [sp, #16]
   ba266:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.input_left_shift = data->input_left_shift;
   ba268:	9b05      	ldr	r3, [sp, #20]
   ba26a:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.diff_min = data->diff_min;
   ba26c:	9b07      	ldr	r3, [sp, #28]
   ba26e:	9318      	str	r3, [sp, #96]	; 0x60
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba270:	6872      	ldr	r2, [r6, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba272:	b104      	cbz	r4, ba276 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x156>
   ba274:	6864      	ldr	r4, [r4, #4]
  tflite::reference_ops::Softmax(op_params, shape,
   ba276:	9400      	str	r4, [sp, #0]
   ba278:	ab0d      	add	r3, sp, #52	; 0x34
   ba27a:	a812      	add	r0, sp, #72	; 0x48
   ba27c:	4619      	mov	r1, r3
   ba27e:	f7ff feaf 	bl	b9fe0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>
  RuntimeShape shape(4, shape_data);
   ba282:	a80d      	add	r0, sp, #52	; 0x34
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   ba284:	f7fc f85d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   ba288:	e7c1      	b.n	ba20e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      if (NumDimensions(input) == 2) {
   ba28a:	2a02      	cmp	r2, #2
   ba28c:	d107      	bne.n	ba29e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x17e>
  const int input_size = input->dims->data[1];
   ba28e:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
  const int32_t shape_data[4] = {batch_size, 1, 1, input_size};
   ba292:	2301      	movs	r3, #1
   ba294:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   ba298:	9108      	str	r1, [sp, #32]
   ba29a:	920b      	str	r2, [sp, #44]	; 0x2c
   ba29c:	e7dd      	b.n	ba25a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x13a>
      if (NumDimensions(input) == 4) {
   ba29e:	2a04      	cmp	r2, #4
   ba2a0:	d122      	bne.n	ba2e8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c8>
  op_params.input_multiplier = data->input_multiplier;
   ba2a2:	9b04      	ldr	r3, [sp, #16]
   ba2a4:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.input_left_shift = data->input_left_shift;
   ba2a6:	9b05      	ldr	r3, [sp, #20]
   ba2a8:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.diff_min = data->diff_min;
   ba2aa:	9b07      	ldr	r3, [sp, #28]
   ba2ac:	9318      	str	r3, [sp, #96]	; 0x60
  TfLiteIntArray* dims = tensor->dims;
   ba2ae:	68b3      	ldr	r3, [r6, #8]
  return RuntimeShape(dims_size, dims_data);
   ba2b0:	a808      	add	r0, sp, #32
   ba2b2:	6819      	ldr	r1, [r3, #0]
   ba2b4:	1d1a      	adds	r2, r3, #4
   ba2b6:	f7ff fb7f 	bl	b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba2ba:	6875      	ldr	r5, [r6, #4]
  if (tensor == nullptr) {
   ba2bc:	b964      	cbnz	r4, ba2d8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  RuntimeShape() : size_(0) {}
   ba2be:	940d      	str	r4, [sp, #52]	; 0x34
  tflite::reference_ops::Softmax(
   ba2c0:	ab0d      	add	r3, sp, #52	; 0x34
   ba2c2:	462a      	mov	r2, r5
   ba2c4:	a908      	add	r1, sp, #32
   ba2c6:	a812      	add	r0, sp, #72	; 0x48
   ba2c8:	9400      	str	r4, [sp, #0]
   ba2ca:	f7ff fe89 	bl	b9fe0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   ba2ce:	a80d      	add	r0, sp, #52	; 0x34
   ba2d0:	f7fc f837 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   ba2d4:	a808      	add	r0, sp, #32
   ba2d6:	e7d5      	b.n	ba284 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x164>
  TfLiteIntArray* dims = tensor->dims;
   ba2d8:	68a3      	ldr	r3, [r4, #8]
  return RuntimeShape(dims_size, dims_data);
   ba2da:	a80d      	add	r0, sp, #52	; 0x34
   ba2dc:	6819      	ldr	r1, [r3, #0]
   ba2de:	1d1a      	adds	r2, r3, #4
   ba2e0:	f7ff fb6a 	bl	b99b8 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba2e4:	6864      	ldr	r4, [r4, #4]
   ba2e6:	e7eb      	b.n	ba2c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
      context->ReportError(
   ba2e8:	696b      	ldr	r3, [r5, #20]
   ba2ea:	490b      	ldr	r1, [pc, #44]	; (ba318 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>)
      context->ReportError(
   ba2ec:	4628      	mov	r0, r5
   ba2ee:	4798      	blx	r3
   ba2f0:	e743      	b.n	ba17a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
   ba2f2:	bf00      	nop
   ba2f4:	000c6f6e 	.word	0x000c6f6e
   ba2f8:	000c86d1 	.word	0x000c86d1
   ba2fc:	000c8660 	.word	0x000c8660
   ba300:	000c6fd5 	.word	0x000c6fd5
   ba304:	3b800000 	.word	0x3b800000
   ba308:	000c86eb 	.word	0x000c86eb
   ba30c:	000c6f40 	.word	0x000c6f40
   ba310:	000c877b 	.word	0x000c877b
   ba314:	000c870d 	.word	0x000c870d
   ba318:	000c8746 	.word	0x000c8746

000ba31c <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   ba31c:	2000      	movs	r0, #0
   ba31e:	4770      	bx	lr

000ba320 <_ZN6tflite3ops5micro4conv4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   ba320:	4770      	bx	lr

000ba322 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   ba322:	2000      	movs	r0, #0
   ba324:	4770      	bx	lr

000ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
  inline int FlatSize() const {
   ba326:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   ba328:	6801      	ldr	r1, [r0, #0]
   ba32a:	2904      	cmp	r1, #4
   ba32c:	bfcc      	ite	gt
   ba32e:	6843      	ldrgt	r3, [r0, #4]
   ba330:	1d03      	addle	r3, r0, #4
    for (int i = 0; i < size_; i++) {
   ba332:	2200      	movs	r2, #0
    int buffer_size = 1;
   ba334:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   ba336:	428a      	cmp	r2, r1
   ba338:	da04      	bge.n	ba344 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   ba33a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   ba33e:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   ba340:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   ba342:	e7f8      	b.n	ba336 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   ba344:	bd10      	pop	{r4, pc}
	...

000ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           int shift) {
   ba348:	b538      	push	{r3, r4, r5, lr}
  int left_shift = shift > 0 ? shift : 0;
   ba34a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   ba34e:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   ba350:	fa00 f303 	lsl.w	r3, r0, r3
  int right_shift = shift > 0 ? 0 : -shift;
   ba354:	bfd4      	ite	le
   ba356:	4254      	negle	r4, r2
   ba358:	2400      	movgt	r4, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba35a:	428b      	cmp	r3, r1
   ba35c:	d121      	bne.n	ba3a2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5a>
   ba35e:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
   ba362:	4255      	negs	r5, r2
   ba364:	4155      	adcs	r5, r2
  std::int64_t ab_64 = a_64 * b_64;
   ba366:	fb83 3201 	smull	r3, r2, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   ba36a:	2a00      	cmp	r2, #0
   ba36c:	4816      	ldr	r0, [pc, #88]	; (ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x80>)
   ba36e:	bfa8      	it	ge
   ba370:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   ba374:	b9bd      	cbnz	r5, ba3a6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   ba376:	18c1      	adds	r1, r0, r3
   ba378:	eb42 73e0 	adc.w	r3, r2, r0, asr #31
   ba37c:	2b00      	cmp	r3, #0
   ba37e:	da04      	bge.n	ba38a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x42>
   ba380:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   ba384:	1889      	adds	r1, r1, r2
   ba386:	f143 0300 	adc.w	r3, r3, #0
   ba38a:	0fc9      	lsrs	r1, r1, #31
   ba38c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  assert(exponent <= 31);
   ba390:	2c1f      	cmp	r4, #31
   ba392:	dd0b      	ble.n	ba3ac <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x64>
   ba394:	4b0d      	ldr	r3, [pc, #52]	; (ba3cc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x84>)
   ba396:	4a0e      	ldr	r2, [pc, #56]	; (ba3d0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x88>)
   ba398:	480e      	ldr	r0, [pc, #56]	; (ba3d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x8c>)
   ba39a:	f240 1167 	movw	r1, #359	; 0x167
   ba39e:	f00a fa3d 	bl	c481c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba3a2:	2500      	movs	r5, #0
   ba3a4:	e7df      	b.n	ba366 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x1e>
   ba3a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ba3aa:	e7f1      	b.n	ba390 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x48>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   ba3ac:	2301      	movs	r3, #1
   ba3ae:	40a3      	lsls	r3, r4
   ba3b0:	3b01      	subs	r3, #1
  return a & b;
   ba3b2:	ea03 0201 	and.w	r2, r3, r1
  return a >> offset;
   ba3b6:	105b      	asrs	r3, r3, #1
  return a + b;
   ba3b8:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   ba3bc:	fa41 f004 	asr.w	r0, r1, r4
}
   ba3c0:	429a      	cmp	r2, r3
   ba3c2:	bfc8      	it	gt
   ba3c4:	3001      	addgt	r0, #1
   ba3c6:	bd38      	pop	{r3, r4, r5, pc}
   ba3c8:	c0000001 	.word	0xc0000001
   ba3cc:	000c80e5 	.word	0x000c80e5
   ba3d0:	000c8024 	.word	0x000c8024
   ba3d4:	000c807e 	.word	0x000c807e

000ba3d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   ba3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3dc:	b09f      	sub	sp, #124	; 0x7c
   ba3de:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   ba3e0:	6943      	ldr	r3, [r0, #20]
   ba3e2:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   ba3e4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   ba3e8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
   ba3ea:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   ba3ee:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   ba3f0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   ba3f4:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   ba3f6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   ba3fa:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
   ba3fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   ba400:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
   ba402:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   ba406:	9310      	str	r3, [sp, #64]	; 0x40
  const int32 output_offset = params.output_offset;
   ba408:	69c3      	ldr	r3, [r0, #28]
   ba40a:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 output_activation_min = std::numeric_limits<int8_t>::min();
  const int32 output_activation_max = std::numeric_limits<int8_t>::max();

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba40c:	f8d8 3000 	ldr.w	r3, [r8]
    int8* output_data) {
   ba410:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   ba412:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba414:	2b04      	cmp	r3, #4
    int8* output_data) {
   ba416:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba41a:	d001      	beq.n	ba420 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
   ba41c:	f00a f9ee 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba420:	6833      	ldr	r3, [r6, #0]
   ba422:	2b04      	cmp	r3, #4
   ba424:	d1fa      	bne.n	ba41c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba426:	683b      	ldr	r3, [r7, #0]
   ba428:	2b04      	cmp	r3, #4
   ba42a:	d1f7      	bne.n	ba41c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba42c:	2300      	movs	r3, #0
   ba42e:	4619      	mov	r1, r3
   ba430:	463a      	mov	r2, r7
   ba432:	4640      	mov	r0, r8
   ba434:	f7fe fc75 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba438:	2303      	movs	r3, #3
   ba43a:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba43c:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba43e:	4632      	mov	r2, r6
   ba440:	4640      	mov	r0, r8
   ba442:	f7fe fc6e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba446:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba448:	9015      	str	r0, [sp, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba44a:	463a      	mov	r2, r7
   ba44c:	2100      	movs	r1, #0
   ba44e:	4630      	mov	r0, r6
   ba450:	f7fe fc67 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   ba454:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba456:	900a      	str	r0, [sp, #40]	; 0x28
  if (bias_data) {
   ba458:	b12b      	cbz	r3, ba466 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba45a:	982b      	ldr	r0, [sp, #172]	; 0xac
   ba45c:	f7ff ff63 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba462:	4298      	cmp	r0, r3
   ba464:	d1da      	bne.n	ba41c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   ba466:	2101      	movs	r1, #1
   ba468:	4640      	mov	r0, r8
   ba46a:	f7fb ff75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   ba46e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   ba470:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
   ba472:	4640      	mov	r0, r8
   ba474:	f7fb ff70 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   ba478:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   ba47a:	9017      	str	r0, [sp, #92]	; 0x5c
  const int filter_height = filter_shape.Dims(1);
   ba47c:	4630      	mov	r0, r6
   ba47e:	f7fb ff6b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   ba482:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   ba484:	9018      	str	r0, [sp, #96]	; 0x60
  const int filter_width = filter_shape.Dims(2);
   ba486:	4630      	mov	r0, r6
   ba488:	f7fb ff66 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   ba48c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   ba48e:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_height = output_shape.Dims(1);
   ba490:	4638      	mov	r0, r7
   ba492:	f7fb ff61 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   ba496:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   ba498:	901a      	str	r0, [sp, #104]	; 0x68
  const int output_width = output_shape.Dims(2);
   ba49a:	4638      	mov	r0, r7
   ba49c:	f7fb ff5c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   ba4a0:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   ba4a4:	901b      	str	r0, [sp, #108]	; 0x6c
  for (int batch = 0; batch < batches; ++batch) {
   ba4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba4a8:	459b      	cmp	fp, r3
   ba4aa:	f280 8099 	bge.w	ba5e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   ba4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba4b0:	425b      	negs	r3, r3
   ba4b2:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba4b4:	2300      	movs	r3, #0
   ba4b6:	9304      	str	r3, [sp, #16]
   ba4b8:	9b04      	ldr	r3, [sp, #16]
   ba4ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba4bc:	4293      	cmp	r3, r2
   ba4be:	f280 808c 	bge.w	ba5da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
   ba4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba4c4:	425b      	negs	r3, r3
   ba4c6:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba4c8:	2300      	movs	r3, #0
   ba4ca:	9305      	str	r3, [sp, #20]
   ba4cc:	9b05      	ldr	r3, [sp, #20]
   ba4ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   ba4d0:	4293      	cmp	r3, r2
   ba4d2:	da7a      	bge.n	ba5ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f2>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba4d4:	2400      	movs	r4, #0
   ba4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4d8:	429c      	cmp	r4, r3
   ba4da:	da6e      	bge.n	ba5ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e2>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   ba4dc:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba4de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba4e2:	9506      	str	r5, [sp, #24]
   ba4e4:	9b06      	ldr	r3, [sp, #24]
   ba4e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba4e8:	4293      	cmp	r3, r2
   ba4ea:	da42      	bge.n	ba572 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba4ec:	2300      	movs	r3, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba4ee:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba4f2:	9307      	str	r3, [sp, #28]
   ba4f4:	9b07      	ldr	r3, [sp, #28]
   ba4f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba4f8:	4293      	cmp	r3, r2
   ba4fa:	da34      	bge.n	ba566 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba4fc:	2300      	movs	r3, #0
   ba4fe:	9303      	str	r3, [sp, #12]
   ba500:	9b03      	ldr	r3, [sp, #12]
   ba502:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba504:	4293      	cmp	r3, r2
   ba506:	da28      	bge.n	ba55a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x182>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   ba508:	f1ba 0f00 	cmp.w	sl, #0
   ba50c:	db22      	blt.n	ba554 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba50e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba510:	4553      	cmp	r3, sl
   ba512:	dd1f      	ble.n	ba554 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba514:	f1b9 0f00 	cmp.w	r9, #0
   ba518:	db1c      	blt.n	ba554 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba51a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba51c:	454b      	cmp	r3, r9
   ba51e:	dd19      	ble.n	ba554 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba520:	9b03      	ldr	r3, [sp, #12]
   ba522:	9300      	str	r3, [sp, #0]
   ba524:	464a      	mov	r2, r9
   ba526:	4653      	mov	r3, sl
   ba528:	4659      	mov	r1, fp
   ba52a:	4640      	mov	r0, r8
   ba52c:	f7fb ff7b 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba530:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba532:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba534:	9300      	str	r3, [sp, #0]
   ba536:	4621      	mov	r1, r4
   ba538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   ba53c:	4630      	mov	r0, r6
   ba53e:	f7fb ff72 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   ba542:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ba544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   ba546:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   ba548:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba54a:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   ba54c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   ba54e:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   ba550:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba554:	9b03      	ldr	r3, [sp, #12]
   ba556:	3301      	adds	r3, #1
   ba558:	e7d1      	b.n	ba4fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba55a:	9b07      	ldr	r3, [sp, #28]
   ba55c:	3301      	adds	r3, #1
   ba55e:	9307      	str	r3, [sp, #28]
   ba560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba562:	449a      	add	sl, r3
   ba564:	e7c6      	b.n	ba4f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba566:	9b06      	ldr	r3, [sp, #24]
   ba568:	3301      	adds	r3, #1
   ba56a:	9306      	str	r3, [sp, #24]
   ba56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   ba56e:	4499      	add	r9, r3
   ba570:	e7b8      	b.n	ba4e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
                }
              }
            }
          }

          if (bias_data) {
   ba572:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   ba574:	b113      	cbz	r3, ba57c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a4>
            acc += bias_data[out_channel];
   ba576:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   ba57a:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   ba57c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   ba57e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   ba582:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   ba584:	4628      	mov	r0, r5
   ba586:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   ba58a:	f7ff fedd 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba58e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = MultiplyByQuantizedMultiplier(
   ba592:	4605      	mov	r5, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba594:	9400      	str	r4, [sp, #0]
   ba596:	4659      	mov	r1, fp
   ba598:	4638      	mov	r0, r7
   ba59a:	f7fb ff44 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc += output_offset;
   ba59e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba5a0:	441d      	add	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba5a2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   ba5a6:	429d      	cmp	r5, r3
   ba5a8:	bfb8      	it	lt
   ba5aa:	461d      	movlt	r5, r3
   ba5ac:	2d7f      	cmp	r5, #127	; 0x7f
   ba5ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   ba5b0:	bfa8      	it	ge
   ba5b2:	257f      	movge	r5, #127	; 0x7f
   ba5b4:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba5b6:	3401      	adds	r4, #1
   ba5b8:	e78d      	b.n	ba4d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba5ba:	9b05      	ldr	r3, [sp, #20]
   ba5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba5be:	3301      	adds	r3, #1
   ba5c0:	9305      	str	r3, [sp, #20]
   ba5c2:	9b08      	ldr	r3, [sp, #32]
   ba5c4:	4413      	add	r3, r2
   ba5c6:	9308      	str	r3, [sp, #32]
   ba5c8:	e780      	b.n	ba4cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba5ca:	9b04      	ldr	r3, [sp, #16]
   ba5cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   ba5ce:	3301      	adds	r3, #1
   ba5d0:	9304      	str	r3, [sp, #16]
   ba5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba5d4:	4413      	add	r3, r2
   ba5d6:	9309      	str	r3, [sp, #36]	; 0x24
   ba5d8:	e76e      	b.n	ba4b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
  for (int batch = 0; batch < batches; ++batch) {
   ba5da:	f10b 0b01 	add.w	fp, fp, #1
   ba5de:	e762      	b.n	ba4a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xce>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   ba5e0:	b01f      	add	sp, #124	; 0x7c
   ba5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000ba5e8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:
                             OpData* data) {
   ba5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5ec:	4698      	mov	r8, r3
  bool has_bias = node->inputs->size == 3;
   ba5ee:	680b      	ldr	r3, [r1, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba5f0:	681b      	ldr	r3, [r3, #0]
                             OpData* data) {
   ba5f2:	b08d      	sub	sp, #52	; 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba5f4:	3b02      	subs	r3, #2
   ba5f6:	2b01      	cmp	r3, #1
                             OpData* data) {
   ba5f8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   ba5fa:	4606      	mov	r6, r0
   ba5fc:	460f      	mov	r7, r1
   ba5fe:	4615      	mov	r5, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba600:	d90a      	bls.n	ba618 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x30>
   ba602:	4b4e      	ldr	r3, [pc, #312]	; (ba73c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
   ba604:	9300      	str	r3, [sp, #0]
   ba606:	6944      	ldr	r4, [r0, #20]
   ba608:	4a4d      	ldr	r2, [pc, #308]	; (ba740 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   ba60a:	494e      	ldr	r1, [pc, #312]	; (ba744 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x15c>)
   ba60c:	234f      	movs	r3, #79	; 0x4f
   ba60e:	47a0      	blx	r4
   ba610:	2001      	movs	r0, #1
}
   ba612:	b00d      	add	sp, #52	; 0x34
   ba614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   ba618:	684b      	ldr	r3, [r1, #4]
   ba61a:	681b      	ldr	r3, [r3, #0]
   ba61c:	2b01      	cmp	r3, #1
   ba61e:	d00c      	beq.n	ba63a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x52>
   ba620:	2401      	movs	r4, #1
   ba622:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba626:	4b48      	ldr	r3, [pc, #288]	; (ba748 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x160>)
   ba628:	9301      	str	r3, [sp, #4]
   ba62a:	4b48      	ldr	r3, [pc, #288]	; (ba74c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x164>)
   ba62c:	9300      	str	r3, [sp, #0]
   ba62e:	6945      	ldr	r5, [r0, #20]
   ba630:	4a43      	ldr	r2, [pc, #268]	; (ba740 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   ba632:	4947      	ldr	r1, [pc, #284]	; (ba750 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x168>)
   ba634:	2350      	movs	r3, #80	; 0x50
   ba636:	47a8      	blx	r5
   ba638:	e7ea      	b.n	ba610 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x28>
      width, filter_height, filter_width, padding, &out_height, &out_width);
   ba63a:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]
  auto padding = params->padding;
   ba63e:	f892 b000 	ldrb.w	fp, [r2]
      width, filter_height, filter_width, padding, &out_height, &out_width);
   ba642:	6913      	ldr	r3, [r2, #16]
   ba644:	9309      	str	r3, [sp, #36]	; 0x24
   ba646:	68d3      	ldr	r3, [r2, #12]
   ba648:	930a      	str	r3, [sp, #40]	; 0x28
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   ba64a:	4641      	mov	r1, r8
   ba64c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba64e:	9300      	str	r3, [sp, #0]
   ba650:	4658      	mov	r0, fp
   ba652:	464b      	mov	r3, r9
   ba654:	f7fe ffaa 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   ba658:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba65a:	9a18      	ldr	r2, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   ba65c:	900b      	str	r0, [sp, #44]	; 0x2c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   ba65e:	9300      	str	r3, [sp, #0]
   ba660:	9916      	ldr	r1, [sp, #88]	; 0x58
   ba662:	4653      	mov	r3, sl
   ba664:	4658      	mov	r0, fp
   ba666:	f7fe ffa1 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba66a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   ba66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   ba66e:	3b01      	subs	r3, #1
   ba670:	4353      	muls	r3, r2
   ba672:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba674:	3801      	subs	r0, #1
   ba676:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
   ba67a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int total_padding =
   ba67e:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba684:	3b01      	subs	r3, #1
   ba686:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba68a:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba68c:	1e50      	subs	r0, r2, #1
   ba68e:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
   ba692:	eba9 0808 	sub.w	r8, r9, r8
  total_padding = total_padding > 0 ? total_padding : 0;
   ba696:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   ba69a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
   ba69e:	ea4f 0368 	mov.w	r3, r8, asr #1
   ba6a2:	6023      	str	r3, [r4, #0]
   ba6a4:	ea4f 036a 	mov.w	r3, sl, asr #1
   ba6a8:	6063      	str	r3, [r4, #4]
  *offset = total_padding % 2;
   ba6aa:	f008 0301 	and.w	r3, r8, #1
   ba6ae:	60a3      	str	r3, [r4, #8]
   ba6b0:	f00a 0301 	and.w	r3, sl, #1
   ba6b4:	60e3      	str	r3, [r4, #12]
  if (data_type != kTfLiteFloat32) {
   ba6b6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   ba6ba:	2b01      	cmp	r3, #1
   ba6bc:	d03c      	beq.n	ba738 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba6be:	f8d7 c000 	ldr.w	ip, [r7]
   ba6c2:	68b0      	ldr	r0, [r6, #8]
   ba6c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   ba6c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   ba6cc:	f8dc c00c 	ldr.w	ip, [ip, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba6d0:	2338      	movs	r3, #56	; 0x38
  if (use_tensor) {
   ba6d2:	f1bc 3fff 	cmp.w	ip, #4294967295
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba6d6:	fb03 0101 	mla	r1, r3, r1, r0
   ba6da:	fb03 0202 	mla	r2, r3, r2, r0
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba6de:	bf18      	it	ne
   ba6e0:	fb03 030c 	mlane	r3, r3, ip, r0
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   ba6e4:	f504 7c8c 	add.w	ip, r4, #280	; 0x118
   ba6e8:	f8cd c01c 	str.w	ip, [sp, #28]
   ba6ec:	f104 0c18 	add.w	ip, r4, #24
   ba6f0:	f8cd c018 	str.w	ip, [sp, #24]
   ba6f4:	f504 7c07 	add.w	ip, r4, #540	; 0x21c
   ba6f8:	f8cd c014 	str.w	ip, [sp, #20]
   ba6fc:	f504 7c06 	add.w	ip, r4, #536	; 0x218
   ba700:	f8cd c010 	str.w	ip, [sp, #16]
   ba704:	f104 0c14 	add.w	ip, r4, #20
   ba708:	f104 0410 	add.w	r4, r4, #16
   ba70c:	9402      	str	r4, [sp, #8]
   ba70e:	f105 0514 	add.w	r5, r5, #20
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   ba712:	687c      	ldr	r4, [r7, #4]
   ba714:	9501      	str	r5, [sp, #4]
   ba716:	f8cd c00c 	str.w	ip, [sp, #12]
   ba71a:	6864      	ldr	r4, [r4, #4]
   ba71c:	f04f 0538 	mov.w	r5, #56	; 0x38
   ba720:	fb05 0004 	mla	r0, r5, r4, r0
  return nullptr;
   ba724:	bf08      	it	eq
   ba726:	2300      	moveq	r3, #0
   ba728:	9000      	str	r0, [sp, #0]
   ba72a:	4630      	mov	r0, r6
   ba72c:	f7fa fc32 	bl	b4f94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba730:	3800      	subs	r0, #0
   ba732:	bf18      	it	ne
   ba734:	2001      	movne	r0, #1
   ba736:	e76c      	b.n	ba612 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2a>
  return kTfLiteOk;
   ba738:	2000      	movs	r0, #0
   ba73a:	e76a      	b.n	ba612 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2a>
   ba73c:	000c881f 	.word	0x000c881f
   ba740:	000c87b1 	.word	0x000c87b1
   ba744:	000c6f40 	.word	0x000c6f40
   ba748:	000c8aca 	.word	0x000c8aca
   ba74c:	000c8843 	.word	0x000c8843
   ba750:	000c6fd5 	.word	0x000c6fd5

000ba754 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, OpData* data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   ba754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba758:	ed2d 8b02 	vpush	{d8}
   ba75c:	b0bb      	sub	sp, #236	; 0xec
   ba75e:	e9dd 6546 	ldrd	r6, r5, [sp, #280]	; 0x118
   ba762:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
  const int32_t input_offset = -input->params.zero_point;
   ba764:	6931      	ldr	r1, [r6, #16]
   ba766:	910b      	str	r1, [sp, #44]	; 0x2c
  const int32_t filter_offset = -filter->params.zero_point;
   ba768:	6929      	ldr	r1, [r5, #16]
   ba76a:	910c      	str	r1, [sp, #48]	; 0x30
  const int32_t output_offset = output->params.zero_point;
   ba76c:	6921      	ldr	r1, [r4, #16]
   ba76e:	9113      	str	r1, [sp, #76]	; 0x4c

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
   ba770:	f9b3 1000 	ldrsh.w	r1, [r3]
   ba774:	910d      	str	r1, [sp, #52]	; 0x34
  op_params.padding_values.height = data->padding.height;
   ba776:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   ba77a:	910e      	str	r1, [sp, #56]	; 0x38
  op_params.stride_width = params->stride_width;
   ba77c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
   ba780:	910f      	str	r1, [sp, #60]	; 0x3c
  op_params.stride_height = params->stride_height;
   ba782:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
   ba786:	9110      	str	r1, [sp, #64]	; 0x40
  op_params.dilation_width_factor = params->dilation_width_factor;
   ba788:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   ba78c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   ba790:	9212      	str	r2, [sp, #72]	; 0x48
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
   ba792:	691a      	ldr	r2, [r3, #16]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   ba794:	9f48      	ldr	r7, [sp, #288]	; 0x120
  op_params.dilation_width_factor = params->dilation_width_factor;
   ba796:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.output_multiplier = data->output_multiplier;
   ba798:	ee08 2a10 	vmov	s16, r2
  op_params.output_shift = -data->output_shift;
   ba79c:	695a      	ldr	r2, [r3, #20]
   ba79e:	4252      	negs	r2, r2
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  reference_ops::Conv(op_params, GetTensorShape(input),
   ba7a0:	4631      	mov	r1, r6
   ba7a2:	a821      	add	r0, sp, #132	; 0x84
  op_params.output_shift = -data->output_shift;
   ba7a4:	ee08 2a90 	vmov	s17, r2
  op_params.quantized_activation_min = data->output_activation_min;
   ba7a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  op_params.quantized_activation_max = data->output_activation_max;
   ba7ac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
  op_params.quantized_activation_min = data->output_activation_min;
   ba7b0:	9208      	str	r2, [sp, #32]
  op_params.quantized_activation_max = data->output_activation_max;
   ba7b2:	9309      	str	r3, [sp, #36]	; 0x24
  reference_ops::Conv(op_params, GetTensorShape(input),
   ba7b4:	f7fc f869 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba7b8:	6873      	ldr	r3, [r6, #4]
   ba7ba:	9316      	str	r3, [sp, #88]	; 0x58
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   ba7bc:	4629      	mov	r1, r5
   ba7be:	a826      	add	r0, sp, #152	; 0x98
   ba7c0:	f7fc f863 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   ba7c4:	686b      	ldr	r3, [r5, #4]
   ba7c6:	9315      	str	r3, [sp, #84]	; 0x54
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   ba7c8:	4639      	mov	r1, r7
   ba7ca:	a82b      	add	r0, sp, #172	; 0xac
   ba7cc:	f7fc f85d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   ba7d0:	b107      	cbz	r7, ba7d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x80>
   ba7d2:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   ba7d4:	4621      	mov	r1, r4
   ba7d6:	a830      	add	r0, sp, #192	; 0xc0
   ba7d8:	f7fc f857 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba7dc:	6863      	ldr	r3, [r4, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   ba7de:	9949      	ldr	r1, [sp, #292]	; 0x124
   ba7e0:	9314      	str	r3, [sp, #80]	; 0x50
   ba7e2:	a835      	add	r0, sp, #212	; 0xd4
   ba7e4:	f7fc f851 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   ba7e8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   ba7ec:	4293      	cmp	r3, r2
   ba7ee:	dd01      	ble.n	ba7f4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa0>
   ba7f0:	f00a f804 	bl	c47fc <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba7f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   ba7f6:	2b04      	cmp	r3, #4
   ba7f8:	d1fa      	bne.n	ba7f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba7fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   ba7fc:	2b04      	cmp	r3, #4
   ba7fe:	d1f7      	bne.n	ba7f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba800:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   ba802:	2b04      	cmp	r3, #4
   ba804:	d1f4      	bne.n	ba7f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba806:	2300      	movs	r3, #0
   ba808:	4619      	mov	r1, r3
   ba80a:	aa30      	add	r2, sp, #192	; 0xc0
   ba80c:	a821      	add	r0, sp, #132	; 0x84
   ba80e:	f7fe fa88 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba812:	2303      	movs	r3, #3
   ba814:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba816:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba818:	aa26      	add	r2, sp, #152	; 0x98
   ba81a:	a821      	add	r0, sp, #132	; 0x84
   ba81c:	f7fe fa81 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba820:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba822:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba824:	aa30      	add	r2, sp, #192	; 0xc0
   ba826:	2100      	movs	r1, #0
   ba828:	a826      	add	r0, sp, #152	; 0x98
   ba82a:	f7fe fa7a 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   ba82e:	900a      	str	r0, [sp, #40]	; 0x28
  if (bias_data) {
   ba830:	b12f      	cbz	r7, ba83e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xea>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba832:	a82b      	add	r0, sp, #172	; 0xac
   ba834:	f7ff fd77 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba83a:	4283      	cmp	r3, r0
   ba83c:	d1d8      	bne.n	ba7f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  }
  const int input_height = input_shape.Dims(1);
   ba83e:	2101      	movs	r1, #1
   ba840:	a821      	add	r0, sp, #132	; 0x84
   ba842:	f7fb fd89 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   ba846:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   ba848:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   ba84a:	a821      	add	r0, sp, #132	; 0x84
   ba84c:	f7fb fd84 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   ba850:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   ba852:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   ba854:	a826      	add	r0, sp, #152	; 0x98
   ba856:	f7fb fd7f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   ba85a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   ba85c:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   ba85e:	a826      	add	r0, sp, #152	; 0x98
   ba860:	f7fb fd7a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   ba864:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   ba866:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   ba868:	a830      	add	r0, sp, #192	; 0xc0
   ba86a:	f7fb fd75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   ba86e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   ba870:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   ba872:	a830      	add	r0, sp, #192	; 0xc0
   ba874:	f7fb fd70 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   ba878:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   ba87c:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   ba87e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba880:	455b      	cmp	r3, fp
   ba882:	f340 8091 	ble.w	ba9a8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x254>
   ba886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   ba888:	425b      	negs	r3, r3
   ba88a:	9306      	str	r3, [sp, #24]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba88c:	2300      	movs	r3, #0
   ba88e:	9304      	str	r3, [sp, #16]
   ba890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   ba892:	9a04      	ldr	r2, [sp, #16]
   ba894:	4293      	cmp	r3, r2
   ba896:	f340 8084 	ble.w	ba9a2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x24e>
   ba89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba89c:	425b      	negs	r3, r3
   ba89e:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba8a0:	2300      	movs	r3, #0
   ba8a2:	9305      	str	r3, [sp, #20]
   ba8a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   ba8a6:	9a05      	ldr	r2, [sp, #20]
   ba8a8:	4293      	cmp	r3, r2
   ba8aa:	dd72      	ble.n	ba992 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x23e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba8ac:	2400      	movs	r4, #0
   ba8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba8b0:	42a3      	cmp	r3, r4
   ba8b2:	dd66      	ble.n	ba982 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x22e>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   ba8b4:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba8b6:	9e06      	ldr	r6, [sp, #24]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba8b8:	46a9      	mov	r9, r5
   ba8ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba8bc:	454b      	cmp	r3, r9
   ba8be:	dd3f      	ble.n	ba940 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1ec>
   ba8c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba8c4:	f04f 0a00 	mov.w	sl, #0
   ba8c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   ba8ca:	4553      	cmp	r3, sl
   ba8cc:	dd33      	ble.n	ba936 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e2>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba8ce:	2300      	movs	r3, #0
   ba8d0:	9303      	str	r3, [sp, #12]
   ba8d2:	9a03      	ldr	r2, [sp, #12]
   ba8d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   ba8d6:	4293      	cmp	r3, r2
   ba8d8:	dd28      	ble.n	ba92c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d8>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   ba8da:	f1b8 0f00 	cmp.w	r8, #0
   ba8de:	db22      	blt.n	ba926 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba8e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   ba8e2:	4543      	cmp	r3, r8
   ba8e4:	dd1f      	ble.n	ba926 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba8e6:	2e00      	cmp	r6, #0
   ba8e8:	db1d      	blt.n	ba926 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba8ec:	42b3      	cmp	r3, r6
   ba8ee:	dd1a      	ble.n	ba926 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba8f0:	9200      	str	r2, [sp, #0]
   ba8f2:	4643      	mov	r3, r8
   ba8f4:	4632      	mov	r2, r6
   ba8f6:	4659      	mov	r1, fp
   ba8f8:	a821      	add	r0, sp, #132	; 0x84
   ba8fa:	f7fb fd94 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba8fe:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba900:	901f      	str	r0, [sp, #124]	; 0x7c
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba902:	9300      	str	r3, [sp, #0]
   ba904:	464a      	mov	r2, r9
   ba906:	4653      	mov	r3, sl
   ba908:	4621      	mov	r1, r4
   ba90a:	a826      	add	r0, sp, #152	; 0x98
   ba90c:	f7fb fd8b 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   ba910:	9b15      	ldr	r3, [sp, #84]	; 0x54
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                                         filter_x, in_channel)];
   ba914:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   ba916:	991f      	ldr	r1, [sp, #124]	; 0x7c
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba918:	1a9b      	subs	r3, r3, r2
                                                      in_x, in_channel)];
   ba91a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   ba91c:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba91e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   ba920:	1a52      	subs	r2, r2, r1
                  acc +=
   ba922:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba926:	9b03      	ldr	r3, [sp, #12]
   ba928:	3301      	adds	r3, #1
   ba92a:	e7d1      	b.n	ba8d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x17c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba92c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ba92e:	f10a 0a01 	add.w	sl, sl, #1
   ba932:	4498      	add	r8, r3
   ba934:	e7c8      	b.n	ba8c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x174>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba936:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ba938:	f109 0901 	add.w	r9, r9, #1
   ba93c:	441e      	add	r6, r3
   ba93e:	e7bc      	b.n	ba8ba <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x166>
                }
              }
            }
          }
          if (bias_data) {
   ba940:	b117      	cbz	r7, ba948 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1f4>
            acc += bias_data[out_channel];
   ba942:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   ba946:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   ba948:	ee18 2a90 	vmov	r2, s17
   ba94c:	ee18 1a10 	vmov	r1, s16
   ba950:	4628      	mov	r0, r5
   ba952:	f7ff fcf9 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                              output_shift);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   ba95a:	4605      	mov	r5, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba95c:	9400      	str	r4, [sp, #0]
   ba95e:	4659      	mov	r1, fp
   ba960:	a830      	add	r0, sp, #192	; 0xc0
   ba962:	f7fb fd60 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc += output_offset;
   ba966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba968:	441d      	add	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba96a:	9b08      	ldr	r3, [sp, #32]
   ba96c:	429d      	cmp	r5, r3
   ba96e:	bfb8      	it	lt
   ba970:	461d      	movlt	r5, r3
   ba972:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba974:	429d      	cmp	r5, r3
   ba976:	bfa8      	it	ge
   ba978:	461d      	movge	r5, r3
   ba97a:	9b14      	ldr	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba97c:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba97e:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba980:	e795      	b.n	ba8ae <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x15a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba982:	9b05      	ldr	r3, [sp, #20]
   ba984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   ba986:	3301      	adds	r3, #1
   ba988:	9305      	str	r3, [sp, #20]
   ba98a:	9b07      	ldr	r3, [sp, #28]
   ba98c:	4413      	add	r3, r2
   ba98e:	9307      	str	r3, [sp, #28]
   ba990:	e788      	b.n	ba8a4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x150>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba992:	9b04      	ldr	r3, [sp, #16]
   ba994:	9a10      	ldr	r2, [sp, #64]	; 0x40
   ba996:	3301      	adds	r3, #1
   ba998:	9304      	str	r3, [sp, #16]
   ba99a:	9b06      	ldr	r3, [sp, #24]
   ba99c:	4413      	add	r3, r2
   ba99e:	9306      	str	r3, [sp, #24]
   ba9a0:	e776      	b.n	ba890 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   ba9a2:	f10b 0b01 	add.w	fp, fp, #1
   ba9a6:	e76a      	b.n	ba87e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x12a>
   ba9a8:	a835      	add	r0, sp, #212	; 0xd4
   ba9aa:	f7fb fcca 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   ba9ae:	a830      	add	r0, sp, #192	; 0xc0
   ba9b0:	f7fb fcc7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   ba9b4:	a82b      	add	r0, sp, #172	; 0xac
   ba9b6:	f7fb fcc4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   ba9ba:	a826      	add	r0, sp, #152	; 0x98
   ba9bc:	f7fb fcc1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   ba9c0:	a821      	add	r0, sp, #132	; 0x84
   ba9c2:	f7fb fcbe 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
   ba9c6:	b03b      	add	sp, #236	; 0xec
   ba9c8:	ecbd 8b02 	vpop	{d8}
   ba9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba9d0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, OpData* data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
   ba9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9d4:	b0ad      	sub	sp, #180	; 0xb4
   ba9d6:	e9dd 7536 	ldrd	r7, r5, [sp, #216]	; 0xd8
   ba9da:	e9dd 6b38 	ldrd	r6, fp, [sp, #224]	; 0xe0
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
   ba9de:	6939      	ldr	r1, [r7, #16]
   ba9e0:	4249      	negs	r1, r1
   ba9e2:	9123      	str	r1, [sp, #140]	; 0x8c
  op_params.output_offset = output->params.zero_point;
   ba9e4:	f8db 1010 	ldr.w	r1, [fp, #16]
   ba9e8:	9125      	str	r1, [sp, #148]	; 0x94
  op_params.stride_height = params->stride_height;
   ba9ea:	6891      	ldr	r1, [r2, #8]
   ba9ec:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
  op_params.stride_width = params->stride_width;
   ba9f0:	6851      	ldr	r1, [r2, #4]
   ba9f2:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
   ba9f6:	469a      	mov	sl, r3
  op_params.dilation_height_factor = params->dilation_height_factor;
   ba9f8:	6911      	ldr	r1, [r2, #16]
  op_params.dilation_width_factor = params->dilation_width_factor;
   ba9fa:	68d2      	ldr	r2, [r2, #12]
   ba9fc:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
  op_params.padding_values.height = data->padding.height;
   baa00:	685a      	ldr	r2, [r3, #4]
  op_params.dilation_height_factor = params->dilation_height_factor;
   baa02:	f8ad 1088 	strh.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.height = data->padding.height;
   baa06:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c

  reference_integer_ops::ConvPerChannel(
      op_params, data->per_channel_output_multiplier,
      data->per_channel_output_shift, GetTensorShape(input),
   baa0a:	4639      	mov	r1, r7
  op_params.padding_values.width = data->padding.width;
   baa0c:	f85a 2b18 	ldr.w	r2, [sl], #24
   baa10:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
      data->per_channel_output_shift, GetTensorShape(input),
   baa14:	a80a      	add	r0, sp, #40	; 0x28
   baa16:	f503 748c 	add.w	r4, r3, #280	; 0x118
   baa1a:	f7fb ff36 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   baa1e:	687b      	ldr	r3, [r7, #4]
   baa20:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
   baa22:	af0f      	add	r7, sp, #60	; 0x3c
   baa24:	4629      	mov	r1, r5
   baa26:	4638      	mov	r0, r7
   baa28:	f7fb ff2f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baa2c:	b105      	cbz	r5, baa30 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x60>
   baa2e:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   baa30:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   baa34:	4631      	mov	r1, r6
   baa36:	4640      	mov	r0, r8
   baa38:	f7fb ff27 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baa3c:	b106      	cbz	r6, baa40 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x70>
   baa3e:	6876      	ldr	r6, [r6, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   baa40:	f10d 0964 	add.w	r9, sp, #100	; 0x64
   baa44:	4659      	mov	r1, fp
   baa46:	4648      	mov	r0, r9
   baa48:	f7fb ff1f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   baa4c:	f8db 3004 	ldr.w	r3, [fp, #4]
   baa50:	e9cd 9305 	strd	r9, r3, [sp, #20]
   baa54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baa56:	9300      	str	r3, [sp, #0]
   baa58:	4622      	mov	r2, r4
   baa5a:	ab0a      	add	r3, sp, #40	; 0x28
   baa5c:	4651      	mov	r1, sl
   baa5e:	a81e      	add	r0, sp, #120	; 0x78
   baa60:	e9cd 8603 	strd	r8, r6, [sp, #12]
   baa64:	e9cd 7501 	strd	r7, r5, [sp, #4]
   baa68:	f7ff fcb6 	bl	ba3d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   baa6c:	4648      	mov	r0, r9
   baa6e:	f7fb fc68 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   baa72:	4640      	mov	r0, r8
   baa74:	f7fb fc65 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   baa78:	4638      	mov	r0, r7
   baa7a:	f7fb fc62 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   baa7e:	a80a      	add	r0, sp, #40	; 0x28
   baa80:	f7fb fc5f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
   baa84:	b02d      	add	sp, #180	; 0xb4
   baa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000baa8c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, OpData* data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   baa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa90:	ed2d 8b04 	vpush	{d8-d9}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
   baa94:	7d11      	ldrb	r1, [r2, #20]
  if (activation == kTfLiteActRelu) {
   baa96:	2901      	cmp	r1, #1
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   baa98:	b0b1      	sub	sp, #196	; 0xc4
   baa9a:	d04b      	beq.n	bab34 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa8>
  } else if (activation == kTfLiteActRelu6) {
   baa9c:	2903      	cmp	r1, #3
   baa9e:	d04e      	beq.n	bab3e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xb2>
    *activation_max = std::numeric_limits<T>::max();
   baaa0:	eddf 7a9f 	vldr	s15, [pc, #636]	; bad20 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x294>
   baaa4:	2902      	cmp	r1, #2
   baaa6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   baaaa:	bf18      	it	ne
   baaac:	eeb0 9a67 	vmovne.f32	s18, s15
   baab0:	eddf 7a9c 	vldr	s15, [pc, #624]	; bad24 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x298>
   baab4:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
   baab8:	bf18      	it	ne
   baaba:	eef0 8a67 	vmovne.f32	s17, s15
                           &output_activation_max);

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
   baabe:	f9b3 1000 	ldrsh.w	r1, [r3]
  op_params.padding_values.height = data->padding.height;
   baac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   baac6:	9308      	str	r3, [sp, #32]
  op_params.stride_width = params->stride_width;
   baac8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   baacc:	9309      	str	r3, [sp, #36]	; 0x24
  op_params.stride_height = params->stride_height;
   baace:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
   baad2:	930a      	str	r3, [sp, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
   baad4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  op_params.padding_values.width = data->padding.width;
   baad8:	9107      	str	r1, [sp, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
   baada:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
   baadc:	993e      	ldr	r1, [sp, #248]	; 0xf8
  op_params.dilation_height_factor = params->dilation_height_factor;
   baade:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
   baae2:	930c      	str	r3, [sp, #48]	; 0x30
  reference_ops::Conv(op_params, GetTensorShape(input),
   baae4:	a817      	add	r0, sp, #92	; 0x5c
   baae6:	f7fb fed0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baaea:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   baaec:	b10b      	cbz	r3, baaf2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x66>
   baaee:	685b      	ldr	r3, [r3, #4]
   baaf0:	933e      	str	r3, [sp, #248]	; 0xf8
                      GetTensorData<float>(input), GetTensorShape(filter),
   baaf2:	993f      	ldr	r1, [sp, #252]	; 0xfc
   baaf4:	a81c      	add	r0, sp, #112	; 0x70
   baaf6:	f7fb fec8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baafa:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   baafc:	b10b      	cbz	r3, bab02 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x76>
   baafe:	685b      	ldr	r3, [r3, #4]
   bab00:	933f      	str	r3, [sp, #252]	; 0xfc
                      GetTensorData<float>(filter), GetTensorShape(bias),
   bab02:	9940      	ldr	r1, [sp, #256]	; 0x100
   bab04:	a821      	add	r0, sp, #132	; 0x84
   bab06:	f7fb fec0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bab0a:	9b40      	ldr	r3, [sp, #256]	; 0x100
   bab0c:	b10b      	cbz	r3, bab12 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x86>
   bab0e:	685b      	ldr	r3, [r3, #4]
   bab10:	9340      	str	r3, [sp, #256]	; 0x100
                      GetTensorData<float>(bias), GetTensorShape(output),
   bab12:	9943      	ldr	r1, [sp, #268]	; 0x10c
   bab14:	a826      	add	r0, sp, #152	; 0x98
   bab16:	f7fb feb8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bab1a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bab1c:	b10b      	cbz	r3, bab22 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x96>
   bab1e:	685b      	ldr	r3, [r3, #4]
   bab20:	9343      	str	r3, [sp, #268]	; 0x10c
                      GetTensorData<float>(output), GetTensorShape(im2col),
   bab22:	9941      	ldr	r1, [sp, #260]	; 0x104
   bab24:	a82b      	add	r0, sp, #172	; 0xac
   bab26:	f7fb feb0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   bab2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bab2c:	2b04      	cmp	r3, #4
   bab2e:	d009      	beq.n	bab44 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xb8>
   bab30:	f009 fe64 	bl	c47fc <abort>
    *activation_max = std::numeric_limits<T>::max();
   bab34:	ed9f 9a7a 	vldr	s18, [pc, #488]	; bad20 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x294>
    *activation_min = 0;
   bab38:	eddf 8a7b 	vldr	s17, [pc, #492]	; bad28 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
   bab3c:	e7bf      	b.n	baabe <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32>
    *activation_max = 6;
   bab3e:	eeb1 9a08 	vmov.f32	s18, #24	; 0x40c00000  6.0
   bab42:	e7f9      	b.n	bab38 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xac>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   bab44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   bab46:	2b04      	cmp	r3, #4
   bab48:	d1f2      	bne.n	bab30 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   bab4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bab4c:	2b04      	cmp	r3, #4
   bab4e:	d1ef      	bne.n	bab30 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   bab50:	2300      	movs	r3, #0
   bab52:	4619      	mov	r1, r3
   bab54:	aa26      	add	r2, sp, #152	; 0x98
   bab56:	a817      	add	r0, sp, #92	; 0x5c
   bab58:	f7fe f8e3 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   bab5c:	2303      	movs	r3, #3
   bab5e:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   bab60:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   bab62:	aa1c      	add	r2, sp, #112	; 0x70
   bab64:	a817      	add	r0, sp, #92	; 0x5c
   bab66:	f7fe f8dc 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   bab6a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   bab6c:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   bab6e:	aa26      	add	r2, sp, #152	; 0x98
   bab70:	2100      	movs	r1, #0
   bab72:	a81c      	add	r0, sp, #112	; 0x70
   bab74:	f7fe f8d5 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   bab78:	9b40      	ldr	r3, [sp, #256]	; 0x100
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   bab7a:	9006      	str	r0, [sp, #24]
  if (bias_data) {
   bab7c:	b12b      	cbz	r3, bab8a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xfe>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   bab7e:	a821      	add	r0, sp, #132	; 0x84
   bab80:	f7ff fbd1 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   bab84:	9b06      	ldr	r3, [sp, #24]
   bab86:	4283      	cmp	r3, r0
   bab88:	d1d2      	bne.n	bab30 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  const int input_height = input_shape.Dims(1);
   bab8a:	2101      	movs	r1, #1
   bab8c:	a817      	add	r0, sp, #92	; 0x5c
   bab8e:	f7fb fbe3 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   bab92:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   bab94:	900f      	str	r0, [sp, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
   bab96:	a817      	add	r0, sp, #92	; 0x5c
   bab98:	f7fb fbde 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   bab9c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   bab9e:	9010      	str	r0, [sp, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
   baba0:	a81c      	add	r0, sp, #112	; 0x70
   baba2:	f7fb fbd9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   baba6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   baba8:	9011      	str	r0, [sp, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
   babaa:	a81c      	add	r0, sp, #112	; 0x70
   babac:	f7fb fbd4 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   babb0:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   babb2:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
   babb4:	a826      	add	r0, sp, #152	; 0x98
   babb6:	f7fb fbcf 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   babba:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   babbc:	9013      	str	r0, [sp, #76]	; 0x4c
  const int output_width = output_shape.Dims(2);
   babbe:	a826      	add	r0, sp, #152	; 0x98
   babc0:	f7fb fbca 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   babc4:	2500      	movs	r5, #0
  const int output_width = output_shape.Dims(2);
   babc6:	9014      	str	r0, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   babc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   babca:	42ab      	cmp	r3, r5
   babcc:	f340 8094 	ble.w	bacf8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x26c>
   babd0:	9b08      	ldr	r3, [sp, #32]
   babd2:	425b      	negs	r3, r3
   babd4:	9304      	str	r3, [sp, #16]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   babd6:	f04f 0800 	mov.w	r8, #0
   babda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   babdc:	4543      	cmp	r3, r8
   babde:	f340 8089 	ble.w	bacf4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x268>
   babe2:	9b07      	ldr	r3, [sp, #28]
   babe4:	425b      	negs	r3, r3
   babe6:	9305      	str	r3, [sp, #20]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   babe8:	f04f 0900 	mov.w	r9, #0
   babec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   babee:	454b      	cmp	r3, r9
   babf0:	dd79      	ble.n	bace6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x25a>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   babf2:	2400      	movs	r4, #0
   babf4:	9b06      	ldr	r3, [sp, #24]
   babf6:	42a3      	cmp	r3, r4
   babf8:	dd6e      	ble.n	bacd8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x24c>
   babfa:	9e04      	ldr	r6, [sp, #16]
          float total = 0.f;
   babfc:	eddf 9a4a 	vldr	s19, [pc, #296]	; bad28 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   bac00:	f04f 0a00 	mov.w	sl, #0
   bac04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bac06:	4553      	cmp	r3, sl
   bac08:	dd3f      	ble.n	bac8a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1fe>
   bac0a:	9f05      	ldr	r7, [sp, #20]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   bac0c:	f04f 0b00 	mov.w	fp, #0
   bac10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bac12:	455b      	cmp	r3, fp
   bac14:	dd34      	ble.n	bac80 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1f4>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   bac16:	2300      	movs	r3, #0
   bac18:	9303      	str	r3, [sp, #12]
   bac1a:	9a03      	ldr	r2, [sp, #12]
   bac1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bac1e:	4293      	cmp	r3, r2
   bac20:	dd29      	ble.n	bac76 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1ea>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   bac22:	2f00      	cmp	r7, #0
   bac24:	db24      	blt.n	bac70 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   bac26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   bac28:	42bb      	cmp	r3, r7
   bac2a:	dd21      	ble.n	bac70 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   bac2c:	2e00      	cmp	r6, #0
   bac2e:	db1f      	blt.n	bac70 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   bac30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bac32:	42b3      	cmp	r3, r6
   bac34:	dd1c      	ble.n	bac70 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
                  float input_value = input_data[Offset(
   bac36:	9200      	str	r2, [sp, #0]
   bac38:	463b      	mov	r3, r7
   bac3a:	4632      	mov	r2, r6
   bac3c:	4629      	mov	r1, r5
   bac3e:	a817      	add	r0, sp, #92	; 0x5c
   bac40:	f7fb fbf1 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   bac44:	9b03      	ldr	r3, [sp, #12]
                  float input_value = input_data[Offset(
   bac46:	9015      	str	r0, [sp, #84]	; 0x54
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   bac48:	9300      	str	r3, [sp, #0]
   bac4a:	4652      	mov	r2, sl
   bac4c:	465b      	mov	r3, fp
   bac4e:	4621      	mov	r1, r4
   bac50:	a81c      	add	r0, sp, #112	; 0x70
   bac52:	f7fb fbe8 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
   bac56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bac58:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   bac5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
   bac5e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
                  total += (input_value * filter_value);
   bac60:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
   bac64:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   bac68:	edd0 7a00 	vldr	s15, [r0]
   bac6c:	eee7 9a27 	vfma.f32	s19, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   bac70:	9b03      	ldr	r3, [sp, #12]
   bac72:	3301      	adds	r3, #1
   bac74:	e7d0      	b.n	bac18 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x18c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   bac76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac78:	f10b 0b01 	add.w	fp, fp, #1
   bac7c:	441f      	add	r7, r3
   bac7e:	e7c7      	b.n	bac10 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x184>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   bac80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bac82:	f10a 0a01 	add.w	sl, sl, #1
   bac86:	441e      	add	r6, r3
   bac88:	e7bc      	b.n	bac04 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x178>
          if (bias_data) {
   bac8a:	9b40      	ldr	r3, [sp, #256]	; 0x100
   bac8c:	b30b      	cbz	r3, bacd2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x246>
            bias_value = bias_data[out_channel];
   bac8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   bac92:	ed93 8a00 	vldr	s16, [r3]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   bac96:	9400      	str	r4, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
   bac98:	ee38 8a29 	vadd.f32	s16, s16, s19
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   bac9c:	464b      	mov	r3, r9
   bac9e:	eeb4 8a68 	vcmp.f32	s16, s17
   baca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baca6:	bf48      	it	mi
   baca8:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   bacac:	eeb4 8a49 	vcmp.f32	s16, s18
   bacb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bacb4:	4642      	mov	r2, r8
   bacb6:	4629      	mov	r1, r5
   bacb8:	a826      	add	r0, sp, #152	; 0x98
   bacba:	bfc8      	it	gt
   bacbc:	eeb0 8a49 	vmovgt.f32	s16, s18
   bacc0:	f7fb fbb1 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bacc4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bacc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bacca:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   bacce:	3401      	adds	r4, #1
   bacd0:	e790      	b.n	babf4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x168>
          float bias_value = 0.0f;
   bacd2:	ed9f 8a15 	vldr	s16, [pc, #84]	; bad28 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
   bacd6:	e7de      	b.n	bac96 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x20a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   bacd8:	9b05      	ldr	r3, [sp, #20]
   bacda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   bacdc:	4413      	add	r3, r2
   bacde:	f109 0901 	add.w	r9, r9, #1
   bace2:	9305      	str	r3, [sp, #20]
   bace4:	e782      	b.n	babec <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   bace6:	9b04      	ldr	r3, [sp, #16]
   bace8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bacea:	4413      	add	r3, r2
   bacec:	f108 0801 	add.w	r8, r8, #1
   bacf0:	9304      	str	r3, [sp, #16]
   bacf2:	e772      	b.n	babda <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
   bacf4:	3501      	adds	r5, #1
   bacf6:	e767      	b.n	babc8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x13c>
   bacf8:	a82b      	add	r0, sp, #172	; 0xac
   bacfa:	f7fb fb22 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
   bacfe:	a826      	add	r0, sp, #152	; 0x98
   bad00:	f7fb fb1f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
   bad04:	a821      	add	r0, sp, #132	; 0x84
   bad06:	f7fb fb1c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
   bad0a:	a81c      	add	r0, sp, #112	; 0x70
   bad0c:	f7fb fb19 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   bad10:	a817      	add	r0, sp, #92	; 0x5c
   bad12:	f7fb fb16 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
   bad16:	b031      	add	sp, #196	; 0xc4
   bad18:	ecbd 8b04 	vpop	{d8-d9}
   bad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bad20:	7f7fffff 	.word	0x7f7fffff
   bad24:	ff7fffff 	.word	0xff7fffff
   bad28:	00000000 	.word	0x00000000

000bad2c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad30:	680a      	ldr	r2, [r1, #0]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bad32:	6887      	ldr	r7, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad34:	6896      	ldr	r6, [r2, #8]
   bad36:	4605      	mov	r5, r0
   bad38:	6850      	ldr	r0, [r2, #4]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   bad3a:	68d2      	ldr	r2, [r2, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad3c:	2338      	movs	r3, #56	; 0x38
   bad3e:	fb03 f800 	mul.w	r8, r3, r0
  if (use_tensor) {
   bad42:	1c50      	adds	r0, r2, #1
  int filter_height = filter->dims->data[1];
  int output_width = output->dims->data[2];
  int output_height = output->dims->data[1];

  OpData data;
  if (input->type != kTfLiteFloat32) {
   bad44:	f817 0008 	ldrb.w	r0, [r7, r8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bad48:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad4c:	fb03 7606 	mla	r6, r3, r6, r7
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad50:	bf14      	ite	ne
   bad52:	fb03 7302 	mlane	r3, r3, r2, r7
  return nullptr;
   bad56:	2300      	moveq	r3, #0
  if (input->type != kTfLiteFloat32) {
   bad58:	2801      	cmp	r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bad5a:	eb07 0b08 	add.w	fp, r7, r8
  return nullptr;
   bad5e:	9309      	str	r3, [sp, #36]	; 0x24
   bad60:	d028      	beq.n	badb4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   bad62:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
   bad66:	2c01      	cmp	r4, #1
   bad68:	d00e      	beq.n	bad88 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x5c>
   bad6a:	4b42      	ldr	r3, [pc, #264]	; (bae74 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x148>)
   bad6c:	9301      	str	r3, [sp, #4]
   bad6e:	2601      	movs	r6, #1
   bad70:	4b41      	ldr	r3, [pc, #260]	; (bae78 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x14c>)
   bad72:	9300      	str	r3, [sp, #0]
   bad74:	e9cd 4602 	strd	r4, r6, [sp, #8]
   bad78:	4a40      	ldr	r2, [pc, #256]	; (bae7c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
   bad7a:	696c      	ldr	r4, [r5, #20]
   bad7c:	4940      	ldr	r1, [pc, #256]	; (bae80 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x154>)
   bad7e:	23dc      	movs	r3, #220	; 0xdc
   bad80:	4628      	mov	r0, r5
   bad82:	47a0      	blx	r4
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(
   bad84:	2401      	movs	r4, #1
   bad86:	e009      	b.n	bad9c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    const auto* affine_quantization =
   bad88:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   bad8a:	b963      	cbnz	r3, bada6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   bad8c:	4b3d      	ldr	r3, [pc, #244]	; (bae84 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x158>)
   bad8e:	696e      	ldr	r6, [r5, #20]
   bad90:	9300      	str	r3, [sp, #0]
   bad92:	23e2      	movs	r3, #226	; 0xe2
    TF_LITE_ENSURE(context, affine_quantization->scale);
   bad94:	4a39      	ldr	r2, [pc, #228]	; (bae7c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
   bad96:	493c      	ldr	r1, [pc, #240]	; (bae88 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x15c>)
   bad98:	4628      	mov	r0, r5
   bad9a:	47b0      	blx	r6
      context->ReportError(context, "Type %s (%d) not supported.",
                           TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   bad9c:	4620      	mov	r0, r4
   bad9e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   bada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   bada6:	681b      	ldr	r3, [r3, #0]
   bada8:	b923      	cbnz	r3, badb4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
   badaa:	4b38      	ldr	r3, [pc, #224]	; (bae8c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x160>)
   badac:	9300      	str	r3, [sp, #0]
   badae:	696e      	ldr	r6, [r5, #20]
   badb0:	23e3      	movs	r3, #227	; 0xe3
   badb2:	e7ef      	b.n	bad94 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   badb4:	684b      	ldr	r3, [r1, #4]
  int filter_width = filter->dims->data[2];
   badb6:	68b4      	ldr	r4, [r6, #8]
   badb8:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
   badba:	694a      	ldr	r2, [r1, #20]
   badbc:	f04f 0938 	mov.w	r9, #56	; 0x38
   badc0:	fb09 7903 	mla	r9, r9, r3, r7
  TF_LITE_ENSURE_STATUS(CalculateOpData(
   badc4:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  int input_width = input->dims->data[2];
   badc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  int output_width = output->dims->data[2];
   badcc:	f8d9 c008 	ldr.w	ip, [r9, #8]
  TF_LITE_ENSURE_STATUS(CalculateOpData(
   badd0:	e9cd 0a05 	strd	r0, sl, [sp, #20]
   badd4:	f8dc 0008 	ldr.w	r0, [ip, #8]
   badd8:	9004      	str	r0, [sp, #16]
   badda:	f8dc 000c 	ldr.w	r0, [ip, #12]
   badde:	9003      	str	r0, [sp, #12]
   bade0:	68a0      	ldr	r0, [r4, #8]
   bade2:	9002      	str	r0, [sp, #8]
   bade4:	68e0      	ldr	r0, [r4, #12]
   bade6:	9001      	str	r0, [sp, #4]
   bade8:	6898      	ldr	r0, [r3, #8]
   badea:	9000      	str	r0, [sp, #0]
   badec:	68db      	ldr	r3, [r3, #12]
   badee:	4628      	mov	r0, r5
   badf0:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
   badf4:	f7ff fbf8 	bl	ba5e8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
   badf8:	4604      	mov	r4, r0
   badfa:	2800      	cmp	r0, #0
   badfc:	d1c2      	bne.n	bad84 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x58>
  switch (input->type) {  // Already know in/out types are same.
   badfe:	f817 0008 	ldrb.w	r0, [r7, r8]
   bae02:	2803      	cmp	r0, #3
   bae04:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   bae08:	d01c      	beq.n	bae44 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x118>
   bae0a:	2809      	cmp	r0, #9
   bae0c:	d00e      	beq.n	bae2c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   bae0e:	2801      	cmp	r0, #1
   bae10:	d125      	bne.n	bae5e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x132>
      EvalFloat(context, node, params, &data, input, filter, bias, nullptr,
   bae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bae14:	9403      	str	r4, [sp, #12]
   bae16:	e9cd 6301 	strd	r6, r3, [sp, #4]
   bae1a:	e9cd 4904 	strd	r4, r9, [sp, #16]
   bae1e:	f8cd b000 	str.w	fp, [sp]
   bae22:	4653      	mov	r3, sl
   bae24:	4628      	mov	r0, r5
   bae26:	f7ff fe31 	bl	baa8c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
      break;
   bae2a:	e7b7      	b.n	bad9c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      EvalQuantizedPerChannel(context, node, params, &data, input, filter, bias,
   bae2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bae2e:	f8cd b000 	str.w	fp, [sp]
   bae32:	e9cd 6301 	strd	r6, r3, [sp, #4]
   bae36:	e9cd 9403 	strd	r9, r4, [sp, #12]
   bae3a:	4653      	mov	r3, sl
   bae3c:	4628      	mov	r0, r5
   bae3e:	f7ff fdc7 	bl	ba9d0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>
      break;
   bae42:	e7ab      	b.n	bad9c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      EvalQuantized(context, node, params, &data, input, filter, bias, nullptr,
   bae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bae46:	9403      	str	r4, [sp, #12]
   bae48:	e9cd 6301 	strd	r6, r3, [sp, #4]
   bae4c:	e9cd 4904 	strd	r4, r9, [sp, #16]
   bae50:	f8cd b000 	str.w	fp, [sp]
   bae54:	4653      	mov	r3, sl
   bae56:	4628      	mov	r0, r5
   bae58:	f7ff fc7c 	bl	ba754 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
      break;
   bae5c:	e79e      	b.n	bad9c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      context->ReportError(context, "Type %s (%d) not supported.",
   bae5e:	696c      	ldr	r4, [r5, #20]
   bae60:	f7f9 fe90 	bl	b4b84 <TfLiteTypeGetName>
   bae64:	f817 3008 	ldrb.w	r3, [r7, r8]
   bae68:	4909      	ldr	r1, [pc, #36]	; (bae90 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x164>)
   bae6a:	4602      	mov	r2, r0
   bae6c:	4628      	mov	r0, r5
   bae6e:	47a0      	blx	r4
      return kTfLiteError;
   bae70:	e788      	b.n	bad84 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x58>
   bae72:	bf00      	nop
   bae74:	000c6fef 	.word	0x000c6fef
   bae78:	000c7022 	.word	0x000c7022
   bae7c:	000c87b1 	.word	0x000c87b1
   bae80:	000c6fd5 	.word	0x000c6fd5
   bae84:	000c703c 	.word	0x000c703c
   bae88:	000c6f40 	.word	0x000c6f40
   bae8c:	000c7050 	.word	0x000c7050
   bae90:	000c85fa 	.word	0x000c85fa

000bae94 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

TfLiteRegistration* Register_CONV_2D() {
  static TfLiteRegistration r = {conv::Init, conv::Free, conv::Prepare,
                                 conv::Eval};
  return &r;
}
   bae94:	4800      	ldr	r0, [pc, #0]	; (bae98 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x4>)
   bae96:	4770      	bx	lr
   bae98:	2003c218 	.word	0x2003c218

000bae9c <_ZN6tflite3ops5micro5split7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace micro {
namespace split {

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   bae9c:	2000      	movs	r0, #0
   bae9e:	4770      	bx	lr

000baea0 <_ZN6tflite3ops5micro14Register_SPLITEv>:
}  // namespace split

TfLiteRegistration* Register_SPLIT() {
  static TfLiteRegistration r = {nullptr, nullptr, split::Prepare, split::Eval};
  return &r;
}
   baea0:	4800      	ldr	r0, [pc, #0]	; (baea4 <_ZN6tflite3ops5micro14Register_SPLITEv+0x4>)
   baea2:	4770      	bx	lr
   baea4:	2003c238 	.word	0x2003c238

000baea8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   baea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   baeac:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   baeae:	6896      	ldr	r6, [r2, #8]
   baeb0:	6825      	ldr	r5, [r4, #0]
  const int split_dimensions = input_dims->size;
   baeb2:	f8d6 e000 	ldr.w	lr, [r6]
   baeb6:	9500      	str	r5, [sp, #0]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   baeb8:	6865      	ldr	r5, [r4, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   baeba:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   baebc:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   baebe:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   baec0:	f04f 0738 	mov.w	r7, #56	; 0x38
   baec4:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   baec8:	bfb8      	it	lt
   baeca:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, split_dimensions);
   baecc:	4573      	cmp	r3, lr
  const TfLiteIntArray* output_dims = output0->dims;
   baece:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   baed0:	db01      	blt.n	baed6 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   baed2:	f009 fc93 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   baed6:	6825      	ldr	r5, [r4, #0]
   baed8:	4575      	cmp	r5, lr
   baeda:	d1fa      	bne.n	baed2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   baedc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   baee0:	9f00      	ldr	r7, [sp, #0]
   baee2:	6865      	ldr	r5, [r4, #4]
   baee4:	437d      	muls	r5, r7
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   baee6:	eb06 0783 	add.w	r7, r6, r3, lsl #2
   baeea:	687f      	ldr	r7, [r7, #4]
   baeec:	42bd      	cmp	r5, r7
   baeee:	d1f0      	bne.n	baed2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   baef0:	f106 0c04 	add.w	ip, r6, #4
  for (int i = 0; i < axis; ++i) {
   baef4:	f04f 0800 	mov.w	r8, #0
   baef8:	46e3      	mov	fp, ip
  int64_t outer_size = 1;
   baefa:	2501      	movs	r5, #1
   baefc:	4646      	mov	r6, r8
  for (int i = 0; i < axis; ++i) {
   baefe:	4598      	cmp	r8, r3
   baf00:	da0c      	bge.n	baf1c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   baf02:	f85b ab04 	ldr.w	sl, [fp], #4
   baf06:	ea4f 77ea 	mov.w	r7, sl, asr #31
   baf0a:	436f      	muls	r7, r5
   baf0c:	fb0a 7706 	mla	r7, sl, r6, r7
   baf10:	fba5 560a 	umull	r5, r6, r5, sl
   baf14:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   baf16:	f108 0801 	add.w	r8, r8, #1
   baf1a:	e7f0      	b.n	baefe <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   baf1c:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   baf1e:	2701      	movs	r7, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   baf20:	4573      	cmp	r3, lr
   baf22:	d005      	beq.n	baf30 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x88>
    base_inner_size *= input_dims->data[i];
   baf24:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   baf28:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   baf2a:	fba7 7801 	umull	r7, r8, r7, r1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   baf2e:	e7f7      	b.n	baf20 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x78>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   baf30:	2300      	movs	r3, #0
   baf32:	f8d2 8004 	ldr.w	r8, [r2, #4]
   baf36:	469e      	mov	lr, r3
  for (int k = 0; k < outer_size; ++k) {
   baf38:	42ab      	cmp	r3, r5
   baf3a:	eb7e 0206 	sbcs.w	r2, lr, r6
   baf3e:	da2e      	bge.n	baf9e <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
    for (int i = 0; i < output_count; ++i) {
   baf40:	f04f 0c00 	mov.w	ip, #0
   baf44:	9a00      	ldr	r2, [sp, #0]
   baf46:	4594      	cmp	ip, r2
   baf48:	da25      	bge.n	baf96 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   baf4a:	9a01      	ldr	r2, [sp, #4]
   baf4c:	6881      	ldr	r1, [r0, #8]
   baf4e:	6852      	ldr	r2, [r2, #4]
   baf50:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   baf54:	f04f 0938 	mov.w	r9, #56	; 0x38
   baf58:	6852      	ldr	r2, [r2, #4]
   baf5a:	fb09 1a02 	mla	sl, r9, r2, r1
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   baf5e:	f1ba 0f00 	cmp.w	sl, #0
   baf62:	d001      	beq.n	baf68 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
   baf64:	f8da a004 	ldr.w	sl, [sl, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   baf68:	6862      	ldr	r2, [r4, #4]
   baf6a:	437a      	muls	r2, r7
      T* output_ptr = output_data + k * copy_size;
   baf6c:	fb02 fb03 	mul.w	fp, r2, r3
   baf70:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
   baf74:	46c1      	mov	r9, r8
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   baf76:	f04f 0b00 	mov.w	fp, #0
   baf7a:	4593      	cmp	fp, r2
   baf7c:	da06      	bge.n	baf8c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   baf7e:	ecf9 7a01 	vldmia	r9!, {s15}
   baf82:	f10b 0b01 	add.w	fp, fp, #1
   baf86:	ecea 7a01 	vstmia	sl!, {s15}
   baf8a:	e7f6      	b.n	baf7a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd2>
      input_ptr += copy_size;
   baf8c:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   baf90:	f10c 0c01 	add.w	ip, ip, #1
   baf94:	e7d6      	b.n	baf44 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9c>
  for (int k = 0; k < outer_size; ++k) {
   baf96:	3301      	adds	r3, #1
   baf98:	f14e 0e00 	adc.w	lr, lr, #0
   baf9c:	e7cc      	b.n	baf38 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x90>
}
   baf9e:	2000      	movs	r0, #0
   bafa0:	b003      	add	sp, #12
   bafa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bafa6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bafa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafaa:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bafac:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bafae:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bafb0:	f8d6 8000 	ldr.w	r8, [r6]
   bafb4:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bafb8:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bafba:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bafbc:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bafbe:	f04f 0738 	mov.w	r7, #56	; 0x38
   bafc2:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bafc6:	bfb8      	it	lt
   bafc8:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bafca:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bafcc:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bafce:	db01      	blt.n	bafd4 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bafd0:	f009 fc14 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bafd4:	6825      	ldr	r5, [r4, #0]
   bafd6:	4545      	cmp	r5, r8
   bafd8:	d1fa      	bne.n	bafd0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bafda:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bafde:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bafe2:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bafe4:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bafe6:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bafea:	42bd      	cmp	r5, r7
   bafec:	d1f0      	bne.n	bafd0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bafee:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   baff2:	f04f 0c00 	mov.w	ip, #0
   baff6:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   baff8:	2501      	movs	r5, #1
   baffa:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   baffc:	459c      	cmp	ip, r3
   baffe:	da0c      	bge.n	bb01a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb000:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb004:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb008:	436f      	muls	r7, r5
   bb00a:	fb09 7706 	mla	r7, r9, r6, r7
   bb00e:	fba5 5609 	umull	r5, r6, r5, r9
   bb012:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb014:	f10c 0c01 	add.w	ip, ip, #1
   bb018:	e7f0      	b.n	baffc <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb01a:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb01c:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb020:	4543      	cmp	r3, r8
   bb022:	d005      	beq.n	bb030 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb024:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb028:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb02a:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb02e:	e7f7      	b.n	bb020 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb030:	2300      	movs	r3, #0
   bb032:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb036:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb038:	42ab      	cmp	r3, r5
   bb03a:	eb78 0206 	sbcs.w	r2, r8, r6
   bb03e:	da28      	bge.n	bb092 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xec>
    for (int i = 0; i < output_count; ++i) {
   bb040:	f04f 0e00 	mov.w	lr, #0
   bb044:	45de      	cmp	lr, fp
   bb046:	da20      	bge.n	bb08a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb048:	9a01      	ldr	r2, [sp, #4]
   bb04a:	6852      	ldr	r2, [r2, #4]
   bb04c:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb050:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb054:	6857      	ldr	r7, [r2, #4]
   bb056:	6882      	ldr	r2, [r0, #8]
   bb058:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb05c:	b102      	cbz	r2, bb060 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb05e:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb060:	6867      	ldr	r7, [r4, #4]
   bb062:	fb0c f707 	mul.w	r7, ip, r7
   bb066:	fb07 2203 	mla	r2, r7, r3, r2
   bb06a:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb06c:	f04f 0a00 	mov.w	sl, #0
   bb070:	45ba      	cmp	sl, r7
   bb072:	da06      	bge.n	bb082 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xdc>
   bb074:	f819 200a 	ldrb.w	r2, [r9, sl]
   bb078:	f801 2b01 	strb.w	r2, [r1], #1
   bb07c:	f10a 0a01 	add.w	sl, sl, #1
   bb080:	e7f6      	b.n	bb070 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xca>
      input_ptr += copy_size;
   bb082:	44b9      	add	r9, r7
    for (int i = 0; i < output_count; ++i) {
   bb084:	f10e 0e01 	add.w	lr, lr, #1
   bb088:	e7dc      	b.n	bb044 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb08a:	3301      	adds	r3, #1
   bb08c:	f148 0800 	adc.w	r8, r8, #0
   bb090:	e7d2      	b.n	bb038 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb092:	2000      	movs	r0, #0
   bb094:	b003      	add	sp, #12
   bb096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb09a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb09a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb09e:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb0a0:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb0a2:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb0a4:	f8d6 8000 	ldr.w	r8, [r6]
   bb0a8:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb0ac:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb0ae:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb0b0:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb0b2:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb0b6:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb0ba:	bfb8      	it	lt
   bb0bc:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb0be:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bb0c0:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb0c2:	db01      	blt.n	bb0c8 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb0c4:	f009 fb9a 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb0c8:	6825      	ldr	r5, [r4, #0]
   bb0ca:	4545      	cmp	r5, r8
   bb0cc:	d1fa      	bne.n	bb0c4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb0ce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb0d2:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb0d6:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb0d8:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb0da:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb0de:	42bd      	cmp	r5, r7
   bb0e0:	d1f0      	bne.n	bb0c4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb0e2:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb0e6:	f04f 0c00 	mov.w	ip, #0
   bb0ea:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   bb0ec:	2501      	movs	r5, #1
   bb0ee:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   bb0f0:	459c      	cmp	ip, r3
   bb0f2:	da0c      	bge.n	bb10e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb0f4:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb0f8:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb0fc:	436f      	muls	r7, r5
   bb0fe:	fb09 7706 	mla	r7, r9, r6, r7
   bb102:	fba5 5609 	umull	r5, r6, r5, r9
   bb106:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb108:	f10c 0c01 	add.w	ip, ip, #1
   bb10c:	e7f0      	b.n	bb0f0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb10e:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb110:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb114:	4543      	cmp	r3, r8
   bb116:	d005      	beq.n	bb124 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb118:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb11c:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb11e:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb122:	e7f7      	b.n	bb114 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb124:	2300      	movs	r3, #0
   bb126:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb12a:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb12c:	42ab      	cmp	r3, r5
   bb12e:	eb78 0206 	sbcs.w	r2, r8, r6
   bb132:	da28      	bge.n	bb186 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xec>
    for (int i = 0; i < output_count; ++i) {
   bb134:	f04f 0e00 	mov.w	lr, #0
   bb138:	45de      	cmp	lr, fp
   bb13a:	da20      	bge.n	bb17e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb13c:	9a01      	ldr	r2, [sp, #4]
   bb13e:	6852      	ldr	r2, [r2, #4]
   bb140:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb144:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb148:	6857      	ldr	r7, [r2, #4]
   bb14a:	6882      	ldr	r2, [r0, #8]
   bb14c:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb150:	b102      	cbz	r2, bb154 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb152:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb154:	6867      	ldr	r7, [r4, #4]
   bb156:	fb0c f707 	mul.w	r7, ip, r7
   bb15a:	fb07 2203 	mla	r2, r7, r3, r2
   bb15e:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb160:	f04f 0a00 	mov.w	sl, #0
   bb164:	45ba      	cmp	sl, r7
   bb166:	da06      	bge.n	bb176 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xdc>
   bb168:	f919 200a 	ldrsb.w	r2, [r9, sl]
   bb16c:	f801 2b01 	strb.w	r2, [r1], #1
   bb170:	f10a 0a01 	add.w	sl, sl, #1
   bb174:	e7f6      	b.n	bb164 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xca>
      input_ptr += copy_size;
   bb176:	44b9      	add	r9, r7
    for (int i = 0; i < output_count; ++i) {
   bb178:	f10e 0e01 	add.w	lr, lr, #1
   bb17c:	e7dc      	b.n	bb138 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb17e:	3301      	adds	r3, #1
   bb180:	f148 0800 	adc.w	r8, r8, #0
   bb184:	e7d2      	b.n	bb12c <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb186:	2000      	movs	r0, #0
   bb188:	b003      	add	sp, #12
   bb18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb18e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb18e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb192:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb194:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb196:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb198:	f8d6 8000 	ldr.w	r8, [r6]
   bb19c:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb1a0:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb1a2:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb1a4:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb1a6:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb1aa:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb1ae:	bfb8      	it	lt
   bb1b0:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb1b2:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bb1b4:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb1b6:	db01      	blt.n	bb1bc <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb1b8:	f009 fb20 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb1bc:	6825      	ldr	r5, [r4, #0]
   bb1be:	4545      	cmp	r5, r8
   bb1c0:	d1fa      	bne.n	bb1b8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb1c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb1c6:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb1ca:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb1cc:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb1ce:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb1d2:	42bd      	cmp	r5, r7
   bb1d4:	d1f0      	bne.n	bb1b8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb1d6:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb1da:	f04f 0c00 	mov.w	ip, #0
   bb1de:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   bb1e0:	2501      	movs	r5, #1
   bb1e2:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   bb1e4:	459c      	cmp	ip, r3
   bb1e6:	da0c      	bge.n	bb202 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb1e8:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb1ec:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb1f0:	436f      	muls	r7, r5
   bb1f2:	fb09 7706 	mla	r7, r9, r6, r7
   bb1f6:	fba5 5609 	umull	r5, r6, r5, r9
   bb1fa:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb1fc:	f10c 0c01 	add.w	ip, ip, #1
   bb200:	e7f0      	b.n	bb1e4 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb202:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb204:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb208:	4543      	cmp	r3, r8
   bb20a:	d005      	beq.n	bb218 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb20c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb210:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb212:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb216:	e7f7      	b.n	bb208 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb218:	2300      	movs	r3, #0
   bb21a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb21e:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb220:	42ab      	cmp	r3, r5
   bb222:	eb78 0206 	sbcs.w	r2, r8, r6
   bb226:	da2b      	bge.n	bb280 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   bb228:	f04f 0e00 	mov.w	lr, #0
   bb22c:	45de      	cmp	lr, fp
   bb22e:	da23      	bge.n	bb278 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb230:	9a01      	ldr	r2, [sp, #4]
   bb232:	6852      	ldr	r2, [r2, #4]
   bb234:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb238:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb23c:	6857      	ldr	r7, [r2, #4]
   bb23e:	6882      	ldr	r2, [r0, #8]
   bb240:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb244:	b102      	cbz	r2, bb248 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb246:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb248:	6867      	ldr	r7, [r4, #4]
   bb24a:	fb0c f707 	mul.w	r7, ip, r7
      T* output_ptr = output_data + k * copy_size;
   bb24e:	fb07 fa03 	mul.w	sl, r7, r3
   bb252:	eb02 024a 	add.w	r2, r2, sl, lsl #1
   bb256:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb258:	f04f 0a00 	mov.w	sl, #0
   bb25c:	45ba      	cmp	sl, r7
   bb25e:	da06      	bge.n	bb26e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe0>
   bb260:	f939 201a 	ldrsh.w	r2, [r9, sl, lsl #1]
   bb264:	f821 2b02 	strh.w	r2, [r1], #2
   bb268:	f10a 0a01 	add.w	sl, sl, #1
   bb26c:	e7f6      	b.n	bb25c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
      input_ptr += copy_size;
   bb26e:	eb09 0947 	add.w	r9, r9, r7, lsl #1
    for (int i = 0; i < output_count; ++i) {
   bb272:	f10e 0e01 	add.w	lr, lr, #1
   bb276:	e7d9      	b.n	bb22c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb278:	3301      	adds	r3, #1
   bb27a:	f148 0800 	adc.w	r8, r8, #0
   bb27e:	e7cf      	b.n	bb220 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb280:	2000      	movs	r0, #0
   bb282:	b003      	add	sp, #12
   bb284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb288 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb28c:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb28e:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb290:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb292:	f8d6 e000 	ldr.w	lr, [r6]
   bb296:	f8d4 9000 	ldr.w	r9, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb29a:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb29c:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb29e:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb2a0:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb2a4:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb2a8:	bfb8      	it	lt
   bb2aa:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb2ac:	4573      	cmp	r3, lr
  const TfLiteIntArray* output_dims = output0->dims;
   bb2ae:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb2b0:	db01      	blt.n	bb2b6 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb2b2:	f009 faa3 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb2b6:	6825      	ldr	r5, [r4, #0]
   bb2b8:	4575      	cmp	r5, lr
   bb2ba:	d1fa      	bne.n	bb2b2 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb2bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb2c0:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb2c4:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb2c6:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb2c8:	fb05 f509 	mul.w	r5, r5, r9
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb2cc:	42bd      	cmp	r5, r7
   bb2ce:	d1f0      	bne.n	bb2b2 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb2d0:	f106 0c04 	add.w	ip, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb2d4:	f04f 0800 	mov.w	r8, #0
   bb2d8:	46e3      	mov	fp, ip
  int64_t outer_size = 1;
   bb2da:	2501      	movs	r5, #1
   bb2dc:	4646      	mov	r6, r8
  for (int i = 0; i < axis; ++i) {
   bb2de:	4598      	cmp	r8, r3
   bb2e0:	da0c      	bge.n	bb2fc <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb2e2:	f85b ab04 	ldr.w	sl, [fp], #4
   bb2e6:	ea4f 77ea 	mov.w	r7, sl, asr #31
   bb2ea:	436f      	muls	r7, r5
   bb2ec:	fb0a 7706 	mla	r7, sl, r6, r7
   bb2f0:	fba5 560a 	umull	r5, r6, r5, sl
   bb2f4:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb2f6:	f108 0801 	add.w	r8, r8, #1
   bb2fa:	e7f0      	b.n	bb2de <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb2fc:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb2fe:	2701      	movs	r7, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb300:	4573      	cmp	r3, lr
   bb302:	d005      	beq.n	bb310 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x88>
    base_inner_size *= input_dims->data[i];
   bb304:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb308:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb30a:	fba7 7801 	umull	r7, r8, r7, r1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb30e:	e7f7      	b.n	bb300 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x78>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb310:	2300      	movs	r3, #0
   bb312:	f8d2 8004 	ldr.w	r8, [r2, #4]
   bb316:	469e      	mov	lr, r3
  for (int k = 0; k < outer_size; ++k) {
   bb318:	42ab      	cmp	r3, r5
   bb31a:	eb7e 0206 	sbcs.w	r2, lr, r6
   bb31e:	da2c      	bge.n	bb37a <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   bb320:	f04f 0c00 	mov.w	ip, #0
   bb324:	45cc      	cmp	ip, r9
   bb326:	da24      	bge.n	bb372 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb328:	9a01      	ldr	r2, [sp, #4]
   bb32a:	6881      	ldr	r1, [r0, #8]
   bb32c:	6852      	ldr	r2, [r2, #4]
   bb32e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   bb332:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb336:	6852      	ldr	r2, [r2, #4]
   bb338:	fb0a 1a02 	mla	sl, sl, r2, r1
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb33c:	f1ba 0f00 	cmp.w	sl, #0
   bb340:	d001      	beq.n	bb346 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xbe>
   bb342:	f8da a004 	ldr.w	sl, [sl, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb346:	6862      	ldr	r2, [r4, #4]
   bb348:	437a      	muls	r2, r7
      T* output_ptr = output_data + k * copy_size;
   bb34a:	fb02 fb03 	mul.w	fp, r2, r3
   bb34e:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb352:	f04f 0b00 	mov.w	fp, #0
   bb356:	4593      	cmp	fp, r2
   bb358:	da06      	bge.n	bb368 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe0>
   bb35a:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
   bb35e:	f84a 1b04 	str.w	r1, [sl], #4
   bb362:	f10b 0b01 	add.w	fp, fp, #1
   bb366:	e7f6      	b.n	bb356 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
      input_ptr += copy_size;
   bb368:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   bb36c:	f10c 0c01 	add.w	ip, ip, #1
   bb370:	e7d8      	b.n	bb324 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9c>
  for (int k = 0; k < outer_size; ++k) {
   bb372:	3301      	adds	r3, #1
   bb374:	f14e 0e00 	adc.w	lr, lr, #0
   bb378:	e7ce      	b.n	bb318 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x90>
}
   bb37a:	2000      	movs	r0, #0
   bb37c:	b003      	add	sp, #12
   bb37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000bb384 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bb384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb386:	680e      	ldr	r6, [r1, #0]
   bb388:	f8d0 c008 	ldr.w	ip, [r0, #8]
   bb38c:	6873      	ldr	r3, [r6, #4]
   bb38e:	2238      	movs	r2, #56	; 0x38
   bb390:	fb02 c303 	mla	r3, r2, r3, ip
   bb394:	4605      	mov	r5, r0
  return tensor->allocation_type == kTfLiteMmapRo;
   bb396:	7d1c      	ldrb	r4, [r3, #20]
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
   bb398:	2c01      	cmp	r4, #1
   bb39a:	d006      	beq.n	bb3aa <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x26>
   bb39c:	6943      	ldr	r3, [r0, #20]
   bb39e:	4927      	ldr	r1, [pc, #156]	; (bb43c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
   bb3a0:	4798      	blx	r3
   bb3a2:	2401      	movs	r4, #1
}
   bb3a4:	4620      	mov	r0, r4
   bb3a6:	b003      	add	sp, #12
   bb3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb3aa:	68b6      	ldr	r6, [r6, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
   bb3ac:	685b      	ldr	r3, [r3, #4]
   bb3ae:	4356      	muls	r6, r2
   bb3b0:	eb0c 0206 	add.w	r2, ip, r6
   bb3b4:	681b      	ldr	r3, [r3, #0]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   bb3b6:	6897      	ldr	r7, [r2, #8]
  if (axis_value < 0) {
   bb3b8:	2b00      	cmp	r3, #0
   bb3ba:	683f      	ldr	r7, [r7, #0]
   bb3bc:	da09      	bge.n	bb3d2 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
  TF_LITE_ENSURE(context, axis_value >= 0);
   bb3be:	19db      	adds	r3, r3, r7
   bb3c0:	d507      	bpl.n	bb3d2 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
   bb3c2:	4b1f      	ldr	r3, [pc, #124]	; (bb440 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   bb3c4:	9300      	str	r3, [sp, #0]
   bb3c6:	6945      	ldr	r5, [r0, #20]
   bb3c8:	4a1e      	ldr	r2, [pc, #120]	; (bb444 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   bb3ca:	491f      	ldr	r1, [pc, #124]	; (bb448 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   bb3cc:	2357      	movs	r3, #87	; 0x57
   bb3ce:	47a8      	blx	r5
   bb3d0:	e7e8      	b.n	bb3a4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
   bb3d2:	429f      	cmp	r7, r3
   bb3d4:	dc08      	bgt.n	bb3e8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x64>
   bb3d6:	4b1d      	ldr	r3, [pc, #116]	; (bb44c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   bb3d8:	9300      	str	r3, [sp, #0]
   bb3da:	696e      	ldr	r6, [r5, #20]
   bb3dc:	4a19      	ldr	r2, [pc, #100]	; (bb444 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   bb3de:	491a      	ldr	r1, [pc, #104]	; (bb448 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   bb3e0:	2358      	movs	r3, #88	; 0x58
   bb3e2:	4628      	mov	r0, r5
   bb3e4:	47b0      	blx	r6
   bb3e6:	e7dd      	b.n	bb3a4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  switch (input->type) {
   bb3e8:	f81c 0006 	ldrb.w	r0, [ip, r6]
   bb3ec:	1e46      	subs	r6, r0, #1
   bb3ee:	2e08      	cmp	r6, #8
   bb3f0:	d81b      	bhi.n	bb42a <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
   bb3f2:	e8df f006 	tbb	[pc, r6]
   bb3f6:	1605      	.short	0x1605
   bb3f8:	1a1a1a0a 	.word	0x1a1a1a0a
   bb3fc:	1a12      	.short	0x1a12
   bb3fe:	0e          	.byte	0x0e
   bb3ff:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
   bb400:	4628      	mov	r0, r5
   bb402:	f7ff fd51 	bl	baea8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
   bb406:	4604      	mov	r4, r0
   bb408:	e7cc      	b.n	bb3a4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
   bb40a:	4628      	mov	r0, r5
   bb40c:	f7ff fdcb 	bl	bafa6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb410:	e7f9      	b.n	bb406 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int8_t>(context, node, input, axis_value);
   bb412:	4628      	mov	r0, r5
   bb414:	f7ff fe41 	bl	bb09a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb418:	e7f5      	b.n	bb406 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int16_t>(context, node, input, axis_value);
   bb41a:	4628      	mov	r0, r5
   bb41c:	f7ff feb7 	bl	bb18e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb420:	e7f1      	b.n	bb406 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int32_t>(context, node, input, axis_value);
   bb422:	4628      	mov	r0, r5
   bb424:	f7ff ff30 	bl	bb288 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb428:	e7ed      	b.n	bb406 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      context->ReportError(context, "Type %s currently not supported.",
   bb42a:	696e      	ldr	r6, [r5, #20]
   bb42c:	f7f9 fbaa 	bl	b4b84 <TfLiteTypeGetName>
   bb430:	4907      	ldr	r1, [pc, #28]	; (bb450 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   bb432:	4602      	mov	r2, r0
   bb434:	4628      	mov	r0, r5
   bb436:	47b0      	blx	r6
      return kTfLiteError;
   bb438:	e7b4      	b.n	bb3a4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
   bb43a:	bf00      	nop
   bb43c:	000c8857 	.word	0x000c8857
   bb440:	000c895c 	.word	0x000c895c
   bb444:	000c88ed 	.word	0x000c88ed
   bb448:	000c6f40 	.word	0x000c6f40
   bb44c:	000c896c 	.word	0x000c896c
   bb450:	000c898e 	.word	0x000c898e

000bb454 <_ZN6tflite3ops5micro14Register_EQUALEv>:

TfLiteRegistration* Register_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::EqualEval};
  return &r;
}
   bb454:	4800      	ldr	r0, [pc, #0]	; (bb458 <_ZN6tflite3ops5micro14Register_EQUALEv+0x4>)
   bb456:	4770      	bx	lr
   bb458:	2003c278 	.word	0x2003c278

000bb45c <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:

TfLiteRegistration* Register_NOT_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::NotEqualEval};
  return &r;
}
   bb45c:	4800      	ldr	r0, [pc, #0]	; (bb460 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x4>)
   bb45e:	4770      	bx	lr
   bb460:	2003c2b8 	.word	0x2003c2b8

000bb464 <_ZN6tflite3ops5micro16Register_GREATEREv>:

TfLiteRegistration* Register_GREATER() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::GreaterEval};
  return &r;
}
   bb464:	4800      	ldr	r0, [pc, #0]	; (bb468 <_ZN6tflite3ops5micro16Register_GREATEREv+0x4>)
   bb466:	4770      	bx	lr
   bb468:	2003c298 	.word	0x2003c298

000bb46c <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:

TfLiteRegistration* Register_GREATER_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::GreaterEqualEval};
  return &r;
}
   bb46c:	4800      	ldr	r0, [pc, #0]	; (bb470 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x4>)
   bb46e:	4770      	bx	lr
   bb470:	2003c2f8 	.word	0x2003c2f8

000bb474 <_ZN6tflite3ops5micro13Register_LESSEv>:

TfLiteRegistration* Register_LESS() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::LessEval};
  return &r;
}
   bb474:	4800      	ldr	r0, [pc, #0]	; (bb478 <_ZN6tflite3ops5micro13Register_LESSEv+0x4>)
   bb476:	4770      	bx	lr
   bb478:	2003c258 	.word	0x2003c258

000bb47c <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:

TfLiteRegistration* Register_LESS_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::LessEqualEval};
  return &r;
}
   bb47c:	4800      	ldr	r0, [pc, #0]	; (bb480 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x4>)
   bb47e:	4770      	bx	lr
   bb480:	2003c2d8 	.word	0x2003c2d8

000bb484 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
                                          input2_shape, input2_data,
                                          output_shape, output_data);
}

template <typename T, ComparisonFn<int32> F>
inline void BroadcastComparison4DSlowWithScaling(
   bb484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb488:	ed2d 8b04 	vpush	{d8-d9}
   bb48c:	461e      	mov	r6, r3
    const ComparisonParams& op_params,
    const RuntimeShape& unextended_input1_shape, const T* input1_data,
    const RuntimeShape& unextended_input2_shape, const T* input2_data,
    const RuntimeShape& unextended_output_shape, bool* output_data) {
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb48e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bb490:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb492:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bb494:	9204      	str	r2, [sp, #16]
   bb496:	4604      	mov	r4, r0
   bb498:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bb49a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb49c:	dd01      	ble.n	bb4a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bb49e:	f009 f9ad 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb4a2:	6833      	ldr	r3, [r6, #0]
   bb4a4:	2b04      	cmp	r3, #4
   bb4a6:	dcfa      	bgt.n	bb49e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb4a8:	6813      	ldr	r3, [r2, #0]
   bb4aa:	2b04      	cmp	r3, #4
   bb4ac:	dcf7      	bgt.n	bb49e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
    return RuntimeShape(new_shape_size, shape, 1);
   bb4ae:	2301      	movs	r3, #1
   bb4b0:	2104      	movs	r1, #4
   bb4b2:	a807      	add	r0, sp, #28
   bb4b4:	f7fa ff8a 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb4b8:	ab14      	add	r3, sp, #80	; 0x50
   bb4ba:	aa0c      	add	r2, sp, #48	; 0x30
   bb4bc:	4631      	mov	r1, r6
   bb4be:	4628      	mov	r0, r5
   bb4c0:	f7fb fa8c 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      unextended_input2_shape, &desc1, &desc2);

  int left_shift = op_params.left_shift;
  int32 input1_offset = op_params.input1_offset;
   bb4c4:	e9d4 a300 	ldrd	sl, r3, [r4]
   bb4c8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb4ca:	68a3      	ldr	r3, [r4, #8]
  int input1_shift = op_params.input1_shift;
  int32 input2_offset = op_params.input2_offset;
  int32 input2_multiplier = op_params.input2_multiplier;
  int input2_shift = op_params.input2_shift;
   bb4cc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb4d0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bb4d4:	68e3      	ldr	r3, [r4, #12]
   bb4d6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bb4da:	6923      	ldr	r3, [r4, #16]
   bb4dc:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bb4de:	6963      	ldr	r3, [r4, #20]
   bb4e0:	ee09 3a10 	vmov	s18, r3

  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb4e4:	2400      	movs	r4, #0
   bb4e6:	2100      	movs	r1, #0
   bb4e8:	a807      	add	r0, sp, #28
   bb4ea:	f7fa ff35 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb4ee:	42a0      	cmp	r0, r4
   bb4f0:	dd5c      	ble.n	bb5ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb4f2:	2500      	movs	r5, #0
   bb4f4:	af07      	add	r7, sp, #28
   bb4f6:	2101      	movs	r1, #1
   bb4f8:	4638      	mov	r0, r7
   bb4fa:	f7fa ff2d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb4fe:	42a8      	cmp	r0, r5
   bb500:	dd52      	ble.n	bb5a8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb502:	2600      	movs	r6, #0
   bb504:	2102      	movs	r1, #2
   bb506:	4638      	mov	r0, r7
   bb508:	f7fa ff26 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb50c:	42b0      	cmp	r0, r6
   bb50e:	dd49      	ble.n	bb5a4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb510:	f04f 0800 	mov.w	r8, #0
   bb514:	2103      	movs	r1, #3
   bb516:	4638      	mov	r0, r7
   bb518:	f7fa ff1e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb51c:	4540      	cmp	r0, r8
   bb51e:	dd3f      	ble.n	bb5a0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
          const int32 input1_val =
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bb520:	f8cd 8000 	str.w	r8, [sp]
   bb524:	4633      	mov	r3, r6
   bb526:	462a      	mov	r2, r5
   bb528:	4621      	mov	r1, r4
   bb52a:	a80c      	add	r0, sp, #48	; 0x30
   bb52c:	f7fb f824 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb530:	9b04      	ldr	r3, [sp, #16]
   bb532:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bb536:	9b02      	ldr	r3, [sp, #8]
          const int32 input2_val =
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb538:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bb53c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb53e:	462a      	mov	r2, r5
   bb540:	4633      	mov	r3, r6
   bb542:	4621      	mov	r1, r4
   bb544:	a814      	add	r0, sp, #80	; 0x50
   bb546:	f7fb f817 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb54a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bb54c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb54e:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bb550:	4413      	add	r3, r2
          const int32 shifted_input1_val = input1_val * (1 << left_shift);
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb552:	fa03 f30a 	lsl.w	r3, r3, sl
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb556:	ee18 2a90 	vmov	r2, s17
   bb55a:	ee18 1a10 	vmov	r1, s16
   bb55e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb562:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb564:	f7fa ffbe 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, input1_multiplier, input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb568:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb56a:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb56c:	ee19 1a10 	vmov	r1, s18
   bb570:	465a      	mov	r2, fp
   bb572:	4618      	mov	r0, r3
   bb574:	f7fa ffb6 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bb578:	eba9 0300 	sub.w	r3, r9, r0
   bb57c:	f1d3 0900 	rsbs	r9, r3, #0
   bb580:	eb49 0903 	adc.w	r9, r9, r3
                  shifted_input2_val, input2_multiplier, input2_shift);
          output_data[Offset(output_shape, b, y, x, c)] =
   bb584:	f8cd 8000 	str.w	r8, [sp]
   bb588:	4633      	mov	r3, r6
   bb58a:	462a      	mov	r2, r5
   bb58c:	4621      	mov	r1, r4
   bb58e:	4638      	mov	r0, r7
   bb590:	f7fa ff49 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bb594:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb596:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb59a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb59e:	e7b9      	b.n	bb514 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb5a0:	3601      	adds	r6, #1
   bb5a2:	e7af      	b.n	bb504 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb5a4:	3501      	adds	r5, #1
   bb5a6:	e7a5      	b.n	bb4f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb5a8:	3401      	adds	r4, #1
   bb5aa:	e79c      	b.n	bb4e6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bb5ac:	a807      	add	r0, sp, #28
   bb5ae:	f7fa fec8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
              F(scaled_input1_val, scaled_input2_val);
        }
      }
    }
  }
}
   bb5b2:	b01d      	add	sp, #116	; 0x74
   bb5b4:	ecbd 8b04 	vpop	{d8-d9}
   bb5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb5bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bb5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb5c0:	ed2d 8b04 	vpush	{d8-d9}
   bb5c4:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb5c6:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bb5c8:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb5ca:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bb5cc:	9204      	str	r2, [sp, #16]
   bb5ce:	4604      	mov	r4, r0
   bb5d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bb5d2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb5d4:	dd01      	ble.n	bb5da <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bb5d6:	f009 f911 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb5da:	6833      	ldr	r3, [r6, #0]
   bb5dc:	2b04      	cmp	r3, #4
   bb5de:	dcfa      	bgt.n	bb5d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb5e0:	6813      	ldr	r3, [r2, #0]
   bb5e2:	2b04      	cmp	r3, #4
   bb5e4:	dcf7      	bgt.n	bb5d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bb5e6:	2301      	movs	r3, #1
   bb5e8:	2104      	movs	r1, #4
   bb5ea:	a807      	add	r0, sp, #28
   bb5ec:	f7fa feee 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb5f0:	ab14      	add	r3, sp, #80	; 0x50
   bb5f2:	aa0c      	add	r2, sp, #48	; 0x30
   bb5f4:	4631      	mov	r1, r6
   bb5f6:	4628      	mov	r0, r5
   bb5f8:	f7fb f9f0 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bb5fc:	e9d4 a300 	ldrd	sl, r3, [r4]
   bb600:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb602:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bb604:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb608:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bb60c:	68e3      	ldr	r3, [r4, #12]
   bb60e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bb612:	6923      	ldr	r3, [r4, #16]
   bb614:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bb616:	6963      	ldr	r3, [r4, #20]
   bb618:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb61c:	2400      	movs	r4, #0
   bb61e:	2100      	movs	r1, #0
   bb620:	a807      	add	r0, sp, #28
   bb622:	f7fa fe99 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb626:	42a0      	cmp	r0, r4
   bb628:	dd5c      	ble.n	bb6e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb62a:	2500      	movs	r5, #0
   bb62c:	af07      	add	r7, sp, #28
   bb62e:	2101      	movs	r1, #1
   bb630:	4638      	mov	r0, r7
   bb632:	f7fa fe91 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb636:	42a8      	cmp	r0, r5
   bb638:	dd52      	ble.n	bb6e0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb63a:	2600      	movs	r6, #0
   bb63c:	2102      	movs	r1, #2
   bb63e:	4638      	mov	r0, r7
   bb640:	f7fa fe8a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb644:	42b0      	cmp	r0, r6
   bb646:	dd49      	ble.n	bb6dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb648:	f04f 0800 	mov.w	r8, #0
   bb64c:	2103      	movs	r1, #3
   bb64e:	4638      	mov	r0, r7
   bb650:	f7fa fe82 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb654:	4540      	cmp	r0, r8
   bb656:	dd3f      	ble.n	bb6d8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bb658:	f8cd 8000 	str.w	r8, [sp]
   bb65c:	4633      	mov	r3, r6
   bb65e:	462a      	mov	r2, r5
   bb660:	4621      	mov	r1, r4
   bb662:	a80c      	add	r0, sp, #48	; 0x30
   bb664:	f7fa ff88 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb668:	9b04      	ldr	r3, [sp, #16]
   bb66a:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bb66e:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb670:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bb674:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb676:	462a      	mov	r2, r5
   bb678:	4633      	mov	r3, r6
   bb67a:	4621      	mov	r1, r4
   bb67c:	a814      	add	r0, sp, #80	; 0x50
   bb67e:	f7fa ff7b 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb682:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bb684:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb686:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bb688:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb68a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb68e:	ee18 2a90 	vmov	r2, s17
   bb692:	ee18 1a10 	vmov	r1, s16
   bb696:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb69a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb69c:	f7fa ff22 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb6a0:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb6a2:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb6a4:	ee19 1a10 	vmov	r1, s18
   bb6a8:	465a      	mov	r2, fp
   bb6aa:	4618      	mov	r0, r3
   bb6ac:	f7fa ff1a 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bb6b0:	eba9 0300 	sub.w	r3, r9, r0
   bb6b4:	f1d3 0900 	rsbs	r9, r3, #0
   bb6b8:	eb49 0903 	adc.w	r9, r9, r3
          output_data[Offset(output_shape, b, y, x, c)] =
   bb6bc:	f8cd 8000 	str.w	r8, [sp]
   bb6c0:	4633      	mov	r3, r6
   bb6c2:	462a      	mov	r2, r5
   bb6c4:	4621      	mov	r1, r4
   bb6c6:	4638      	mov	r0, r7
   bb6c8:	f7fa fead 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bb6cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb6ce:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb6d2:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb6d6:	e7b9      	b.n	bb64c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb6d8:	3601      	adds	r6, #1
   bb6da:	e7af      	b.n	bb63c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb6dc:	3501      	adds	r5, #1
   bb6de:	e7a5      	b.n	bb62c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb6e0:	3401      	adds	r4, #1
   bb6e2:	e79c      	b.n	bb61e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bb6e4:	a807      	add	r0, sp, #28
   bb6e6:	f7fa fe2c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bb6ea:	b01d      	add	sp, #116	; 0x74
   bb6ec:	ecbd 8b04 	vpop	{d8-d9}
   bb6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb6f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   bb6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6f8:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb6fc:	680a      	ldr	r2, [r1, #0]
   bb6fe:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bb702:	6895      	ldr	r5, [r2, #8]
   bb704:	4680      	mov	r8, r0
   bb706:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb708:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb70a:	2338      	movs	r3, #56	; 0x38
   bb70c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb710:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb712:	fb03 a505 	mla	r5, r3, r5, sl
   bb716:	eb0a 0609 	add.w	r6, sl, r9
   bb71a:	b0df      	sub	sp, #380	; 0x17c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bb71c:	4629      	mov	r1, r5
   bb71e:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb720:	fb03 a404 	mla	r4, r3, r4, sl
   bb724:	f7f9 fd3a 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bb728:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bb72c:	f080 0001 	eor.w	r0, r0, #1
   bb730:	1e53      	subs	r3, r2, #1
   bb732:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bb734:	2b08      	cmp	r3, #8
   bb736:	f200 8424 	bhi.w	bbf82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88e>
   bb73a:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb73e:	00be      	.short	0x00be
   bb740:	02fc017b 	.word	0x02fc017b
   bb744:	04220233 	.word	0x04220233
   bb748:	04220009 	.word	0x04220009
   bb74c:	03920422 	.word	0x03920422
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   bb750:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bb754:	4631      	mov	r1, r6
   bb756:	2f00      	cmp	r7, #0
   bb758:	f000 8087 	beq.w	bb86a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bb75c:	a80d      	add	r0, sp, #52	; 0x34
   bb75e:	f7fb f894 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb762:	6873      	ldr	r3, [r6, #4]
   bb764:	9305      	str	r3, [sp, #20]
   bb766:	4629      	mov	r1, r5
   bb768:	a812      	add	r0, sp, #72	; 0x48
   bb76a:	f7fb f88e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb76e:	b105      	cbz	r5, bb772 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bb770:	686d      	ldr	r5, [r5, #4]
   bb772:	4621      	mov	r1, r4
   bb774:	a817      	add	r0, sp, #92	; 0x5c
   bb776:	f7fb f888 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb77a:	b104      	cbz	r4, bb77e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bb77c:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb780:	2b04      	cmp	r3, #4
   bb782:	dd01      	ble.n	bb788 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bb784:	f009 f83a 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb788:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb78a:	2b04      	cmp	r3, #4
   bb78c:	dcfa      	bgt.n	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb78e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb790:	2b04      	cmp	r3, #4
   bb792:	dcf7      	bgt.n	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bb794:	2301      	movs	r3, #1
   bb796:	aa17      	add	r2, sp, #92	; 0x5c
   bb798:	2104      	movs	r1, #4
   bb79a:	a849      	add	r0, sp, #292	; 0x124
   bb79c:	f7fa fe16 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb7a0:	ab56      	add	r3, sp, #344	; 0x158
   bb7a2:	4642      	mov	r2, r8
   bb7a4:	a912      	add	r1, sp, #72	; 0x48
   bb7a6:	a80d      	add	r0, sp, #52	; 0x34
   bb7a8:	f7fb f918 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb7ac:	2600      	movs	r6, #0
   bb7ae:	2100      	movs	r1, #0
   bb7b0:	a849      	add	r0, sp, #292	; 0x124
   bb7b2:	f7fa fdd1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb7b6:	42b0      	cmp	r0, r6
   bb7b8:	dd45      	ble.n	bb846 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x152>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb7ba:	2700      	movs	r7, #0
   bb7bc:	2101      	movs	r1, #1
   bb7be:	a849      	add	r0, sp, #292	; 0x124
   bb7c0:	f7fa fdca 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb7c4:	42b8      	cmp	r0, r7
   bb7c6:	dd3c      	ble.n	bb842 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x14e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb7c8:	f04f 0b00 	mov.w	fp, #0
   bb7cc:	2102      	movs	r1, #2
   bb7ce:	a849      	add	r0, sp, #292	; 0x124
   bb7d0:	f7fa fdc2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb7d4:	4558      	cmp	r0, fp
   bb7d6:	dd32      	ble.n	bb83e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x14a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb7d8:	f04f 0900 	mov.w	r9, #0
   bb7dc:	2103      	movs	r1, #3
   bb7de:	a849      	add	r0, sp, #292	; 0x124
   bb7e0:	f7fa fdba 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb7e4:	4548      	cmp	r0, r9
   bb7e6:	dd27      	ble.n	bb838 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb7e8:	f8cd 9000 	str.w	r9, [sp]
   bb7ec:	465b      	mov	r3, fp
   bb7ee:	463a      	mov	r2, r7
   bb7f0:	4631      	mov	r1, r6
   bb7f2:	4640      	mov	r0, r8
   bb7f4:	f7fa fec0 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb7f8:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb7fc:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb7fe:	465b      	mov	r3, fp
   bb800:	463a      	mov	r2, r7
   bb802:	4631      	mov	r1, r6
   bb804:	a856      	add	r0, sp, #344	; 0x158
   bb806:	f7fa feb7 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs == rhs;
   bb80a:	9b05      	ldr	r3, [sp, #20]
   bb80c:	5c2a      	ldrb	r2, [r5, r0]
   bb80e:	f813 a00a 	ldrb.w	sl, [r3, sl]
          output_data[Offset(output_shape, b, y, x, c)] =
   bb812:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bb816:	ebaa 0c02 	sub.w	ip, sl, r2
   bb81a:	f1dc 0a00 	rsbs	sl, ip, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bb81e:	465b      	mov	r3, fp
   bb820:	463a      	mov	r2, r7
   bb822:	4631      	mov	r1, r6
   bb824:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bb826:	eb4a 0a0c 	adc.w	sl, sl, ip
          output_data[Offset(output_shape, b, y, x, c)] =
   bb82a:	f7fa fdfc 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb82e:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb832:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb836:	e7d1      	b.n	bb7dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb838:	f10b 0b01 	add.w	fp, fp, #1
   bb83c:	e7c6      	b.n	bb7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb83e:	3701      	adds	r7, #1
   bb840:	e7bc      	b.n	bb7bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb842:	3601      	adds	r6, #1
   bb844:	e7b3      	b.n	bb7ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bb846:	a849      	add	r0, sp, #292	; 0x124
   bb848:	f7fa fd7b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb84c:	a817      	add	r0, sp, #92	; 0x5c
   bb84e:	f7fa fd78 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb852:	a812      	add	r0, sp, #72	; 0x48
   bb854:	f7fa fd75 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb858:	a80d      	add	r0, sp, #52	; 0x34
TF_LITE_QUANTIZE_COMPARISON(Equal);
   bb85a:	f7fa fd72 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bb85e:	2000      	movs	r0, #0
}
   bb860:	b05f      	add	sp, #380	; 0x17c
   bb862:	ecbd 8b02 	vpop	{d8}
   bb866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   bb86a:	a849      	add	r0, sp, #292	; 0x124
   bb86c:	f7fb f80d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb870:	4629      	mov	r1, r5
   bb872:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb874:	6876      	ldr	r6, [r6, #4]
   bb876:	f7fb f808 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb87a:	b105      	cbz	r5, bb87e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x18a>
   bb87c:	686d      	ldr	r5, [r5, #4]
   bb87e:	4621      	mov	r1, r4
   bb880:	a856      	add	r0, sp, #344	; 0x158
   bb882:	f7fb f802 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb886:	b104      	cbz	r4, bb88a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x196>
   bb888:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bb88a:	aa56      	add	r2, sp, #344	; 0x158
   bb88c:	4641      	mov	r1, r8
   bb88e:	a849      	add	r0, sp, #292	; 0x124
   bb890:	f7fa fdeb 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bb894:	2300      	movs	r3, #0
  const int64_t flatsize =
   bb896:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bb89a:	461a      	mov	r2, r3
   bb89c:	4283      	cmp	r3, r0
   bb89e:	eb72 010c 	sbcs.w	r1, r2, ip
   bb8a2:	f280 8177 	bge.w	bbb94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
  return lhs == rhs;
   bb8a6:	5cf1      	ldrb	r1, [r6, r3]
   bb8a8:	5cef      	ldrb	r7, [r5, r3]
   bb8aa:	1bcf      	subs	r7, r1, r7
   bb8ac:	4279      	negs	r1, r7
   bb8ae:	4179      	adcs	r1, r7
   bb8b0:	54e1      	strb	r1, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bb8b2:	3301      	adds	r3, #1
   bb8b4:	f142 0200 	adc.w	r2, r2, #0
   bb8b8:	e7f0      	b.n	bb89c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
   bb8ba:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bb8be:	4631      	mov	r1, r6
   bb8c0:	2f00      	cmp	r7, #0
   bb8c2:	f000 8089 	beq.w	bb9d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
   bb8c6:	a81c      	add	r0, sp, #112	; 0x70
   bb8c8:	f7fa ffdf 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb8cc:	6873      	ldr	r3, [r6, #4]
   bb8ce:	9305      	str	r3, [sp, #20]
   bb8d0:	4629      	mov	r1, r5
   bb8d2:	a821      	add	r0, sp, #132	; 0x84
   bb8d4:	f7fa ffd9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb8d8:	b105      	cbz	r5, bb8dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   bb8da:	686d      	ldr	r5, [r5, #4]
   bb8dc:	4621      	mov	r1, r4
   bb8de:	a826      	add	r0, sp, #152	; 0x98
   bb8e0:	f7fa ffd3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb8e4:	b104      	cbz	r4, bb8e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
   bb8e6:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb8e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   bb8ea:	2b04      	cmp	r3, #4
   bb8ec:	f73f af4a 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   bb8f2:	2b04      	cmp	r3, #4
   bb8f4:	f73f af46 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb8f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bb8fa:	2b04      	cmp	r3, #4
   bb8fc:	f73f af42 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bb900:	2301      	movs	r3, #1
   bb902:	aa26      	add	r2, sp, #152	; 0x98
   bb904:	2104      	movs	r1, #4
   bb906:	a849      	add	r0, sp, #292	; 0x124
   bb908:	f7fa fd60 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb90c:	ab56      	add	r3, sp, #344	; 0x158
   bb90e:	4642      	mov	r2, r8
   bb910:	a921      	add	r1, sp, #132	; 0x84
   bb912:	a81c      	add	r0, sp, #112	; 0x70
   bb914:	f7fb f862 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb918:	2600      	movs	r6, #0
   bb91a:	2100      	movs	r1, #0
   bb91c:	a849      	add	r0, sp, #292	; 0x124
   bb91e:	f7fa fd1b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb922:	42b0      	cmp	r0, r6
   bb924:	dd4d      	ble.n	bb9c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb926:	2700      	movs	r7, #0
   bb928:	2101      	movs	r1, #1
   bb92a:	a849      	add	r0, sp, #292	; 0x124
   bb92c:	f7fa fd14 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb930:	42b8      	cmp	r0, r7
   bb932:	dd44      	ble.n	bb9be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ca>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb934:	f04f 0b00 	mov.w	fp, #0
   bb938:	2102      	movs	r1, #2
   bb93a:	a849      	add	r0, sp, #292	; 0x124
   bb93c:	f7fa fd0c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb940:	4558      	cmp	r0, fp
   bb942:	dd3a      	ble.n	bb9ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb944:	f04f 0900 	mov.w	r9, #0
   bb948:	2103      	movs	r1, #3
   bb94a:	a849      	add	r0, sp, #292	; 0x124
   bb94c:	f7fa fd04 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb950:	4548      	cmp	r0, r9
   bb952:	dd2f      	ble.n	bb9b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2c0>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb954:	f8cd 9000 	str.w	r9, [sp]
   bb958:	465b      	mov	r3, fp
   bb95a:	463a      	mov	r2, r7
   bb95c:	4631      	mov	r1, r6
   bb95e:	4640      	mov	r0, r8
   bb960:	f7fa fe0a 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb964:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb968:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb96a:	465b      	mov	r3, fp
   bb96c:	463a      	mov	r2, r7
   bb96e:	4631      	mov	r1, r6
   bb970:	a856      	add	r0, sp, #344	; 0x158
   bb972:	f7fa fe01 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb976:	9b05      	ldr	r3, [sp, #20]
   bb978:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bb97c:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs == rhs;
   bb980:	ed9a 7a00 	vldr	s14, [sl]
   bb984:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bb988:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bb98c:	eeb4 7a67 	vcmp.f32	s14, s15
   bb990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bb994:	465b      	mov	r3, fp
   bb996:	463a      	mov	r2, r7
   bb998:	4631      	mov	r1, r6
   bb99a:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bb99c:	bf0c      	ite	eq
   bb99e:	f04f 0a01 	moveq.w	sl, #1
   bb9a2:	f04f 0a00 	movne.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bb9a6:	f7fa fd3e 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb9aa:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb9ae:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb9b2:	e7c9      	b.n	bb948 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x254>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb9b4:	f10b 0b01 	add.w	fp, fp, #1
   bb9b8:	e7be      	b.n	bb938 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x244>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb9ba:	3701      	adds	r7, #1
   bb9bc:	e7b4      	b.n	bb928 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x234>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb9be:	3601      	adds	r6, #1
   bb9c0:	e7ab      	b.n	bb91a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x226>
  const RuntimeShape output_shape =
   bb9c2:	a849      	add	r0, sp, #292	; 0x124
   bb9c4:	f7fa fcbd 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb9c8:	a826      	add	r0, sp, #152	; 0x98
   bb9ca:	f7fa fcba 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb9ce:	a821      	add	r0, sp, #132	; 0x84
   bb9d0:	f7fa fcb7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bb9d4:	a81c      	add	r0, sp, #112	; 0x70
   bb9d6:	e740      	b.n	bb85a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bb9d8:	a849      	add	r0, sp, #292	; 0x124
   bb9da:	f7fa ff56 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb9de:	4629      	mov	r1, r5
   bb9e0:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb9e2:	6876      	ldr	r6, [r6, #4]
   bb9e4:	f7fa ff51 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb9e8:	b105      	cbz	r5, bb9ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
   bb9ea:	686d      	ldr	r5, [r5, #4]
   bb9ec:	4621      	mov	r1, r4
   bb9ee:	a856      	add	r0, sp, #344	; 0x158
   bb9f0:	f7fa ff4b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb9f4:	b104      	cbz	r4, bb9f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x304>
   bb9f6:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bb9f8:	aa56      	add	r2, sp, #344	; 0x158
   bb9fa:	4641      	mov	r1, r8
   bb9fc:	a849      	add	r0, sp, #292	; 0x124
   bb9fe:	f7fa fd34 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bba02:	2300      	movs	r3, #0
  const int64_t flatsize =
   bba04:	17c7      	asrs	r7, r0, #31
   bba06:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bba08:	4619      	mov	r1, r3
   bba0a:	4283      	cmp	r3, r0
   bba0c:	eb71 0607 	sbcs.w	r6, r1, r7
   bba10:	f280 80c0 	bge.w	bbb94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bba14:	ecb2 7a01 	vldmia	r2!, {s14}
   bba18:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs == rhs;
   bba1c:	eeb4 7a67 	vcmp.f32	s14, s15
   bba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba24:	bf0c      	ite	eq
   bba26:	2601      	moveq	r6, #1
   bba28:	2600      	movne	r6, #0
   bba2a:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bba2c:	3301      	adds	r3, #1
   bba2e:	f141 0100 	adc.w	r1, r1, #0
   bba32:	e7ea      	b.n	bba0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x316>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
   bba34:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bba38:	4631      	mov	r1, r6
   bba3a:	2f00      	cmp	r7, #0
   bba3c:	f000 8081 	beq.w	bbb42 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   bba40:	a82b      	add	r0, sp, #172	; 0xac
   bba42:	f7fa ff22 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bba46:	6873      	ldr	r3, [r6, #4]
   bba48:	9305      	str	r3, [sp, #20]
   bba4a:	4629      	mov	r1, r5
   bba4c:	a830      	add	r0, sp, #192	; 0xc0
   bba4e:	f7fa ff1c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bba52:	b105      	cbz	r5, bba56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x362>
   bba54:	686d      	ldr	r5, [r5, #4]
   bba56:	4621      	mov	r1, r4
   bba58:	a835      	add	r0, sp, #212	; 0xd4
   bba5a:	f7fa ff16 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bba5e:	b104      	cbz	r4, bba62 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x36e>
   bba60:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bba62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   bba64:	2b04      	cmp	r3, #4
   bba66:	f73f ae8d 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bba6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bba6c:	2b04      	cmp	r3, #4
   bba6e:	f73f ae89 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bba72:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bba74:	2b04      	cmp	r3, #4
   bba76:	f73f ae85 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bba7a:	2301      	movs	r3, #1
   bba7c:	aa35      	add	r2, sp, #212	; 0xd4
   bba7e:	2104      	movs	r1, #4
   bba80:	a849      	add	r0, sp, #292	; 0x124
   bba82:	f7fa fca3 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bba86:	ab56      	add	r3, sp, #344	; 0x158
   bba88:	4642      	mov	r2, r8
   bba8a:	a930      	add	r1, sp, #192	; 0xc0
   bba8c:	a82b      	add	r0, sp, #172	; 0xac
   bba8e:	f7fa ffa5 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bba92:	2600      	movs	r6, #0
   bba94:	2100      	movs	r1, #0
   bba96:	a849      	add	r0, sp, #292	; 0x124
   bba98:	f7fa fc5e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bba9c:	42b0      	cmp	r0, r6
   bba9e:	dd45      	ble.n	bbb2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbaa0:	2700      	movs	r7, #0
   bbaa2:	2101      	movs	r1, #1
   bbaa4:	a849      	add	r0, sp, #292	; 0x124
   bbaa6:	f7fa fc57 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbaaa:	42b8      	cmp	r0, r7
   bbaac:	dd3c      	ble.n	bbb28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x434>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbaae:	f04f 0b00 	mov.w	fp, #0
   bbab2:	2102      	movs	r1, #2
   bbab4:	a849      	add	r0, sp, #292	; 0x124
   bbab6:	f7fa fc4f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbaba:	4558      	cmp	r0, fp
   bbabc:	dd32      	ble.n	bbb24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x430>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbabe:	f04f 0900 	mov.w	r9, #0
   bbac2:	2103      	movs	r1, #3
   bbac4:	a849      	add	r0, sp, #292	; 0x124
   bbac6:	f7fa fc47 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbaca:	4548      	cmp	r0, r9
   bbacc:	dd27      	ble.n	bbb1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x42a>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbace:	f8cd 9000 	str.w	r9, [sp]
   bbad2:	465b      	mov	r3, fp
   bbad4:	463a      	mov	r2, r7
   bbad6:	4631      	mov	r1, r6
   bbad8:	4640      	mov	r0, r8
   bbada:	f7fa fd4d 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbade:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbae2:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbae4:	465b      	mov	r3, fp
   bbae6:	463a      	mov	r2, r7
   bbae8:	4631      	mov	r1, r6
   bbaea:	a856      	add	r0, sp, #344	; 0x158
   bbaec:	f7fa fd44 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs == rhs;
   bbaf0:	9b05      	ldr	r3, [sp, #20]
   bbaf2:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bbaf6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bbafa:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bbafe:	1a88      	subs	r0, r1, r2
   bbb00:	f1d0 0a00 	rsbs	sl, r0, #0
   bbb04:	eb4a 0a00 	adc.w	sl, sl, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbb08:	465b      	mov	r3, fp
   bbb0a:	463a      	mov	r2, r7
   bbb0c:	4631      	mov	r1, r6
   bbb0e:	a849      	add	r0, sp, #292	; 0x124
   bbb10:	f7fa fc89 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbb14:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bbb18:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbb1c:	e7d1      	b.n	bbac2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ce>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbb1e:	f10b 0b01 	add.w	fp, fp, #1
   bbb22:	e7c6      	b.n	bbab2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3be>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbb24:	3701      	adds	r7, #1
   bbb26:	e7bc      	b.n	bbaa2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbb28:	3601      	adds	r6, #1
   bbb2a:	e7b3      	b.n	bba94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  const RuntimeShape output_shape =
   bbb2c:	a849      	add	r0, sp, #292	; 0x124
   bbb2e:	f7fa fc08 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbb32:	a835      	add	r0, sp, #212	; 0xd4
   bbb34:	f7fa fc05 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbb38:	a830      	add	r0, sp, #192	; 0xc0
   bbb3a:	f7fa fc02 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbb3e:	a82b      	add	r0, sp, #172	; 0xac
   bbb40:	e68b      	b.n	bb85a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbb42:	a849      	add	r0, sp, #292	; 0x124
   bbb44:	f7fa fea1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbb48:	4629      	mov	r1, r5
   bbb4a:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbb4c:	6876      	ldr	r6, [r6, #4]
   bbb4e:	f7fa fe9c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbb52:	b105      	cbz	r5, bbb56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x462>
   bbb54:	686d      	ldr	r5, [r5, #4]
   bbb56:	4621      	mov	r1, r4
   bbb58:	a856      	add	r0, sp, #344	; 0x158
   bbb5a:	f7fa fe96 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbb5e:	b104      	cbz	r4, bbb62 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x46e>
   bbb60:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbb62:	aa56      	add	r2, sp, #344	; 0x158
   bbb64:	4641      	mov	r1, r8
   bbb66:	a849      	add	r0, sp, #292	; 0x124
   bbb68:	f7fa fc7f 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bbb6c:	2300      	movs	r3, #0
  const int64_t flatsize =
   bbb6e:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbb72:	461f      	mov	r7, r3
   bbb74:	4283      	cmp	r3, r0
   bbb76:	eb77 020c 	sbcs.w	r2, r7, ip
   bbb7a:	da0b      	bge.n	bbb94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
  return lhs == rhs;
   bbb7c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bbb80:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bbb84:	1a51      	subs	r1, r2, r1
   bbb86:	424a      	negs	r2, r1
   bbb88:	414a      	adcs	r2, r1
   bbb8a:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbb8c:	3301      	adds	r3, #1
   bbb8e:	f147 0700 	adc.w	r7, r7, #0
   bbb92:	e7ef      	b.n	bbb74 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x480>
   bbb94:	a856      	add	r0, sp, #344	; 0x158
   bbb96:	f7fa fbd4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbb9a:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
   bbb9c:	f7fa fbd1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbba0:	a849      	add	r0, sp, #292	; 0x124
   bbba2:	e65a      	b.n	bb85a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbba4:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbba8:	4631      	mov	r1, r6
   bbbaa:	2f00      	cmp	r7, #0
   bbbac:	f000 808c 	beq.w	bbcc8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5d4>
   bbbb0:	a83a      	add	r0, sp, #232	; 0xe8
   bbbb2:	f7fa fe6a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbbb6:	4629      	mov	r1, r5
   bbbb8:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbbba:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bbbbe:	f7fa fe64 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbbc2:	b105      	cbz	r5, bbbc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4d2>
   bbbc4:	686d      	ldr	r5, [r5, #4]
   bbbc6:	4621      	mov	r1, r4
   bbbc8:	a844      	add	r0, sp, #272	; 0x110
   bbbca:	f7fa fe5e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbbce:	b104      	cbz	r4, bbbd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4de>
   bbbd0:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbbd2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbbd4:	2b04      	cmp	r3, #4
   bbbd6:	f73f add5 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bbbda:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbbdc:	2b04      	cmp	r3, #4
   bbbde:	f73f add1 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bbbe2:	9b44      	ldr	r3, [sp, #272]	; 0x110
   bbbe4:	2b04      	cmp	r3, #4
   bbbe6:	f73f adcd 	bgt.w	bb784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bbbea:	2301      	movs	r3, #1
   bbbec:	aa44      	add	r2, sp, #272	; 0x110
   bbbee:	2104      	movs	r1, #4
   bbbf0:	a849      	add	r0, sp, #292	; 0x124
   bbbf2:	f7fa fbeb 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bbbf6:	ab56      	add	r3, sp, #344	; 0x158
   bbbf8:	4642      	mov	r2, r8
   bbbfa:	a93f      	add	r1, sp, #252	; 0xfc
   bbbfc:	a83a      	add	r0, sp, #232	; 0xe8
   bbbfe:	f7fa feed 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbc02:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbc06:	2700      	movs	r7, #0
   bbc08:	2100      	movs	r1, #0
   bbc0a:	a849      	add	r0, sp, #292	; 0x124
   bbc0c:	f7fa fba4 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbc10:	42b8      	cmp	r0, r7
   bbc12:	dd4e      	ble.n	bbcb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5be>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbc14:	f04f 0800 	mov.w	r8, #0
   bbc18:	2101      	movs	r1, #1
   bbc1a:	a849      	add	r0, sp, #292	; 0x124
   bbc1c:	f7fa fb9c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbc20:	4540      	cmp	r0, r8
   bbc22:	dd44      	ble.n	bbcae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5ba>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbc24:	2600      	movs	r6, #0
   bbc26:	2102      	movs	r1, #2
   bbc28:	a849      	add	r0, sp, #292	; 0x124
   bbc2a:	f7fa fb95 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbc2e:	42b0      	cmp	r0, r6
   bbc30:	dd3a      	ble.n	bbca8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5b4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbc32:	f04f 0900 	mov.w	r9, #0
   bbc36:	2103      	movs	r1, #3
   bbc38:	a849      	add	r0, sp, #292	; 0x124
   bbc3a:	f7fa fb8d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbc3e:	4548      	cmp	r0, r9
   bbc40:	dd30      	ble.n	bbca4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5b0>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbc42:	f8cd 9000 	str.w	r9, [sp]
   bbc46:	4633      	mov	r3, r6
   bbc48:	4642      	mov	r2, r8
   bbc4a:	4639      	mov	r1, r7
   bbc4c:	ee18 0a10 	vmov	r0, s16
   bbc50:	f7fa fc92 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbc54:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbc58:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbc5a:	4633      	mov	r3, r6
   bbc5c:	4642      	mov	r2, r8
   bbc5e:	4639      	mov	r1, r7
   bbc60:	a856      	add	r0, sp, #344	; 0x158
   bbc62:	f7fa fc89 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbc66:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bbc6a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs == rhs;
   bbc6e:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bbc72:	6849      	ldr	r1, [r1, #4]
   bbc74:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bbc78:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bbc7a:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bbc7e:	4291      	cmp	r1, r2
   bbc80:	bf08      	it	eq
   bbc82:	4283      	cmpeq	r3, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbc84:	4633      	mov	r3, r6
   bbc86:	4642      	mov	r2, r8
   bbc88:	4639      	mov	r1, r7
   bbc8a:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bbc8c:	bf0c      	ite	eq
   bbc8e:	f04f 0a01 	moveq.w	sl, #1
   bbc92:	f04f 0a00 	movne.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbc96:	f7fa fbc6 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbc9a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bbc9e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbca2:	e7c8      	b.n	bbc36 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x542>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbca4:	3601      	adds	r6, #1
   bbca6:	e7be      	b.n	bbc26 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x532>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbca8:	f108 0801 	add.w	r8, r8, #1
   bbcac:	e7b4      	b.n	bbc18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x524>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbcae:	3701      	adds	r7, #1
   bbcb0:	e7aa      	b.n	bbc08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x514>
  const RuntimeShape output_shape =
   bbcb2:	a849      	add	r0, sp, #292	; 0x124
   bbcb4:	f7fa fb45 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbcb8:	a844      	add	r0, sp, #272	; 0x110
   bbcba:	f7fa fb42 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbcbe:	a83f      	add	r0, sp, #252	; 0xfc
   bbcc0:	f7fa fb3f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbcc4:	a83a      	add	r0, sp, #232	; 0xe8
   bbcc6:	e5c8      	b.n	bb85a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbcc8:	a849      	add	r0, sp, #292	; 0x124
   bbcca:	f7fa fdde 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbcce:	4629      	mov	r1, r5
   bbcd0:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbcd2:	6877      	ldr	r7, [r6, #4]
   bbcd4:	f7fa fdd9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbcd8:	b105      	cbz	r5, bbcdc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5e8>
   bbcda:	686d      	ldr	r5, [r5, #4]
   bbcdc:	4621      	mov	r1, r4
   bbcde:	a856      	add	r0, sp, #344	; 0x158
   bbce0:	f7fa fdd3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbce4:	b104      	cbz	r4, bbce8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5f4>
   bbce6:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbce8:	4641      	mov	r1, r8
   bbcea:	aa56      	add	r2, sp, #344	; 0x158
   bbcec:	a849      	add	r0, sp, #292	; 0x124
   bbcee:	f7fa fbbc 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bbcf2:	2300      	movs	r3, #0
  const int64_t flatsize =
   bbcf4:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bbcf8:	f1a7 0c08 	sub.w	ip, r7, #8
   bbcfc:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bbcfe:	4698      	mov	r8, r3
   bbd00:	4283      	cmp	r3, r0
   bbd02:	eb78 020e 	sbcs.w	r2, r8, lr
   bbd06:	da11      	bge.n	bbd2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x638>
  return lhs == rhs;
   bbd08:	f855 6f08 	ldr.w	r6, [r5, #8]!
   bbd0c:	f85c 7f08 	ldr.w	r7, [ip, #8]!
   bbd10:	686a      	ldr	r2, [r5, #4]
   bbd12:	f8dc 1004 	ldr.w	r1, [ip, #4]
   bbd16:	4291      	cmp	r1, r2
   bbd18:	bf08      	it	eq
   bbd1a:	42b7      	cmpeq	r7, r6
   bbd1c:	bf0c      	ite	eq
   bbd1e:	2601      	moveq	r6, #1
   bbd20:	2600      	movne	r6, #0
   bbd22:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbd24:	3301      	adds	r3, #1
   bbd26:	f148 0800 	adc.w	r8, r8, #0
   bbd2a:	e7e9      	b.n	bbd00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x60c>
   bbd2c:	a856      	add	r0, sp, #344	; 0x158
   bbd2e:	f7fa fb08 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbd32:	a84e      	add	r0, sp, #312	; 0x138
   bbd34:	e732      	b.n	bbb9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a8>
TF_LITE_QUANTIZE_COMPARISON(Equal);
   bbd36:	6933      	ldr	r3, [r6, #16]
   bbd38:	68f0      	ldr	r0, [r6, #12]
   bbd3a:	f1c3 0900 	rsb	r9, r3, #0
   bbd3e:	692b      	ldr	r3, [r5, #16]
   bbd40:	f1c3 0800 	rsb	r8, r3, #0
   bbd44:	f7f8 fad0 	bl	b42e8 <__aeabi_f2d>
   bbd48:	ec41 0b10 	vmov	d0, r0, r1
   bbd4c:	a935      	add	r1, sp, #212	; 0xd4
   bbd4e:	a830      	add	r0, sp, #192	; 0xc0
   bbd50:	f7f9 fa8c 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbd54:	68e8      	ldr	r0, [r5, #12]
   bbd56:	f7f8 fac7 	bl	b42e8 <__aeabi_f2d>
   bbd5a:	ec41 0b10 	vmov	d0, r0, r1
   bbd5e:	a93f      	add	r1, sp, #252	; 0xfc
   bbd60:	a83a      	add	r0, sp, #232	; 0xe8
   bbd62:	f7f9 fa83 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbd66:	2308      	movs	r3, #8
   bbd68:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bbd6c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bbd6e:	9358      	str	r3, [sp, #352]	; 0x160
   bbd70:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bbd72:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bbd76:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbd78:	935b      	str	r3, [sp, #364]	; 0x16c
   bbd7a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbd7c:	935c      	str	r3, [sp, #368]	; 0x170
   bbd7e:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbd82:	4631      	mov	r1, r6
   bbd84:	a844      	add	r0, sp, #272	; 0x110
   bbd86:	b1ff      	cbz	r7, bbdc8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6d4>
   bbd88:	f7fa fd7f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbd8c:	6872      	ldr	r2, [r6, #4]
   bbd8e:	9205      	str	r2, [sp, #20]
   bbd90:	4629      	mov	r1, r5
   bbd92:	a849      	add	r0, sp, #292	; 0x124
   bbd94:	f7fa fd79 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbd98:	4621      	mov	r1, r4
   bbd9a:	4640      	mov	r0, r8
   bbd9c:	686d      	ldr	r5, [r5, #4]
   bbd9e:	f7fa fd74 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbda2:	9a05      	ldr	r2, [sp, #20]
   bbda4:	b104      	cbz	r4, bbda8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6b4>
   bbda6:	6864      	ldr	r4, [r4, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
   bbda8:	9500      	str	r5, [sp, #0]
   bbdaa:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bbdae:	ab49      	add	r3, sp, #292	; 0x124
   bbdb0:	a944      	add	r1, sp, #272	; 0x110
   bbdb2:	a856      	add	r0, sp, #344	; 0x158
   bbdb4:	f7ff fb66 	bl	bb484 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bbdb8:	4640      	mov	r0, r8
   bbdba:	f7fa fac2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbdbe:	a849      	add	r0, sp, #292	; 0x124
   bbdc0:	f7fa fabf 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bbdc4:	a844      	add	r0, sp, #272	; 0x110
   bbdc6:	e548      	b.n	bb85a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbdc8:	f7fa fd5f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbdcc:	6873      	ldr	r3, [r6, #4]
   bbdce:	9305      	str	r3, [sp, #20]
   bbdd0:	4629      	mov	r1, r5
   bbdd2:	a849      	add	r0, sp, #292	; 0x124
   bbdd4:	f7fa fd59 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbdd8:	686b      	ldr	r3, [r5, #4]
   bbdda:	9306      	str	r3, [sp, #24]
   bbddc:	4621      	mov	r1, r4
   bbdde:	4640      	mov	r0, r8
   bbde0:	f7fa fd53 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbde4:	b104      	cbz	r4, bbde8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6f4>
   bbde6:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bbde8:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bbdec:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bbdee:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bbdf0:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bbdf2:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbdf6:	aa4e      	add	r2, sp, #312	; 0x138
   bbdf8:	a949      	add	r1, sp, #292	; 0x124
   bbdfa:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bbdfc:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbe00:	f7fa fb33 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bbe04:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bbe08:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe0a:	2500      	movs	r5, #0
  const int64_t flatsize =
   bbe0c:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbe0e:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe10:	462b      	mov	r3, r5
   bbe12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bbe14:	930b      	str	r3, [sp, #44]	; 0x2c
   bbe16:	4545      	cmp	r5, r8
   bbe18:	eb73 0202 	sbcs.w	r2, r3, r2
   bbe1c:	f280 80af 	bge.w	bbf7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88a>
    const int32 input2_val = input2_offset + input2_data[i];
   bbe20:	9b06      	ldr	r3, [sp, #24]
   bbe22:	5d5f      	ldrb	r7, [r3, r5]
   bbe24:	9b08      	ldr	r3, [sp, #32]
   bbe26:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bbe28:	9b05      	ldr	r3, [sp, #20]
   bbe2a:	5d58      	ldrb	r0, [r3, r5]
   bbe2c:	9b07      	ldr	r3, [sp, #28]
   bbe2e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbe30:	465a      	mov	r2, fp
   bbe32:	4651      	mov	r1, sl
   bbe34:	fa00 f009 	lsl.w	r0, r0, r9
   bbe38:	f7fa fb54 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bbe3c:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbe40:	ee18 2a10 	vmov	r2, s16
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbe44:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbe46:	4631      	mov	r1, r6
   bbe48:	4638      	mov	r0, r7
   bbe4a:	f7fa fb4b 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bbe4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbe50:	1a1a      	subs	r2, r3, r0
   bbe52:	4250      	negs	r0, r2
   bbe54:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs == rhs;
   bbe58:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe5a:	3501      	adds	r5, #1
   bbe5c:	f143 0300 	adc.w	r3, r3, #0
   bbe60:	e7d7      	b.n	bbe12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x71e>
   bbe62:	6933      	ldr	r3, [r6, #16]
   bbe64:	68f0      	ldr	r0, [r6, #12]
   bbe66:	f1c3 0900 	rsb	r9, r3, #0
   bbe6a:	692b      	ldr	r3, [r5, #16]
   bbe6c:	f1c3 0800 	rsb	r8, r3, #0
   bbe70:	f7f8 fa3a 	bl	b42e8 <__aeabi_f2d>
   bbe74:	ec41 0b10 	vmov	d0, r0, r1
   bbe78:	a935      	add	r1, sp, #212	; 0xd4
   bbe7a:	a830      	add	r0, sp, #192	; 0xc0
   bbe7c:	f7f9 f9f6 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbe80:	68e8      	ldr	r0, [r5, #12]
   bbe82:	f7f8 fa31 	bl	b42e8 <__aeabi_f2d>
   bbe86:	ec41 0b10 	vmov	d0, r0, r1
   bbe8a:	a93f      	add	r1, sp, #252	; 0xfc
   bbe8c:	a83a      	add	r0, sp, #232	; 0xe8
   bbe8e:	f7f9 f9ed 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbe92:	2308      	movs	r3, #8
   bbe94:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bbe98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bbe9a:	9358      	str	r3, [sp, #352]	; 0x160
   bbe9c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bbe9e:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bbea2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbea4:	935b      	str	r3, [sp, #364]	; 0x16c
   bbea6:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbea8:	935c      	str	r3, [sp, #368]	; 0x170
   bbeaa:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbeae:	4631      	mov	r1, r6
   bbeb0:	a844      	add	r0, sp, #272	; 0x110
   bbeb2:	b1c7      	cbz	r7, bbee6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7f2>
   bbeb4:	f7fa fce9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbeb8:	6872      	ldr	r2, [r6, #4]
   bbeba:	9205      	str	r2, [sp, #20]
   bbebc:	4629      	mov	r1, r5
   bbebe:	a849      	add	r0, sp, #292	; 0x124
   bbec0:	f7fa fce3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbec4:	4621      	mov	r1, r4
   bbec6:	4640      	mov	r0, r8
   bbec8:	686d      	ldr	r5, [r5, #4]
   bbeca:	f7fa fcde 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbece:	9a05      	ldr	r2, [sp, #20]
   bbed0:	b104      	cbz	r4, bbed4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
   bbed2:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Equal);
   bbed4:	9500      	str	r5, [sp, #0]
   bbed6:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bbeda:	ab49      	add	r3, sp, #292	; 0x124
   bbedc:	a944      	add	r1, sp, #272	; 0x110
   bbede:	a856      	add	r0, sp, #344	; 0x158
   bbee0:	f7ff fb6c 	bl	bb5bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bbee4:	e768      	b.n	bbdb8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6c4>
   bbee6:	f7fa fcd0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbeea:	6873      	ldr	r3, [r6, #4]
   bbeec:	9305      	str	r3, [sp, #20]
   bbeee:	4629      	mov	r1, r5
   bbef0:	a849      	add	r0, sp, #292	; 0x124
   bbef2:	f7fa fcca 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbef6:	686b      	ldr	r3, [r5, #4]
   bbef8:	9306      	str	r3, [sp, #24]
   bbefa:	4621      	mov	r1, r4
   bbefc:	4640      	mov	r0, r8
   bbefe:	f7fa fcc4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbf02:	b104      	cbz	r4, bbf06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x812>
   bbf04:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bbf06:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bbf0a:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bbf0c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bbf0e:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bbf10:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbf14:	aa4e      	add	r2, sp, #312	; 0x138
   bbf16:	a949      	add	r1, sp, #292	; 0x124
   bbf18:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bbf1a:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbf1e:	f7fa faa4 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bbf22:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bbf26:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbf28:	2500      	movs	r5, #0
  const int64_t flatsize =
   bbf2a:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbf2c:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bbf2e:	462b      	mov	r3, r5
   bbf30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bbf32:	930b      	str	r3, [sp, #44]	; 0x2c
   bbf34:	4545      	cmp	r5, r8
   bbf36:	eb73 0202 	sbcs.w	r2, r3, r2
   bbf3a:	da20      	bge.n	bbf7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88a>
    const int32 input2_val = input2_offset + input2_data[i];
   bbf3c:	9b06      	ldr	r3, [sp, #24]
   bbf3e:	575f      	ldrsb	r7, [r3, r5]
   bbf40:	9b08      	ldr	r3, [sp, #32]
   bbf42:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bbf44:	9b05      	ldr	r3, [sp, #20]
   bbf46:	5758      	ldrsb	r0, [r3, r5]
   bbf48:	9b07      	ldr	r3, [sp, #28]
   bbf4a:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbf4c:	465a      	mov	r2, fp
   bbf4e:	4651      	mov	r1, sl
   bbf50:	fa00 f009 	lsl.w	r0, r0, r9
   bbf54:	f7fa fac6 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bbf58:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbf5c:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbf5e:	ee18 2a10 	vmov	r2, s16
   bbf62:	4631      	mov	r1, r6
   bbf64:	4638      	mov	r0, r7
   bbf66:	f7fa fabd 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bbf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbf6c:	1a1b      	subs	r3, r3, r0
   bbf6e:	4258      	negs	r0, r3
   bbf70:	4158      	adcs	r0, r3
  for (int64_t i = 0; i < flatsize; ++i) {
   bbf72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs == rhs;
   bbf74:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbf76:	3501      	adds	r5, #1
   bbf78:	f143 0300 	adc.w	r3, r3, #0
   bbf7c:	e7d8      	b.n	bbf30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x83c>
   bbf7e:	a84e      	add	r0, sp, #312	; 0x138
   bbf80:	e71b      	b.n	bbdba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6c6>
      context->ReportError(
   bbf82:	4640      	mov	r0, r8
   bbf84:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bbf88:	4901      	ldr	r1, [pc, #4]	; (bbf90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x89c>)
   bbf8a:	4798      	blx	r3
      return kTfLiteError;
   bbf8c:	2001      	movs	r0, #1
   bbf8e:	e467      	b.n	bb860 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   bbf90:	000c89af 	.word	0x000c89af

000bbf94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bbf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf98:	ed2d 8b04 	vpush	{d8-d9}
   bbf9c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbf9e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bbfa0:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbfa2:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bbfa4:	9204      	str	r2, [sp, #16]
   bbfa6:	4604      	mov	r4, r0
   bbfa8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bbfaa:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbfac:	dd01      	ble.n	bbfb2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bbfae:	f008 fc25 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bbfb2:	6833      	ldr	r3, [r6, #0]
   bbfb4:	2b04      	cmp	r3, #4
   bbfb6:	dcfa      	bgt.n	bbfae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bbfb8:	6813      	ldr	r3, [r2, #0]
   bbfba:	2b04      	cmp	r3, #4
   bbfbc:	dcf7      	bgt.n	bbfae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bbfbe:	2301      	movs	r3, #1
   bbfc0:	2104      	movs	r1, #4
   bbfc2:	a807      	add	r0, sp, #28
   bbfc4:	f7fa fa02 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bbfc8:	ab14      	add	r3, sp, #80	; 0x50
   bbfca:	aa0c      	add	r2, sp, #48	; 0x30
   bbfcc:	4631      	mov	r1, r6
   bbfce:	4628      	mov	r0, r5
   bbfd0:	f7fa fd04 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bbfd4:	e9d4 a300 	ldrd	sl, r3, [r4]
   bbfd8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bbfda:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bbfdc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bbfe0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bbfe4:	68e3      	ldr	r3, [r4, #12]
   bbfe6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bbfea:	6923      	ldr	r3, [r4, #16]
   bbfec:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bbfee:	6963      	ldr	r3, [r4, #20]
   bbff0:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbff4:	2400      	movs	r4, #0
   bbff6:	2100      	movs	r1, #0
   bbff8:	a807      	add	r0, sp, #28
   bbffa:	f7fa f9ad 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbffe:	42a0      	cmp	r0, r4
   bc000:	dd5b      	ble.n	bc0ba <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x126>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc002:	2500      	movs	r5, #0
   bc004:	af07      	add	r7, sp, #28
   bc006:	2101      	movs	r1, #1
   bc008:	4638      	mov	r0, r7
   bc00a:	f7fa f9a5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc00e:	42a8      	cmp	r0, r5
   bc010:	dd51      	ble.n	bc0b6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x122>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc012:	2600      	movs	r6, #0
   bc014:	2102      	movs	r1, #2
   bc016:	4638      	mov	r0, r7
   bc018:	f7fa f99e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc01c:	42b0      	cmp	r0, r6
   bc01e:	dd48      	ble.n	bc0b2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11e>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc020:	f04f 0800 	mov.w	r8, #0
   bc024:	2103      	movs	r1, #3
   bc026:	4638      	mov	r0, r7
   bc028:	f7fa f996 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc02c:	4540      	cmp	r0, r8
   bc02e:	dd3e      	ble.n	bc0ae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11a>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bc030:	f8cd 8000 	str.w	r8, [sp]
   bc034:	4633      	mov	r3, r6
   bc036:	462a      	mov	r2, r5
   bc038:	4621      	mov	r1, r4
   bc03a:	a80c      	add	r0, sp, #48	; 0x30
   bc03c:	f7fa fa9c 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc040:	9b04      	ldr	r3, [sp, #16]
   bc042:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bc046:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc048:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bc04c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc04e:	462a      	mov	r2, r5
   bc050:	4633      	mov	r3, r6
   bc052:	4621      	mov	r1, r4
   bc054:	a814      	add	r0, sp, #80	; 0x50
   bc056:	f7fa fa8f 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc05a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bc05c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc05e:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bc060:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc062:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc066:	ee18 2a90 	vmov	r2, s17
   bc06a:	ee18 1a10 	vmov	r1, s16
   bc06e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc072:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc074:	f7fa fa36 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc078:	9b05      	ldr	r3, [sp, #20]
   bc07a:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc07e:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc080:	465a      	mov	r2, fp
   bc082:	4618      	mov	r0, r3
   bc084:	f7fa fa2e 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bc088:	f8cd 8000 	str.w	r8, [sp]
  return lhs != rhs;
   bc08c:	ebb9 0900 	subs.w	r9, r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc090:	4633      	mov	r3, r6
   bc092:	462a      	mov	r2, r5
   bc094:	4621      	mov	r1, r4
   bc096:	4638      	mov	r0, r7
  return lhs != rhs;
   bc098:	bf18      	it	ne
   bc09a:	f04f 0901 	movne.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc09e:	f7fa f9c2 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bc0a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc0a4:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc0a8:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc0ac:	e7ba      	b.n	bc024 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc0ae:	3601      	adds	r6, #1
   bc0b0:	e7b0      	b.n	bc014 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc0b2:	3501      	adds	r5, #1
   bc0b4:	e7a6      	b.n	bc004 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc0b6:	3401      	adds	r4, #1
   bc0b8:	e79d      	b.n	bbff6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bc0ba:	a807      	add	r0, sp, #28
   bc0bc:	f7fa f941 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bc0c0:	b01d      	add	sp, #116	; 0x74
   bc0c2:	ecbd 8b04 	vpop	{d8-d9}
   bc0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc0ca <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bc0ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0ce:	ed2d 8b04 	vpush	{d8-d9}
   bc0d2:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc0d4:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bc0d6:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc0d8:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bc0da:	9204      	str	r2, [sp, #16]
   bc0dc:	4604      	mov	r4, r0
   bc0de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bc0e0:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc0e2:	dd01      	ble.n	bc0e8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bc0e4:	f008 fb8a 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc0e8:	6833      	ldr	r3, [r6, #0]
   bc0ea:	2b04      	cmp	r3, #4
   bc0ec:	dcfa      	bgt.n	bc0e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc0ee:	6813      	ldr	r3, [r2, #0]
   bc0f0:	2b04      	cmp	r3, #4
   bc0f2:	dcf7      	bgt.n	bc0e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bc0f4:	2301      	movs	r3, #1
   bc0f6:	2104      	movs	r1, #4
   bc0f8:	a807      	add	r0, sp, #28
   bc0fa:	f7fa f967 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc0fe:	ab14      	add	r3, sp, #80	; 0x50
   bc100:	aa0c      	add	r2, sp, #48	; 0x30
   bc102:	4631      	mov	r1, r6
   bc104:	4628      	mov	r0, r5
   bc106:	f7fa fc69 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bc10a:	e9d4 a300 	ldrd	sl, r3, [r4]
   bc10e:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc110:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bc112:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc116:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bc11a:	68e3      	ldr	r3, [r4, #12]
   bc11c:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bc120:	6923      	ldr	r3, [r4, #16]
   bc122:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bc124:	6963      	ldr	r3, [r4, #20]
   bc126:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc12a:	2400      	movs	r4, #0
   bc12c:	2100      	movs	r1, #0
   bc12e:	a807      	add	r0, sp, #28
   bc130:	f7fa f912 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc134:	42a0      	cmp	r0, r4
   bc136:	dd5b      	ble.n	bc1f0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x126>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc138:	2500      	movs	r5, #0
   bc13a:	af07      	add	r7, sp, #28
   bc13c:	2101      	movs	r1, #1
   bc13e:	4638      	mov	r0, r7
   bc140:	f7fa f90a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc144:	42a8      	cmp	r0, r5
   bc146:	dd51      	ble.n	bc1ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x122>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc148:	2600      	movs	r6, #0
   bc14a:	2102      	movs	r1, #2
   bc14c:	4638      	mov	r0, r7
   bc14e:	f7fa f903 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc152:	42b0      	cmp	r0, r6
   bc154:	dd48      	ble.n	bc1e8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11e>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc156:	f04f 0800 	mov.w	r8, #0
   bc15a:	2103      	movs	r1, #3
   bc15c:	4638      	mov	r0, r7
   bc15e:	f7fa f8fb 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc162:	4540      	cmp	r0, r8
   bc164:	dd3e      	ble.n	bc1e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11a>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bc166:	f8cd 8000 	str.w	r8, [sp]
   bc16a:	4633      	mov	r3, r6
   bc16c:	462a      	mov	r2, r5
   bc16e:	4621      	mov	r1, r4
   bc170:	a80c      	add	r0, sp, #48	; 0x30
   bc172:	f7fa fa01 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc176:	9b04      	ldr	r3, [sp, #16]
   bc178:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bc17c:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc17e:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bc182:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc184:	462a      	mov	r2, r5
   bc186:	4633      	mov	r3, r6
   bc188:	4621      	mov	r1, r4
   bc18a:	a814      	add	r0, sp, #80	; 0x50
   bc18c:	f7fa f9f4 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc190:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bc192:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc194:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bc196:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc198:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc19c:	ee18 2a90 	vmov	r2, s17
   bc1a0:	ee18 1a10 	vmov	r1, s16
   bc1a4:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc1a8:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc1aa:	f7fa f99b 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc1ae:	9b05      	ldr	r3, [sp, #20]
   bc1b0:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc1b4:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc1b6:	465a      	mov	r2, fp
   bc1b8:	4618      	mov	r0, r3
   bc1ba:	f7fa f993 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bc1be:	f8cd 8000 	str.w	r8, [sp]
  return lhs != rhs;
   bc1c2:	ebb9 0900 	subs.w	r9, r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc1c6:	4633      	mov	r3, r6
   bc1c8:	462a      	mov	r2, r5
   bc1ca:	4621      	mov	r1, r4
   bc1cc:	4638      	mov	r0, r7
  return lhs != rhs;
   bc1ce:	bf18      	it	ne
   bc1d0:	f04f 0901 	movne.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc1d4:	f7fa f927 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bc1d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc1da:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc1de:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc1e2:	e7ba      	b.n	bc15a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc1e4:	3601      	adds	r6, #1
   bc1e6:	e7b0      	b.n	bc14a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc1e8:	3501      	adds	r5, #1
   bc1ea:	e7a6      	b.n	bc13a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc1ec:	3401      	adds	r4, #1
   bc1ee:	e79d      	b.n	bc12c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bc1f0:	a807      	add	r0, sp, #28
   bc1f2:	f7fa f8a6 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bc1f6:	b01d      	add	sp, #116	; 0x74
   bc1f8:	ecbd 8b04 	vpop	{d8-d9}
   bc1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc200 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   bc200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc204:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc208:	680a      	ldr	r2, [r1, #0]
   bc20a:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bc20e:	6895      	ldr	r5, [r2, #8]
   bc210:	4680      	mov	r8, r0
   bc212:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc214:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc216:	2338      	movs	r3, #56	; 0x38
   bc218:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc21c:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc21e:	fb03 a505 	mla	r5, r3, r5, sl
   bc222:	eb0a 0609 	add.w	r6, sl, r9
   bc226:	b0df      	sub	sp, #380	; 0x17c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bc228:	4629      	mov	r1, r5
   bc22a:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc22c:	fb03 a404 	mla	r4, r3, r4, sl
   bc230:	f7f8 ffb4 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bc234:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bc238:	f080 0001 	eor.w	r0, r0, #1
   bc23c:	1e53      	subs	r3, r2, #1
   bc23e:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bc240:	2b08      	cmp	r3, #8
   bc242:	f200 841e 	bhi.w	bca82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x882>
   bc246:	e8df f013 	tbh	[pc, r3, lsl #1]
   bc24a:	00b8      	.short	0x00b8
   bc24c:	02f60175 	.word	0x02f60175
   bc250:	041c022d 	.word	0x041c022d
   bc254:	041c0009 	.word	0x041c0009
   bc258:	038c041c 	.word	0x038c041c
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   bc25c:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc260:	4631      	mov	r1, r6
   bc262:	2f00      	cmp	r7, #0
   bc264:	f000 8083 	beq.w	bc36e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x16e>
   bc268:	a80d      	add	r0, sp, #52	; 0x34
   bc26a:	f7fa fb0e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc26e:	6873      	ldr	r3, [r6, #4]
   bc270:	9305      	str	r3, [sp, #20]
   bc272:	4629      	mov	r1, r5
   bc274:	a812      	add	r0, sp, #72	; 0x48
   bc276:	f7fa fb08 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc27a:	b105      	cbz	r5, bc27e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bc27c:	686d      	ldr	r5, [r5, #4]
   bc27e:	4621      	mov	r1, r4
   bc280:	a817      	add	r0, sp, #92	; 0x5c
   bc282:	f7fa fb02 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc286:	b104      	cbz	r4, bc28a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bc288:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc28c:	2b04      	cmp	r3, #4
   bc28e:	dd01      	ble.n	bc294 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bc290:	f008 fab4 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc294:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bc296:	2b04      	cmp	r3, #4
   bc298:	dcfa      	bgt.n	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc29a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc29c:	2b04      	cmp	r3, #4
   bc29e:	dcf7      	bgt.n	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc2a0:	2301      	movs	r3, #1
   bc2a2:	aa17      	add	r2, sp, #92	; 0x5c
   bc2a4:	2104      	movs	r1, #4
   bc2a6:	a849      	add	r0, sp, #292	; 0x124
   bc2a8:	f7fa f890 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc2ac:	ab56      	add	r3, sp, #344	; 0x158
   bc2ae:	4642      	mov	r2, r8
   bc2b0:	a912      	add	r1, sp, #72	; 0x48
   bc2b2:	a80d      	add	r0, sp, #52	; 0x34
   bc2b4:	f7fa fb92 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc2b8:	2600      	movs	r6, #0
   bc2ba:	2100      	movs	r1, #0
   bc2bc:	a849      	add	r0, sp, #292	; 0x124
   bc2be:	f7fa f84b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc2c2:	42b0      	cmp	r0, r6
   bc2c4:	dd41      	ble.n	bc34a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x14a>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc2c6:	2700      	movs	r7, #0
   bc2c8:	2101      	movs	r1, #1
   bc2ca:	a849      	add	r0, sp, #292	; 0x124
   bc2cc:	f7fa f844 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc2d0:	42b8      	cmp	r0, r7
   bc2d2:	dd38      	ble.n	bc346 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x146>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc2d4:	f04f 0b00 	mov.w	fp, #0
   bc2d8:	2102      	movs	r1, #2
   bc2da:	a849      	add	r0, sp, #292	; 0x124
   bc2dc:	f7fa f83c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc2e0:	4558      	cmp	r0, fp
   bc2e2:	dd2e      	ble.n	bc342 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x142>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc2e4:	f04f 0900 	mov.w	r9, #0
   bc2e8:	2103      	movs	r1, #3
   bc2ea:	a849      	add	r0, sp, #292	; 0x124
   bc2ec:	f7fa f834 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc2f0:	4548      	cmp	r0, r9
   bc2f2:	dd23      	ble.n	bc33c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x13c>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc2f4:	f8cd 9000 	str.w	r9, [sp]
   bc2f8:	465b      	mov	r3, fp
   bc2fa:	463a      	mov	r2, r7
   bc2fc:	4631      	mov	r1, r6
   bc2fe:	4640      	mov	r0, r8
   bc300:	f7fa f93a 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc304:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc308:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc30a:	465b      	mov	r3, fp
   bc30c:	463a      	mov	r2, r7
   bc30e:	4631      	mov	r1, r6
   bc310:	a856      	add	r0, sp, #344	; 0x158
   bc312:	f7fa f931 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs != rhs;
   bc316:	9b05      	ldr	r3, [sp, #20]
   bc318:	5c2a      	ldrb	r2, [r5, r0]
   bc31a:	f813 a00a 	ldrb.w	sl, [r3, sl]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc31e:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc322:	ea8a 0a02 	eor.w	sl, sl, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bc326:	465b      	mov	r3, fp
   bc328:	463a      	mov	r2, r7
   bc32a:	4631      	mov	r1, r6
   bc32c:	a849      	add	r0, sp, #292	; 0x124
   bc32e:	f7fa f87a 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc332:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc336:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc33a:	e7d5      	b.n	bc2e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc33c:	f10b 0b01 	add.w	fp, fp, #1
   bc340:	e7ca      	b.n	bc2d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc342:	3701      	adds	r7, #1
   bc344:	e7c0      	b.n	bc2c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc346:	3601      	adds	r6, #1
   bc348:	e7b7      	b.n	bc2ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bc34a:	a849      	add	r0, sp, #292	; 0x124
   bc34c:	f7f9 fff9 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc350:	a817      	add	r0, sp, #92	; 0x5c
   bc352:	f7f9 fff6 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc356:	a812      	add	r0, sp, #72	; 0x48
   bc358:	f7f9 fff3 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc35c:	a80d      	add	r0, sp, #52	; 0x34
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   bc35e:	f7f9 fff0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bc362:	2000      	movs	r0, #0
}
   bc364:	b05f      	add	sp, #380	; 0x17c
   bc366:	ecbd 8b02 	vpop	{d8}
   bc36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   bc36e:	a849      	add	r0, sp, #292	; 0x124
   bc370:	f7fa fa8b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc374:	4629      	mov	r1, r5
   bc376:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc378:	6876      	ldr	r6, [r6, #4]
   bc37a:	f7fa fa86 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc37e:	b105      	cbz	r5, bc382 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x182>
   bc380:	686d      	ldr	r5, [r5, #4]
   bc382:	4621      	mov	r1, r4
   bc384:	a856      	add	r0, sp, #344	; 0x158
   bc386:	f7fa fa80 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc38a:	b104      	cbz	r4, bc38e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x18e>
   bc38c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc38e:	aa56      	add	r2, sp, #344	; 0x158
   bc390:	4641      	mov	r1, r8
   bc392:	a849      	add	r0, sp, #292	; 0x124
   bc394:	f7fa f869 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc398:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc39a:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc39e:	461a      	mov	r2, r3
   bc3a0:	4283      	cmp	r3, r0
   bc3a2:	eb72 010c 	sbcs.w	r1, r2, ip
   bc3a6:	f280 8175 	bge.w	bc694 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
  return lhs != rhs;
   bc3aa:	5cf1      	ldrb	r1, [r6, r3]
   bc3ac:	5cef      	ldrb	r7, [r5, r3]
   bc3ae:	4079      	eors	r1, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
   bc3b0:	54e1      	strb	r1, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc3b2:	3301      	adds	r3, #1
   bc3b4:	f142 0200 	adc.w	r2, r2, #0
   bc3b8:	e7f2      	b.n	bc3a0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
   bc3ba:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc3be:	4631      	mov	r1, r6
   bc3c0:	2f00      	cmp	r7, #0
   bc3c2:	f000 8089 	beq.w	bc4d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
   bc3c6:	a81c      	add	r0, sp, #112	; 0x70
   bc3c8:	f7fa fa5f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc3cc:	6873      	ldr	r3, [r6, #4]
   bc3ce:	9305      	str	r3, [sp, #20]
   bc3d0:	4629      	mov	r1, r5
   bc3d2:	a821      	add	r0, sp, #132	; 0x84
   bc3d4:	f7fa fa59 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc3d8:	b105      	cbz	r5, bc3dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   bc3da:	686d      	ldr	r5, [r5, #4]
   bc3dc:	4621      	mov	r1, r4
   bc3de:	a826      	add	r0, sp, #152	; 0x98
   bc3e0:	f7fa fa53 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc3e4:	b104      	cbz	r4, bc3e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   bc3e6:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc3e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   bc3ea:	2b04      	cmp	r3, #4
   bc3ec:	f73f af50 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc3f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   bc3f2:	2b04      	cmp	r3, #4
   bc3f4:	f73f af4c 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bc3fa:	2b04      	cmp	r3, #4
   bc3fc:	f73f af48 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc400:	2301      	movs	r3, #1
   bc402:	aa26      	add	r2, sp, #152	; 0x98
   bc404:	2104      	movs	r1, #4
   bc406:	a849      	add	r0, sp, #292	; 0x124
   bc408:	f7f9 ffe0 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc40c:	ab56      	add	r3, sp, #344	; 0x158
   bc40e:	4642      	mov	r2, r8
   bc410:	a921      	add	r1, sp, #132	; 0x84
   bc412:	a81c      	add	r0, sp, #112	; 0x70
   bc414:	f7fa fae2 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc418:	2600      	movs	r6, #0
   bc41a:	2100      	movs	r1, #0
   bc41c:	a849      	add	r0, sp, #292	; 0x124
   bc41e:	f7f9 ff9b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc422:	42b0      	cmp	r0, r6
   bc424:	dd4d      	ble.n	bc4c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2c2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc426:	2700      	movs	r7, #0
   bc428:	2101      	movs	r1, #1
   bc42a:	a849      	add	r0, sp, #292	; 0x124
   bc42c:	f7f9 ff94 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc430:	42b8      	cmp	r0, r7
   bc432:	dd44      	ble.n	bc4be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2be>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc434:	f04f 0b00 	mov.w	fp, #0
   bc438:	2102      	movs	r1, #2
   bc43a:	a849      	add	r0, sp, #292	; 0x124
   bc43c:	f7f9 ff8c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc440:	4558      	cmp	r0, fp
   bc442:	dd3a      	ble.n	bc4ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc444:	f04f 0900 	mov.w	r9, #0
   bc448:	2103      	movs	r1, #3
   bc44a:	a849      	add	r0, sp, #292	; 0x124
   bc44c:	f7f9 ff84 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc450:	4548      	cmp	r0, r9
   bc452:	dd2f      	ble.n	bc4b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2b4>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc454:	f8cd 9000 	str.w	r9, [sp]
   bc458:	465b      	mov	r3, fp
   bc45a:	463a      	mov	r2, r7
   bc45c:	4631      	mov	r1, r6
   bc45e:	4640      	mov	r0, r8
   bc460:	f7fa f88a 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc464:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc468:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc46a:	465b      	mov	r3, fp
   bc46c:	463a      	mov	r2, r7
   bc46e:	4631      	mov	r1, r6
   bc470:	a856      	add	r0, sp, #344	; 0x158
   bc472:	f7fa f881 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc476:	9b05      	ldr	r3, [sp, #20]
   bc478:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bc47c:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs != rhs;
   bc480:	ed9a 7a00 	vldr	s14, [sl]
   bc484:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc488:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc48c:	eeb4 7a67 	vcmp.f32	s14, s15
   bc490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bc494:	465b      	mov	r3, fp
   bc496:	463a      	mov	r2, r7
   bc498:	4631      	mov	r1, r6
   bc49a:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc49c:	bf14      	ite	ne
   bc49e:	f04f 0a01 	movne.w	sl, #1
   bc4a2:	f04f 0a00 	moveq.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc4a6:	f7f9 ffbe 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc4aa:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc4ae:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc4b2:	e7c9      	b.n	bc448 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x248>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc4b4:	f10b 0b01 	add.w	fp, fp, #1
   bc4b8:	e7be      	b.n	bc438 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x238>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc4ba:	3701      	adds	r7, #1
   bc4bc:	e7b4      	b.n	bc428 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x228>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc4be:	3601      	adds	r6, #1
   bc4c0:	e7ab      	b.n	bc41a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x21a>
  const RuntimeShape output_shape =
   bc4c2:	a849      	add	r0, sp, #292	; 0x124
   bc4c4:	f7f9 ff3d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc4c8:	a826      	add	r0, sp, #152	; 0x98
   bc4ca:	f7f9 ff3a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc4ce:	a821      	add	r0, sp, #132	; 0x84
   bc4d0:	f7f9 ff37 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc4d4:	a81c      	add	r0, sp, #112	; 0x70
   bc4d6:	e742      	b.n	bc35e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc4d8:	a849      	add	r0, sp, #292	; 0x124
   bc4da:	f7fa f9d6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc4de:	4629      	mov	r1, r5
   bc4e0:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc4e2:	6876      	ldr	r6, [r6, #4]
   bc4e4:	f7fa f9d1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc4e8:	b105      	cbz	r5, bc4ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
   bc4ea:	686d      	ldr	r5, [r5, #4]
   bc4ec:	4621      	mov	r1, r4
   bc4ee:	a856      	add	r0, sp, #344	; 0x158
   bc4f0:	f7fa f9cb 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc4f4:	b104      	cbz	r4, bc4f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
   bc4f6:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc4f8:	aa56      	add	r2, sp, #344	; 0x158
   bc4fa:	4641      	mov	r1, r8
   bc4fc:	a849      	add	r0, sp, #292	; 0x124
   bc4fe:	f7f9 ffb4 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc502:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc504:	17c7      	asrs	r7, r0, #31
   bc506:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bc508:	4619      	mov	r1, r3
   bc50a:	4283      	cmp	r3, r0
   bc50c:	eb71 0607 	sbcs.w	r6, r1, r7
   bc510:	f280 80c0 	bge.w	bc694 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bc514:	ecb2 7a01 	vldmia	r2!, {s14}
   bc518:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs != rhs;
   bc51c:	eeb4 7a67 	vcmp.f32	s14, s15
   bc520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc524:	bf14      	ite	ne
   bc526:	2601      	movne	r6, #1
   bc528:	2600      	moveq	r6, #0
   bc52a:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc52c:	3301      	adds	r3, #1
   bc52e:	f141 0100 	adc.w	r1, r1, #0
   bc532:	e7ea      	b.n	bc50a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x30a>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
   bc534:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc538:	4631      	mov	r1, r6
   bc53a:	2f00      	cmp	r7, #0
   bc53c:	f000 8081 	beq.w	bc642 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x442>
   bc540:	a82b      	add	r0, sp, #172	; 0xac
   bc542:	f7fa f9a2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc546:	6873      	ldr	r3, [r6, #4]
   bc548:	9305      	str	r3, [sp, #20]
   bc54a:	4629      	mov	r1, r5
   bc54c:	a830      	add	r0, sp, #192	; 0xc0
   bc54e:	f7fa f99c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc552:	b105      	cbz	r5, bc556 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x356>
   bc554:	686d      	ldr	r5, [r5, #4]
   bc556:	4621      	mov	r1, r4
   bc558:	a835      	add	r0, sp, #212	; 0xd4
   bc55a:	f7fa f996 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc55e:	b104      	cbz	r4, bc562 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x362>
   bc560:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc562:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   bc564:	2b04      	cmp	r3, #4
   bc566:	f73f ae93 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc56a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bc56c:	2b04      	cmp	r3, #4
   bc56e:	f73f ae8f 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc572:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bc574:	2b04      	cmp	r3, #4
   bc576:	f73f ae8b 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc57a:	2301      	movs	r3, #1
   bc57c:	aa35      	add	r2, sp, #212	; 0xd4
   bc57e:	2104      	movs	r1, #4
   bc580:	a849      	add	r0, sp, #292	; 0x124
   bc582:	f7f9 ff23 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc586:	ab56      	add	r3, sp, #344	; 0x158
   bc588:	4642      	mov	r2, r8
   bc58a:	a930      	add	r1, sp, #192	; 0xc0
   bc58c:	a82b      	add	r0, sp, #172	; 0xac
   bc58e:	f7fa fa25 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc592:	2600      	movs	r6, #0
   bc594:	2100      	movs	r1, #0
   bc596:	a849      	add	r0, sp, #292	; 0x124
   bc598:	f7f9 fede 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc59c:	42b0      	cmp	r0, r6
   bc59e:	dd45      	ble.n	bc62c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x42c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc5a0:	2700      	movs	r7, #0
   bc5a2:	2101      	movs	r1, #1
   bc5a4:	a849      	add	r0, sp, #292	; 0x124
   bc5a6:	f7f9 fed7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc5aa:	42b8      	cmp	r0, r7
   bc5ac:	dd3c      	ble.n	bc628 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc5ae:	f04f 0b00 	mov.w	fp, #0
   bc5b2:	2102      	movs	r1, #2
   bc5b4:	a849      	add	r0, sp, #292	; 0x124
   bc5b6:	f7f9 fecf 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc5ba:	4558      	cmp	r0, fp
   bc5bc:	dd32      	ble.n	bc624 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x424>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc5be:	f04f 0900 	mov.w	r9, #0
   bc5c2:	2103      	movs	r1, #3
   bc5c4:	a849      	add	r0, sp, #292	; 0x124
   bc5c6:	f7f9 fec7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc5ca:	4548      	cmp	r0, r9
   bc5cc:	dd27      	ble.n	bc61e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x41e>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc5ce:	f8cd 9000 	str.w	r9, [sp]
   bc5d2:	465b      	mov	r3, fp
   bc5d4:	463a      	mov	r2, r7
   bc5d6:	4631      	mov	r1, r6
   bc5d8:	4640      	mov	r0, r8
   bc5da:	f7f9 ffcd 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc5de:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc5e2:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc5e4:	465b      	mov	r3, fp
   bc5e6:	463a      	mov	r2, r7
   bc5e8:	4631      	mov	r1, r6
   bc5ea:	a856      	add	r0, sp, #344	; 0x158
   bc5ec:	f7f9 ffc4 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs != rhs;
   bc5f0:	9b05      	ldr	r3, [sp, #20]
   bc5f2:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bc5f6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc5fa:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc5fe:	ebb1 0a02 	subs.w	sl, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bc602:	465b      	mov	r3, fp
   bc604:	463a      	mov	r2, r7
   bc606:	4631      	mov	r1, r6
   bc608:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc60a:	bf18      	it	ne
   bc60c:	f04f 0a01 	movne.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc610:	f7f9 ff09 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc614:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc618:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc61c:	e7d1      	b.n	bc5c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3c2>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc61e:	f10b 0b01 	add.w	fp, fp, #1
   bc622:	e7c6      	b.n	bc5b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3b2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc624:	3701      	adds	r7, #1
   bc626:	e7bc      	b.n	bc5a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc628:	3601      	adds	r6, #1
   bc62a:	e7b3      	b.n	bc594 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x394>
  const RuntimeShape output_shape =
   bc62c:	a849      	add	r0, sp, #292	; 0x124
   bc62e:	f7f9 fe88 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc632:	a835      	add	r0, sp, #212	; 0xd4
   bc634:	f7f9 fe85 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc638:	a830      	add	r0, sp, #192	; 0xc0
   bc63a:	f7f9 fe82 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc63e:	a82b      	add	r0, sp, #172	; 0xac
   bc640:	e68d      	b.n	bc35e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc642:	a849      	add	r0, sp, #292	; 0x124
   bc644:	f7fa f921 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc648:	4629      	mov	r1, r5
   bc64a:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc64c:	6876      	ldr	r6, [r6, #4]
   bc64e:	f7fa f91c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc652:	b105      	cbz	r5, bc656 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
   bc654:	686d      	ldr	r5, [r5, #4]
   bc656:	4621      	mov	r1, r4
   bc658:	a856      	add	r0, sp, #344	; 0x158
   bc65a:	f7fa f916 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc65e:	b104      	cbz	r4, bc662 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x462>
   bc660:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc662:	aa56      	add	r2, sp, #344	; 0x158
   bc664:	4641      	mov	r1, r8
   bc666:	a849      	add	r0, sp, #292	; 0x124
   bc668:	f7f9 feff 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc66c:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc66e:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc672:	461f      	mov	r7, r3
   bc674:	4283      	cmp	r3, r0
   bc676:	eb77 020c 	sbcs.w	r2, r7, ip
   bc67a:	da0b      	bge.n	bc694 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
  return lhs != rhs;
   bc67c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bc680:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bc684:	1a52      	subs	r2, r2, r1
   bc686:	bf18      	it	ne
   bc688:	2201      	movne	r2, #1
   bc68a:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc68c:	3301      	adds	r3, #1
   bc68e:	f147 0700 	adc.w	r7, r7, #0
   bc692:	e7ef      	b.n	bc674 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x474>
   bc694:	a856      	add	r0, sp, #344	; 0x158
   bc696:	f7f9 fe54 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc69a:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
   bc69c:	f7f9 fe51 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc6a0:	a849      	add	r0, sp, #292	; 0x124
   bc6a2:	e65c      	b.n	bc35e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc6a4:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc6a8:	4631      	mov	r1, r6
   bc6aa:	2f00      	cmp	r7, #0
   bc6ac:	f000 808c 	beq.w	bc7c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c8>
   bc6b0:	a83a      	add	r0, sp, #232	; 0xe8
   bc6b2:	f7fa f8ea 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc6b6:	4629      	mov	r1, r5
   bc6b8:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc6ba:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bc6be:	f7fa f8e4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc6c2:	b105      	cbz	r5, bc6c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4c6>
   bc6c4:	686d      	ldr	r5, [r5, #4]
   bc6c6:	4621      	mov	r1, r4
   bc6c8:	a844      	add	r0, sp, #272	; 0x110
   bc6ca:	f7fa f8de 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc6ce:	b104      	cbz	r4, bc6d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d2>
   bc6d0:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc6d2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bc6d4:	2b04      	cmp	r3, #4
   bc6d6:	f73f addb 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc6da:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bc6dc:	2b04      	cmp	r3, #4
   bc6de:	f73f add7 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc6e2:	9b44      	ldr	r3, [sp, #272]	; 0x110
   bc6e4:	2b04      	cmp	r3, #4
   bc6e6:	f73f add3 	bgt.w	bc290 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc6ea:	2301      	movs	r3, #1
   bc6ec:	aa44      	add	r2, sp, #272	; 0x110
   bc6ee:	2104      	movs	r1, #4
   bc6f0:	a849      	add	r0, sp, #292	; 0x124
   bc6f2:	f7f9 fe6b 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc6f6:	ab56      	add	r3, sp, #344	; 0x158
   bc6f8:	4642      	mov	r2, r8
   bc6fa:	a93f      	add	r1, sp, #252	; 0xfc
   bc6fc:	a83a      	add	r0, sp, #232	; 0xe8
   bc6fe:	f7fa f96d 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc702:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc706:	2700      	movs	r7, #0
   bc708:	2100      	movs	r1, #0
   bc70a:	a849      	add	r0, sp, #292	; 0x124
   bc70c:	f7f9 fe24 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc710:	42b8      	cmp	r0, r7
   bc712:	dd4e      	ble.n	bc7b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5b2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc714:	f04f 0800 	mov.w	r8, #0
   bc718:	2101      	movs	r1, #1
   bc71a:	a849      	add	r0, sp, #292	; 0x124
   bc71c:	f7f9 fe1c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc720:	4540      	cmp	r0, r8
   bc722:	dd44      	ble.n	bc7ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5ae>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc724:	2600      	movs	r6, #0
   bc726:	2102      	movs	r1, #2
   bc728:	a849      	add	r0, sp, #292	; 0x124
   bc72a:	f7f9 fe15 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc72e:	42b0      	cmp	r0, r6
   bc730:	dd3a      	ble.n	bc7a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5a8>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc732:	f04f 0900 	mov.w	r9, #0
   bc736:	2103      	movs	r1, #3
   bc738:	a849      	add	r0, sp, #292	; 0x124
   bc73a:	f7f9 fe0d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc73e:	4548      	cmp	r0, r9
   bc740:	dd30      	ble.n	bc7a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5a4>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc742:	f8cd 9000 	str.w	r9, [sp]
   bc746:	4633      	mov	r3, r6
   bc748:	4642      	mov	r2, r8
   bc74a:	4639      	mov	r1, r7
   bc74c:	ee18 0a10 	vmov	r0, s16
   bc750:	f7f9 ff12 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc754:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc758:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc75a:	4633      	mov	r3, r6
   bc75c:	4642      	mov	r2, r8
   bc75e:	4639      	mov	r1, r7
   bc760:	a856      	add	r0, sp, #344	; 0x158
   bc762:	f7f9 ff09 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc766:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bc76a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs != rhs;
   bc76e:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bc772:	6849      	ldr	r1, [r1, #4]
   bc774:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bc778:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc77a:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc77e:	4291      	cmp	r1, r2
   bc780:	bf08      	it	eq
   bc782:	4283      	cmpeq	r3, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc784:	4633      	mov	r3, r6
   bc786:	4642      	mov	r2, r8
   bc788:	4639      	mov	r1, r7
   bc78a:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc78c:	bf14      	ite	ne
   bc78e:	f04f 0a01 	movne.w	sl, #1
   bc792:	f04f 0a00 	moveq.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc796:	f7f9 fe46 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc79a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc79e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc7a2:	e7c8      	b.n	bc736 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x536>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc7a4:	3601      	adds	r6, #1
   bc7a6:	e7be      	b.n	bc726 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x526>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc7a8:	f108 0801 	add.w	r8, r8, #1
   bc7ac:	e7b4      	b.n	bc718 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x518>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc7ae:	3701      	adds	r7, #1
   bc7b0:	e7aa      	b.n	bc708 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x508>
  const RuntimeShape output_shape =
   bc7b2:	a849      	add	r0, sp, #292	; 0x124
   bc7b4:	f7f9 fdc5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc7b8:	a844      	add	r0, sp, #272	; 0x110
   bc7ba:	f7f9 fdc2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc7be:	a83f      	add	r0, sp, #252	; 0xfc
   bc7c0:	f7f9 fdbf 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc7c4:	a83a      	add	r0, sp, #232	; 0xe8
   bc7c6:	e5ca      	b.n	bc35e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc7c8:	a849      	add	r0, sp, #292	; 0x124
   bc7ca:	f7fa f85e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc7ce:	4629      	mov	r1, r5
   bc7d0:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc7d2:	6877      	ldr	r7, [r6, #4]
   bc7d4:	f7fa f859 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc7d8:	b105      	cbz	r5, bc7dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5dc>
   bc7da:	686d      	ldr	r5, [r5, #4]
   bc7dc:	4621      	mov	r1, r4
   bc7de:	a856      	add	r0, sp, #344	; 0x158
   bc7e0:	f7fa f853 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc7e4:	b104      	cbz	r4, bc7e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5e8>
   bc7e6:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc7e8:	4641      	mov	r1, r8
   bc7ea:	aa56      	add	r2, sp, #344	; 0x158
   bc7ec:	a849      	add	r0, sp, #292	; 0x124
   bc7ee:	f7f9 fe3c 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc7f2:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc7f4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   bc7f8:	f1a7 0e08 	sub.w	lr, r7, #8
   bc7fc:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bc7fe:	4698      	mov	r8, r3
   bc800:	4283      	cmp	r3, r0
   bc802:	eb78 020c 	sbcs.w	r2, r8, ip
   bc806:	da11      	bge.n	bc82c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x62c>
  return lhs != rhs;
   bc808:	f85e 6f08 	ldr.w	r6, [lr, #8]!
   bc80c:	f855 7f08 	ldr.w	r7, [r5, #8]!
   bc810:	f8de 1004 	ldr.w	r1, [lr, #4]
   bc814:	686a      	ldr	r2, [r5, #4]
   bc816:	4291      	cmp	r1, r2
   bc818:	bf08      	it	eq
   bc81a:	42be      	cmpeq	r6, r7
   bc81c:	bf14      	ite	ne
   bc81e:	2601      	movne	r6, #1
   bc820:	2600      	moveq	r6, #0
   bc822:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc824:	3301      	adds	r3, #1
   bc826:	f148 0800 	adc.w	r8, r8, #0
   bc82a:	e7e9      	b.n	bc800 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x600>
   bc82c:	a856      	add	r0, sp, #344	; 0x158
   bc82e:	f7f9 fd88 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc832:	a84e      	add	r0, sp, #312	; 0x138
   bc834:	e732      	b.n	bc69c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x49c>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   bc836:	6933      	ldr	r3, [r6, #16]
   bc838:	68f0      	ldr	r0, [r6, #12]
   bc83a:	f1c3 0900 	rsb	r9, r3, #0
   bc83e:	692b      	ldr	r3, [r5, #16]
   bc840:	f1c3 0800 	rsb	r8, r3, #0
   bc844:	f7f7 fd50 	bl	b42e8 <__aeabi_f2d>
   bc848:	ec41 0b10 	vmov	d0, r0, r1
   bc84c:	a935      	add	r1, sp, #212	; 0xd4
   bc84e:	a830      	add	r0, sp, #192	; 0xc0
   bc850:	f7f8 fd0c 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc854:	68e8      	ldr	r0, [r5, #12]
   bc856:	f7f7 fd47 	bl	b42e8 <__aeabi_f2d>
   bc85a:	ec41 0b10 	vmov	d0, r0, r1
   bc85e:	a93f      	add	r1, sp, #252	; 0xfc
   bc860:	a83a      	add	r0, sp, #232	; 0xe8
   bc862:	f7f8 fd03 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc866:	2308      	movs	r3, #8
   bc868:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bc86c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bc86e:	9358      	str	r3, [sp, #352]	; 0x160
   bc870:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bc872:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bc876:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bc878:	935b      	str	r3, [sp, #364]	; 0x16c
   bc87a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bc87c:	935c      	str	r3, [sp, #368]	; 0x170
   bc87e:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc882:	4631      	mov	r1, r6
   bc884:	a844      	add	r0, sp, #272	; 0x110
   bc886:	b1ff      	cbz	r7, bc8c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6c8>
   bc888:	f7f9 ffff 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc88c:	6872      	ldr	r2, [r6, #4]
   bc88e:	9205      	str	r2, [sp, #20]
   bc890:	4629      	mov	r1, r5
   bc892:	a849      	add	r0, sp, #292	; 0x124
   bc894:	f7f9 fff9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc898:	4621      	mov	r1, r4
   bc89a:	4640      	mov	r0, r8
   bc89c:	686d      	ldr	r5, [r5, #4]
   bc89e:	f7f9 fff4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc8a2:	9a05      	ldr	r2, [sp, #20]
   bc8a4:	b104      	cbz	r4, bc8a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
   bc8a6:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(NotEqual);
   bc8a8:	9500      	str	r5, [sp, #0]
   bc8aa:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bc8ae:	ab49      	add	r3, sp, #292	; 0x124
   bc8b0:	a944      	add	r1, sp, #272	; 0x110
   bc8b2:	a856      	add	r0, sp, #344	; 0x158
   bc8b4:	f7ff fb6e 	bl	bbf94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bc8b8:	4640      	mov	r0, r8
   bc8ba:	f7f9 fd42 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc8be:	a849      	add	r0, sp, #292	; 0x124
   bc8c0:	f7f9 fd3f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bc8c4:	a844      	add	r0, sp, #272	; 0x110
   bc8c6:	e54a      	b.n	bc35e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc8c8:	f7f9 ffdf 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc8cc:	6873      	ldr	r3, [r6, #4]
   bc8ce:	9305      	str	r3, [sp, #20]
   bc8d0:	4629      	mov	r1, r5
   bc8d2:	a849      	add	r0, sp, #292	; 0x124
   bc8d4:	f7f9 ffd9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc8d8:	686b      	ldr	r3, [r5, #4]
   bc8da:	9306      	str	r3, [sp, #24]
   bc8dc:	4621      	mov	r1, r4
   bc8de:	4640      	mov	r0, r8
   bc8e0:	f7f9 ffd3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc8e4:	b104      	cbz	r4, bc8e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e8>
   bc8e6:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bc8e8:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bc8ec:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bc8ee:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bc8f0:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bc8f2:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc8f6:	aa4e      	add	r2, sp, #312	; 0x138
   bc8f8:	a949      	add	r1, sp, #292	; 0x124
   bc8fa:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bc8fc:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc900:	f7f9 fdb3 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bc904:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bc908:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc90a:	2500      	movs	r5, #0
  const int64_t flatsize =
   bc90c:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc90e:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bc910:	462b      	mov	r3, r5
   bc912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc914:	930b      	str	r3, [sp, #44]	; 0x2c
   bc916:	4545      	cmp	r5, r8
   bc918:	eb73 0202 	sbcs.w	r2, r3, r2
   bc91c:	f280 80af 	bge.w	bca7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    const int32 input2_val = input2_offset + input2_data[i];
   bc920:	9b06      	ldr	r3, [sp, #24]
   bc922:	5d5f      	ldrb	r7, [r3, r5]
   bc924:	9b08      	ldr	r3, [sp, #32]
   bc926:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bc928:	9b05      	ldr	r3, [sp, #20]
   bc92a:	5d58      	ldrb	r0, [r3, r5]
   bc92c:	9b07      	ldr	r3, [sp, #28]
   bc92e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc930:	465a      	mov	r2, fp
   bc932:	4651      	mov	r1, sl
   bc934:	fa00 f009 	lsl.w	r0, r0, r9
   bc938:	f7f9 fdd4 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc93c:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc940:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc942:	ee18 2a10 	vmov	r2, s16
   bc946:	4631      	mov	r1, r6
   bc948:	4638      	mov	r0, r7
   bc94a:	f7f9 fdcb 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs != rhs;
   bc94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc950:	1a18      	subs	r0, r3, r0
   bc952:	bf18      	it	ne
   bc954:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bc956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs != rhs;
   bc958:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc95a:	3501      	adds	r5, #1
   bc95c:	f143 0300 	adc.w	r3, r3, #0
   bc960:	e7d7      	b.n	bc912 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x712>
   bc962:	6933      	ldr	r3, [r6, #16]
   bc964:	68f0      	ldr	r0, [r6, #12]
   bc966:	f1c3 0900 	rsb	r9, r3, #0
   bc96a:	692b      	ldr	r3, [r5, #16]
   bc96c:	f1c3 0800 	rsb	r8, r3, #0
   bc970:	f7f7 fcba 	bl	b42e8 <__aeabi_f2d>
   bc974:	ec41 0b10 	vmov	d0, r0, r1
   bc978:	a935      	add	r1, sp, #212	; 0xd4
   bc97a:	a830      	add	r0, sp, #192	; 0xc0
   bc97c:	f7f8 fc76 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc980:	68e8      	ldr	r0, [r5, #12]
   bc982:	f7f7 fcb1 	bl	b42e8 <__aeabi_f2d>
   bc986:	ec41 0b10 	vmov	d0, r0, r1
   bc98a:	a93f      	add	r1, sp, #252	; 0xfc
   bc98c:	a83a      	add	r0, sp, #232	; 0xe8
   bc98e:	f7f8 fc6d 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc992:	2308      	movs	r3, #8
   bc994:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bc998:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bc99a:	9358      	str	r3, [sp, #352]	; 0x160
   bc99c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bc99e:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bc9a2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bc9a4:	935b      	str	r3, [sp, #364]	; 0x16c
   bc9a6:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bc9a8:	935c      	str	r3, [sp, #368]	; 0x170
   bc9aa:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc9ae:	4631      	mov	r1, r6
   bc9b0:	a844      	add	r0, sp, #272	; 0x110
   bc9b2:	b1c7      	cbz	r7, bc9e6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e6>
   bc9b4:	f7f9 ff69 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc9b8:	6872      	ldr	r2, [r6, #4]
   bc9ba:	9205      	str	r2, [sp, #20]
   bc9bc:	4629      	mov	r1, r5
   bc9be:	a849      	add	r0, sp, #292	; 0x124
   bc9c0:	f7f9 ff63 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc9c4:	4621      	mov	r1, r4
   bc9c6:	4640      	mov	r0, r8
   bc9c8:	686d      	ldr	r5, [r5, #4]
   bc9ca:	f7f9 ff5e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc9ce:	9a05      	ldr	r2, [sp, #20]
   bc9d0:	b104      	cbz	r4, bc9d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
   bc9d2:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(NotEqual);
   bc9d4:	9500      	str	r5, [sp, #0]
   bc9d6:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bc9da:	ab49      	add	r3, sp, #292	; 0x124
   bc9dc:	a944      	add	r1, sp, #272	; 0x110
   bc9de:	a856      	add	r0, sp, #344	; 0x158
   bc9e0:	f7ff fb73 	bl	bc0ca <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bc9e4:	e768      	b.n	bc8b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b8>
   bc9e6:	f7f9 ff50 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc9ea:	6873      	ldr	r3, [r6, #4]
   bc9ec:	9305      	str	r3, [sp, #20]
   bc9ee:	4629      	mov	r1, r5
   bc9f0:	a849      	add	r0, sp, #292	; 0x124
   bc9f2:	f7f9 ff4a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc9f6:	686b      	ldr	r3, [r5, #4]
   bc9f8:	9306      	str	r3, [sp, #24]
   bc9fa:	4621      	mov	r1, r4
   bc9fc:	4640      	mov	r0, r8
   bc9fe:	f7f9 ff44 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bca02:	b104      	cbz	r4, bca06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x806>
   bca04:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bca06:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bca0a:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bca0c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bca0e:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bca10:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bca14:	aa4e      	add	r2, sp, #312	; 0x138
   bca16:	a949      	add	r1, sp, #292	; 0x124
   bca18:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bca1a:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bca1e:	f7f9 fd24 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bca22:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bca26:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bca28:	2500      	movs	r5, #0
  const int64_t flatsize =
   bca2a:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bca2c:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bca2e:	462b      	mov	r3, r5
   bca30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bca32:	930b      	str	r3, [sp, #44]	; 0x2c
   bca34:	4545      	cmp	r5, r8
   bca36:	eb73 0202 	sbcs.w	r2, r3, r2
   bca3a:	da20      	bge.n	bca7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    const int32 input2_val = input2_offset + input2_data[i];
   bca3c:	9b06      	ldr	r3, [sp, #24]
   bca3e:	575f      	ldrsb	r7, [r3, r5]
   bca40:	9b08      	ldr	r3, [sp, #32]
   bca42:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bca44:	9b05      	ldr	r3, [sp, #20]
   bca46:	5758      	ldrsb	r0, [r3, r5]
   bca48:	9b07      	ldr	r3, [sp, #28]
   bca4a:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bca4c:	465a      	mov	r2, fp
   bca4e:	4651      	mov	r1, sl
   bca50:	fa00 f009 	lsl.w	r0, r0, r9
   bca54:	f7f9 fd46 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bca58:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bca5c:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bca5e:	ee18 2a10 	vmov	r2, s16
   bca62:	4631      	mov	r1, r6
   bca64:	4638      	mov	r0, r7
   bca66:	f7f9 fd3d 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs != rhs;
   bca6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bca6c:	1a18      	subs	r0, r3, r0
   bca6e:	bf18      	it	ne
   bca70:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bca72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs != rhs;
   bca74:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bca76:	3501      	adds	r5, #1
   bca78:	f143 0300 	adc.w	r3, r3, #0
   bca7c:	e7d8      	b.n	bca30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x830>
   bca7e:	a84e      	add	r0, sp, #312	; 0x138
   bca80:	e71b      	b.n	bc8ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6ba>
      context->ReportError(
   bca82:	4640      	mov	r0, r8
   bca84:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bca88:	4901      	ldr	r1, [pc, #4]	; (bca90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x890>)
   bca8a:	4798      	blx	r3
      return kTfLiteError;
   bca8c:	2001      	movs	r0, #1
   bca8e:	e469      	b.n	bc364 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x164>
   bca90:	000c89af 	.word	0x000c89af

000bca94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca98:	ed2d 8b04 	vpush	{d8-d9}
   bca9c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bca9e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bcaa0:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcaa2:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bcaa4:	9204      	str	r2, [sp, #16]
   bcaa6:	4604      	mov	r4, r0
   bcaa8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bcaaa:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcaac:	dd01      	ble.n	bcab2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bcaae:	f007 fea5 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcab2:	6833      	ldr	r3, [r6, #0]
   bcab4:	2b04      	cmp	r3, #4
   bcab6:	dcfa      	bgt.n	bcaae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcab8:	6813      	ldr	r3, [r2, #0]
   bcaba:	2b04      	cmp	r3, #4
   bcabc:	dcf7      	bgt.n	bcaae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bcabe:	2301      	movs	r3, #1
   bcac0:	2104      	movs	r1, #4
   bcac2:	a807      	add	r0, sp, #28
   bcac4:	f7f9 fc82 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcac8:	ab14      	add	r3, sp, #80	; 0x50
   bcaca:	aa0c      	add	r2, sp, #48	; 0x30
   bcacc:	4631      	mov	r1, r6
   bcace:	4628      	mov	r0, r5
   bcad0:	f7f9 ff84 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bcad4:	e9d4 a300 	ldrd	sl, r3, [r4]
   bcad8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcada:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bcadc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcae0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bcae4:	68e3      	ldr	r3, [r4, #12]
   bcae6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bcaea:	6923      	ldr	r3, [r4, #16]
   bcaec:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bcaee:	6963      	ldr	r3, [r4, #20]
   bcaf0:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcaf4:	2400      	movs	r4, #0
   bcaf6:	2100      	movs	r1, #0
   bcaf8:	a807      	add	r0, sp, #28
   bcafa:	f7f9 fc2d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcafe:	42a0      	cmp	r0, r4
   bcb00:	dd5c      	ble.n	bcbbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcb02:	2500      	movs	r5, #0
   bcb04:	af07      	add	r7, sp, #28
   bcb06:	2101      	movs	r1, #1
   bcb08:	4638      	mov	r0, r7
   bcb0a:	f7f9 fc25 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb0e:	42a8      	cmp	r0, r5
   bcb10:	dd52      	ble.n	bcbb8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcb12:	2600      	movs	r6, #0
   bcb14:	2102      	movs	r1, #2
   bcb16:	4638      	mov	r0, r7
   bcb18:	f7f9 fc1e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb1c:	42b0      	cmp	r0, r6
   bcb1e:	dd49      	ble.n	bcbb4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcb20:	f04f 0800 	mov.w	r8, #0
   bcb24:	2103      	movs	r1, #3
   bcb26:	4638      	mov	r0, r7
   bcb28:	f7f9 fc16 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb2c:	4540      	cmp	r0, r8
   bcb2e:	dd3f      	ble.n	bcbb0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bcb30:	f8cd 8000 	str.w	r8, [sp]
   bcb34:	4633      	mov	r3, r6
   bcb36:	462a      	mov	r2, r5
   bcb38:	4621      	mov	r1, r4
   bcb3a:	a80c      	add	r0, sp, #48	; 0x30
   bcb3c:	f7f9 fd1c 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcb40:	9b04      	ldr	r3, [sp, #16]
   bcb42:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bcb46:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcb48:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bcb4c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcb4e:	462a      	mov	r2, r5
   bcb50:	4633      	mov	r3, r6
   bcb52:	4621      	mov	r1, r4
   bcb54:	a814      	add	r0, sp, #80	; 0x50
   bcb56:	f7f9 fd0f 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcb5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bcb5c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcb5e:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bcb60:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcb62:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcb66:	ee18 2a90 	vmov	r2, s17
   bcb6a:	ee18 1a10 	vmov	r1, s16
   bcb6e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcb72:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcb74:	f7f9 fcb6 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcb78:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcb7a:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcb7c:	ee19 1a10 	vmov	r1, s18
   bcb80:	465a      	mov	r2, fp
   bcb82:	4618      	mov	r0, r3
   bcb84:	f7f9 fcae 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bcb88:	f8cd 8000 	str.w	r8, [sp]
  return lhs > rhs;
   bcb8c:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bcb8e:	4633      	mov	r3, r6
   bcb90:	462a      	mov	r2, r5
   bcb92:	4621      	mov	r1, r4
   bcb94:	4638      	mov	r0, r7
  return lhs > rhs;
   bcb96:	bfd4      	ite	le
   bcb98:	f04f 0900 	movle.w	r9, #0
   bcb9c:	f04f 0901 	movgt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcba0:	f7f9 fc41 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bcba4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcba6:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcbaa:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcbae:	e7b9      	b.n	bcb24 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcbb0:	3601      	adds	r6, #1
   bcbb2:	e7af      	b.n	bcb14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcbb4:	3501      	adds	r5, #1
   bcbb6:	e7a5      	b.n	bcb04 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcbb8:	3401      	adds	r4, #1
   bcbba:	e79c      	b.n	bcaf6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bcbbc:	a807      	add	r0, sp, #28
   bcbbe:	f7f9 fbc0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bcbc2:	b01d      	add	sp, #116	; 0x74
   bcbc4:	ecbd 8b04 	vpop	{d8-d9}
   bcbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcbcc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bcbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcbd0:	ed2d 8b04 	vpush	{d8-d9}
   bcbd4:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcbd6:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bcbd8:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcbda:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bcbdc:	9204      	str	r2, [sp, #16]
   bcbde:	4604      	mov	r4, r0
   bcbe0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bcbe2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcbe4:	dd01      	ble.n	bcbea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bcbe6:	f007 fe09 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcbea:	6833      	ldr	r3, [r6, #0]
   bcbec:	2b04      	cmp	r3, #4
   bcbee:	dcfa      	bgt.n	bcbe6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcbf0:	6813      	ldr	r3, [r2, #0]
   bcbf2:	2b04      	cmp	r3, #4
   bcbf4:	dcf7      	bgt.n	bcbe6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bcbf6:	2301      	movs	r3, #1
   bcbf8:	2104      	movs	r1, #4
   bcbfa:	a807      	add	r0, sp, #28
   bcbfc:	f7f9 fbe6 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcc00:	ab14      	add	r3, sp, #80	; 0x50
   bcc02:	aa0c      	add	r2, sp, #48	; 0x30
   bcc04:	4631      	mov	r1, r6
   bcc06:	4628      	mov	r0, r5
   bcc08:	f7f9 fee8 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bcc0c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bcc10:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcc12:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bcc14:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcc18:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bcc1c:	68e3      	ldr	r3, [r4, #12]
   bcc1e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bcc22:	6923      	ldr	r3, [r4, #16]
   bcc24:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bcc26:	6963      	ldr	r3, [r4, #20]
   bcc28:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcc2c:	2400      	movs	r4, #0
   bcc2e:	2100      	movs	r1, #0
   bcc30:	a807      	add	r0, sp, #28
   bcc32:	f7f9 fb91 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcc36:	42a0      	cmp	r0, r4
   bcc38:	dd5c      	ble.n	bccf4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcc3a:	2500      	movs	r5, #0
   bcc3c:	af07      	add	r7, sp, #28
   bcc3e:	2101      	movs	r1, #1
   bcc40:	4638      	mov	r0, r7
   bcc42:	f7f9 fb89 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcc46:	42a8      	cmp	r0, r5
   bcc48:	dd52      	ble.n	bccf0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcc4a:	2600      	movs	r6, #0
   bcc4c:	2102      	movs	r1, #2
   bcc4e:	4638      	mov	r0, r7
   bcc50:	f7f9 fb82 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcc54:	42b0      	cmp	r0, r6
   bcc56:	dd49      	ble.n	bccec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcc58:	f04f 0800 	mov.w	r8, #0
   bcc5c:	2103      	movs	r1, #3
   bcc5e:	4638      	mov	r0, r7
   bcc60:	f7f9 fb7a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcc64:	4540      	cmp	r0, r8
   bcc66:	dd3f      	ble.n	bcce8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bcc68:	f8cd 8000 	str.w	r8, [sp]
   bcc6c:	4633      	mov	r3, r6
   bcc6e:	462a      	mov	r2, r5
   bcc70:	4621      	mov	r1, r4
   bcc72:	a80c      	add	r0, sp, #48	; 0x30
   bcc74:	f7f9 fc80 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcc78:	9b04      	ldr	r3, [sp, #16]
   bcc7a:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bcc7e:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcc80:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bcc84:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcc86:	462a      	mov	r2, r5
   bcc88:	4633      	mov	r3, r6
   bcc8a:	4621      	mov	r1, r4
   bcc8c:	a814      	add	r0, sp, #80	; 0x50
   bcc8e:	f7f9 fc73 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcc92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bcc94:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcc96:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bcc98:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcc9a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcc9e:	ee18 2a90 	vmov	r2, s17
   bcca2:	ee18 1a10 	vmov	r1, s16
   bcca6:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bccaa:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bccac:	f7f9 fc1a 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bccb0:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bccb2:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bccb4:	ee19 1a10 	vmov	r1, s18
   bccb8:	465a      	mov	r2, fp
   bccba:	4618      	mov	r0, r3
   bccbc:	f7f9 fc12 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bccc0:	f8cd 8000 	str.w	r8, [sp]
  return lhs > rhs;
   bccc4:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bccc6:	4633      	mov	r3, r6
   bccc8:	462a      	mov	r2, r5
   bccca:	4621      	mov	r1, r4
   bcccc:	4638      	mov	r0, r7
  return lhs > rhs;
   bccce:	bfd4      	ite	le
   bccd0:	f04f 0900 	movle.w	r9, #0
   bccd4:	f04f 0901 	movgt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bccd8:	f7f9 fba5 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bccdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bccde:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcce2:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcce6:	e7b9      	b.n	bcc5c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcce8:	3601      	adds	r6, #1
   bccea:	e7af      	b.n	bcc4c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bccec:	3501      	adds	r5, #1
   bccee:	e7a5      	b.n	bcc3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bccf0:	3401      	adds	r4, #1
   bccf2:	e79c      	b.n	bcc2e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bccf4:	a807      	add	r0, sp, #28
   bccf6:	f7f9 fb24 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bccfa:	b01d      	add	sp, #116	; 0x74
   bccfc:	ecbd 8b04 	vpop	{d8-d9}
   bcd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   bcd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd08:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcd0c:	680a      	ldr	r2, [r1, #0]
   bcd0e:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bcd12:	6895      	ldr	r5, [r2, #8]
   bcd14:	4680      	mov	r8, r0
   bcd16:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcd18:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcd1a:	2338      	movs	r3, #56	; 0x38
   bcd1c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcd20:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcd22:	fb03 a505 	mla	r5, r3, r5, sl
   bcd26:	eb0a 0609 	add.w	r6, sl, r9
   bcd2a:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bcd2c:	4629      	mov	r1, r5
   bcd2e:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcd30:	fb03 a404 	mla	r4, r3, r4, sl
   bcd34:	f7f8 fa32 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bcd38:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bcd3c:	f080 0001 	eor.w	r0, r0, #1
   bcd40:	1e53      	subs	r3, r2, #1
   bcd42:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bcd44:	2b08      	cmp	r3, #8
   bcd46:	f200 8377 	bhi.w	bd438 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x734>
   bcd4a:	e8df f013 	tbh	[pc, r3, lsl #1]
   bcd4e:	0009      	.short	0x0009
   bcd50:	024d00cc 	.word	0x024d00cc
   bcd54:	03750186 	.word	0x03750186
   bcd58:	03750375 	.word	0x03750375
   bcd5c:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   bcd60:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bcd64:	4631      	mov	r1, r6
   bcd66:	2f00      	cmp	r7, #0
   bcd68:	f000 808f 	beq.w	bce8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x186>
   bcd6c:	a80c      	add	r0, sp, #48	; 0x30
   bcd6e:	f7f9 fd8c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bcd72:	6873      	ldr	r3, [r6, #4]
   bcd74:	9305      	str	r3, [sp, #20]
   bcd76:	4629      	mov	r1, r5
   bcd78:	a811      	add	r0, sp, #68	; 0x44
   bcd7a:	f7f9 fd86 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcd7e:	b105      	cbz	r5, bcd82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bcd80:	686d      	ldr	r5, [r5, #4]
   bcd82:	4621      	mov	r1, r4
   bcd84:	a816      	add	r0, sp, #88	; 0x58
   bcd86:	f7f9 fd80 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bcd8a:	b104      	cbz	r4, bcd8e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bcd8c:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcd8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bcd90:	2b04      	cmp	r3, #4
   bcd92:	dd01      	ble.n	bcd98 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bcd94:	f007 fd32 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcd98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bcd9a:	2b04      	cmp	r3, #4
   bcd9c:	dcfa      	bgt.n	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcd9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bcda0:	2b04      	cmp	r3, #4
   bcda2:	dcf7      	bgt.n	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bcda4:	2301      	movs	r3, #1
   bcda6:	aa16      	add	r2, sp, #88	; 0x58
   bcda8:	2104      	movs	r1, #4
   bcdaa:	a839      	add	r0, sp, #228	; 0xe4
   bcdac:	f7f9 fb0e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcdb0:	ab46      	add	r3, sp, #280	; 0x118
   bcdb2:	4642      	mov	r2, r8
   bcdb4:	a911      	add	r1, sp, #68	; 0x44
   bcdb6:	a80c      	add	r0, sp, #48	; 0x30
   bcdb8:	f7f9 fe10 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcdbc:	2600      	movs	r6, #0
   bcdbe:	2100      	movs	r1, #0
   bcdc0:	a839      	add	r0, sp, #228	; 0xe4
   bcdc2:	f7f9 fac9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcdc6:	42b0      	cmp	r0, r6
   bcdc8:	dd4d      	ble.n	bce66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcdca:	2700      	movs	r7, #0
   bcdcc:	2101      	movs	r1, #1
   bcdce:	a839      	add	r0, sp, #228	; 0xe4
   bcdd0:	f7f9 fac2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcdd4:	42b8      	cmp	r0, r7
   bcdd6:	dd44      	ble.n	bce62 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcdd8:	f04f 0b00 	mov.w	fp, #0
   bcddc:	2102      	movs	r1, #2
   bcdde:	a839      	add	r0, sp, #228	; 0xe4
   bcde0:	f7f9 faba 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcde4:	4558      	cmp	r0, fp
   bcde6:	dd3a      	ble.n	bce5e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcde8:	f04f 0900 	mov.w	r9, #0
   bcdec:	2103      	movs	r1, #3
   bcdee:	a839      	add	r0, sp, #228	; 0xe4
   bcdf0:	f7f9 fab2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcdf4:	4548      	cmp	r0, r9
   bcdf6:	dd2f      	ble.n	bce58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bcdf8:	f8cd 9000 	str.w	r9, [sp]
   bcdfc:	465b      	mov	r3, fp
   bcdfe:	463a      	mov	r2, r7
   bce00:	4631      	mov	r1, r6
   bce02:	4640      	mov	r0, r8
   bce04:	f7f9 fbb8 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bce08:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bce0c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bce0e:	465b      	mov	r3, fp
   bce10:	463a      	mov	r2, r7
   bce12:	4631      	mov	r1, r6
   bce14:	a846      	add	r0, sp, #280	; 0x118
   bce16:	f7f9 fbaf 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bce1a:	9b05      	ldr	r3, [sp, #20]
   bce1c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bce20:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs > rhs;
   bce24:	ed9a 7a00 	vldr	s14, [sl]
   bce28:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bce2c:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bce30:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bce34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bce38:	465b      	mov	r3, fp
   bce3a:	463a      	mov	r2, r7
   bce3c:	4631      	mov	r1, r6
   bce3e:	a839      	add	r0, sp, #228	; 0xe4
  return lhs > rhs;
   bce40:	bfcc      	ite	gt
   bce42:	f04f 0a01 	movgt.w	sl, #1
   bce46:	f04f 0a00 	movle.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bce4a:	f7f9 faec 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bce4e:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bce52:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bce56:	e7c9      	b.n	bcdec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bce58:	f10b 0b01 	add.w	fp, fp, #1
   bce5c:	e7be      	b.n	bcddc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bce5e:	3701      	adds	r7, #1
   bce60:	e7b4      	b.n	bcdcc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bce62:	3601      	adds	r6, #1
   bce64:	e7ab      	b.n	bcdbe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bce66:	a839      	add	r0, sp, #228	; 0xe4
   bce68:	f7f9 fa6b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bce6c:	a816      	add	r0, sp, #88	; 0x58
   bce6e:	f7f9 fa68 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bce72:	a811      	add	r0, sp, #68	; 0x44
   bce74:	f7f9 fa65 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bce78:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(Greater);
   bce7a:	f7f9 fa62 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bce7e:	2000      	movs	r0, #0
}
   bce80:	b04f      	add	sp, #316	; 0x13c
   bce82:	ecbd 8b02 	vpop	{d8}
   bce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   bce8a:	a839      	add	r0, sp, #228	; 0xe4
   bce8c:	f7f9 fcfd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bce90:	4629      	mov	r1, r5
   bce92:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bce94:	6876      	ldr	r6, [r6, #4]
   bce96:	f7f9 fcf8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bce9a:	b105      	cbz	r5, bce9e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bce9c:	686d      	ldr	r5, [r5, #4]
   bce9e:	4621      	mov	r1, r4
   bcea0:	a846      	add	r0, sp, #280	; 0x118
   bcea2:	f7f9 fcf2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bcea6:	b104      	cbz	r4, bceaa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bcea8:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bceaa:	aa46      	add	r2, sp, #280	; 0x118
   bceac:	4641      	mov	r1, r8
   bceae:	a839      	add	r0, sp, #228	; 0xe4
   bceb0:	f7f9 fadb 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bceb4:	2300      	movs	r3, #0
  const int64_t flatsize =
   bceb6:	17c7      	asrs	r7, r0, #31
   bceb8:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bceba:	4619      	mov	r1, r3
   bcebc:	4283      	cmp	r3, r0
   bcebe:	eb71 0607 	sbcs.w	r6, r1, r7
   bcec2:	f280 80c2 	bge.w	bd04a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bcec6:	ecb2 7a01 	vldmia	r2!, {s14}
   bceca:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs > rhs;
   bcece:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bced2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bced6:	bfcc      	ite	gt
   bced8:	2601      	movgt	r6, #1
   bceda:	2600      	movle	r6, #0
   bcedc:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bcede:	3301      	adds	r3, #1
   bcee0:	f141 0100 	adc.w	r1, r1, #0
   bcee4:	e7ea      	b.n	bcebc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
   bcee6:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bceea:	4631      	mov	r1, r6
   bceec:	2f00      	cmp	r7, #0
   bceee:	f000 8082 	beq.w	bcff6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bcef2:	a81b      	add	r0, sp, #108	; 0x6c
   bcef4:	f7f9 fcc9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bcef8:	6873      	ldr	r3, [r6, #4]
   bcefa:	9305      	str	r3, [sp, #20]
   bcefc:	4629      	mov	r1, r5
   bcefe:	a820      	add	r0, sp, #128	; 0x80
   bcf00:	f7f9 fcc3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcf04:	b105      	cbz	r5, bcf08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x204>
   bcf06:	686d      	ldr	r5, [r5, #4]
   bcf08:	4621      	mov	r1, r4
   bcf0a:	a825      	add	r0, sp, #148	; 0x94
   bcf0c:	f7f9 fcbd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bcf10:	b104      	cbz	r4, bcf14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x210>
   bcf12:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcf14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bcf16:	2b04      	cmp	r3, #4
   bcf18:	f73f af3c 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcf1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bcf1e:	2b04      	cmp	r3, #4
   bcf20:	f73f af38 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcf24:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bcf26:	2b04      	cmp	r3, #4
   bcf28:	f73f af34 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bcf2c:	2301      	movs	r3, #1
   bcf2e:	aa25      	add	r2, sp, #148	; 0x94
   bcf30:	2104      	movs	r1, #4
   bcf32:	a839      	add	r0, sp, #228	; 0xe4
   bcf34:	f7f9 fa4a 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcf38:	ab46      	add	r3, sp, #280	; 0x118
   bcf3a:	4642      	mov	r2, r8
   bcf3c:	a920      	add	r1, sp, #128	; 0x80
   bcf3e:	a81b      	add	r0, sp, #108	; 0x6c
   bcf40:	f7f9 fd4c 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcf44:	2600      	movs	r6, #0
   bcf46:	2100      	movs	r1, #0
   bcf48:	a839      	add	r0, sp, #228	; 0xe4
   bcf4a:	f7f9 fa05 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcf4e:	42b0      	cmp	r0, r6
   bcf50:	dd46      	ble.n	bcfe0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcf52:	2700      	movs	r7, #0
   bcf54:	2101      	movs	r1, #1
   bcf56:	a839      	add	r0, sp, #228	; 0xe4
   bcf58:	f7f9 f9fe 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcf5c:	42b8      	cmp	r0, r7
   bcf5e:	dd3d      	ble.n	bcfdc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcf60:	f04f 0b00 	mov.w	fp, #0
   bcf64:	2102      	movs	r1, #2
   bcf66:	a839      	add	r0, sp, #228	; 0xe4
   bcf68:	f7f9 f9f6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcf6c:	4558      	cmp	r0, fp
   bcf6e:	dd33      	ble.n	bcfd8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcf70:	f04f 0900 	mov.w	r9, #0
   bcf74:	2103      	movs	r1, #3
   bcf76:	a839      	add	r0, sp, #228	; 0xe4
   bcf78:	f7f9 f9ee 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcf7c:	4548      	cmp	r0, r9
   bcf7e:	dd28      	ble.n	bcfd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bcf80:	f8cd 9000 	str.w	r9, [sp]
   bcf84:	465b      	mov	r3, fp
   bcf86:	463a      	mov	r2, r7
   bcf88:	4631      	mov	r1, r6
   bcf8a:	4640      	mov	r0, r8
   bcf8c:	f7f9 faf4 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bcf90:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bcf94:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bcf96:	465b      	mov	r3, fp
   bcf98:	463a      	mov	r2, r7
   bcf9a:	4631      	mov	r1, r6
   bcf9c:	a846      	add	r0, sp, #280	; 0x118
   bcf9e:	f7f9 faeb 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs > rhs;
   bcfa2:	9b05      	ldr	r3, [sp, #20]
   bcfa4:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bcfa8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bcfac:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bcfb0:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bcfb2:	465b      	mov	r3, fp
   bcfb4:	463a      	mov	r2, r7
   bcfb6:	4631      	mov	r1, r6
   bcfb8:	a839      	add	r0, sp, #228	; 0xe4
  return lhs > rhs;
   bcfba:	bfd4      	ite	le
   bcfbc:	f04f 0a00 	movle.w	sl, #0
   bcfc0:	f04f 0a01 	movgt.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcfc4:	f7f9 fa2f 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcfc8:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcfcc:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcfd0:	e7d0      	b.n	bcf74 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcfd2:	f10b 0b01 	add.w	fp, fp, #1
   bcfd6:	e7c5      	b.n	bcf64 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcfd8:	3701      	adds	r7, #1
   bcfda:	e7bb      	b.n	bcf54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcfdc:	3601      	adds	r6, #1
   bcfde:	e7b2      	b.n	bcf46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bcfe0:	a839      	add	r0, sp, #228	; 0xe4
   bcfe2:	f7f9 f9ae 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bcfe6:	a825      	add	r0, sp, #148	; 0x94
   bcfe8:	f7f9 f9ab 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bcfec:	a820      	add	r0, sp, #128	; 0x80
   bcfee:	f7f9 f9a8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bcff2:	a81b      	add	r0, sp, #108	; 0x6c
   bcff4:	e741      	b.n	bce7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bcff6:	a839      	add	r0, sp, #228	; 0xe4
   bcff8:	f7f9 fc47 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcffc:	4629      	mov	r1, r5
   bcffe:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd000:	6876      	ldr	r6, [r6, #4]
   bd002:	f7f9 fc42 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd006:	b105      	cbz	r5, bd00a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bd008:	686d      	ldr	r5, [r5, #4]
   bd00a:	4621      	mov	r1, r4
   bd00c:	a846      	add	r0, sp, #280	; 0x118
   bd00e:	f7f9 fc3c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd012:	b104      	cbz	r4, bd016 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bd014:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd016:	aa46      	add	r2, sp, #280	; 0x118
   bd018:	4641      	mov	r1, r8
   bd01a:	a839      	add	r0, sp, #228	; 0xe4
   bd01c:	f7f9 fa25 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd020:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd022:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd026:	461f      	mov	r7, r3
   bd028:	4283      	cmp	r3, r0
   bd02a:	eb77 020c 	sbcs.w	r2, r7, ip
   bd02e:	da0c      	bge.n	bd04a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs > rhs;
   bd030:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bd034:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bd038:	428a      	cmp	r2, r1
   bd03a:	bfd4      	ite	le
   bd03c:	2200      	movle	r2, #0
   bd03e:	2201      	movgt	r2, #1
   bd040:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd042:	3301      	adds	r3, #1
   bd044:	f147 0700 	adc.w	r7, r7, #0
   bd048:	e7ee      	b.n	bd028 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bd04a:	a846      	add	r0, sp, #280	; 0x118
   bd04c:	f7f9 f979 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd050:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
   bd052:	f7f9 f976 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd056:	a839      	add	r0, sp, #228	; 0xe4
   bd058:	e70f      	b.n	bce7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd05a:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd05e:	4631      	mov	r1, r6
   bd060:	2f00      	cmp	r7, #0
   bd062:	f000 808c 	beq.w	bd17e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bd066:	a82a      	add	r0, sp, #168	; 0xa8
   bd068:	f7f9 fc0f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd06c:	4629      	mov	r1, r5
   bd06e:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd070:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bd074:	f7f9 fc09 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd078:	b105      	cbz	r5, bd07c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x378>
   bd07a:	686d      	ldr	r5, [r5, #4]
   bd07c:	4621      	mov	r1, r4
   bd07e:	a834      	add	r0, sp, #208	; 0xd0
   bd080:	f7f9 fc03 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd084:	b104      	cbz	r4, bd088 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bd086:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd088:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd08a:	2b04      	cmp	r3, #4
   bd08c:	f73f ae82 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd090:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd092:	2b04      	cmp	r3, #4
   bd094:	f73f ae7e 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd098:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bd09a:	2b04      	cmp	r3, #4
   bd09c:	f73f ae7a 	bgt.w	bcd94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd0a0:	2301      	movs	r3, #1
   bd0a2:	aa34      	add	r2, sp, #208	; 0xd0
   bd0a4:	2104      	movs	r1, #4
   bd0a6:	a839      	add	r0, sp, #228	; 0xe4
   bd0a8:	f7f9 f990 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd0ac:	ab46      	add	r3, sp, #280	; 0x118
   bd0ae:	4642      	mov	r2, r8
   bd0b0:	a92f      	add	r1, sp, #188	; 0xbc
   bd0b2:	a82a      	add	r0, sp, #168	; 0xa8
   bd0b4:	f7f9 fc92 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd0b8:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd0bc:	2700      	movs	r7, #0
   bd0be:	2100      	movs	r1, #0
   bd0c0:	a839      	add	r0, sp, #228	; 0xe4
   bd0c2:	f7f9 f949 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd0c6:	42b8      	cmp	r0, r7
   bd0c8:	dd4e      	ble.n	bd168 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd0ca:	f04f 0800 	mov.w	r8, #0
   bd0ce:	2101      	movs	r1, #1
   bd0d0:	a839      	add	r0, sp, #228	; 0xe4
   bd0d2:	f7f9 f941 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd0d6:	4540      	cmp	r0, r8
   bd0d8:	dd44      	ble.n	bd164 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd0da:	2600      	movs	r6, #0
   bd0dc:	2102      	movs	r1, #2
   bd0de:	a839      	add	r0, sp, #228	; 0xe4
   bd0e0:	f7f9 f93a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd0e4:	42b0      	cmp	r0, r6
   bd0e6:	dd3a      	ble.n	bd15e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd0e8:	f04f 0900 	mov.w	r9, #0
   bd0ec:	2103      	movs	r1, #3
   bd0ee:	a839      	add	r0, sp, #228	; 0xe4
   bd0f0:	f7f9 f932 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd0f4:	4548      	cmp	r0, r9
   bd0f6:	dd30      	ble.n	bd15a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd0f8:	f8cd 9000 	str.w	r9, [sp]
   bd0fc:	4633      	mov	r3, r6
   bd0fe:	4642      	mov	r2, r8
   bd100:	4639      	mov	r1, r7
   bd102:	ee18 0a10 	vmov	r0, s16
   bd106:	f7f9 fa37 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd10a:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd10e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd110:	4633      	mov	r3, r6
   bd112:	4642      	mov	r2, r8
   bd114:	4639      	mov	r1, r7
   bd116:	a846      	add	r0, sp, #280	; 0x118
   bd118:	f7f9 fa2e 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd11c:	eb0b 02ca 	add.w	r2, fp, sl, lsl #3
   bd120:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
  return lhs > rhs;
   bd124:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bd128:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bd12c:	6852      	ldr	r2, [r2, #4]
   bd12e:	6849      	ldr	r1, [r1, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd130:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bd134:	4298      	cmp	r0, r3
   bd136:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bd13a:	a839      	add	r0, sp, #228	; 0xe4
   bd13c:	4633      	mov	r3, r6
   bd13e:	4642      	mov	r2, r8
   bd140:	4639      	mov	r1, r7
  return lhs > rhs;
   bd142:	bfb4      	ite	lt
   bd144:	f04f 0a01 	movlt.w	sl, #1
   bd148:	f04f 0a00 	movge.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd14c:	f7f9 f96b 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd150:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd154:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd158:	e7c8      	b.n	bd0ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd15a:	3601      	adds	r6, #1
   bd15c:	e7be      	b.n	bd0dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd15e:	f108 0801 	add.w	r8, r8, #1
   bd162:	e7b4      	b.n	bd0ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd164:	3701      	adds	r7, #1
   bd166:	e7aa      	b.n	bd0be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bd168:	a839      	add	r0, sp, #228	; 0xe4
   bd16a:	f7f9 f8ea 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd16e:	a834      	add	r0, sp, #208	; 0xd0
   bd170:	f7f9 f8e7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd174:	a82f      	add	r0, sp, #188	; 0xbc
   bd176:	f7f9 f8e4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd17a:	a82a      	add	r0, sp, #168	; 0xa8
   bd17c:	e67d      	b.n	bce7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd17e:	a839      	add	r0, sp, #228	; 0xe4
   bd180:	f7f9 fb83 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd184:	4629      	mov	r1, r5
   bd186:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd188:	6877      	ldr	r7, [r6, #4]
   bd18a:	f7f9 fb7e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd18e:	b105      	cbz	r5, bd192 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   bd190:	686d      	ldr	r5, [r5, #4]
   bd192:	4621      	mov	r1, r4
   bd194:	a846      	add	r0, sp, #280	; 0x118
   bd196:	f7f9 fb78 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd19a:	b104      	cbz	r4, bd19e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   bd19c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd19e:	aa46      	add	r2, sp, #280	; 0x118
   bd1a0:	4641      	mov	r1, r8
   bd1a2:	a839      	add	r0, sp, #228	; 0xe4
   bd1a4:	f7f9 f961 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd1a8:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd1aa:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bd1ae:	f1a7 0208 	sub.w	r2, r7, #8
   bd1b2:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bd1b4:	4619      	mov	r1, r3
   bd1b6:	4283      	cmp	r3, r0
   bd1b8:	eb71 060e 	sbcs.w	r6, r1, lr
   bd1bc:	da0f      	bge.n	bd1de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs > rhs;
   bd1be:	f852 6f08 	ldr.w	r6, [r2, #8]!
   bd1c2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   bd1c6:	42b7      	cmp	r7, r6
   bd1c8:	686e      	ldr	r6, [r5, #4]
   bd1ca:	6857      	ldr	r7, [r2, #4]
   bd1cc:	41be      	sbcs	r6, r7
   bd1ce:	bfb4      	ite	lt
   bd1d0:	2601      	movlt	r6, #1
   bd1d2:	2600      	movge	r6, #0
   bd1d4:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd1d6:	3301      	adds	r3, #1
   bd1d8:	f141 0100 	adc.w	r1, r1, #0
   bd1dc:	e7eb      	b.n	bd1b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bd1de:	a846      	add	r0, sp, #280	; 0x118
   bd1e0:	f7f9 f8af 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd1e4:	a83e      	add	r0, sp, #248	; 0xf8
   bd1e6:	e734      	b.n	bd052 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(Greater);
   bd1e8:	6933      	ldr	r3, [r6, #16]
   bd1ea:	68f0      	ldr	r0, [r6, #12]
   bd1ec:	f1c3 0900 	rsb	r9, r3, #0
   bd1f0:	692b      	ldr	r3, [r5, #16]
   bd1f2:	f1c3 0800 	rsb	r8, r3, #0
   bd1f6:	f7f7 f877 	bl	b42e8 <__aeabi_f2d>
   bd1fa:	ec41 0b10 	vmov	d0, r0, r1
   bd1fe:	a925      	add	r1, sp, #148	; 0x94
   bd200:	a820      	add	r0, sp, #128	; 0x80
   bd202:	f7f8 f833 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd206:	68e8      	ldr	r0, [r5, #12]
   bd208:	f7f7 f86e 	bl	b42e8 <__aeabi_f2d>
   bd20c:	ec41 0b10 	vmov	d0, r0, r1
   bd210:	a92f      	add	r1, sp, #188	; 0xbc
   bd212:	a82a      	add	r0, sp, #168	; 0xa8
   bd214:	f7f8 f82a 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd218:	2308      	movs	r3, #8
   bd21a:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bd21e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd220:	9348      	str	r3, [sp, #288]	; 0x120
   bd222:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd224:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bd228:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd22a:	934b      	str	r3, [sp, #300]	; 0x12c
   bd22c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd22e:	934c      	str	r3, [sp, #304]	; 0x130
   bd230:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd234:	4631      	mov	r1, r6
   bd236:	a834      	add	r0, sp, #208	; 0xd0
   bd238:	b1ff      	cbz	r7, bd27a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x576>
   bd23a:	f7f9 fb26 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd23e:	6872      	ldr	r2, [r6, #4]
   bd240:	9205      	str	r2, [sp, #20]
   bd242:	4629      	mov	r1, r5
   bd244:	a839      	add	r0, sp, #228	; 0xe4
   bd246:	f7f9 fb20 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd24a:	4621      	mov	r1, r4
   bd24c:	4640      	mov	r0, r8
   bd24e:	686d      	ldr	r5, [r5, #4]
   bd250:	f7f9 fb1b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd254:	9a05      	ldr	r2, [sp, #20]
   bd256:	b104      	cbz	r4, bd25a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bd258:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Greater);
   bd25a:	9500      	str	r5, [sp, #0]
   bd25c:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bd260:	ab39      	add	r3, sp, #228	; 0xe4
   bd262:	a934      	add	r1, sp, #208	; 0xd0
   bd264:	a846      	add	r0, sp, #280	; 0x118
   bd266:	f7ff fc15 	bl	bca94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bd26a:	4640      	mov	r0, r8
   bd26c:	f7f9 f869 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd270:	a839      	add	r0, sp, #228	; 0xe4
   bd272:	f7f9 f866 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd276:	a834      	add	r0, sp, #208	; 0xd0
   bd278:	e5ff      	b.n	bce7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd27a:	f7f9 fb06 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd27e:	6873      	ldr	r3, [r6, #4]
   bd280:	9305      	str	r3, [sp, #20]
   bd282:	4629      	mov	r1, r5
   bd284:	a839      	add	r0, sp, #228	; 0xe4
   bd286:	f7f9 fb00 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd28a:	686b      	ldr	r3, [r5, #4]
   bd28c:	9306      	str	r3, [sp, #24]
   bd28e:	4621      	mov	r1, r4
   bd290:	4640      	mov	r0, r8
   bd292:	f7f9 fafa 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd296:	b104      	cbz	r4, bd29a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x596>
   bd298:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bd29a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bd29e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bd2a0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bd2a2:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bd2a4:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd2a8:	aa3e      	add	r2, sp, #248	; 0xf8
   bd2aa:	a939      	add	r1, sp, #228	; 0xe4
   bd2ac:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bd2ae:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd2b2:	f7f9 f8da 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bd2b6:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bd2ba:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd2bc:	2500      	movs	r5, #0
  const int64_t flatsize =
   bd2be:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd2c0:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bd2c2:	462b      	mov	r3, r5
   bd2c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bd2c6:	930b      	str	r3, [sp, #44]	; 0x2c
   bd2c8:	4545      	cmp	r5, r8
   bd2ca:	eb73 0202 	sbcs.w	r2, r3, r2
   bd2ce:	f280 80b1 	bge.w	bd434 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bd2d2:	9b06      	ldr	r3, [sp, #24]
   bd2d4:	5d5f      	ldrb	r7, [r3, r5]
   bd2d6:	9b08      	ldr	r3, [sp, #32]
   bd2d8:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bd2da:	9b05      	ldr	r3, [sp, #20]
   bd2dc:	5d58      	ldrb	r0, [r3, r5]
   bd2de:	9b07      	ldr	r3, [sp, #28]
   bd2e0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd2e2:	465a      	mov	r2, fp
   bd2e4:	4651      	mov	r1, sl
   bd2e6:	fa00 f009 	lsl.w	r0, r0, r9
   bd2ea:	f7f9 f8fb 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd2ee:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd2f2:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd2f4:	ee18 2a10 	vmov	r2, s16
   bd2f8:	4631      	mov	r1, r6
   bd2fa:	4638      	mov	r0, r7
   bd2fc:	f7f9 f8f2 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs > rhs;
   bd300:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd302:	4283      	cmp	r3, r0
   bd304:	bfd4      	ite	le
   bd306:	2000      	movle	r0, #0
   bd308:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bd30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs > rhs;
   bd30c:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd30e:	3501      	adds	r5, #1
   bd310:	f143 0300 	adc.w	r3, r3, #0
   bd314:	e7d6      	b.n	bd2c4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bd316:	6933      	ldr	r3, [r6, #16]
   bd318:	68f0      	ldr	r0, [r6, #12]
   bd31a:	f1c3 0900 	rsb	r9, r3, #0
   bd31e:	692b      	ldr	r3, [r5, #16]
   bd320:	f1c3 0800 	rsb	r8, r3, #0
   bd324:	f7f6 ffe0 	bl	b42e8 <__aeabi_f2d>
   bd328:	ec41 0b10 	vmov	d0, r0, r1
   bd32c:	a925      	add	r1, sp, #148	; 0x94
   bd32e:	a820      	add	r0, sp, #128	; 0x80
   bd330:	f7f7 ff9c 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd334:	68e8      	ldr	r0, [r5, #12]
   bd336:	f7f6 ffd7 	bl	b42e8 <__aeabi_f2d>
   bd33a:	ec41 0b10 	vmov	d0, r0, r1
   bd33e:	a92f      	add	r1, sp, #188	; 0xbc
   bd340:	a82a      	add	r0, sp, #168	; 0xa8
   bd342:	f7f7 ff93 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd346:	2308      	movs	r3, #8
   bd348:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bd34c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd34e:	9348      	str	r3, [sp, #288]	; 0x120
   bd350:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd352:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bd356:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd358:	934b      	str	r3, [sp, #300]	; 0x12c
   bd35a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd35c:	934c      	str	r3, [sp, #304]	; 0x130
   bd35e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd362:	4631      	mov	r1, r6
   bd364:	a834      	add	r0, sp, #208	; 0xd0
   bd366:	b1c7      	cbz	r7, bd39a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bd368:	f7f9 fa8f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd36c:	6872      	ldr	r2, [r6, #4]
   bd36e:	9205      	str	r2, [sp, #20]
   bd370:	4629      	mov	r1, r5
   bd372:	a839      	add	r0, sp, #228	; 0xe4
   bd374:	f7f9 fa89 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd378:	4621      	mov	r1, r4
   bd37a:	4640      	mov	r0, r8
   bd37c:	686d      	ldr	r5, [r5, #4]
   bd37e:	f7f9 fa84 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd382:	9a05      	ldr	r2, [sp, #20]
   bd384:	b104      	cbz	r4, bd388 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bd386:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Greater);
   bd388:	9500      	str	r5, [sp, #0]
   bd38a:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bd38e:	ab39      	add	r3, sp, #228	; 0xe4
   bd390:	a934      	add	r1, sp, #208	; 0xd0
   bd392:	a846      	add	r0, sp, #280	; 0x118
   bd394:	f7ff fc1a 	bl	bcbcc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bd398:	e767      	b.n	bd26a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bd39a:	f7f9 fa76 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd39e:	6873      	ldr	r3, [r6, #4]
   bd3a0:	9305      	str	r3, [sp, #20]
   bd3a2:	4629      	mov	r1, r5
   bd3a4:	a839      	add	r0, sp, #228	; 0xe4
   bd3a6:	f7f9 fa70 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd3aa:	686b      	ldr	r3, [r5, #4]
   bd3ac:	9306      	str	r3, [sp, #24]
   bd3ae:	4621      	mov	r1, r4
   bd3b0:	4640      	mov	r0, r8
   bd3b2:	f7f9 fa6a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd3b6:	b104      	cbz	r4, bd3ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bd3b8:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bd3ba:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bd3be:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bd3c0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bd3c2:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bd3c4:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd3c8:	aa3e      	add	r2, sp, #248	; 0xf8
   bd3ca:	a939      	add	r1, sp, #228	; 0xe4
   bd3cc:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bd3ce:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd3d2:	f7f9 f84a 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bd3d6:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bd3da:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd3dc:	2500      	movs	r5, #0
  const int64_t flatsize =
   bd3de:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd3e0:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bd3e2:	462b      	mov	r3, r5
   bd3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bd3e6:	930b      	str	r3, [sp, #44]	; 0x2c
   bd3e8:	4545      	cmp	r5, r8
   bd3ea:	eb73 0202 	sbcs.w	r2, r3, r2
   bd3ee:	da21      	bge.n	bd434 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bd3f0:	9b06      	ldr	r3, [sp, #24]
   bd3f2:	575f      	ldrsb	r7, [r3, r5]
   bd3f4:	9b08      	ldr	r3, [sp, #32]
   bd3f6:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bd3f8:	9b05      	ldr	r3, [sp, #20]
   bd3fa:	5758      	ldrsb	r0, [r3, r5]
   bd3fc:	9b07      	ldr	r3, [sp, #28]
   bd3fe:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd400:	465a      	mov	r2, fp
   bd402:	4651      	mov	r1, sl
   bd404:	fa00 f009 	lsl.w	r0, r0, r9
   bd408:	f7f9 f86c 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd40c:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd410:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd412:	ee18 2a10 	vmov	r2, s16
   bd416:	4631      	mov	r1, r6
   bd418:	4638      	mov	r0, r7
   bd41a:	f7f9 f863 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs > rhs;
   bd41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd420:	4283      	cmp	r3, r0
   bd422:	bfd4      	ite	le
   bd424:	2000      	movle	r0, #0
   bd426:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bd428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs > rhs;
   bd42a:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd42c:	3501      	adds	r5, #1
   bd42e:	f143 0300 	adc.w	r3, r3, #0
   bd432:	e7d7      	b.n	bd3e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bd434:	a83e      	add	r0, sp, #248	; 0xf8
   bd436:	e719      	b.n	bd26c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bd438:	4640      	mov	r0, r8
   bd43a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bd43e:	4902      	ldr	r1, [pc, #8]	; (bd448 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bd440:	4798      	blx	r3
      return kTfLiteError;
   bd442:	2001      	movs	r0, #1
   bd444:	e51c      	b.n	bce80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bd446:	bf00      	nop
   bd448:	000c89e7 	.word	0x000c89e7

000bd44c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bd44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd450:	ed2d 8b04 	vpush	{d8-d9}
   bd454:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd456:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bd458:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd45a:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bd45c:	9204      	str	r2, [sp, #16]
   bd45e:	4604      	mov	r4, r0
   bd460:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bd462:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd464:	dd01      	ble.n	bd46a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bd466:	f007 f9c9 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd46a:	6833      	ldr	r3, [r6, #0]
   bd46c:	2b04      	cmp	r3, #4
   bd46e:	dcfa      	bgt.n	bd466 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd470:	6813      	ldr	r3, [r2, #0]
   bd472:	2b04      	cmp	r3, #4
   bd474:	dcf7      	bgt.n	bd466 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bd476:	2301      	movs	r3, #1
   bd478:	2104      	movs	r1, #4
   bd47a:	a807      	add	r0, sp, #28
   bd47c:	f7f8 ffa6 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd480:	ab14      	add	r3, sp, #80	; 0x50
   bd482:	aa0c      	add	r2, sp, #48	; 0x30
   bd484:	4631      	mov	r1, r6
   bd486:	4628      	mov	r0, r5
   bd488:	f7f9 faa8 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bd48c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bd490:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd492:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bd494:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd498:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bd49c:	68e3      	ldr	r3, [r4, #12]
   bd49e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bd4a2:	6923      	ldr	r3, [r4, #16]
   bd4a4:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bd4a6:	6963      	ldr	r3, [r4, #20]
   bd4a8:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd4ac:	2400      	movs	r4, #0
   bd4ae:	2100      	movs	r1, #0
   bd4b0:	a807      	add	r0, sp, #28
   bd4b2:	f7f8 ff51 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd4b6:	42a0      	cmp	r0, r4
   bd4b8:	dd5c      	ble.n	bd574 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd4ba:	2500      	movs	r5, #0
   bd4bc:	af07      	add	r7, sp, #28
   bd4be:	2101      	movs	r1, #1
   bd4c0:	4638      	mov	r0, r7
   bd4c2:	f7f8 ff49 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd4c6:	42a8      	cmp	r0, r5
   bd4c8:	dd52      	ble.n	bd570 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd4ca:	2600      	movs	r6, #0
   bd4cc:	2102      	movs	r1, #2
   bd4ce:	4638      	mov	r0, r7
   bd4d0:	f7f8 ff42 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd4d4:	42b0      	cmp	r0, r6
   bd4d6:	dd49      	ble.n	bd56c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd4d8:	f04f 0800 	mov.w	r8, #0
   bd4dc:	2103      	movs	r1, #3
   bd4de:	4638      	mov	r0, r7
   bd4e0:	f7f8 ff3a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd4e4:	4540      	cmp	r0, r8
   bd4e6:	dd3f      	ble.n	bd568 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bd4e8:	f8cd 8000 	str.w	r8, [sp]
   bd4ec:	4633      	mov	r3, r6
   bd4ee:	462a      	mov	r2, r5
   bd4f0:	4621      	mov	r1, r4
   bd4f2:	a80c      	add	r0, sp, #48	; 0x30
   bd4f4:	f7f9 f840 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd4f8:	9b04      	ldr	r3, [sp, #16]
   bd4fa:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bd4fe:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd500:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bd504:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd506:	462a      	mov	r2, r5
   bd508:	4633      	mov	r3, r6
   bd50a:	4621      	mov	r1, r4
   bd50c:	a814      	add	r0, sp, #80	; 0x50
   bd50e:	f7f9 f833 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd512:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bd514:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd516:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bd518:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd51a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd51e:	ee18 2a90 	vmov	r2, s17
   bd522:	ee18 1a10 	vmov	r1, s16
   bd526:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd52a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd52c:	f7f8 ffda 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd530:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd532:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd534:	ee19 1a10 	vmov	r1, s18
   bd538:	465a      	mov	r2, fp
   bd53a:	4618      	mov	r0, r3
   bd53c:	f7f8 ffd2 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bd540:	f8cd 8000 	str.w	r8, [sp]
  return lhs >= rhs;
   bd544:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd546:	4633      	mov	r3, r6
   bd548:	462a      	mov	r2, r5
   bd54a:	4621      	mov	r1, r4
   bd54c:	4638      	mov	r0, r7
  return lhs >= rhs;
   bd54e:	bfb4      	ite	lt
   bd550:	f04f 0900 	movlt.w	r9, #0
   bd554:	f04f 0901 	movge.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd558:	f7f8 ff65 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bd55c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd55e:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd562:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd566:	e7b9      	b.n	bd4dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd568:	3601      	adds	r6, #1
   bd56a:	e7af      	b.n	bd4cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd56c:	3501      	adds	r5, #1
   bd56e:	e7a5      	b.n	bd4bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd570:	3401      	adds	r4, #1
   bd572:	e79c      	b.n	bd4ae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bd574:	a807      	add	r0, sp, #28
   bd576:	f7f8 fee4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bd57a:	b01d      	add	sp, #116	; 0x74
   bd57c:	ecbd 8b04 	vpop	{d8-d9}
   bd580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd584 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bd584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd588:	ed2d 8b04 	vpush	{d8-d9}
   bd58c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd58e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bd590:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd592:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bd594:	9204      	str	r2, [sp, #16]
   bd596:	4604      	mov	r4, r0
   bd598:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bd59a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd59c:	dd01      	ble.n	bd5a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bd59e:	f007 f92d 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd5a2:	6833      	ldr	r3, [r6, #0]
   bd5a4:	2b04      	cmp	r3, #4
   bd5a6:	dcfa      	bgt.n	bd59e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd5a8:	6813      	ldr	r3, [r2, #0]
   bd5aa:	2b04      	cmp	r3, #4
   bd5ac:	dcf7      	bgt.n	bd59e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bd5ae:	2301      	movs	r3, #1
   bd5b0:	2104      	movs	r1, #4
   bd5b2:	a807      	add	r0, sp, #28
   bd5b4:	f7f8 ff0a 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd5b8:	ab14      	add	r3, sp, #80	; 0x50
   bd5ba:	aa0c      	add	r2, sp, #48	; 0x30
   bd5bc:	4631      	mov	r1, r6
   bd5be:	4628      	mov	r0, r5
   bd5c0:	f7f9 fa0c 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bd5c4:	e9d4 a300 	ldrd	sl, r3, [r4]
   bd5c8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd5ca:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bd5cc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd5d0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bd5d4:	68e3      	ldr	r3, [r4, #12]
   bd5d6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bd5da:	6923      	ldr	r3, [r4, #16]
   bd5dc:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bd5de:	6963      	ldr	r3, [r4, #20]
   bd5e0:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd5e4:	2400      	movs	r4, #0
   bd5e6:	2100      	movs	r1, #0
   bd5e8:	a807      	add	r0, sp, #28
   bd5ea:	f7f8 feb5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd5ee:	42a0      	cmp	r0, r4
   bd5f0:	dd5c      	ble.n	bd6ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd5f2:	2500      	movs	r5, #0
   bd5f4:	af07      	add	r7, sp, #28
   bd5f6:	2101      	movs	r1, #1
   bd5f8:	4638      	mov	r0, r7
   bd5fa:	f7f8 fead 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd5fe:	42a8      	cmp	r0, r5
   bd600:	dd52      	ble.n	bd6a8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd602:	2600      	movs	r6, #0
   bd604:	2102      	movs	r1, #2
   bd606:	4638      	mov	r0, r7
   bd608:	f7f8 fea6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd60c:	42b0      	cmp	r0, r6
   bd60e:	dd49      	ble.n	bd6a4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd610:	f04f 0800 	mov.w	r8, #0
   bd614:	2103      	movs	r1, #3
   bd616:	4638      	mov	r0, r7
   bd618:	f7f8 fe9e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd61c:	4540      	cmp	r0, r8
   bd61e:	dd3f      	ble.n	bd6a0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bd620:	f8cd 8000 	str.w	r8, [sp]
   bd624:	4633      	mov	r3, r6
   bd626:	462a      	mov	r2, r5
   bd628:	4621      	mov	r1, r4
   bd62a:	a80c      	add	r0, sp, #48	; 0x30
   bd62c:	f7f8 ffa4 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd630:	9b04      	ldr	r3, [sp, #16]
   bd632:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bd636:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd638:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bd63c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd63e:	462a      	mov	r2, r5
   bd640:	4633      	mov	r3, r6
   bd642:	4621      	mov	r1, r4
   bd644:	a814      	add	r0, sp, #80	; 0x50
   bd646:	f7f8 ff97 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd64a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bd64c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd64e:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bd650:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd652:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd656:	ee18 2a90 	vmov	r2, s17
   bd65a:	ee18 1a10 	vmov	r1, s16
   bd65e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd662:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd664:	f7f8 ff3e 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd668:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd66a:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd66c:	ee19 1a10 	vmov	r1, s18
   bd670:	465a      	mov	r2, fp
   bd672:	4618      	mov	r0, r3
   bd674:	f7f8 ff36 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bd678:	f8cd 8000 	str.w	r8, [sp]
  return lhs >= rhs;
   bd67c:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd67e:	4633      	mov	r3, r6
   bd680:	462a      	mov	r2, r5
   bd682:	4621      	mov	r1, r4
   bd684:	4638      	mov	r0, r7
  return lhs >= rhs;
   bd686:	bfb4      	ite	lt
   bd688:	f04f 0900 	movlt.w	r9, #0
   bd68c:	f04f 0901 	movge.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd690:	f7f8 fec9 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bd694:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd696:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd69a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd69e:	e7b9      	b.n	bd614 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd6a0:	3601      	adds	r6, #1
   bd6a2:	e7af      	b.n	bd604 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd6a4:	3501      	adds	r5, #1
   bd6a6:	e7a5      	b.n	bd5f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd6a8:	3401      	adds	r4, #1
   bd6aa:	e79c      	b.n	bd5e6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bd6ac:	a807      	add	r0, sp, #28
   bd6ae:	f7f8 fe48 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bd6b2:	b01d      	add	sp, #116	; 0x74
   bd6b4:	ecbd 8b04 	vpop	{d8-d9}
   bd6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd6bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   bd6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd6c0:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd6c4:	680a      	ldr	r2, [r1, #0]
   bd6c6:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bd6ca:	6895      	ldr	r5, [r2, #8]
   bd6cc:	4680      	mov	r8, r0
   bd6ce:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd6d0:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd6d2:	2338      	movs	r3, #56	; 0x38
   bd6d4:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd6d8:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd6da:	fb03 a505 	mla	r5, r3, r5, sl
   bd6de:	eb0a 0609 	add.w	r6, sl, r9
   bd6e2:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bd6e4:	4629      	mov	r1, r5
   bd6e6:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd6e8:	fb03 a404 	mla	r4, r3, r4, sl
   bd6ec:	f7f7 fd56 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bd6f0:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bd6f4:	f080 0001 	eor.w	r0, r0, #1
   bd6f8:	1e53      	subs	r3, r2, #1
   bd6fa:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bd6fc:	2b08      	cmp	r3, #8
   bd6fe:	f200 8377 	bhi.w	bddf0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x734>
   bd702:	e8df f013 	tbh	[pc, r3, lsl #1]
   bd706:	0009      	.short	0x0009
   bd708:	024d00cc 	.word	0x024d00cc
   bd70c:	03750186 	.word	0x03750186
   bd710:	03750375 	.word	0x03750375
   bd714:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   bd718:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd71c:	4631      	mov	r1, r6
   bd71e:	2f00      	cmp	r7, #0
   bd720:	f000 808f 	beq.w	bd842 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x186>
   bd724:	a80c      	add	r0, sp, #48	; 0x30
   bd726:	f7f9 f8b0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd72a:	6873      	ldr	r3, [r6, #4]
   bd72c:	9305      	str	r3, [sp, #20]
   bd72e:	4629      	mov	r1, r5
   bd730:	a811      	add	r0, sp, #68	; 0x44
   bd732:	f7f9 f8aa 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd736:	b105      	cbz	r5, bd73a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bd738:	686d      	ldr	r5, [r5, #4]
   bd73a:	4621      	mov	r1, r4
   bd73c:	a816      	add	r0, sp, #88	; 0x58
   bd73e:	f7f9 f8a4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd742:	b104      	cbz	r4, bd746 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bd744:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bd748:	2b04      	cmp	r3, #4
   bd74a:	dd01      	ble.n	bd750 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bd74c:	f007 f856 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd750:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bd752:	2b04      	cmp	r3, #4
   bd754:	dcfa      	bgt.n	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd756:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bd758:	2b04      	cmp	r3, #4
   bd75a:	dcf7      	bgt.n	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd75c:	2301      	movs	r3, #1
   bd75e:	aa16      	add	r2, sp, #88	; 0x58
   bd760:	2104      	movs	r1, #4
   bd762:	a839      	add	r0, sp, #228	; 0xe4
   bd764:	f7f8 fe32 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd768:	ab46      	add	r3, sp, #280	; 0x118
   bd76a:	4642      	mov	r2, r8
   bd76c:	a911      	add	r1, sp, #68	; 0x44
   bd76e:	a80c      	add	r0, sp, #48	; 0x30
   bd770:	f7f9 f934 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd774:	2600      	movs	r6, #0
   bd776:	2100      	movs	r1, #0
   bd778:	a839      	add	r0, sp, #228	; 0xe4
   bd77a:	f7f8 fded 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd77e:	42b0      	cmp	r0, r6
   bd780:	dd4d      	ble.n	bd81e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd782:	2700      	movs	r7, #0
   bd784:	2101      	movs	r1, #1
   bd786:	a839      	add	r0, sp, #228	; 0xe4
   bd788:	f7f8 fde6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd78c:	42b8      	cmp	r0, r7
   bd78e:	dd44      	ble.n	bd81a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd790:	f04f 0b00 	mov.w	fp, #0
   bd794:	2102      	movs	r1, #2
   bd796:	a839      	add	r0, sp, #228	; 0xe4
   bd798:	f7f8 fdde 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd79c:	4558      	cmp	r0, fp
   bd79e:	dd3a      	ble.n	bd816 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd7a0:	f04f 0900 	mov.w	r9, #0
   bd7a4:	2103      	movs	r1, #3
   bd7a6:	a839      	add	r0, sp, #228	; 0xe4
   bd7a8:	f7f8 fdd6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd7ac:	4548      	cmp	r0, r9
   bd7ae:	dd2f      	ble.n	bd810 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd7b0:	f8cd 9000 	str.w	r9, [sp]
   bd7b4:	465b      	mov	r3, fp
   bd7b6:	463a      	mov	r2, r7
   bd7b8:	4631      	mov	r1, r6
   bd7ba:	4640      	mov	r0, r8
   bd7bc:	f7f8 fedc 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd7c0:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd7c4:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd7c6:	465b      	mov	r3, fp
   bd7c8:	463a      	mov	r2, r7
   bd7ca:	4631      	mov	r1, r6
   bd7cc:	a846      	add	r0, sp, #280	; 0x118
   bd7ce:	f7f8 fed3 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd7d2:	9b05      	ldr	r3, [sp, #20]
   bd7d4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bd7d8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs >= rhs;
   bd7dc:	ed9a 7a00 	vldr	s14, [sl]
   bd7e0:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd7e4:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bd7e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bd7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bd7f0:	465b      	mov	r3, fp
   bd7f2:	463a      	mov	r2, r7
   bd7f4:	4631      	mov	r1, r6
   bd7f6:	a839      	add	r0, sp, #228	; 0xe4
  return lhs >= rhs;
   bd7f8:	bfac      	ite	ge
   bd7fa:	f04f 0a01 	movge.w	sl, #1
   bd7fe:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd802:	f7f8 fe10 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd806:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd80a:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd80e:	e7c9      	b.n	bd7a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd810:	f10b 0b01 	add.w	fp, fp, #1
   bd814:	e7be      	b.n	bd794 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd816:	3701      	adds	r7, #1
   bd818:	e7b4      	b.n	bd784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd81a:	3601      	adds	r6, #1
   bd81c:	e7ab      	b.n	bd776 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bd81e:	a839      	add	r0, sp, #228	; 0xe4
   bd820:	f7f8 fd8f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd824:	a816      	add	r0, sp, #88	; 0x58
   bd826:	f7f8 fd8c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd82a:	a811      	add	r0, sp, #68	; 0x44
   bd82c:	f7f8 fd89 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd830:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   bd832:	f7f8 fd86 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bd836:	2000      	movs	r0, #0
}
   bd838:	b04f      	add	sp, #316	; 0x13c
   bd83a:	ecbd 8b02 	vpop	{d8}
   bd83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   bd842:	a839      	add	r0, sp, #228	; 0xe4
   bd844:	f7f9 f821 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd848:	4629      	mov	r1, r5
   bd84a:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd84c:	6876      	ldr	r6, [r6, #4]
   bd84e:	f7f9 f81c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd852:	b105      	cbz	r5, bd856 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bd854:	686d      	ldr	r5, [r5, #4]
   bd856:	4621      	mov	r1, r4
   bd858:	a846      	add	r0, sp, #280	; 0x118
   bd85a:	f7f9 f816 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd85e:	b104      	cbz	r4, bd862 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bd860:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd862:	aa46      	add	r2, sp, #280	; 0x118
   bd864:	4641      	mov	r1, r8
   bd866:	a839      	add	r0, sp, #228	; 0xe4
   bd868:	f7f8 fdff 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd86c:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd86e:	17c7      	asrs	r7, r0, #31
   bd870:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bd872:	4619      	mov	r1, r3
   bd874:	4283      	cmp	r3, r0
   bd876:	eb71 0607 	sbcs.w	r6, r1, r7
   bd87a:	f280 80c2 	bge.w	bda02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bd87e:	ecb2 7a01 	vldmia	r2!, {s14}
   bd882:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs >= rhs;
   bd886:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bd88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd88e:	bfac      	ite	ge
   bd890:	2601      	movge	r6, #1
   bd892:	2600      	movlt	r6, #0
   bd894:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd896:	3301      	adds	r3, #1
   bd898:	f141 0100 	adc.w	r1, r1, #0
   bd89c:	e7ea      	b.n	bd874 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
   bd89e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd8a2:	4631      	mov	r1, r6
   bd8a4:	2f00      	cmp	r7, #0
   bd8a6:	f000 8082 	beq.w	bd9ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bd8aa:	a81b      	add	r0, sp, #108	; 0x6c
   bd8ac:	f7f8 ffed 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd8b0:	6873      	ldr	r3, [r6, #4]
   bd8b2:	9305      	str	r3, [sp, #20]
   bd8b4:	4629      	mov	r1, r5
   bd8b6:	a820      	add	r0, sp, #128	; 0x80
   bd8b8:	f7f8 ffe7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd8bc:	b105      	cbz	r5, bd8c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   bd8be:	686d      	ldr	r5, [r5, #4]
   bd8c0:	4621      	mov	r1, r4
   bd8c2:	a825      	add	r0, sp, #148	; 0x94
   bd8c4:	f7f8 ffe1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd8c8:	b104      	cbz	r4, bd8cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x210>
   bd8ca:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd8cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bd8ce:	2b04      	cmp	r3, #4
   bd8d0:	f73f af3c 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd8d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd8d6:	2b04      	cmp	r3, #4
   bd8d8:	f73f af38 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd8dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd8de:	2b04      	cmp	r3, #4
   bd8e0:	f73f af34 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd8e4:	2301      	movs	r3, #1
   bd8e6:	aa25      	add	r2, sp, #148	; 0x94
   bd8e8:	2104      	movs	r1, #4
   bd8ea:	a839      	add	r0, sp, #228	; 0xe4
   bd8ec:	f7f8 fd6e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd8f0:	ab46      	add	r3, sp, #280	; 0x118
   bd8f2:	4642      	mov	r2, r8
   bd8f4:	a920      	add	r1, sp, #128	; 0x80
   bd8f6:	a81b      	add	r0, sp, #108	; 0x6c
   bd8f8:	f7f9 f870 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd8fc:	2600      	movs	r6, #0
   bd8fe:	2100      	movs	r1, #0
   bd900:	a839      	add	r0, sp, #228	; 0xe4
   bd902:	f7f8 fd29 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd906:	42b0      	cmp	r0, r6
   bd908:	dd46      	ble.n	bd998 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd90a:	2700      	movs	r7, #0
   bd90c:	2101      	movs	r1, #1
   bd90e:	a839      	add	r0, sp, #228	; 0xe4
   bd910:	f7f8 fd22 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd914:	42b8      	cmp	r0, r7
   bd916:	dd3d      	ble.n	bd994 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd918:	f04f 0b00 	mov.w	fp, #0
   bd91c:	2102      	movs	r1, #2
   bd91e:	a839      	add	r0, sp, #228	; 0xe4
   bd920:	f7f8 fd1a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd924:	4558      	cmp	r0, fp
   bd926:	dd33      	ble.n	bd990 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd928:	f04f 0900 	mov.w	r9, #0
   bd92c:	2103      	movs	r1, #3
   bd92e:	a839      	add	r0, sp, #228	; 0xe4
   bd930:	f7f8 fd12 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd934:	4548      	cmp	r0, r9
   bd936:	dd28      	ble.n	bd98a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd938:	f8cd 9000 	str.w	r9, [sp]
   bd93c:	465b      	mov	r3, fp
   bd93e:	463a      	mov	r2, r7
   bd940:	4631      	mov	r1, r6
   bd942:	4640      	mov	r0, r8
   bd944:	f7f8 fe18 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd948:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd94c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd94e:	465b      	mov	r3, fp
   bd950:	463a      	mov	r2, r7
   bd952:	4631      	mov	r1, r6
   bd954:	a846      	add	r0, sp, #280	; 0x118
   bd956:	f7f8 fe0f 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs >= rhs;
   bd95a:	9b05      	ldr	r3, [sp, #20]
   bd95c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bd960:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd964:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bd968:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bd96a:	465b      	mov	r3, fp
   bd96c:	463a      	mov	r2, r7
   bd96e:	4631      	mov	r1, r6
   bd970:	a839      	add	r0, sp, #228	; 0xe4
  return lhs >= rhs;
   bd972:	bfb4      	ite	lt
   bd974:	f04f 0a00 	movlt.w	sl, #0
   bd978:	f04f 0a01 	movge.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd97c:	f7f8 fd53 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd980:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd984:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd988:	e7d0      	b.n	bd92c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd98a:	f10b 0b01 	add.w	fp, fp, #1
   bd98e:	e7c5      	b.n	bd91c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd990:	3701      	adds	r7, #1
   bd992:	e7bb      	b.n	bd90c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd994:	3601      	adds	r6, #1
   bd996:	e7b2      	b.n	bd8fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bd998:	a839      	add	r0, sp, #228	; 0xe4
   bd99a:	f7f8 fcd2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd99e:	a825      	add	r0, sp, #148	; 0x94
   bd9a0:	f7f8 fccf 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd9a4:	a820      	add	r0, sp, #128	; 0x80
   bd9a6:	f7f8 fccc 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bd9aa:	a81b      	add	r0, sp, #108	; 0x6c
   bd9ac:	e741      	b.n	bd832 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd9ae:	a839      	add	r0, sp, #228	; 0xe4
   bd9b0:	f7f8 ff6b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd9b4:	4629      	mov	r1, r5
   bd9b6:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd9b8:	6876      	ldr	r6, [r6, #4]
   bd9ba:	f7f8 ff66 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd9be:	b105      	cbz	r5, bd9c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bd9c0:	686d      	ldr	r5, [r5, #4]
   bd9c2:	4621      	mov	r1, r4
   bd9c4:	a846      	add	r0, sp, #280	; 0x118
   bd9c6:	f7f8 ff60 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd9ca:	b104      	cbz	r4, bd9ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bd9cc:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd9ce:	aa46      	add	r2, sp, #280	; 0x118
   bd9d0:	4641      	mov	r1, r8
   bd9d2:	a839      	add	r0, sp, #228	; 0xe4
   bd9d4:	f7f8 fd49 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd9d8:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd9da:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd9de:	461f      	mov	r7, r3
   bd9e0:	4283      	cmp	r3, r0
   bd9e2:	eb77 020c 	sbcs.w	r2, r7, ip
   bd9e6:	da0c      	bge.n	bda02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs >= rhs;
   bd9e8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bd9ec:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bd9f0:	428a      	cmp	r2, r1
   bd9f2:	bfb4      	ite	lt
   bd9f4:	2200      	movlt	r2, #0
   bd9f6:	2201      	movge	r2, #1
   bd9f8:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd9fa:	3301      	adds	r3, #1
   bd9fc:	f147 0700 	adc.w	r7, r7, #0
   bda00:	e7ee      	b.n	bd9e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bda02:	a846      	add	r0, sp, #280	; 0x118
   bda04:	f7f8 fc9d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bda08:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
   bda0a:	f7f8 fc9a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bda0e:	a839      	add	r0, sp, #228	; 0xe4
   bda10:	e70f      	b.n	bd832 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bda12:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bda16:	4631      	mov	r1, r6
   bda18:	2f00      	cmp	r7, #0
   bda1a:	f000 808c 	beq.w	bdb36 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bda1e:	a82a      	add	r0, sp, #168	; 0xa8
   bda20:	f7f8 ff33 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bda24:	4629      	mov	r1, r5
   bda26:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bda28:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bda2c:	f7f8 ff2d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bda30:	b105      	cbz	r5, bda34 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x378>
   bda32:	686d      	ldr	r5, [r5, #4]
   bda34:	4621      	mov	r1, r4
   bda36:	a834      	add	r0, sp, #208	; 0xd0
   bda38:	f7f8 ff27 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bda3c:	b104      	cbz	r4, bda40 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bda3e:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bda40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bda42:	2b04      	cmp	r3, #4
   bda44:	f73f ae82 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bda48:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bda4a:	2b04      	cmp	r3, #4
   bda4c:	f73f ae7e 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bda50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bda52:	2b04      	cmp	r3, #4
   bda54:	f73f ae7a 	bgt.w	bd74c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bda58:	2301      	movs	r3, #1
   bda5a:	aa34      	add	r2, sp, #208	; 0xd0
   bda5c:	2104      	movs	r1, #4
   bda5e:	a839      	add	r0, sp, #228	; 0xe4
   bda60:	f7f8 fcb4 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bda64:	ab46      	add	r3, sp, #280	; 0x118
   bda66:	4642      	mov	r2, r8
   bda68:	a92f      	add	r1, sp, #188	; 0xbc
   bda6a:	a82a      	add	r0, sp, #168	; 0xa8
   bda6c:	f7f8 ffb6 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bda70:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bda74:	2700      	movs	r7, #0
   bda76:	2100      	movs	r1, #0
   bda78:	a839      	add	r0, sp, #228	; 0xe4
   bda7a:	f7f8 fc6d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bda7e:	42b8      	cmp	r0, r7
   bda80:	dd4e      	ble.n	bdb20 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bda82:	f04f 0800 	mov.w	r8, #0
   bda86:	2101      	movs	r1, #1
   bda88:	a839      	add	r0, sp, #228	; 0xe4
   bda8a:	f7f8 fc65 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bda8e:	4540      	cmp	r0, r8
   bda90:	dd44      	ble.n	bdb1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bda92:	2600      	movs	r6, #0
   bda94:	2102      	movs	r1, #2
   bda96:	a839      	add	r0, sp, #228	; 0xe4
   bda98:	f7f8 fc5e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bda9c:	42b0      	cmp	r0, r6
   bda9e:	dd3a      	ble.n	bdb16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdaa0:	f04f 0900 	mov.w	r9, #0
   bdaa4:	2103      	movs	r1, #3
   bdaa6:	a839      	add	r0, sp, #228	; 0xe4
   bdaa8:	f7f8 fc56 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdaac:	4548      	cmp	r0, r9
   bdaae:	dd30      	ble.n	bdb12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdab0:	f8cd 9000 	str.w	r9, [sp]
   bdab4:	4633      	mov	r3, r6
   bdab6:	4642      	mov	r2, r8
   bdab8:	4639      	mov	r1, r7
   bdaba:	ee18 0a10 	vmov	r0, s16
   bdabe:	f7f8 fd5b 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bdac2:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdac6:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bdac8:	4633      	mov	r3, r6
   bdaca:	4642      	mov	r2, r8
   bdacc:	4639      	mov	r1, r7
   bdace:	a846      	add	r0, sp, #280	; 0x118
   bdad0:	f7f8 fd52 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdad4:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bdad8:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs >= rhs;
   bdadc:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bdae0:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bdae4:	6849      	ldr	r1, [r1, #4]
   bdae6:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bdae8:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bdaec:	4283      	cmp	r3, r0
   bdaee:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bdaf2:	a839      	add	r0, sp, #228	; 0xe4
   bdaf4:	4633      	mov	r3, r6
   bdaf6:	4642      	mov	r2, r8
   bdaf8:	4639      	mov	r1, r7
  return lhs >= rhs;
   bdafa:	bfac      	ite	ge
   bdafc:	f04f 0a01 	movge.w	sl, #1
   bdb00:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb04:	f7f8 fc8f 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdb08:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb0c:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdb10:	e7c8      	b.n	bdaa4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdb12:	3601      	adds	r6, #1
   bdb14:	e7be      	b.n	bda94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdb16:	f108 0801 	add.w	r8, r8, #1
   bdb1a:	e7b4      	b.n	bda86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdb1c:	3701      	adds	r7, #1
   bdb1e:	e7aa      	b.n	bda76 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bdb20:	a839      	add	r0, sp, #228	; 0xe4
   bdb22:	f7f8 fc0e 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdb26:	a834      	add	r0, sp, #208	; 0xd0
   bdb28:	f7f8 fc0b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdb2c:	a82f      	add	r0, sp, #188	; 0xbc
   bdb2e:	f7f8 fc08 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdb32:	a82a      	add	r0, sp, #168	; 0xa8
   bdb34:	e67d      	b.n	bd832 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bdb36:	a839      	add	r0, sp, #228	; 0xe4
   bdb38:	f7f8 fea7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdb3c:	4629      	mov	r1, r5
   bdb3e:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdb40:	6877      	ldr	r7, [r6, #4]
   bdb42:	f7f8 fea2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdb46:	b105      	cbz	r5, bdb4a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   bdb48:	686d      	ldr	r5, [r5, #4]
   bdb4a:	4621      	mov	r1, r4
   bdb4c:	a846      	add	r0, sp, #280	; 0x118
   bdb4e:	f7f8 fe9c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdb52:	b104      	cbz	r4, bdb56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   bdb54:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdb56:	aa46      	add	r2, sp, #280	; 0x118
   bdb58:	4641      	mov	r1, r8
   bdb5a:	a839      	add	r0, sp, #228	; 0xe4
   bdb5c:	f7f8 fc85 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bdb60:	2300      	movs	r3, #0
  const int64_t flatsize =
   bdb62:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bdb66:	f1a7 0208 	sub.w	r2, r7, #8
   bdb6a:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bdb6c:	4619      	mov	r1, r3
   bdb6e:	4283      	cmp	r3, r0
   bdb70:	eb71 060e 	sbcs.w	r6, r1, lr
   bdb74:	da0f      	bge.n	bdb96 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs >= rhs;
   bdb76:	f852 7f08 	ldr.w	r7, [r2, #8]!
   bdb7a:	f855 6f08 	ldr.w	r6, [r5, #8]!
   bdb7e:	42b7      	cmp	r7, r6
   bdb80:	6856      	ldr	r6, [r2, #4]
   bdb82:	686f      	ldr	r7, [r5, #4]
   bdb84:	41be      	sbcs	r6, r7
   bdb86:	bfac      	ite	ge
   bdb88:	2601      	movge	r6, #1
   bdb8a:	2600      	movlt	r6, #0
   bdb8c:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bdb8e:	3301      	adds	r3, #1
   bdb90:	f141 0100 	adc.w	r1, r1, #0
   bdb94:	e7eb      	b.n	bdb6e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bdb96:	a846      	add	r0, sp, #280	; 0x118
   bdb98:	f7f8 fbd3 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdb9c:	a83e      	add	r0, sp, #248	; 0xf8
   bdb9e:	e734      	b.n	bda0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   bdba0:	6933      	ldr	r3, [r6, #16]
   bdba2:	68f0      	ldr	r0, [r6, #12]
   bdba4:	f1c3 0900 	rsb	r9, r3, #0
   bdba8:	692b      	ldr	r3, [r5, #16]
   bdbaa:	f1c3 0800 	rsb	r8, r3, #0
   bdbae:	f7f6 fb9b 	bl	b42e8 <__aeabi_f2d>
   bdbb2:	ec41 0b10 	vmov	d0, r0, r1
   bdbb6:	a925      	add	r1, sp, #148	; 0x94
   bdbb8:	a820      	add	r0, sp, #128	; 0x80
   bdbba:	f7f7 fb57 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdbbe:	68e8      	ldr	r0, [r5, #12]
   bdbc0:	f7f6 fb92 	bl	b42e8 <__aeabi_f2d>
   bdbc4:	ec41 0b10 	vmov	d0, r0, r1
   bdbc8:	a92f      	add	r1, sp, #188	; 0xbc
   bdbca:	a82a      	add	r0, sp, #168	; 0xa8
   bdbcc:	f7f7 fb4e 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdbd0:	2308      	movs	r3, #8
   bdbd2:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bdbd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bdbd8:	9348      	str	r3, [sp, #288]	; 0x120
   bdbda:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bdbdc:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bdbe0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bdbe2:	934b      	str	r3, [sp, #300]	; 0x12c
   bdbe4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bdbe6:	934c      	str	r3, [sp, #304]	; 0x130
   bdbe8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bdbec:	4631      	mov	r1, r6
   bdbee:	a834      	add	r0, sp, #208	; 0xd0
   bdbf0:	b1ff      	cbz	r7, bdc32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x576>
   bdbf2:	f7f8 fe4a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdbf6:	6872      	ldr	r2, [r6, #4]
   bdbf8:	9205      	str	r2, [sp, #20]
   bdbfa:	4629      	mov	r1, r5
   bdbfc:	a839      	add	r0, sp, #228	; 0xe4
   bdbfe:	f7f8 fe44 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdc02:	4621      	mov	r1, r4
   bdc04:	4640      	mov	r0, r8
   bdc06:	686d      	ldr	r5, [r5, #4]
   bdc08:	f7f8 fe3f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdc0c:	9a05      	ldr	r2, [sp, #20]
   bdc0e:	b104      	cbz	r4, bdc12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bdc10:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   bdc12:	9500      	str	r5, [sp, #0]
   bdc14:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bdc18:	ab39      	add	r3, sp, #228	; 0xe4
   bdc1a:	a934      	add	r1, sp, #208	; 0xd0
   bdc1c:	a846      	add	r0, sp, #280	; 0x118
   bdc1e:	f7ff fc15 	bl	bd44c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bdc22:	4640      	mov	r0, r8
   bdc24:	f7f8 fb8d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdc28:	a839      	add	r0, sp, #228	; 0xe4
   bdc2a:	f7f8 fb8a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bdc2e:	a834      	add	r0, sp, #208	; 0xd0
   bdc30:	e5ff      	b.n	bd832 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bdc32:	f7f8 fe2a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdc36:	6873      	ldr	r3, [r6, #4]
   bdc38:	9305      	str	r3, [sp, #20]
   bdc3a:	4629      	mov	r1, r5
   bdc3c:	a839      	add	r0, sp, #228	; 0xe4
   bdc3e:	f7f8 fe24 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdc42:	686b      	ldr	r3, [r5, #4]
   bdc44:	9306      	str	r3, [sp, #24]
   bdc46:	4621      	mov	r1, r4
   bdc48:	4640      	mov	r0, r8
   bdc4a:	f7f8 fe1e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdc4e:	b104      	cbz	r4, bdc52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x596>
   bdc50:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bdc52:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bdc56:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bdc58:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bdc5a:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bdc5c:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdc60:	aa3e      	add	r2, sp, #248	; 0xf8
   bdc62:	a939      	add	r1, sp, #228	; 0xe4
   bdc64:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bdc66:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdc6a:	f7f8 fbfe 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bdc6e:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bdc72:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bdc74:	2500      	movs	r5, #0
  const int64_t flatsize =
   bdc76:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdc78:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bdc7a:	462b      	mov	r3, r5
   bdc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bdc7e:	930b      	str	r3, [sp, #44]	; 0x2c
   bdc80:	4545      	cmp	r5, r8
   bdc82:	eb73 0202 	sbcs.w	r2, r3, r2
   bdc86:	f280 80b1 	bge.w	bddec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bdc8a:	9b06      	ldr	r3, [sp, #24]
   bdc8c:	5d5f      	ldrb	r7, [r3, r5]
   bdc8e:	9b08      	ldr	r3, [sp, #32]
   bdc90:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bdc92:	9b05      	ldr	r3, [sp, #20]
   bdc94:	5d58      	ldrb	r0, [r3, r5]
   bdc96:	9b07      	ldr	r3, [sp, #28]
   bdc98:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdc9a:	465a      	mov	r2, fp
   bdc9c:	4651      	mov	r1, sl
   bdc9e:	fa00 f009 	lsl.w	r0, r0, r9
   bdca2:	f7f8 fc1f 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bdca6:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdcaa:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdcac:	ee18 2a10 	vmov	r2, s16
   bdcb0:	4631      	mov	r1, r6
   bdcb2:	4638      	mov	r0, r7
   bdcb4:	f7f8 fc16 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs >= rhs;
   bdcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bdcba:	4283      	cmp	r3, r0
   bdcbc:	bfb4      	ite	lt
   bdcbe:	2000      	movlt	r0, #0
   bdcc0:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bdcc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs >= rhs;
   bdcc4:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bdcc6:	3501      	adds	r5, #1
   bdcc8:	f143 0300 	adc.w	r3, r3, #0
   bdccc:	e7d6      	b.n	bdc7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bdcce:	6933      	ldr	r3, [r6, #16]
   bdcd0:	68f0      	ldr	r0, [r6, #12]
   bdcd2:	f1c3 0900 	rsb	r9, r3, #0
   bdcd6:	692b      	ldr	r3, [r5, #16]
   bdcd8:	f1c3 0800 	rsb	r8, r3, #0
   bdcdc:	f7f6 fb04 	bl	b42e8 <__aeabi_f2d>
   bdce0:	ec41 0b10 	vmov	d0, r0, r1
   bdce4:	a925      	add	r1, sp, #148	; 0x94
   bdce6:	a820      	add	r0, sp, #128	; 0x80
   bdce8:	f7f7 fac0 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdcec:	68e8      	ldr	r0, [r5, #12]
   bdcee:	f7f6 fafb 	bl	b42e8 <__aeabi_f2d>
   bdcf2:	ec41 0b10 	vmov	d0, r0, r1
   bdcf6:	a92f      	add	r1, sp, #188	; 0xbc
   bdcf8:	a82a      	add	r0, sp, #168	; 0xa8
   bdcfa:	f7f7 fab7 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdcfe:	2308      	movs	r3, #8
   bdd00:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bdd04:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bdd06:	9348      	str	r3, [sp, #288]	; 0x120
   bdd08:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bdd0a:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bdd0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bdd10:	934b      	str	r3, [sp, #300]	; 0x12c
   bdd12:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bdd14:	934c      	str	r3, [sp, #304]	; 0x130
   bdd16:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bdd1a:	4631      	mov	r1, r6
   bdd1c:	a834      	add	r0, sp, #208	; 0xd0
   bdd1e:	b1c7      	cbz	r7, bdd52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bdd20:	f7f8 fdb3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdd24:	6872      	ldr	r2, [r6, #4]
   bdd26:	9205      	str	r2, [sp, #20]
   bdd28:	4629      	mov	r1, r5
   bdd2a:	a839      	add	r0, sp, #228	; 0xe4
   bdd2c:	f7f8 fdad 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdd30:	4621      	mov	r1, r4
   bdd32:	4640      	mov	r0, r8
   bdd34:	686d      	ldr	r5, [r5, #4]
   bdd36:	f7f8 fda8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdd3a:	9a05      	ldr	r2, [sp, #20]
   bdd3c:	b104      	cbz	r4, bdd40 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bdd3e:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   bdd40:	9500      	str	r5, [sp, #0]
   bdd42:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bdd46:	ab39      	add	r3, sp, #228	; 0xe4
   bdd48:	a934      	add	r1, sp, #208	; 0xd0
   bdd4a:	a846      	add	r0, sp, #280	; 0x118
   bdd4c:	f7ff fc1a 	bl	bd584 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bdd50:	e767      	b.n	bdc22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bdd52:	f7f8 fd9a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdd56:	6873      	ldr	r3, [r6, #4]
   bdd58:	9305      	str	r3, [sp, #20]
   bdd5a:	4629      	mov	r1, r5
   bdd5c:	a839      	add	r0, sp, #228	; 0xe4
   bdd5e:	f7f8 fd94 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdd62:	686b      	ldr	r3, [r5, #4]
   bdd64:	9306      	str	r3, [sp, #24]
   bdd66:	4621      	mov	r1, r4
   bdd68:	4640      	mov	r0, r8
   bdd6a:	f7f8 fd8e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdd6e:	b104      	cbz	r4, bdd72 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bdd70:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bdd72:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bdd76:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bdd78:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bdd7a:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bdd7c:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdd80:	aa3e      	add	r2, sp, #248	; 0xf8
   bdd82:	a939      	add	r1, sp, #228	; 0xe4
   bdd84:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bdd86:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdd8a:	f7f8 fb6e 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bdd8e:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bdd92:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bdd94:	2500      	movs	r5, #0
  const int64_t flatsize =
   bdd96:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdd98:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bdd9a:	462b      	mov	r3, r5
   bdd9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bdd9e:	930b      	str	r3, [sp, #44]	; 0x2c
   bdda0:	4545      	cmp	r5, r8
   bdda2:	eb73 0202 	sbcs.w	r2, r3, r2
   bdda6:	da21      	bge.n	bddec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bdda8:	9b06      	ldr	r3, [sp, #24]
   bddaa:	575f      	ldrsb	r7, [r3, r5]
   bddac:	9b08      	ldr	r3, [sp, #32]
   bddae:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bddb0:	9b05      	ldr	r3, [sp, #20]
   bddb2:	5758      	ldrsb	r0, [r3, r5]
   bddb4:	9b07      	ldr	r3, [sp, #28]
   bddb6:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bddb8:	465a      	mov	r2, fp
   bddba:	4651      	mov	r1, sl
   bddbc:	fa00 f009 	lsl.w	r0, r0, r9
   bddc0:	f7f8 fb90 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bddc4:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bddc8:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bddca:	ee18 2a10 	vmov	r2, s16
   bddce:	4631      	mov	r1, r6
   bddd0:	4638      	mov	r0, r7
   bddd2:	f7f8 fb87 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs >= rhs;
   bddd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bddd8:	4283      	cmp	r3, r0
   bddda:	bfb4      	ite	lt
   bdddc:	2000      	movlt	r0, #0
   bddde:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bdde0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs >= rhs;
   bdde2:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bdde4:	3501      	adds	r5, #1
   bdde6:	f143 0300 	adc.w	r3, r3, #0
   bddea:	e7d7      	b.n	bdd9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bddec:	a83e      	add	r0, sp, #248	; 0xf8
   bddee:	e719      	b.n	bdc24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bddf0:	4640      	mov	r0, r8
   bddf2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bddf6:	4902      	ldr	r1, [pc, #8]	; (bde00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bddf8:	4798      	blx	r3
      return kTfLiteError;
   bddfa:	2001      	movs	r0, #1
   bddfc:	e51c      	b.n	bd838 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bddfe:	bf00      	nop
   bde00:	000c89e7 	.word	0x000c89e7

000bde04 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bde04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bde08:	ed2d 8b04 	vpush	{d8-d9}
   bde0c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde0e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bde10:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde12:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bde14:	9204      	str	r2, [sp, #16]
   bde16:	4604      	mov	r4, r0
   bde18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bde1a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde1c:	dd01      	ble.n	bde22 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bde1e:	f006 fced 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bde22:	6833      	ldr	r3, [r6, #0]
   bde24:	2b04      	cmp	r3, #4
   bde26:	dcfa      	bgt.n	bde1e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bde28:	6813      	ldr	r3, [r2, #0]
   bde2a:	2b04      	cmp	r3, #4
   bde2c:	dcf7      	bgt.n	bde1e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bde2e:	2301      	movs	r3, #1
   bde30:	2104      	movs	r1, #4
   bde32:	a807      	add	r0, sp, #28
   bde34:	f7f8 faca 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bde38:	ab14      	add	r3, sp, #80	; 0x50
   bde3a:	aa0c      	add	r2, sp, #48	; 0x30
   bde3c:	4631      	mov	r1, r6
   bde3e:	4628      	mov	r0, r5
   bde40:	f7f8 fdcc 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bde44:	e9d4 a300 	ldrd	sl, r3, [r4]
   bde48:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bde4a:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bde4c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bde50:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bde54:	68e3      	ldr	r3, [r4, #12]
   bde56:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bde5a:	6923      	ldr	r3, [r4, #16]
   bde5c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bde5e:	6963      	ldr	r3, [r4, #20]
   bde60:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bde64:	2400      	movs	r4, #0
   bde66:	2100      	movs	r1, #0
   bde68:	a807      	add	r0, sp, #28
   bde6a:	f7f8 fa75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bde6e:	42a0      	cmp	r0, r4
   bde70:	dd5c      	ble.n	bdf2c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bde72:	2500      	movs	r5, #0
   bde74:	af07      	add	r7, sp, #28
   bde76:	2101      	movs	r1, #1
   bde78:	4638      	mov	r0, r7
   bde7a:	f7f8 fa6d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bde7e:	42a8      	cmp	r0, r5
   bde80:	dd52      	ble.n	bdf28 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bde82:	2600      	movs	r6, #0
   bde84:	2102      	movs	r1, #2
   bde86:	4638      	mov	r0, r7
   bde88:	f7f8 fa66 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bde8c:	42b0      	cmp	r0, r6
   bde8e:	dd49      	ble.n	bdf24 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bde90:	f04f 0800 	mov.w	r8, #0
   bde94:	2103      	movs	r1, #3
   bde96:	4638      	mov	r0, r7
   bde98:	f7f8 fa5e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bde9c:	4540      	cmp	r0, r8
   bde9e:	dd3f      	ble.n	bdf20 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bdea0:	f8cd 8000 	str.w	r8, [sp]
   bdea4:	4633      	mov	r3, r6
   bdea6:	462a      	mov	r2, r5
   bdea8:	4621      	mov	r1, r4
   bdeaa:	a80c      	add	r0, sp, #48	; 0x30
   bdeac:	f7f8 fb64 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bdeb0:	9b04      	ldr	r3, [sp, #16]
   bdeb2:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bdeb6:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdeb8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bdebc:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdebe:	462a      	mov	r2, r5
   bdec0:	4633      	mov	r3, r6
   bdec2:	4621      	mov	r1, r4
   bdec4:	a814      	add	r0, sp, #80	; 0x50
   bdec6:	f7f8 fb57 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bdeca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bdecc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdece:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bded0:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bded2:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bded6:	ee18 2a90 	vmov	r2, s17
   bdeda:	ee18 1a10 	vmov	r1, s16
   bdede:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bdee2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdee4:	f7f8 fafe 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdee8:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdeea:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdeec:	ee19 1a10 	vmov	r1, s18
   bdef0:	465a      	mov	r2, fp
   bdef2:	4618      	mov	r0, r3
   bdef4:	f7f8 faf6 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bdef8:	f8cd 8000 	str.w	r8, [sp]
  return lhs < rhs;
   bdefc:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bdefe:	4633      	mov	r3, r6
   bdf00:	462a      	mov	r2, r5
   bdf02:	4621      	mov	r1, r4
   bdf04:	4638      	mov	r0, r7
  return lhs < rhs;
   bdf06:	bfac      	ite	ge
   bdf08:	f04f 0900 	movge.w	r9, #0
   bdf0c:	f04f 0901 	movlt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf10:	f7f8 fa89 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bdf14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdf16:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf1a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdf1e:	e7b9      	b.n	bde94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdf20:	3601      	adds	r6, #1
   bdf22:	e7af      	b.n	bde84 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdf24:	3501      	adds	r5, #1
   bdf26:	e7a5      	b.n	bde74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdf28:	3401      	adds	r4, #1
   bdf2a:	e79c      	b.n	bde66 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bdf2c:	a807      	add	r0, sp, #28
   bdf2e:	f7f8 fa08 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bdf32:	b01d      	add	sp, #116	; 0x74
   bdf34:	ecbd 8b04 	vpop	{d8-d9}
   bdf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdf3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bdf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf40:	ed2d 8b04 	vpush	{d8-d9}
   bdf44:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdf46:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bdf48:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdf4a:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bdf4c:	9204      	str	r2, [sp, #16]
   bdf4e:	4604      	mov	r4, r0
   bdf50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bdf52:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdf54:	dd01      	ble.n	bdf5a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bdf56:	f006 fc51 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bdf5a:	6833      	ldr	r3, [r6, #0]
   bdf5c:	2b04      	cmp	r3, #4
   bdf5e:	dcfa      	bgt.n	bdf56 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bdf60:	6813      	ldr	r3, [r2, #0]
   bdf62:	2b04      	cmp	r3, #4
   bdf64:	dcf7      	bgt.n	bdf56 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bdf66:	2301      	movs	r3, #1
   bdf68:	2104      	movs	r1, #4
   bdf6a:	a807      	add	r0, sp, #28
   bdf6c:	f7f8 fa2e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bdf70:	ab14      	add	r3, sp, #80	; 0x50
   bdf72:	aa0c      	add	r2, sp, #48	; 0x30
   bdf74:	4631      	mov	r1, r6
   bdf76:	4628      	mov	r0, r5
   bdf78:	f7f8 fd30 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bdf7c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bdf80:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bdf82:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bdf84:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bdf88:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bdf8c:	68e3      	ldr	r3, [r4, #12]
   bdf8e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bdf92:	6923      	ldr	r3, [r4, #16]
   bdf94:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bdf96:	6963      	ldr	r3, [r4, #20]
   bdf98:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdf9c:	2400      	movs	r4, #0
   bdf9e:	2100      	movs	r1, #0
   bdfa0:	a807      	add	r0, sp, #28
   bdfa2:	f7f8 f9d9 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdfa6:	42a0      	cmp	r0, r4
   bdfa8:	dd5c      	ble.n	be064 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdfaa:	2500      	movs	r5, #0
   bdfac:	af07      	add	r7, sp, #28
   bdfae:	2101      	movs	r1, #1
   bdfb0:	4638      	mov	r0, r7
   bdfb2:	f7f8 f9d1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdfb6:	42a8      	cmp	r0, r5
   bdfb8:	dd52      	ble.n	be060 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdfba:	2600      	movs	r6, #0
   bdfbc:	2102      	movs	r1, #2
   bdfbe:	4638      	mov	r0, r7
   bdfc0:	f7f8 f9ca 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdfc4:	42b0      	cmp	r0, r6
   bdfc6:	dd49      	ble.n	be05c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdfc8:	f04f 0800 	mov.w	r8, #0
   bdfcc:	2103      	movs	r1, #3
   bdfce:	4638      	mov	r0, r7
   bdfd0:	f7f8 f9c2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdfd4:	4540      	cmp	r0, r8
   bdfd6:	dd3f      	ble.n	be058 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bdfd8:	f8cd 8000 	str.w	r8, [sp]
   bdfdc:	4633      	mov	r3, r6
   bdfde:	462a      	mov	r2, r5
   bdfe0:	4621      	mov	r1, r4
   bdfe2:	a80c      	add	r0, sp, #48	; 0x30
   bdfe4:	f7f8 fac8 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bdfe8:	9b04      	ldr	r3, [sp, #16]
   bdfea:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bdfee:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdff0:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bdff4:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdff6:	462a      	mov	r2, r5
   bdff8:	4633      	mov	r3, r6
   bdffa:	4621      	mov	r1, r4
   bdffc:	a814      	add	r0, sp, #80	; 0x50
   bdffe:	f7f8 fabb 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be002:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   be004:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be006:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   be008:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be00a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be00e:	ee18 2a90 	vmov	r2, s17
   be012:	ee18 1a10 	vmov	r1, s16
   be016:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be01a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be01c:	f7f8 fa62 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be020:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be022:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be024:	ee19 1a10 	vmov	r1, s18
   be028:	465a      	mov	r2, fp
   be02a:	4618      	mov	r0, r3
   be02c:	f7f8 fa5a 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   be030:	f8cd 8000 	str.w	r8, [sp]
  return lhs < rhs;
   be034:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   be036:	4633      	mov	r3, r6
   be038:	462a      	mov	r2, r5
   be03a:	4621      	mov	r1, r4
   be03c:	4638      	mov	r0, r7
  return lhs < rhs;
   be03e:	bfac      	ite	ge
   be040:	f04f 0900 	movge.w	r9, #0
   be044:	f04f 0901 	movlt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be048:	f7f8 f9ed 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   be04c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be04e:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be052:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be056:	e7b9      	b.n	bdfcc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be058:	3601      	adds	r6, #1
   be05a:	e7af      	b.n	bdfbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be05c:	3501      	adds	r5, #1
   be05e:	e7a5      	b.n	bdfac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be060:	3401      	adds	r4, #1
   be062:	e79c      	b.n	bdf9e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   be064:	a807      	add	r0, sp, #28
   be066:	f7f8 f96c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   be06a:	b01d      	add	sp, #116	; 0x74
   be06c:	ecbd 8b04 	vpop	{d8-d9}
   be070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be074 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   be074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be078:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be07c:	680a      	ldr	r2, [r1, #0]
   be07e:	f8d0 a008 	ldr.w	sl, [r0, #8]
   be082:	6895      	ldr	r5, [r2, #8]
   be084:	4680      	mov	r8, r0
   be086:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be088:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be08a:	2338      	movs	r3, #56	; 0x38
   be08c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be090:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be092:	fb03 a505 	mla	r5, r3, r5, sl
   be096:	eb0a 0609 	add.w	r6, sl, r9
   be09a:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   be09c:	4629      	mov	r1, r5
   be09e:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be0a0:	fb03 a404 	mla	r4, r3, r4, sl
   be0a4:	f7f7 f87a 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   be0a8:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   be0ac:	f080 0001 	eor.w	r0, r0, #1
   be0b0:	1e53      	subs	r3, r2, #1
   be0b2:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   be0b4:	2b08      	cmp	r3, #8
   be0b6:	f200 8377 	bhi.w	be7a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x734>
   be0ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   be0be:	0009      	.short	0x0009
   be0c0:	024d00cc 	.word	0x024d00cc
   be0c4:	03750186 	.word	0x03750186
   be0c8:	03750375 	.word	0x03750375
   be0cc:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   be0d0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be0d4:	4631      	mov	r1, r6
   be0d6:	2f00      	cmp	r7, #0
   be0d8:	f000 808f 	beq.w	be1fa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x186>
   be0dc:	a80c      	add	r0, sp, #48	; 0x30
   be0de:	f7f8 fbd4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be0e2:	6873      	ldr	r3, [r6, #4]
   be0e4:	9305      	str	r3, [sp, #20]
   be0e6:	4629      	mov	r1, r5
   be0e8:	a811      	add	r0, sp, #68	; 0x44
   be0ea:	f7f8 fbce 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be0ee:	b105      	cbz	r5, be0f2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   be0f0:	686d      	ldr	r5, [r5, #4]
   be0f2:	4621      	mov	r1, r4
   be0f4:	a816      	add	r0, sp, #88	; 0x58
   be0f6:	f7f8 fbc8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be0fa:	b104      	cbz	r4, be0fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   be0fc:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be100:	2b04      	cmp	r3, #4
   be102:	dd01      	ble.n	be108 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x94>
   be104:	f006 fb7a 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be108:	9b11      	ldr	r3, [sp, #68]	; 0x44
   be10a:	2b04      	cmp	r3, #4
   be10c:	dcfa      	bgt.n	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be10e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   be110:	2b04      	cmp	r3, #4
   be112:	dcf7      	bgt.n	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be114:	2301      	movs	r3, #1
   be116:	aa16      	add	r2, sp, #88	; 0x58
   be118:	2104      	movs	r1, #4
   be11a:	a839      	add	r0, sp, #228	; 0xe4
   be11c:	f7f8 f956 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be120:	ab46      	add	r3, sp, #280	; 0x118
   be122:	4642      	mov	r2, r8
   be124:	a911      	add	r1, sp, #68	; 0x44
   be126:	a80c      	add	r0, sp, #48	; 0x30
   be128:	f7f8 fc58 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be12c:	2600      	movs	r6, #0
   be12e:	2100      	movs	r1, #0
   be130:	a839      	add	r0, sp, #228	; 0xe4
   be132:	f7f8 f911 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be136:	42b0      	cmp	r0, r6
   be138:	dd4d      	ble.n	be1d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be13a:	2700      	movs	r7, #0
   be13c:	2101      	movs	r1, #1
   be13e:	a839      	add	r0, sp, #228	; 0xe4
   be140:	f7f8 f90a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be144:	42b8      	cmp	r0, r7
   be146:	dd44      	ble.n	be1d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be148:	f04f 0b00 	mov.w	fp, #0
   be14c:	2102      	movs	r1, #2
   be14e:	a839      	add	r0, sp, #228	; 0xe4
   be150:	f7f8 f902 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be154:	4558      	cmp	r0, fp
   be156:	dd3a      	ble.n	be1ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be158:	f04f 0900 	mov.w	r9, #0
   be15c:	2103      	movs	r1, #3
   be15e:	a839      	add	r0, sp, #228	; 0xe4
   be160:	f7f8 f8fa 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be164:	4548      	cmp	r0, r9
   be166:	dd2f      	ble.n	be1c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be168:	f8cd 9000 	str.w	r9, [sp]
   be16c:	465b      	mov	r3, fp
   be16e:	463a      	mov	r2, r7
   be170:	4631      	mov	r1, r6
   be172:	4640      	mov	r0, r8
   be174:	f7f8 fa00 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be178:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be17c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be17e:	465b      	mov	r3, fp
   be180:	463a      	mov	r2, r7
   be182:	4631      	mov	r1, r6
   be184:	a846      	add	r0, sp, #280	; 0x118
   be186:	f7f8 f9f7 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be18a:	9b05      	ldr	r3, [sp, #20]
   be18c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   be190:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs < rhs;
   be194:	ed9a 7a00 	vldr	s14, [sl]
   be198:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   be19c:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be1a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   be1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   be1a8:	465b      	mov	r3, fp
   be1aa:	463a      	mov	r2, r7
   be1ac:	4631      	mov	r1, r6
   be1ae:	a839      	add	r0, sp, #228	; 0xe4
  return lhs < rhs;
   be1b0:	bf4c      	ite	mi
   be1b2:	f04f 0a01 	movmi.w	sl, #1
   be1b6:	f04f 0a00 	movpl.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   be1ba:	f7f8 f934 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be1be:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be1c2:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be1c6:	e7c9      	b.n	be15c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be1c8:	f10b 0b01 	add.w	fp, fp, #1
   be1cc:	e7be      	b.n	be14c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be1ce:	3701      	adds	r7, #1
   be1d0:	e7b4      	b.n	be13c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be1d2:	3601      	adds	r6, #1
   be1d4:	e7ab      	b.n	be12e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   be1d6:	a839      	add	r0, sp, #228	; 0xe4
   be1d8:	f7f8 f8b3 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be1dc:	a816      	add	r0, sp, #88	; 0x58
   be1de:	f7f8 f8b0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be1e2:	a811      	add	r0, sp, #68	; 0x44
   be1e4:	f7f8 f8ad 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be1e8:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(Less);
   be1ea:	f7f8 f8aa 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   be1ee:	2000      	movs	r0, #0
}
   be1f0:	b04f      	add	sp, #316	; 0x13c
   be1f2:	ecbd 8b02 	vpop	{d8}
   be1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   be1fa:	a839      	add	r0, sp, #228	; 0xe4
   be1fc:	f7f8 fb45 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be200:	4629      	mov	r1, r5
   be202:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be204:	6876      	ldr	r6, [r6, #4]
   be206:	f7f8 fb40 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be20a:	b105      	cbz	r5, be20e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   be20c:	686d      	ldr	r5, [r5, #4]
   be20e:	4621      	mov	r1, r4
   be210:	a846      	add	r0, sp, #280	; 0x118
   be212:	f7f8 fb3a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be216:	b104      	cbz	r4, be21a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   be218:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be21a:	aa46      	add	r2, sp, #280	; 0x118
   be21c:	4641      	mov	r1, r8
   be21e:	a839      	add	r0, sp, #228	; 0xe4
   be220:	f7f8 f923 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be224:	2300      	movs	r3, #0
  const int64_t flatsize =
   be226:	17c7      	asrs	r7, r0, #31
   be228:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   be22a:	4619      	mov	r1, r3
   be22c:	4283      	cmp	r3, r0
   be22e:	eb71 0607 	sbcs.w	r6, r1, r7
   be232:	f280 80c2 	bge.w	be3ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   be236:	ecb2 7a01 	vldmia	r2!, {s14}
   be23a:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs < rhs;
   be23e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   be242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   be246:	bf4c      	ite	mi
   be248:	2601      	movmi	r6, #1
   be24a:	2600      	movpl	r6, #0
   be24c:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be24e:	3301      	adds	r3, #1
   be250:	f141 0100 	adc.w	r1, r1, #0
   be254:	e7ea      	b.n	be22c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
   be256:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be25a:	4631      	mov	r1, r6
   be25c:	2f00      	cmp	r7, #0
   be25e:	f000 8082 	beq.w	be366 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   be262:	a81b      	add	r0, sp, #108	; 0x6c
   be264:	f7f8 fb11 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be268:	6873      	ldr	r3, [r6, #4]
   be26a:	9305      	str	r3, [sp, #20]
   be26c:	4629      	mov	r1, r5
   be26e:	a820      	add	r0, sp, #128	; 0x80
   be270:	f7f8 fb0b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be274:	b105      	cbz	r5, be278 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x204>
   be276:	686d      	ldr	r5, [r5, #4]
   be278:	4621      	mov	r1, r4
   be27a:	a825      	add	r0, sp, #148	; 0x94
   be27c:	f7f8 fb05 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be280:	b104      	cbz	r4, be284 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x210>
   be282:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be286:	2b04      	cmp	r3, #4
   be288:	f73f af3c 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be28c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be28e:	2b04      	cmp	r3, #4
   be290:	f73f af38 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be294:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be296:	2b04      	cmp	r3, #4
   be298:	f73f af34 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be29c:	2301      	movs	r3, #1
   be29e:	aa25      	add	r2, sp, #148	; 0x94
   be2a0:	2104      	movs	r1, #4
   be2a2:	a839      	add	r0, sp, #228	; 0xe4
   be2a4:	f7f8 f892 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be2a8:	ab46      	add	r3, sp, #280	; 0x118
   be2aa:	4642      	mov	r2, r8
   be2ac:	a920      	add	r1, sp, #128	; 0x80
   be2ae:	a81b      	add	r0, sp, #108	; 0x6c
   be2b0:	f7f8 fb94 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be2b4:	2600      	movs	r6, #0
   be2b6:	2100      	movs	r1, #0
   be2b8:	a839      	add	r0, sp, #228	; 0xe4
   be2ba:	f7f8 f84d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be2be:	42b0      	cmp	r0, r6
   be2c0:	dd46      	ble.n	be350 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be2c2:	2700      	movs	r7, #0
   be2c4:	2101      	movs	r1, #1
   be2c6:	a839      	add	r0, sp, #228	; 0xe4
   be2c8:	f7f8 f846 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be2cc:	42b8      	cmp	r0, r7
   be2ce:	dd3d      	ble.n	be34c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be2d0:	f04f 0b00 	mov.w	fp, #0
   be2d4:	2102      	movs	r1, #2
   be2d6:	a839      	add	r0, sp, #228	; 0xe4
   be2d8:	f7f8 f83e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be2dc:	4558      	cmp	r0, fp
   be2de:	dd33      	ble.n	be348 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be2e0:	f04f 0900 	mov.w	r9, #0
   be2e4:	2103      	movs	r1, #3
   be2e6:	a839      	add	r0, sp, #228	; 0xe4
   be2e8:	f7f8 f836 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be2ec:	4548      	cmp	r0, r9
   be2ee:	dd28      	ble.n	be342 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be2f0:	f8cd 9000 	str.w	r9, [sp]
   be2f4:	465b      	mov	r3, fp
   be2f6:	463a      	mov	r2, r7
   be2f8:	4631      	mov	r1, r6
   be2fa:	4640      	mov	r0, r8
   be2fc:	f7f8 f93c 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be300:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be304:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be306:	465b      	mov	r3, fp
   be308:	463a      	mov	r2, r7
   be30a:	4631      	mov	r1, r6
   be30c:	a846      	add	r0, sp, #280	; 0x118
   be30e:	f7f8 f933 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs < rhs;
   be312:	9b05      	ldr	r3, [sp, #20]
   be314:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   be318:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   be31c:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be320:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   be322:	465b      	mov	r3, fp
   be324:	463a      	mov	r2, r7
   be326:	4631      	mov	r1, r6
   be328:	a839      	add	r0, sp, #228	; 0xe4
  return lhs < rhs;
   be32a:	bfac      	ite	ge
   be32c:	f04f 0a00 	movge.w	sl, #0
   be330:	f04f 0a01 	movlt.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be334:	f7f8 f877 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be338:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be33c:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be340:	e7d0      	b.n	be2e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be342:	f10b 0b01 	add.w	fp, fp, #1
   be346:	e7c5      	b.n	be2d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be348:	3701      	adds	r7, #1
   be34a:	e7bb      	b.n	be2c4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be34c:	3601      	adds	r6, #1
   be34e:	e7b2      	b.n	be2b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   be350:	a839      	add	r0, sp, #228	; 0xe4
   be352:	f7f7 fff6 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be356:	a825      	add	r0, sp, #148	; 0x94
   be358:	f7f7 fff3 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be35c:	a820      	add	r0, sp, #128	; 0x80
   be35e:	f7f7 fff0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be362:	a81b      	add	r0, sp, #108	; 0x6c
   be364:	e741      	b.n	be1ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be366:	a839      	add	r0, sp, #228	; 0xe4
   be368:	f7f8 fa8f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be36c:	4629      	mov	r1, r5
   be36e:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be370:	6876      	ldr	r6, [r6, #4]
   be372:	f7f8 fa8a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be376:	b105      	cbz	r5, be37a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x306>
   be378:	686d      	ldr	r5, [r5, #4]
   be37a:	4621      	mov	r1, r4
   be37c:	a846      	add	r0, sp, #280	; 0x118
   be37e:	f7f8 fa84 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be382:	b104      	cbz	r4, be386 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x312>
   be384:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be386:	aa46      	add	r2, sp, #280	; 0x118
   be388:	4641      	mov	r1, r8
   be38a:	a839      	add	r0, sp, #228	; 0xe4
   be38c:	f7f8 f86d 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be390:	2300      	movs	r3, #0
  const int64_t flatsize =
   be392:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be396:	461f      	mov	r7, r3
   be398:	4283      	cmp	r3, r0
   be39a:	eb77 020c 	sbcs.w	r2, r7, ip
   be39e:	da0c      	bge.n	be3ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs < rhs;
   be3a0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   be3a4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   be3a8:	428a      	cmp	r2, r1
   be3aa:	bfac      	ite	ge
   be3ac:	2200      	movge	r2, #0
   be3ae:	2201      	movlt	r2, #1
   be3b0:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be3b2:	3301      	adds	r3, #1
   be3b4:	f147 0700 	adc.w	r7, r7, #0
   be3b8:	e7ee      	b.n	be398 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x324>
   be3ba:	a846      	add	r0, sp, #280	; 0x118
   be3bc:	f7f7 ffc1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be3c0:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
   be3c2:	f7f7 ffbe 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be3c6:	a839      	add	r0, sp, #228	; 0xe4
   be3c8:	e70f      	b.n	be1ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be3ca:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be3ce:	4631      	mov	r1, r6
   be3d0:	2f00      	cmp	r7, #0
   be3d2:	f000 808c 	beq.w	be4ee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   be3d6:	a82a      	add	r0, sp, #168	; 0xa8
   be3d8:	f7f8 fa57 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be3dc:	4629      	mov	r1, r5
   be3de:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be3e0:	f8d6 b004 	ldr.w	fp, [r6, #4]
   be3e4:	f7f8 fa51 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be3e8:	b105      	cbz	r5, be3ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x378>
   be3ea:	686d      	ldr	r5, [r5, #4]
   be3ec:	4621      	mov	r1, r4
   be3ee:	a834      	add	r0, sp, #208	; 0xd0
   be3f0:	f7f8 fa4b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be3f4:	b104      	cbz	r4, be3f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x384>
   be3f6:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be3f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be3fa:	2b04      	cmp	r3, #4
   be3fc:	f73f ae82 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be400:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be402:	2b04      	cmp	r3, #4
   be404:	f73f ae7e 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be408:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   be40a:	2b04      	cmp	r3, #4
   be40c:	f73f ae7a 	bgt.w	be104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be410:	2301      	movs	r3, #1
   be412:	aa34      	add	r2, sp, #208	; 0xd0
   be414:	2104      	movs	r1, #4
   be416:	a839      	add	r0, sp, #228	; 0xe4
   be418:	f7f7 ffd8 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be41c:	ab46      	add	r3, sp, #280	; 0x118
   be41e:	4642      	mov	r2, r8
   be420:	a92f      	add	r1, sp, #188	; 0xbc
   be422:	a82a      	add	r0, sp, #168	; 0xa8
   be424:	f7f8 fada 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be428:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be42c:	2700      	movs	r7, #0
   be42e:	2100      	movs	r1, #0
   be430:	a839      	add	r0, sp, #228	; 0xe4
   be432:	f7f7 ff91 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be436:	42b8      	cmp	r0, r7
   be438:	dd4e      	ble.n	be4d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be43a:	f04f 0800 	mov.w	r8, #0
   be43e:	2101      	movs	r1, #1
   be440:	a839      	add	r0, sp, #228	; 0xe4
   be442:	f7f7 ff89 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be446:	4540      	cmp	r0, r8
   be448:	dd44      	ble.n	be4d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be44a:	2600      	movs	r6, #0
   be44c:	2102      	movs	r1, #2
   be44e:	a839      	add	r0, sp, #228	; 0xe4
   be450:	f7f7 ff82 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be454:	42b0      	cmp	r0, r6
   be456:	dd3a      	ble.n	be4ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be458:	f04f 0900 	mov.w	r9, #0
   be45c:	2103      	movs	r1, #3
   be45e:	a839      	add	r0, sp, #228	; 0xe4
   be460:	f7f7 ff7a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be464:	4548      	cmp	r0, r9
   be466:	dd30      	ble.n	be4ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be468:	f8cd 9000 	str.w	r9, [sp]
   be46c:	4633      	mov	r3, r6
   be46e:	4642      	mov	r2, r8
   be470:	4639      	mov	r1, r7
   be472:	ee18 0a10 	vmov	r0, s16
   be476:	f7f8 f87f 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be47a:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be47e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be480:	4633      	mov	r3, r6
   be482:	4642      	mov	r2, r8
   be484:	4639      	mov	r1, r7
   be486:	a846      	add	r0, sp, #280	; 0x118
   be488:	f7f8 f876 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be48c:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   be490:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs < rhs;
   be494:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   be498:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   be49c:	6849      	ldr	r1, [r1, #4]
   be49e:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   be4a0:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be4a4:	4283      	cmp	r3, r0
   be4a6:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   be4aa:	a839      	add	r0, sp, #228	; 0xe4
   be4ac:	4633      	mov	r3, r6
   be4ae:	4642      	mov	r2, r8
   be4b0:	4639      	mov	r1, r7
  return lhs < rhs;
   be4b2:	bfb4      	ite	lt
   be4b4:	f04f 0a01 	movlt.w	sl, #1
   be4b8:	f04f 0a00 	movge.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   be4bc:	f7f7 ffb3 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be4c0:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be4c4:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be4c8:	e7c8      	b.n	be45c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be4ca:	3601      	adds	r6, #1
   be4cc:	e7be      	b.n	be44c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be4ce:	f108 0801 	add.w	r8, r8, #1
   be4d2:	e7b4      	b.n	be43e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be4d4:	3701      	adds	r7, #1
   be4d6:	e7aa      	b.n	be42e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   be4d8:	a839      	add	r0, sp, #228	; 0xe4
   be4da:	f7f7 ff32 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be4de:	a834      	add	r0, sp, #208	; 0xd0
   be4e0:	f7f7 ff2f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be4e4:	a82f      	add	r0, sp, #188	; 0xbc
   be4e6:	f7f7 ff2c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be4ea:	a82a      	add	r0, sp, #168	; 0xa8
   be4ec:	e67d      	b.n	be1ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be4ee:	a839      	add	r0, sp, #228	; 0xe4
   be4f0:	f7f8 f9cb 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be4f4:	4629      	mov	r1, r5
   be4f6:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be4f8:	6877      	ldr	r7, [r6, #4]
   be4fa:	f7f8 f9c6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be4fe:	b105      	cbz	r5, be502 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   be500:	686d      	ldr	r5, [r5, #4]
   be502:	4621      	mov	r1, r4
   be504:	a846      	add	r0, sp, #280	; 0x118
   be506:	f7f8 f9c0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be50a:	b104      	cbz	r4, be50e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   be50c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be50e:	aa46      	add	r2, sp, #280	; 0x118
   be510:	4641      	mov	r1, r8
   be512:	a839      	add	r0, sp, #228	; 0xe4
   be514:	f7f7 ffa9 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be518:	2300      	movs	r3, #0
  const int64_t flatsize =
   be51a:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   be51e:	f1a7 0208 	sub.w	r2, r7, #8
   be522:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   be524:	4619      	mov	r1, r3
   be526:	4283      	cmp	r3, r0
   be528:	eb71 060e 	sbcs.w	r6, r1, lr
   be52c:	da0f      	bge.n	be54e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs < rhs;
   be52e:	f852 7f08 	ldr.w	r7, [r2, #8]!
   be532:	f855 6f08 	ldr.w	r6, [r5, #8]!
   be536:	42b7      	cmp	r7, r6
   be538:	6856      	ldr	r6, [r2, #4]
   be53a:	686f      	ldr	r7, [r5, #4]
   be53c:	41be      	sbcs	r6, r7
   be53e:	bfb4      	ite	lt
   be540:	2601      	movlt	r6, #1
   be542:	2600      	movge	r6, #0
   be544:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be546:	3301      	adds	r3, #1
   be548:	f141 0100 	adc.w	r1, r1, #0
   be54c:	e7eb      	b.n	be526 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   be54e:	a846      	add	r0, sp, #280	; 0x118
   be550:	f7f7 fef7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be554:	a83e      	add	r0, sp, #248	; 0xf8
   be556:	e734      	b.n	be3c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(Less);
   be558:	6933      	ldr	r3, [r6, #16]
   be55a:	68f0      	ldr	r0, [r6, #12]
   be55c:	f1c3 0900 	rsb	r9, r3, #0
   be560:	692b      	ldr	r3, [r5, #16]
   be562:	f1c3 0800 	rsb	r8, r3, #0
   be566:	f7f5 febf 	bl	b42e8 <__aeabi_f2d>
   be56a:	ec41 0b10 	vmov	d0, r0, r1
   be56e:	a925      	add	r1, sp, #148	; 0x94
   be570:	a820      	add	r0, sp, #128	; 0x80
   be572:	f7f6 fe7b 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be576:	68e8      	ldr	r0, [r5, #12]
   be578:	f7f5 feb6 	bl	b42e8 <__aeabi_f2d>
   be57c:	ec41 0b10 	vmov	d0, r0, r1
   be580:	a92f      	add	r1, sp, #188	; 0xbc
   be582:	a82a      	add	r0, sp, #168	; 0xa8
   be584:	f7f6 fe72 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be588:	2308      	movs	r3, #8
   be58a:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   be58e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be590:	9348      	str	r3, [sp, #288]	; 0x120
   be592:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be594:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   be598:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be59a:	934b      	str	r3, [sp, #300]	; 0x12c
   be59c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be59e:	934c      	str	r3, [sp, #304]	; 0x130
   be5a0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be5a4:	4631      	mov	r1, r6
   be5a6:	a834      	add	r0, sp, #208	; 0xd0
   be5a8:	b1ff      	cbz	r7, be5ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x576>
   be5aa:	f7f8 f96e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be5ae:	6872      	ldr	r2, [r6, #4]
   be5b0:	9205      	str	r2, [sp, #20]
   be5b2:	4629      	mov	r1, r5
   be5b4:	a839      	add	r0, sp, #228	; 0xe4
   be5b6:	f7f8 f968 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be5ba:	4621      	mov	r1, r4
   be5bc:	4640      	mov	r0, r8
   be5be:	686d      	ldr	r5, [r5, #4]
   be5c0:	f7f8 f963 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be5c4:	9a05      	ldr	r2, [sp, #20]
   be5c6:	b104      	cbz	r4, be5ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x556>
   be5c8:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Less);
   be5ca:	9500      	str	r5, [sp, #0]
   be5cc:	e9cd 8401 	strd	r8, r4, [sp, #4]
   be5d0:	ab39      	add	r3, sp, #228	; 0xe4
   be5d2:	a934      	add	r1, sp, #208	; 0xd0
   be5d4:	a846      	add	r0, sp, #280	; 0x118
   be5d6:	f7ff fc15 	bl	bde04 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   be5da:	4640      	mov	r0, r8
   be5dc:	f7f7 feb1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be5e0:	a839      	add	r0, sp, #228	; 0xe4
   be5e2:	f7f7 feae 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   be5e6:	a834      	add	r0, sp, #208	; 0xd0
   be5e8:	e5ff      	b.n	be1ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be5ea:	f7f8 f94e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be5ee:	6873      	ldr	r3, [r6, #4]
   be5f0:	9305      	str	r3, [sp, #20]
   be5f2:	4629      	mov	r1, r5
   be5f4:	a839      	add	r0, sp, #228	; 0xe4
   be5f6:	f7f8 f948 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be5fa:	686b      	ldr	r3, [r5, #4]
   be5fc:	9306      	str	r3, [sp, #24]
   be5fe:	4621      	mov	r1, r4
   be600:	4640      	mov	r0, r8
   be602:	f7f8 f942 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be606:	b104      	cbz	r4, be60a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x596>
   be608:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   be60a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   be60e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   be610:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   be612:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   be614:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be618:	aa3e      	add	r2, sp, #248	; 0xf8
   be61a:	a939      	add	r1, sp, #228	; 0xe4
   be61c:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   be61e:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be622:	f7f7 ff22 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   be626:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   be62a:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be62c:	2500      	movs	r5, #0
  const int64_t flatsize =
   be62e:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be630:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   be632:	462b      	mov	r3, r5
   be634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   be636:	930b      	str	r3, [sp, #44]	; 0x2c
   be638:	4545      	cmp	r5, r8
   be63a:	eb73 0202 	sbcs.w	r2, r3, r2
   be63e:	f280 80b1 	bge.w	be7a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   be642:	9b06      	ldr	r3, [sp, #24]
   be644:	5d5f      	ldrb	r7, [r3, r5]
   be646:	9b08      	ldr	r3, [sp, #32]
   be648:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   be64a:	9b05      	ldr	r3, [sp, #20]
   be64c:	5d58      	ldrb	r0, [r3, r5]
   be64e:	9b07      	ldr	r3, [sp, #28]
   be650:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be652:	465a      	mov	r2, fp
   be654:	4651      	mov	r1, sl
   be656:	fa00 f009 	lsl.w	r0, r0, r9
   be65a:	f7f7 ff43 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be65e:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be662:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be664:	ee18 2a10 	vmov	r2, s16
   be668:	4631      	mov	r1, r6
   be66a:	4638      	mov	r0, r7
   be66c:	f7f7 ff3a 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs < rhs;
   be670:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be672:	4283      	cmp	r3, r0
   be674:	bfac      	ite	ge
   be676:	2000      	movge	r0, #0
   be678:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   be67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs < rhs;
   be67c:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   be67e:	3501      	adds	r5, #1
   be680:	f143 0300 	adc.w	r3, r3, #0
   be684:	e7d6      	b.n	be634 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   be686:	6933      	ldr	r3, [r6, #16]
   be688:	68f0      	ldr	r0, [r6, #12]
   be68a:	f1c3 0900 	rsb	r9, r3, #0
   be68e:	692b      	ldr	r3, [r5, #16]
   be690:	f1c3 0800 	rsb	r8, r3, #0
   be694:	f7f5 fe28 	bl	b42e8 <__aeabi_f2d>
   be698:	ec41 0b10 	vmov	d0, r0, r1
   be69c:	a925      	add	r1, sp, #148	; 0x94
   be69e:	a820      	add	r0, sp, #128	; 0x80
   be6a0:	f7f6 fde4 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be6a4:	68e8      	ldr	r0, [r5, #12]
   be6a6:	f7f5 fe1f 	bl	b42e8 <__aeabi_f2d>
   be6aa:	ec41 0b10 	vmov	d0, r0, r1
   be6ae:	a92f      	add	r1, sp, #188	; 0xbc
   be6b0:	a82a      	add	r0, sp, #168	; 0xa8
   be6b2:	f7f6 fddb 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be6b6:	2308      	movs	r3, #8
   be6b8:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   be6bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be6be:	9348      	str	r3, [sp, #288]	; 0x120
   be6c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be6c2:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   be6c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be6c8:	934b      	str	r3, [sp, #300]	; 0x12c
   be6ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be6cc:	934c      	str	r3, [sp, #304]	; 0x130
   be6ce:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be6d2:	4631      	mov	r1, r6
   be6d4:	a834      	add	r0, sp, #208	; 0xd0
   be6d6:	b1c7      	cbz	r7, be70a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x696>
   be6d8:	f7f8 f8d7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be6dc:	6872      	ldr	r2, [r6, #4]
   be6de:	9205      	str	r2, [sp, #20]
   be6e0:	4629      	mov	r1, r5
   be6e2:	a839      	add	r0, sp, #228	; 0xe4
   be6e4:	f7f8 f8d1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be6e8:	4621      	mov	r1, r4
   be6ea:	4640      	mov	r0, r8
   be6ec:	686d      	ldr	r5, [r5, #4]
   be6ee:	f7f8 f8cc 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be6f2:	9a05      	ldr	r2, [sp, #20]
   be6f4:	b104      	cbz	r4, be6f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x684>
   be6f6:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Less);
   be6f8:	9500      	str	r5, [sp, #0]
   be6fa:	e9cd 8401 	strd	r8, r4, [sp, #4]
   be6fe:	ab39      	add	r3, sp, #228	; 0xe4
   be700:	a934      	add	r1, sp, #208	; 0xd0
   be702:	a846      	add	r0, sp, #280	; 0x118
   be704:	f7ff fc1a 	bl	bdf3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   be708:	e767      	b.n	be5da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x566>
   be70a:	f7f8 f8be 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be70e:	6873      	ldr	r3, [r6, #4]
   be710:	9305      	str	r3, [sp, #20]
   be712:	4629      	mov	r1, r5
   be714:	a839      	add	r0, sp, #228	; 0xe4
   be716:	f7f8 f8b8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be71a:	686b      	ldr	r3, [r5, #4]
   be71c:	9306      	str	r3, [sp, #24]
   be71e:	4621      	mov	r1, r4
   be720:	4640      	mov	r0, r8
   be722:	f7f8 f8b2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be726:	b104      	cbz	r4, be72a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   be728:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   be72a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   be72e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   be730:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   be732:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   be734:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be738:	aa3e      	add	r2, sp, #248	; 0xf8
   be73a:	a939      	add	r1, sp, #228	; 0xe4
   be73c:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   be73e:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be742:	f7f7 fe92 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   be746:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   be74a:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be74c:	2500      	movs	r5, #0
  const int64_t flatsize =
   be74e:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be750:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   be752:	462b      	mov	r3, r5
   be754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   be756:	930b      	str	r3, [sp, #44]	; 0x2c
   be758:	4545      	cmp	r5, r8
   be75a:	eb73 0202 	sbcs.w	r2, r3, r2
   be75e:	da21      	bge.n	be7a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   be760:	9b06      	ldr	r3, [sp, #24]
   be762:	575f      	ldrsb	r7, [r3, r5]
   be764:	9b08      	ldr	r3, [sp, #32]
   be766:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   be768:	9b05      	ldr	r3, [sp, #20]
   be76a:	5758      	ldrsb	r0, [r3, r5]
   be76c:	9b07      	ldr	r3, [sp, #28]
   be76e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be770:	465a      	mov	r2, fp
   be772:	4651      	mov	r1, sl
   be774:	fa00 f009 	lsl.w	r0, r0, r9
   be778:	f7f7 feb4 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be77c:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be780:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be782:	ee18 2a10 	vmov	r2, s16
   be786:	4631      	mov	r1, r6
   be788:	4638      	mov	r0, r7
   be78a:	f7f7 feab 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs < rhs;
   be78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be790:	4283      	cmp	r3, r0
   be792:	bfac      	ite	ge
   be794:	2000      	movge	r0, #0
   be796:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   be798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs < rhs;
   be79a:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   be79c:	3501      	adds	r5, #1
   be79e:	f143 0300 	adc.w	r3, r3, #0
   be7a2:	e7d7      	b.n	be754 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   be7a4:	a83e      	add	r0, sp, #248	; 0xf8
   be7a6:	e719      	b.n	be5dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   be7a8:	4640      	mov	r0, r8
   be7aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
   be7ae:	4902      	ldr	r1, [pc, #8]	; (be7b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   be7b0:	4798      	blx	r3
      return kTfLiteError;
   be7b2:	2001      	movs	r0, #1
   be7b4:	e51c      	b.n	be1f0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   be7b6:	bf00      	nop
   be7b8:	000c89e7 	.word	0x000c89e7

000be7bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   be7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be7c0:	ed2d 8b04 	vpush	{d8-d9}
   be7c4:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be7c6:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   be7c8:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be7ca:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   be7cc:	9204      	str	r2, [sp, #16]
   be7ce:	4604      	mov	r4, r0
   be7d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   be7d2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be7d4:	dd01      	ble.n	be7da <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   be7d6:	f006 f811 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be7da:	6833      	ldr	r3, [r6, #0]
   be7dc:	2b04      	cmp	r3, #4
   be7de:	dcfa      	bgt.n	be7d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be7e0:	6813      	ldr	r3, [r2, #0]
   be7e2:	2b04      	cmp	r3, #4
   be7e4:	dcf7      	bgt.n	be7d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   be7e6:	2301      	movs	r3, #1
   be7e8:	2104      	movs	r1, #4
   be7ea:	a807      	add	r0, sp, #28
   be7ec:	f7f7 fdee 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be7f0:	ab14      	add	r3, sp, #80	; 0x50
   be7f2:	aa0c      	add	r2, sp, #48	; 0x30
   be7f4:	4631      	mov	r1, r6
   be7f6:	4628      	mov	r0, r5
   be7f8:	f7f8 f8f0 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   be7fc:	e9d4 a300 	ldrd	sl, r3, [r4]
   be800:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   be802:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   be804:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   be808:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   be80c:	68e3      	ldr	r3, [r4, #12]
   be80e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   be812:	6923      	ldr	r3, [r4, #16]
   be814:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   be816:	6963      	ldr	r3, [r4, #20]
   be818:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be81c:	2400      	movs	r4, #0
   be81e:	2100      	movs	r1, #0
   be820:	a807      	add	r0, sp, #28
   be822:	f7f7 fd99 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be826:	42a0      	cmp	r0, r4
   be828:	dd5c      	ble.n	be8e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be82a:	2500      	movs	r5, #0
   be82c:	af07      	add	r7, sp, #28
   be82e:	2101      	movs	r1, #1
   be830:	4638      	mov	r0, r7
   be832:	f7f7 fd91 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be836:	42a8      	cmp	r0, r5
   be838:	dd52      	ble.n	be8e0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be83a:	2600      	movs	r6, #0
   be83c:	2102      	movs	r1, #2
   be83e:	4638      	mov	r0, r7
   be840:	f7f7 fd8a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be844:	42b0      	cmp	r0, r6
   be846:	dd49      	ble.n	be8dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be848:	f04f 0800 	mov.w	r8, #0
   be84c:	2103      	movs	r1, #3
   be84e:	4638      	mov	r0, r7
   be850:	f7f7 fd82 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be854:	4540      	cmp	r0, r8
   be856:	dd3f      	ble.n	be8d8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   be858:	f8cd 8000 	str.w	r8, [sp]
   be85c:	4633      	mov	r3, r6
   be85e:	462a      	mov	r2, r5
   be860:	4621      	mov	r1, r4
   be862:	a80c      	add	r0, sp, #48	; 0x30
   be864:	f7f7 fe88 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be868:	9b04      	ldr	r3, [sp, #16]
   be86a:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   be86e:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be870:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   be874:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be876:	462a      	mov	r2, r5
   be878:	4633      	mov	r3, r6
   be87a:	4621      	mov	r1, r4
   be87c:	a814      	add	r0, sp, #80	; 0x50
   be87e:	f7f7 fe7b 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be882:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   be884:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be886:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   be888:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be88a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be88e:	ee18 2a90 	vmov	r2, s17
   be892:	ee18 1a10 	vmov	r1, s16
   be896:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be89a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be89c:	f7f7 fe22 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be8a0:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be8a2:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be8a4:	ee19 1a10 	vmov	r1, s18
   be8a8:	465a      	mov	r2, fp
   be8aa:	4618      	mov	r0, r3
   be8ac:	f7f7 fe1a 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   be8b0:	f8cd 8000 	str.w	r8, [sp]
  return lhs <= rhs;
   be8b4:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   be8b6:	4633      	mov	r3, r6
   be8b8:	462a      	mov	r2, r5
   be8ba:	4621      	mov	r1, r4
   be8bc:	4638      	mov	r0, r7
  return lhs <= rhs;
   be8be:	bfcc      	ite	gt
   be8c0:	f04f 0900 	movgt.w	r9, #0
   be8c4:	f04f 0901 	movle.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be8c8:	f7f7 fdad 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   be8cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be8ce:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be8d2:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be8d6:	e7b9      	b.n	be84c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be8d8:	3601      	adds	r6, #1
   be8da:	e7af      	b.n	be83c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be8dc:	3501      	adds	r5, #1
   be8de:	e7a5      	b.n	be82c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be8e0:	3401      	adds	r4, #1
   be8e2:	e79c      	b.n	be81e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   be8e4:	a807      	add	r0, sp, #28
   be8e6:	f7f7 fd2c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   be8ea:	b01d      	add	sp, #116	; 0x74
   be8ec:	ecbd 8b04 	vpop	{d8-d9}
   be8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be8f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   be8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be8f8:	ed2d 8b04 	vpush	{d8-d9}
   be8fc:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be8fe:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   be900:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be902:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   be904:	9204      	str	r2, [sp, #16]
   be906:	4604      	mov	r4, r0
   be908:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   be90a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be90c:	dd01      	ble.n	be912 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   be90e:	f005 ff75 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be912:	6833      	ldr	r3, [r6, #0]
   be914:	2b04      	cmp	r3, #4
   be916:	dcfa      	bgt.n	be90e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be918:	6813      	ldr	r3, [r2, #0]
   be91a:	2b04      	cmp	r3, #4
   be91c:	dcf7      	bgt.n	be90e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   be91e:	2301      	movs	r3, #1
   be920:	2104      	movs	r1, #4
   be922:	a807      	add	r0, sp, #28
   be924:	f7f7 fd52 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be928:	ab14      	add	r3, sp, #80	; 0x50
   be92a:	aa0c      	add	r2, sp, #48	; 0x30
   be92c:	4631      	mov	r1, r6
   be92e:	4628      	mov	r0, r5
   be930:	f7f8 f854 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   be934:	e9d4 a300 	ldrd	sl, r3, [r4]
   be938:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   be93a:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   be93c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   be940:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   be944:	68e3      	ldr	r3, [r4, #12]
   be946:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   be94a:	6923      	ldr	r3, [r4, #16]
   be94c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   be94e:	6963      	ldr	r3, [r4, #20]
   be950:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be954:	2400      	movs	r4, #0
   be956:	2100      	movs	r1, #0
   be958:	a807      	add	r0, sp, #28
   be95a:	f7f7 fcfd 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be95e:	42a0      	cmp	r0, r4
   be960:	dd5c      	ble.n	bea1c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be962:	2500      	movs	r5, #0
   be964:	af07      	add	r7, sp, #28
   be966:	2101      	movs	r1, #1
   be968:	4638      	mov	r0, r7
   be96a:	f7f7 fcf5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be96e:	42a8      	cmp	r0, r5
   be970:	dd52      	ble.n	bea18 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be972:	2600      	movs	r6, #0
   be974:	2102      	movs	r1, #2
   be976:	4638      	mov	r0, r7
   be978:	f7f7 fcee 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be97c:	42b0      	cmp	r0, r6
   be97e:	dd49      	ble.n	bea14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be980:	f04f 0800 	mov.w	r8, #0
   be984:	2103      	movs	r1, #3
   be986:	4638      	mov	r0, r7
   be988:	f7f7 fce6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   be98c:	4540      	cmp	r0, r8
   be98e:	dd3f      	ble.n	bea10 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   be990:	f8cd 8000 	str.w	r8, [sp]
   be994:	4633      	mov	r3, r6
   be996:	462a      	mov	r2, r5
   be998:	4621      	mov	r1, r4
   be99a:	a80c      	add	r0, sp, #48	; 0x30
   be99c:	f7f7 fdec 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be9a0:	9b04      	ldr	r3, [sp, #16]
   be9a2:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   be9a6:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be9a8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   be9ac:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be9ae:	462a      	mov	r2, r5
   be9b0:	4633      	mov	r3, r6
   be9b2:	4621      	mov	r1, r4
   be9b4:	a814      	add	r0, sp, #80	; 0x50
   be9b6:	f7f7 fddf 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be9ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   be9bc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be9be:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   be9c0:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be9c2:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be9c6:	ee18 2a90 	vmov	r2, s17
   be9ca:	ee18 1a10 	vmov	r1, s16
   be9ce:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be9d2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be9d4:	f7f7 fd86 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be9d8:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be9da:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be9dc:	ee19 1a10 	vmov	r1, s18
   be9e0:	465a      	mov	r2, fp
   be9e2:	4618      	mov	r0, r3
   be9e4:	f7f7 fd7e 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   be9e8:	f8cd 8000 	str.w	r8, [sp]
  return lhs <= rhs;
   be9ec:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   be9ee:	4633      	mov	r3, r6
   be9f0:	462a      	mov	r2, r5
   be9f2:	4621      	mov	r1, r4
   be9f4:	4638      	mov	r0, r7
  return lhs <= rhs;
   be9f6:	bfcc      	ite	gt
   be9f8:	f04f 0900 	movgt.w	r9, #0
   be9fc:	f04f 0901 	movle.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bea00:	f7f7 fd11 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bea04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bea06:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bea0a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bea0e:	e7b9      	b.n	be984 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bea10:	3601      	adds	r6, #1
   bea12:	e7af      	b.n	be974 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bea14:	3501      	adds	r5, #1
   bea16:	e7a5      	b.n	be964 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bea18:	3401      	adds	r4, #1
   bea1a:	e79c      	b.n	be956 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bea1c:	a807      	add	r0, sp, #28
   bea1e:	f7f7 fc90 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bea22:	b01d      	add	sp, #116	; 0x74
   bea24:	ecbd 8b04 	vpop	{d8-d9}
   bea28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bea2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   bea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea30:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bea34:	680a      	ldr	r2, [r1, #0]
   bea36:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bea3a:	6895      	ldr	r5, [r2, #8]
   bea3c:	4680      	mov	r8, r0
   bea3e:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bea40:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bea42:	2338      	movs	r3, #56	; 0x38
   bea44:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bea48:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bea4a:	fb03 a505 	mla	r5, r3, r5, sl
   bea4e:	eb0a 0609 	add.w	r6, sl, r9
   bea52:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bea54:	4629      	mov	r1, r5
   bea56:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bea58:	fb03 a404 	mla	r4, r3, r4, sl
   bea5c:	f7f6 fb9e 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bea60:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bea64:	f080 0001 	eor.w	r0, r0, #1
   bea68:	1e53      	subs	r3, r2, #1
   bea6a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bea6c:	2b08      	cmp	r3, #8
   bea6e:	f200 8377 	bhi.w	bf160 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x734>
   bea72:	e8df f013 	tbh	[pc, r3, lsl #1]
   bea76:	0009      	.short	0x0009
   bea78:	024d00cc 	.word	0x024d00cc
   bea7c:	03750186 	.word	0x03750186
   bea80:	03750375 	.word	0x03750375
   bea84:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   bea88:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bea8c:	4631      	mov	r1, r6
   bea8e:	2f00      	cmp	r7, #0
   bea90:	f000 808f 	beq.w	bebb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x186>
   bea94:	a80c      	add	r0, sp, #48	; 0x30
   bea96:	f7f7 fef8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bea9a:	6873      	ldr	r3, [r6, #4]
   bea9c:	9305      	str	r3, [sp, #20]
   bea9e:	4629      	mov	r1, r5
   beaa0:	a811      	add	r0, sp, #68	; 0x44
   beaa2:	f7f7 fef2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beaa6:	b105      	cbz	r5, beaaa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   beaa8:	686d      	ldr	r5, [r5, #4]
   beaaa:	4621      	mov	r1, r4
   beaac:	a816      	add	r0, sp, #88	; 0x58
   beaae:	f7f7 feec 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   beab2:	b104      	cbz	r4, beab6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   beab4:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   beab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   beab8:	2b04      	cmp	r3, #4
   beaba:	dd01      	ble.n	beac0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   beabc:	f005 fe9e 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   beac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   beac2:	2b04      	cmp	r3, #4
   beac4:	dcfa      	bgt.n	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   beac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   beac8:	2b04      	cmp	r3, #4
   beaca:	dcf7      	bgt.n	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   beacc:	2301      	movs	r3, #1
   beace:	aa16      	add	r2, sp, #88	; 0x58
   bead0:	2104      	movs	r1, #4
   bead2:	a839      	add	r0, sp, #228	; 0xe4
   bead4:	f7f7 fc7a 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bead8:	ab46      	add	r3, sp, #280	; 0x118
   beada:	4642      	mov	r2, r8
   beadc:	a911      	add	r1, sp, #68	; 0x44
   beade:	a80c      	add	r0, sp, #48	; 0x30
   beae0:	f7f7 ff7c 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   beae4:	2600      	movs	r6, #0
   beae6:	2100      	movs	r1, #0
   beae8:	a839      	add	r0, sp, #228	; 0xe4
   beaea:	f7f7 fc35 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   beaee:	42b0      	cmp	r0, r6
   beaf0:	dd4d      	ble.n	beb8e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   beaf2:	2700      	movs	r7, #0
   beaf4:	2101      	movs	r1, #1
   beaf6:	a839      	add	r0, sp, #228	; 0xe4
   beaf8:	f7f7 fc2e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   beafc:	42b8      	cmp	r0, r7
   beafe:	dd44      	ble.n	beb8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   beb00:	f04f 0b00 	mov.w	fp, #0
   beb04:	2102      	movs	r1, #2
   beb06:	a839      	add	r0, sp, #228	; 0xe4
   beb08:	f7f7 fc26 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb0c:	4558      	cmp	r0, fp
   beb0e:	dd3a      	ble.n	beb86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   beb10:	f04f 0900 	mov.w	r9, #0
   beb14:	2103      	movs	r1, #3
   beb16:	a839      	add	r0, sp, #228	; 0xe4
   beb18:	f7f7 fc1e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb1c:	4548      	cmp	r0, r9
   beb1e:	dd2f      	ble.n	beb80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beb20:	f8cd 9000 	str.w	r9, [sp]
   beb24:	465b      	mov	r3, fp
   beb26:	463a      	mov	r2, r7
   beb28:	4631      	mov	r1, r6
   beb2a:	4640      	mov	r0, r8
   beb2c:	f7f7 fd24 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   beb30:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beb34:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   beb36:	465b      	mov	r3, fp
   beb38:	463a      	mov	r2, r7
   beb3a:	4631      	mov	r1, r6
   beb3c:	a846      	add	r0, sp, #280	; 0x118
   beb3e:	f7f7 fd1b 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beb42:	9b05      	ldr	r3, [sp, #20]
   beb44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   beb48:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs <= rhs;
   beb4c:	ed9a 7a00 	vldr	s14, [sl]
   beb50:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   beb54:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   beb58:	eeb4 7ae7 	vcmpe.f32	s14, s15
   beb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   beb60:	465b      	mov	r3, fp
   beb62:	463a      	mov	r2, r7
   beb64:	4631      	mov	r1, r6
   beb66:	a839      	add	r0, sp, #228	; 0xe4
  return lhs <= rhs;
   beb68:	bf94      	ite	ls
   beb6a:	f04f 0a01 	movls.w	sl, #1
   beb6e:	f04f 0a00 	movhi.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   beb72:	f7f7 fc58 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   beb76:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   beb7a:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   beb7e:	e7c9      	b.n	beb14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   beb80:	f10b 0b01 	add.w	fp, fp, #1
   beb84:	e7be      	b.n	beb04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   beb86:	3701      	adds	r7, #1
   beb88:	e7b4      	b.n	beaf4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   beb8a:	3601      	adds	r6, #1
   beb8c:	e7ab      	b.n	beae6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   beb8e:	a839      	add	r0, sp, #228	; 0xe4
   beb90:	f7f7 fbd7 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   beb94:	a816      	add	r0, sp, #88	; 0x58
   beb96:	f7f7 fbd4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   beb9a:	a811      	add	r0, sp, #68	; 0x44
   beb9c:	f7f7 fbd1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   beba0:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   beba2:	f7f7 fbce 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   beba6:	2000      	movs	r0, #0
}
   beba8:	b04f      	add	sp, #316	; 0x13c
   bebaa:	ecbd 8b02 	vpop	{d8}
   bebae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   bebb2:	a839      	add	r0, sp, #228	; 0xe4
   bebb4:	f7f7 fe69 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bebb8:	4629      	mov	r1, r5
   bebba:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bebbc:	6876      	ldr	r6, [r6, #4]
   bebbe:	f7f7 fe64 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bebc2:	b105      	cbz	r5, bebc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bebc4:	686d      	ldr	r5, [r5, #4]
   bebc6:	4621      	mov	r1, r4
   bebc8:	a846      	add	r0, sp, #280	; 0x118
   bebca:	f7f7 fe5e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bebce:	b104      	cbz	r4, bebd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bebd0:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bebd2:	aa46      	add	r2, sp, #280	; 0x118
   bebd4:	4641      	mov	r1, r8
   bebd6:	a839      	add	r0, sp, #228	; 0xe4
   bebd8:	f7f7 fc47 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bebdc:	2300      	movs	r3, #0
  const int64_t flatsize =
   bebde:	17c7      	asrs	r7, r0, #31
   bebe0:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bebe2:	4619      	mov	r1, r3
   bebe4:	4283      	cmp	r3, r0
   bebe6:	eb71 0607 	sbcs.w	r6, r1, r7
   bebea:	f280 80c2 	bge.w	bed72 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bebee:	ecb2 7a01 	vldmia	r2!, {s14}
   bebf2:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs <= rhs;
   bebf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bebfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bebfe:	bf94      	ite	ls
   bec00:	2601      	movls	r6, #1
   bec02:	2600      	movhi	r6, #0
   bec04:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bec06:	3301      	adds	r3, #1
   bec08:	f141 0100 	adc.w	r1, r1, #0
   bec0c:	e7ea      	b.n	bebe4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
   bec0e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bec12:	4631      	mov	r1, r6
   bec14:	2f00      	cmp	r7, #0
   bec16:	f000 8082 	beq.w	bed1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bec1a:	a81b      	add	r0, sp, #108	; 0x6c
   bec1c:	f7f7 fe35 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bec20:	6873      	ldr	r3, [r6, #4]
   bec22:	9305      	str	r3, [sp, #20]
   bec24:	4629      	mov	r1, r5
   bec26:	a820      	add	r0, sp, #128	; 0x80
   bec28:	f7f7 fe2f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bec2c:	b105      	cbz	r5, bec30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   bec2e:	686d      	ldr	r5, [r5, #4]
   bec30:	4621      	mov	r1, r4
   bec32:	a825      	add	r0, sp, #148	; 0x94
   bec34:	f7f7 fe29 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bec38:	b104      	cbz	r4, bec3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x210>
   bec3a:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bec3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bec3e:	2b04      	cmp	r3, #4
   bec40:	f73f af3c 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bec44:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bec46:	2b04      	cmp	r3, #4
   bec48:	f73f af38 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bec4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bec4e:	2b04      	cmp	r3, #4
   bec50:	f73f af34 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bec54:	2301      	movs	r3, #1
   bec56:	aa25      	add	r2, sp, #148	; 0x94
   bec58:	2104      	movs	r1, #4
   bec5a:	a839      	add	r0, sp, #228	; 0xe4
   bec5c:	f7f7 fbb6 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bec60:	ab46      	add	r3, sp, #280	; 0x118
   bec62:	4642      	mov	r2, r8
   bec64:	a920      	add	r1, sp, #128	; 0x80
   bec66:	a81b      	add	r0, sp, #108	; 0x6c
   bec68:	f7f7 feb8 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bec6c:	2600      	movs	r6, #0
   bec6e:	2100      	movs	r1, #0
   bec70:	a839      	add	r0, sp, #228	; 0xe4
   bec72:	f7f7 fb71 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bec76:	42b0      	cmp	r0, r6
   bec78:	dd46      	ble.n	bed08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bec7a:	2700      	movs	r7, #0
   bec7c:	2101      	movs	r1, #1
   bec7e:	a839      	add	r0, sp, #228	; 0xe4
   bec80:	f7f7 fb6a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bec84:	42b8      	cmp	r0, r7
   bec86:	dd3d      	ble.n	bed04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bec88:	f04f 0b00 	mov.w	fp, #0
   bec8c:	2102      	movs	r1, #2
   bec8e:	a839      	add	r0, sp, #228	; 0xe4
   bec90:	f7f7 fb62 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bec94:	4558      	cmp	r0, fp
   bec96:	dd33      	ble.n	bed00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bec98:	f04f 0900 	mov.w	r9, #0
   bec9c:	2103      	movs	r1, #3
   bec9e:	a839      	add	r0, sp, #228	; 0xe4
   beca0:	f7f7 fb5a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   beca4:	4548      	cmp	r0, r9
   beca6:	dd28      	ble.n	becfa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beca8:	f8cd 9000 	str.w	r9, [sp]
   becac:	465b      	mov	r3, fp
   becae:	463a      	mov	r2, r7
   becb0:	4631      	mov	r1, r6
   becb2:	4640      	mov	r0, r8
   becb4:	f7f7 fc60 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   becb8:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   becbc:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   becbe:	465b      	mov	r3, fp
   becc0:	463a      	mov	r2, r7
   becc2:	4631      	mov	r1, r6
   becc4:	a846      	add	r0, sp, #280	; 0x118
   becc6:	f7f7 fc57 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs <= rhs;
   becca:	9b05      	ldr	r3, [sp, #20]
   beccc:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   becd0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   becd4:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   becd8:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   becda:	465b      	mov	r3, fp
   becdc:	463a      	mov	r2, r7
   becde:	4631      	mov	r1, r6
   bece0:	a839      	add	r0, sp, #228	; 0xe4
  return lhs <= rhs;
   bece2:	bfcc      	ite	gt
   bece4:	f04f 0a00 	movgt.w	sl, #0
   bece8:	f04f 0a01 	movle.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   becec:	f7f7 fb9b 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   becf0:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   becf4:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   becf8:	e7d0      	b.n	bec9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   becfa:	f10b 0b01 	add.w	fp, fp, #1
   becfe:	e7c5      	b.n	bec8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bed00:	3701      	adds	r7, #1
   bed02:	e7bb      	b.n	bec7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bed04:	3601      	adds	r6, #1
   bed06:	e7b2      	b.n	bec6e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bed08:	a839      	add	r0, sp, #228	; 0xe4
   bed0a:	f7f7 fb1a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bed0e:	a825      	add	r0, sp, #148	; 0x94
   bed10:	f7f7 fb17 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bed14:	a820      	add	r0, sp, #128	; 0x80
   bed16:	f7f7 fb14 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bed1a:	a81b      	add	r0, sp, #108	; 0x6c
   bed1c:	e741      	b.n	beba2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bed1e:	a839      	add	r0, sp, #228	; 0xe4
   bed20:	f7f7 fdb3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bed24:	4629      	mov	r1, r5
   bed26:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bed28:	6876      	ldr	r6, [r6, #4]
   bed2a:	f7f7 fdae 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bed2e:	b105      	cbz	r5, bed32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bed30:	686d      	ldr	r5, [r5, #4]
   bed32:	4621      	mov	r1, r4
   bed34:	a846      	add	r0, sp, #280	; 0x118
   bed36:	f7f7 fda8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bed3a:	b104      	cbz	r4, bed3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bed3c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bed3e:	aa46      	add	r2, sp, #280	; 0x118
   bed40:	4641      	mov	r1, r8
   bed42:	a839      	add	r0, sp, #228	; 0xe4
   bed44:	f7f7 fb91 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bed48:	2300      	movs	r3, #0
  const int64_t flatsize =
   bed4a:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bed4e:	461f      	mov	r7, r3
   bed50:	4283      	cmp	r3, r0
   bed52:	eb77 020c 	sbcs.w	r2, r7, ip
   bed56:	da0c      	bge.n	bed72 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs <= rhs;
   bed58:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bed5c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bed60:	428a      	cmp	r2, r1
   bed62:	bfcc      	ite	gt
   bed64:	2200      	movgt	r2, #0
   bed66:	2201      	movle	r2, #1
   bed68:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bed6a:	3301      	adds	r3, #1
   bed6c:	f147 0700 	adc.w	r7, r7, #0
   bed70:	e7ee      	b.n	bed50 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bed72:	a846      	add	r0, sp, #280	; 0x118
   bed74:	f7f7 fae5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bed78:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
   bed7a:	f7f7 fae2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bed7e:	a839      	add	r0, sp, #228	; 0xe4
   bed80:	e70f      	b.n	beba2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bed82:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bed86:	4631      	mov	r1, r6
   bed88:	2f00      	cmp	r7, #0
   bed8a:	f000 808c 	beq.w	beea6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bed8e:	a82a      	add	r0, sp, #168	; 0xa8
   bed90:	f7f7 fd7b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bed94:	4629      	mov	r1, r5
   bed96:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bed98:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bed9c:	f7f7 fd75 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beda0:	b105      	cbz	r5, beda4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x378>
   beda2:	686d      	ldr	r5, [r5, #4]
   beda4:	4621      	mov	r1, r4
   beda6:	a834      	add	r0, sp, #208	; 0xd0
   beda8:	f7f7 fd6f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bedac:	b104      	cbz	r4, bedb0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bedae:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bedb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bedb2:	2b04      	cmp	r3, #4
   bedb4:	f73f ae82 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bedb8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bedba:	2b04      	cmp	r3, #4
   bedbc:	f73f ae7e 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bedc0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bedc2:	2b04      	cmp	r3, #4
   bedc4:	f73f ae7a 	bgt.w	beabc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bedc8:	2301      	movs	r3, #1
   bedca:	aa34      	add	r2, sp, #208	; 0xd0
   bedcc:	2104      	movs	r1, #4
   bedce:	a839      	add	r0, sp, #228	; 0xe4
   bedd0:	f7f7 fafc 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bedd4:	ab46      	add	r3, sp, #280	; 0x118
   bedd6:	4642      	mov	r2, r8
   bedd8:	a92f      	add	r1, sp, #188	; 0xbc
   bedda:	a82a      	add	r0, sp, #168	; 0xa8
   beddc:	f7f7 fdfe 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bede0:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bede4:	2700      	movs	r7, #0
   bede6:	2100      	movs	r1, #0
   bede8:	a839      	add	r0, sp, #228	; 0xe4
   bedea:	f7f7 fab5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bedee:	42b8      	cmp	r0, r7
   bedf0:	dd4e      	ble.n	bee90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bedf2:	f04f 0800 	mov.w	r8, #0
   bedf6:	2101      	movs	r1, #1
   bedf8:	a839      	add	r0, sp, #228	; 0xe4
   bedfa:	f7f7 faad 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bedfe:	4540      	cmp	r0, r8
   bee00:	dd44      	ble.n	bee8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bee02:	2600      	movs	r6, #0
   bee04:	2102      	movs	r1, #2
   bee06:	a839      	add	r0, sp, #228	; 0xe4
   bee08:	f7f7 faa6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee0c:	42b0      	cmp	r0, r6
   bee0e:	dd3a      	ble.n	bee86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bee10:	f04f 0900 	mov.w	r9, #0
   bee14:	2103      	movs	r1, #3
   bee16:	a839      	add	r0, sp, #228	; 0xe4
   bee18:	f7f7 fa9e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee1c:	4548      	cmp	r0, r9
   bee1e:	dd30      	ble.n	bee82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bee20:	f8cd 9000 	str.w	r9, [sp]
   bee24:	4633      	mov	r3, r6
   bee26:	4642      	mov	r2, r8
   bee28:	4639      	mov	r1, r7
   bee2a:	ee18 0a10 	vmov	r0, s16
   bee2e:	f7f7 fba3 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bee32:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bee36:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bee38:	4633      	mov	r3, r6
   bee3a:	4642      	mov	r2, r8
   bee3c:	4639      	mov	r1, r7
   bee3e:	a846      	add	r0, sp, #280	; 0x118
   bee40:	f7f7 fb9a 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bee44:	eb0b 02ca 	add.w	r2, fp, sl, lsl #3
   bee48:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
  return lhs <= rhs;
   bee4c:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bee50:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bee54:	6852      	ldr	r2, [r2, #4]
   bee56:	6849      	ldr	r1, [r1, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bee58:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   bee5c:	4298      	cmp	r0, r3
   bee5e:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bee62:	a839      	add	r0, sp, #228	; 0xe4
   bee64:	4633      	mov	r3, r6
   bee66:	4642      	mov	r2, r8
   bee68:	4639      	mov	r1, r7
  return lhs <= rhs;
   bee6a:	bfac      	ite	ge
   bee6c:	f04f 0a01 	movge.w	sl, #1
   bee70:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bee74:	f7f7 fad7 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bee78:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bee7c:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bee80:	e7c8      	b.n	bee14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bee82:	3601      	adds	r6, #1
   bee84:	e7be      	b.n	bee04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bee86:	f108 0801 	add.w	r8, r8, #1
   bee8a:	e7b4      	b.n	bedf6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bee8c:	3701      	adds	r7, #1
   bee8e:	e7aa      	b.n	bede6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bee90:	a839      	add	r0, sp, #228	; 0xe4
   bee92:	f7f7 fa56 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bee96:	a834      	add	r0, sp, #208	; 0xd0
   bee98:	f7f7 fa53 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bee9c:	a82f      	add	r0, sp, #188	; 0xbc
   bee9e:	f7f7 fa50 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   beea2:	a82a      	add	r0, sp, #168	; 0xa8
   beea4:	e67d      	b.n	beba2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   beea6:	a839      	add	r0, sp, #228	; 0xe4
   beea8:	f7f7 fcef 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beeac:	4629      	mov	r1, r5
   beeae:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   beeb0:	6877      	ldr	r7, [r6, #4]
   beeb2:	f7f7 fcea 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beeb6:	b105      	cbz	r5, beeba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   beeb8:	686d      	ldr	r5, [r5, #4]
   beeba:	4621      	mov	r1, r4
   beebc:	a846      	add	r0, sp, #280	; 0x118
   beebe:	f7f7 fce4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   beec2:	b104      	cbz	r4, beec6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   beec4:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   beec6:	aa46      	add	r2, sp, #280	; 0x118
   beec8:	4641      	mov	r1, r8
   beeca:	a839      	add	r0, sp, #228	; 0xe4
   beecc:	f7f7 facd 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   beed0:	2300      	movs	r3, #0
  const int64_t flatsize =
   beed2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   beed6:	f1a7 0208 	sub.w	r2, r7, #8
   beeda:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   beedc:	4619      	mov	r1, r3
   beede:	4283      	cmp	r3, r0
   beee0:	eb71 060e 	sbcs.w	r6, r1, lr
   beee4:	da0f      	bge.n	bef06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs <= rhs;
   beee6:	f852 6f08 	ldr.w	r6, [r2, #8]!
   beeea:	f855 7f08 	ldr.w	r7, [r5, #8]!
   beeee:	42b7      	cmp	r7, r6
   beef0:	686e      	ldr	r6, [r5, #4]
   beef2:	6857      	ldr	r7, [r2, #4]
   beef4:	41be      	sbcs	r6, r7
   beef6:	bfac      	ite	ge
   beef8:	2601      	movge	r6, #1
   beefa:	2600      	movlt	r6, #0
   beefc:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   beefe:	3301      	adds	r3, #1
   bef00:	f141 0100 	adc.w	r1, r1, #0
   bef04:	e7eb      	b.n	beede <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bef06:	a846      	add	r0, sp, #280	; 0x118
   bef08:	f7f7 fa1b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bef0c:	a83e      	add	r0, sp, #248	; 0xf8
   bef0e:	e734      	b.n	bed7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   bef10:	6933      	ldr	r3, [r6, #16]
   bef12:	68f0      	ldr	r0, [r6, #12]
   bef14:	f1c3 0900 	rsb	r9, r3, #0
   bef18:	692b      	ldr	r3, [r5, #16]
   bef1a:	f1c3 0800 	rsb	r8, r3, #0
   bef1e:	f7f5 f9e3 	bl	b42e8 <__aeabi_f2d>
   bef22:	ec41 0b10 	vmov	d0, r0, r1
   bef26:	a925      	add	r1, sp, #148	; 0x94
   bef28:	a820      	add	r0, sp, #128	; 0x80
   bef2a:	f7f6 f99f 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bef2e:	68e8      	ldr	r0, [r5, #12]
   bef30:	f7f5 f9da 	bl	b42e8 <__aeabi_f2d>
   bef34:	ec41 0b10 	vmov	d0, r0, r1
   bef38:	a92f      	add	r1, sp, #188	; 0xbc
   bef3a:	a82a      	add	r0, sp, #168	; 0xa8
   bef3c:	f7f6 f996 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bef40:	2308      	movs	r3, #8
   bef42:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bef46:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bef48:	9348      	str	r3, [sp, #288]	; 0x120
   bef4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bef4c:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bef50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bef52:	934b      	str	r3, [sp, #300]	; 0x12c
   bef54:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bef56:	934c      	str	r3, [sp, #304]	; 0x130
   bef58:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bef5c:	4631      	mov	r1, r6
   bef5e:	a834      	add	r0, sp, #208	; 0xd0
   bef60:	b1ff      	cbz	r7, befa2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x576>
   bef62:	f7f7 fc92 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bef66:	6872      	ldr	r2, [r6, #4]
   bef68:	9205      	str	r2, [sp, #20]
   bef6a:	4629      	mov	r1, r5
   bef6c:	a839      	add	r0, sp, #228	; 0xe4
   bef6e:	f7f7 fc8c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bef72:	4621      	mov	r1, r4
   bef74:	4640      	mov	r0, r8
   bef76:	686d      	ldr	r5, [r5, #4]
   bef78:	f7f7 fc87 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bef7c:	9a05      	ldr	r2, [sp, #20]
   bef7e:	b104      	cbz	r4, bef82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bef80:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(LessEqual);
   bef82:	9500      	str	r5, [sp, #0]
   bef84:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bef88:	ab39      	add	r3, sp, #228	; 0xe4
   bef8a:	a934      	add	r1, sp, #208	; 0xd0
   bef8c:	a846      	add	r0, sp, #280	; 0x118
   bef8e:	f7ff fc15 	bl	be7bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bef92:	4640      	mov	r0, r8
   bef94:	f7f7 f9d5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bef98:	a839      	add	r0, sp, #228	; 0xe4
   bef9a:	f7f7 f9d2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   bef9e:	a834      	add	r0, sp, #208	; 0xd0
   befa0:	e5ff      	b.n	beba2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   befa2:	f7f7 fc72 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   befa6:	6873      	ldr	r3, [r6, #4]
   befa8:	9305      	str	r3, [sp, #20]
   befaa:	4629      	mov	r1, r5
   befac:	a839      	add	r0, sp, #228	; 0xe4
   befae:	f7f7 fc6c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   befb2:	686b      	ldr	r3, [r5, #4]
   befb4:	9306      	str	r3, [sp, #24]
   befb6:	4621      	mov	r1, r4
   befb8:	4640      	mov	r0, r8
   befba:	f7f7 fc66 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   befbe:	b104      	cbz	r4, befc2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x596>
   befc0:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   befc2:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   befc6:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   befc8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   befca:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   befcc:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   befd0:	aa3e      	add	r2, sp, #248	; 0xf8
   befd2:	a939      	add	r1, sp, #228	; 0xe4
   befd4:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   befd6:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   befda:	f7f7 fa46 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   befde:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   befe2:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   befe4:	2500      	movs	r5, #0
  const int64_t flatsize =
   befe6:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   befe8:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   befea:	462b      	mov	r3, r5
   befec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   befee:	930b      	str	r3, [sp, #44]	; 0x2c
   beff0:	4545      	cmp	r5, r8
   beff2:	eb73 0202 	sbcs.w	r2, r3, r2
   beff6:	f280 80b1 	bge.w	bf15c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   beffa:	9b06      	ldr	r3, [sp, #24]
   beffc:	5d5f      	ldrb	r7, [r3, r5]
   beffe:	9b08      	ldr	r3, [sp, #32]
   bf000:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bf002:	9b05      	ldr	r3, [sp, #20]
   bf004:	5d58      	ldrb	r0, [r3, r5]
   bf006:	9b07      	ldr	r3, [sp, #28]
   bf008:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf00a:	465a      	mov	r2, fp
   bf00c:	4651      	mov	r1, sl
   bf00e:	fa00 f009 	lsl.w	r0, r0, r9
   bf012:	f7f7 fa67 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bf016:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf01a:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf01c:	ee18 2a10 	vmov	r2, s16
   bf020:	4631      	mov	r1, r6
   bf022:	4638      	mov	r0, r7
   bf024:	f7f7 fa5e 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs <= rhs;
   bf028:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf02a:	4283      	cmp	r3, r0
   bf02c:	bfcc      	ite	gt
   bf02e:	2000      	movgt	r0, #0
   bf030:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bf032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs <= rhs;
   bf034:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bf036:	3501      	adds	r5, #1
   bf038:	f143 0300 	adc.w	r3, r3, #0
   bf03c:	e7d6      	b.n	befec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bf03e:	6933      	ldr	r3, [r6, #16]
   bf040:	68f0      	ldr	r0, [r6, #12]
   bf042:	f1c3 0900 	rsb	r9, r3, #0
   bf046:	692b      	ldr	r3, [r5, #16]
   bf048:	f1c3 0800 	rsb	r8, r3, #0
   bf04c:	f7f5 f94c 	bl	b42e8 <__aeabi_f2d>
   bf050:	ec41 0b10 	vmov	d0, r0, r1
   bf054:	a925      	add	r1, sp, #148	; 0x94
   bf056:	a820      	add	r0, sp, #128	; 0x80
   bf058:	f7f6 f908 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bf05c:	68e8      	ldr	r0, [r5, #12]
   bf05e:	f7f5 f943 	bl	b42e8 <__aeabi_f2d>
   bf062:	ec41 0b10 	vmov	d0, r0, r1
   bf066:	a92f      	add	r1, sp, #188	; 0xbc
   bf068:	a82a      	add	r0, sp, #168	; 0xa8
   bf06a:	f7f6 f8ff 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bf06e:	2308      	movs	r3, #8
   bf070:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bf074:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bf076:	9348      	str	r3, [sp, #288]	; 0x120
   bf078:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bf07a:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bf07e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bf080:	934b      	str	r3, [sp, #300]	; 0x12c
   bf082:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bf084:	934c      	str	r3, [sp, #304]	; 0x130
   bf086:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bf08a:	4631      	mov	r1, r6
   bf08c:	a834      	add	r0, sp, #208	; 0xd0
   bf08e:	b1c7      	cbz	r7, bf0c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bf090:	f7f7 fbfb 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf094:	6872      	ldr	r2, [r6, #4]
   bf096:	9205      	str	r2, [sp, #20]
   bf098:	4629      	mov	r1, r5
   bf09a:	a839      	add	r0, sp, #228	; 0xe4
   bf09c:	f7f7 fbf5 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf0a0:	4621      	mov	r1, r4
   bf0a2:	4640      	mov	r0, r8
   bf0a4:	686d      	ldr	r5, [r5, #4]
   bf0a6:	f7f7 fbf0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf0aa:	9a05      	ldr	r2, [sp, #20]
   bf0ac:	b104      	cbz	r4, bf0b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bf0ae:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(LessEqual);
   bf0b0:	9500      	str	r5, [sp, #0]
   bf0b2:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bf0b6:	ab39      	add	r3, sp, #228	; 0xe4
   bf0b8:	a934      	add	r1, sp, #208	; 0xd0
   bf0ba:	a846      	add	r0, sp, #280	; 0x118
   bf0bc:	f7ff fc1a 	bl	be8f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bf0c0:	e767      	b.n	bef92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bf0c2:	f7f7 fbe2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf0c6:	6873      	ldr	r3, [r6, #4]
   bf0c8:	9305      	str	r3, [sp, #20]
   bf0ca:	4629      	mov	r1, r5
   bf0cc:	a839      	add	r0, sp, #228	; 0xe4
   bf0ce:	f7f7 fbdc 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf0d2:	686b      	ldr	r3, [r5, #4]
   bf0d4:	9306      	str	r3, [sp, #24]
   bf0d6:	4621      	mov	r1, r4
   bf0d8:	4640      	mov	r0, r8
   bf0da:	f7f7 fbd6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf0de:	b104      	cbz	r4, bf0e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bf0e0:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bf0e2:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bf0e6:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bf0e8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bf0ea:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bf0ec:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf0f0:	aa3e      	add	r2, sp, #248	; 0xf8
   bf0f2:	a939      	add	r1, sp, #228	; 0xe4
   bf0f4:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bf0f6:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf0fa:	f7f7 f9b6 	bl	b646a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bf0fe:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bf102:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bf104:	2500      	movs	r5, #0
  const int64_t flatsize =
   bf106:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf108:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bf10a:	462b      	mov	r3, r5
   bf10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bf10e:	930b      	str	r3, [sp, #44]	; 0x2c
   bf110:	4545      	cmp	r5, r8
   bf112:	eb73 0202 	sbcs.w	r2, r3, r2
   bf116:	da21      	bge.n	bf15c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bf118:	9b06      	ldr	r3, [sp, #24]
   bf11a:	575f      	ldrsb	r7, [r3, r5]
   bf11c:	9b08      	ldr	r3, [sp, #32]
   bf11e:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bf120:	9b05      	ldr	r3, [sp, #20]
   bf122:	5758      	ldrsb	r0, [r3, r5]
   bf124:	9b07      	ldr	r3, [sp, #28]
   bf126:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf128:	465a      	mov	r2, fp
   bf12a:	4651      	mov	r1, sl
   bf12c:	fa00 f009 	lsl.w	r0, r0, r9
   bf130:	f7f7 f9d8 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bf134:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf138:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf13a:	ee18 2a10 	vmov	r2, s16
   bf13e:	4631      	mov	r1, r6
   bf140:	4638      	mov	r0, r7
   bf142:	f7f7 f9cf 	bl	b64e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs <= rhs;
   bf146:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf148:	4283      	cmp	r3, r0
   bf14a:	bfcc      	ite	gt
   bf14c:	2000      	movgt	r0, #0
   bf14e:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bf150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs <= rhs;
   bf152:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bf154:	3501      	adds	r5, #1
   bf156:	f143 0300 	adc.w	r3, r3, #0
   bf15a:	e7d7      	b.n	bf10c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bf15c:	a83e      	add	r0, sp, #248	; 0xf8
   bf15e:	e719      	b.n	bef94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bf160:	4640      	mov	r0, r8
   bf162:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bf166:	4902      	ldr	r1, [pc, #8]	; (bf170 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bf168:	4798      	blx	r3
      return kTfLiteError;
   bf16a:	2001      	movs	r0, #1
   bf16c:	e51c      	b.n	beba8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bf16e:	bf00      	nop
   bf170:	000c89e7 	.word	0x000c89e7

000bf174 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
  }

  return kTfLiteOk;
}

bool LogicalOr(bool x, bool y) { return x || y; }
   bf174:	2800      	cmp	r0, #0
   bf176:	bf08      	it	eq
   bf178:	4608      	moveq	r0, r1
   bf17a:	4770      	bx	lr

000bf17c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:

TfLiteStatus LogicalOrEval(TfLiteContext* context, TfLiteNode* node) {
  return LogicalImpl(context, node, LogicalOr);
}

bool LogicalAnd(bool x, bool y) { return x && y; }
   bf17c:	2800      	cmp	r0, #0
   bf17e:	bf14      	ite	ne
   bf180:	4608      	movne	r0, r1
   bf182:	2000      	moveq	r0, #0
   bf184:	4770      	bx	lr
	...

000bf188 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
  // Init, Free, Prepare, Eval are satisfying the Interface required by
  // TfLiteRegistration.
  static TfLiteRegistration r = {/* init */ nullptr, /* free */ nullptr,
                                 /* prepare */ nullptr, logical::LogicalOrEval};
  return &r;
}
   bf188:	4800      	ldr	r0, [pc, #0]	; (bf18c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x4>)
   bf18a:	4770      	bx	lr
   bf18c:	2003c318 	.word	0x2003c318

000bf190 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:
  // TfLiteRegistration.
  static TfLiteRegistration r = {/* init */ nullptr, /* free */ nullptr,
                                 /* prepare */ nullptr,
                                 logical::LogicalAndEval};
  return &r;
}
   bf190:	4800      	ldr	r0, [pc, #0]	; (bf194 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x4>)
   bf192:	4770      	bx	lr
   bf194:	2003c338 	.word	0x2003c338

000bf198 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   bf198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf19c:	4699      	mov	r9, r3
  inline int32 DimensionsCount() const { return size_; }
   bf19e:	6807      	ldr	r7, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   bf1a0:	6813      	ldr	r3, [r2, #0]
   bf1a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   bf1a4:	429f      	cmp	r7, r3
   bf1a6:	4604      	mov	r4, r0
   bf1a8:	4688      	mov	r8, r1
   bf1aa:	4616      	mov	r6, r2
   bf1ac:	d001      	beq.n	bf1b2 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   bf1ae:	f005 fb25 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   bf1b2:	f04f 0a00 	mov.w	sl, #0
   bf1b6:	4557      	cmp	r7, sl
   bf1b8:	dd0d      	ble.n	bf1d6 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   bf1ba:	4651      	mov	r1, sl
   bf1bc:	4620      	mov	r0, r4
   bf1be:	f7f7 f8cb 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf1c2:	4651      	mov	r1, sl
   bf1c4:	4683      	mov	fp, r0
   bf1c6:	4630      	mov	r0, r6
   bf1c8:	f7f7 f8c6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf1cc:	4583      	cmp	fp, r0
   bf1ce:	d1ee      	bne.n	bf1ae <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf1d0:	f10a 0a01 	add.w	sl, sl, #1
   bf1d4:	e7ef      	b.n	bf1b6 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   bf1d6:	682b      	ldr	r3, [r5, #0]
   bf1d8:	429f      	cmp	r7, r3
   bf1da:	d1e8      	bne.n	bf1ae <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf1dc:	f04f 0a00 	mov.w	sl, #0
   bf1e0:	4557      	cmp	r7, sl
   bf1e2:	dd0d      	ble.n	bf200 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   bf1e4:	4651      	mov	r1, sl
   bf1e6:	4620      	mov	r0, r4
   bf1e8:	f7f7 f8b6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf1ec:	4651      	mov	r1, sl
   bf1ee:	4606      	mov	r6, r0
   bf1f0:	4628      	mov	r0, r5
   bf1f2:	f7f7 f8b1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf1f6:	4286      	cmp	r6, r0
   bf1f8:	d1d9      	bne.n	bf1ae <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf1fa:	f10a 0a01 	add.w	sl, sl, #1
   bf1fe:	e7ef      	b.n	bf1e0 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   bf200:	2f04      	cmp	r7, #4
   bf202:	bfcc      	ite	gt
   bf204:	6864      	ldrgt	r4, [r4, #4]
   bf206:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   bf208:	2300      	movs	r3, #0
    int buffer_size = 1;
   bf20a:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
   bf20e:	429f      	cmp	r7, r3
   bf210:	dd05      	ble.n	bf21e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   bf212:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   bf216:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   bf218:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   bf21c:	e7f7      	b.n	bf20e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   bf21e:	2400      	movs	r4, #0
   bf220:	4554      	cmp	r4, sl
   bf222:	da09      	bge.n	bf238 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   bf224:	f819 1004 	ldrb.w	r1, [r9, r4]
   bf228:	f818 0004 	ldrb.w	r0, [r8, r4]
   bf22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf22e:	4798      	blx	r3
   bf230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf232:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   bf234:	3401      	adds	r4, #1
   bf236:	e7f3      	b.n	bf220 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   bf238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf23c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   bf23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf240:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf242:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   bf244:	b0a5      	sub	sp, #148	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf246:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   bf248:	4614      	mov	r4, r2
   bf24a:	4605      	mov	r5, r0
   bf24c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   bf24e:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf250:	dd01      	ble.n	bf256 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   bf252:	f005 fad3 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bf256:	6823      	ldr	r3, [r4, #0]
   bf258:	2b04      	cmp	r3, #4
   bf25a:	dcfa      	bgt.n	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bf25c:	6813      	ldr	r3, [r2, #0]
   bf25e:	2b04      	cmp	r3, #4
   bf260:	dcf7      	bgt.n	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   bf262:	2301      	movs	r3, #1
   bf264:	2104      	movs	r1, #4
   bf266:	a805      	add	r0, sp, #20
   bf268:	f7f7 f8b0 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   bf26c:	462a      	mov	r2, r5
   bf26e:	2301      	movs	r3, #1
   bf270:	2104      	movs	r1, #4
   bf272:	a80a      	add	r0, sp, #40	; 0x28
   bf274:	f7f7 f8aa 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   bf278:	4622      	mov	r2, r4
   bf27a:	2301      	movs	r3, #1
   bf27c:	2104      	movs	r1, #4
   bf27e:	a80f      	add	r0, sp, #60	; 0x3c
   bf280:	f7f7 f8a4 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int desc1_stride = 1;
   bf284:	2501      	movs	r5, #1
   bf286:	f10d 0b5c 	add.w	fp, sp, #92	; 0x5c
   bf28a:	ae1f      	add	r6, sp, #124	; 0x7c
  int desc0_stride = 1;
   bf28c:	462f      	mov	r7, r5
  for (int i = N - 1; i >= 0; --i) {
   bf28e:	2403      	movs	r4, #3
    desc0_out->extents[i] = extended_input0_shape.Dims(i);
   bf290:	4621      	mov	r1, r4
   bf292:	a80a      	add	r0, sp, #40	; 0x28
   bf294:	f7f7 f860 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf298:	f84b 0904 	str.w	r0, [fp], #-4
    desc0_stride *= extended_input0_shape.Dims(i);
   bf29c:	4621      	mov	r1, r4
    desc0_out->strides[i] = desc0_stride;
   bf29e:	f8cb 7014 	str.w	r7, [fp, #20]
    desc0_stride *= extended_input0_shape.Dims(i);
   bf2a2:	a80a      	add	r0, sp, #40	; 0x28
   bf2a4:	f7f7 f858 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   bf2a8:	4621      	mov	r1, r4
    desc0_stride *= extended_input0_shape.Dims(i);
   bf2aa:	4347      	muls	r7, r0
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   bf2ac:	a80f      	add	r0, sp, #60	; 0x3c
   bf2ae:	f7f7 f853 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf2b2:	f846 0904 	str.w	r0, [r6], #-4
    desc1_stride *= extended_input1_shape.Dims(i);
   bf2b6:	4621      	mov	r1, r4
    desc1_out->strides[i] = desc1_stride;
   bf2b8:	6175      	str	r5, [r6, #20]
    desc1_stride *= extended_input1_shape.Dims(i);
   bf2ba:	a80f      	add	r0, sp, #60	; 0x3c
   bf2bc:	f7f7 f84c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   bf2c0:	3c01      	subs	r4, #1
    desc1_stride *= extended_input1_shape.Dims(i);
   bf2c2:	fb00 f505 	mul.w	r5, r0, r5
  for (int i = N - 1; i >= 0; --i) {
   bf2c6:	d2e3      	bcs.n	bf290 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x54>
  for (int i = 0; i < N; ++i) {
   bf2c8:	2400      	movs	r4, #0
   bf2ca:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   bf2ce:	ae14      	add	r6, sp, #80	; 0x50
   bf2d0:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   bf2d2:	4621      	mov	r1, r4
   bf2d4:	a80a      	add	r0, sp, #40	; 0x28
   bf2d6:	f7f7 f83f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   bf2da:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   bf2dc:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   bf2de:	a80f      	add	r0, sp, #60	; 0x3c
   bf2e0:	f7f7 f83a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   bf2e4:	4285      	cmp	r5, r0
   bf2e6:	d003      	beq.n	bf2f0 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xb4>
      if (extent0 == 1) {
   bf2e8:	2d01      	cmp	r5, #1
   bf2ea:	d160      	bne.n	bf3ae <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x172>
        desc0_out->strides[i] = 0;
   bf2ec:	6137      	str	r7, [r6, #16]
        desc0_out->extents[i] = extent1;
   bf2ee:	6030      	str	r0, [r6, #0]
  for (int i = 0; i < N; ++i) {
   bf2f0:	3401      	adds	r4, #1
   bf2f2:	2c04      	cmp	r4, #4
   bf2f4:	f108 0804 	add.w	r8, r8, #4
   bf2f8:	f106 0604 	add.w	r6, r6, #4
   bf2fc:	d1e9      	bne.n	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x96>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   bf2fe:	a80f      	add	r0, sp, #60	; 0x3c
   bf300:	f7f7 f81f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   bf304:	a80a      	add	r0, sp, #40	; 0x28
   bf306:	f7f7 f81c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf30a:	2500      	movs	r5, #0
   bf30c:	2100      	movs	r1, #0
   bf30e:	a805      	add	r0, sp, #20
   bf310:	f7f7 f822 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf314:	42a8      	cmp	r0, r5
   bf316:	dd59      	ble.n	bf3cc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x190>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf318:	2700      	movs	r7, #0
   bf31a:	f10d 0814 	add.w	r8, sp, #20
   bf31e:	2101      	movs	r1, #1
   bf320:	4640      	mov	r0, r8
   bf322:	f7f7 f819 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf326:	42b8      	cmp	r0, r7
   bf328:	dd4e      	ble.n	bf3c8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x18c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf32a:	f04f 0900 	mov.w	r9, #0
   bf32e:	2102      	movs	r1, #2
   bf330:	4640      	mov	r0, r8
   bf332:	f7f7 f811 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf336:	4548      	cmp	r0, r9
   bf338:	dd44      	ble.n	bf3c4 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x188>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf33a:	2600      	movs	r6, #0
   bf33c:	2103      	movs	r1, #3
   bf33e:	4640      	mov	r0, r8
   bf340:	f7f7 f80a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf344:	42b0      	cmp	r0, r6
   bf346:	dd3a      	ble.n	bf3be <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x182>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   bf348:	9905      	ldr	r1, [sp, #20]
   bf34a:	2904      	cmp	r1, #4
   bf34c:	d181      	bne.n	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   bf34e:	9906      	ldr	r1, [sp, #24]
   bf350:	428d      	cmp	r5, r1
   bf352:	f6bf af7e 	bge.w	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   bf356:	9c07      	ldr	r4, [sp, #28]
   bf358:	42a7      	cmp	r7, r4
   bf35a:	f6bf af7a 	bge.w	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   bf35e:	9b08      	ldr	r3, [sp, #32]
   bf360:	4599      	cmp	r9, r3
   bf362:	f6bf af76 	bge.w	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   bf366:	9809      	ldr	r0, [sp, #36]	; 0x24
   bf368:	4286      	cmp	r6, r0
   bf36a:	f6bf af72 	bge.w	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   bf36e:	fb04 7405 	mla	r4, r4, r5, r7
   bf372:	fb03 9404 	mla	r4, r3, r4, r9
   bf376:	fb00 6404 	mla	r4, r0, r4, r6
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf37a:	9600      	str	r6, [sp, #0]
   bf37c:	464b      	mov	r3, r9
   bf37e:	463a      	mov	r2, r7
   bf380:	4629      	mov	r1, r5
   bf382:	a814      	add	r0, sp, #80	; 0x50
   bf384:	f7f7 f8f8 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf388:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf38a:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf38c:	464b      	mov	r3, r9
   bf38e:	463a      	mov	r2, r7
   bf390:	4629      	mov	r1, r5
   bf392:	a81c      	add	r0, sp, #112	; 0x70
   bf394:	f7f7 f8f0 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   bf398:	9b03      	ldr	r3, [sp, #12]
   bf39a:	f81a 1000 	ldrb.w	r1, [sl, r0]
   bf39e:	f813 000b 	ldrb.w	r0, [r3, fp]
   bf3a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bf3a4:	4798      	blx	r3
   bf3a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf3a8:	3601      	adds	r6, #1
          output_data[out_idx] = func(in1_val, in2_val);
   bf3aa:	5518      	strb	r0, [r3, r4]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf3ac:	e7c6      	b.n	bf33c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x100>
        TFLITE_DCHECK_EQ(extent1, 1);
   bf3ae:	2801      	cmp	r0, #1
   bf3b0:	f47f af4f 	bne.w	bf252 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   bf3b4:	f8c8 7010 	str.w	r7, [r8, #16]
        desc1_out->extents[i] = extent0;
   bf3b8:	f8c8 5000 	str.w	r5, [r8]
   bf3bc:	e798      	b.n	bf2f0 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xb4>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf3be:	f109 0901 	add.w	r9, r9, #1
   bf3c2:	e7b4      	b.n	bf32e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xf2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf3c4:	3701      	adds	r7, #1
   bf3c6:	e7a8      	b.n	bf31a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xde>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf3c8:	3501      	adds	r5, #1
   bf3ca:	e79f      	b.n	bf30c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
  const RuntimeShape output_shape =
   bf3cc:	a805      	add	r0, sp, #20
   bf3ce:	f7f6 ffb8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bf3d2:	b025      	add	sp, #148	; 0x94
   bf3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf3d8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>:
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf3da:	680b      	ldr	r3, [r1, #0]
   bf3dc:	685d      	ldr	r5, [r3, #4]
   bf3de:	689e      	ldr	r6, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf3e0:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf3e2:	2438      	movs	r4, #56	; 0x38
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf3e4:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf3e6:	fb04 0505 	mla	r5, r4, r5, r0
   bf3ea:	fb04 0606 	mla	r6, r4, r6, r0
  if (HaveSameShapes(input1, input2)) {
   bf3ee:	4631      	mov	r1, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf3f0:	fb04 0403 	mla	r4, r4, r3, r0
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf3f4:	b095      	sub	sp, #84	; 0x54
  if (HaveSameShapes(input1, input2)) {
   bf3f6:	4628      	mov	r0, r5
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf3f8:	4617      	mov	r7, r2
  if (HaveSameShapes(input1, input2)) {
   bf3fa:	f7f5 fecf 	bl	b519c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf3fe:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   bf400:	b330      	cbz	r0, bf450 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf402:	a80f      	add	r0, sp, #60	; 0x3c
   bf404:	f7f7 fa41 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf408:	b105      	cbz	r5, bf40c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x34>
   bf40a:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf40c:	4631      	mov	r1, r6
   bf40e:	a80a      	add	r0, sp, #40	; 0x28
   bf410:	f7f7 fa3b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf414:	b106      	cbz	r6, bf418 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x40>
   bf416:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf418:	4621      	mov	r1, r4
   bf41a:	a805      	add	r0, sp, #20
   bf41c:	f7f7 fa35 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf420:	b104      	cbz	r4, bf424 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x4c>
   bf422:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   bf424:	ab05      	add	r3, sp, #20
   bf426:	9300      	str	r3, [sp, #0]
   bf428:	e9cd 4701 	strd	r4, r7, [sp, #4]
   bf42c:	4633      	mov	r3, r6
   bf42e:	aa0a      	add	r2, sp, #40	; 0x28
   bf430:	4629      	mov	r1, r5
   bf432:	a80f      	add	r0, sp, #60	; 0x3c
   bf434:	f7ff feb0 	bl	bf198 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf438:	a805      	add	r0, sp, #20
   bf43a:	f7f6 ff82 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf43e:	a80a      	add	r0, sp, #40	; 0x28
   bf440:	f7f6 ff7f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf444:	a80f      	add	r0, sp, #60	; 0x3c
   bf446:	f7f6 ff7c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bf44a:	2000      	movs	r0, #0
   bf44c:	b015      	add	sp, #84	; 0x54
   bf44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf450:	a80f      	add	r0, sp, #60	; 0x3c
   bf452:	f7f7 fa1a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf456:	b105      	cbz	r5, bf45a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x82>
   bf458:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf45a:	4631      	mov	r1, r6
   bf45c:	a80a      	add	r0, sp, #40	; 0x28
   bf45e:	f7f7 fa14 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf462:	b106      	cbz	r6, bf466 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x8e>
   bf464:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf466:	4621      	mov	r1, r4
   bf468:	a805      	add	r0, sp, #20
   bf46a:	f7f7 fa0e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf46e:	b104      	cbz	r4, bf472 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x9a>
   bf470:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   bf472:	ab05      	add	r3, sp, #20
   bf474:	9300      	str	r3, [sp, #0]
   bf476:	e9cd 4701 	strd	r4, r7, [sp, #4]
   bf47a:	4633      	mov	r3, r6
   bf47c:	aa0a      	add	r2, sp, #40	; 0x28
   bf47e:	4629      	mov	r1, r5
   bf480:	a80f      	add	r0, sp, #60	; 0x3c
   bf482:	f7ff fedb 	bl	bf23c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   bf486:	e7d7      	b.n	bf438 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x60>

000bf488 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
   bf488:	4a01      	ldr	r2, [pc, #4]	; (bf490 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   bf48a:	6880      	ldr	r0, [r0, #8]
   bf48c:	f7ff bfa4 	b.w	bf3d8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>
   bf490:	000bf17d 	.word	0x000bf17d

000bf494 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
   bf494:	4a01      	ldr	r2, [pc, #4]	; (bf49c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   bf496:	6880      	ldr	r0, [r0, #8]
   bf498:	f7ff bf9e 	b.w	bf3d8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>
   bf49c:	000bf175 	.word	0x000bf175

000bf4a0 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
namespace micro {
namespace quantize {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   bf4a0:	2000      	movs	r0, #0
   bf4a2:	4770      	bx	lr

000bf4a4 <_ZN6tflite3ops5micro8quantize4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   bf4a4:	4770      	bx	lr
	...

000bf4a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   bf4aa:	680f      	ldr	r7, [r1, #0]
   bf4ac:	683c      	ldr	r4, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bf4ae:	2c01      	cmp	r4, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf4b0:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bf4b2:	d00d      	beq.n	bf4d0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   bf4b4:	2501      	movs	r5, #1
   bf4b6:	4a31      	ldr	r2, [pc, #196]	; (bf57c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   bf4b8:	9201      	str	r2, [sp, #4]
   bf4ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
   bf4be:	4a30      	ldr	r2, [pc, #192]	; (bf580 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
   bf4c0:	9200      	str	r2, [sp, #0]
   bf4c2:	6944      	ldr	r4, [r0, #20]
   bf4c4:	2322      	movs	r3, #34	; 0x22
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];

  // TODO(b/128934713): Add support for fixed-point per-channel quantization.
  // Currently this only support affine per-layer quantization.
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   bf4c6:	4a2f      	ldr	r2, [pc, #188]	; (bf584 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf4c8:	492f      	ldr	r1, [pc, #188]	; (bf588 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   bf4ca:	47a0      	blx	r4
   bf4cc:	462c      	mov	r4, r5
   bf4ce:	e00e      	b.n	bf4ee <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   bf4d0:	684a      	ldr	r2, [r1, #4]
   bf4d2:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bf4d4:	2d01      	cmp	r5, #1
   bf4d6:	d00d      	beq.n	bf4f4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   bf4d8:	4a28      	ldr	r2, [pc, #160]	; (bf57c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   bf4da:	9201      	str	r2, [sp, #4]
   bf4dc:	e9cd 5402 	strd	r5, r4, [sp, #8]
   bf4e0:	4a2a      	ldr	r2, [pc, #168]	; (bf58c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
   bf4e2:	9200      	str	r2, [sp, #0]
   bf4e4:	6945      	ldr	r5, [r0, #20]
   bf4e6:	4a27      	ldr	r2, [pc, #156]	; (bf584 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf4e8:	4927      	ldr	r1, [pc, #156]	; (bf588 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   bf4ea:	2323      	movs	r3, #35	; 0x23
   bf4ec:	47a8      	blx	r5
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32);
  TF_LITE_ENSURE(context,
                 output->type == kTfLiteUInt8 || output->type == kTfLiteInt8);

  return kTfLiteOk;
}
   bf4ee:	4620      	mov	r0, r4
   bf4f0:	b005      	add	sp, #20
   bf4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf4f4:	6852      	ldr	r2, [r2, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf4f6:	6881      	ldr	r1, [r0, #8]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf4f8:	2638      	movs	r6, #56	; 0x38
   bf4fa:	4372      	muls	r2, r6
   bf4fc:	eb01 0c02 	add.w	ip, r1, r2
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   bf500:	f89c 4030 	ldrb.w	r4, [ip, #48]	; 0x30
   bf504:	2c01      	cmp	r4, #1
   bf506:	d008      	beq.n	bf51a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   bf508:	4a21      	ldr	r2, [pc, #132]	; (bf590 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   bf50a:	9201      	str	r2, [sp, #4]
   bf50c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   bf510:	4a20      	ldr	r2, [pc, #128]	; (bf594 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   bf512:	9200      	str	r2, [sp, #0]
   bf514:	6944      	ldr	r4, [r0, #20]
   bf516:	232a      	movs	r3, #42	; 0x2a
   bf518:	e7d5      	b.n	bf4c6 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  const auto* affine_quantization =
   bf51a:	f8dc 5034 	ldr.w	r5, [ip, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   bf51e:	b93d      	cbnz	r5, bf530 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x88>
   bf520:	4a1d      	ldr	r2, [pc, #116]	; (bf598 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
   bf522:	9200      	str	r2, [sp, #0]
   bf524:	6945      	ldr	r5, [r0, #20]
   bf526:	232e      	movs	r3, #46	; 0x2e
  TF_LITE_ENSURE(context,
   bf528:	4a16      	ldr	r2, [pc, #88]	; (bf584 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf52a:	491c      	ldr	r1, [pc, #112]	; (bf59c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   bf52c:	47a8      	blx	r5
   bf52e:	e7de      	b.n	bf4ee <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   bf530:	682d      	ldr	r5, [r5, #0]
   bf532:	b925      	cbnz	r5, bf53e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
   bf534:	4a1a      	ldr	r2, [pc, #104]	; (bf5a0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   bf536:	9200      	str	r2, [sp, #0]
   bf538:	6945      	ldr	r5, [r0, #20]
   bf53a:	232f      	movs	r3, #47	; 0x2f
   bf53c:	e7f4      	b.n	bf528 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
   bf53e:	682d      	ldr	r5, [r5, #0]
   bf540:	2d01      	cmp	r5, #1
   bf542:	d004      	beq.n	bf54e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
   bf544:	4a17      	ldr	r2, [pc, #92]	; (bf5a4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   bf546:	9200      	str	r2, [sp, #0]
   bf548:	6945      	ldr	r5, [r0, #20]
   bf54a:	2330      	movs	r3, #48	; 0x30
   bf54c:	e7ec      	b.n	bf528 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf54e:	687d      	ldr	r5, [r7, #4]
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32);
   bf550:	4375      	muls	r5, r6
   bf552:	5d4d      	ldrb	r5, [r1, r5]
   bf554:	2d01      	cmp	r5, #1
   bf556:	d004      	beq.n	bf562 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xba>
   bf558:	4a13      	ldr	r2, [pc, #76]	; (bf5a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   bf55a:	9200      	str	r2, [sp, #0]
   bf55c:	6945      	ldr	r5, [r0, #20]
   bf55e:	2332      	movs	r3, #50	; 0x32
   bf560:	e7e2      	b.n	bf528 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TF_LITE_ENSURE(context,
   bf562:	5c8a      	ldrb	r2, [r1, r2]
   bf564:	2a03      	cmp	r2, #3
   bf566:	d006      	beq.n	bf576 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
   bf568:	2a09      	cmp	r2, #9
   bf56a:	d004      	beq.n	bf576 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
   bf56c:	4a0f      	ldr	r2, [pc, #60]	; (bf5ac <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   bf56e:	9200      	str	r2, [sp, #0]
   bf570:	6945      	ldr	r5, [r0, #20]
   bf572:	2333      	movs	r3, #51	; 0x33
   bf574:	e7d8      	b.n	bf528 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return kTfLiteOk;
   bf576:	2400      	movs	r4, #0
   bf578:	e7b9      	b.n	bf4ee <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
   bf57a:	bf00      	nop
   bf57c:	000c8aca 	.word	0x000c8aca
   bf580:	000c830c 	.word	0x000c830c
   bf584:	000c8a1a 	.word	0x000c8a1a
   bf588:	000c6fd5 	.word	0x000c6fd5
   bf58c:	000c831c 	.word	0x000c831c
   bf590:	000c6fef 	.word	0x000c6fef
   bf594:	000c8a8c 	.word	0x000c8a8c
   bf598:	000c703c 	.word	0x000c703c
   bf59c:	000c6f40 	.word	0x000c6f40
   bf5a0:	000c7050 	.word	0x000c7050
   bf5a4:	000c8aa6 	.word	0x000c8aa6
   bf5a8:	000c8acc 	.word	0x000c8acc
   bf5ac:	000c8aea 	.word	0x000c8aea

000bf5b0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5b4:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf5b6:	6849      	ldr	r1, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5b8:	f8d0 b008 	ldr.w	fp, [r0, #8]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf5bc:	6849      	ldr	r1, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5be:	685b      	ldr	r3, [r3, #4]
   bf5c0:	2238      	movs	r2, #56	; 0x38
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf5c2:	fb02 fa01 	mul.w	sl, r2, r1
   bf5c6:	eb0b 050a 	add.w	r5, fp, sl
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf5ca:	b08d      	sub	sp, #52	; 0x34
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5cc:	4353      	muls	r3, r2
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf5ce:	4680      	mov	r8, r0

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = output->params.scale;
   bf5d0:	68e8      	ldr	r0, [r5, #12]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5d2:	9301      	str	r3, [sp, #4]
   bf5d4:	eb0b 0403 	add.w	r4, fp, r3
  op_params.scale = output->params.scale;
   bf5d8:	f7f4 fe86 	bl	b42e8 <__aeabi_f2d>
  switch (output->type) {
   bf5dc:	f81b 200a 	ldrb.w	r2, [fp, sl]
  op_params.zero_point = output->params.zero_point;
   bf5e0:	f8d5 9010 	ldr.w	r9, [r5, #16]
  switch (output->type) {
   bf5e4:	2a03      	cmp	r2, #3
  op_params.scale = output->params.scale;
   bf5e6:	4606      	mov	r6, r0
   bf5e8:	460f      	mov	r7, r1
  switch (output->type) {
   bf5ea:	d033      	beq.n	bf654 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   bf5ec:	2a09      	cmp	r2, #9
   bf5ee:	9b01      	ldr	r3, [sp, #4]
   bf5f0:	d166      	bne.n	bf6c0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    case kTfLiteInt8:
      reference_ops::AffineQuantize(
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf5f2:	4621      	mov	r1, r4
   bf5f4:	a802      	add	r0, sp, #8
   bf5f6:	f7f7 f948 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf5fa:	b104      	cbz	r4, bf5fe <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
   bf5fc:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   bf5fe:	4629      	mov	r1, r5
   bf600:	a807      	add	r0, sp, #28
   bf602:	f7f7 f942 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const RuntimeShape& input_shape,
                           const float* input_data,
                           const RuntimeShape& output_shape, T* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = static_cast<double>(op_params.scale);
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   bf606:	a907      	add	r1, sp, #28
   bf608:	a802      	add	r0, sp, #8
   bf60a:	f7f9 fadf 	bl	b8bcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   bf60e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   bf612:	4680      	mov	r8, r0
  static constexpr int32 min_val = std::numeric_limits<T>::min();
  static constexpr int32 max_val = std::numeric_limits<T>::max();

  for (int i = 0; i < flat_size; i++) {
   bf614:	2500      	movs	r5, #0
    const float val = input_data[i];
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
   bf616:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   bf61a:	45a8      	cmp	r8, r5
   bf61c:	dd46      	ble.n	bf6ac <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
   bf61e:	f854 0b04 	ldr.w	r0, [r4], #4
   bf622:	f7f4 fe61 	bl	b42e8 <__aeabi_f2d>
   bf626:	4632      	mov	r2, r6
   bf628:	463b      	mov	r3, r7
   bf62a:	f7f4 ffdf 	bl	b45ec <__aeabi_ddiv>
   bf62e:	ec41 0b10 	vmov	d0, r0, r1
   bf632:	f005 fdd7 	bl	c51e4 <round>
   bf636:	ec51 0b10 	vmov	r0, r1, d0
   bf63a:	f7f5 f947 	bl	b48cc <__aeabi_d2iz>
   bf63e:	4448      	add	r0, r9
    output_data[i] = clamped;
   bf640:	287f      	cmp	r0, #127	; 0x7f
   bf642:	bfa8      	it	ge
   bf644:	207f      	movge	r0, #127	; 0x7f
   bf646:	4558      	cmp	r0, fp
   bf648:	bfb8      	it	lt
   bf64a:	4658      	movlt	r0, fp
   bf64c:	f80a 0005 	strb.w	r0, [sl, r5]
  for (int i = 0; i < flat_size; i++) {
   bf650:	3501      	adds	r5, #1
   bf652:	e7e2      	b.n	bf61a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      break;
    case kTfLiteUInt8:
      reference_ops::AffineQuantize(
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf654:	4621      	mov	r1, r4
   bf656:	a802      	add	r0, sp, #8
   bf658:	f7f7 f917 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf65c:	b104      	cbz	r4, bf660 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   bf65e:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   bf660:	4629      	mov	r1, r5
   bf662:	a807      	add	r0, sp, #28
   bf664:	f7f7 f911 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   bf668:	a907      	add	r1, sp, #28
   bf66a:	a802      	add	r0, sp, #8
   bf66c:	f7f9 faae 	bl	b8bcc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   bf670:	f8d5 a004 	ldr.w	sl, [r5, #4]
   bf674:	4680      	mov	r8, r0
  for (int i = 0; i < flat_size; i++) {
   bf676:	2500      	movs	r5, #0
   bf678:	45a8      	cmp	r8, r5
   bf67a:	dd17      	ble.n	bf6ac <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
   bf67c:	f854 0b04 	ldr.w	r0, [r4], #4
   bf680:	f7f4 fe32 	bl	b42e8 <__aeabi_f2d>
   bf684:	463b      	mov	r3, r7
   bf686:	4632      	mov	r2, r6
   bf688:	f7f4 ffb0 	bl	b45ec <__aeabi_ddiv>
   bf68c:	ec41 0b10 	vmov	d0, r0, r1
   bf690:	f005 fda8 	bl	c51e4 <round>
   bf694:	ec51 0b10 	vmov	r0, r1, d0
   bf698:	f7f5 f918 	bl	b48cc <__aeabi_d2iz>
   bf69c:	eb00 0309 	add.w	r3, r0, r9
    output_data[i] = clamped;
   bf6a0:	f383 0308 	usat	r3, #8, r3
   bf6a4:	f80a 3005 	strb.w	r3, [sl, r5]
  for (int i = 0; i < flat_size; i++) {
   bf6a8:	3501      	adds	r5, #1
   bf6aa:	e7e5      	b.n	bf678 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
   bf6ac:	a807      	add	r0, sp, #28
   bf6ae:	f7f6 fe48 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf6b2:	a802      	add	r0, sp, #8
   bf6b4:	f7f6 fe45 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      context->ReportError(context, "Output type %s (%d) not supported",
                           TfLiteTypeGetName(input->type), output->type);
      return kTfLiteError;
  }

  return kTfLiteOk;
   bf6b8:	2000      	movs	r0, #0
}
   bf6ba:	b00d      	add	sp, #52	; 0x34
   bf6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      context->ReportError(context, "Output type %s (%d) not supported",
   bf6c0:	f81b 0003 	ldrb.w	r0, [fp, r3]
   bf6c4:	f8d8 4014 	ldr.w	r4, [r8, #20]
   bf6c8:	f7f5 fa5c 	bl	b4b84 <TfLiteTypeGetName>
   bf6cc:	f81b 300a 	ldrb.w	r3, [fp, sl]
   bf6d0:	4902      	ldr	r1, [pc, #8]	; (bf6dc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x12c>)
   bf6d2:	4602      	mov	r2, r0
   bf6d4:	4640      	mov	r0, r8
   bf6d6:	47a0      	blx	r4
      return kTfLiteError;
   bf6d8:	2001      	movs	r0, #1
   bf6da:	e7ee      	b.n	bf6ba <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
   bf6dc:	000c8b26 	.word	0x000c8b26

000bf6e0 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
// quantized output, in int8 or uint8 format.
TfLiteRegistration* Register_QUANTIZE() {
  static TfLiteRegistration r = {quantize::Init, quantize::Free,
                                 quantize::Prepare, quantize::Eval};
  return &r;
}
   bf6e0:	4800      	ldr	r0, [pc, #0]	; (bf6e4 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x4>)
   bf6e2:	4770      	bx	lr
   bf6e4:	2003c358 	.word	0x2003c358

000bf6e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf6e8:	b530      	push	{r4, r5, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   bf6ea:	680a      	ldr	r2, [r1, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   bf6ec:	6812      	ldr	r2, [r2, #0]
   bf6ee:	3a01      	subs	r2, #1
   bf6f0:	2a01      	cmp	r2, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf6f2:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   bf6f4:	d909      	bls.n	bf70a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   bf6f6:	4a0e      	ldr	r2, [pc, #56]	; (bf730 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>)
   bf6f8:	9200      	str	r2, [sp, #0]
   bf6fa:	6944      	ldr	r4, [r0, #20]
   bf6fc:	4a0d      	ldr	r2, [pc, #52]	; (bf734 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>)
   bf6fe:	490e      	ldr	r1, [pc, #56]	; (bf738 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x50>)
   bf700:	2347      	movs	r3, #71	; 0x47
   bf702:	47a0      	blx	r4
   bf704:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  return kTfLiteOk;
}
   bf706:	b005      	add	sp, #20
   bf708:	bd30      	pop	{r4, r5, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   bf70a:	684a      	ldr	r2, [r1, #4]
   bf70c:	6812      	ldr	r2, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bf70e:	2a01      	cmp	r2, #1
   bf710:	d00c      	beq.n	bf72c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x44>
   bf712:	2401      	movs	r4, #1
   bf714:	e9cd 2402 	strd	r2, r4, [sp, #8]
   bf718:	4a08      	ldr	r2, [pc, #32]	; (bf73c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x54>)
   bf71a:	9201      	str	r2, [sp, #4]
   bf71c:	4a08      	ldr	r2, [pc, #32]	; (bf740 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x58>)
   bf71e:	9200      	str	r2, [sp, #0]
   bf720:	6945      	ldr	r5, [r0, #20]
   bf722:	4a04      	ldr	r2, [pc, #16]	; (bf734 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>)
   bf724:	4907      	ldr	r1, [pc, #28]	; (bf744 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x5c>)
   bf726:	2348      	movs	r3, #72	; 0x48
   bf728:	47a8      	blx	r5
   bf72a:	e7eb      	b.n	bf704 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
  return kTfLiteOk;
   bf72c:	2000      	movs	r0, #0
   bf72e:	e7ea      	b.n	bf706 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   bf730:	000c8bb9 	.word	0x000c8bb9
   bf734:	000c8b48 	.word	0x000c8b48
   bf738:	000c6f40 	.word	0x000c6f40
   bf73c:	000c8aca 	.word	0x000c8aca
   bf740:	000c831c 	.word	0x000c831c
   bf744:	000c6fd5 	.word	0x000c6fd5

000bf748 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   bf748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf74c:	f8d1 c000 	ldr.w	ip, [r1]
   bf750:	6886      	ldr	r6, [r0, #8]
   bf752:	f8dc 7004 	ldr.w	r7, [ip, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf756:	6849      	ldr	r1, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf758:	2338      	movs	r3, #56	; 0x38
   bf75a:	435f      	muls	r7, r3
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf75c:	684d      	ldr	r5, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf75e:	19f2      	adds	r2, r6, r7
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf760:	435d      	muls	r5, r3
  for (int i = 0; i < dims->size; ++i) {
   bf762:	6893      	ldr	r3, [r2, #8]
   bf764:	f853 8b04 	ldr.w	r8, [r3], #4
   bf768:	b085      	sub	sp, #20
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf76a:	eb06 0e05 	add.w	lr, r6, r5
  for (int i = 0; i < dims->size; ++i) {
   bf76e:	2200      	movs	r2, #0
  int64_t count = 1;
   bf770:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
   bf772:	4590      	cmp	r8, r2
   bf774:	dd05      	ble.n	bf782 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3a>
    count *= dims->data[i];
   bf776:	f853 4b04 	ldr.w	r4, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
   bf77a:	3201      	adds	r2, #1
    count *= dims->data[i];
   bf77c:	fba1 1404 	umull	r1, r4, r1, r4
  for (int i = 0; i < dims->size; ++i) {
   bf780:	e7f7      	b.n	bf772 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf782:	f8dc 3000 	ldr.w	r3, [ip]
  TfLiteIntArray* output_shape = output->dims;
   bf786:	f8de 2008 	ldr.w	r2, [lr, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf78a:	2b01      	cmp	r3, #1
   bf78c:	d105      	bne.n	bf79a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   bf78e:	6813      	ldr	r3, [r2, #0]
   bf790:	2b01      	cmp	r3, #1
   bf792:	d102      	bne.n	bf79a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf794:	6853      	ldr	r3, [r2, #4]
   bf796:	b903      	cbnz	r3, bf79a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    output_shape->size = 0;
   bf798:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
   bf79a:	4696      	mov	lr, r2
   bf79c:	f04f 0c00 	mov.w	ip, #0
   bf7a0:	f85e 9b04 	ldr.w	r9, [lr], #4
  int stretch_dim = -1;
   bf7a4:	f04f 34ff 	mov.w	r4, #4294967295
  int num_output_elements = 1;
   bf7a8:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   bf7aa:	45e1      	cmp	r9, ip
   bf7ac:	dd1d      	ble.n	bf7ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
    int value = output_shape->data[i];
   bf7ae:	f85e 8b04 	ldr.w	r8, [lr], #4
    if (value == -1) {
   bf7b2:	f1b8 3fff 	cmp.w	r8, #4294967295
   bf7b6:	d111      	bne.n	bf7dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x94>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   bf7b8:	f1b4 3fff 	cmp.w	r4, #4294967295
   bf7bc:	d013      	beq.n	bf7e6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
   bf7be:	4b1e      	ldr	r3, [pc, #120]	; (bf838 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf0>)
   bf7c0:	9301      	str	r3, [sp, #4]
   bf7c2:	e9cd 4802 	strd	r4, r8, [sp, #8]
   bf7c6:	4b1d      	ldr	r3, [pc, #116]	; (bf83c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>)
   bf7c8:	9300      	str	r3, [sp, #0]
   bf7ca:	6944      	ldr	r4, [r0, #20]
   bf7cc:	2336      	movs	r3, #54	; 0x36
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   bf7ce:	4a1c      	ldr	r2, [pc, #112]	; (bf840 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>)
   bf7d0:	491c      	ldr	r1, [pc, #112]	; (bf844 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>)
   bf7d2:	47a0      	blx	r4
   bf7d4:	2001      	movs	r0, #1
}
   bf7d6:	b005      	add	sp, #20
   bf7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      num_output_elements *= value;
   bf7dc:	fb08 f303 	mul.w	r3, r8, r3
  for (int i = 0; i < output_shape->size; ++i) {
   bf7e0:	f10c 0c01 	add.w	ip, ip, #1
   bf7e4:	e7e1      	b.n	bf7aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
   bf7e6:	4664      	mov	r4, ip
   bf7e8:	e7fa      	b.n	bf7e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x98>
  if (stretch_dim != -1) {
   bf7ea:	f1b4 3fff 	cmp.w	r4, #4294967295
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   bf7ee:	bf1e      	ittt	ne
   bf7f0:	eb02 0284 	addne.w	r2, r2, r4, lsl #2
   bf7f4:	fb91 fcf3 	sdivne	ip, r1, r3
   bf7f8:	f8c2 c004 	strne.w	ip, [r2, #4]
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   bf7fc:	5df2      	ldrb	r2, [r6, r7]
   bf7fe:	5d74      	ldrb	r4, [r6, r5]
    num_output_elements *= output_shape->data[stretch_dim];
   bf800:	bf18      	it	ne
   bf802:	fb0c f303 	mulne.w	r3, ip, r3
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   bf806:	42a2      	cmp	r2, r4
   bf808:	d008      	beq.n	bf81c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd4>
   bf80a:	4b0f      	ldr	r3, [pc, #60]	; (bf848 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x100>)
   bf80c:	9301      	str	r3, [sp, #4]
   bf80e:	e9cd 2402 	strd	r2, r4, [sp, #8]
   bf812:	4b0e      	ldr	r3, [pc, #56]	; (bf84c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>)
   bf814:	9300      	str	r3, [sp, #0]
   bf816:	6944      	ldr	r4, [r0, #20]
   bf818:	2341      	movs	r3, #65	; 0x41
   bf81a:	e7d8      	b.n	bf7ce <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x86>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   bf81c:	428b      	cmp	r3, r1
   bf81e:	d008      	beq.n	bf832 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
   bf820:	e9cd 1302 	strd	r1, r3, [sp, #8]
   bf824:	4b0a      	ldr	r3, [pc, #40]	; (bf850 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x108>)
   bf826:	9301      	str	r3, [sp, #4]
   bf828:	4b0a      	ldr	r3, [pc, #40]	; (bf854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10c>)
   bf82a:	9300      	str	r3, [sp, #0]
   bf82c:	6944      	ldr	r4, [r0, #20]
   bf82e:	2342      	movs	r3, #66	; 0x42
   bf830:	e7cd      	b.n	bf7ce <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
   bf832:	2000      	movs	r0, #0
   bf834:	e7cf      	b.n	bf7d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
   bf836:	bf00      	nop
   bf838:	000c8be6 	.word	0x000c8be6
   bf83c:	000c8be9 	.word	0x000c8be9
   bf840:	000c8b48 	.word	0x000c8b48
   bf844:	000c6fd5 	.word	0x000c6fd5
   bf848:	000c8464 	.word	0x000c8464
   bf84c:	000c706b 	.word	0x000c706b
   bf850:	000c8bf5 	.word	0x000c8bf5
   bf854:	000c8c09 	.word	0x000c8c09

000bf858 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf858:	b570      	push	{r4, r5, r6, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf85a:	680a      	ldr	r2, [r1, #0]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf85c:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf85e:	6884      	ldr	r4, [r0, #8]
   bf860:	6855      	ldr	r5, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf862:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  if (ReshapeOutput(context, node) != kTfLiteOk) {
   bf864:	f7ff ff70 	bl	bf748 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   bf868:	b970      	cbnz	r0, bf888 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf86a:	2338      	movs	r3, #56	; 0x38
   bf86c:	fb03 4205 	mla	r2, r3, r5, r4
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf870:	fb03 4406 	mla	r4, r3, r6, r4
    return kTfLiteError;
  }

  for (int i = 0; i < input->bytes; ++i) {
   bf874:	4603      	mov	r3, r0
   bf876:	6991      	ldr	r1, [r2, #24]
   bf878:	4299      	cmp	r1, r3
   bf87a:	d906      	bls.n	bf88a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    output->data.raw[i] = input->data.raw[i];
   bf87c:	6851      	ldr	r1, [r2, #4]
   bf87e:	5ccd      	ldrb	r5, [r1, r3]
   bf880:	6861      	ldr	r1, [r4, #4]
   bf882:	54cd      	strb	r5, [r1, r3]
  for (int i = 0; i < input->bytes; ++i) {
   bf884:	3301      	adds	r3, #1
   bf886:	e7f6      	b.n	bf876 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
    return kTfLiteError;
   bf888:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
   bf88a:	bd70      	pop	{r4, r5, r6, pc}

000bf88c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

TfLiteRegistration* Register_RESHAPE() {
  static TfLiteRegistration r = {nullptr, nullptr, reshape::Prepare,
                                 reshape::Eval};
  return &r;
}
   bf88c:	4800      	ldr	r0, [pc, #0]	; (bf890 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x4>)
   bf88e:	4770      	bx	lr
   bf890:	2003c378 	.word	0x2003c378

000bf894 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
};

struct MaximumOp {
  template <typename data_type>
  static data_type op(data_type el1, data_type el2) {
    return el1 > el2 ? el1 : el2;
   bf894:	eeb4 0ae0 	vcmpe.f32	s0, s1
   bf898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   bf89c:	bfd8      	it	le
   bf89e:	eeb0 0a60 	vmovle.f32	s0, s1
   bf8a2:	4770      	bx	lr

000bf8a4 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   bf8a4:	4288      	cmp	r0, r1
   bf8a6:	bf38      	it	cc
   bf8a8:	4608      	movcc	r0, r1
   bf8aa:	4770      	bx	lr

000bf8ac <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   bf8ac:	4288      	cmp	r0, r1
   bf8ae:	bfb8      	it	lt
   bf8b0:	4608      	movlt	r0, r1
   bf8b2:	4770      	bx	lr

000bf8b4 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIlEET_S6_S6_>:
   bf8b4:	4288      	cmp	r0, r1
   bf8b6:	bfb8      	it	lt
   bf8b8:	4608      	movlt	r0, r1
   bf8ba:	4770      	bx	lr

000bf8bc <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   bf8bc:	b530      	push	{r4, r5, lr}
    return el1 > el2 ? el1 : el2;
   bf8be:	4290      	cmp	r0, r2
   bf8c0:	460c      	mov	r4, r1
   bf8c2:	4199      	sbcs	r1, r3
   bf8c4:	4605      	mov	r5, r0
   bf8c6:	bfbc      	itt	lt
   bf8c8:	461c      	movlt	r4, r3
   bf8ca:	4615      	movlt	r5, r2
  }
   bf8cc:	4628      	mov	r0, r5
   bf8ce:	4621      	mov	r1, r4
   bf8d0:	bd30      	pop	{r4, r5, pc}

000bf8d2 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
};

struct MinimumOp {
  template <typename data_type>
  static data_type op(data_type el1, data_type el2) {
    return el1 < el2 ? el1 : el2;
   bf8d2:	eeb4 0ae0 	vcmpe.f32	s0, s1
   bf8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   bf8da:	bf58      	it	pl
   bf8dc:	eeb0 0a60 	vmovpl.f32	s0, s1
   bf8e0:	4770      	bx	lr

000bf8e2 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   bf8e2:	4288      	cmp	r0, r1
   bf8e4:	bf28      	it	cs
   bf8e6:	4608      	movcs	r0, r1
   bf8e8:	4770      	bx	lr

000bf8ea <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   bf8ea:	4288      	cmp	r0, r1
   bf8ec:	bfa8      	it	ge
   bf8ee:	4608      	movge	r0, r1
   bf8f0:	4770      	bx	lr

000bf8f2 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIlEET_S6_S6_>:
   bf8f2:	4288      	cmp	r0, r1
   bf8f4:	bfa8      	it	ge
   bf8f6:	4608      	movge	r0, r1
   bf8f8:	4770      	bx	lr

000bf8fa <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   bf8fa:	b530      	push	{r4, r5, lr}
    return el1 < el2 ? el1 : el2;
   bf8fc:	4282      	cmp	r2, r0
   bf8fe:	460c      	mov	r4, r1
   bf900:	eb73 0101 	sbcs.w	r1, r3, r1
   bf904:	4605      	mov	r5, r0
   bf906:	bfbc      	itt	lt
   bf908:	461c      	movlt	r4, r3
   bf90a:	4615      	movlt	r5, r2
  }
   bf90c:	4628      	mov	r0, r5
   bf90e:	4621      	mov	r1, r4
   bf910:	bd30      	pop	{r4, r5, pc}
	...

000bf914 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
      /* free */ nullptr,
      /* prepare */ nullptr,
      maximum_minimum::Eval<maximum_minimum::kReference,
                            maximum_minimum::MaximumOp>};
  return &r;
}
   bf914:	4800      	ldr	r0, [pc, #0]	; (bf918 <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x4>)
   bf916:	4770      	bx	lr
   bf918:	2003c398 	.word	0x2003c398

000bf91c <_ZN6tflite3ops5micro16Register_MINIMUMEv>:
      /* free */ nullptr,
      /* prepare */ nullptr,
      maximum_minimum::Eval<maximum_minimum::kReference,
                            maximum_minimum::MinimumOp>};
  return &r;
}
   bf91c:	4800      	ldr	r0, [pc, #0]	; (bf920 <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x4>)
   bf91e:	4770      	bx	lr
   bf920:	2003c3b8 	.word	0x2003c3b8

000bf924 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:

namespace tflite {
namespace reference_ops {

template <typename T, typename Op>
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf928:	469b      	mov	fp, r3
                                   const T* input1_data,
                                   const RuntimeShape& unextended_input2_shape,
                                   const T* input2_data,
                                   const RuntimeShape& unextended_output_shape,
                                   T* output_data, Op op) {
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf92a:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf92c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf92e:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf930:	4615      	mov	r5, r2
   bf932:	4604      	mov	r4, r0
   bf934:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bf936:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf938:	dd01      	ble.n	bf93e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bf93a:	f004 ff5f 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bf93e:	682b      	ldr	r3, [r5, #0]
   bf940:	2b04      	cmp	r3, #4
   bf942:	dcfa      	bgt.n	bf93a <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bf944:	6813      	ldr	r3, [r2, #0]
   bf946:	2b04      	cmp	r3, #4
   bf948:	dcf7      	bgt.n	bf93a <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   bf94a:	2301      	movs	r3, #1
   bf94c:	2104      	movs	r1, #4
   bf94e:	a805      	add	r0, sp, #20
   bf950:	f7f6 fd3c 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bf954:	4620      	mov	r0, r4
   bf956:	ab12      	add	r3, sp, #72	; 0x48
   bf958:	aa0a      	add	r2, sp, #40	; 0x28
   bf95a:	4629      	mov	r1, r5
   bf95c:	f7f7 f83e 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      unextended_input2_shape, &desc1, &desc2);

  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf960:	2400      	movs	r4, #0
   bf962:	2100      	movs	r1, #0
   bf964:	a805      	add	r0, sp, #20
   bf966:	f7f6 fcf7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf96a:	42a0      	cmp	r0, r4
   bf96c:	dd46      	ble.n	bf9fc <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf96e:	2500      	movs	r5, #0
   bf970:	ae05      	add	r6, sp, #20
   bf972:	2101      	movs	r1, #1
   bf974:	4630      	mov	r0, r6
   bf976:	f7f6 fcef 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf97a:	42a8      	cmp	r0, r5
   bf97c:	dd3c      	ble.n	bf9f8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd4>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf97e:	f04f 0a00 	mov.w	sl, #0
   bf982:	2102      	movs	r1, #2
   bf984:	4630      	mov	r0, r6
   bf986:	f7f6 fce7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf98a:	4550      	cmp	r0, sl
   bf98c:	dd32      	ble.n	bf9f4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf98e:	2700      	movs	r7, #0
   bf990:	2103      	movs	r1, #3
   bf992:	4630      	mov	r0, r6
   bf994:	f7f6 fce0 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf998:	42b8      	cmp	r0, r7
   bf99a:	dd28      	ble.n	bf9ee <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xca>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bf99c:	9700      	str	r7, [sp, #0]
   bf99e:	4653      	mov	r3, sl
   bf9a0:	462a      	mov	r2, r5
   bf9a2:	4621      	mov	r1, r4
   bf9a4:	4630      	mov	r0, r6
   bf9a6:	f7f6 fd3e 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf9aa:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bf9ac:	4680      	mov	r8, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf9ae:	4653      	mov	r3, sl
   bf9b0:	462a      	mov	r2, r5
   bf9b2:	4621      	mov	r1, r4
   bf9b4:	a80a      	add	r0, sp, #40	; 0x28
   bf9b6:	f7f6 fddf 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf9ba:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf9bc:	4681      	mov	r9, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf9be:	4653      	mov	r3, sl
   bf9c0:	462a      	mov	r2, r5
   bf9c2:	4621      	mov	r1, r4
   bf9c4:	a812      	add	r0, sp, #72	; 0x48
   bf9c6:	f7f6 fdd7 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
          auto in2_val = input2_data[in2_idx];
          output_data[out_idx] = op(in1_val, in2_val);
   bf9ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bf9cc:	eb03 0888 	add.w	r8, r3, r8, lsl #2
          auto in1_val = input1_data[in1_idx];
   bf9d0:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   bf9d2:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
          auto in1_val = input1_data[in1_idx];
   bf9d6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
          output_data[out_idx] = op(in1_val, in2_val);
   bf9da:	edd0 0a00 	vldr	s1, [r0]
   bf9de:	ed99 0a00 	vldr	s0, [r9]
   bf9e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bf9e4:	4798      	blx	r3
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf9e6:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bf9e8:	ed88 0a00 	vstr	s0, [r8]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf9ec:	e7d0      	b.n	bf990 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf9ee:	f10a 0a01 	add.w	sl, sl, #1
   bf9f2:	e7c6      	b.n	bf982 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf9f4:	3501      	adds	r5, #1
   bf9f6:	e7bb      	b.n	bf970 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf9f8:	3401      	adds	r4, #1
   bf9fa:	e7b2      	b.n	bf962 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bf9fc:	a805      	add	r0, sp, #20
   bf9fe:	f7f6 fca0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   bfa02:	b01b      	add	sp, #108	; 0x6c
   bfa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfa08 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa0c:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa0e:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa10:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa12:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa14:	4615      	mov	r5, r2
   bfa16:	4604      	mov	r4, r0
   bfa18:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfa1a:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa1c:	dd01      	ble.n	bfa22 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfa1e:	f004 feed 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfa22:	682b      	ldr	r3, [r5, #0]
   bfa24:	2b04      	cmp	r3, #4
   bfa26:	dcfa      	bgt.n	bfa1e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfa28:	6813      	ldr	r3, [r2, #0]
   bfa2a:	2b04      	cmp	r3, #4
   bfa2c:	dcf7      	bgt.n	bfa1e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfa2e:	2301      	movs	r3, #1
   bfa30:	2104      	movs	r1, #4
   bfa32:	a805      	add	r0, sp, #20
   bfa34:	f7f6 fcca 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfa38:	4620      	mov	r0, r4
   bfa3a:	ab12      	add	r3, sp, #72	; 0x48
   bfa3c:	aa0a      	add	r2, sp, #40	; 0x28
   bfa3e:	4629      	mov	r1, r5
   bfa40:	f7f6 ffcc 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfa44:	2400      	movs	r4, #0
   bfa46:	2100      	movs	r1, #0
   bfa48:	a805      	add	r0, sp, #20
   bfa4a:	f7f6 fc85 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa4e:	42a0      	cmp	r0, r4
   bfa50:	dd40      	ble.n	bfad4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfa52:	2500      	movs	r5, #0
   bfa54:	ae05      	add	r6, sp, #20
   bfa56:	2101      	movs	r1, #1
   bfa58:	4630      	mov	r0, r6
   bfa5a:	f7f6 fc7d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa5e:	42a8      	cmp	r0, r5
   bfa60:	dd36      	ble.n	bfad0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfa62:	f04f 0800 	mov.w	r8, #0
   bfa66:	2102      	movs	r1, #2
   bfa68:	4630      	mov	r0, r6
   bfa6a:	f7f6 fc75 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa6e:	4540      	cmp	r0, r8
   bfa70:	dd2c      	ble.n	bfacc <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfa72:	2700      	movs	r7, #0
   bfa74:	2103      	movs	r1, #3
   bfa76:	4630      	mov	r0, r6
   bfa78:	f7f6 fc6e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa7c:	42b8      	cmp	r0, r7
   bfa7e:	dd22      	ble.n	bfac6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfa80:	9700      	str	r7, [sp, #0]
   bfa82:	4643      	mov	r3, r8
   bfa84:	462a      	mov	r2, r5
   bfa86:	4621      	mov	r1, r4
   bfa88:	4630      	mov	r0, r6
   bfa8a:	f7f6 fccc 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfa8e:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfa90:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfa92:	4643      	mov	r3, r8
   bfa94:	462a      	mov	r2, r5
   bfa96:	4621      	mov	r1, r4
   bfa98:	a80a      	add	r0, sp, #40	; 0x28
   bfa9a:	f7f6 fd6d 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfa9e:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfaa0:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfaa2:	4643      	mov	r3, r8
   bfaa4:	462a      	mov	r2, r5
   bfaa6:	4621      	mov	r1, r4
   bfaa8:	a812      	add	r0, sp, #72	; 0x48
   bfaaa:	f7f6 fd65 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfaae:	9b03      	ldr	r3, [sp, #12]
   bfab0:	f819 1000 	ldrb.w	r1, [r9, r0]
   bfab4:	f813 000b 	ldrb.w	r0, [r3, fp]
   bfab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfaba:	4798      	blx	r3
   bfabc:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfabe:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfac0:	f803 000a 	strb.w	r0, [r3, sl]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfac4:	e7d6      	b.n	bfa74 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfac6:	f108 0801 	add.w	r8, r8, #1
   bfaca:	e7cc      	b.n	bfa66 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfacc:	3501      	adds	r5, #1
   bface:	e7c1      	b.n	bfa54 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfad0:	3401      	adds	r4, #1
   bfad2:	e7b8      	b.n	bfa46 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfad4:	a805      	add	r0, sp, #20
   bfad6:	f7f6 fc34 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfada:	b01b      	add	sp, #108	; 0x6c
   bfadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfae0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfae4:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfae6:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfae8:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfaea:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfaec:	4615      	mov	r5, r2
   bfaee:	4604      	mov	r4, r0
   bfaf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfaf2:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfaf4:	dd01      	ble.n	bfafa <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfaf6:	f004 fe81 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfafa:	682b      	ldr	r3, [r5, #0]
   bfafc:	2b04      	cmp	r3, #4
   bfafe:	dcfa      	bgt.n	bfaf6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfb00:	6813      	ldr	r3, [r2, #0]
   bfb02:	2b04      	cmp	r3, #4
   bfb04:	dcf7      	bgt.n	bfaf6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfb06:	2301      	movs	r3, #1
   bfb08:	2104      	movs	r1, #4
   bfb0a:	a805      	add	r0, sp, #20
   bfb0c:	f7f6 fc5e 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfb10:	4620      	mov	r0, r4
   bfb12:	ab12      	add	r3, sp, #72	; 0x48
   bfb14:	aa0a      	add	r2, sp, #40	; 0x28
   bfb16:	4629      	mov	r1, r5
   bfb18:	f7f6 ff60 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfb1c:	2400      	movs	r4, #0
   bfb1e:	2100      	movs	r1, #0
   bfb20:	a805      	add	r0, sp, #20
   bfb22:	f7f6 fc19 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfb26:	42a0      	cmp	r0, r4
   bfb28:	dd40      	ble.n	bfbac <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfb2a:	2500      	movs	r5, #0
   bfb2c:	ae05      	add	r6, sp, #20
   bfb2e:	2101      	movs	r1, #1
   bfb30:	4630      	mov	r0, r6
   bfb32:	f7f6 fc11 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfb36:	42a8      	cmp	r0, r5
   bfb38:	dd36      	ble.n	bfba8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfb3a:	f04f 0800 	mov.w	r8, #0
   bfb3e:	2102      	movs	r1, #2
   bfb40:	4630      	mov	r0, r6
   bfb42:	f7f6 fc09 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfb46:	4540      	cmp	r0, r8
   bfb48:	dd2c      	ble.n	bfba4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfb4a:	2700      	movs	r7, #0
   bfb4c:	2103      	movs	r1, #3
   bfb4e:	4630      	mov	r0, r6
   bfb50:	f7f6 fc02 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfb54:	42b8      	cmp	r0, r7
   bfb56:	dd22      	ble.n	bfb9e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfb58:	9700      	str	r7, [sp, #0]
   bfb5a:	4643      	mov	r3, r8
   bfb5c:	462a      	mov	r2, r5
   bfb5e:	4621      	mov	r1, r4
   bfb60:	4630      	mov	r0, r6
   bfb62:	f7f6 fc60 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb66:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfb68:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb6a:	4643      	mov	r3, r8
   bfb6c:	462a      	mov	r2, r5
   bfb6e:	4621      	mov	r1, r4
   bfb70:	a80a      	add	r0, sp, #40	; 0x28
   bfb72:	f7f6 fd01 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfb76:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb78:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfb7a:	4643      	mov	r3, r8
   bfb7c:	462a      	mov	r2, r5
   bfb7e:	4621      	mov	r1, r4
   bfb80:	a812      	add	r0, sp, #72	; 0x48
   bfb82:	f7f6 fcf9 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfb86:	9b03      	ldr	r3, [sp, #12]
   bfb88:	f919 1000 	ldrsb.w	r1, [r9, r0]
   bfb8c:	f913 000b 	ldrsb.w	r0, [r3, fp]
   bfb90:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfb92:	4798      	blx	r3
   bfb94:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfb96:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfb98:	f803 000a 	strb.w	r0, [r3, sl]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfb9c:	e7d6      	b.n	bfb4c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfb9e:	f108 0801 	add.w	r8, r8, #1
   bfba2:	e7cc      	b.n	bfb3e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfba4:	3501      	adds	r5, #1
   bfba6:	e7c1      	b.n	bfb2c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfba8:	3401      	adds	r4, #1
   bfbaa:	e7b8      	b.n	bfb1e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfbac:	a805      	add	r0, sp, #20
   bfbae:	f7f6 fbc8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfbb2:	b01b      	add	sp, #108	; 0x6c
   bfbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfbb8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfbbc:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfbbe:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfbc0:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfbc2:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfbc4:	4615      	mov	r5, r2
   bfbc6:	4604      	mov	r4, r0
   bfbc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfbca:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfbcc:	dd01      	ble.n	bfbd2 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfbce:	f004 fe15 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfbd2:	682b      	ldr	r3, [r5, #0]
   bfbd4:	2b04      	cmp	r3, #4
   bfbd6:	dcfa      	bgt.n	bfbce <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfbd8:	6813      	ldr	r3, [r2, #0]
   bfbda:	2b04      	cmp	r3, #4
   bfbdc:	dcf7      	bgt.n	bfbce <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfbde:	2301      	movs	r3, #1
   bfbe0:	2104      	movs	r1, #4
   bfbe2:	a805      	add	r0, sp, #20
   bfbe4:	f7f6 fbf2 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfbe8:	4620      	mov	r0, r4
   bfbea:	ab12      	add	r3, sp, #72	; 0x48
   bfbec:	aa0a      	add	r2, sp, #40	; 0x28
   bfbee:	4629      	mov	r1, r5
   bfbf0:	f7f6 fef4 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfbf4:	2400      	movs	r4, #0
   bfbf6:	2100      	movs	r1, #0
   bfbf8:	a805      	add	r0, sp, #20
   bfbfa:	f7f6 fbad 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfbfe:	42a0      	cmp	r0, r4
   bfc00:	dd40      	ble.n	bfc84 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfc02:	2500      	movs	r5, #0
   bfc04:	ae05      	add	r6, sp, #20
   bfc06:	2101      	movs	r1, #1
   bfc08:	4630      	mov	r0, r6
   bfc0a:	f7f6 fba5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc0e:	42a8      	cmp	r0, r5
   bfc10:	dd36      	ble.n	bfc80 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfc12:	f04f 0800 	mov.w	r8, #0
   bfc16:	2102      	movs	r1, #2
   bfc18:	4630      	mov	r0, r6
   bfc1a:	f7f6 fb9d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc1e:	4540      	cmp	r0, r8
   bfc20:	dd2c      	ble.n	bfc7c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfc22:	2700      	movs	r7, #0
   bfc24:	2103      	movs	r1, #3
   bfc26:	4630      	mov	r0, r6
   bfc28:	f7f6 fb96 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc2c:	42b8      	cmp	r0, r7
   bfc2e:	dd22      	ble.n	bfc76 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfc30:	9700      	str	r7, [sp, #0]
   bfc32:	4643      	mov	r3, r8
   bfc34:	462a      	mov	r2, r5
   bfc36:	4621      	mov	r1, r4
   bfc38:	4630      	mov	r0, r6
   bfc3a:	f7f6 fbf4 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfc3e:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfc40:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfc42:	4643      	mov	r3, r8
   bfc44:	462a      	mov	r2, r5
   bfc46:	4621      	mov	r1, r4
   bfc48:	a80a      	add	r0, sp, #40	; 0x28
   bfc4a:	f7f6 fc95 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfc4e:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfc50:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfc52:	4643      	mov	r3, r8
   bfc54:	462a      	mov	r2, r5
   bfc56:	4621      	mov	r1, r4
   bfc58:	a812      	add	r0, sp, #72	; 0x48
   bfc5a:	f7f6 fc8d 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfc5e:	9b03      	ldr	r3, [sp, #12]
   bfc60:	f859 1020 	ldr.w	r1, [r9, r0, lsl #2]
   bfc64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   bfc68:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfc6a:	4798      	blx	r3
   bfc6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfc6e:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfc70:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfc74:	e7d6      	b.n	bfc24 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfc76:	f108 0801 	add.w	r8, r8, #1
   bfc7a:	e7cc      	b.n	bfc16 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfc7c:	3501      	adds	r5, #1
   bfc7e:	e7c1      	b.n	bfc04 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfc80:	3401      	adds	r4, #1
   bfc82:	e7b8      	b.n	bfbf6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfc84:	a805      	add	r0, sp, #20
   bfc86:	f7f6 fb5c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfc8a:	b01b      	add	sp, #108	; 0x6c
   bfc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfc90 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc94:	ed2d 8b02 	vpush	{d8}
   bfc98:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfc9a:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfc9c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfc9e:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfca0:	4615      	mov	r5, r2
   bfca2:	4604      	mov	r4, r0
   bfca4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   bfca6:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfca8:	dd01      	ble.n	bfcae <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1e>
   bfcaa:	f004 fda7 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfcae:	682b      	ldr	r3, [r5, #0]
   bfcb0:	2b04      	cmp	r3, #4
   bfcb2:	dcfa      	bgt.n	bfcaa <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfcb4:	6813      	ldr	r3, [r2, #0]
   bfcb6:	2b04      	cmp	r3, #4
   bfcb8:	dcf7      	bgt.n	bfcaa <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfcba:	2301      	movs	r3, #1
   bfcbc:	2104      	movs	r1, #4
   bfcbe:	a805      	add	r0, sp, #20
   bfcc0:	f7f6 fb84 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfcc4:	4620      	mov	r0, r4
   bfcc6:	ab12      	add	r3, sp, #72	; 0x48
   bfcc8:	aa0a      	add	r2, sp, #40	; 0x28
   bfcca:	4629      	mov	r1, r5
   bfccc:	f7f6 fe86 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfcd0:	2400      	movs	r4, #0
   bfcd2:	2100      	movs	r1, #0
   bfcd4:	a805      	add	r0, sp, #20
   bfcd6:	f7f6 fb3f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfcda:	42a0      	cmp	r0, r4
   bfcdc:	dd4e      	ble.n	bfd7c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfcde:	2500      	movs	r5, #0
   bfce0:	af05      	add	r7, sp, #20
   bfce2:	2101      	movs	r1, #1
   bfce4:	4638      	mov	r0, r7
   bfce6:	f7f6 fb37 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfcea:	42a8      	cmp	r0, r5
   bfcec:	dd44      	ble.n	bfd78 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfcee:	ee08 7a10 	vmov	s16, r7
   bfcf2:	2600      	movs	r6, #0
   bfcf4:	ee18 0a10 	vmov	r0, s16
   bfcf8:	2102      	movs	r1, #2
   bfcfa:	f7f6 fb2d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfcfe:	42b0      	cmp	r0, r6
   bfd00:	dd38      	ble.n	bfd74 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfd02:	f04f 0800 	mov.w	r8, #0
   bfd06:	ee18 0a10 	vmov	r0, s16
   bfd0a:	2103      	movs	r1, #3
   bfd0c:	f7f6 fb24 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfd10:	4540      	cmp	r0, r8
   bfd12:	dd2d      	ble.n	bfd70 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfd14:	f8cd 8000 	str.w	r8, [sp]
   bfd18:	4633      	mov	r3, r6
   bfd1a:	462a      	mov	r2, r5
   bfd1c:	4621      	mov	r1, r4
   bfd1e:	ee18 0a10 	vmov	r0, s16
   bfd22:	f7f6 fb80 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfd26:	f8cd 8000 	str.w	r8, [sp]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfd2a:	4681      	mov	r9, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfd2c:	4633      	mov	r3, r6
   bfd2e:	462a      	mov	r2, r5
   bfd30:	4621      	mov	r1, r4
   bfd32:	a80a      	add	r0, sp, #40	; 0x28
   bfd34:	f7f6 fc20 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfd38:	f8cd 8000 	str.w	r8, [sp]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfd3c:	4682      	mov	sl, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfd3e:	4633      	mov	r3, r6
   bfd40:	462a      	mov	r2, r5
   bfd42:	4621      	mov	r1, r4
   bfd44:	a812      	add	r0, sp, #72	; 0x48
   bfd46:	f7f6 fc17 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfd4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   bfd4c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   bfd4e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
          auto in1_val = input1_data[in1_idx];
   bfd52:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   bfd54:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
          auto in1_val = input1_data[in1_idx];
   bfd58:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
          output_data[out_idx] = op(in1_val, in2_val);
   bfd5c:	e9d0 2300 	ldrd	r2, r3, [r0]
   bfd60:	e9da 0100 	ldrd	r0, r1, [sl]
   bfd64:	47b8      	blx	r7
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfd66:	f108 0801 	add.w	r8, r8, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfd6a:	e9c9 0100 	strd	r0, r1, [r9]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfd6e:	e7ca      	b.n	bfd06 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfd70:	3601      	adds	r6, #1
   bfd72:	e7bf      	b.n	bfcf4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x64>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfd74:	3501      	adds	r5, #1
   bfd76:	e7b3      	b.n	bfce0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfd78:	3401      	adds	r4, #1
   bfd7a:	e7aa      	b.n	bfcd2 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x42>
  const RuntimeShape output_shape =
   bfd7c:	a805      	add	r0, sp, #20
   bfd7e:	f7f6 fae0 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfd82:	b01b      	add	sp, #108	; 0x6c
   bfd84:	ecbd 8b02 	vpop	{d8}
   bfd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfd8c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bfd8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bfd90:	680b      	ldr	r3, [r1, #0]
   bfd92:	f8d0 9008 	ldr.w	r9, [r0, #8]
   bfd96:	685c      	ldr	r4, [r3, #4]
   bfd98:	689d      	ldr	r5, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bfd9a:	684b      	ldr	r3, [r1, #4]
   bfd9c:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bfd9e:	f04f 0838 	mov.w	r8, #56	; 0x38
   bfda2:	fb08 9404 	mla	r4, r8, r4, r9
   bfda6:	fb08 9505 	mla	r5, r8, r5, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bfdaa:	fb08 f803 	mul.w	r8, r8, r3
   bfdae:	4607      	mov	r7, r0
    switch (op_context.output->type) {
   bfdb0:	f819 0008 	ldrb.w	r0, [r9, r8]
   bfdb4:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bfdb6:	b095      	sub	sp, #84	; 0x54
   bfdb8:	eb09 0608 	add.w	r6, r9, r8
   bfdbc:	2b08      	cmp	r3, #8
   bfdbe:	f200 80a4 	bhi.w	bff0a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17e>
   bfdc2:	e8df f003 	tbb	[pc, r3]
   bfdc6:	6805      	.short	0x6805
   bfdc8:	a2a2852e 	.word	0xa2a2852e
   bfdcc:	a2a2      	.short	0xa2a2
   bfdce:	4b          	.byte	0x4b
   bfdcf:	00          	.byte	0x00
      GetTensorShape(op_context.input1),
   bfdd0:	4621      	mov	r1, r4
   bfdd2:	a805      	add	r0, sp, #20
   bfdd4:	f7f6 fd59 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bfdd8:	b104      	cbz	r4, bfddc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   bfdda:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfddc:	4629      	mov	r1, r5
   bfdde:	a80a      	add	r0, sp, #40	; 0x28
   bfde0:	f7f6 fd53 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfde4:	b105      	cbz	r5, bfde8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5c>
   bfde6:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfde8:	af0f      	add	r7, sp, #60	; 0x3c
   bfdea:	4631      	mov	r1, r6
   bfdec:	4638      	mov	r0, r7
   bfdee:	f7f6 fd4c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfdf2:	4b4b      	ldr	r3, [pc, #300]	; (bff20 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   bfdf4:	9302      	str	r3, [sp, #8]
   bfdf6:	6873      	ldr	r3, [r6, #4]
   bfdf8:	aa0a      	add	r2, sp, #40	; 0x28
   bfdfa:	e9cd 7300 	strd	r7, r3, [sp]
   bfdfe:	4621      	mov	r1, r4
   bfe00:	462b      	mov	r3, r5
   bfe02:	a805      	add	r0, sp, #20
   bfe04:	f7ff fd8e 	bl	bf924 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   bfe08:	4638      	mov	r0, r7
   bfe0a:	f7f6 fa9a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   bfe0e:	a80a      	add	r0, sp, #40	; 0x28
   bfe10:	f7f6 fa97 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   bfe14:	a805      	add	r0, sp, #20
   bfe16:	f7f6 fa94 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bfe1a:	2000      	movs	r0, #0
}
   bfe1c:	b015      	add	sp, #84	; 0x54
   bfe1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      GetTensorShape(op_context.input1),
   bfe22:	4621      	mov	r1, r4
   bfe24:	a805      	add	r0, sp, #20
   bfe26:	f7f6 fd30 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe2a:	b104      	cbz	r4, bfe2e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa2>
   bfe2c:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfe2e:	4629      	mov	r1, r5
   bfe30:	a80a      	add	r0, sp, #40	; 0x28
   bfe32:	f7f6 fd2a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe36:	b105      	cbz	r5, bfe3a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xae>
   bfe38:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfe3a:	af0f      	add	r7, sp, #60	; 0x3c
   bfe3c:	4631      	mov	r1, r6
   bfe3e:	4638      	mov	r0, r7
   bfe40:	f7f6 fd23 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfe44:	4b37      	ldr	r3, [pc, #220]	; (bff24 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   bfe46:	9302      	str	r3, [sp, #8]
   bfe48:	6873      	ldr	r3, [r6, #4]
   bfe4a:	aa0a      	add	r2, sp, #40	; 0x28
   bfe4c:	e9cd 7300 	strd	r7, r3, [sp]
   bfe50:	4621      	mov	r1, r4
   bfe52:	462b      	mov	r3, r5
   bfe54:	a805      	add	r0, sp, #20
   bfe56:	f7ff fdd7 	bl	bfa08 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bfe5a:	e7d5      	b.n	bfe08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bfe5c:	4621      	mov	r1, r4
   bfe5e:	a805      	add	r0, sp, #20
   bfe60:	f7f6 fd13 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe64:	b104      	cbz	r4, bfe68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xdc>
   bfe66:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfe68:	4629      	mov	r1, r5
   bfe6a:	a80a      	add	r0, sp, #40	; 0x28
   bfe6c:	f7f6 fd0d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe70:	b105      	cbz	r5, bfe74 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe8>
   bfe72:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfe74:	af0f      	add	r7, sp, #60	; 0x3c
   bfe76:	4631      	mov	r1, r6
   bfe78:	4638      	mov	r0, r7
   bfe7a:	f7f6 fd06 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfe7e:	4b2a      	ldr	r3, [pc, #168]	; (bff28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   bfe80:	9302      	str	r3, [sp, #8]
   bfe82:	6873      	ldr	r3, [r6, #4]
   bfe84:	aa0a      	add	r2, sp, #40	; 0x28
   bfe86:	e9cd 7300 	strd	r7, r3, [sp]
   bfe8a:	4621      	mov	r1, r4
   bfe8c:	462b      	mov	r3, r5
   bfe8e:	a805      	add	r0, sp, #20
   bfe90:	f7ff fe26 	bl	bfae0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bfe94:	e7b8      	b.n	bfe08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bfe96:	4621      	mov	r1, r4
   bfe98:	a805      	add	r0, sp, #20
   bfe9a:	f7f6 fcf6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe9e:	b104      	cbz	r4, bfea2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x116>
   bfea0:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfea2:	4629      	mov	r1, r5
   bfea4:	a80a      	add	r0, sp, #40	; 0x28
   bfea6:	f7f6 fcf0 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfeaa:	b105      	cbz	r5, bfeae <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x122>
   bfeac:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfeae:	af0f      	add	r7, sp, #60	; 0x3c
   bfeb0:	4631      	mov	r1, r6
   bfeb2:	4638      	mov	r0, r7
   bfeb4:	f7f6 fce9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfeb8:	4b1c      	ldr	r3, [pc, #112]	; (bff2c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   bfeba:	9302      	str	r3, [sp, #8]
   bfebc:	6873      	ldr	r3, [r6, #4]
   bfebe:	aa0a      	add	r2, sp, #40	; 0x28
   bfec0:	e9cd 7300 	strd	r7, r3, [sp]
   bfec4:	4621      	mov	r1, r4
   bfec6:	462b      	mov	r3, r5
   bfec8:	a805      	add	r0, sp, #20
   bfeca:	f7ff fe75 	bl	bfbb8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bfece:	e79b      	b.n	bfe08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bfed0:	4621      	mov	r1, r4
   bfed2:	a805      	add	r0, sp, #20
   bfed4:	f7f6 fcd9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfed8:	b104      	cbz	r4, bfedc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x150>
   bfeda:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfedc:	4629      	mov	r1, r5
   bfede:	a80a      	add	r0, sp, #40	; 0x28
   bfee0:	f7f6 fcd3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfee4:	b105      	cbz	r5, bfee8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x15c>
   bfee6:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfee8:	af0f      	add	r7, sp, #60	; 0x3c
   bfeea:	4631      	mov	r1, r6
   bfeec:	4638      	mov	r0, r7
   bfeee:	f7f6 fccc 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfef2:	4b0f      	ldr	r3, [pc, #60]	; (bff30 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   bfef4:	9302      	str	r3, [sp, #8]
   bfef6:	6873      	ldr	r3, [r6, #4]
   bfef8:	aa0a      	add	r2, sp, #40	; 0x28
   bfefa:	e9cd 7300 	strd	r7, r3, [sp]
   bfefe:	4621      	mov	r1, r4
   bff00:	462b      	mov	r3, r5
   bff02:	a805      	add	r0, sp, #20
   bff04:	f7ff fec4 	bl	bfc90 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bff08:	e77e      	b.n	bfe08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
        context->ReportError(
   bff0a:	697c      	ldr	r4, [r7, #20]
   bff0c:	f7f4 fe3a 	bl	b4b84 <TfLiteTypeGetName>
   bff10:	f819 3008 	ldrb.w	r3, [r9, r8]
   bff14:	4907      	ldr	r1, [pc, #28]	; (bff34 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a8>)
   bff16:	4602      	mov	r2, r0
   bff18:	4638      	mov	r0, r7
   bff1a:	47a0      	blx	r4
        return kTfLiteError;
   bff1c:	2001      	movs	r0, #1
   bff1e:	e77d      	b.n	bfe1c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x90>
   bff20:	000bf8d3 	.word	0x000bf8d3
   bff24:	000bf8e3 	.word	0x000bf8e3
   bff28:	000bf8eb 	.word	0x000bf8eb
   bff2c:	000bf8f3 	.word	0x000bf8f3
   bff30:	000bf8fb 	.word	0x000bf8fb
   bff34:	000c8c1c 	.word	0x000c8c1c

000bff38 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bff38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bff3c:	680b      	ldr	r3, [r1, #0]
   bff3e:	f8d0 9008 	ldr.w	r9, [r0, #8]
   bff42:	685c      	ldr	r4, [r3, #4]
   bff44:	689d      	ldr	r5, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bff46:	684b      	ldr	r3, [r1, #4]
   bff48:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bff4a:	f04f 0838 	mov.w	r8, #56	; 0x38
   bff4e:	fb08 9404 	mla	r4, r8, r4, r9
   bff52:	fb08 9505 	mla	r5, r8, r5, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bff56:	fb08 f803 	mul.w	r8, r8, r3
   bff5a:	4607      	mov	r7, r0
    switch (op_context.output->type) {
   bff5c:	f819 0008 	ldrb.w	r0, [r9, r8]
   bff60:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bff62:	b095      	sub	sp, #84	; 0x54
   bff64:	eb09 0608 	add.w	r6, r9, r8
   bff68:	2b08      	cmp	r3, #8
   bff6a:	f200 80a4 	bhi.w	c00b6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17e>
   bff6e:	e8df f003 	tbb	[pc, r3]
   bff72:	6805      	.short	0x6805
   bff74:	a2a2852e 	.word	0xa2a2852e
   bff78:	a2a2      	.short	0xa2a2
   bff7a:	4b          	.byte	0x4b
   bff7b:	00          	.byte	0x00
      GetTensorShape(op_context.input1),
   bff7c:	4621      	mov	r1, r4
   bff7e:	a805      	add	r0, sp, #20
   bff80:	f7f6 fc83 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff84:	b104      	cbz	r4, bff88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   bff86:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bff88:	4629      	mov	r1, r5
   bff8a:	a80a      	add	r0, sp, #40	; 0x28
   bff8c:	f7f6 fc7d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff90:	b105      	cbz	r5, bff94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5c>
   bff92:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bff94:	af0f      	add	r7, sp, #60	; 0x3c
   bff96:	4631      	mov	r1, r6
   bff98:	4638      	mov	r0, r7
   bff9a:	f7f6 fc76 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bff9e:	4b4b      	ldr	r3, [pc, #300]	; (c00cc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   bffa0:	9302      	str	r3, [sp, #8]
   bffa2:	6873      	ldr	r3, [r6, #4]
   bffa4:	aa0a      	add	r2, sp, #40	; 0x28
   bffa6:	e9cd 7300 	strd	r7, r3, [sp]
   bffaa:	4621      	mov	r1, r4
   bffac:	462b      	mov	r3, r5
   bffae:	a805      	add	r0, sp, #20
   bffb0:	f7ff fcb8 	bl	bf924 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   bffb4:	4638      	mov	r0, r7
   bffb6:	f7f6 f9c4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   bffba:	a80a      	add	r0, sp, #40	; 0x28
   bffbc:	f7f6 f9c1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   bffc0:	a805      	add	r0, sp, #20
   bffc2:	f7f6 f9be 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bffc6:	2000      	movs	r0, #0
}
   bffc8:	b015      	add	sp, #84	; 0x54
   bffca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      GetTensorShape(op_context.input1),
   bffce:	4621      	mov	r1, r4
   bffd0:	a805      	add	r0, sp, #20
   bffd2:	f7f6 fc5a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bffd6:	b104      	cbz	r4, bffda <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa2>
   bffd8:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bffda:	4629      	mov	r1, r5
   bffdc:	a80a      	add	r0, sp, #40	; 0x28
   bffde:	f7f6 fc54 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bffe2:	b105      	cbz	r5, bffe6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xae>
   bffe4:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bffe6:	af0f      	add	r7, sp, #60	; 0x3c
   bffe8:	4631      	mov	r1, r6
   bffea:	4638      	mov	r0, r7
   bffec:	f7f6 fc4d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfff0:	4b37      	ldr	r3, [pc, #220]	; (c00d0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   bfff2:	9302      	str	r3, [sp, #8]
   bfff4:	6873      	ldr	r3, [r6, #4]
   bfff6:	aa0a      	add	r2, sp, #40	; 0x28
   bfff8:	e9cd 7300 	strd	r7, r3, [sp]
   bfffc:	4621      	mov	r1, r4
   bfffe:	462b      	mov	r3, r5
   c0000:	a805      	add	r0, sp, #20
   c0002:	f7ff fd01 	bl	bfa08 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c0006:	e7d5      	b.n	bffb4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c0008:	4621      	mov	r1, r4
   c000a:	a805      	add	r0, sp, #20
   c000c:	f7f6 fc3d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0010:	b104      	cbz	r4, c0014 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xdc>
   c0012:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c0014:	4629      	mov	r1, r5
   c0016:	a80a      	add	r0, sp, #40	; 0x28
   c0018:	f7f6 fc37 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c001c:	b105      	cbz	r5, c0020 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe8>
   c001e:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c0020:	af0f      	add	r7, sp, #60	; 0x3c
   c0022:	4631      	mov	r1, r6
   c0024:	4638      	mov	r0, r7
   c0026:	f7f6 fc30 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c002a:	4b2a      	ldr	r3, [pc, #168]	; (c00d4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   c002c:	9302      	str	r3, [sp, #8]
   c002e:	6873      	ldr	r3, [r6, #4]
   c0030:	aa0a      	add	r2, sp, #40	; 0x28
   c0032:	e9cd 7300 	strd	r7, r3, [sp]
   c0036:	4621      	mov	r1, r4
   c0038:	462b      	mov	r3, r5
   c003a:	a805      	add	r0, sp, #20
   c003c:	f7ff fd50 	bl	bfae0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c0040:	e7b8      	b.n	bffb4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c0042:	4621      	mov	r1, r4
   c0044:	a805      	add	r0, sp, #20
   c0046:	f7f6 fc20 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c004a:	b104      	cbz	r4, c004e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x116>
   c004c:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c004e:	4629      	mov	r1, r5
   c0050:	a80a      	add	r0, sp, #40	; 0x28
   c0052:	f7f6 fc1a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0056:	b105      	cbz	r5, c005a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x122>
   c0058:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c005a:	af0f      	add	r7, sp, #60	; 0x3c
   c005c:	4631      	mov	r1, r6
   c005e:	4638      	mov	r0, r7
   c0060:	f7f6 fc13 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c0064:	4b1c      	ldr	r3, [pc, #112]	; (c00d8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   c0066:	9302      	str	r3, [sp, #8]
   c0068:	6873      	ldr	r3, [r6, #4]
   c006a:	aa0a      	add	r2, sp, #40	; 0x28
   c006c:	e9cd 7300 	strd	r7, r3, [sp]
   c0070:	4621      	mov	r1, r4
   c0072:	462b      	mov	r3, r5
   c0074:	a805      	add	r0, sp, #20
   c0076:	f7ff fd9f 	bl	bfbb8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c007a:	e79b      	b.n	bffb4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c007c:	4621      	mov	r1, r4
   c007e:	a805      	add	r0, sp, #20
   c0080:	f7f6 fc03 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0084:	b104      	cbz	r4, c0088 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x150>
   c0086:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c0088:	4629      	mov	r1, r5
   c008a:	a80a      	add	r0, sp, #40	; 0x28
   c008c:	f7f6 fbfd 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0090:	b105      	cbz	r5, c0094 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x15c>
   c0092:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c0094:	af0f      	add	r7, sp, #60	; 0x3c
   c0096:	4631      	mov	r1, r6
   c0098:	4638      	mov	r0, r7
   c009a:	f7f6 fbf6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c009e:	4b0f      	ldr	r3, [pc, #60]	; (c00dc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   c00a0:	9302      	str	r3, [sp, #8]
   c00a2:	6873      	ldr	r3, [r6, #4]
   c00a4:	aa0a      	add	r2, sp, #40	; 0x28
   c00a6:	e9cd 7300 	strd	r7, r3, [sp]
   c00aa:	4621      	mov	r1, r4
   c00ac:	462b      	mov	r3, r5
   c00ae:	a805      	add	r0, sp, #20
   c00b0:	f7ff fdee 	bl	bfc90 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c00b4:	e77e      	b.n	bffb4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
        context->ReportError(
   c00b6:	697c      	ldr	r4, [r7, #20]
   c00b8:	f7f4 fd64 	bl	b4b84 <TfLiteTypeGetName>
   c00bc:	f819 3008 	ldrb.w	r3, [r9, r8]
   c00c0:	4907      	ldr	r1, [pc, #28]	; (c00e0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a8>)
   c00c2:	4602      	mov	r2, r0
   c00c4:	4638      	mov	r0, r7
   c00c6:	47a0      	blx	r4
        return kTfLiteError;
   c00c8:	2001      	movs	r0, #1
   c00ca:	e77d      	b.n	bffc8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x90>
   c00cc:	000bf895 	.word	0x000bf895
   c00d0:	000bf8a5 	.word	0x000bf8a5
   c00d4:	000bf8ad 	.word	0x000bf8ad
   c00d8:	000bf8b5 	.word	0x000bf8b5
   c00dc:	000bf8bd 	.word	0x000bf8bd
   c00e0:	000c8c1c 	.word	0x000c8c1c

000c00e4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c00e4:	2000      	movs	r0, #0
   c00e6:	4770      	bx	lr

000c00e8 <_ZN6tflite3ops5micro15fully_connected4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c00e8:	4770      	bx	lr

000c00ea <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c00ea:	2000      	movs	r0, #0
   c00ec:	4770      	bx	lr

000c00ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   c00ee:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   c00f0:	2900      	cmp	r1, #0
  inline int32 DimensionsCount() const { return size_; }
   c00f2:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   c00f4:	db01      	blt.n	c00fa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   c00f6:	42a1      	cmp	r1, r4
   c00f8:	db01      	blt.n	c00fe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   c00fa:	f004 fb7f 	bl	c47fc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c00fe:	2c04      	cmp	r4, #4
   c0100:	bfcc      	ite	gt
   c0102:	6843      	ldrgt	r3, [r0, #4]
   c0104:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   c0106:	2200      	movs	r2, #0
  int flat_size = 1;
   c0108:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c010a:	4291      	cmp	r1, r2
   c010c:	bf18      	it	ne
   c010e:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   c0112:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c0116:	bf08      	it	eq
   c0118:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   c011a:	4294      	cmp	r4, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c011c:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   c0120:	dcf3      	bgt.n	c010a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   c0122:	bd38      	pop	{r3, r4, r5, pc}

000c0124 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
      GetTensorData<float>(output));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0128:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c012c:	680c      	ldr	r4, [r1, #0]
   c012e:	f8d0 8008 	ldr.w	r8, [r0, #8]
  auto* params =
   c0132:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0134:	4607      	mov	r7, r0
   c0136:	68a0      	ldr	r0, [r4, #8]
   c0138:	2238      	movs	r2, #56	; 0x38
   c013a:	b0d1      	sub	sp, #324	; 0x144
   c013c:	fb02 fa00 	mul.w	sl, r2, r0
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c0140:	68e0      	ldr	r0, [r4, #12]
  auto* params =
   c0142:	9302      	str	r3, [sp, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0144:	6863      	ldr	r3, [r4, #4]
  if (use_tensor) {
   c0146:	1c44      	adds	r4, r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0148:	fb02 f303 	mul.w	r3, r2, r3
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c014c:	bf18      	it	ne
   c014e:	fb02 8b00 	mlane	fp, r2, r0, r8
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0152:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0154:	eb08 0603 	add.w	r6, r8, r3
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0158:	6852      	ldr	r2, [r2, #4]
  if (data_type != kTfLiteFloat32) {
   c015a:	f818 3003 	ldrb.w	r3, [r8, r3]
   c015e:	f04f 0938 	mov.w	r9, #56	; 0x38
  return nullptr;
   c0162:	bf08      	it	eq
   c0164:	f04f 0b00 	moveq.w	fp, #0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0168:	fb09 f902 	mul.w	r9, r9, r2
   c016c:	2b01      	cmp	r3, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c016e:	eb08 050a 	add.w	r5, r8, sl
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0172:	eb08 0409 	add.w	r4, r8, r9
   c0176:	d022      	beq.n	c01be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9a>
    double real_multiplier = 0.0;
   c0178:	2200      	movs	r2, #0
   c017a:	2300      	movs	r3, #0
   c017c:	e9cd 234a 	strd	r2, r3, [sp, #296]	; 0x128
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   c0180:	ab4a      	add	r3, sp, #296	; 0x128
   c0182:	e9cd 4300 	strd	r4, r3, [sp]
   c0186:	462a      	mov	r2, r5
   c0188:	465b      	mov	r3, fp
   c018a:	4631      	mov	r1, r6
   c018c:	4638      	mov	r0, r7
   c018e:	f7f4 fe63 	bl	b4e58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   c0192:	b990      	cbnz	r0, c01ba <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
   c0194:	a945      	add	r1, sp, #276	; 0x114
   c0196:	a80e      	add	r0, sp, #56	; 0x38
   c0198:	ed9d 0b4a 	vldr	d0, [sp, #296]	; 0x128
   c019c:	f7f5 f808 	bl	b51b0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
   c01a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
   c01a2:	425b      	negs	r3, r3
   c01a4:	930f      	str	r3, [sp, #60]	; 0x3c
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   c01a6:	9b02      	ldr	r3, [sp, #8]
   c01a8:	7819      	ldrb	r1, [r3, #0]
   c01aa:	ab11      	add	r3, sp, #68	; 0x44
   c01ac:	9300      	str	r3, [sp, #0]
   c01ae:	4622      	mov	r2, r4
   c01b0:	ab10      	add	r3, sp, #64	; 0x40
   c01b2:	4638      	mov	r0, r7
   c01b4:	f7f4 feb2 	bl	b4f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   c01b8:	b108      	cbz	r0, c01be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9a>
                           output);

    default:
      context->ReportError(context, "Type %d not currently supported.",
                           filter->type);
      return kTfLiteError;
   c01ba:	2001      	movs	r0, #1
   c01bc:	e0ac      	b.n	c0318 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1f4>
  switch (filter->type) {  // Already know in/out types are same.
   c01be:	f818 200a 	ldrb.w	r2, [r8, sl]
   c01c2:	2a03      	cmp	r2, #3
   c01c4:	f000 8150 	beq.w	c0468 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x344>
   c01c8:	2a09      	cmp	r2, #9
   c01ca:	f000 80aa 	beq.w	c0322 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
   c01ce:	2a01      	cmp	r2, #1
   c01d0:	f040 828c 	bne.w	c06ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5c8>
      return EvalFloat(context, node, params, data, input, filter, bias,
   c01d4:	9b02      	ldr	r3, [sp, #8]
   c01d6:	781b      	ldrb	r3, [r3, #0]
  if (activation == kTfLiteActRelu) {
   c01d8:	2b01      	cmp	r3, #1
   c01da:	d064      	beq.n	c02a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x182>
  } else if (activation == kTfLiteActRelu6) {
   c01dc:	2b03      	cmp	r3, #3
   c01de:	d067      	beq.n	c02b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x18c>
    *activation_max = std::numeric_limits<T>::max();
   c01e0:	eddf 7ab0 	vldr	s15, [pc, #704]	; c04a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x380>
   c01e4:	2b02      	cmp	r3, #2
   c01e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   c01ea:	bf18      	it	ne
   c01ec:	eef0 8a67 	vmovne.f32	s17, s15
   c01f0:	eddf 7aad 	vldr	s15, [pc, #692]	; c04a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x384>
   c01f4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   c01f8:	bf18      	it	ne
   c01fa:	eeb0 8a67 	vmovne.f32	s16, s15
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c01fe:	4631      	mov	r1, r6
   c0200:	a84a      	add	r0, sp, #296	; 0x128
   c0202:	f7f6 fb42 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0206:	6873      	ldr	r3, [r6, #4]
   c0208:	9303      	str	r3, [sp, #12]
      GetTensorShape(filter), GetTensorData<float>(filter),
   c020a:	4629      	mov	r1, r5
   c020c:	a845      	add	r0, sp, #276	; 0x114
   c020e:	f7f6 fb3c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0212:	686b      	ldr	r3, [r5, #4]
   c0214:	9304      	str	r3, [sp, #16]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c0216:	4659      	mov	r1, fp
   c0218:	a840      	add	r0, sp, #256	; 0x100
   c021a:	f7f6 fb36 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c021e:	f1bb 0f00 	cmp.w	fp, #0
   c0222:	d001      	beq.n	c0228 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
   c0224:	f8db b004 	ldr.w	fp, [fp, #4]
   c0228:	4621      	mov	r1, r4
   c022a:	a83b      	add	r0, sp, #236	; 0xec
   c022c:	f7f6 fb2d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0230:	b104      	cbz	r4, c0234 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x110>
   c0232:	6864      	ldr	r4, [r4, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   c0234:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  inline int32 DimensionsCount() const { return size_; }
   c0236:	9e45      	ldr	r6, [sp, #276]	; 0x114
   c0238:	3b01      	subs	r3, #1
   c023a:	4619      	mov	r1, r3
   c023c:	a83b      	add	r0, sp, #236	; 0xec
   c023e:	9302      	str	r3, [sp, #8]
   c0240:	f7ff ff55 	bl	c00ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c0244:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   c0246:	9005      	str	r0, [sp, #20]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c0248:	1eb1      	subs	r1, r6, #2
   c024a:	aa3b      	add	r2, sp, #236	; 0xec
   c024c:	a845      	add	r0, sp, #276	; 0x114
   c024e:	f7f8 fd68 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c0252:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c0254:	9002      	str	r0, [sp, #8]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c0256:	a845      	add	r0, sp, #276	; 0x114
   c0258:	f7f6 f87e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c025c:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   c025e:	eddf 6a93 	vldr	s13, [pc, #588]	; c04ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c0262:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
   c0264:	461f      	mov	r7, r3
   c0266:	9a05      	ldr	r2, [sp, #20]
   c0268:	42ba      	cmp	r2, r7
   c026a:	dd48      	ble.n	c02fe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1da>
   c026c:	9a03      	ldr	r2, [sp, #12]
   c026e:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   c0272:	2200      	movs	r2, #0
   c0274:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0278:	4611      	mov	r1, r2
   c027a:	9d02      	ldr	r5, [sp, #8]
   c027c:	428d      	cmp	r5, r1
   c027e:	dd39      	ble.n	c02f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   c0280:	9d04      	ldr	r5, [sp, #16]
      float total = 0.f;
   c0282:	eddf 7a8a 	vldr	s15, [pc, #552]	; c04ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
   c0286:	eb05 0882 	add.w	r8, r5, r2, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c028a:	46d1      	mov	r9, sl
      for (int d = 0; d < accum_depth; ++d) {
   c028c:	f04f 0c00 	mov.w	ip, #0
   c0290:	4560      	cmp	r0, ip
   c0292:	dd10      	ble.n	c02b6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x192>
        total += input_data[b * accum_depth + d] *
   c0294:	ecb9 6a01 	vldmia	r9!, {s12}
                 weights_data[out_c * accum_depth + d];
   c0298:	ecb8 7a01 	vldmia	r8!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   c029c:	f10c 0c01 	add.w	ip, ip, #1
        total += input_data[b * accum_depth + d] *
   c02a0:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   c02a4:	e7f4      	b.n	c0290 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    *activation_max = std::numeric_limits<T>::max();
   c02a6:	eddf 8a7f 	vldr	s17, [pc, #508]	; c04a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x380>
    *activation_min = 0;
   c02aa:	ed9f 8a80 	vldr	s16, [pc, #512]	; c04ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
   c02ae:	e7a6      	b.n	c01fe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    *activation_max = 6;
   c02b0:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   c02b4:	e7f9      	b.n	c02aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x186>
      if (bias_data) {
   c02b6:	f1bb 0f00 	cmp.w	fp, #0
   c02ba:	d018      	beq.n	c02ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
        bias_value = bias_data[out_c];
   c02bc:	eb0b 0c81 	add.w	ip, fp, r1, lsl #2
   c02c0:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   c02c4:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c02c8:	3101      	adds	r1, #1
	return __b;
   c02ca:	eef4 7a48 	vcmp.f32	s15, s16
   c02ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c02d2:	bf48      	it	mi
   c02d4:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
   c02d8:	eef4 7a68 	vcmp.f32	s15, s17
   c02dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c02e0:	bfc8      	it	gt
   c02e2:	eef0 7a68 	vmovgt.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   c02e6:	ecee 7a01 	vstmia	lr!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c02ea:	4402      	add	r2, r0
   c02ec:	e7c5      	b.n	c027a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x156>
      float bias_value = 0.0f;
   c02ee:	eeb0 7a66 	vmov.f32	s14, s13
   c02f2:	e7e7      	b.n	c02c4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
  for (int b = 0; b < batches; ++b) {
   c02f4:	9a02      	ldr	r2, [sp, #8]
   c02f6:	3701      	adds	r7, #1
   c02f8:	4416      	add	r6, r2
   c02fa:	4403      	add	r3, r0
   c02fc:	e7b3      	b.n	c0266 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x142>
   c02fe:	a83b      	add	r0, sp, #236	; 0xec
   c0300:	f7f6 f81f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c0304:	a840      	add	r0, sp, #256	; 0x100
   c0306:	f7f6 f81c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c030a:	a845      	add	r0, sp, #276	; 0x114
   c030c:	f7f6 f819 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c0310:	a84a      	add	r0, sp, #296	; 0x128
      TF_LITE_FULLY_CONNECTED(int16_t);
   c0312:	f7f6 f816 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c0316:	2000      	movs	r0, #0
  }
  return kTfLiteOk;
}
   c0318:	b051      	add	sp, #324	; 0x144
   c031a:	ecbd 8b02 	vpop	{d8}
   c031e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.input_offset = -input->params.zero_point;
   c0322:	6933      	ldr	r3, [r6, #16]
   c0324:	9305      	str	r3, [sp, #20]
  op_params.weights_offset = -filter->params.zero_point;
   c0326:	692b      	ldr	r3, [r5, #16]
   c0328:	9306      	str	r3, [sp, #24]
  op_params.output_offset = output->params.zero_point;
   c032a:	6923      	ldr	r3, [r4, #16]
   c032c:	9307      	str	r3, [sp, #28]
  op_params.output_multiplier = data->output_multiplier;
   c032e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c0330:	ee08 3a10 	vmov	s16, r3
  op_params.output_shift = -data->output_shift;
   c0334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c0336:	425b      	negs	r3, r3
   c0338:	ee08 3a90 	vmov	s17, r3
  op_params.quantized_activation_min = data->output_activation_min;
   c033c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c033e:	9302      	str	r3, [sp, #8]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c0340:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data->output_activation_max;
   c0342:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c0344:	9303      	str	r3, [sp, #12]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c0346:	a813      	add	r0, sp, #76	; 0x4c
   c0348:	f7f6 fa9f 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c034c:	6873      	ldr	r3, [r6, #4]
   c034e:	9308      	str	r3, [sp, #32]
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   c0350:	4629      	mov	r1, r5
   c0352:	a818      	add	r0, sp, #96	; 0x60
   c0354:	f7f6 fa99 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0358:	686b      	ldr	r3, [r5, #4]
   c035a:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c035c:	4659      	mov	r1, fp
   c035e:	a81d      	add	r0, sp, #116	; 0x74
   c0360:	f7f6 fa93 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0364:	f1bb 0f00 	cmp.w	fp, #0
   c0368:	d001      	beq.n	c036e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
   c036a:	f8db b004 	ldr.w	fp, [fp, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   c036e:	4621      	mov	r1, r4
   c0370:	a822      	add	r0, sp, #136	; 0x88
   c0372:	f7f6 fa8a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0376:	6863      	ldr	r3, [r4, #4]
   c0378:	9c18      	ldr	r4, [sp, #96]	; 0x60
   c037a:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   c037c:	2c01      	cmp	r4, #1
   c037e:	dc01      	bgt.n	c0384 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x260>
   c0380:	f004 fa3c 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   c0384:	9b22      	ldr	r3, [sp, #136]	; 0x88
   c0386:	2b02      	cmp	r3, #2
   c0388:	d1fa      	bne.n	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c038a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   c038e:	4293      	cmp	r3, r2
   c0390:	dcf6      	bgt.n	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   c0392:	2100      	movs	r1, #0
   c0394:	a822      	add	r0, sp, #136	; 0x88
   c0396:	f7f5 ffdf 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   c039a:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   c039c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_depth = output_shape.Dims(1);
   c039e:	a822      	add	r0, sp, #136	; 0x88
   c03a0:	f7f5 ffda 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   c03a4:	1ea1      	subs	r1, r4, #2
  const int output_depth = output_shape.Dims(1);
   c03a6:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   c03a8:	a818      	add	r0, sp, #96	; 0x60
   c03aa:	f7f5 ffd5 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c03ae:	4286      	cmp	r6, r0
   c03b0:	dce6      	bgt.n	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c03b2:	1e61      	subs	r1, r4, #1
   c03b4:	a818      	add	r0, sp, #96	; 0x60
   c03b6:	f7f5 ffcf 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c03ba:	2400      	movs	r4, #0
   c03bc:	4605      	mov	r5, r0
   c03be:	46a1      	mov	r9, r4
  for (int b = 0; b < batches; ++b) {
   c03c0:	46a2      	mov	sl, r4
   c03c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c03c4:	4553      	cmp	r3, sl
   c03c6:	dd44      	ble.n	c0452 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x32e>
   c03c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c03ca:	2700      	movs	r7, #0
   c03cc:	444b      	add	r3, r9
   c03ce:	9304      	str	r3, [sp, #16]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c03d0:	46b8      	mov	r8, r7
   c03d2:	4546      	cmp	r6, r8
   c03d4:	dd38      	ble.n	c0448 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x324>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   c03d6:	9b08      	ldr	r3, [sp, #32]
   c03d8:	eb03 0e04 	add.w	lr, r3, r4
   c03dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c03de:	eb03 0c07 	add.w	ip, r3, r7
      int32 acc = 0;
   c03e2:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   c03e4:	461a      	mov	r2, r3
   c03e6:	4295      	cmp	r5, r2
   c03e8:	dd0f      	ble.n	c040a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
        int32 input_val = input_data[b * accum_depth + d];
   c03ea:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c03ee:	9806      	ldr	r0, [sp, #24]
        int32 input_val = input_data[b * accum_depth + d];
   c03f0:	910c      	str	r1, [sp, #48]	; 0x30
        int32 filter_val = filter_data[out_c * accum_depth + d];
   c03f2:	f91c 1b01 	ldrsb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c03f6:	1a09      	subs	r1, r1, r0
   c03f8:	910d      	str	r1, [sp, #52]	; 0x34
   c03fa:	9805      	ldr	r0, [sp, #20]
   c03fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   c03fe:	1a08      	subs	r0, r1, r0
   c0400:	990d      	ldr	r1, [sp, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
   c0402:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c0404:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   c0408:	e7ed      	b.n	c03e6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c2>
      }
      if (bias_data) {
   c040a:	f1bb 0f00 	cmp.w	fp, #0
   c040e:	d002      	beq.n	c0416 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
        acc += bias_data[out_c];
   c0410:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   c0414:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   c0416:	4618      	mov	r0, r3
   c0418:	ee18 2a90 	vmov	r2, s17
   c041c:	ee18 1a10 	vmov	r1, s16
   c0420:	f7f9 ff92 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      acc += output_offset;
   c0424:	9b07      	ldr	r3, [sp, #28]
   c0426:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   c0428:	9b02      	ldr	r3, [sp, #8]
   c042a:	4298      	cmp	r0, r3
   c042c:	bfb8      	it	lt
   c042e:	4618      	movlt	r0, r3
   c0430:	9b03      	ldr	r3, [sp, #12]
   c0432:	4298      	cmp	r0, r3
   c0434:	bfa8      	it	ge
   c0436:	4618      	movge	r0, r3
   c0438:	9b04      	ldr	r3, [sp, #16]
   c043a:	f803 0b01 	strb.w	r0, [r3], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c043e:	f108 0801 	add.w	r8, r8, #1
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   c0442:	9304      	str	r3, [sp, #16]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0444:	442f      	add	r7, r5
   c0446:	e7c4      	b.n	c03d2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ae>
  for (int b = 0; b < batches; ++b) {
   c0448:	f10a 0a01 	add.w	sl, sl, #1
   c044c:	44b1      	add	r9, r6
   c044e:	442c      	add	r4, r5
   c0450:	e7b7      	b.n	c03c2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
   c0452:	a822      	add	r0, sp, #136	; 0x88
   c0454:	f7f5 ff75 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c0458:	a81d      	add	r0, sp, #116	; 0x74
   c045a:	f7f5 ff72 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   c045e:	a818      	add	r0, sp, #96	; 0x60
   c0460:	f7f5 ff6f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c0464:	a813      	add	r0, sp, #76	; 0x4c
   c0466:	e754      	b.n	c0312 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
  const int32_t input_offset = -input->params.zero_point;
   c0468:	6933      	ldr	r3, [r6, #16]
   c046a:	9304      	str	r3, [sp, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   c046c:	692b      	ldr	r3, [r5, #16]
   c046e:	9305      	str	r3, [sp, #20]
  op_params.output_multiplier = data->output_multiplier;
   c0470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const int32_t output_offset = output->params.zero_point;
   c0472:	f8d4 a010 	ldr.w	sl, [r4, #16]
  op_params.output_multiplier = data->output_multiplier;
   c0476:	ee08 3a10 	vmov	s16, r3
  op_params.output_shift = -data->output_shift;
   c047a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c047c:	425b      	negs	r3, r3
   c047e:	ee08 3a90 	vmov	s17, r3
  op_params.quantized_activation_min = data->output_activation_min;
   c0482:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c0484:	9302      	str	r3, [sp, #8]
  op_params.quantized_activation_max = data->output_activation_max;
   c0486:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c0488:	9303      	str	r3, [sp, #12]
  switch (output->type) {
   c048a:	f818 3009 	ldrb.w	r3, [r8, r9]
   c048e:	2b03      	cmp	r3, #3
   c0490:	d010      	beq.n	c04b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x390>
   c0492:	2b07      	cmp	r3, #7
   c0494:	f000 809e 	beq.w	c05d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4b0>
      context->ReportError(
   c0498:	697b      	ldr	r3, [r7, #20]
   c049a:	4905      	ldr	r1, [pc, #20]	; (c04b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x38c>)
   c049c:	4638      	mov	r0, r7
   c049e:	4798      	blx	r3
      return kTfLiteError;
   c04a0:	e68b      	b.n	c01ba <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
   c04a2:	bf00      	nop
   c04a4:	7f7fffff 	.word	0x7f7fffff
   c04a8:	ff7fffff 	.word	0xff7fffff
   c04ac:	00000000 	.word	0x00000000
   c04b0:	000c8c4e 	.word	0x000c8c4e
      TF_LITE_FULLY_CONNECTED(uint8_t);
   c04b4:	4631      	mov	r1, r6
   c04b6:	a827      	add	r0, sp, #156	; 0x9c
   c04b8:	f7f6 f9e7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c04bc:	6873      	ldr	r3, [r6, #4]
   c04be:	9308      	str	r3, [sp, #32]
   c04c0:	4629      	mov	r1, r5
   c04c2:	a82c      	add	r0, sp, #176	; 0xb0
   c04c4:	f7f6 f9e1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c04c8:	686b      	ldr	r3, [r5, #4]
   c04ca:	9309      	str	r3, [sp, #36]	; 0x24
   c04cc:	4659      	mov	r1, fp
   c04ce:	a831      	add	r0, sp, #196	; 0xc4
   c04d0:	f7f6 f9db 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c04d4:	f1bb 0f00 	cmp.w	fp, #0
   c04d8:	d001      	beq.n	c04de <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3ba>
   c04da:	f8db b004 	ldr.w	fp, [fp, #4]
   c04de:	4621      	mov	r1, r4
   c04e0:	a836      	add	r0, sp, #216	; 0xd8
   c04e2:	f7f6 f9d2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c04e6:	6863      	ldr	r3, [r4, #4]
   c04e8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   c04ea:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   c04ec:	2c01      	cmp	r4, #1
   c04ee:	f77f af47 	ble.w	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
   c04f2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   c04f4:	2b00      	cmp	r3, #0
   c04f6:	f77f af43 	ble.w	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c04fa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   c04fe:	428a      	cmp	r2, r1
   c0500:	f73f af3e 	bgt.w	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c0504:	3b01      	subs	r3, #1
   c0506:	4619      	mov	r1, r3
   c0508:	a836      	add	r0, sp, #216	; 0xd8
   c050a:	9306      	str	r3, [sp, #24]
   c050c:	f7ff fdef 	bl	c00ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0510:	9b06      	ldr	r3, [sp, #24]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c0512:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0514:	1ea1      	subs	r1, r4, #2
   c0516:	aa36      	add	r2, sp, #216	; 0xd8
   c0518:	a82c      	add	r0, sp, #176	; 0xb0
   c051a:	f7f8 fc02 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c051e:	1e61      	subs	r1, r4, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0520:	9006      	str	r0, [sp, #24]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c0522:	a82c      	add	r0, sp, #176	; 0xb0
   c0524:	f7f5 ff18 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0528:	2400      	movs	r4, #0
   c052a:	4605      	mov	r5, r0
   c052c:	46a0      	mov	r8, r4
  for (int b = 0; b < batches; ++b) {
   c052e:	46a1      	mov	r9, r4
   c0530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c0532:	454b      	cmp	r3, r9
   c0534:	dd43      	ble.n	c05be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x49a>
   c0536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c0538:	2600      	movs	r6, #0
   c053a:	4443      	add	r3, r8
   c053c:	9307      	str	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c053e:	4637      	mov	r7, r6
   c0540:	9b06      	ldr	r3, [sp, #24]
   c0542:	42bb      	cmp	r3, r7
   c0544:	dd35      	ble.n	c05b2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x48e>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   c0546:	9b08      	ldr	r3, [sp, #32]
   c0548:	eb03 0e04 	add.w	lr, r3, r4
   c054c:	9b09      	ldr	r3, [sp, #36]	; 0x24
      int32 acc = 0;
   c054e:	2000      	movs	r0, #0
   c0550:	eb03 0c06 	add.w	ip, r3, r6
      for (int d = 0; d < accum_depth; ++d) {
   c0554:	4603      	mov	r3, r0
   c0556:	429d      	cmp	r5, r3
   c0558:	dd0f      	ble.n	c057a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x456>
        int32 input_val = input_data[b * accum_depth + d];
        int32 filter_val = filter_data[out_c * accum_depth + d];
   c055a:	f81c 1b01 	ldrb.w	r1, [ip], #1
   c055e:	910c      	str	r1, [sp, #48]	; 0x30
        int32 input_val = input_data[b * accum_depth + d];
   c0560:	f81e 2b01 	ldrb.w	r2, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c0564:	9904      	ldr	r1, [sp, #16]
   c0566:	1a52      	subs	r2, r2, r1
   c0568:	920d      	str	r2, [sp, #52]	; 0x34
   c056a:	9905      	ldr	r1, [sp, #20]
   c056c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   c056e:	1a51      	subs	r1, r2, r1
   c0570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
   c0572:	3301      	adds	r3, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c0574:	fb01 0002 	mla	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   c0578:	e7ed      	b.n	c0556 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x432>
      }
      if (bias_data) {
   c057a:	f1bb 0f00 	cmp.w	fp, #0
   c057e:	d002      	beq.n	c0586 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x462>
        acc += bias_data[out_c];
   c0580:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
   c0584:	4418      	add	r0, r3
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   c0586:	ee18 2a90 	vmov	r2, s17
   c058a:	ee18 1a10 	vmov	r1, s16
   c058e:	f7f9 fedb 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      acc += output_offset;
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c0592:	9b02      	ldr	r3, [sp, #8]
      acc += output_offset;
   c0594:	4450      	add	r0, sl
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c0596:	4298      	cmp	r0, r3
   c0598:	bfb8      	it	lt
   c059a:	4618      	movlt	r0, r3
   c059c:	9b03      	ldr	r3, [sp, #12]
   c059e:	4298      	cmp	r0, r3
   c05a0:	bfa8      	it	ge
   c05a2:	4618      	movge	r0, r3
   c05a4:	9b07      	ldr	r3, [sp, #28]
   c05a6:	f803 0b01 	strb.w	r0, [r3], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c05aa:	3701      	adds	r7, #1
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c05ac:	9307      	str	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c05ae:	442e      	add	r6, r5
   c05b0:	e7c6      	b.n	c0540 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  for (int b = 0; b < batches; ++b) {
   c05b2:	9b06      	ldr	r3, [sp, #24]
   c05b4:	f109 0901 	add.w	r9, r9, #1
   c05b8:	4498      	add	r8, r3
   c05ba:	442c      	add	r4, r5
   c05bc:	e7b8      	b.n	c0530 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>
   c05be:	a836      	add	r0, sp, #216	; 0xd8
   c05c0:	f7f5 febf 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c05c4:	a831      	add	r0, sp, #196	; 0xc4
   c05c6:	f7f5 febc 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c05ca:	a82c      	add	r0, sp, #176	; 0xb0
   c05cc:	f7f5 feb9 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c05d0:	a827      	add	r0, sp, #156	; 0x9c
   c05d2:	e69e      	b.n	c0312 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      TF_LITE_FULLY_CONNECTED(int16_t);
   c05d4:	4631      	mov	r1, r6
   c05d6:	a83b      	add	r0, sp, #236	; 0xec
   c05d8:	f7f6 f957 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c05dc:	6873      	ldr	r3, [r6, #4]
   c05de:	9307      	str	r3, [sp, #28]
   c05e0:	4629      	mov	r1, r5
   c05e2:	a840      	add	r0, sp, #256	; 0x100
   c05e4:	f7f6 f951 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c05e8:	686b      	ldr	r3, [r5, #4]
   c05ea:	9308      	str	r3, [sp, #32]
   c05ec:	4659      	mov	r1, fp
   c05ee:	a845      	add	r0, sp, #276	; 0x114
   c05f0:	f7f6 f94b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c05f4:	f1bb 0f00 	cmp.w	fp, #0
   c05f8:	d001      	beq.n	c05fe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4da>
   c05fa:	f8db b004 	ldr.w	fp, [fp, #4]
   c05fe:	4621      	mov	r1, r4
   c0600:	a84a      	add	r0, sp, #296	; 0x128
   c0602:	f7f6 f942 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0606:	6863      	ldr	r3, [r4, #4]
   c0608:	9309      	str	r3, [sp, #36]	; 0x24
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c060a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   c060e:	4293      	cmp	r3, r2
   c0610:	f73f aeb6 	bgt.w	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  TFLITE_DCHECK_EQ(output_offset, 0);
   c0614:	f1ba 0f00 	cmp.w	sl, #0
   c0618:	f47f aeb2 	bne.w	c0380 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int32_t input_offset = -input->params.zero_point;
   c061c:	9b04      	ldr	r3, [sp, #16]
   c061e:	9c40      	ldr	r4, [sp, #256]	; 0x100
   c0620:	425b      	negs	r3, r3
   c0622:	9306      	str	r3, [sp, #24]
  const int32_t filter_offset = -filter->params.zero_point;
   c0624:	9b05      	ldr	r3, [sp, #20]
   c0626:	425b      	negs	r3, r3
   c0628:	9305      	str	r3, [sp, #20]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c062a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   c062c:	3b01      	subs	r3, #1
   c062e:	4619      	mov	r1, r3
   c0630:	a84a      	add	r0, sp, #296	; 0x128
   c0632:	9304      	str	r3, [sp, #16]
   c0634:	f7ff fd5b 	bl	c00ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0638:	9b04      	ldr	r3, [sp, #16]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c063a:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c063c:	1ea1      	subs	r1, r4, #2
   c063e:	aa4a      	add	r2, sp, #296	; 0x128
   c0640:	a840      	add	r0, sp, #256	; 0x100
   c0642:	f7f8 fb6e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c0646:	1e61      	subs	r1, r4, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0648:	9004      	str	r0, [sp, #16]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c064a:	a840      	add	r0, sp, #256	; 0x100
   c064c:	f7f5 fe84 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
   c0650:	4655      	mov	r5, sl
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c0652:	4604      	mov	r4, r0
   c0654:	4657      	mov	r7, sl
   c0656:	46d0      	mov	r8, sl
  for (int b = 0; b < batches; ++b) {
   c0658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c065a:	42ab      	cmp	r3, r5
   c065c:	dd3b      	ble.n	c06d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b2>
   c065e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0660:	2600      	movs	r6, #0
   c0662:	eb03 0a48 	add.w	sl, r3, r8, lsl #1
  for (int b = 0; b < batches; ++b) {
   c0666:	46b1      	mov	r9, r6
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0668:	9b04      	ldr	r3, [sp, #16]
   c066a:	42b3      	cmp	r3, r6
   c066c:	dd2e      	ble.n	c06cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5a8>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
   c066e:	9b07      	ldr	r3, [sp, #28]
   c0670:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
   c0674:	eb03 0e07 	add.w	lr, r3, r7
   c0678:	9b08      	ldr	r3, [sp, #32]
   c067a:	eb03 0c09 	add.w	ip, r3, r9
   c067e:	2300      	movs	r3, #0
   c0680:	429c      	cmp	r4, r3
   c0682:	dd10      	ble.n	c06a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x582>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c0684:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   c0688:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c068c:	920b      	str	r2, [sp, #44]	; 0x2c
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   c068e:	9a05      	ldr	r2, [sp, #20]
   c0690:	188a      	adds	r2, r1, r2
   c0692:	920c      	str	r2, [sp, #48]	; 0x30
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c0694:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c0696:	9a06      	ldr	r2, [sp, #24]
   c0698:	4411      	add	r1, r2
   c069a:	460a      	mov	r2, r1
        accum += filter_val * input_val;
   c069c:	990c      	ldr	r1, [sp, #48]	; 0x30
      for (int d = 0; d < accum_depth; ++d) {
   c069e:	3301      	adds	r3, #1
        accum += filter_val * input_val;
   c06a0:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   c06a4:	e7ec      	b.n	c0680 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x55c>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
   c06a6:	ee18 2a90 	vmov	r2, s17
   c06aa:	ee18 1a10 	vmov	r1, s16
   c06ae:	f7f9 fe4b 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
   c06b2:	9b02      	ldr	r3, [sp, #8]
   c06b4:	4298      	cmp	r0, r3
   c06b6:	bfb8      	it	lt
   c06b8:	4618      	movlt	r0, r3
   c06ba:	9b03      	ldr	r3, [sp, #12]
   c06bc:	4298      	cmp	r0, r3
   c06be:	bfa8      	it	ge
   c06c0:	4618      	movge	r0, r3
   c06c2:	f82a 0b02 	strh.w	r0, [sl], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c06c6:	3601      	adds	r6, #1
   c06c8:	44a1      	add	r9, r4
   c06ca:	e7cd      	b.n	c0668 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x544>
  for (int b = 0; b < batches; ++b) {
   c06cc:	9b04      	ldr	r3, [sp, #16]
   c06ce:	3501      	adds	r5, #1
   c06d0:	4498      	add	r8, r3
   c06d2:	4427      	add	r7, r4
   c06d4:	e7c0      	b.n	c0658 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x534>
      TF_LITE_FULLY_CONNECTED(int16_t);
   c06d6:	a84a      	add	r0, sp, #296	; 0x128
   c06d8:	f7f5 fe33 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c06dc:	a845      	add	r0, sp, #276	; 0x114
   c06de:	f7f5 fe30 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c06e2:	a840      	add	r0, sp, #256	; 0x100
   c06e4:	f7f5 fe2d 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c06e8:	a83b      	add	r0, sp, #236	; 0xec
   c06ea:	e612      	b.n	c0312 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      context->ReportError(context, "Type %d not currently supported.",
   c06ec:	697b      	ldr	r3, [r7, #20]
   c06ee:	4902      	ldr	r1, [pc, #8]	; (c06f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d4>)
   c06f0:	4638      	mov	r0, r7
   c06f2:	4798      	blx	r3
   c06f4:	e561      	b.n	c01ba <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
   c06f6:	bf00      	nop
   c06f8:	000c8c8f 	.word	0x000c8c8f

000c06fc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:
TfLiteRegistration* Register_FULLY_CONNECTED() {
  static TfLiteRegistration r = {fully_connected::Init, fully_connected::Free,
                                 fully_connected::Prepare,
                                 fully_connected::Eval};
  return &r;
}
   c06fc:	4800      	ldr	r0, [pc, #0]	; (c0700 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x4>)
   c06fe:	4770      	bx	lr
   c0700:	2003c3d8 	.word	0x2003c3d8

000c0704 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c0704:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0706:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c0708:	683d      	ldr	r5, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c070a:	2d01      	cmp	r5, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c070c:	b085      	sub	sp, #20
   c070e:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0710:	d00c      	beq.n	c072c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   c0712:	2401      	movs	r4, #1
   c0714:	4b3b      	ldr	r3, [pc, #236]	; (c0804 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   c0716:	9301      	str	r3, [sp, #4]
   c0718:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c071c:	4b3a      	ldr	r3, [pc, #232]	; (c0808 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   c071e:	9300      	str	r3, [sp, #0]
   c0720:	6945      	ldr	r5, [r0, #20]
   c0722:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   c0724:	4a39      	ldr	r2, [pc, #228]	; (c080c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c0726:	493a      	ldr	r1, [pc, #232]	; (c0810 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c0728:	47a8      	blx	r5
   c072a:	e00f      	b.n	c074c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c072c:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   c072e:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   c0730:	2c01      	cmp	r4, #1
   c0732:	d00e      	beq.n	c0752 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
   c0734:	4b33      	ldr	r3, [pc, #204]	; (c0804 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   c0736:	9301      	str	r3, [sp, #4]
   c0738:	e9cd 4502 	strd	r4, r5, [sp, #8]
   c073c:	4b35      	ldr	r3, [pc, #212]	; (c0814 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   c073e:	9300      	str	r3, [sp, #0]
   c0740:	6944      	ldr	r4, [r0, #20]
   c0742:	2322      	movs	r3, #34	; 0x22
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   c0744:	4a31      	ldr	r2, [pc, #196]	; (c080c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c0746:	4932      	ldr	r1, [pc, #200]	; (c0810 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   c0748:	47a0      	blx	r4
   c074a:	462c      	mov	r4, r5
  }
  return kTfLiteOk;
}
   c074c:	4620      	mov	r0, r4
   c074e:	b005      	add	sp, #20
   c0750:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0752:	6879      	ldr	r1, [r7, #4]
   c0754:	6882      	ldr	r2, [r0, #8]
   c0756:	2738      	movs	r7, #56	; 0x38
   c0758:	4379      	muls	r1, r7
   c075a:	eb02 0c01 	add.w	ip, r2, r1
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c075e:	5c55      	ldrb	r5, [r2, r1]
   c0760:	2d01      	cmp	r5, #1
   c0762:	d008      	beq.n	c0776 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   c0764:	4b2c      	ldr	r3, [pc, #176]	; (c0818 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
   c0766:	9301      	str	r3, [sp, #4]
   c0768:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c076c:	4b2b      	ldr	r3, [pc, #172]	; (c081c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   c076e:	9300      	str	r3, [sp, #0]
   c0770:	6945      	ldr	r5, [r0, #20]
   c0772:	2323      	movs	r3, #35	; 0x23
   c0774:	e7d6      	b.n	c0724 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0776:	685b      	ldr	r3, [r3, #4]
   c0778:	437b      	muls	r3, r7
   c077a:	18d1      	adds	r1, r2, r3
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   c077c:	5cd4      	ldrb	r4, [r2, r3]
   c077e:	2c01      	cmp	r4, #1
   c0780:	d008      	beq.n	c0794 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   c0782:	4b26      	ldr	r3, [pc, #152]	; (c081c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   c0784:	9301      	str	r3, [sp, #4]
   c0786:	e9cd 4502 	strd	r4, r5, [sp, #8]
   c078a:	4b25      	ldr	r3, [pc, #148]	; (c0820 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
   c078c:	9300      	str	r3, [sp, #0]
   c078e:	6944      	ldr	r4, [r0, #20]
   c0790:	2324      	movs	r3, #36	; 0x24
   c0792:	e7d7      	b.n	c0744 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   c0794:	698b      	ldr	r3, [r1, #24]
   c0796:	f8dc 2018 	ldr.w	r2, [ip, #24]
   c079a:	4293      	cmp	r3, r2
   c079c:	d008      	beq.n	c07b0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
   c079e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c07a2:	4b20      	ldr	r3, [pc, #128]	; (c0824 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
   c07a4:	9301      	str	r3, [sp, #4]
   c07a6:	4b20      	ldr	r3, [pc, #128]	; (c0828 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   c07a8:	9300      	str	r3, [sp, #0]
   c07aa:	6945      	ldr	r5, [r0, #20]
   c07ac:	2325      	movs	r3, #37	; 0x25
   c07ae:	e7b9      	b.n	c0724 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   c07b0:	688f      	ldr	r7, [r1, #8]
   c07b2:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c07b6:	6839      	ldr	r1, [r7, #0]
   c07b8:	6813      	ldr	r3, [r2, #0]
   c07ba:	4299      	cmp	r1, r3
   c07bc:	d008      	beq.n	c07d0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   c07be:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c07c2:	4b1a      	ldr	r3, [pc, #104]	; (c082c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   c07c4:	9301      	str	r3, [sp, #4]
   c07c6:	4b1a      	ldr	r3, [pc, #104]	; (c0830 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   c07c8:	9300      	str	r3, [sp, #0]
   c07ca:	6945      	ldr	r5, [r0, #20]
   c07cc:	2326      	movs	r3, #38	; 0x26
   c07ce:	e7a9      	b.n	c0724 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
   c07d0:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c07d2:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   c07d4:	1e58      	subs	r0, r3, #1
   c07d6:	4281      	cmp	r1, r0
   c07d8:	dd12      	ble.n	c0800 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c07da:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   c07de:	3301      	adds	r3, #1
   c07e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   c07e4:	42a8      	cmp	r0, r5
   c07e6:	d0f5      	beq.n	c07d4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   c07e8:	4b12      	ldr	r3, [pc, #72]	; (c0834 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   c07ea:	9301      	str	r3, [sp, #4]
   c07ec:	4b12      	ldr	r3, [pc, #72]	; (c0838 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   c07ee:	9300      	str	r3, [sp, #0]
   c07f0:	e9cd 0502 	strd	r0, r5, [sp, #8]
   c07f4:	4a05      	ldr	r2, [pc, #20]	; (c080c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c07f6:	6975      	ldr	r5, [r6, #20]
   c07f8:	4905      	ldr	r1, [pc, #20]	; (c0810 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   c07fa:	2328      	movs	r3, #40	; 0x28
   c07fc:	4630      	mov	r0, r6
   c07fe:	e793      	b.n	c0728 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   c0800:	2400      	movs	r4, #0
   c0802:	e7a3      	b.n	c074c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   c0804:	000c8aca 	.word	0x000c8aca
   c0808:	000c830c 	.word	0x000c830c
   c080c:	000c8cb0 	.word	0x000c8cb0
   c0810:	000c6fd5 	.word	0x000c6fd5
   c0814:	000c831c 	.word	0x000c831c
   c0818:	000c8adb 	.word	0x000c8adb
   c081c:	000c706b 	.word	0x000c706b
   c0820:	000c8464 	.word	0x000c8464
   c0824:	000c8471 	.word	0x000c8471
   c0828:	000c847e 	.word	0x000c847e
   c082c:	000c848c 	.word	0x000c848c
   c0830:	000c849e 	.word	0x000c849e
   c0834:	000c84b1 	.word	0x000c84b1
   c0838:	000c84c6 	.word	0x000c84c6

000c083c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0840:	ed2d 8b04 	vpush	{d8-d9}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0844:	680b      	ldr	r3, [r1, #0]
   c0846:	6884      	ldr	r4, [r0, #8]
   c0848:	685d      	ldr	r5, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c084a:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c084c:	2338      	movs	r3, #56	; 0x38
   c084e:	fb03 4505 	mla	r5, r3, r5, r4
   c0852:	b08a      	sub	sp, #40	; 0x28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0854:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   c0856:	4629      	mov	r1, r5
   c0858:	4668      	mov	r0, sp
   c085a:	fb03 4402 	mla	r4, r3, r2, r4
   c085e:	f7f6 f814 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0862:	b105      	cbz	r5, c0866 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
   c0864:	686d      	ldr	r5, [r5, #4]
                       GetTensorShape(output), GetTensorData<float>(output));
   c0866:	4621      	mov	r1, r4
   c0868:	a805      	add	r0, sp, #20
   c086a:	f7f6 f80e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c086e:	b104      	cbz	r4, c0872 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x36>
   c0870:	6864      	ldr	r4, [r4, #4]
   c0872:	f8dd 8000 	ldr.w	r8, [sp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c0876:	9b05      	ldr	r3, [sp, #20]
   c0878:	4598      	cmp	r8, r3
   c087a:	d001      	beq.n	c0880 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   c087c:	f003 ffbe 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   c0880:	2600      	movs	r6, #0
   c0882:	45b0      	cmp	r8, r6
   c0884:	dd0c      	ble.n	c08a0 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c0886:	4631      	mov	r1, r6
   c0888:	4668      	mov	r0, sp
   c088a:	f7f5 fd65 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c088e:	4631      	mov	r1, r6
   c0890:	4607      	mov	r7, r0
   c0892:	a805      	add	r0, sp, #20
   c0894:	f7f5 fd60 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0898:	4287      	cmp	r7, r0
   c089a:	d1ef      	bne.n	c087c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   c089c:	3601      	adds	r6, #1
   c089e:	e7f0      	b.n	c0882 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c08a0:	f1b8 0f04 	cmp.w	r8, #4
   c08a4:	bfcc      	ite	gt
   c08a6:	9a01      	ldrgt	r2, [sp, #4]
   c08a8:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   c08aa:	2300      	movs	r3, #0
    int buffer_size = 1;
   c08ac:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
   c08ae:	4598      	cmp	r8, r3
   c08b0:	dc24      	bgt.n	c08fc <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   c08b2:	2600      	movs	r6, #0
  if ((diff < 0.5f) ||
   c08b4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    return floor_val = floor_val + 1.0f;
   c08b8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   c08bc:	42be      	cmp	r6, r7
   c08be:	da22      	bge.n	c0906 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   c08c0:	ecb5 8a01 	vldmia	r5!, {s16}
  { return __builtin_floorf(__x); }
   c08c4:	eeb0 0a48 	vmov.f32	s0, s16
   c08c8:	f004 fd5a 	bl	c5380 <floorf>
  auto diff = value - floor_val;
   c08cc:	ee38 8a40 	vsub.f32	s16, s16, s0
  if ((diff < 0.5f) ||
   c08d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c08d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c08d8:	d40c      	bmi.n	c08f4 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   c08da:	eeb4 8a68 	vcmp.f32	s16, s17
   c08de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c08e2:	d105      	bne.n	c08f0 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   c08e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c08e8:	ee17 3a90 	vmov	r3, s15
   c08ec:	07db      	lsls	r3, r3, #31
   c08ee:	d501      	bpl.n	c08f4 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    return floor_val = floor_val + 1.0f;
   c08f0:	ee30 0a09 	vadd.f32	s0, s0, s18
    output_data[i] = RoundToNearest(input_data[i]);
   c08f4:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   c08f8:	3601      	adds	r6, #1
   c08fa:	e7df      	b.n	c08bc <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      buffer_size *= dims_data[i];
   c08fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c0900:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c0902:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
   c0904:	e7d3      	b.n	c08ae <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   c0906:	a805      	add	r0, sp, #20
   c0908:	f7f5 fd1b 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   c090c:	4668      	mov	r0, sp
   c090e:	f7f5 fd18 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>

  return kTfLiteOk;
}
   c0912:	2000      	movs	r0, #0
   c0914:	b00a      	add	sp, #40	; 0x28
   c0916:	ecbd 8b04 	vpop	{d8-d9}
   c091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000c0920 <_ZN6tflite3ops5micro14Register_ROUNDEv>:

TfLiteRegistration* Register_ROUND() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, round::Prepare, round::Eval};
  return &r;
}
   c0920:	4800      	ldr	r0, [pc, #0]	; (c0924 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x4>)
   c0922:	4770      	bx	lr
   c0924:	2003c3f8 	.word	0x2003c3f8

000c0928 <_ZN6tflite3ops5micro14AllOpsResolverD1Ev>:

namespace tflite {
namespace ops {
namespace micro {

class AllOpsResolver : public MicroMutableOpResolver {
   c0928:	4770      	bx	lr

000c092a <_ZN6tflite3ops5micro14AllOpsResolverD0Ev>:
   c092a:	b510      	push	{r4, lr}
   c092c:	f241 0108 	movw	r1, #4104	; 0x1008
   c0930:	4604      	mov	r4, r0
   c0932:	f7f4 f8ea 	bl	b4b0a <_ZdlPvj>
   c0936:	4620      	mov	r0, r4
   c0938:	bd10      	pop	{r4, pc}
	...

000c093c <_ZN6tflite3ops5micro14AllOpsResolverC1Ev>:
#define TFLITE_REGISTRATIONS_MAX (128)
#endif

namespace tflite {

class MicroMutableOpResolver : public OpResolver {
   c093c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
TfLiteRegistration* Register_UNPACK();
TfLiteRegistration* Register_NEG();
TfLiteRegistration* Register_ADD();
TfLiteRegistration* Register_QUANTIZE();
TfLiteRegistration* Register_DEQUANTIZE();
AllOpsResolver::AllOpsResolver() {
   c0940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c0942:	2700      	movs	r7, #0
   c0944:	605f      	str	r7, [r3, #4]
   c0946:	4bbd      	ldr	r3, [pc, #756]	; (c0c3c <_ZN6tflite3ops5micro14AllOpsResolverC1Ev+0x300>)
   c0948:	6003      	str	r3, [r0, #0]
   c094a:	4605      	mov	r5, r0
  AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D, Register_DEPTHWISE_CONV_2D());
   c094c:	f001 fdba 	bl	c24c4 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
   c0950:	2401      	movs	r4, #1
   c0952:	4602      	mov	r2, r0
   c0954:	4623      	mov	r3, r4
   c0956:	2104      	movs	r1, #4
   c0958:	4628      	mov	r0, r5
   c095a:	9400      	str	r4, [sp, #0]
   c095c:	f7f4 fd62 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_FULLY_CONNECTED, Register_FULLY_CONNECTED(),
   c0960:	f7ff fecc 	bl	c06fc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
   c0964:	2604      	movs	r6, #4
   c0966:	4602      	mov	r2, r0
   c0968:	4623      	mov	r3, r4
   c096a:	2109      	movs	r1, #9
   c096c:	4628      	mov	r0, r5
   c096e:	9600      	str	r6, [sp, #0]
   c0970:	f7f4 fd58 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
             /* min_version */ 1,
             /* max_version */ 4);
  AddBuiltin(BuiltinOperator_MAX_POOL_2D, Register_MAX_POOL_2D());
   c0974:	f7f8 fff2 	bl	b995c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   c0978:	4623      	mov	r3, r4
   c097a:	4602      	mov	r2, r0
   c097c:	2111      	movs	r1, #17
   c097e:	4628      	mov	r0, r5
   c0980:	9400      	str	r4, [sp, #0]
   c0982:	f7f4 fd4f 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX());
   c0986:	f7f9 f9a3 	bl	b9cd0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
   c098a:	4623      	mov	r3, r4
   c098c:	4602      	mov	r2, r0
   c098e:	2119      	movs	r1, #25
   c0990:	4628      	mov	r0, r5
   c0992:	9400      	str	r4, [sp, #0]
   c0994:	f7f4 fd46 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGISTIC, Register_LOGISTIC());
   c0998:	f000 fba0 	bl	c10dc <_ZN6tflite3ops5micro17Register_LOGISTICEv>
   c099c:	4623      	mov	r3, r4
   c099e:	4602      	mov	r2, r0
   c09a0:	210e      	movs	r1, #14
   c09a2:	4628      	mov	r0, r5
   c09a4:	9400      	str	r4, [sp, #0]
   c09a6:	f7f4 fd3d 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SVDF, Register_SVDF());
   c09aa:	f001 fb3d 	bl	c2028 <_ZN6tflite3ops5micro13Register_SVDFEv>
   c09ae:	4623      	mov	r3, r4
   c09b0:	4602      	mov	r2, r0
   c09b2:	211b      	movs	r1, #27
   c09b4:	4628      	mov	r0, r5
   c09b6:	9400      	str	r4, [sp, #0]
   c09b8:	f7f4 fd34 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D());
   c09bc:	f7fa fa6a 	bl	bae94 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
   c09c0:	4623      	mov	r3, r4
   c09c2:	4602      	mov	r2, r0
   c09c4:	2103      	movs	r1, #3
   c09c6:	4628      	mov	r0, r5
   c09c8:	9400      	str	r4, [sp, #0]
   c09ca:	f7f4 fd2b 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D, Register_AVERAGE_POOL_2D());
   c09ce:	f7f8 ffc1 	bl	b9954 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
   c09d2:	4623      	mov	r3, r4
   c09d4:	4602      	mov	r2, r0
   c09d6:	4621      	mov	r1, r4
   c09d8:	4628      	mov	r0, r5
   c09da:	9400      	str	r4, [sp, #0]
   c09dc:	f7f4 fd22 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ABS, Register_ABS());
   c09e0:	f000 fa6e 	bl	c0ec0 <_ZN6tflite3ops5micro12Register_ABSEv>
   c09e4:	4623      	mov	r3, r4
   c09e6:	4602      	mov	r2, r0
   c09e8:	2165      	movs	r1, #101	; 0x65
   c09ea:	4628      	mov	r0, r5
   c09ec:	9400      	str	r4, [sp, #0]
   c09ee:	f7f4 fd19 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SIN, Register_SIN());
   c09f2:	f000 fa69 	bl	c0ec8 <_ZN6tflite3ops5micro12Register_SINEv>
   c09f6:	4623      	mov	r3, r4
   c09f8:	4602      	mov	r2, r0
   c09fa:	2142      	movs	r1, #66	; 0x42
   c09fc:	4628      	mov	r0, r5
   c09fe:	9400      	str	r4, [sp, #0]
   c0a00:	f7f4 fd10 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_COS, Register_COS());
   c0a04:	f000 fa64 	bl	c0ed0 <_ZN6tflite3ops5micro12Register_COSEv>
   c0a08:	4623      	mov	r3, r4
   c0a0a:	4602      	mov	r2, r0
   c0a0c:	216c      	movs	r1, #108	; 0x6c
   c0a0e:	4628      	mov	r0, r5
   c0a10:	9400      	str	r4, [sp, #0]
   c0a12:	f7f4 fd07 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOG, Register_LOG());
   c0a16:	f000 fa5f 	bl	c0ed8 <_ZN6tflite3ops5micro12Register_LOGEv>
   c0a1a:	4623      	mov	r3, r4
   c0a1c:	4602      	mov	r2, r0
   c0a1e:	2149      	movs	r1, #73	; 0x49
   c0a20:	4628      	mov	r0, r5
   c0a22:	9400      	str	r4, [sp, #0]
   c0a24:	f7f4 fcfe 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SQRT, Register_SQRT());
   c0a28:	f000 fa5a 	bl	c0ee0 <_ZN6tflite3ops5micro13Register_SQRTEv>
   c0a2c:	4623      	mov	r3, r4
   c0a2e:	4602      	mov	r2, r0
   c0a30:	214b      	movs	r1, #75	; 0x4b
   c0a32:	4628      	mov	r0, r5
   c0a34:	9400      	str	r4, [sp, #0]
   c0a36:	f7f4 fcf5 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_RSQRT, Register_RSQRT());
   c0a3a:	f000 fa55 	bl	c0ee8 <_ZN6tflite3ops5micro14Register_RSQRTEv>
   c0a3e:	4623      	mov	r3, r4
   c0a40:	4602      	mov	r2, r0
   c0a42:	214c      	movs	r1, #76	; 0x4c
   c0a44:	4628      	mov	r0, r5
   c0a46:	9400      	str	r4, [sp, #0]
   c0a48:	f7f4 fcec 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SQUARE, Register_SQUARE());
   c0a4c:	f000 fa50 	bl	c0ef0 <_ZN6tflite3ops5micro15Register_SQUAREEv>
   c0a50:	4623      	mov	r3, r4
   c0a52:	4602      	mov	r2, r0
   c0a54:	215c      	movs	r1, #92	; 0x5c
   c0a56:	4628      	mov	r0, r5
   c0a58:	9400      	str	r4, [sp, #0]
   c0a5a:	f7f4 fce3 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_PRELU, Register_PRELU());
   c0a5e:	f000 fb43 	bl	c10e8 <_ZN6tflite3ops5micro14Register_PRELUEv>
   c0a62:	4623      	mov	r3, r4
   c0a64:	4602      	mov	r2, r0
   c0a66:	2136      	movs	r1, #54	; 0x36
   c0a68:	4628      	mov	r0, r5
   c0a6a:	9400      	str	r4, [sp, #0]
   c0a6c:	f7f4 fcda 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_FLOOR, Register_FLOOR());
   c0a70:	f000 fab0 	bl	c0fd4 <_ZN6tflite3ops5micro14Register_FLOOREv>
   c0a74:	4623      	mov	r3, r4
   c0a76:	4602      	mov	r2, r0
   c0a78:	2108      	movs	r1, #8
   c0a7a:	4628      	mov	r0, r5
   c0a7c:	9400      	str	r4, [sp, #0]
   c0a7e:	f7f4 fcd1 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_MAXIMUM, Register_MAXIMUM());
   c0a82:	f7fe ff47 	bl	bf914 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
   c0a86:	4623      	mov	r3, r4
   c0a88:	4602      	mov	r2, r0
   c0a8a:	2137      	movs	r1, #55	; 0x37
   c0a8c:	4628      	mov	r0, r5
   c0a8e:	9400      	str	r4, [sp, #0]
   c0a90:	f7f4 fcc8 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_MINIMUM, Register_MINIMUM());
   c0a94:	f7fe ff42 	bl	bf91c <_ZN6tflite3ops5micro16Register_MINIMUMEv>
   c0a98:	4623      	mov	r3, r4
   c0a9a:	4602      	mov	r2, r0
   c0a9c:	2139      	movs	r1, #57	; 0x39
   c0a9e:	4628      	mov	r0, r5
   c0aa0:	9400      	str	r4, [sp, #0]
   c0aa2:	f7f4 fcbf 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ARG_MAX, Register_ARG_MAX());
   c0aa6:	f7f7 f827 	bl	b7af8 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
   c0aaa:	4623      	mov	r3, r4
   c0aac:	4602      	mov	r2, r0
   c0aae:	2138      	movs	r1, #56	; 0x38
   c0ab0:	4628      	mov	r0, r5
   c0ab2:	9400      	str	r4, [sp, #0]
   c0ab4:	f7f4 fcb6 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ARG_MIN, Register_ARG_MIN());
   c0ab8:	f7f7 f822 	bl	b7b00 <_ZN6tflite3ops5micro16Register_ARG_MINEv>
   c0abc:	4623      	mov	r3, r4
   c0abe:	4602      	mov	r2, r0
   c0ac0:	214f      	movs	r1, #79	; 0x4f
   c0ac2:	4628      	mov	r0, r5
   c0ac4:	9400      	str	r4, [sp, #0]
   c0ac6:	f7f4 fcad 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_OR, Register_LOGICAL_OR());
   c0aca:	f7fe fb5d 	bl	bf188 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
   c0ace:	4623      	mov	r3, r4
   c0ad0:	4602      	mov	r2, r0
   c0ad2:	2154      	movs	r1, #84	; 0x54
   c0ad4:	4628      	mov	r0, r5
   c0ad6:	9400      	str	r4, [sp, #0]
   c0ad8:	f7f4 fca4 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_AND, Register_LOGICAL_AND());
   c0adc:	f7fe fb58 	bl	bf190 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
   c0ae0:	4623      	mov	r3, r4
   c0ae2:	4602      	mov	r2, r0
   c0ae4:	2156      	movs	r1, #86	; 0x56
   c0ae6:	4628      	mov	r0, r5
   c0ae8:	9400      	str	r4, [sp, #0]
   c0aea:	f7f4 fc9b 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_NOT, Register_LOGICAL_NOT());
   c0aee:	f000 fa03 	bl	c0ef8 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
   c0af2:	4623      	mov	r3, r4
   c0af4:	4602      	mov	r2, r0
   c0af6:	2157      	movs	r1, #87	; 0x57
   c0af8:	4628      	mov	r0, r5
   c0afa:	9400      	str	r4, [sp, #0]
   c0afc:	f7f4 fc92 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_RESHAPE, Register_RESHAPE());
   c0b00:	f7fe fec4 	bl	bf88c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   c0b04:	4623      	mov	r3, r4
   c0b06:	4602      	mov	r2, r0
   c0b08:	2116      	movs	r1, #22
   c0b0a:	4628      	mov	r0, r5
   c0b0c:	9400      	str	r4, [sp, #0]
   c0b0e:	f7f4 fc89 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_EQUAL, Register_EQUAL());
   c0b12:	f7fa fc9f 	bl	bb454 <_ZN6tflite3ops5micro14Register_EQUALEv>
   c0b16:	4623      	mov	r3, r4
   c0b18:	4602      	mov	r2, r0
   c0b1a:	2147      	movs	r1, #71	; 0x47
   c0b1c:	4628      	mov	r0, r5
   c0b1e:	9400      	str	r4, [sp, #0]
   c0b20:	f7f4 fc80 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_NOT_EQUAL, Register_NOT_EQUAL());
   c0b24:	f7fa fc9a 	bl	bb45c <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
   c0b28:	4623      	mov	r3, r4
   c0b2a:	4602      	mov	r2, r0
   c0b2c:	2148      	movs	r1, #72	; 0x48
   c0b2e:	4628      	mov	r0, r5
   c0b30:	9400      	str	r4, [sp, #0]
   c0b32:	f7f4 fc77 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_GREATER, Register_GREATER());
   c0b36:	f7fa fc95 	bl	bb464 <_ZN6tflite3ops5micro16Register_GREATEREv>
   c0b3a:	4623      	mov	r3, r4
   c0b3c:	4602      	mov	r2, r0
   c0b3e:	213d      	movs	r1, #61	; 0x3d
   c0b40:	4628      	mov	r0, r5
   c0b42:	9400      	str	r4, [sp, #0]
   c0b44:	f7f4 fc6e 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_GREATER_EQUAL, Register_GREATER_EQUAL());
   c0b48:	f7fa fc90 	bl	bb46c <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
   c0b4c:	4623      	mov	r3, r4
   c0b4e:	4602      	mov	r2, r0
   c0b50:	213e      	movs	r1, #62	; 0x3e
   c0b52:	4628      	mov	r0, r5
   c0b54:	9400      	str	r4, [sp, #0]
   c0b56:	f7f4 fc65 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LESS, Register_LESS());
   c0b5a:	f7fa fc8b 	bl	bb474 <_ZN6tflite3ops5micro13Register_LESSEv>
   c0b5e:	4623      	mov	r3, r4
   c0b60:	4602      	mov	r2, r0
   c0b62:	213a      	movs	r1, #58	; 0x3a
   c0b64:	4628      	mov	r0, r5
   c0b66:	9400      	str	r4, [sp, #0]
   c0b68:	f7f4 fc5c 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LESS_EQUAL, Register_LESS_EQUAL());
   c0b6c:	f7fa fc86 	bl	bb47c <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
   c0b70:	4623      	mov	r3, r4
   c0b72:	4602      	mov	r2, r0
   c0b74:	213f      	movs	r1, #63	; 0x3f
   c0b76:	4628      	mov	r0, r5
   c0b78:	9400      	str	r4, [sp, #0]
   c0b7a:	f7f4 fc53 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_CEIL, Register_CEIL());
   c0b7e:	f7f7 fd2f 	bl	b85e0 <_ZN6tflite3ops5micro13Register_CEILEv>
   c0b82:	4623      	mov	r3, r4
   c0b84:	4602      	mov	r2, r0
   c0b86:	2168      	movs	r1, #104	; 0x68
   c0b88:	4628      	mov	r0, r5
   c0b8a:	9400      	str	r4, [sp, #0]
   c0b8c:	f7f4 fc4a 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ROUND, Register_ROUND());
   c0b90:	f7ff fec6 	bl	c0920 <_ZN6tflite3ops5micro14Register_ROUNDEv>
   c0b94:	4623      	mov	r3, r4
   c0b96:	4602      	mov	r2, r0
   c0b98:	2174      	movs	r1, #116	; 0x74
   c0b9a:	4628      	mov	r0, r5
   c0b9c:	9400      	str	r4, [sp, #0]
   c0b9e:	f7f4 fc41 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_STRIDED_SLICE, Register_STRIDED_SLICE());
   c0ba2:	f7f7 f971 	bl	b7e88 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
   c0ba6:	4623      	mov	r3, r4
   c0ba8:	4602      	mov	r2, r0
   c0baa:	212d      	movs	r1, #45	; 0x2d
   c0bac:	4628      	mov	r0, r5
   c0bae:	9400      	str	r4, [sp, #0]
   c0bb0:	f7f4 fc38 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_PACK, Register_PACK());
   c0bb4:	f7f7 ff50 	bl	b8a58 <_ZN6tflite3ops5micro13Register_PACKEv>
   c0bb8:	4623      	mov	r3, r4
   c0bba:	4602      	mov	r2, r0
   c0bbc:	2153      	movs	r1, #83	; 0x53
   c0bbe:	4628      	mov	r0, r5
   c0bc0:	9400      	str	r4, [sp, #0]
   c0bc2:	f7f4 fc2f 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SPLIT, Register_SPLIT(),
   c0bc6:	f7fa f96b 	bl	baea0 <_ZN6tflite3ops5micro14Register_SPLITEv>
   c0bca:	2303      	movs	r3, #3
   c0bcc:	4602      	mov	r2, r0
   c0bce:	9300      	str	r3, [sp, #0]
   c0bd0:	2131      	movs	r1, #49	; 0x31
   c0bd2:	4623      	mov	r3, r4
   c0bd4:	4628      	mov	r0, r5
   c0bd6:	f7f4 fc25 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
             /* min_version */ 1,
             /* max_version */ 3);
  AddBuiltin(BuiltinOperator_UNPACK, Register_UNPACK());
   c0bda:	f7f6 fc55 	bl	b7488 <_ZN6tflite3ops5micro15Register_UNPACKEv>
   c0bde:	4623      	mov	r3, r4
   c0be0:	4602      	mov	r2, r0
   c0be2:	2158      	movs	r1, #88	; 0x58
   c0be4:	4628      	mov	r0, r5
   c0be6:	9400      	str	r4, [sp, #0]
   c0be8:	f7f4 fc1c 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_NEG, Register_NEG());
   c0bec:	f7f7 ff94 	bl	b8b18 <_ZN6tflite3ops5micro12Register_NEGEv>
   c0bf0:	4623      	mov	r3, r4
   c0bf2:	4602      	mov	r2, r0
   c0bf4:	213b      	movs	r1, #59	; 0x3b
   c0bf6:	4628      	mov	r0, r5
   c0bf8:	9400      	str	r4, [sp, #0]
   c0bfa:	f7f4 fc13 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ADD, Register_ADD());
   c0bfe:	f7f5 fee9 	bl	b69d4 <_ZN6tflite3ops5micro12Register_ADDEv>
   c0c02:	4623      	mov	r3, r4
   c0c04:	4602      	mov	r2, r0
   c0c06:	4639      	mov	r1, r7
   c0c08:	4628      	mov	r0, r5
   c0c0a:	9400      	str	r4, [sp, #0]
   c0c0c:	f7f4 fc0a 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(), 1, 4);
   c0c10:	f7fe fd66 	bl	bf6e0 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
   c0c14:	4623      	mov	r3, r4
   c0c16:	4602      	mov	r2, r0
   c0c18:	2172      	movs	r1, #114	; 0x72
   c0c1a:	4628      	mov	r0, r5
   c0c1c:	9600      	str	r6, [sp, #0]
   c0c1e:	f7f4 fc01 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_DEQUANTIZE, Register_DEQUANTIZE(), 1, 4);
   c0c22:	f7f8 f875 	bl	b8d10 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
   c0c26:	9600      	str	r6, [sp, #0]
   c0c28:	4602      	mov	r2, r0
   c0c2a:	4623      	mov	r3, r4
   c0c2c:	4628      	mov	r0, r5
   c0c2e:	2106      	movs	r1, #6
   c0c30:	f7f4 fbf8 	bl	b5424 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
}
   c0c34:	4628      	mov	r0, r5
   c0c36:	b003      	add	sp, #12
   c0c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0c3a:	bf00      	nop
   c0c3c:	000c8d28 	.word	0x000c8d28

000c0c40 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   c0c40:	eeb0 0ac0 	vabs.f32	s0, s0
   c0c44:	4770      	bx	lr

000c0c46 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
TfLiteStatus RsqrtEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
}

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
   c0c46:	ee20 0a00 	vmul.f32	s0, s0, s0
   c0c4a:	4770      	bx	lr

000c0c4c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   c0c4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c0c50:	680b      	ldr	r3, [r1, #0]
   c0c52:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0c54:	2e01      	cmp	r6, #1
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   c0c56:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0c58:	d00c      	beq.n	c0c74 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
   c0c5a:	2401      	movs	r4, #1
   c0c5c:	4b20      	ldr	r3, [pc, #128]	; (c0ce0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x94>)
   c0c5e:	9301      	str	r3, [sp, #4]
   c0c60:	e9cd 6402 	strd	r6, r4, [sp, #8]
   c0c64:	4b1f      	ldr	r3, [pc, #124]	; (c0ce4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>)
   c0c66:	9300      	str	r3, [sp, #0]
   c0c68:	6945      	ldr	r5, [r0, #20]
   c0c6a:	2327      	movs	r3, #39	; 0x27
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   c0c6c:	4a1e      	ldr	r2, [pc, #120]	; (c0ce8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9c>)
   c0c6e:	491f      	ldr	r1, [pc, #124]	; (c0cec <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa0>)
   c0c70:	47a8      	blx	r5
   c0c72:	e00f      	b.n	c0c94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   c0c74:	684a      	ldr	r2, [r1, #4]
   c0c76:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   c0c78:	2c01      	cmp	r4, #1
   c0c7a:	d00f      	beq.n	c0c9c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   c0c7c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   c0c80:	4b17      	ldr	r3, [pc, #92]	; (c0ce0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x94>)
   c0c82:	9301      	str	r3, [sp, #4]
   c0c84:	4b1a      	ldr	r3, [pc, #104]	; (c0cf0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa4>)
   c0c86:	9300      	str	r3, [sp, #0]
   c0c88:	6944      	ldr	r4, [r0, #20]
   c0c8a:	4a17      	ldr	r2, [pc, #92]	; (c0ce8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9c>)
   c0c8c:	4917      	ldr	r1, [pc, #92]	; (c0cec <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa0>)
   c0c8e:	2328      	movs	r3, #40	; 0x28
   c0c90:	47a0      	blx	r4
   c0c92:	4634      	mov	r4, r6
}
   c0c94:	4620      	mov	r0, r4
   c0c96:	b004      	add	sp, #16
   c0c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0c9c:	685e      	ldr	r6, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0c9e:	6852      	ldr	r2, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0ca0:	6887      	ldr	r7, [r0, #8]
   c0ca2:	2138      	movs	r1, #56	; 0x38
   c0ca4:	434e      	muls	r6, r1
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   c0ca6:	434a      	muls	r2, r1
   c0ca8:	5dbb      	ldrb	r3, [r7, r6]
   c0caa:	5cba      	ldrb	r2, [r7, r2]
   c0cac:	4293      	cmp	r3, r2
   c0cae:	d008      	beq.n	c0cc2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x76>
   c0cb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0cb4:	4b0f      	ldr	r3, [pc, #60]	; (c0cf4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa8>)
   c0cb6:	9301      	str	r3, [sp, #4]
   c0cb8:	4b0f      	ldr	r3, [pc, #60]	; (c0cf8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xac>)
   c0cba:	9300      	str	r3, [sp, #0]
   c0cbc:	6945      	ldr	r5, [r0, #20]
   c0cbe:	232b      	movs	r3, #43	; 0x2b
   c0cc0:	e7d4      	b.n	c0c6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x20>
  if (!IsSupportedType(input->type)) {
   c0cc2:	b953      	cbnz	r3, c0cda <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8e>
    context->ReportError(context, "Input data type %s (%d) is not supported.",
   c0cc4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   c0cc8:	4618      	mov	r0, r3
   c0cca:	f7f3 ff5b 	bl	b4b84 <TfLiteTypeGetName>
   c0cce:	5dbb      	ldrb	r3, [r7, r6]
   c0cd0:	490a      	ldr	r1, [pc, #40]	; (c0cfc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   c0cd2:	4602      	mov	r2, r0
   c0cd4:	4628      	mov	r0, r5
   c0cd6:	47c0      	blx	r8
    return kTfLiteError;
   c0cd8:	e7dc      	b.n	c0c94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
  return kTfLiteOk;
   c0cda:	2400      	movs	r4, #0
   c0cdc:	e7da      	b.n	c0c94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
   c0cde:	bf00      	nop
   c0ce0:	000c8aca 	.word	0x000c8aca
   c0ce4:	000c830c 	.word	0x000c830c
   c0ce8:	000c8d38 	.word	0x000c8d38
   c0cec:	000c6fd5 	.word	0x000c6fd5
   c0cf0:	000c831c 	.word	0x000c831c
   c0cf4:	000c8464 	.word	0x000c8464
   c0cf8:	000c706b 	.word	0x000c706b
   c0cfc:	000c8dad 	.word	0x000c8dad

000c0d00 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   c0d00:	f7ff bfa4 	b.w	c0c4c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

000c0d04 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   c0d04:	f004 bc00 	b.w	c5508 <sinf>

000c0d08 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   c0d08:	f004 bb02 	b.w	c5310 <cosf>

000c0d0c <_ZSt3logf>:
  { return __builtin_logf(__x); }
   c0d0c:	f004 bcc8 	b.w	c56a0 <logf>

000c0d10 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   c0d10:	f004 bcfc 	b.w	c570c <sqrtf>

000c0d14 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   c0d14:	b508      	push	{r3, lr}
   c0d16:	f004 fcf9 	bl	c570c <sqrtf>
   c0d1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c0d1e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   c0d22:	bd08      	pop	{r3, pc}

000c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>:
                                float float_func(float)) {
   c0d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   c0d28:	4690      	mov	r8, r2
   c0d2a:	680a      	ldr	r2, [r1, #0]
   c0d2c:	6883      	ldr	r3, [r0, #8]
   c0d2e:	6852      	ldr	r2, [r2, #4]
   c0d30:	2438      	movs	r4, #56	; 0x38
   c0d32:	4362      	muls	r2, r4
   c0d34:	eb03 0c02 	add.w	ip, r3, r2
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0d38:	5c9d      	ldrb	r5, [r3, r2]
   c0d3a:	2d01      	cmp	r5, #1
   c0d3c:	d00f      	beq.n	c0d5e <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x3a>
   c0d3e:	2401      	movs	r4, #1
   c0d40:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c0d44:	4b1d      	ldr	r3, [pc, #116]	; (c0dbc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x98>)
   c0d46:	9301      	str	r3, [sp, #4]
   c0d48:	4b1d      	ldr	r3, [pc, #116]	; (c0dc0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x9c>)
   c0d4a:	9300      	str	r3, [sp, #0]
   c0d4c:	6945      	ldr	r5, [r0, #20]
   c0d4e:	4a1d      	ldr	r2, [pc, #116]	; (c0dc4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0xa0>)
   c0d50:	491d      	ldr	r1, [pc, #116]	; (c0dc8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0xa4>)
   c0d52:	2339      	movs	r3, #57	; 0x39
   c0d54:	47a8      	blx	r5
   c0d56:	4620      	mov	r0, r4
}
   c0d58:	b004      	add	sp, #16
   c0d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
   c0d5e:	f8dc 6008 	ldr.w	r6, [ip, #8]
   c0d62:	2200      	movs	r2, #0
   c0d64:	f856 eb04 	ldr.w	lr, [r6], #4
  int64_t count = 1;
   c0d68:	4617      	mov	r7, r2
  for (int i = 0; i < dims->size; ++i) {
   c0d6a:	4596      	cmp	lr, r2
   c0d6c:	dd0a      	ble.n	c0d84 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x60>
    count *= dims->data[i];
   c0d6e:	f856 4b04 	ldr.w	r4, [r6], #4
   c0d72:	17e0      	asrs	r0, r4, #31
   c0d74:	4368      	muls	r0, r5
   c0d76:	fb04 0007 	mla	r0, r4, r7, r0
   c0d7a:	fba5 5704 	umull	r5, r7, r5, r4
   c0d7e:	4407      	add	r7, r0
  for (int i = 0; i < dims->size; ++i) {
   c0d80:	3201      	adds	r2, #1
   c0d82:	e7f2      	b.n	c0d6a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x46>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0d84:	684a      	ldr	r2, [r1, #4]
   c0d86:	6854      	ldr	r4, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0d88:	f8dc 2004 	ldr.w	r2, [ip, #4]
   c0d8c:	2138      	movs	r1, #56	; 0x38
   c0d8e:	fb01 3404 	mla	r4, r1, r4, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0d92:	b104      	cbz	r4, c0d96 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x72>
   c0d94:	6864      	ldr	r4, [r4, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0d96:	2600      	movs	r6, #0
   c0d98:	4691      	mov	r9, r2
   c0d9a:	46b2      	mov	sl, r6
   c0d9c:	42ae      	cmp	r6, r5
   c0d9e:	eb7a 0307 	sbcs.w	r3, sl, r7
   c0da2:	da08      	bge.n	c0db6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x92>
    out_data[i] = func(in_data[i]);
   c0da4:	ecb9 0a01 	vldmia	r9!, {s0}
   c0da8:	47c0      	blx	r8
  for (int64_t i = 0; i < num_elements; ++i) {
   c0daa:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
   c0dac:	eca4 0a01 	vstmia	r4!, {s0}
  for (int64_t i = 0; i < num_elements; ++i) {
   c0db0:	f14a 0a00 	adc.w	sl, sl, #0
   c0db4:	e7f2      	b.n	c0d9c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x78>
  return kTfLiteOk;
   c0db6:	2000      	movs	r0, #0
   c0db8:	e7ce      	b.n	c0d58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x34>
   c0dba:	bf00      	nop
   c0dbc:	000c8dd7 	.word	0x000c8dd7
   c0dc0:	000c706b 	.word	0x000c706b
   c0dc4:	000c8d38 	.word	0x000c8d38
   c0dc8:	000c6fd5 	.word	0x000c6fd5

000c0dcc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::abs);
   c0dcc:	4a01      	ldr	r2, [pc, #4]	; (c0dd4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0dce:	f7ff bfa9 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0dd2:	bf00      	nop
   c0dd4:	000c0c41 	.word	0x000c0c41

000c0dd8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::sin);
   c0dd8:	4a01      	ldr	r2, [pc, #4]	; (c0de0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0dda:	f7ff bfa3 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0dde:	bf00      	nop
   c0de0:	000c0d05 	.word	0x000c0d05

000c0de4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::cos);
   c0de4:	4a01      	ldr	r2, [pc, #4]	; (c0dec <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0de6:	f7ff bf9d 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0dea:	bf00      	nop
   c0dec:	000c0d09 	.word	0x000c0d09

000c0df0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::log);
   c0df0:	4a01      	ldr	r2, [pc, #4]	; (c0df8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0df2:	f7ff bf97 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0df6:	bf00      	nop
   c0df8:	000c0d0d 	.word	0x000c0d0d

000c0dfc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::sqrt);
   c0dfc:	4a01      	ldr	r2, [pc, #4]	; (c0e04 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0dfe:	f7ff bf91 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e02:	bf00      	nop
   c0e04:	000c0d11 	.word	0x000c0d11

000c0e08 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   c0e08:	4a01      	ldr	r2, [pc, #4]	; (c0e10 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e0a:	f7ff bf8b 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e0e:	bf00      	nop
   c0e10:	000c0d15 	.word	0x000c0d15

000c0e14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   c0e14:	4a01      	ldr	r2, [pc, #4]	; (c0e1c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e16:	f7ff bf85 	b.w	c0d24 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e1a:	bf00      	nop
   c0e1c:	000c0c47 	.word	0x000c0c47

000c0e20 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   c0e20:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0e22:	680c      	ldr	r4, [r1, #0]
   c0e24:	6882      	ldr	r2, [r0, #8]
   c0e26:	6864      	ldr	r4, [r4, #4]
   c0e28:	2538      	movs	r5, #56	; 0x38
   c0e2a:	436c      	muls	r4, r5
   c0e2c:	eb02 0c04 	add.w	ip, r2, r4
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0e30:	5d14      	ldrb	r4, [r2, r4]
   c0e32:	2c06      	cmp	r4, #6
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   c0e34:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0e36:	d00e      	beq.n	c0e56 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x36>
   c0e38:	2206      	movs	r2, #6
   c0e3a:	e9cd 4202 	strd	r4, r2, [sp, #8]
   c0e3e:	4a1c      	ldr	r2, [pc, #112]	; (c0eb0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x90>)
   c0e40:	9201      	str	r2, [sp, #4]
   c0e42:	4a1c      	ldr	r2, [pc, #112]	; (c0eb4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x94>)
   c0e44:	9200      	str	r2, [sp, #0]
   c0e46:	6944      	ldr	r4, [r0, #20]
   c0e48:	4a1b      	ldr	r2, [pc, #108]	; (c0eb8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x98>)
   c0e4a:	491c      	ldr	r1, [pc, #112]	; (c0ebc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9c>)
   c0e4c:	2339      	movs	r3, #57	; 0x39
   c0e4e:	47a0      	blx	r4
   c0e50:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
   c0e52:	b005      	add	sp, #20
   c0e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (int i = 0; i < dims->size; ++i) {
   c0e56:	f8dc 7008 	ldr.w	r7, [ip, #8]
   c0e5a:	2500      	movs	r5, #0
   c0e5c:	f857 eb04 	ldr.w	lr, [r7], #4
  int64_t count = 1;
   c0e60:	2001      	movs	r0, #1
   c0e62:	462c      	mov	r4, r5
  for (int i = 0; i < dims->size; ++i) {
   c0e64:	45ae      	cmp	lr, r5
   c0e66:	dd0a      	ble.n	c0e7e <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x5e>
    count *= dims->data[i];
   c0e68:	f857 6b04 	ldr.w	r6, [r7], #4
   c0e6c:	17f3      	asrs	r3, r6, #31
   c0e6e:	4343      	muls	r3, r0
   c0e70:	fb06 3304 	mla	r3, r6, r4, r3
   c0e74:	fba0 0406 	umull	r0, r4, r0, r6
   c0e78:	441c      	add	r4, r3
  for (int i = 0; i < dims->size; ++i) {
   c0e7a:	3501      	adds	r5, #1
   c0e7c:	e7f2      	b.n	c0e64 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0e7e:	684b      	ldr	r3, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0e80:	f8dc 6004 	ldr.w	r6, [ip, #4]
   c0e84:	685b      	ldr	r3, [r3, #4]
   c0e86:	2138      	movs	r1, #56	; 0x38
   c0e88:	fb01 2203 	mla	r2, r1, r3, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0e8c:	b102      	cbz	r2, c0e90 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x70>
   c0e8e:	6852      	ldr	r2, [r2, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0e90:	2300      	movs	r3, #0
   c0e92:	4619      	mov	r1, r3
   c0e94:	4283      	cmp	r3, r0
   c0e96:	eb71 0504 	sbcs.w	r5, r1, r4
   c0e9a:	da07      	bge.n	c0eac <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  return EvalLogical(context, node, [](bool v) { return !v; });
   c0e9c:	5cf5      	ldrb	r5, [r6, r3]
   c0e9e:	f085 0501 	eor.w	r5, r5, #1
    out_data[i] = func(in_data[i]);
   c0ea2:	54d5      	strb	r5, [r2, r3]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0ea4:	3301      	adds	r3, #1
   c0ea6:	f141 0100 	adc.w	r1, r1, #0
   c0eaa:	e7f3      	b.n	c0e94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x74>
  return kTfLiteOk;
   c0eac:	2000      	movs	r0, #0
   c0eae:	e7d0      	b.n	c0e52 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x32>
   c0eb0:	000c8dd7 	.word	0x000c8dd7
   c0eb4:	000c706b 	.word	0x000c706b
   c0eb8:	000c8d38 	.word	0x000c8d38
   c0ebc:	000c6fd5 	.word	0x000c6fd5

000c0ec0 <_ZN6tflite3ops5micro12Register_ABSEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::AbsEval};
  return &r;
}
   c0ec0:	4800      	ldr	r0, [pc, #0]	; (c0ec4 <_ZN6tflite3ops5micro12Register_ABSEv+0x4>)
   c0ec2:	4770      	bx	lr
   c0ec4:	2003c418 	.word	0x2003c418

000c0ec8 <_ZN6tflite3ops5micro12Register_SINEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SinEval};
  return &r;
}
   c0ec8:	4800      	ldr	r0, [pc, #0]	; (c0ecc <_ZN6tflite3ops5micro12Register_SINEv+0x4>)
   c0eca:	4770      	bx	lr
   c0ecc:	2003c478 	.word	0x2003c478

000c0ed0 <_ZN6tflite3ops5micro12Register_COSEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::CosEval};
  return &r;
}
   c0ed0:	4800      	ldr	r0, [pc, #0]	; (c0ed4 <_ZN6tflite3ops5micro12Register_COSEv+0x4>)
   c0ed2:	4770      	bx	lr
   c0ed4:	2003c438 	.word	0x2003c438

000c0ed8 <_ZN6tflite3ops5micro12Register_LOGEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::LogEval};
  return &r;
}
   c0ed8:	4800      	ldr	r0, [pc, #0]	; (c0edc <_ZN6tflite3ops5micro12Register_LOGEv+0x4>)
   c0eda:	4770      	bx	lr
   c0edc:	2003c458 	.word	0x2003c458

000c0ee0 <_ZN6tflite3ops5micro13Register_SQRTEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SqrtEval};
  return &r;
}
   c0ee0:	4800      	ldr	r0, [pc, #0]	; (c0ee4 <_ZN6tflite3ops5micro13Register_SQRTEv+0x4>)
   c0ee2:	4770      	bx	lr
   c0ee4:	2003c498 	.word	0x2003c498

000c0ee8 <_ZN6tflite3ops5micro14Register_RSQRTEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::RsqrtEval};
  return &r;
}
   c0ee8:	4800      	ldr	r0, [pc, #0]	; (c0eec <_ZN6tflite3ops5micro14Register_RSQRTEv+0x4>)
   c0eea:	4770      	bx	lr
   c0eec:	2003c4b8 	.word	0x2003c4b8

000c0ef0 <_ZN6tflite3ops5micro15Register_SQUAREEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SquareEval};
  return &r;
}
   c0ef0:	4800      	ldr	r0, [pc, #0]	; (c0ef4 <_ZN6tflite3ops5micro15Register_SQUAREEv+0x4>)
   c0ef2:	4770      	bx	lr
   c0ef4:	2003c4d8 	.word	0x2003c4d8

000c0ef8 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:
  static TfLiteRegistration r = {
      /*init=*/nullptr, /*free=*/nullptr,
      elementwise::GenericPrepare<elementwise::IsLogicalSupportedType>,
      elementwise::LogicalNotEval};
  return &r;
}
   c0ef8:	4800      	ldr	r0, [pc, #0]	; (c0efc <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x4>)
   c0efa:	4770      	bx	lr
   c0efc:	2003c4f8 	.word	0x2003c4f8

000c0f00 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0f04:	680a      	ldr	r2, [r1, #0]
   c0f06:	6884      	ldr	r4, [r0, #8]
   c0f08:	6852      	ldr	r2, [r2, #4]
   c0f0a:	2638      	movs	r6, #56	; 0x38
   c0f0c:	4372      	muls	r2, r6
   c0f0e:	18a5      	adds	r5, r4, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c0f10:	5ca2      	ldrb	r2, [r4, r2]
   c0f12:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0f14:	b08e      	sub	sp, #56	; 0x38
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c0f16:	d00f      	beq.n	c0f38 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   c0f18:	2401      	movs	r4, #1
   c0f1a:	e9cd 2402 	strd	r2, r4, [sp, #8]
   c0f1e:	4a29      	ldr	r2, [pc, #164]	; (c0fc4 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   c0f20:	9201      	str	r2, [sp, #4]
   c0f22:	4a29      	ldr	r2, [pc, #164]	; (c0fc8 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   c0f24:	9200      	str	r2, [sp, #0]
   c0f26:	6945      	ldr	r5, [r0, #20]
   c0f28:	4a28      	ldr	r2, [pc, #160]	; (c0fcc <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   c0f2a:	4929      	ldr	r1, [pc, #164]	; (c0fd0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
   c0f2c:	231f      	movs	r3, #31
   c0f2e:	47a8      	blx	r5
   c0f30:	4620      	mov	r0, r4
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
   c0f32:	b00e      	add	sp, #56	; 0x38
   c0f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0f38:	684b      	ldr	r3, [r1, #4]
   c0f3a:	685b      	ldr	r3, [r3, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   c0f3c:	4629      	mov	r1, r5
   c0f3e:	fb06 4403 	mla	r4, r6, r3, r4
   c0f42:	a804      	add	r0, sp, #16
   c0f44:	f7f5 fca1 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
   c0f48:	4621      	mov	r1, r4
   c0f4a:	a809      	add	r0, sp, #36	; 0x24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0f4c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   c0f50:	f7f5 fc9b 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0f54:	b104      	cbz	r4, c0f58 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x58>
   c0f56:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   c0f58:	9e04      	ldr	r6, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c0f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0f5c:	429e      	cmp	r6, r3
   c0f5e:	d001      	beq.n	c0f64 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x64>
   c0f60:	f003 fc4c 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   c0f64:	2500      	movs	r5, #0
   c0f66:	42ae      	cmp	r6, r5
   c0f68:	dd0c      	ble.n	c0f84 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x84>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c0f6a:	4629      	mov	r1, r5
   c0f6c:	a804      	add	r0, sp, #16
   c0f6e:	f7f5 f9f3 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0f72:	4629      	mov	r1, r5
   c0f74:	4607      	mov	r7, r0
   c0f76:	a809      	add	r0, sp, #36	; 0x24
   c0f78:	f7f5 f9ee 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0f7c:	4287      	cmp	r7, r0
   c0f7e:	d1ef      	bne.n	c0f60 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  for (int i = 0; i < dims_count; ++i) {
   c0f80:	3501      	adds	r5, #1
   c0f82:	e7f0      	b.n	c0f66 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c0f84:	2e04      	cmp	r6, #4
   c0f86:	bfcc      	ite	gt
   c0f88:	9a05      	ldrgt	r2, [sp, #20]
   c0f8a:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
   c0f8c:	2300      	movs	r3, #0
    int buffer_size = 1;
   c0f8e:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
   c0f90:	429e      	cmp	r6, r3
   c0f92:	dc0a      	bgt.n	c0faa <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xaa>

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
   c0f94:	2600      	movs	r6, #0
   c0f96:	42be      	cmp	r6, r7
   c0f98:	da0c      	bge.n	c0fb4 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
  { return __builtin_floorf(__x); }
   c0f9a:	ecb8 0a01 	vldmia	r8!, {s0}
   c0f9e:	f004 f9ef 	bl	c5380 <floorf>
   c0fa2:	3601      	adds	r6, #1
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
   c0fa4:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
   c0fa8:	e7f5      	b.n	c0f96 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x96>
      buffer_size *= dims_data[i];
   c0faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c0fae:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c0fb0:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
   c0fb2:	e7ed      	b.n	c0f90 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x90>
   c0fb4:	a809      	add	r0, sp, #36	; 0x24
   c0fb6:	f7f5 f9c4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   c0fba:	a804      	add	r0, sp, #16
   c0fbc:	f7f5 f9c1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c0fc0:	2000      	movs	r0, #0
   c0fc2:	e7b6      	b.n	c0f32 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   c0fc4:	000c8adb 	.word	0x000c8adb
   c0fc8:	000c706b 	.word	0x000c706b
   c0fcc:	000c8de5 	.word	0x000c8de5
   c0fd0:	000c6fd5 	.word	0x000c6fd5

000c0fd4 <_ZN6tflite3ops5micro14Register_FLOOREv>:
TfLiteRegistration* Register_FLOOR() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, /*prepare=*/nullptr,
                                 floor::Eval};
  return &r;
}
   c0fd4:	4800      	ldr	r0, [pc, #0]	; (c0fd8 <_ZN6tflite3ops5micro14Register_FLOOREv+0x4>)
   c0fd6:	4770      	bx	lr
   c0fd8:	2003c518 	.word	0x2003c518

000c0fdc <_ZN6tflite3ops5micro11activations7PrepareEP13TfLiteContextP10TfLiteNode>:
constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c0fdc:	2000      	movs	r0, #0
   c0fde:	4770      	bx	lr

000c0fe0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
   c0fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0fe4:	ed2d 8b02 	vpush	{d8}
   c0fe8:	461e      	mov	r6, r3
  inline int32 DimensionsCount() const { return size_; }
   c0fea:	f8d0 8000 	ldr.w	r8, [r0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c0fee:	6813      	ldr	r3, [r2, #0]
   c0ff0:	4598      	cmp	r8, r3
   c0ff2:	4604      	mov	r4, r0
   c0ff4:	460f      	mov	r7, r1
   c0ff6:	4691      	mov	r9, r2
   c0ff8:	d001      	beq.n	c0ffe <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   c0ffa:	f003 fbff 	bl	c47fc <abort>
  for (int i = 0; i < dims_count; ++i) {
   c0ffe:	2500      	movs	r5, #0
   c1000:	45a8      	cmp	r8, r5
   c1002:	dd0c      	ble.n	c101e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c1004:	4629      	mov	r1, r5
   c1006:	4620      	mov	r0, r4
   c1008:	f7f5 f9a6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c100c:	4629      	mov	r1, r5
   c100e:	4682      	mov	sl, r0
   c1010:	4648      	mov	r0, r9
   c1012:	f7f5 f9a1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1016:	4582      	cmp	sl, r0
   c1018:	d1ef      	bne.n	c0ffa <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   c101a:	3501      	adds	r5, #1
   c101c:	e7f0      	b.n	c1000 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c101e:	f1b8 0f04 	cmp.w	r8, #4
   c1022:	bfcc      	ite	gt
   c1024:	6864      	ldrgt	r4, [r4, #4]
   c1026:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   c1028:	2300      	movs	r3, #0
    int buffer_size = 1;
   c102a:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
   c102e:	4598      	cmp	r8, r3
   c1030:	dc13      	bgt.n	c105a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x7a>
   c1032:	4634      	mov	r4, r6
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result = 1.f / (1.f + std::exp(-val));
   c1034:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; i++) {
   c1038:	2600      	movs	r6, #0
   c103a:	454e      	cmp	r6, r9
   c103c:	da13      	bge.n	c1066 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x86>
    float val = input_data[i];
   c103e:	ecb7 0a01 	vldmia	r7!, {s0}
  { return __builtin_expf(__x); }
   c1042:	eeb1 0a40 	vneg.f32	s0, s0
   c1046:	f004 faed 	bl	c5624 <expf>
    float result = 1.f / (1.f + std::exp(-val));
   c104a:	ee30 0a08 	vadd.f32	s0, s0, s16
  for (int i = 0; i < flat_size; i++) {
   c104e:	3601      	adds	r6, #1
    float result = 1.f / (1.f + std::exp(-val));
   c1050:	eec8 7a00 	vdiv.f32	s15, s16, s0
    output_data[i] = result;
   c1054:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   c1058:	e7ef      	b.n	c103a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x5a>
      buffer_size *= dims_data[i];
   c105a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c105e:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c1060:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   c1064:	e7e3      	b.n	c102e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
  }
}
   c1066:	ecbd 8b02 	vpop	{d8}
   c106a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000c1070 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1070:	b570      	push	{r4, r5, r6, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1072:	680b      	ldr	r3, [r1, #0]
   c1074:	6884      	ldr	r4, [r0, #8]
   c1076:	685b      	ldr	r3, [r3, #4]
   c1078:	2238      	movs	r2, #56	; 0x38
   c107a:	4353      	muls	r3, r2
   c107c:	4605      	mov	r5, r0
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   c107e:	5ce0      	ldrb	r0, [r4, r3]
   c1080:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1082:	b08a      	sub	sp, #40	; 0x28
   c1084:	eb04 0603 	add.w	r6, r4, r3
  switch (input->type) {
   c1088:	d11d      	bne.n	c10c6 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x56>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c108a:	684b      	ldr	r3, [r1, #4]
   c108c:	685b      	ldr	r3, [r3, #4]
    case kTfLiteFloat32: {
      reference_ops::Logistic(
          GetTensorShape(input), GetTensorData<float>(input),
   c108e:	4631      	mov	r1, r6
   c1090:	fb02 4403 	mla	r4, r2, r3, r4
   c1094:	4668      	mov	r0, sp
   c1096:	f7f5 fbf8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   c109a:	4621      	mov	r1, r4
   c109c:	a805      	add	r0, sp, #20
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c109e:	6875      	ldr	r5, [r6, #4]
   c10a0:	f7f5 fbf3 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c10a4:	b104      	cbz	r4, c10a8 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   c10a6:	6864      	ldr	r4, [r4, #4]
      reference_ops::Logistic(
   c10a8:	4623      	mov	r3, r4
   c10aa:	aa05      	add	r2, sp, #20
   c10ac:	4629      	mov	r1, r5
   c10ae:	4668      	mov	r0, sp
   c10b0:	f7ff ff96 	bl	c0fe0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   c10b4:	a805      	add	r0, sp, #20
   c10b6:	f7f5 f944 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
   c10ba:	4668      	mov	r0, sp
   c10bc:	f7f5 f941 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   c10c0:	2000      	movs	r0, #0
                           "Only float32 is supported currently, got %s",
                           TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   c10c2:	b00a      	add	sp, #40	; 0x28
   c10c4:	bd70      	pop	{r4, r5, r6, pc}
      context->ReportError(context,
   c10c6:	696c      	ldr	r4, [r5, #20]
   c10c8:	f7f3 fd5c 	bl	b4b84 <TfLiteTypeGetName>
   c10cc:	4902      	ldr	r1, [pc, #8]	; (c10d8 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x68>)
   c10ce:	4602      	mov	r2, r0
   c10d0:	4628      	mov	r0, r5
   c10d2:	47a0      	blx	r4
      return kTfLiteError;
   c10d4:	2001      	movs	r0, #1
   c10d6:	e7f4      	b.n	c10c2 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x52>
   c10d8:	000c8e54 	.word	0x000c8e54

000c10dc <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
TfLiteRegistration* Register_LOGISTIC() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, activations::Prepare,
                                 activations::Eval};
  return &r;
}
   c10dc:	4800      	ldr	r0, [pc, #0]	; (c10e0 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x4>)
   c10de:	4770      	bx	lr
   c10e0:	2003c538 	.word	0x2003c538

000c10e4 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
namespace micro {
namespace activations {

TfLiteStatus PreluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c10e4:	2000      	movs	r0, #0
   c10e6:	4770      	bx	lr

000c10e8 <_ZN6tflite3ops5micro14Register_PRELUEv>:

TfLiteRegistration* Register_PRELU() {
  static TfLiteRegistration r = {nullptr, nullptr, activations::PreluPrepare,
                                 activations::PreluEval};
  return &r;
}
   c10e8:	4800      	ldr	r0, [pc, #0]	; (c10ec <_ZN6tflite3ops5micro14Register_PRELUEv+0x4>)
   c10ea:	4770      	bx	lr
   c10ec:	2003c558 	.word	0x2003c558

000c10f0 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c10f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c10f4:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c10f6:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c10f8:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c10fa:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c10fc:	4615      	mov	r5, r2
   c10fe:	4604      	mov	r4, r0
   c1100:	9a22      	ldr	r2, [sp, #136]	; 0x88
   c1102:	468a      	mov	sl, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c1104:	dd01      	ble.n	c110a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   c1106:	f003 fb79 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   c110a:	682b      	ldr	r3, [r5, #0]
   c110c:	2b04      	cmp	r3, #4
   c110e:	dcfa      	bgt.n	c1106 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   c1110:	6813      	ldr	r3, [r2, #0]
   c1112:	2b04      	cmp	r3, #4
   c1114:	dcf7      	bgt.n	c1106 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   c1116:	2301      	movs	r3, #1
   c1118:	2104      	movs	r1, #4
   c111a:	a803      	add	r0, sp, #12
   c111c:	f7f5 f956 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   c1120:	4620      	mov	r0, r4
   c1122:	ab10      	add	r3, sp, #64	; 0x40
   c1124:	aa08      	add	r2, sp, #32
   c1126:	4629      	mov	r1, r5
   c1128:	f7f5 fc58 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   c112c:	2400      	movs	r4, #0
   c112e:	2100      	movs	r1, #0
   c1130:	a803      	add	r0, sp, #12
   c1132:	f7f5 f911 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1136:	42a0      	cmp	r0, r4
   c1138:	dd47      	ble.n	c11ca <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xda>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   c113a:	2500      	movs	r5, #0
   c113c:	2101      	movs	r1, #1
   c113e:	a803      	add	r0, sp, #12
   c1140:	f7f5 f90a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1144:	42a8      	cmp	r0, r5
   c1146:	dd3e      	ble.n	c11c6 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   c1148:	2700      	movs	r7, #0
   c114a:	2102      	movs	r1, #2
   c114c:	a803      	add	r0, sp, #12
   c114e:	f7f5 f903 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1152:	42b8      	cmp	r0, r7
   c1154:	dd35      	ble.n	c11c2 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd2>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   c1156:	2600      	movs	r6, #0
   c1158:	2103      	movs	r1, #3
   c115a:	a803      	add	r0, sp, #12
   c115c:	f7f5 f8fc 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1160:	42b0      	cmp	r0, r6
   c1162:	dd2c      	ble.n	c11be <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xce>
          auto out_idx = Offset(output_shape, b, y, x, c);
   c1164:	9600      	str	r6, [sp, #0]
   c1166:	463b      	mov	r3, r7
   c1168:	462a      	mov	r2, r5
   c116a:	4621      	mov	r1, r4
   c116c:	a803      	add	r0, sp, #12
   c116e:	f7f5 f95a 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c1172:	9600      	str	r6, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   c1174:	4680      	mov	r8, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c1176:	463b      	mov	r3, r7
   c1178:	462a      	mov	r2, r5
   c117a:	4621      	mov	r1, r4
   c117c:	a808      	add	r0, sp, #32
   c117e:	f7f5 f9fb 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   c1182:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c1184:	4681      	mov	r9, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   c1186:	463b      	mov	r3, r7
   c1188:	462a      	mov	r2, r5
   c118a:	4621      	mov	r1, r4
   c118c:	a810      	add	r0, sp, #64	; 0x40
   c118e:	f7f5 f9f3 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   c1192:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
   c1196:	edd9 7a00 	vldr	s15, [r9]
          output_data[out_idx] = in1_val >= 0.0 ? in1_val : in1_val * in2_val;
   c119a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
          auto in2_val = input2_data[in2_idx];
   c119c:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   c11a0:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0 ? in1_val : in1_val * in2_val;
   c11a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c11a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c11ac:	bfb8      	it	lt
   c11ae:	ee67 7a87 	vmullt.f32	s15, s15, s14
   c11b2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   c11b6:	edc8 7a00 	vstr	s15, [r8]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   c11ba:	3601      	adds	r6, #1
   c11bc:	e7cc      	b.n	c1158 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x68>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   c11be:	3701      	adds	r7, #1
   c11c0:	e7c3      	b.n	c114a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x5a>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   c11c2:	3501      	adds	r5, #1
   c11c4:	e7ba      	b.n	c113c <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   c11c6:	3401      	adds	r4, #1
   c11c8:	e7b1      	b.n	c112e <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x3e>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   c11ca:	a803      	add	r0, sp, #12
   c11cc:	f7f5 f8b9 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
}
   c11d0:	b019      	add	sp, #100	; 0x64
   c11d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000c11d8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                                 const RuntimeShape& input_shape,
                                 const uint8* input_data,
                                 const RuntimeShape& alpha_shape,
                                 const uint8* alpha_data,
                                 const RuntimeShape& output_shape,
                                 uint8* output_data) {
   c11d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c11dc:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c11de:	680b      	ldr	r3, [r1, #0]
                                 uint8* output_data) {
   c11e0:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c11e2:	2b04      	cmp	r3, #4
                                 uint8* output_data) {
   c11e4:	9203      	str	r2, [sp, #12]
   c11e6:	4604      	mov	r4, r0
   c11e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   c11ea:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c11ec:	dd01      	ble.n	c11f2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1a>
   c11ee:	f003 fb05 	bl	c47fc <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   c11f2:	6833      	ldr	r3, [r6, #0]
   c11f4:	2b04      	cmp	r3, #4
   c11f6:	dcfa      	bgt.n	c11ee <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   c11f8:	6813      	ldr	r3, [r2, #0]
   c11fa:	2b04      	cmp	r3, #4
   c11fc:	dcf7      	bgt.n	c11ee <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x16>
   c11fe:	2301      	movs	r3, #1
   c1200:	2104      	movs	r1, #4
   c1202:	a805      	add	r0, sp, #20
   c1204:	f7f5 f8e2 	bl	b63cc <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   c1208:	4628      	mov	r0, r5
   c120a:	ab12      	add	r3, sp, #72	; 0x48
   c120c:	aa0a      	add	r2, sp, #40	; 0x28
   c120e:	4631      	mov	r1, r6
   c1210:	f7f5 fbe4 	bl	b69dc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   c1214:	2500      	movs	r5, #0
   c1216:	2100      	movs	r1, #0
   c1218:	a805      	add	r0, sp, #20
   c121a:	f7f5 f89d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c121e:	42a8      	cmp	r0, r5
   c1220:	f340 80a7 	ble.w	c1372 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x19a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   c1224:	2600      	movs	r6, #0
   c1226:	af05      	add	r7, sp, #20
   c1228:	2101      	movs	r1, #1
   c122a:	4638      	mov	r0, r7
   c122c:	f7f5 f894 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1230:	42b0      	cmp	r0, r6
   c1232:	f340 809c 	ble.w	c136e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x196>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   c1236:	f04f 0b00 	mov.w	fp, #0
   c123a:	2102      	movs	r1, #2
   c123c:	4638      	mov	r0, r7
   c123e:	f7f5 f88b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1242:	4558      	cmp	r0, fp
   c1244:	f340 8091 	ble.w	c136a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x192>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   c1248:	f04f 0800 	mov.w	r8, #0
   c124c:	2103      	movs	r1, #3
   c124e:	4638      	mov	r0, r7
   c1250:	f7f5 f882 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1254:	4540      	cmp	r0, r8
   c1256:	f340 8085 	ble.w	c1364 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18c>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   c125a:	465b      	mov	r3, fp
   c125c:	4632      	mov	r2, r6
   c125e:	4629      	mov	r1, r5
   c1260:	f8cd 8000 	str.w	r8, [sp]
   c1264:	4638      	mov	r0, r7
   c1266:	f7f5 f8de 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   c126a:	465b      	mov	r3, fp
   c126c:	4632      	mov	r2, r6
   c126e:	4629      	mov	r1, r5
          int output_index = Offset(extended_output_shape, b, y, x, c);
   c1270:	4681      	mov	r9, r0
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   c1272:	f8cd 8000 	str.w	r8, [sp]
   c1276:	a80a      	add	r0, sp, #40	; 0x28
   c1278:	f7f5 f97e 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   c127c:	9b03      	ldr	r3, [sp, #12]
          const int32 input_value =
   c127e:	6821      	ldr	r1, [r4, #0]
              params.input_offset + input_data[input_index];
   c1280:	5c1a      	ldrb	r2, [r3, r0]
          if (input_value >= 0) {
   c1282:	eb12 0a01 	adds.w	sl, r2, r1
   c1286:	d405      	bmi.n	c1294 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xbc>
            output_data[output_index] = input_data[input_index];
   c1288:	9b26      	ldr	r3, [sp, #152]	; 0x98
   c128a:	f803 2009 	strb.w	r2, [r3, r9]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   c128e:	f108 0801 	add.w	r8, r8, #1
   c1292:	e7db      	b.n	c124c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x74>
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   c1294:	465b      	mov	r3, fp
   c1296:	4632      	mov	r2, r6
   c1298:	4629      	mov	r1, r5
   c129a:	f8cd 8000 	str.w	r8, [sp]
   c129e:	a812      	add	r0, sp, #72	; 0x48
   c12a0:	f7f5 f96a 	bl	b6578 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];
   c12a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
            const int32 alpha_value =
   c12a6:	6861      	ldr	r1, [r4, #4]
                params.alpha_offset + alpha_data[alpha_index];
   c12a8:	5c12      	ldrb	r2, [r2, r0]
            const int32 unclamped_output =
                params.output_offset +
   c12aa:	68a3      	ldr	r3, [r4, #8]
            const int32 alpha_value =
   c12ac:	440a      	add	r2, r1
                MultiplyByQuantizedMultiplierSmallerThanOneExp(
   c12ae:	fb0a fa02 	mul.w	sl, sl, r2
                    input_value * alpha_value, params.output_multiplier,
                    params.output_shift);
   c12b2:	e9d4 2003 	ldrd	r2, r0, [r4, #12]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   c12b6:	4592      	cmp	sl, r2
   c12b8:	d12a      	bne.n	c1310 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x138>
   c12ba:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
   c12be:	f1d1 0e00 	rsbs	lr, r1, #0
   c12c2:	eb4e 0e01 	adc.w	lr, lr, r1
  std::int64_t ab_64 = a_64 * b_64;
   c12c6:	fb8a a202 	smull	sl, r2, sl, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   c12ca:	2a00      	cmp	r2, #0
   c12cc:	492c      	ldr	r1, [pc, #176]	; (c1380 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1a8>)
   c12ce:	bfa8      	it	ge
   c12d0:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   c12d4:	f1be 0f00 	cmp.w	lr, #0
   c12d8:	d11d      	bne.n	c1316 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x13e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   c12da:	eb11 0a0a 	adds.w	sl, r1, sl
   c12de:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   c12e2:	2a00      	cmp	r2, #0
   c12e4:	da05      	bge.n	c12f2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x11a>
   c12e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   c12ea:	eb1a 0a01 	adds.w	sl, sl, r1
   c12ee:	f142 0200 	adc.w	r2, r2, #0
   c12f2:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   c12f6:	ea4a 0242 	orr.w	r2, sl, r2, lsl #1
  assert(exponent >= 0);
   c12fa:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(
   c12fc:	f1c0 0100 	rsb	r1, r0, #0
   c1300:	dd0c      	ble.n	c131c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x144>
   c1302:	4b20      	ldr	r3, [pc, #128]	; (c1384 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1ac>)
   c1304:	4a20      	ldr	r2, [pc, #128]	; (c1388 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b0>)
   c1306:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   c130a:	4820      	ldr	r0, [pc, #128]	; (c138c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b4>)
   c130c:	f003 fa86 	bl	c481c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   c1310:	f04f 0e00 	mov.w	lr, #0
   c1314:	e7d7      	b.n	c12c6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xee>
   c1316:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   c131a:	e7ee      	b.n	c12fa <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x122>
  assert(exponent <= 31);
   c131c:	301f      	adds	r0, #31
   c131e:	da04      	bge.n	c132a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x152>
   c1320:	4b1b      	ldr	r3, [pc, #108]	; (c1390 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b8>)
   c1322:	4a19      	ldr	r2, [pc, #100]	; (c1388 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b0>)
   c1324:	f240 1167 	movw	r1, #359	; 0x167
   c1328:	e7ef      	b.n	c130a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x132>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   c132a:	2001      	movs	r0, #1
   c132c:	4088      	lsls	r0, r1
   c132e:	3801      	subs	r0, #1
  return a & b;
   c1330:	ea00 0e02 	and.w	lr, r0, r2
  return a >> offset;
   c1334:	1040      	asrs	r0, r0, #1
  return a + b;
   c1336:	eb00 70d2 	add.w	r0, r0, r2, lsr #31
  return a >> offset;
   c133a:	410a      	asrs	r2, r1
  return a + b;
   c133c:	4586      	cmp	lr, r0
   c133e:	bfc8      	it	gt
   c1340:	3201      	addgt	r2, #1
                params.output_offset +
   c1342:	eb02 0c03 	add.w	ip, r2, r3
      if (__a < __b)
   c1346:	f1bc 0f00 	cmp.w	ip, #0
   c134a:	dd08      	ble.n	c135e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x186>
      return __a;
   c134c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   c1350:	bfa8      	it	ge
   c1352:	f04f 0cff 	movge.w	ip, #255	; 0xff
            const int32 quantized_min = std::numeric_limits<uint8_t>::min();
            const int32 quantized_max = std::numeric_limits<uint8_t>::max();
            const int32 clamped_output = std::min(
                quantized_max, std::max(quantized_min, unclamped_output));
            output_data[output_index] = static_cast<uint8>(clamped_output);
   c1356:	9b26      	ldr	r3, [sp, #152]	; 0x98
   c1358:	f803 c009 	strb.w	ip, [r3, r9]
   c135c:	e797      	b.n	c128e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xb6>
      return __a;
   c135e:	f04f 0c00 	mov.w	ip, #0
   c1362:	e7f8      	b.n	c1356 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x17e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   c1364:	f10b 0b01 	add.w	fp, fp, #1
   c1368:	e767      	b.n	c123a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   c136a:	3601      	adds	r6, #1
   c136c:	e75b      	b.n	c1226 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   c136e:	3501      	adds	r5, #1
   c1370:	e751      	b.n	c1216 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3e>
      RuntimeShape::ExtendedShape(4, output_shape);
   c1372:	a805      	add	r0, sp, #20
   c1374:	f7f4 ffe5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   c1378:	b01b      	add	sp, #108	; 0x6c
   c137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c137e:	bf00      	nop
   c1380:	c0000001 	.word	0xc0000001
   c1384:	000c8016 	.word	0x000c8016
   c1388:	000c8024 	.word	0x000c8024
   c138c:	000c807e 	.word	0x000c807e
   c1390:	000c80e5 	.word	0x000c80e5

000c1394 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   c1394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1398:	680b      	ldr	r3, [r1, #0]
   c139a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   c139e:	689c      	ldr	r4, [r3, #8]
   c13a0:	4607      	mov	r7, r0
   c13a2:	6858      	ldr	r0, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c13a4:	684b      	ldr	r3, [r1, #4]
   c13a6:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c13a8:	2238      	movs	r2, #56	; 0x38
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c13aa:	4353      	muls	r3, r2
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c13ac:	fb02 f900 	mul.w	r9, r2, r0
   c13b0:	b09d      	sub	sp, #116	; 0x74
   c13b2:	fb02 8404 	mla	r4, r2, r4, r8
  int32_t output_multiplier = 0;
   c13b6:	2200      	movs	r2, #0
  int output_shift = 0;
   c13b8:	e9cd 2206 	strd	r2, r2, [sp, #24]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c13bc:	eb08 0503 	add.w	r5, r8, r3
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt16) {
   c13c0:	f818 3003 	ldrb.w	r3, [r8, r3]
   c13c4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   c13c8:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c13ca:	eb08 0609 	add.w	r6, r8, r9
   c13ce:	d113      	bne.n	c13f8 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x64>
        input->params.scale * alpha->params.scale / output->params.scale;
   c13d0:	ed94 7a03 	vldr	s14, [r4, #12]
   c13d4:	edd6 7a03 	vldr	s15, [r6, #12]
   c13d8:	ee67 7a87 	vmul.f32	s15, s15, s14
   c13dc:	ed95 7a03 	vldr	s14, [r5, #12]
    double real_multiplier =
   c13e0:	eec7 7a87 	vdiv.f32	s15, s15, s14
   c13e4:	ee17 0a90 	vmov	r0, s15
   c13e8:	f7f2 ff7e 	bl	b42e8 <__aeabi_f2d>
   c13ec:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(real_multiplier, &output_multiplier,
   c13f0:	a907      	add	r1, sp, #28
   c13f2:	a806      	add	r0, sp, #24
   c13f4:	f7f3 ff3a 	bl	b526c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
  switch (input->type) {
   c13f8:	f818 0009 	ldrb.w	r0, [r8, r9]
   c13fc:	2801      	cmp	r0, #1
   c13fe:	d00a      	beq.n	c1416 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x82>
   c1400:	2803      	cmp	r0, #3
   c1402:	d02e      	beq.n	c1462 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xce>
      context->ReportError(
   c1404:	697c      	ldr	r4, [r7, #20]
   c1406:	f7f3 fbbd 	bl	b4b84 <TfLiteTypeGetName>
   c140a:	492a      	ldr	r1, [pc, #168]	; (c14b4 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x120>)
   c140c:	4602      	mov	r2, r0
   c140e:	4638      	mov	r0, r7
   c1410:	47a0      	blx	r4
      return kTfLiteError;
   c1412:	2001      	movs	r0, #1
   c1414:	e022      	b.n	c145c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xc8>
          GetTensorShape(input), GetTensorData<float>(input),
   c1416:	4631      	mov	r1, r6
   c1418:	a80d      	add	r0, sp, #52	; 0x34
   c141a:	f7f5 fa36 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   c141e:	4621      	mov	r1, r4
   c1420:	a812      	add	r0, sp, #72	; 0x48
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1422:	6877      	ldr	r7, [r6, #4]
   c1424:	f7f5 fa31 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c1428:	b104      	cbz	r4, c142c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x98>
   c142a:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
   c142c:	ae17      	add	r6, sp, #92	; 0x5c
   c142e:	4629      	mov	r1, r5
   c1430:	4630      	mov	r0, r6
   c1432:	f7f5 fa2a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
   c1436:	686b      	ldr	r3, [r5, #4]
   c1438:	a80d      	add	r0, sp, #52	; 0x34
   c143a:	e9cd 6300 	strd	r6, r3, [sp]
   c143e:	aa12      	add	r2, sp, #72	; 0x48
   c1440:	4623      	mov	r3, r4
   c1442:	4639      	mov	r1, r7
   c1444:	f7ff fe54 	bl	c10f0 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   c1448:	4630      	mov	r0, r6
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c144a:	f7f4 ff7a 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   c144e:	a812      	add	r0, sp, #72	; 0x48
   c1450:	f7f4 ff77 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c1454:	a80d      	add	r0, sp, #52	; 0x34
   c1456:	f7f4 ff74 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   c145a:	2000      	movs	r0, #0
}
   c145c:	b01d      	add	sp, #116	; 0x74
   c145e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      op_params.input_offset = -input->params.zero_point;
   c1462:	6933      	ldr	r3, [r6, #16]
   c1464:	425b      	negs	r3, r3
   c1466:	9308      	str	r3, [sp, #32]
      op_params.alpha_offset = -alpha->params.zero_point;
   c1468:	6923      	ldr	r3, [r4, #16]
   c146a:	425b      	negs	r3, r3
   c146c:	9309      	str	r3, [sp, #36]	; 0x24
      op_params.output_offset = output->params.zero_point;
   c146e:	692b      	ldr	r3, [r5, #16]
   c1470:	930a      	str	r3, [sp, #40]	; 0x28
      op_params.output_multiplier = output_multiplier;
   c1472:	9b06      	ldr	r3, [sp, #24]
   c1474:	930b      	str	r3, [sp, #44]	; 0x2c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c1476:	4631      	mov	r1, r6
      op_params.output_shift = output_shift;
   c1478:	9b07      	ldr	r3, [sp, #28]
   c147a:	930c      	str	r3, [sp, #48]	; 0x30
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c147c:	a80d      	add	r0, sp, #52	; 0x34
   c147e:	f7f5 fa04 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c1482:	6872      	ldr	r2, [r6, #4]
   c1484:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   c1486:	4621      	mov	r1, r4
   c1488:	a812      	add	r0, sp, #72	; 0x48
   c148a:	f7f5 f9fe 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c148e:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c1490:	ac17      	add	r4, sp, #92	; 0x5c
   c1492:	4629      	mov	r1, r5
   c1494:	4620      	mov	r0, r4
   c1496:	f7f5 f9f8 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   c149a:	686b      	ldr	r3, [r5, #4]
   c149c:	9a05      	ldr	r2, [sp, #20]
   c149e:	9600      	str	r6, [sp, #0]
   c14a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   c14a4:	a808      	add	r0, sp, #32
   c14a6:	ab12      	add	r3, sp, #72	; 0x48
   c14a8:	a90d      	add	r1, sp, #52	; 0x34
   c14aa:	f7ff fe95 	bl	c11d8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c14ae:	4620      	mov	r0, r4
   c14b0:	e7cb      	b.n	c144a <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xb6>
   c14b2:	bf00      	nop
   c14b4:	000c8e80 	.word	0x000c8e80

000c14b8 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
// Output tensor.
constexpr int kOutputTensor = 0;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c14b8:	2000      	movs	r0, #0
   c14ba:	4770      	bx	lr

000c14bc <_ZN6tflite3ops5micro4svdf4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c14bc:	4770      	bx	lr
	...

000c14c0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_>:
    TfLiteTensor* scratch, TfLiteTensor* output) {
   c14c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c14c4:	b089      	sub	sp, #36	; 0x24
   c14c6:	461d      	mov	r5, r3
   c14c8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   c14cc:	9307      	str	r3, [sp, #28]
   c14ce:	fb01 f302 	mul.w	r3, r1, r2
   c14d2:	009b      	lsls	r3, r3, #2
   c14d4:	e9dd b417 	ldrd	fp, r4, [sp, #92]	; 0x5c
   c14d8:	9001      	str	r0, [sp, #4]
   c14da:	468a      	mov	sl, r1
   c14dc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   c14e0:	9305      	str	r3, [sp, #20]
   c14e2:	2100      	movs	r1, #0
   c14e4:	0093      	lsls	r3, r2, #2
      *scratch_ptr_batch = 0.f;
   c14e6:	ed9f 7a80 	vldr	s14, [pc, #512]	; c16e8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x228>
    TfLiteTensor* scratch, TfLiteTensor* output) {
   c14ea:	9202      	str	r2, [sp, #8]
   c14ec:	9306      	str	r3, [sp, #24]
   c14ee:	0080      	lsls	r0, r0, #2
   c14f0:	468c      	mov	ip, r1
  for (int b = 0; b < batch_size; ++b) {
   c14f2:	468e      	mov	lr, r1
   c14f4:	9b01      	ldr	r3, [sp, #4]
   c14f6:	459e      	cmp	lr, r3
   c14f8:	da3c      	bge.n	c1574 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xb4>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c14fa:	f1bb 0f00 	cmp.w	fp, #0
   c14fe:	d027      	beq.n	c1550 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x90>
   c1500:	f8db 3004 	ldr.w	r3, [fp, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    float* scratch_ptr_batch = GetTensorData<float>(scratch) + b * num_filters;
   c1506:	440b      	add	r3, r1
   c1508:	b322      	cbz	r2, c1554 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x94>
   c150a:	6857      	ldr	r7, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c150c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c150e:	b31a      	cbz	r2, c1558 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x98>
   c1510:	6852      	ldr	r2, [r2, #4]
        GetTensorData<float>(activation_state) + b * memory_size * num_filters;
   c1512:	4462      	add	r2, ip
    for (int i = 0; i < num_filters; ++i) {
   c1514:	f04f 0800 	mov.w	r8, #0
   c1518:	9e02      	ldr	r6, [sp, #8]
   c151a:	45b0      	cmp	r8, r6
   c151c:	da23      	bge.n	c1566 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xa6>
      *scratch_ptr_batch = 0.f;
   c151e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   c1522:	eca3 7a01 	vstmia	r3!, {s14}
      for (int j = 0; j < memory_size; ++j) {
   c1526:	f04f 0900 	mov.w	r9, #0
   c152a:	45d1      	cmp	r9, sl
   c152c:	da16      	bge.n	c155c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x9c>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   c152e:	9e03      	ldr	r6, [sp, #12]
   c1530:	ed53 7a01 	vldr	s15, [r3, #-4]
   c1534:	ecb6 6a01 	vldmia	r6!, {s12}
   c1538:	9603      	str	r6, [sp, #12]
   c153a:	9e04      	ldr	r6, [sp, #16]
   c153c:	ecf6 6a01 	vldmia	r6!, {s13}
   c1540:	eee6 7a26 	vfma.f32	s15, s12, s13
   c1544:	9604      	str	r6, [sp, #16]
      for (int j = 0; j < memory_size; ++j) {
   c1546:	f109 0901 	add.w	r9, r9, #1
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   c154a:	ed43 7a01 	vstr	s15, [r3, #-4]
      for (int j = 0; j < memory_size; ++j) {
   c154e:	e7ec      	b.n	c152a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x6a>
   c1550:	465b      	mov	r3, fp
   c1552:	e7d7      	b.n	c1504 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x44>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1554:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   c1556:	e7d9      	b.n	c150c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x4c>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1558:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c155a:	e7da      	b.n	c1512 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x52>
   c155c:	4407      	add	r7, r0
   c155e:	4402      	add	r2, r0
    for (int i = 0; i < num_filters; ++i) {
   c1560:	f108 0801 	add.w	r8, r8, #1
   c1564:	e7d8      	b.n	c1518 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x58>
  for (int b = 0; b < batch_size; ++b) {
   c1566:	9b05      	ldr	r3, [sp, #20]
   c1568:	449c      	add	ip, r3
   c156a:	9b06      	ldr	r3, [sp, #24]
   c156c:	f10e 0e01 	add.w	lr, lr, #1
   c1570:	4419      	add	r1, r3
   c1572:	e7bf      	b.n	c14f4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x34>
  if (bias) {
   c1574:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c1576:	2b00      	cmp	r3, #0
   c1578:	d052      	beq.n	c1620 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x160>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c157a:	f8d3 e004 	ldr.w	lr, [r3, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c157e:	2c00      	cmp	r4, #0
   c1580:	d03e      	beq.n	c1600 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x140>
   c1582:	6863      	ldr	r3, [r4, #4]
    for (int i = 0; i < batch_size; ++i) {
   c1584:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   c1588:	2200      	movs	r2, #0
   c158a:	9901      	ldr	r1, [sp, #4]
   c158c:	428a      	cmp	r2, r1
   c158e:	db39      	blt.n	c1604 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x144>
   c1590:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c1592:	2100      	movs	r1, #0
   c1594:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   c1598:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   c159c:	4608      	mov	r0, r1
   c159e:	460f      	mov	r7, r1
  for (int b = 0; b < batch_size; ++b) {
   c15a0:	9b01      	ldr	r3, [sp, #4]
   c15a2:	429f      	cmp	r7, r3
   c15a4:	db4a      	blt.n	c163c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x17c>
   c15a6:	2200      	movs	r2, #0
inline float ActivationValFloat(TfLiteFusedActivation act, float a) {
  switch (act) {
    case kTfLiteActNone:
      return a;
    case kTfLiteActRelu:
      return a < 0.f ? 0.f : a;
   c15a8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; c16e8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x228>
   c15ac:	00af      	lsls	r7, r5, #2
  for (int b = 0; b < batch_size; ++b) {
   c15ae:	4611      	mov	r1, r2
   c15b0:	9b01      	ldr	r3, [sp, #4]
   c15b2:	4299      	cmp	r1, r3
   c15b4:	db6f      	blt.n	c1696 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1d6>
      float* batch_end = state_ptr_batch + memory_size;
   c15b6:	ea4f 048a 	mov.w	r4, sl, lsl #2
      state_ptr_batch[memory_size - 1] = 0.0f;
   c15ba:	2500      	movs	r5, #0
   c15bc:	f1a4 0a04 	sub.w	sl, r4, #4
  for (int b = 0; b < batch_size; ++b) {
   c15c0:	462f      	mov	r7, r5
      state_ptr_batch[memory_size - 1] = 0.0f;
   c15c2:	f04f 0b00 	mov.w	fp, #0
  for (int b = 0; b < batch_size; ++b) {
   c15c6:	9b01      	ldr	r3, [sp, #4]
   c15c8:	429f      	cmp	r7, r3
   c15ca:	f280 8089 	bge.w	c16e0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x220>
   c15ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c15d0:	2b00      	cmp	r3, #0
   c15d2:	d07f      	beq.n	c16d4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x214>
   c15d4:	685b      	ldr	r3, [r3, #4]
        GetTensorData<float>(activation_state) + b * memory_size * num_filters;
   c15d6:	442b      	add	r3, r5
    for (int f = 0; f < num_filters; ++f) {
   c15d8:	f04f 0800 	mov.w	r8, #0
   c15dc:	9a02      	ldr	r2, [sp, #8]
   c15de:	4590      	cmp	r8, r2
   c15e0:	da7a      	bge.n	c16d8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x218>
        *batch_ptr++ = *batch_start++;
   c15e2:	1d19      	adds	r1, r3, #4
   c15e4:	4618      	mov	r0, r3
   c15e6:	4652      	mov	r2, sl
   c15e8:	eb04 0903 	add.w	r9, r4, r3
   c15ec:	f005 faa0 	bl	c6b30 <memmove>
   c15f0:	4603      	mov	r3, r0
      state_ptr_batch[memory_size - 1] = 0.0f;
   c15f2:	4453      	add	r3, sl
    for (int f = 0; f < num_filters; ++f) {
   c15f4:	f108 0801 	add.w	r8, r8, #1
      state_ptr_batch[memory_size - 1] = 0.0f;
   c15f8:	f8c3 b000 	str.w	fp, [r3]
    for (int f = 0; f < num_filters; ++f) {
   c15fc:	464b      	mov	r3, r9
   c15fe:	e7ed      	b.n	c15dc <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x11c>
   c1600:	4623      	mov	r3, r4
   c1602:	e7bf      	b.n	c1584 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xc4>
      float* output_ptr = output_data + i * num_units;
   c1604:	4618      	mov	r0, r3
      const float* bias_ptr = bias_data;
   c1606:	4677      	mov	r7, lr
      for (int j = 0; j < num_units; ++j) {
   c1608:	2100      	movs	r1, #0
   c160a:	42a9      	cmp	r1, r5
   c160c:	da05      	bge.n	c161a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x15a>
        *output_ptr++ = *bias_ptr++;
   c160e:	f857 8b04 	ldr.w	r8, [r7], #4
   c1612:	f840 8b04 	str.w	r8, [r0], #4
      for (int j = 0; j < num_units; ++j) {
   c1616:	3101      	adds	r1, #1
   c1618:	e7f7      	b.n	c160a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x14a>
    for (int i = 0; i < batch_size; ++i) {
   c161a:	3201      	adds	r2, #1
   c161c:	4463      	add	r3, ip
   c161e:	e7b4      	b.n	c158a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xca>
   c1620:	b154      	cbz	r4, c1638 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x178>
   c1622:	6860      	ldr	r0, [r4, #4]
    for (int i = 0; i < batch_size * num_units; ++i) {
   c1624:	9b01      	ldr	r3, [sp, #4]
   c1626:	fb05 f203 	mul.w	r2, r5, r3
      *output_data++ = 0.0f;
   c162a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   c162e:	0092      	lsls	r2, r2, #2
   c1630:	2100      	movs	r1, #0
   c1632:	f005 fa97 	bl	c6b64 <memset>
   c1636:	e7ab      	b.n	c1590 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xd0>
   c1638:	4620      	mov	r0, r4
   c163a:	e7f3      	b.n	c1624 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x164>
   c163c:	b1ec      	cbz	r4, c167a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1ba>
   c163e:	6863      	ldr	r3, [r4, #4]
   c1640:	f1bb 0f00 	cmp.w	fp, #0
   c1644:	d01b      	beq.n	c167e <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1be>
   c1646:	f8db 2004 	ldr.w	r2, [fp, #4]
    float* scratch_ptr_batch = GetTensorData<float>(scratch) + b * num_filters;
   c164a:	4402      	add	r2, r0
    for (int i = 0; i < num_units; ++i) {
   c164c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c1650:	f04f 0e00 	mov.w	lr, #0
   c1654:	45ae      	cmp	lr, r5
   c1656:	da19      	bge.n	c168c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1cc>
   c1658:	4691      	mov	r9, r2
      for (int j = 0; j < rank; j++) {
   c165a:	f04f 0800 	mov.w	r8, #0
   c165e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   c1660:	45b0      	cmp	r8, r6
   c1662:	da0e      	bge.n	c1682 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1c2>
        output_ptr_batch[i] += *input_vector_ptr++;
   c1664:	edd3 7a00 	vldr	s15, [r3]
   c1668:	ecb9 7a01 	vldmia	r9!, {s14}
   c166c:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
   c1670:	f108 0801 	add.w	r8, r8, #1
        output_ptr_batch[i] += *input_vector_ptr++;
   c1674:	edc3 7a00 	vstr	s15, [r3]
      for (int j = 0; j < rank; j++) {
   c1678:	e7f1      	b.n	c165e <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x19e>
   c167a:	4623      	mov	r3, r4
   c167c:	e7e0      	b.n	c1640 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x180>
   c167e:	465a      	mov	r2, fp
   c1680:	e7e3      	b.n	c164a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x18a>
   c1682:	4462      	add	r2, ip
    for (int i = 0; i < num_units; ++i) {
   c1684:	f10e 0e01 	add.w	lr, lr, #1
   c1688:	3304      	adds	r3, #4
   c168a:	e7e3      	b.n	c1654 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x194>
  for (int b = 0; b < batch_size; ++b) {
   c168c:	9b06      	ldr	r3, [sp, #24]
   c168e:	3701      	adds	r7, #1
   c1690:	4418      	add	r0, r3
   c1692:	4429      	add	r1, r5
   c1694:	e784      	b.n	c15a0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xe0>
   c1696:	b1ac      	cbz	r4, c16c4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x204>
   c1698:	6863      	ldr	r3, [r4, #4]
    float* output_ptr_batch = GetTensorData<float>(output) + b * num_units;
   c169a:	4413      	add	r3, r2
    for (int i = 0; i < num_units; ++i) {
   c169c:	2000      	movs	r0, #0
   c169e:	42a8      	cmp	r0, r5
   c16a0:	da15      	bge.n	c16ce <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x20e>
  switch (act) {
   c16a2:	9e07      	ldr	r6, [sp, #28]
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
   c16a4:	edd3 7a00 	vldr	s15, [r3]
   c16a8:	b146      	cbz	r6, c16bc <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1fc>
   c16aa:	2e01      	cmp	r6, #1
   c16ac:	d10c      	bne.n	c16c8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x208>
      return a < 0.f ? 0.f : a;
   c16ae:	eef5 7a40 	vcmp.f32	s15, #0.0
   c16b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c16b6:	bf48      	it	mi
   c16b8:	eef0 7a47 	vmovmi.f32	s15, s14
   c16bc:	ece3 7a01 	vstmia	r3!, {s15}
    for (int i = 0; i < num_units; ++i) {
   c16c0:	3001      	adds	r0, #1
   c16c2:	e7ec      	b.n	c169e <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1de>
   c16c4:	4623      	mov	r3, r4
   c16c6:	e7e8      	b.n	c169a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1da>
    default:
      // TODO(kreeger): Implement more activations.
      exit(1);
   c16c8:	2001      	movs	r0, #1
   c16ca:	f005 f9ff 	bl	c6acc <exit>
  for (int b = 0; b < batch_size; ++b) {
   c16ce:	3101      	adds	r1, #1
   c16d0:	443a      	add	r2, r7
   c16d2:	e76d      	b.n	c15b0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xf0>
   c16d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c16d6:	e77e      	b.n	c15d6 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x116>
  for (int b = 0; b < batch_size; ++b) {
   c16d8:	9b05      	ldr	r3, [sp, #20]
   c16da:	3701      	adds	r7, #1
   c16dc:	441d      	add	r5, r3
   c16de:	e772      	b.n	c15c6 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x106>
}
   c16e0:	b009      	add	sp, #36	; 0x24
   c16e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c16e6:	bf00      	nop
   c16e8:	00000000 	.word	0x00000000

000c16ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c16ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  // TODO(kreeger): Use input tensor as variable until scratch tensor allocation
  // has been implemented (cl/263032056)
  // TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 6);
   c16f0:	680a      	ldr	r2, [r1, #0]
   c16f2:	6813      	ldr	r3, [r2, #0]
   c16f4:	2b06      	cmp	r3, #6
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c16f6:	b089      	sub	sp, #36	; 0x24
   c16f8:	4604      	mov	r4, r0
   c16fa:	4688      	mov	r8, r1
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 6);
   c16fc:	d011      	beq.n	c1722 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
   c16fe:	2206      	movs	r2, #6
   c1700:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c1704:	4b9f      	ldr	r3, [pc, #636]	; (c1984 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   c1706:	9301      	str	r3, [sp, #4]
   c1708:	4b9f      	ldr	r3, [pc, #636]	; (c1988 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
   c170a:	9300      	str	r3, [sp, #0]
   c170c:	6944      	ldr	r4, [r0, #20]
   c170e:	4a9f      	ldr	r2, [pc, #636]	; (c198c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c1710:	499f      	ldr	r1, [pc, #636]	; (c1990 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c1712:	f44f 739f 	mov.w	r3, #318	; 0x13e
   c1716:	47a0      	blx	r4
   c1718:	2501      	movs	r5, #1
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);

  return kTfLiteOk;
}
   c171a:	4628      	mov	r0, r5
   c171c:	b009      	add	sp, #36	; 0x24
   c171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1722:	6891      	ldr	r1, [r2, #8]
   c1724:	6880      	ldr	r0, [r0, #8]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c1726:	6917      	ldr	r7, [r2, #16]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1728:	2338      	movs	r3, #56	; 0x38
   c172a:	4359      	muls	r1, r3
   c172c:	9107      	str	r1, [sp, #28]
   c172e:	1841      	adds	r1, r0, r1
  if (use_tensor) {
   c1730:	1c7d      	adds	r5, r7, #1
  const int num_filters = weights_feature->dims->data[0];
   c1732:	6889      	ldr	r1, [r1, #8]
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1734:	bf18      	it	ne
   c1736:	fb03 0707 	mlane	r7, r3, r7, r0
  const int rank = params->rank;
   c173a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   c173e:	681d      	ldr	r5, [r3, #0]
  const int num_filters = weights_feature->dims->data[0];
   c1740:	684b      	ldr	r3, [r1, #4]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
   c1742:	fb93 f9f5 	sdiv	r9, r3, r5
   c1746:	fb05 3519 	mls	r5, r5, r9, r3
  return nullptr;
   c174a:	bf08      	it	eq
   c174c:	2700      	moveq	r7, #0
   c174e:	b175      	cbz	r5, c176e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
   c1750:	2300      	movs	r3, #0
   c1752:	e9cd 5302 	strd	r5, r3, [sp, #8]
   c1756:	4b8f      	ldr	r3, [pc, #572]	; (c1994 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
   c1758:	9301      	str	r3, [sp, #4]
   c175a:	4b8f      	ldr	r3, [pc, #572]	; (c1998 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
   c175c:	9300      	str	r3, [sp, #0]
   c175e:	6965      	ldr	r5, [r4, #20]
   c1760:	f240 134d 	movw	r3, #333	; 0x14d
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   c1764:	4a89      	ldr	r2, [pc, #548]	; (c198c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c1766:	498a      	ldr	r1, [pc, #552]	; (c1990 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c1768:	4620      	mov	r0, r4
   c176a:	47a8      	blx	r5
   c176c:	e7d4      	b.n	c1718 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c176e:	6855      	ldr	r5, [r2, #4]
   c1770:	f04f 0e38 	mov.w	lr, #56	; 0x38
   c1774:	fb0e f505 	mul.w	r5, lr, r5
   c1778:	1946      	adds	r6, r0, r5
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c177a:	5d45      	ldrb	r5, [r0, r5]
   c177c:	2d01      	cmp	r5, #1
   c177e:	d00a      	beq.n	c1796 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
   c1780:	2601      	movs	r6, #1
   c1782:	4b86      	ldr	r3, [pc, #536]	; (c199c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c1784:	9301      	str	r3, [sp, #4]
   c1786:	e9cd 5602 	strd	r5, r6, [sp, #8]
   c178a:	4b85      	ldr	r3, [pc, #532]	; (c19a0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
   c178c:	9300      	str	r3, [sp, #0]
   c178e:	6965      	ldr	r5, [r4, #20]
   c1790:	f44f 73a9 	mov.w	r3, #338	; 0x152
   c1794:	e7e6      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int input_size = input->dims->data[1];
   c1796:	68b6      	ldr	r6, [r6, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1798:	f8d6 a000 	ldr.w	sl, [r6]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
   c179c:	f1ba 0f02 	cmp.w	sl, #2
   c17a0:	d00e      	beq.n	c17c0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
   c17a2:	2302      	movs	r3, #2
   c17a4:	e9cd a302 	strd	sl, r3, [sp, #8]
   c17a8:	4b7e      	ldr	r3, [pc, #504]	; (c19a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c17aa:	9301      	str	r3, [sp, #4]
   c17ac:	4b7e      	ldr	r3, [pc, #504]	; (c19a8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
   c17ae:	9300      	str	r3, [sp, #0]
   c17b0:	6966      	ldr	r6, [r4, #20]
   c17b2:	f240 1353 	movw	r3, #339	; 0x153
  TF_LITE_ENSURE_EQ(context, output->type, kTfLiteFloat32);
   c17b6:	4a75      	ldr	r2, [pc, #468]	; (c198c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c17b8:	4975      	ldr	r1, [pc, #468]	; (c1990 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c17ba:	4620      	mov	r0, r4
   c17bc:	47b0      	blx	r6
   c17be:	e7ac      	b.n	c171a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   c17c0:	f8d1 c000 	ldr.w	ip, [r1]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
   c17c4:	f1bc 0f02 	cmp.w	ip, #2
   c17c8:	d009      	beq.n	c17de <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xf2>
   c17ca:	4b76      	ldr	r3, [pc, #472]	; (c19a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c17cc:	9301      	str	r3, [sp, #4]
   c17ce:	e9cd ca02 	strd	ip, sl, [sp, #8]
   c17d2:	4b76      	ldr	r3, [pc, #472]	; (c19ac <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   c17d4:	9300      	str	r3, [sp, #0]
   c17d6:	6966      	ldr	r6, [r4, #20]
   c17d8:	f44f 73ab 	mov.w	r3, #342	; 0x156
   c17dc:	e7eb      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  const int input_size = input->dims->data[1];
   c17de:	f8d6 a008 	ldr.w	sl, [r6, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   c17e2:	6889      	ldr	r1, [r1, #8]
   c17e4:	4551      	cmp	r1, sl
   c17e6:	d009      	beq.n	c17fc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x110>
   c17e8:	4b71      	ldr	r3, [pc, #452]	; (c19b0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   c17ea:	9301      	str	r3, [sp, #4]
   c17ec:	e9cd 1a02 	strd	r1, sl, [sp, #8]
   c17f0:	4b70      	ldr	r3, [pc, #448]	; (c19b4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   c17f2:	9300      	str	r3, [sp, #0]
   c17f4:	6966      	ldr	r6, [r4, #20]
   c17f6:	f240 1357 	movw	r3, #343	; 0x157
   c17fa:	e7dc      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c17fc:	68d1      	ldr	r1, [r2, #12]
   c17fe:	fb0e fe01 	mul.w	lr, lr, r1
   c1802:	eb00 010e 	add.w	r1, r0, lr
   c1806:	9105      	str	r1, [sp, #20]
  const int memory_size = weights_time->dims->data[1];
   c1808:	f8d1 a008 	ldr.w	sl, [r1, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c180c:	f8da 1000 	ldr.w	r1, [sl]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
   c1810:	2902      	cmp	r1, #2
   c1812:	d009      	beq.n	c1828 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
   c1814:	4b63      	ldr	r3, [pc, #396]	; (c19a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c1816:	9301      	str	r3, [sp, #4]
   c1818:	e9cd 1c02 	strd	r1, ip, [sp, #8]
   c181c:	4b66      	ldr	r3, [pc, #408]	; (c19b8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   c181e:	9300      	str	r3, [sp, #0]
   c1820:	6966      	ldr	r6, [r4, #20]
   c1822:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   c1826:	e7c6      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
   c1828:	f8da 1004 	ldr.w	r1, [sl, #4]
   c182c:	4299      	cmp	r1, r3
   c182e:	d009      	beq.n	c1844 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
   c1830:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c1834:	4b61      	ldr	r3, [pc, #388]	; (c19bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   c1836:	9301      	str	r3, [sp, #4]
   c1838:	4b61      	ldr	r3, [pc, #388]	; (c19c0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   c183a:	9300      	str	r3, [sp, #0]
   c183c:	6966      	ldr	r6, [r4, #20]
   c183e:	f240 135b 	movw	r3, #347	; 0x15b
   c1842:	e7b8      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  if (bias) {
   c1844:	b1df      	cbz	r7, c187e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
   c1846:	68b9      	ldr	r1, [r7, #8]
   c1848:	6849      	ldr	r1, [r1, #4]
   c184a:	4549      	cmp	r1, r9
   c184c:	d009      	beq.n	c1862 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x176>
   c184e:	4b5d      	ldr	r3, [pc, #372]	; (c19c4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   c1850:	9301      	str	r3, [sp, #4]
   c1852:	e9cd 1902 	strd	r1, r9, [sp, #8]
   c1856:	4b5c      	ldr	r3, [pc, #368]	; (c19c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   c1858:	9300      	str	r3, [sp, #0]
   c185a:	6966      	ldr	r6, [r4, #20]
   c185c:	f44f 73b0 	mov.w	r3, #352	; 0x160
   c1860:	e7a9      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
   c1862:	7839      	ldrb	r1, [r7, #0]
   c1864:	2901      	cmp	r1, #1
   c1866:	d00a      	beq.n	c187e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x192>
   c1868:	2301      	movs	r3, #1
   c186a:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c186e:	4b4b      	ldr	r3, [pc, #300]	; (c199c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c1870:	9301      	str	r3, [sp, #4]
   c1872:	4b56      	ldr	r3, [pc, #344]	; (c19cc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   c1874:	9300      	str	r3, [sp, #0]
   c1876:	6966      	ldr	r6, [r4, #20]
   c1878:	f240 1361 	movw	r3, #353	; 0x161
   c187c:	e79b      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
      &context->tensors[node->inputs->data[kInputActivationStateTensor]];
   c187e:	6951      	ldr	r1, [r2, #20]
   c1880:	f04f 0b38 	mov.w	fp, #56	; 0x38
   c1884:	fb0b f101 	mul.w	r1, fp, r1
  TfLiteTensor* activation_state =
   c1888:	eb00 0c01 	add.w	ip, r0, r1
  TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
   c188c:	5c47      	ldrb	r7, [r0, r1]
   c188e:	2f01      	cmp	r7, #1
   c1890:	d00a      	beq.n	c18a8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
   c1892:	2301      	movs	r3, #1
   c1894:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1898:	4b40      	ldr	r3, [pc, #256]	; (c199c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c189a:	9301      	str	r3, [sp, #4]
   c189c:	4b4c      	ldr	r3, [pc, #304]	; (c19d0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   c189e:	9300      	str	r3, [sp, #0]
   c18a0:	6966      	ldr	r6, [r4, #20]
   c18a2:	f240 1365 	movw	r3, #357	; 0x165
   c18a6:	e786      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c18a8:	f8dc 5008 	ldr.w	r5, [ip, #8]
   c18ac:	6829      	ldr	r1, [r5, #0]
   c18ae:	9106      	str	r1, [sp, #24]
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
   c18b0:	2902      	cmp	r1, #2
   c18b2:	d00a      	beq.n	c18ca <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1de>
   c18b4:	2302      	movs	r3, #2
   c18b6:	9303      	str	r3, [sp, #12]
   c18b8:	4b3a      	ldr	r3, [pc, #232]	; (c19a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c18ba:	9301      	str	r3, [sp, #4]
   c18bc:	4b45      	ldr	r3, [pc, #276]	; (c19d4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   c18be:	9300      	str	r3, [sp, #0]
   c18c0:	9102      	str	r1, [sp, #8]
   c18c2:	6965      	ldr	r5, [r4, #20]
   c18c4:	f44f 73b3 	mov.w	r3, #358	; 0x166
   c18c8:	e74c      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int batch_size = input->dims->data[0];
   c18ca:	6876      	ldr	r6, [r6, #4]
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
   c18cc:	f8d5 c004 	ldr.w	ip, [r5, #4]
   c18d0:	45b4      	cmp	ip, r6
   c18d2:	d009      	beq.n	c18e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
   c18d4:	4b40      	ldr	r3, [pc, #256]	; (c19d8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c18d6:	9301      	str	r3, [sp, #4]
   c18d8:	e9cd c602 	strd	ip, r6, [sp, #8]
   c18dc:	4b3f      	ldr	r3, [pc, #252]	; (c19dc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   c18de:	9300      	str	r3, [sp, #0]
   c18e0:	6965      	ldr	r5, [r4, #20]
   c18e2:	f240 1367 	movw	r3, #359	; 0x167
   c18e6:	e73d      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int memory_size = weights_time->dims->data[1];
   c18e8:	f8da 1008 	ldr.w	r1, [sl, #8]
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
   c18ec:	68ad      	ldr	r5, [r5, #8]
   c18ee:	fb01 fa03 	mul.w	sl, r1, r3
   c18f2:	4555      	cmp	r5, sl
   c18f4:	d009      	beq.n	c190a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x21e>
   c18f6:	4b3a      	ldr	r3, [pc, #232]	; (c19e0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c18f8:	9301      	str	r3, [sp, #4]
   c18fa:	e9cd 5a02 	strd	r5, sl, [sp, #8]
   c18fe:	4b39      	ldr	r3, [pc, #228]	; (c19e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c1900:	9300      	str	r3, [sp, #0]
   c1902:	6965      	ldr	r5, [r4, #20]
   c1904:	f44f 73b4 	mov.w	r3, #360	; 0x168
   c1908:	e72c      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TfLiteTensor* scratch_tensor = &context->tensors[node->inputs->data[5]];
   c190a:	6992      	ldr	r2, [r2, #24]
   c190c:	fb0b fb02 	mul.w	fp, fp, r2
   c1910:	eb00 020b 	add.w	r2, r0, fp
  TF_LITE_ENSURE_EQ(context, scratch_tensor->type, kTfLiteFloat32);
   c1914:	f810 500b 	ldrb.w	r5, [r0, fp]
   c1918:	2d01      	cmp	r5, #1
   c191a:	d009      	beq.n	c1930 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x244>
   c191c:	4b1f      	ldr	r3, [pc, #124]	; (c199c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c191e:	9301      	str	r3, [sp, #4]
   c1920:	e9cd 5702 	strd	r5, r7, [sp, #8]
   c1924:	4b30      	ldr	r3, [pc, #192]	; (c19e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   c1926:	9300      	str	r3, [sp, #0]
   c1928:	6965      	ldr	r5, [r4, #20]
   c192a:	f44f 73ba 	mov.w	r3, #372	; 0x174
   c192e:	e719      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
   c1930:	6892      	ldr	r2, [r2, #8]
   c1932:	6817      	ldr	r7, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_tensor), 2);
   c1934:	2f02      	cmp	r7, #2
   c1936:	d00a      	beq.n	c194e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x262>
   c1938:	9b06      	ldr	r3, [sp, #24]
   c193a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c193e:	4b19      	ldr	r3, [pc, #100]	; (c19a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c1940:	9301      	str	r3, [sp, #4]
   c1942:	4b2a      	ldr	r3, [pc, #168]	; (c19ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   c1944:	9300      	str	r3, [sp, #0]
   c1946:	6966      	ldr	r6, [r4, #20]
   c1948:	f240 1375 	movw	r3, #373	; 0x175
   c194c:	e733      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, scratch_tensor->dims->data[0], batch_size);
   c194e:	6857      	ldr	r7, [r2, #4]
   c1950:	4567      	cmp	r7, ip
   c1952:	d009      	beq.n	c1968 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>
   c1954:	4b20      	ldr	r3, [pc, #128]	; (c19d8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c1956:	9301      	str	r3, [sp, #4]
   c1958:	e9cd 7c02 	strd	r7, ip, [sp, #8]
   c195c:	4b24      	ldr	r3, [pc, #144]	; (c19f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   c195e:	9300      	str	r3, [sp, #0]
   c1960:	6966      	ldr	r6, [r4, #20]
   c1962:	f44f 73bb 	mov.w	r3, #374	; 0x176
   c1966:	e726      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, scratch_tensor->dims->data[1], num_filters);
   c1968:	6892      	ldr	r2, [r2, #8]
   c196a:	429a      	cmp	r2, r3
   c196c:	d044      	beq.n	c19f8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>
   c196e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1972:	4b12      	ldr	r3, [pc, #72]	; (c19bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   c1974:	9301      	str	r3, [sp, #4]
   c1976:	4b1f      	ldr	r3, [pc, #124]	; (c19f4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   c1978:	9300      	str	r3, [sp, #0]
   c197a:	6966      	ldr	r6, [r4, #20]
   c197c:	f240 1377 	movw	r3, #375	; 0x177
   c1980:	e719      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c1982:	bf00      	nop
   c1984:	000c6e40 	.word	0x000c6e40
   c1988:	000c8f26 	.word	0x000c8f26
   c198c:	000c8eb8 	.word	0x000c8eb8
   c1990:	000c6fd5 	.word	0x000c6fd5
   c1994:	000c6f6e 	.word	0x000c6f6e
   c1998:	000c8f39 	.word	0x000c8f39
   c199c:	000c8adb 	.word	0x000c8adb
   c19a0:	000c706b 	.word	0x000c706b
   c19a4:	000c8be4 	.word	0x000c8be4
   c19a8:	000c8979 	.word	0x000c8979
   c19ac:	000c8f4c 	.word	0x000c8f4c
   c19b0:	000c8f6b 	.word	0x000c8f6b
   c19b4:	000c8f76 	.word	0x000c8f76
   c19b8:	000c8f95 	.word	0x000c8f95
   c19bc:	000c904a 	.word	0x000c904a
   c19c0:	000c928f 	.word	0x000c928f
   c19c4:	000c8fb1 	.word	0x000c8fb1
   c19c8:	000c8fbb 	.word	0x000c8fbb
   c19cc:	000c8fcf 	.word	0x000c8fcf
   c19d0:	000c8fda 	.word	0x000c8fda
   c19d4:	000c8ff1 	.word	0x000c8ff1
   c19d8:	000c9011 	.word	0x000c9011
   c19dc:	000c901c 	.word	0x000c901c
   c19e0:	000c903c 	.word	0x000c903c
   c19e4:	000c9056 	.word	0x000c9056
   c19e8:	000c9076 	.word	0x000c9076
   c19ec:	000c908b 	.word	0x000c908b
   c19f0:	000c90a9 	.word	0x000c90a9
   c19f4:	000c90c7 	.word	0x000c90c7
  const bool is_hybrid_op = IsHybridOp(input, weights_feature);
   c19f8:	9a07      	ldr	r2, [sp, #28]
   c19fa:	5c87      	ldrb	r7, [r0, r2]
  return ((weight->type == kTfLiteUInt8 || weight->type == kTfLiteInt8) &&
   c19fc:	2f03      	cmp	r7, #3
   c19fe:	d013      	beq.n	c1a28 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>
   c1a00:	2f09      	cmp	r7, #9
   c1a02:	d011      	beq.n	c1a28 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   c1a04:	2f01      	cmp	r7, #1
   c1a06:	f040 80d9 	bne.w	c1bbc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4d0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
   c1a0a:	f810 300e 	ldrb.w	r3, [r0, lr]
   c1a0e:	2b01      	cmp	r3, #1
   c1a10:	f000 80c4 	beq.w	c1b9c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4b0>
   c1a14:	e9cd 3702 	strd	r3, r7, [sp, #8]
   c1a18:	4b8d      	ldr	r3, [pc, #564]	; (c1c50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1a1a:	9301      	str	r3, [sp, #4]
   c1a1c:	4b8d      	ldr	r3, [pc, #564]	; (c1c54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x568>)
   c1a1e:	9300      	str	r3, [sp, #0]
   c1a20:	6965      	ldr	r5, [r4, #20]
   c1a22:	f240 13b5 	movw	r3, #437	; 0x1b5
   c1a26:	e69d      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE(context, weights_time->type == kTfLiteUInt8 ||
   c1a28:	f810 200e 	ldrb.w	r2, [r0, lr]
   c1a2c:	2a03      	cmp	r2, #3
   c1a2e:	d00b      	beq.n	c1a48 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>
   c1a30:	2a09      	cmp	r2, #9
   c1a32:	d009      	beq.n	c1a48 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>
   c1a34:	4b88      	ldr	r3, [pc, #544]	; (c1c58 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x56c>)
   c1a36:	9300      	str	r3, [sp, #0]
   c1a38:	6966      	ldr	r6, [r4, #20]
   c1a3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
    TF_LITE_ENSURE(context, scratch_input_quantized->type == kTfLiteUInt8 ||
   c1a3e:	4a87      	ldr	r2, [pc, #540]	; (c1c5c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x570>)
   c1a40:	4987      	ldr	r1, [pc, #540]	; (c1c60 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x574>)
   c1a42:	4620      	mov	r0, r4
   c1a44:	47b0      	blx	r6
   c1a46:	e668      	b.n	c171a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_ENSURE_EQ(context, node->temporaries->size, 4);
   c1a48:	f8d8 c00c 	ldr.w	ip, [r8, #12]
   c1a4c:	f8dc 2000 	ldr.w	r2, [ip]
   c1a50:	2a04      	cmp	r2, #4
   c1a52:	d00a      	beq.n	c1a6a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x37e>
   c1a54:	2304      	movs	r3, #4
   c1a56:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1a5a:	4b82      	ldr	r3, [pc, #520]	; (c1c64 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x578>)
   c1a5c:	9301      	str	r3, [sp, #4]
   c1a5e:	4b82      	ldr	r3, [pc, #520]	; (c1c68 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x57c>)
   c1a60:	9300      	str	r3, [sp, #0]
   c1a62:	6966      	ldr	r6, [r4, #20]
   c1a64:	f44f 73c4 	mov.w	r3, #392	; 0x188
   c1a68:	e6a5      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
      node->temporaries->data[index])];
   c1a6a:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c1a6e:	2738      	movs	r7, #56	; 0x38
   c1a70:	437a      	muls	r2, r7
   c1a72:	1887      	adds	r7, r0, r2
    TF_LITE_ENSURE(context, scratch_input_quantized->type == kTfLiteUInt8 ||
   c1a74:	5c82      	ldrb	r2, [r0, r2]
   c1a76:	2a03      	cmp	r2, #3
   c1a78:	d007      	beq.n	c1a8a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39e>
   c1a7a:	2a09      	cmp	r2, #9
   c1a7c:	d005      	beq.n	c1a8a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39e>
   c1a7e:	4b7b      	ldr	r3, [pc, #492]	; (c1c6c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x580>)
   c1a80:	9300      	str	r3, [sp, #0]
   c1a82:	6966      	ldr	r6, [r4, #20]
   c1a84:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   c1a88:	e7d9      	b.n	c1a3e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x352>
    TF_LITE_ENSURE_EQ(context, scratch_input_quantized->dims->data[0],
   c1a8a:	68ba      	ldr	r2, [r7, #8]
   c1a8c:	6852      	ldr	r2, [r2, #4]
   c1a8e:	42b2      	cmp	r2, r6
   c1a90:	d009      	beq.n	c1aa6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ba>
   c1a92:	4b77      	ldr	r3, [pc, #476]	; (c1c70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1a94:	9301      	str	r3, [sp, #4]
   c1a96:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1a9a:	4b76      	ldr	r3, [pc, #472]	; (c1c74 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x588>)
   c1a9c:	9300      	str	r3, [sp, #0]
   c1a9e:	6966      	ldr	r6, [r4, #20]
   c1aa0:	f44f 73c8 	mov.w	r3, #400	; 0x190
   c1aa4:	e687      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c1aa6:	f8dc 200c 	ldr.w	r2, [ip, #12]
   c1aaa:	f04f 0e38 	mov.w	lr, #56	; 0x38
   c1aae:	fb0e f202 	mul.w	r2, lr, r2
   c1ab2:	eb00 0a02 	add.w	sl, r0, r2
    TF_LITE_ENSURE_EQ(context, scratch_scaling_factors->type, kTfLiteFloat32);
   c1ab6:	5c87      	ldrb	r7, [r0, r2]
   c1ab8:	2f01      	cmp	r7, #1
   c1aba:	d00a      	beq.n	c1ad2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
   c1abc:	2301      	movs	r3, #1
   c1abe:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1ac2:	4b63      	ldr	r3, [pc, #396]	; (c1c50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1ac4:	9301      	str	r3, [sp, #4]
   c1ac6:	4b6c      	ldr	r3, [pc, #432]	; (c1c78 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x58c>)
   c1ac8:	9300      	str	r3, [sp, #0]
   c1aca:	6966      	ldr	r6, [r4, #20]
   c1acc:	f44f 73ca 	mov.w	r3, #404	; 0x194
   c1ad0:	e671      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1ad2:	f8da 2008 	ldr.w	r2, [sl, #8]
   c1ad6:	f8d2 a000 	ldr.w	sl, [r2]
    TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_scaling_factors), 1);
   c1ada:	f1ba 0f01 	cmp.w	sl, #1
   c1ade:	d009      	beq.n	c1af4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x408>
   c1ae0:	4b66      	ldr	r3, [pc, #408]	; (c1c7c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x590>)
   c1ae2:	9301      	str	r3, [sp, #4]
   c1ae4:	e9cd a702 	strd	sl, r7, [sp, #8]
   c1ae8:	4b65      	ldr	r3, [pc, #404]	; (c1c80 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x594>)
   c1aea:	9300      	str	r3, [sp, #0]
   c1aec:	6965      	ldr	r5, [r4, #20]
   c1aee:	f240 1395 	movw	r3, #405	; 0x195
   c1af2:	e637      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_scaling_factors->dims->data[0],
   c1af4:	6852      	ldr	r2, [r2, #4]
   c1af6:	42b2      	cmp	r2, r6
   c1af8:	d009      	beq.n	c1b0e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x422>
   c1afa:	4b5d      	ldr	r3, [pc, #372]	; (c1c70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1afc:	9301      	str	r3, [sp, #4]
   c1afe:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1b02:	4b60      	ldr	r3, [pc, #384]	; (c1c84 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x598>)
   c1b04:	9300      	str	r3, [sp, #0]
   c1b06:	6965      	ldr	r5, [r4, #20]
   c1b08:	f44f 73cb 	mov.w	r3, #406	; 0x196
   c1b0c:	e62a      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
      node->temporaries->data[index])];
   c1b0e:	f8dc 2010 	ldr.w	r2, [ip, #16]
   c1b12:	fb0e f202 	mul.w	r2, lr, r2
   c1b16:	eb00 0c02 	add.w	ip, r0, r2
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->type,
   c1b1a:	5c87      	ldrb	r7, [r0, r2]
   c1b1c:	2f01      	cmp	r7, #1
   c1b1e:	d009      	beq.n	c1b34 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x448>
   c1b20:	4b4b      	ldr	r3, [pc, #300]	; (c1c50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1b22:	9301      	str	r3, [sp, #4]
   c1b24:	e9cd 7a02 	strd	r7, sl, [sp, #8]
   c1b28:	4b57      	ldr	r3, [pc, #348]	; (c1c88 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x59c>)
   c1b2a:	9300      	str	r3, [sp, #0]
   c1b2c:	6965      	ldr	r5, [r4, #20]
   c1b2e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   c1b32:	e617      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1b34:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c1b38:	6810      	ldr	r0, [r2, #0]
    TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_float_weights_time), 2);
   c1b3a:	2802      	cmp	r0, #2
   c1b3c:	d00a      	beq.n	c1b54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x468>
   c1b3e:	2302      	movs	r3, #2
   c1b40:	e9cd 0302 	strd	r0, r3, [sp, #8]
   c1b44:	4b51      	ldr	r3, [pc, #324]	; (c1c8c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a0>)
   c1b46:	9301      	str	r3, [sp, #4]
   c1b48:	4b51      	ldr	r3, [pc, #324]	; (c1c90 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a4>)
   c1b4a:	9300      	str	r3, [sp, #0]
   c1b4c:	6965      	ldr	r5, [r4, #20]
   c1b4e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   c1b52:	e607      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->dims->data[0],
   c1b54:	6850      	ldr	r0, [r2, #4]
   c1b56:	4298      	cmp	r0, r3
   c1b58:	d009      	beq.n	c1b6e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x482>
   c1b5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   c1b5e:	4b4d      	ldr	r3, [pc, #308]	; (c1c94 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
   c1b60:	9301      	str	r3, [sp, #4]
   c1b62:	4b4d      	ldr	r3, [pc, #308]	; (c1c98 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5ac>)
   c1b64:	9300      	str	r3, [sp, #0]
   c1b66:	6965      	ldr	r5, [r4, #20]
   c1b68:	f240 139d 	movw	r3, #413	; 0x19d
   c1b6c:	e5fa      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->dims->data[1],
   c1b6e:	6892      	ldr	r2, [r2, #8]
   c1b70:	428a      	cmp	r2, r1
   c1b72:	d009      	beq.n	c1b88 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x49c>
   c1b74:	4b49      	ldr	r3, [pc, #292]	; (c1c9c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b0>)
   c1b76:	9301      	str	r3, [sp, #4]
   c1b78:	e9cd 2102 	strd	r2, r1, [sp, #8]
   c1b7c:	4b48      	ldr	r3, [pc, #288]	; (c1ca0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
   c1b7e:	9300      	str	r3, [sp, #0]
   c1b80:	6965      	ldr	r5, [r4, #20]
   c1b82:	f240 139f 	movw	r3, #415	; 0x19f
   c1b86:	e5ed      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    SymmetricDequantize(weights_time_ptr,
   c1b88:	9805      	ldr	r0, [sp, #20]
   c1b8a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   c1b8e:	ed90 0a03 	vldr	s0, [r0, #12]
   c1b92:	6840      	ldr	r0, [r0, #4]
   c1b94:	fb83 1301 	smull	r1, r3, r3, r1
   c1b98:	f7f3 fd66 	bl	b5668 <_ZN6tflite19SymmetricDequantizeEPKaifPf>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   c1b9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c1ba0:	681a      	ldr	r2, [r3, #0]
   c1ba2:	2a01      	cmp	r2, #1
   c1ba4:	d015      	beq.n	c1bd2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e6>
   c1ba6:	2301      	movs	r3, #1
   c1ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1bac:	4b33      	ldr	r3, [pc, #204]	; (c1c7c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x590>)
   c1bae:	9301      	str	r3, [sp, #4]
   c1bb0:	4b3c      	ldr	r3, [pc, #240]	; (c1ca4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b8>)
   c1bb2:	9300      	str	r3, [sp, #0]
   c1bb4:	6966      	ldr	r6, [r4, #20]
   c1bb6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   c1bba:	e5fc      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   c1bbc:	2301      	movs	r3, #1
   c1bbe:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1bc2:	4b23      	ldr	r3, [pc, #140]	; (c1c50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1bc4:	9301      	str	r3, [sp, #4]
   c1bc6:	4b38      	ldr	r3, [pc, #224]	; (c1ca8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5bc>)
   c1bc8:	9300      	str	r3, [sp, #0]
   c1bca:	6966      	ldr	r6, [r4, #20]
   c1bcc:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   c1bd0:	e5f1      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1bd2:	685b      	ldr	r3, [r3, #4]
   c1bd4:	2138      	movs	r1, #56	; 0x38
   c1bd6:	434b      	muls	r3, r1
   c1bd8:	68a1      	ldr	r1, [r4, #8]
  TF_LITE_ENSURE_EQ(context, output->type, kTfLiteFloat32);
   c1bda:	5ccf      	ldrb	r7, [r1, r3]
   c1bdc:	2f01      	cmp	r7, #1
   c1bde:	eb01 0003 	add.w	r0, r1, r3
   c1be2:	d009      	beq.n	c1bf8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x50c>
   c1be4:	4b1a      	ldr	r3, [pc, #104]	; (c1c50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1be6:	9301      	str	r3, [sp, #4]
   c1be8:	e9cd 7202 	strd	r7, r2, [sp, #8]
   c1bec:	4b2f      	ldr	r3, [pc, #188]	; (c1cac <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c0>)
   c1bee:	9300      	str	r3, [sp, #0]
   c1bf0:	6966      	ldr	r6, [r4, #20]
   c1bf2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   c1bf6:	e5de      	b.n	c17b6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1bf8:	6883      	ldr	r3, [r0, #8]
   c1bfa:	681a      	ldr	r2, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
   c1bfc:	2a02      	cmp	r2, #2
   c1bfe:	d00a      	beq.n	c1c16 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x52a>
   c1c00:	2302      	movs	r3, #2
   c1c02:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1c06:	4b21      	ldr	r3, [pc, #132]	; (c1c8c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a0>)
   c1c08:	9301      	str	r3, [sp, #4]
   c1c0a:	4b29      	ldr	r3, [pc, #164]	; (c1cb0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c4>)
   c1c0c:	9300      	str	r3, [sp, #0]
   c1c0e:	6965      	ldr	r5, [r4, #20]
   c1c10:	f240 13c3 	movw	r3, #451	; 0x1c3
   c1c14:	e5a6      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
   c1c16:	685a      	ldr	r2, [r3, #4]
   c1c18:	42b2      	cmp	r2, r6
   c1c1a:	d009      	beq.n	c1c30 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>
   c1c1c:	4b14      	ldr	r3, [pc, #80]	; (c1c70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1c1e:	9301      	str	r3, [sp, #4]
   c1c20:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1c24:	4b23      	ldr	r3, [pc, #140]	; (c1cb4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c8>)
   c1c26:	9300      	str	r3, [sp, #0]
   c1c28:	6965      	ldr	r5, [r4, #20]
   c1c2a:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   c1c2e:	e599      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   c1c30:	689b      	ldr	r3, [r3, #8]
   c1c32:	454b      	cmp	r3, r9
   c1c34:	d009      	beq.n	c1c4a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x55e>
   c1c36:	e9cd 3902 	strd	r3, r9, [sp, #8]
   c1c3a:	4b1f      	ldr	r3, [pc, #124]	; (c1cb8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5cc>)
   c1c3c:	9301      	str	r3, [sp, #4]
   c1c3e:	4b1f      	ldr	r3, [pc, #124]	; (c1cbc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5d0>)
   c1c40:	9300      	str	r3, [sp, #0]
   c1c42:	6965      	ldr	r5, [r4, #20]
   c1c44:	f240 13c5 	movw	r3, #453	; 0x1c5
   c1c48:	e58c      	b.n	c1764 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  return kTfLiteOk;
   c1c4a:	2500      	movs	r5, #0
   c1c4c:	e565      	b.n	c171a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   c1c4e:	bf00      	nop
   c1c50:	000c8adb 	.word	0x000c8adb
   c1c54:	000c9244 	.word	0x000c9244
   c1c58:	000c90e5 	.word	0x000c90e5
   c1c5c:	000c8eb8 	.word	0x000c8eb8
   c1c60:	000c6f40 	.word	0x000c6f40
   c1c64:	000c83c0 	.word	0x000c83c0
   c1c68:	000c912d 	.word	0x000c912d
   c1c6c:	000c9145 	.word	0x000c9145
   c1c70:	000c9011 	.word	0x000c9011
   c1c74:	000c91a3 	.word	0x000c91a3
   c1c78:	000c91ca 	.word	0x000c91ca
   c1c7c:	000c8aca 	.word	0x000c8aca
   c1c80:	000c91e8 	.word	0x000c91e8
   c1c84:	000c920f 	.word	0x000c920f
   c1c88:	000c9236 	.word	0x000c9236
   c1c8c:	000c8be4 	.word	0x000c8be4
   c1c90:	000c9257 	.word	0x000c9257
   c1c94:	000c904a 	.word	0x000c904a
   c1c98:	000c9281 	.word	0x000c9281
   c1c9c:	000c92ab 	.word	0x000c92ab
   c1ca0:	000c92b7 	.word	0x000c92b7
   c1ca4:	000c8843 	.word	0x000c8843
   c1ca8:	000c92e1 	.word	0x000c92e1
   c1cac:	000c8464 	.word	0x000c8464
   c1cb0:	000c92f7 	.word	0x000c92f7
   c1cb4:	000c930d 	.word	0x000c930d
   c1cb8:	000c8fb1 	.word	0x000c8fb1
   c1cbc:	000c9323 	.word	0x000c9323

000c1cc0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1cc4:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1cc8:	f8d1 e000 	ldr.w	lr, [r1]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   c1ccc:	694b      	ldr	r3, [r1, #20]
   c1cce:	f8d0 c008 	ldr.w	ip, [r0, #8]
   c1cd2:	f8de 2008 	ldr.w	r2, [lr, #8]
   c1cd6:	f8de 6004 	ldr.w	r6, [lr, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1cda:	b097      	sub	sp, #92	; 0x5c
   c1cdc:	4605      	mov	r5, r0
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   c1cde:	930a      	str	r3, [sp, #40]	; 0x28
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c1ce0:	f8de 3010 	ldr.w	r3, [lr, #16]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1ce4:	2038      	movs	r0, #56	; 0x38
  if (use_tensor) {
   c1ce6:	1c5c      	adds	r4, r3, #1
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1ce8:	bf14      	ite	ne
   c1cea:	fb00 c303 	mlane	r3, r0, r3, ip
  return nullptr;
   c1cee:	2300      	moveq	r3, #0
   c1cf0:	930d      	str	r3, [sp, #52]	; 0x34
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  // TODO(kreeger): Use input tensor as variable until scratch tensor allocation
  // has been implemented (cl/263032056)
  // TfLiteTensor* scratch = GetTemporary(context, node, /*index=*/0);
  TfLiteTensor* scratch = &context->tensors[node->inputs->data[5]];
   c1cf2:	f8de 3018 	ldr.w	r3, [lr, #24]

  TfLiteTensor* activation_state =
      &context->tensors[node->inputs->data[kInputActivationStateTensor]];
   c1cf6:	f8de 4014 	ldr.w	r4, [lr, #20]
  TfLiteTensor* scratch = &context->tensors[node->inputs->data[5]];
   c1cfa:	fb00 c303 	mla	r3, r0, r3, ip
   c1cfe:	930f      	str	r3, [sp, #60]	; 0x3c
  TfLiteTensor* activation_state =
   c1d00:	fb00 c304 	mla	r3, r0, r4, ip
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d04:	4342      	muls	r2, r0
   c1d06:	9309      	str	r3, [sp, #36]	; 0x24
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d08:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d0a:	eb0c 0702 	add.w	r7, ip, r2
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d0e:	685b      	ldr	r3, [r3, #4]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (weights_feature->type) {
   c1d10:	f81c 2002 	ldrb.w	r2, [ip, r2]
   c1d14:	fb00 c303 	mla	r3, r0, r3, ip
   c1d18:	2a03      	cmp	r2, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d1a:	fb00 c606 	mla	r6, r0, r6, ip
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d1e:	930e      	str	r3, [sp, #56]	; 0x38
   c1d20:	f000 80a0 	beq.w	c1e64 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   c1d24:	2a09      	cmp	r2, #9
   c1d26:	f000 809d 	beq.w	c1e64 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   c1d2a:	2a01      	cmp	r2, #1
   c1d2c:	f040 816d 	bne.w	c200a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x34a>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d30:	f8de 300c 	ldr.w	r3, [lr, #12]
   c1d34:	fb00 c303 	mla	r3, r0, r3, ip
   c1d38:	930c      	str	r3, [sp, #48]	; 0x30
  const int rank = params->rank;
   c1d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const int memory_size = weights_time->dims->data[1];
   c1d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
  const int rank = params->rank;
   c1d3e:	681b      	ldr	r3, [r3, #0]
   c1d40:	9310      	str	r3, [sp, #64]	; 0x40
  const int batch_size = input->dims->data[0];
   c1d42:	68b3      	ldr	r3, [r6, #8]
  const int memory_size = weights_time->dims->data[1];
   c1d44:	6889      	ldr	r1, [r1, #8]
  const int input_size = input->dims->data[1];
   c1d46:	e9d3 a301 	ldrd	sl, r3, [r3, #4]
   c1d4a:	930b      	str	r3, [sp, #44]	; 0x2c
  const int num_filters = weights_feature->dims->data[0];
   c1d4c:	68bb      	ldr	r3, [r7, #8]
  const int memory_size = weights_time->dims->data[1];
   c1d4e:	6889      	ldr	r1, [r1, #8]
  const int num_filters = weights_feature->dims->data[0];
   c1d50:	685a      	ldr	r2, [r3, #4]
  const int num_units = num_filters / rank;
   c1d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1d54:	fb92 f3f3 	sdiv	r3, r2, r3
  for (int b = 0; b < batch_size; ++b) {
   c1d58:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   c1d5c:	fb01 fe02 	mul.w	lr, r1, r2
   c1d60:	3801      	subs	r0, #1
   c1d62:	ea4f 0b81 	mov.w	fp, r1, lsl #2
   c1d66:	f04f 0c00 	mov.w	ip, #0
      state_ptr[memory_size - 1] = 0.0f;
   c1d6a:	f04f 0900 	mov.w	r9, #0
  for (int b = 0; b < batch_size; ++b) {
   c1d6e:	45e2      	cmp	sl, ip
   c1d70:	dd17      	ble.n	c1da2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
   c1d72:	9c09      	ldr	r4, [sp, #36]	; 0x24
   c1d74:	b174      	cbz	r4, c1d94 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   c1d76:	f8d4 8004 	ldr.w	r8, [r4, #4]
    for (int c = 0; c < num_filters; ++c) {
   c1d7a:	1c45      	adds	r5, r0, #1
   c1d7c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   c1d80:	f04f 0800 	mov.w	r8, #0
   c1d84:	4542      	cmp	r2, r8
   c1d86:	dd08      	ble.n	c1d9a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xda>
      state_ptr[memory_size - 1] = 0.0f;
   c1d88:	f845 9c04 	str.w	r9, [r5, #-4]
    for (int c = 0; c < num_filters; ++c) {
   c1d8c:	f108 0801 	add.w	r8, r8, #1
   c1d90:	445d      	add	r5, fp
   c1d92:	e7f7      	b.n	c1d84 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   c1d94:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   c1d98:	e7ef      	b.n	c1d7a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xba>
  for (int b = 0; b < batch_size; ++b) {
   c1d9a:	f10c 0c01 	add.w	ip, ip, #1
   c1d9e:	4470      	add	r0, lr
   c1da0:	e7e5      	b.n	c1d6e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xae>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1da2:	6878      	ldr	r0, [r7, #4]
   c1da4:	9012      	str	r0, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1da6:	9809      	ldr	r0, [sp, #36]	; 0x24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1da8:	6875      	ldr	r5, [r6, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1daa:	b378      	cbz	r0, c1e0c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
   c1dac:	6840      	ldr	r0, [r0, #4]
  float* result = &GetTensorData<float>(activation_state)[memory_size - 1];
   c1dae:	f1ab 0604 	sub.w	r6, fp, #4
   c1db2:	4430      	add	r0, r6
  for (int i = 0; i < batch_size; ++i) {
   c1db4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   c1db6:	00b6      	lsls	r6, r6, #2
   c1db8:	9614      	str	r6, [sp, #80]	; 0x50
   c1dba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   c1dbc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   c1dc0:	00b6      	lsls	r6, r6, #2
   c1dc2:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
   c1dc6:	9613      	str	r6, [sp, #76]	; 0x4c
   c1dc8:	fb0b f60c 	mul.w	r6, fp, ip
   c1dcc:	9615      	str	r6, [sp, #84]	; 0x54
   c1dce:	2700      	movs	r7, #0
   c1dd0:	45ba      	cmp	sl, r7
   c1dd2:	dd2f      	ble.n	c1e34 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x174>
    const float* matrix_ptr = matrix;
   c1dd4:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
      const float* vector_in_batch = vector + i * input_size;
   c1dd8:	4606      	mov	r6, r0
    for (int j = 0; j < num_filters; ++j) {
   c1dda:	f04f 0e00 	mov.w	lr, #0
   c1dde:	4572      	cmp	r2, lr
   c1de0:	dd22      	ble.n	c1e28 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x168>
      float dot_prod = 0.0f;
   c1de2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; c2020 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x360>
   c1de6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      const float* vector_in_batch = vector + i * input_size;
   c1dea:	46ac      	mov	ip, r5
      for (int k = 0; k < input_size; ++k) {
   c1dec:	f04f 0900 	mov.w	r9, #0
   c1df0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c1df2:	454c      	cmp	r4, r9
   c1df4:	dd0c      	ble.n	c1e10 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
        dot_prod += *matrix_ptr++ * *vector_in_batch++;
   c1df6:	9c11      	ldr	r4, [sp, #68]	; 0x44
   c1df8:	ecfc 7a01 	vldmia	ip!, {s15}
   c1dfc:	ecf4 6a01 	vldmia	r4!, {s13}
      for (int k = 0; k < input_size; ++k) {
   c1e00:	f109 0901 	add.w	r9, r9, #1
        dot_prod += *matrix_ptr++ * *vector_in_batch++;
   c1e04:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c1e08:	9411      	str	r4, [sp, #68]	; 0x44
      for (int k = 0; k < input_size; ++k) {
   c1e0a:	e7f1      	b.n	c1df0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x130>
   c1e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   c1e0e:	e7ce      	b.n	c1dae <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
      *result_in_batch += dot_prod;
   c1e10:	edd6 7a00 	vldr	s15, [r6]
   c1e14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   c1e16:	ee77 7a87 	vadd.f32	s15, s15, s14
   c1e1a:	44a0      	add	r8, r4
   c1e1c:	edc6 7a00 	vstr	s15, [r6]
    for (int j = 0; j < num_filters; ++j) {
   c1e20:	f10e 0e01 	add.w	lr, lr, #1
      result_in_batch += memory_size;
   c1e24:	445e      	add	r6, fp
    for (int j = 0; j < num_filters; ++j) {
   c1e26:	e7da      	b.n	c1dde <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x11e>
   c1e28:	9c15      	ldr	r4, [sp, #84]	; 0x54
   c1e2a:	4420      	add	r0, r4
  for (int i = 0; i < batch_size; ++i) {
   c1e2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   c1e2e:	3701      	adds	r7, #1
   c1e30:	4425      	add	r5, r4
   c1e32:	e7cd      	b.n	c1dd0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x110>
  ApplyTimeWeightsBiasAndActivation(
   c1e34:	980e      	ldr	r0, [sp, #56]	; 0x38
   c1e36:	9006      	str	r0, [sp, #24]
   c1e38:	980f      	ldr	r0, [sp, #60]	; 0x3c
   c1e3a:	9005      	str	r0, [sp, #20]
   c1e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   c1e3e:	9004      	str	r0, [sp, #16]
   c1e40:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1e42:	7900      	ldrb	r0, [r0, #4]
   c1e44:	9003      	str	r0, [sp, #12]
   c1e46:	980d      	ldr	r0, [sp, #52]	; 0x34
   c1e48:	9002      	str	r0, [sp, #8]
   c1e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   c1e4c:	9001      	str	r0, [sp, #4]
   c1e4e:	9810      	ldr	r0, [sp, #64]	; 0x40
   c1e50:	9000      	str	r0, [sp, #0]
   c1e52:	4650      	mov	r0, sl
  ApplyTimeWeightsBiasAndActivation(
   c1e54:	f7ff fb34 	bl	c14c0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_>
      TfLiteTensor* scratch_float_weights_time = GetTemporary(context, node, 3);
      EvalHybridSVDF(context, node, input, weights_feature,
                     scratch_float_weights_time, bias, params, scratch,
                     scratch_scaling_factors, scratch_input_quantized,
                     activation_state, output);
      return kTfLiteOk;
   c1e58:	2000      	movs	r0, #0
      context->ReportError(context, "Type %s not currently supported.",
                           TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   c1e5a:	b017      	add	sp, #92	; 0x5c
   c1e5c:	ecbd 8b02 	vpop	{d8}
   c1e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node->temporaries->data[index])];
   c1e64:	68c8      	ldr	r0, [r1, #12]
   c1e66:	68c3      	ldr	r3, [r0, #12]
   c1e68:	6885      	ldr	r5, [r0, #8]
   c1e6a:	2138      	movs	r1, #56	; 0x38
   c1e6c:	fb01 c803 	mla	r8, r1, r3, ip
   c1e70:	6903      	ldr	r3, [r0, #16]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1e72:	6870      	ldr	r0, [r6, #4]
   c1e74:	fb01 c303 	mla	r3, r1, r3, ip
   c1e78:	9310      	str	r3, [sp, #64]	; 0x40
  const int rank = params->rank;
   c1e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1e7c:	681b      	ldr	r3, [r3, #0]
   c1e7e:	9311      	str	r3, [sp, #68]	; 0x44
  const int batch_size = input->dims->data[0];
   c1e80:	68b3      	ldr	r3, [r6, #8]
  const int input_size = input->dims->data[1];
   c1e82:	e9d3 9301 	ldrd	r9, r3, [r3, #4]
   c1e86:	930b      	str	r3, [sp, #44]	; 0x2c
  const int num_filters = weights_feature->dims->data[0];
   c1e88:	68bb      	ldr	r3, [r7, #8]
   c1e8a:	f8d3 b004 	ldr.w	fp, [r3, #4]
  const int num_units = num_filters / rank;
   c1e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c1e90:	fb9b f3f3 	sdiv	r3, fp, r3
   c1e94:	ee08 3a90 	vmov	s17, r3
  const int memory_size = weights_time->dims->data[1];
   c1e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1e9a:	689b      	ldr	r3, [r3, #8]
   c1e9c:	fb01 c505 	mla	r5, r1, r5, ip
   c1ea0:	f8d3 a008 	ldr.w	sl, [r3, #8]
  if (weights_feature->type == kTfLiteUInt8) {
   c1ea4:	687b      	ldr	r3, [r7, #4]
   c1ea6:	9314      	str	r3, [sp, #80]	; 0x50
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1ea8:	b105      	cbz	r5, c1eac <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
   c1eaa:	686d      	ldr	r5, [r5, #4]
   c1eac:	f1b8 0f00 	cmp.w	r8, #0
   c1eb0:	d001      	beq.n	c1eb6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   c1eb2:	f8d8 8004 	ldr.w	r8, [r8, #4]
  const float weights_feature_scale = weights_feature->params.scale;
   c1eb6:	ed97 8a03 	vldr	s16, [r7, #12]
  for (int b = 0; b < batch_size; ++b) {
   c1eba:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   c1ebe:	ea4f 028a 	mov.w	r2, sl, lsl #2
   c1ec2:	fb0a f70b 	mul.w	r7, sl, fp
   c1ec6:	3b01      	subs	r3, #1
   c1ec8:	920c      	str	r2, [sp, #48]	; 0x30
   c1eca:	2100      	movs	r1, #0
      state_ptr[memory_size - 1] = 0.0;
   c1ecc:	f04f 0e00 	mov.w	lr, #0
  for (int b = 0; b < batch_size; ++b) {
   c1ed0:	4589      	cmp	r9, r1
   c1ed2:	dc13      	bgt.n	c1efc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x23c>
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1ed6:	4601      	mov	r1, r0
   c1ed8:	fb03 f709 	mul.w	r7, r3, r9
   c1edc:	2200      	movs	r2, #0
  bool is_zero_vector = true;
   c1ede:	2301      	movs	r3, #1
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1ee0:	4297      	cmp	r7, r2
   c1ee2:	dd23      	ble.n	c1f2c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x26c>
   c1ee4:	b323      	cbz	r3, c1f30 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x270>
    if (input_ptr_batch[i] != 0.0f) {
   c1ee6:	ecf1 7a01 	vldmia	r1!, {s15}
   c1eea:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1ef2:	bf0c      	ite	eq
   c1ef4:	2301      	moveq	r3, #1
   c1ef6:	2300      	movne	r3, #0
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1ef8:	3201      	adds	r2, #1
   c1efa:	e7f1      	b.n	c1ee0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x220>
   c1efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c1efe:	b17a      	cbz	r2, c1f20 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x260>
   c1f00:	f8d2 c004 	ldr.w	ip, [r2, #4]
    for (int c = 0; c < num_filters; ++c) {
   c1f04:	1c5a      	adds	r2, r3, #1
   c1f06:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   c1f0a:	f04f 0c00 	mov.w	ip, #0
   c1f0e:	45e3      	cmp	fp, ip
   c1f10:	dd09      	ble.n	c1f26 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x266>
      state_ptr[memory_size - 1] = 0.0;
   c1f12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1f14:	f842 ec04 	str.w	lr, [r2, #-4]
    for (int c = 0; c < num_filters; ++c) {
   c1f18:	f10c 0c01 	add.w	ip, ip, #1
   c1f1c:	4422      	add	r2, r4
   c1f1e:	e7f6      	b.n	c1f0e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
   c1f20:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   c1f24:	e7ee      	b.n	c1f04 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x244>
  for (int b = 0; b < batch_size; ++b) {
   c1f26:	3101      	adds	r1, #1
   c1f28:	443b      	add	r3, r7
   c1f2a:	e7d1      	b.n	c1ed0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x210>
  if (!is_zero_vector) {
   c1f2c:	2b00      	cmp	r3, #0
   c1f2e:	d157      	bne.n	c1fe0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x320>
    SignedSymmetricPerChannelQuantize(input_ptr_batch, input->dims, 0,
   c1f30:	f8cd 8000 	str.w	r8, [sp]
   c1f34:	68b1      	ldr	r1, [r6, #8]
   c1f36:	462b      	mov	r3, r5
   c1f38:	2200      	movs	r2, #0
   c1f3a:	f7f3 fb03 	bl	b5544 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf>
    for (int b = 0; b < batch_size; ++b) {
   c1f3e:	4643      	mov	r3, r8
    SignedSymmetricPerChannelQuantize(input_ptr_batch, input->dims, 0,
   c1f40:	4641      	mov	r1, r8
    for (int b = 0; b < batch_size; ++b) {
   c1f42:	2200      	movs	r2, #0
   c1f44:	4591      	cmp	r9, r2
   c1f46:	dd07      	ble.n	c1f58 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x298>
      scaling_factors_ptr[b] *= weights_feature_scale;
   c1f48:	edd1 7a00 	vldr	s15, [r1]
   c1f4c:	ee68 7a27 	vmul.f32	s15, s16, s15
    for (int b = 0; b < batch_size; ++b) {
   c1f50:	3201      	adds	r2, #1
      scaling_factors_ptr[b] *= weights_feature_scale;
   c1f52:	ece1 7a01 	vstmia	r1!, {s15}
    for (int b = 0; b < batch_size; ++b) {
   c1f56:	e7f5      	b.n	c1f44 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x284>
   c1f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c1f5a:	b342      	cbz	r2, c1fae <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
   c1f5c:	6852      	ldr	r2, [r2, #4]
    float* result = &GetTensorData<float>(activation_state)[memory_size - 1];
   c1f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   c1f60:	3904      	subs	r1, #4
   c1f62:	440a      	add	r2, r1
    for (int i = 0; i < batch_size;
   c1f64:	990c      	ldr	r1, [sp, #48]	; 0x30
   c1f66:	ea2b 7ceb 	bic.w	ip, fp, fp, asr #31
   c1f6a:	fb01 f10c 	mul.w	r1, r1, ip
   c1f6e:	9112      	str	r1, [sp, #72]	; 0x48
   c1f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c1f72:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   c1f76:	2700      	movs	r7, #0
   c1f78:	9115      	str	r1, [sp, #84]	; 0x54
   c1f7a:	45b9      	cmp	r9, r7
   c1f7c:	dd30      	ble.n	c1fe0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x320>
      const float batch_scaling_factor = scaling_factors_ptr[i];
   c1f7e:	ecf3 6a01 	vldmia	r3!, {s13}
      const int8_t* row_ptr = weights_feature_ptr;
   c1f82:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
      const float batch_scaling_factor = scaling_factors_ptr[i];
   c1f86:	4616      	mov	r6, r2
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c1f88:	f04f 0e00 	mov.w	lr, #0
   c1f8c:	45f3      	cmp	fp, lr
   c1f8e:	dd21      	ble.n	c1fd4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x314>
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c1f90:	2100      	movs	r1, #0
        int32_t dotprod = 0;
   c1f92:	4608      	mov	r0, r1
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c1f94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c1f96:	428c      	cmp	r4, r1
   c1f98:	dd0b      	ble.n	c1fb2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
          dotprod += (*row_ptr) * (quantized_input_ptr_batch[k]);
   c1f9a:	f918 4001 	ldrsb.w	r4, [r8, r1]
   c1f9e:	46a4      	mov	ip, r4
   c1fa0:	566c      	ldrsb	r4, [r5, r1]
   c1fa2:	9413      	str	r4, [sp, #76]	; 0x4c
   c1fa4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c1fa6:	3101      	adds	r1, #1
          dotprod += (*row_ptr) * (quantized_input_ptr_batch[k]);
   c1fa8:	fb1c 0004 	smlabb	r0, ip, r4, r0
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c1fac:	e7f2      	b.n	c1f94 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
   c1fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c1fb0:	e7d5      	b.n	c1f5e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
        *result += dotprod * batch_scaling_factor;
   c1fb2:	ee07 0a90 	vmov	s15, r0
   c1fb6:	ed96 7a00 	vldr	s14, [r6]
   c1fba:	9915      	ldr	r1, [sp, #84]	; 0x54
   c1fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c1fc0:	4488      	add	r8, r1
   c1fc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c1fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
   c1fc8:	f10e 0e01 	add.w	lr, lr, #1
        *result += dotprod * batch_scaling_factor;
   c1fcc:	ed86 7a00 	vstr	s14, [r6]
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c1fd0:	440e      	add	r6, r1
   c1fd2:	e7db      	b.n	c1f8c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
   c1fd4:	9912      	ldr	r1, [sp, #72]	; 0x48
   c1fd6:	440a      	add	r2, r1
         ++i, quantized_input_ptr_batch += input_size) {
   c1fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    for (int i = 0; i < batch_size;
   c1fda:	3701      	adds	r7, #1
         ++i, quantized_input_ptr_batch += input_size) {
   c1fdc:	440d      	add	r5, r1
    for (int i = 0; i < batch_size;
   c1fde:	e7cc      	b.n	c1f7a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
  ApplyTimeWeightsBiasAndActivation(
   c1fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c1fe2:	9306      	str	r3, [sp, #24]
   c1fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c1fe6:	9305      	str	r3, [sp, #20]
   c1fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c1fea:	9304      	str	r3, [sp, #16]
   c1fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1fee:	791b      	ldrb	r3, [r3, #4]
   c1ff0:	9303      	str	r3, [sp, #12]
   c1ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1ff4:	9302      	str	r3, [sp, #8]
   c1ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1ff8:	9301      	str	r3, [sp, #4]
   c1ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c1ffc:	9300      	str	r3, [sp, #0]
   c1ffe:	465a      	mov	r2, fp
   c2000:	ee18 3a90 	vmov	r3, s17
   c2004:	4651      	mov	r1, sl
   c2006:	4648      	mov	r0, r9
   c2008:	e724      	b.n	c1e54 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x194>
      context->ReportError(context, "Type %s not currently supported.",
   c200a:	4610      	mov	r0, r2
   c200c:	696c      	ldr	r4, [r5, #20]
   c200e:	f7f2 fdb9 	bl	b4b84 <TfLiteTypeGetName>
   c2012:	4904      	ldr	r1, [pc, #16]	; (c2024 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
   c2014:	4602      	mov	r2, r0
   c2016:	4628      	mov	r0, r5
   c2018:	47a0      	blx	r4
      return kTfLiteError;
   c201a:	2001      	movs	r0, #1
   c201c:	e71d      	b.n	c1e5a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x19a>
   c201e:	bf00      	nop
   c2020:	00000000 	.word	0x00000000
   c2024:	000c8616 	.word	0x000c8616

000c2028 <_ZN6tflite3ops5micro13Register_SVDFEv>:

TfLiteRegistration* Register_SVDF() {
  static TfLiteRegistration r = {svdf::Init, svdf::Free, svdf::Prepare,
                                 svdf::Eval};
  return &r;
}
   c2028:	4800      	ldr	r0, [pc, #0]	; (c202c <_ZN6tflite3ops5micro13Register_SVDFEv+0x4>)
   c202a:	4770      	bx	lr
   c202c:	2003c578 	.word	0x2003c578

000c2030 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c2030:	2000      	movs	r0, #0
   c2032:	4770      	bx	lr

000c2034 <_ZN6tflite3ops5micro14depthwise_conv4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c2034:	4770      	bx	lr

000c2036 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c2036:	2000      	movs	r0, #0
   c2038:	4770      	bx	lr

000c203a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   c203a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c203e:	b0a1      	sub	sp, #132	; 0x84
   c2040:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   c2042:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c2046:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   c2048:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c204c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   c204e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c2052:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   c2054:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c2058:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   c205a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c205e:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   c2060:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c2064:	9313      	str	r3, [sp, #76]	; 0x4c
  const int depth_multiplier = params.depth_multiplier;
   c2066:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c206a:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   c206c:	6943      	ldr	r3, [r0, #20]
   c206e:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   c2070:	69c3      	ldr	r3, [r0, #28]
   c2072:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   c2074:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c2076:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   c2078:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c207a:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c207c:	f8d9 3000 	ldr.w	r3, [r9]
    int8* output_data) {
   c2080:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   c2082:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2084:	2b04      	cmp	r3, #4
    int8* output_data) {
   c2086:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c208a:	d001      	beq.n	c2090 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   c208c:	f002 fbb6 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c2090:	6833      	ldr	r3, [r6, #0]
   c2092:	2b04      	cmp	r3, #4
   c2094:	d1fa      	bne.n	c208c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c2096:	683b      	ldr	r3, [r7, #0]
   c2098:	2b04      	cmp	r3, #4
   c209a:	d1f7      	bne.n	c208c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c209c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   c20a0:	4293      	cmp	r3, r2
   c20a2:	dcf3      	bgt.n	c208c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c20a4:	2300      	movs	r3, #0
   c20a6:	4619      	mov	r1, r3
   c20a8:	463a      	mov	r2, r7
   c20aa:	4648      	mov	r0, r9
   c20ac:	f7f6 fe39 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c20b0:	2303      	movs	r3, #3
   c20b2:	4619      	mov	r1, r3
   c20b4:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c20b6:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c20b8:	4630      	mov	r0, r6
   c20ba:	f7f6 fe32 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c20be:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c20c0:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   c20c2:	4648      	mov	r0, r9
   c20c4:	f7f4 f948 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c20c8:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c20ca:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   c20cc:	4648      	mov	r0, r9
   c20ce:	f7f4 f943 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c20d2:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c20d4:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   c20d6:	4648      	mov	r0, r9
   c20d8:	f7f4 f93e 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c20dc:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c20de:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   c20e0:	4630      	mov	r0, r6
   c20e2:	f7f4 f939 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c20e6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c20e8:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   c20ea:	4630      	mov	r0, r6
   c20ec:	f7f4 f934 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c20f0:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c20f2:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   c20f4:	4638      	mov	r0, r7
   c20f6:	f7f4 f92f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c20fa:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c20fc:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   c20fe:	4638      	mov	r0, r7
   c2100:	f7f4 f92a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2104:	9b08      	ldr	r3, [sp, #32]
   c2106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   c2108:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c210a:	fb02 f503 	mul.w	r5, r2, r3
   c210e:	42a5      	cmp	r5, r4
   c2110:	d1bc      	bne.n	c208c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c2112:	982d      	ldr	r0, [sp, #180]	; 0xb4
   c2114:	f7f8 f907 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c2118:	42a8      	cmp	r0, r5
   c211a:	d1b7      	bne.n	c208c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   c211c:	f04f 0b00 	mov.w	fp, #0
   c2120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2122:	459b      	cmp	fp, r3
   c2124:	f280 80a1 	bge.w	c226a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x230>
   c2128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c212a:	425b      	negs	r3, r3
   c212c:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c212e:	2300      	movs	r3, #0
   c2130:	9303      	str	r3, [sp, #12]
   c2132:	9b03      	ldr	r3, [sp, #12]
   c2134:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   c2136:	4293      	cmp	r3, r2
   c2138:	f280 8094 	bge.w	c2264 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
   c213c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c213e:	425b      	negs	r3, r3
   c2140:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2142:	2300      	movs	r3, #0
   c2144:	9304      	str	r3, [sp, #16]
   c2146:	9b04      	ldr	r3, [sp, #16]
   c2148:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   c214a:	4293      	cmp	r3, r2
   c214c:	f280 8082 	bge.w	c2254 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
   c2150:	2300      	movs	r3, #0
   c2152:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   c2154:	9305      	str	r3, [sp, #20]
   c2156:	9b05      	ldr	r3, [sp, #20]
   c2158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c215a:	4293      	cmp	r3, r2
   c215c:	da72      	bge.n	c2244 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
   c215e:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   c2160:	9b02      	ldr	r3, [sp, #8]
   c2162:	9a08      	ldr	r2, [sp, #32]
   c2164:	1ae3      	subs	r3, r4, r3
   c2166:	429a      	cmp	r2, r3
   c2168:	dd64      	ble.n	c2234 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fa>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   c216a:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   c216c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2170:	9506      	str	r5, [sp, #24]
   c2172:	9b06      	ldr	r3, [sp, #24]
   c2174:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c2176:	4293      	cmp	r3, r2
   c2178:	da38      	bge.n	c21ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c217a:	2300      	movs	r3, #0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c217c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2180:	9307      	str	r3, [sp, #28]
   c2182:	9b07      	ldr	r3, [sp, #28]
   c2184:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c2186:	4293      	cmp	r3, r2
   c2188:	da2a      	bge.n	c21e0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c218a:	f1b8 0f00 	cmp.w	r8, #0
   c218e:	db21      	blt.n	c21d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c2190:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2192:	4543      	cmp	r3, r8
   c2194:	dd1e      	ble.n	c21d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c2196:	f1ba 0f00 	cmp.w	sl, #0
   c219a:	db1b      	blt.n	c21d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c219c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c219e:	4553      	cmp	r3, sl
   c21a0:	dd18      	ble.n	c21d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   c21a2:	9b05      	ldr	r3, [sp, #20]
   c21a4:	9300      	str	r3, [sp, #0]
   c21a6:	4652      	mov	r2, sl
   c21a8:	4643      	mov	r3, r8
   c21aa:	4659      	mov	r1, fp
   c21ac:	4648      	mov	r0, r9
   c21ae:	f7f4 f93a 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   c21b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   c21b6:	9014      	str	r0, [sp, #80]	; 0x50
                  int32 filter_val = filter_data[Offset(
   c21b8:	9400      	str	r4, [sp, #0]
   c21ba:	2100      	movs	r1, #0
   c21bc:	4630      	mov	r0, r6
   c21be:	f7f4 f932 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   c21c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c21c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   c21c6:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   c21c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   c21ca:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   c21cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   c21ce:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   c21d0:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c21d4:	9b07      	ldr	r3, [sp, #28]
   c21d6:	3301      	adds	r3, #1
   c21d8:	9307      	str	r3, [sp, #28]
   c21da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c21dc:	4498      	add	r8, r3
   c21de:	e7d0      	b.n	c2182 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c21e0:	9b06      	ldr	r3, [sp, #24]
   c21e2:	3301      	adds	r3, #1
   c21e4:	9306      	str	r3, [sp, #24]
   c21e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c21e8:	449a      	add	sl, r3
   c21ea:	e7c2      	b.n	c2172 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   c21ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c21ee:	b113      	cbz	r3, c21f6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   c21f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c21f4:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   c21f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   c21f8:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   c21fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   c21fe:	4628      	mov	r0, r5
   c2200:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   c2204:	f7f8 f8a0 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   c2208:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
            acc = MultiplyByQuantizedMultiplier(
   c220c:	4605      	mov	r5, r0
            output_data[Offset(output_shape, batch, out_y, out_x,
   c220e:	9400      	str	r4, [sp, #0]
   c2210:	4659      	mov	r1, fp
   c2212:	4638      	mov	r0, r7
   c2214:	f7f4 f907 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            acc += output_offset;
   c2218:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c221a:	441d      	add	r5, r3
                               output_channel)] = static_cast<int8_t>(acc);
   c221c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c221e:	429d      	cmp	r5, r3
   c2220:	bfb8      	it	lt
   c2222:	461d      	movlt	r5, r3
   c2224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2226:	429d      	cmp	r5, r3
   c2228:	bfa8      	it	ge
   c222a:	461d      	movge	r5, r3
   c222c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   c222e:	3401      	adds	r4, #1
   c2230:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   c2232:	e795      	b.n	c2160 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   c2234:	9b05      	ldr	r3, [sp, #20]
   c2236:	9a08      	ldr	r2, [sp, #32]
   c2238:	3301      	adds	r3, #1
   c223a:	9305      	str	r3, [sp, #20]
   c223c:	9b02      	ldr	r3, [sp, #8]
   c223e:	4413      	add	r3, r2
   c2240:	9302      	str	r3, [sp, #8]
   c2242:	e788      	b.n	c2156 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2244:	9b04      	ldr	r3, [sp, #16]
   c2246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c2248:	3301      	adds	r3, #1
   c224a:	9304      	str	r3, [sp, #16]
   c224c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c224e:	4413      	add	r3, r2
   c2250:	930a      	str	r3, [sp, #40]	; 0x28
   c2252:	e778      	b.n	c2146 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c2254:	9b03      	ldr	r3, [sp, #12]
   c2256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c2258:	3301      	adds	r3, #1
   c225a:	9303      	str	r3, [sp, #12]
   c225c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c225e:	4413      	add	r3, r2
   c2260:	9309      	str	r3, [sp, #36]	; 0x24
   c2262:	e766      	b.n	c2132 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   c2264:	f10b 0b01 	add.w	fp, fp, #1
   c2268:	e75a      	b.n	c2120 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   c226a:	b021      	add	sp, #132	; 0x84
   c226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c2270 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   c2270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2274:	ed2d 8b04 	vpush	{d8-d9}
   c2278:	b09d      	sub	sp, #116	; 0x74
   c227a:	4699      	mov	r9, r3
  const int stride_width = params.stride_width;
   c227c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c2280:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   c2282:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c2286:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   c2288:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c228c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   c228e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c2292:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   c2294:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c2298:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   c229a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c229e:	9312      	str	r3, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   c22a0:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c22a4:	9307      	str	r3, [sp, #28]
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c22a6:	680b      	ldr	r3, [r1, #0]
    float* output_data) {
   c22a8:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
  const float output_activation_min = params.float_activation_min;
   c22aa:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
   c22ae:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
    float* output_data) {
   c22b2:	921b      	str	r2, [sp, #108]	; 0x6c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c22b4:	2b04      	cmp	r3, #4
    float* output_data) {
   c22b6:	460c      	mov	r4, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c22b8:	d001      	beq.n	c22be <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
   c22ba:	f002 fa9f 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c22be:	f8d9 3000 	ldr.w	r3, [r9]
   c22c2:	2b04      	cmp	r3, #4
   c22c4:	d1f9      	bne.n	c22ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c22c6:	683b      	ldr	r3, [r7, #0]
   c22c8:	2b04      	cmp	r3, #4
   c22ca:	d1f6      	bne.n	c22ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c22cc:	2300      	movs	r3, #0
   c22ce:	4619      	mov	r1, r3
   c22d0:	463a      	mov	r2, r7
   c22d2:	4620      	mov	r0, r4
   c22d4:	f7f6 fd25 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c22d8:	2303      	movs	r3, #3
   c22da:	4619      	mov	r1, r3
   c22dc:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c22de:	9014      	str	r0, [sp, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c22e0:	4648      	mov	r0, r9
   c22e2:	f7f6 fd1e 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c22e6:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c22e8:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
   c22ea:	4620      	mov	r0, r4
   c22ec:	f7f4 f834 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c22f0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c22f2:	9015      	str	r0, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
   c22f4:	4620      	mov	r0, r4
   c22f6:	f7f4 f82f 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c22fa:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c22fc:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = input_shape.Dims(3);
   c22fe:	4620      	mov	r0, r4
   c2300:	f7f4 f82a 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c2304:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c2306:	900b      	str	r0, [sp, #44]	; 0x2c
  const int filter_height = filter_shape.Dims(1);
   c2308:	4648      	mov	r0, r9
   c230a:	f7f4 f825 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c230e:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c2310:	9017      	str	r0, [sp, #92]	; 0x5c
  const int filter_width = filter_shape.Dims(2);
   c2312:	4648      	mov	r0, r9
   c2314:	f7f4 f820 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c2318:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c231a:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
   c231c:	4638      	mov	r0, r7
   c231e:	f7f4 f81b 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c2322:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c2324:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_width = output_shape.Dims(2);
   c2326:	4638      	mov	r0, r7
   c2328:	f7f4 f816 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c232c:	9b07      	ldr	r3, [sp, #28]
   c232e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
   c2330:	901a      	str	r0, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2332:	fb02 f603 	mul.w	r6, r2, r3
   c2336:	42ae      	cmp	r6, r5
   c2338:	d1bf      	bne.n	c22ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c233a:	982b      	ldr	r0, [sp, #172]	; 0xac
   c233c:	f7f7 fff3 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c2340:	42b0      	cmp	r0, r6
   c2342:	d1ba      	bne.n	c22ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
   c2344:	eddf 9a5e 	vldr	s19, [pc, #376]	; c24c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x250>
  for (int b = 0; b < batches; ++b) {
   c2348:	2500      	movs	r5, #0
   c234a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c234c:	429d      	cmp	r5, r3
   c234e:	f280 80b1 	bge.w	c24b4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x244>
   c2352:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c2354:	425b      	negs	r3, r3
   c2356:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c2358:	2300      	movs	r3, #0
   c235a:	9302      	str	r3, [sp, #8]
   c235c:	9b02      	ldr	r3, [sp, #8]
   c235e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c2360:	4293      	cmp	r3, r2
   c2362:	f280 80a5 	bge.w	c24b0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x240>
   c2366:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2368:	425b      	negs	r3, r3
   c236a:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c236c:	2300      	movs	r3, #0
   c236e:	9303      	str	r3, [sp, #12]
   c2370:	9b03      	ldr	r3, [sp, #12]
   c2372:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c2374:	4293      	cmp	r3, r2
   c2376:	f280 8093 	bge.w	c24a0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
   c237a:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
   c237c:	9604      	str	r6, [sp, #16]
   c237e:	9b04      	ldr	r3, [sp, #16]
   c2380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2382:	4293      	cmp	r3, r2
   c2384:	f280 8084 	bge.w	c2490 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x220>
   c2388:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   c238a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   c238e:	9308      	str	r3, [sp, #32]
          for (int m = 0; m < depth_multiplier; m++) {
   c2390:	2300      	movs	r3, #0
   c2392:	9305      	str	r3, [sp, #20]
   c2394:	9b05      	ldr	r3, [sp, #20]
   c2396:	9a07      	ldr	r2, [sp, #28]
   c2398:	4293      	cmp	r3, r2
   c239a:	da73      	bge.n	c2484 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
            const int oc = m + ic * depth_multiplier;
   c239c:	4433      	add	r3, r6
   c239e:	930c      	str	r3, [sp, #48]	; 0x30
          for (int m = 0; m < depth_multiplier; m++) {
   c23a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            float total = 0.f;
   c23a4:	ed9f 8a46 	vldr	s16, [pc, #280]	; c24c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x250>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c23a8:	2300      	movs	r3, #0
   c23aa:	9306      	str	r3, [sp, #24]
   c23ac:	9b06      	ldr	r3, [sp, #24]
   c23ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c23b0:	4293      	cmp	r3, r2
   c23b2:	da3b      	bge.n	c242c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
   c23b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c23b8:	f04f 0b00 	mov.w	fp, #0
   c23bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c23be:	459b      	cmp	fp, r3
   c23c0:	da2e      	bge.n	c2420 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c23c2:	f1b8 0f00 	cmp.w	r8, #0
   c23c6:	db26      	blt.n	c2416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c23c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c23ca:	4543      	cmp	r3, r8
   c23cc:	dd23      	ble.n	c2416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c23ce:	f1ba 0f00 	cmp.w	sl, #0
   c23d2:	db20      	blt.n	c2416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c23d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c23d6:	4553      	cmp	r3, sl
   c23d8:	dd1d      	ble.n	c2416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c23da:	9b04      	ldr	r3, [sp, #16]
   c23dc:	9300      	str	r3, [sp, #0]
   c23de:	4652      	mov	r2, sl
   c23e0:	4643      	mov	r3, r8
   c23e2:	4629      	mov	r1, r5
   c23e4:	4620      	mov	r0, r4
   c23e6:	f7f4 f81e 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
   c23ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c23ec:	9a06      	ldr	r2, [sp, #24]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c23ee:	9013      	str	r0, [sp, #76]	; 0x4c
                  float filter_value = filter_data[Offset(
   c23f0:	9300      	str	r3, [sp, #0]
   c23f2:	2100      	movs	r1, #0
   c23f4:	465b      	mov	r3, fp
   c23f6:	4648      	mov	r0, r9
   c23f8:	f7f4 f815 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c23fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c23fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c2400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
   c2404:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
                  total += (input_value * filter_value);
   c2406:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
   c240a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   c240e:	edd0 7a00 	vldr	s15, [r0]
   c2412:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c2418:	f10b 0b01 	add.w	fp, fp, #1
   c241c:	4498      	add	r8, r3
   c241e:	e7cd      	b.n	c23bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14c>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2420:	9b06      	ldr	r3, [sp, #24]
   c2422:	3301      	adds	r3, #1
   c2424:	9306      	str	r3, [sp, #24]
   c2426:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c2428:	449a      	add	sl, r3
   c242a:	e7bf      	b.n	c23ac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13c>
            if (bias_data) {
   c242c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   c242e:	b333      	cbz	r3, c247e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
              bias_value = bias_data[oc];
   c2430:	9b08      	ldr	r3, [sp, #32]
   c2432:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c2436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2438:	9300      	str	r3, [sp, #0]
                ActivationFunctionWithMinMax(total + bias_value,
   c243a:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c243e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	return __b;
   c2442:	eeb4 8a68 	vcmp.f32	s16, s17
   c2446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c244a:	bf48      	it	mi
   c244c:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   c2450:	eeb4 9a48 	vcmp.f32	s18, s16
   c2454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2458:	4629      	mov	r1, r5
   c245a:	4638      	mov	r0, r7
   c245c:	bf48      	it	mi
   c245e:	eeb0 8a49 	vmovmi.f32	s16, s18
   c2462:	f7f3 ffe0 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c2466:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c2468:	eb03 0080 	add.w	r0, r3, r0, lsl #2
          for (int m = 0; m < depth_multiplier; m++) {
   c246c:	9b05      	ldr	r3, [sp, #20]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c246e:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
   c2472:	3301      	adds	r3, #1
   c2474:	9305      	str	r3, [sp, #20]
   c2476:	9b08      	ldr	r3, [sp, #32]
   c2478:	3304      	adds	r3, #4
   c247a:	9308      	str	r3, [sp, #32]
   c247c:	e78a      	b.n	c2394 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
            float bias_value = 0.0f;
   c247e:	eef0 7a69 	vmov.f32	s15, s19
   c2482:	e7d8      	b.n	c2436 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
        for (int ic = 0; ic < input_depth; ++ic) {
   c2484:	9b04      	ldr	r3, [sp, #16]
   c2486:	3301      	adds	r3, #1
   c2488:	9304      	str	r3, [sp, #16]
   c248a:	9b07      	ldr	r3, [sp, #28]
   c248c:	441e      	add	r6, r3
   c248e:	e776      	b.n	c237e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2490:	9b03      	ldr	r3, [sp, #12]
   c2492:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2494:	3301      	adds	r3, #1
   c2496:	9303      	str	r3, [sp, #12]
   c2498:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c249a:	4413      	add	r3, r2
   c249c:	9309      	str	r3, [sp, #36]	; 0x24
   c249e:	e767      	b.n	c2370 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c24a0:	9b02      	ldr	r3, [sp, #8]
   c24a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c24a4:	3301      	adds	r3, #1
   c24a6:	9302      	str	r3, [sp, #8]
   c24a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c24aa:	4413      	add	r3, r2
   c24ac:	930a      	str	r3, [sp, #40]	; 0x28
   c24ae:	e755      	b.n	c235c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xec>
  for (int b = 0; b < batches; ++b) {
   c24b0:	3501      	adds	r5, #1
   c24b2:	e74a      	b.n	c234a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
          }
        }
      }
    }
  }
}
   c24b4:	b01d      	add	sp, #116	; 0x74
   c24b6:	ecbd 8b04 	vpop	{d8-d9}
   c24ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c24be:	bf00      	nop
   c24c0:	00000000 	.word	0x00000000

000c24c4 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:

TfLiteRegistration* Register_DEPTHWISE_CONV_2D() {
  static TfLiteRegistration r = {depthwise_conv::Init, depthwise_conv::Free,
                                 depthwise_conv::Prepare, depthwise_conv::Eval};
  return &r;
}
   c24c4:	4800      	ldr	r0, [pc, #0]	; (c24c8 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x4>)
   c24c6:	4770      	bx	lr
   c24c8:	2003c598 	.word	0x2003c598

000c24cc <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>:
         right_shift;
}

template <DepthwiseConvOutputRounding output_rounding>
struct DepthwiseConvBasicKernel {
  static inline void Run(const DepthwiseParams& params,
   c24cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c24d0:	ed2d 8b02 	vpush	{d8}
   c24d4:	b0a1      	sub	sp, #132	; 0x84
   c24d6:	469a      	mov	sl, r3
                         const uint8* input_data,
                         const RuntimeShape& filter_shape,
                         const uint8* filter_data,
                         const RuntimeShape& bias_shape, const int32* bias_data,
                         const RuntimeShape& output_shape, uint8* output_data) {
    const int stride_width = params.stride_width;
   c24d8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c24dc:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   c24de:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c24e2:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   c24e4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c24e8:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   c24ea:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c24ee:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   c24f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c24f4:	9312      	str	r3, [sp, #72]	; 0x48
    const int pad_height = params.padding_values.height;
   c24f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c24fa:	9313      	str	r3, [sp, #76]	; 0x4c
    const int depth_multiplier = params.depth_multiplier;
   c24fc:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c2500:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   c2502:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c2504:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   c2506:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c2508:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   c250a:	6943      	ldr	r3, [r0, #20]
   c250c:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   c250e:	6983      	ldr	r3, [r0, #24]
   c2510:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   c2512:	69c3      	ldr	r3, [r0, #28]
   c2514:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   c2516:	6a03      	ldr	r3, [r0, #32]
  static inline void Run(const DepthwiseParams& params,
   c2518:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
   c251a:	921f      	str	r2, [sp, #124]	; 0x7c
    const int32 output_multiplier = params.output_multiplier;
   c251c:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   c2520:	6a43      	ldr	r3, [r0, #36]	; 0x24
   c2522:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2526:	680b      	ldr	r3, [r1, #0]
   c2528:	2b04      	cmp	r3, #4
  static inline void Run(const DepthwiseParams& params,
   c252a:	4689      	mov	r9, r1
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c252c:	d001      	beq.n	c2532 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x66>
   c252e:	f002 f965 	bl	c47fc <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c2532:	f8da 3000 	ldr.w	r3, [sl]
   c2536:	2b04      	cmp	r3, #4
   c2538:	d1f9      	bne.n	c252e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c253a:	6833      	ldr	r3, [r6, #0]
   c253c:	2b04      	cmp	r3, #4
   c253e:	d1f6      	bne.n	c252e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>

    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c2540:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   c2544:	4293      	cmp	r3, r2
   c2546:	dcf2      	bgt.n	c252e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2548:	2300      	movs	r3, #0
   c254a:	4619      	mov	r1, r3
   c254c:	4632      	mov	r2, r6
   c254e:	4648      	mov	r0, r9
   c2550:	f7f6 fbe7 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2554:	2303      	movs	r3, #3
   c2556:	4619      	mov	r1, r3
   c2558:	4632      	mov	r2, r6
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c255a:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c255c:	4650      	mov	r0, sl
   c255e:	f7f6 fbe0 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   c2562:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2564:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   c2566:	4648      	mov	r0, r9
   c2568:	f7f3 fef6 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   c256c:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   c256e:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   c2570:	4648      	mov	r0, r9
   c2572:	f7f3 fef1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   c2576:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   c2578:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   c257a:	4648      	mov	r0, r9
   c257c:	f7f3 feec 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   c2580:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   c2582:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   c2584:	4650      	mov	r0, sl
   c2586:	f7f3 fee7 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   c258a:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   c258c:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   c258e:	4650      	mov	r0, sl
   c2590:	f7f3 fee2 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   c2594:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   c2596:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   c2598:	4630      	mov	r0, r6
   c259a:	f7f3 fedd 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   c259e:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   c25a0:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   c25a2:	4630      	mov	r0, r6
   c25a4:	f7f3 fed8 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c25a8:	9b08      	ldr	r3, [sp, #32]
   c25aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    const int output_width = output_shape.Dims(2);
   c25ac:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c25ae:	fb02 f503 	mul.w	r5, r2, r3
   c25b2:	42a5      	cmp	r5, r4
   c25b4:	d1bb      	bne.n	c252e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c25b6:	982d      	ldr	r0, [sp, #180]	; 0xb4
   c25b8:	f7f7 feb5 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c25bc:	42a8      	cmp	r0, r5
   c25be:	d1b6      	bne.n	c252e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>

    for (int b = 0; b < batches; ++b) {
   c25c0:	f04f 0b00 	mov.w	fp, #0
   c25c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c25c6:	459b      	cmp	fp, r3
   c25c8:	f280 809e 	bge.w	c2708 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x23c>
   c25cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c25ce:	425b      	negs	r3, r3
   c25d0:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_y = 0; out_y < output_height; ++out_y) {
   c25d2:	2300      	movs	r3, #0
   c25d4:	9303      	str	r3, [sp, #12]
   c25d6:	9b03      	ldr	r3, [sp, #12]
   c25d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   c25da:	4293      	cmp	r3, r2
   c25dc:	f280 8091 	bge.w	c2702 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x236>
   c25e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c25e2:	425b      	negs	r3, r3
   c25e4:	930a      	str	r3, [sp, #40]	; 0x28
        for (int out_x = 0; out_x < output_width; ++out_x) {
   c25e6:	2300      	movs	r3, #0
   c25e8:	9304      	str	r3, [sp, #16]
   c25ea:	9b04      	ldr	r3, [sp, #16]
   c25ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   c25ee:	4293      	cmp	r3, r2
   c25f0:	da7f      	bge.n	c26f2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x226>
   c25f2:	2300      	movs	r3, #0
   c25f4:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   c25f6:	9305      	str	r3, [sp, #20]
   c25f8:	9b05      	ldr	r3, [sp, #20]
   c25fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c25fc:	4293      	cmp	r3, r2
   c25fe:	da70      	bge.n	c26e2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x216>
   c2600:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   c2602:	9b02      	ldr	r3, [sp, #8]
   c2604:	9a08      	ldr	r2, [sp, #32]
   c2606:	1ae3      	subs	r3, r4, r3
   c2608:	429a      	cmp	r2, r3
   c260a:	dd62      	ble.n	c26d2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x206>
              const int oc = m + ic * depth_multiplier;
              const int in_x_origin = (out_x * stride_width) - pad_width;
              const int in_y_origin = (out_y * stride_height) - pad_height;
              int32 acc = 0;
   c260c:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   c260e:	9f09      	ldr	r7, [sp, #36]	; 0x24
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2610:	9506      	str	r5, [sp, #24]
   c2612:	9b06      	ldr	r3, [sp, #24]
   c2614:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c2616:	4293      	cmp	r3, r2
   c2618:	da39      	bge.n	c268e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c261a:	2300      	movs	r3, #0
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c261c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2620:	9307      	str	r3, [sp, #28]
   c2622:	9b07      	ldr	r3, [sp, #28]
   c2624:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   c2626:	4293      	cmp	r3, r2
   c2628:	da2b      	bge.n	c2682 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1b6>
                      in_x_origin + dilation_width_factor * filter_x;
                  const int in_y =
                      in_y_origin + dilation_height_factor * filter_y;
                  // If the location is outside the bounds of the input image,
                  // use zero as a default value.
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c262a:	f1b8 0f00 	cmp.w	r8, #0
   c262e:	db22      	blt.n	c2676 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c2630:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   c2632:	4543      	cmp	r3, r8
   c2634:	dd1f      	ble.n	c2676 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c2636:	2f00      	cmp	r7, #0
   c2638:	db1d      	blt.n	c2676 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c263a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c263c:	42bb      	cmp	r3, r7
   c263e:	dd1a      	ble.n	c2676 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
                      (in_y < input_height)) {
                    int32 input_val =
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c2640:	9b05      	ldr	r3, [sp, #20]
   c2642:	9300      	str	r3, [sp, #0]
   c2644:	463a      	mov	r2, r7
   c2646:	4643      	mov	r3, r8
   c2648:	4659      	mov	r1, fp
   c264a:	4648      	mov	r0, r9
   c264c:	f7f3 feeb 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   c2650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c2654:	9014      	str	r0, [sp, #80]	; 0x50
                    int32 filter_val = filter_data[Offset(
   c2656:	2100      	movs	r1, #0
   c2658:	9400      	str	r4, [sp, #0]
   c265a:	4650      	mov	r0, sl
   c265c:	f7f3 fee3 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c2660:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                        filter_shape, 0, filter_y, filter_x, oc)];
                    acc += (filter_val + filter_offset) *
   c2662:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   c2664:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   c2666:	9914      	ldr	r1, [sp, #80]	; 0x50
                    acc += (filter_val + filter_offset) *
   c2668:	4413      	add	r3, r2
                    int32 input_val =
   c266a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   c266c:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   c266e:	9915      	ldr	r1, [sp, #84]	; 0x54
   c2670:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   c2672:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2676:	9b07      	ldr	r3, [sp, #28]
   c2678:	3301      	adds	r3, #1
   c267a:	9307      	str	r3, [sp, #28]
   c267c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c267e:	4498      	add	r8, r3
   c2680:	e7cf      	b.n	c2622 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2682:	9b06      	ldr	r3, [sp, #24]
   c2684:	3301      	adds	r3, #1
   c2686:	9306      	str	r3, [sp, #24]
   c2688:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c268a:	441f      	add	r7, r3
   c268c:	e7c1      	b.n	c2612 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x146>
                  }
                }
              }
              if (bias_data) {
   c268e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c2690:	b113      	cbz	r3, c2698 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1cc>
                acc += bias_data[oc];
   c2692:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c2696:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c2698:	ee18 2a90 	vmov	r2, s17
   c269c:	ee18 1a10 	vmov	r1, s16
   c26a0:	4628      	mov	r0, r5
   c26a2:	f7f7 fe51 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
                                                        output_shift);
              acc += output_offset;
              acc = std::max(acc, output_activation_min);
              acc = std::min(acc, output_activation_max);
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c26a6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c26aa:	4605      	mov	r5, r0
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c26ac:	9400      	str	r4, [sp, #0]
   c26ae:	4659      	mov	r1, fp
   c26b0:	4630      	mov	r0, r6
   c26b2:	f7f3 feb8 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc += output_offset;
   c26b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c26b8:	441d      	add	r5, r3
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c26ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c26bc:	429d      	cmp	r5, r3
   c26be:	bfb8      	it	lt
   c26c0:	461d      	movlt	r5, r3
   c26c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c26c4:	429d      	cmp	r5, r3
   c26c6:	bfa8      	it	ge
   c26c8:	461d      	movge	r5, r3
   c26ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   c26cc:	3401      	adds	r4, #1
   c26ce:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   c26d0:	e797      	b.n	c2602 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   c26d2:	9b05      	ldr	r3, [sp, #20]
   c26d4:	9a08      	ldr	r2, [sp, #32]
   c26d6:	3301      	adds	r3, #1
   c26d8:	9305      	str	r3, [sp, #20]
   c26da:	9b02      	ldr	r3, [sp, #8]
   c26dc:	4413      	add	r3, r2
   c26de:	9302      	str	r3, [sp, #8]
   c26e0:	e78a      	b.n	c25f8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   c26e2:	9b04      	ldr	r3, [sp, #16]
   c26e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c26e6:	3301      	adds	r3, #1
   c26e8:	9304      	str	r3, [sp, #16]
   c26ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c26ec:	4413      	add	r3, r2
   c26ee:	930a      	str	r3, [sp, #40]	; 0x28
   c26f0:	e77b      	b.n	c25ea <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   c26f2:	9b03      	ldr	r3, [sp, #12]
   c26f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c26f6:	3301      	adds	r3, #1
   c26f8:	9303      	str	r3, [sp, #12]
   c26fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c26fc:	4413      	add	r3, r2
   c26fe:	9309      	str	r3, [sp, #36]	; 0x24
   c2700:	e769      	b.n	c25d6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   c2702:	f10b 0b01 	add.w	fp, fp, #1
   c2706:	e75d      	b.n	c25c4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xf8>
            }
          }
        }
      }
    }
  }
   c2708:	b021      	add	sp, #132	; 0x84
   c270a:	ecbd 8b02 	vpop	{d8}
   c270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000c2714 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c2714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2718:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c271c:	f8d1 a000 	ldr.w	sl, [r1]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c2720:	f8d0 9008 	ldr.w	r9, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2724:	f8da 3004 	ldr.w	r3, [sl, #4]
   c2728:	f8da 6008 	ldr.w	r6, [sl, #8]
   c272c:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
   c2730:	2238      	movs	r2, #56	; 0x38
   c2732:	4353      	muls	r3, r2
   c2734:	930a      	str	r3, [sp, #40]	; 0x28
   c2736:	eb09 0803 	add.w	r8, r9, r3
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c273a:	f8da 3000 	ldr.w	r3, [sl]
   c273e:	9109      	str	r1, [sp, #36]	; 0x24
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   c2740:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2742:	bf08      	it	eq
   c2744:	f8da 100c 	ldreq.w	r1, [sl, #12]
   c2748:	fb02 9606 	mla	r6, r2, r6, r9
   c274c:	bf08      	it	eq
   c274e:	fb02 9b01 	mlaeq	fp, r2, r1, r9
  const TfLiteType data_type = input->type;
   c2752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c2754:	f819 2002 	ldrb.w	r2, [r9, r2]
   c2758:	920e      	str	r2, [sp, #56]	; 0x38
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   c275a:	bf18      	it	ne
   c275c:	f04f 0b00 	movne.w	fp, #0
  if (input->type != kTfLiteFloat32) {
   c2760:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c2762:	4604      	mov	r4, r0
  if (input->type != kTfLiteFloat32) {
   c2764:	d02c      	beq.n	c27c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xac>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   c2766:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
   c276a:	2d01      	cmp	r5, #1
   c276c:	d00e      	beq.n	c278c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x78>
   c276e:	2601      	movs	r6, #1
   c2770:	4ba3      	ldr	r3, [pc, #652]	; (c2a00 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c2772:	9301      	str	r3, [sp, #4]
   c2774:	e9cd 5602 	strd	r5, r6, [sp, #8]
   c2778:	4ba2      	ldr	r3, [pc, #648]	; (c2a04 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
   c277a:	9300      	str	r3, [sp, #0]
   c277c:	6945      	ldr	r5, [r0, #20]
   c277e:	4aa2      	ldr	r2, [pc, #648]	; (c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c2780:	49a2      	ldr	r1, [pc, #648]	; (c2a0c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c2782:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   c2786:	47a8      	blx	r5
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, width, height,
   c2788:	2501      	movs	r5, #1
   c278a:	e00a      	b.n	c27a2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
    const auto* affine_quantization =
   c278c:	6b72      	ldr	r2, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   c278e:	b97a      	cbnz	r2, c27b0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   c2790:	4b9f      	ldr	r3, [pc, #636]	; (c2a10 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
   c2792:	9300      	str	r3, [sp, #0]
   c2794:	6946      	ldr	r6, [r0, #20]
   c2796:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    TF_LITE_ENSURE(context, affine_quantization->scale);
   c279a:	4a9b      	ldr	r2, [pc, #620]	; (c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c279c:	499d      	ldr	r1, [pc, #628]	; (c2a14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   c279e:	4620      	mov	r0, r4
   c27a0:	47b0      	blx	r6
}
   c27a2:	4628      	mov	r0, r5
   c27a4:	f50d 7d65 	add.w	sp, sp, #916	; 0x394
   c27a8:	ecbd 8b02 	vpop	{d8}
   c27ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   c27b0:	6812      	ldr	r2, [r2, #0]
   c27b2:	b92a      	cbnz	r2, c27c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xac>
   c27b4:	4b98      	ldr	r3, [pc, #608]	; (c2a18 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x304>)
   c27b6:	9300      	str	r3, [sp, #0]
   c27b8:	6946      	ldr	r6, [r0, #20]
   c27ba:	f240 13d3 	movw	r3, #467	; 0x1d3
   c27be:	e7ec      	b.n	c279a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x86>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   c27c0:	3b02      	subs	r3, #2
   c27c2:	2b01      	cmp	r3, #1
   c27c4:	d908      	bls.n	c27d8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   c27c6:	4b95      	ldr	r3, [pc, #596]	; (c2a1c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x308>)
   c27c8:	9300      	str	r3, [sp, #0]
   c27ca:	6965      	ldr	r5, [r4, #20]
   c27cc:	4a8e      	ldr	r2, [pc, #568]	; (c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c27ce:	4991      	ldr	r1, [pc, #580]	; (c2a14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   c27d0:	2343      	movs	r3, #67	; 0x43
   c27d2:	4620      	mov	r0, r4
   c27d4:	47a8      	blx	r5
   c27d6:	e7d7      	b.n	c2788 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c27d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c27da:	685b      	ldr	r3, [r3, #4]
   c27dc:	930b      	str	r3, [sp, #44]	; 0x2c
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   c27de:	681b      	ldr	r3, [r3, #0]
   c27e0:	2b01      	cmp	r3, #1
   c27e2:	d00d      	beq.n	c2800 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec>
   c27e4:	2501      	movs	r5, #1
   c27e6:	e9cd 3502 	strd	r3, r5, [sp, #8]
   c27ea:	4b8d      	ldr	r3, [pc, #564]	; (c2a20 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
   c27ec:	9301      	str	r3, [sp, #4]
   c27ee:	4b8d      	ldr	r3, [pc, #564]	; (c2a24 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
   c27f0:	9300      	str	r3, [sp, #0]
   c27f2:	6966      	ldr	r6, [r4, #20]
   c27f4:	4a84      	ldr	r2, [pc, #528]	; (c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c27f6:	4985      	ldr	r1, [pc, #532]	; (c2a0c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c27f8:	2344      	movs	r3, #68	; 0x44
   c27fa:	4620      	mov	r0, r4
   c27fc:	47b0      	blx	r6
   c27fe:	e7d0      	b.n	c27a2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  auto* params =
   c2800:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2802:	695d      	ldr	r5, [r3, #20]
   c2804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int out_width = ComputeOutSize(params->padding, width, filter_width,
   c2806:	782f      	ldrb	r7, [r5, #0]
   c2808:	685b      	ldr	r3, [r3, #4]
   c280a:	9315      	str	r3, [sp, #84]	; 0x54
  return t->dims->data[dim];
   c280c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2810:	68da      	ldr	r2, [r3, #12]
   c2812:	689b      	ldr	r3, [r3, #8]
   c2814:	9311      	str	r3, [sp, #68]	; 0x44
   c2816:	68b3      	ldr	r3, [r6, #8]
   c2818:	9212      	str	r2, [sp, #72]	; 0x48
   c281a:	68da      	ldr	r2, [r3, #12]
   c281c:	689b      	ldr	r3, [r3, #8]
   c281e:	930f      	str	r3, [sp, #60]	; 0x3c
   c2820:	686b      	ldr	r3, [r5, #4]
   c2822:	930c      	str	r3, [sp, #48]	; 0x30
  int out_height = ComputeOutSize(params->padding, height, filter_height,
   c2824:	68ab      	ldr	r3, [r5, #8]
   c2826:	930d      	str	r3, [sp, #52]	; 0x34
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c2828:	69ab      	ldr	r3, [r5, #24]
   c282a:	9313      	str	r3, [sp, #76]	; 0x4c
   c282c:	696b      	ldr	r3, [r5, #20]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   c282e:	9912      	ldr	r1, [sp, #72]	; 0x48
   c2830:	9314      	str	r3, [sp, #80]	; 0x50
   c2832:	9300      	str	r3, [sp, #0]
   c2834:	4638      	mov	r0, r7
   c2836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2838:	9210      	str	r2, [sp, #64]	; 0x40
   c283a:	f7f6 feb7 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   c283e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c2840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c2842:	9911      	ldr	r1, [sp, #68]	; 0x44
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   c2844:	9016      	str	r0, [sp, #88]	; 0x58
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   c2846:	9300      	str	r3, [sp, #0]
   c2848:	4638      	mov	r0, r7
   c284a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c284c:	f7f6 feae 	bl	b95ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c2850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c2852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c2854:	9914      	ldr	r1, [sp, #80]	; 0x50
   c2856:	1e5f      	subs	r7, r3, #1
   c2858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c285a:	435f      	muls	r7, r3
   c285c:	3701      	adds	r7, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c285e:	1e43      	subs	r3, r0, #1
   c2860:	fb02 7303 	mla	r3, r2, r3, r7
  int total_padding =
   c2864:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2866:	1a9b      	subs	r3, r3, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c2868:	9a10      	ldr	r2, [sp, #64]	; 0x40
   c286a:	3a01      	subs	r2, #1
   c286c:	434a      	muls	r2, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c286e:	9916      	ldr	r1, [sp, #88]	; 0x58
   c2870:	1e48      	subs	r0, r1, #1
   c2872:	990c      	ldr	r1, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c2874:	3201      	adds	r2, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c2876:	fb01 2200 	mla	r2, r1, r0, r2
  int total_padding =
   c287a:	9912      	ldr	r1, [sp, #72]	; 0x48
   c287c:	1a52      	subs	r2, r2, r1
  total_padding = total_padding > 0 ? total_padding : 0;
   c287e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
   c2882:	1051      	asrs	r1, r2, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   c2884:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2888:	915c      	str	r1, [sp, #368]	; 0x170
  return total_padding / 2;
   c288a:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
   c288c:	f003 0301 	and.w	r3, r3, #1
   c2890:	935f      	str	r3, [sp, #380]	; 0x17c
  if (data_type != kTfLiteFloat32) {
   c2892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c2894:	915d      	str	r1, [sp, #372]	; 0x174
   c2896:	f002 0201 	and.w	r2, r2, #1
  if (data_type != kTfLiteFloat32) {
   c289a:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c289c:	925e      	str	r2, [sp, #376]	; 0x178
  if (data_type != kTfLiteFloat32) {
   c289e:	d177      	bne.n	c2990 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c28a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c28a2:	2738      	movs	r7, #56	; 0x38
   c28a4:	fb07 9703 	mla	r7, r7, r3, r9
  switch (input->type) {  // Already know in/out types are same.
   c28a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c28aa:	f819 a003 	ldrb.w	sl, [r9, r3]
   c28ae:	f1ba 0f03 	cmp.w	sl, #3
   c28b2:	f000 8117 	beq.w	c2ae4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d0>
   c28b6:	f1ba 0f09 	cmp.w	sl, #9
   c28ba:	f000 80bb 	beq.w	c2a34 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x320>
   c28be:	f1ba 0f01 	cmp.w	sl, #1
   c28c2:	f040 83f3 	bne.w	c30ac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x998>
  CalculateActivationRange(params->activation, &output_activation_min,
   c28c6:	7c2b      	ldrb	r3, [r5, #16]
  if (activation == kTfLiteActRelu) {
   c28c8:	2b01      	cmp	r3, #1
   c28ca:	f000 8090 	beq.w	c29ee <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
  } else if (activation == kTfLiteActRelu6) {
   c28ce:	2b03      	cmp	r3, #3
   c28d0:	f000 8092 	beq.w	c29f8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2e4>
    *activation_max = std::numeric_limits<T>::max();
   c28d4:	ed9f 7a54 	vldr	s14, [pc, #336]	; c2a28 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x314>
   c28d8:	eddf 6a54 	vldr	s13, [pc, #336]	; c2a2c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x318>
   c28dc:	2b02      	cmp	r3, #2
   c28de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c28e2:	bf18      	it	ne
   c28e4:	eef0 7a47 	vmovne.f32	s15, s14
   c28e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c28ec:	bf18      	it	ne
   c28ee:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.padding_values.width = data->padding.width;
   c28f2:	9a5c      	ldr	r2, [sp, #368]	; 0x170
   c28f4:	f8ad 213a 	strh.w	r2, [sp, #314]	; 0x13a
  op_params.padding_type = PaddingType::kSame;
   c28f8:	2301      	movs	r3, #1
  op_params.padding_values.height = data->padding.height;
   c28fa:	9a5d      	ldr	r2, [sp, #372]	; 0x174
  op_params.padding_type = PaddingType::kSame;
   c28fc:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
  op_params.padding_values.height = data->padding.height;
   c2900:	f8ad 213c 	strh.w	r2, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2904:	686a      	ldr	r2, [r5, #4]
   c2906:	f8ad 2142 	strh.w	r2, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c290a:	68aa      	ldr	r2, [r5, #8]
   c290c:	f8ad 2144 	strh.w	r2, [sp, #324]	; 0x144
  op_params.dilation_width_factor = 1;
   c2910:	f8ad 3146 	strh.w	r3, [sp, #326]	; 0x146
  op_params.dilation_height_factor = 1;
   c2914:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2918:	68eb      	ldr	r3, [r5, #12]
   c291a:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c291e:	4641      	mov	r1, r8
   c2920:	a83a      	add	r0, sp, #232	; 0xe8
  op_params.float_activation_min = output_activation_min;
   c2922:	ed8d 7a5a 	vstr	s14, [sp, #360]	; 0x168
  op_params.float_activation_max = output_activation_max;
   c2926:	edcd 7a5b 	vstr	s15, [sp, #364]	; 0x16c
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c292a:	ac44      	add	r4, sp, #272	; 0x110
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c292c:	f7f3 ffad 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c2930:	4631      	mov	r1, r6
   c2932:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c2934:	f8d8 8004 	ldr.w	r8, [r8, #4]
   c2938:	f7f3 ffa7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c293c:	4659      	mov	r1, fp
   c293e:	4620      	mov	r0, r4
   c2940:	6876      	ldr	r6, [r6, #4]
   c2942:	f7f3 ffa2 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2946:	f1bb 0f00 	cmp.w	fp, #0
   c294a:	d001      	beq.n	c2950 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x23c>
   c294c:	f8db b004 	ldr.w	fp, [fp, #4]
   c2950:	ad49      	add	r5, sp, #292	; 0x124
   c2952:	4639      	mov	r1, r7
   c2954:	4628      	mov	r0, r5
   c2956:	f7f3 ff98 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c295a:	b107      	cbz	r7, c295e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
   c295c:	687f      	ldr	r7, [r7, #4]
  tflite::reference_ops::DepthwiseConv(
   c295e:	9600      	str	r6, [sp, #0]
   c2960:	ab3f      	add	r3, sp, #252	; 0xfc
   c2962:	4642      	mov	r2, r8
   c2964:	a93a      	add	r1, sp, #232	; 0xe8
   c2966:	a84e      	add	r0, sp, #312	; 0x138
   c2968:	e9cd 5703 	strd	r5, r7, [sp, #12]
   c296c:	e9cd 4b01 	strd	r4, fp, [sp, #4]
   c2970:	f7ff fc7e 	bl	c2270 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c2974:	4628      	mov	r0, r5
   c2976:	f7f3 fce4 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c297a:	4620      	mov	r0, r4
   c297c:	f7f3 fce1 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c2980:	a83f      	add	r0, sp, #252	; 0xfc
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2982:	f7f3 fcde 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   c2986:	a83a      	add	r0, sp, #232	; 0xe8
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2988:	f7f3 fcdb 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c298c:	2500      	movs	r5, #0
}
   c298e:	e708      	b.n	c27a2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c2990:	f8da 000c 	ldr.w	r0, [sl, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2994:	f8da 1004 	ldr.w	r1, [sl, #4]
   c2998:	f8da 2008 	ldr.w	r2, [sl, #8]
  if (use_tensor) {
   c299c:	1c47      	adds	r7, r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c299e:	f04f 0338 	mov.w	r3, #56	; 0x38
   c29a2:	fb03 9101 	mla	r1, r3, r1, r9
   c29a6:	fb03 9202 	mla	r2, r3, r2, r9
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c29aa:	bf18      	it	ne
   c29ac:	fb03 9300 	mlane	r3, r3, r0, r9
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   c29b0:	a8a2      	add	r0, sp, #648	; 0x288
   c29b2:	9007      	str	r0, [sp, #28]
   c29b4:	a862      	add	r0, sp, #392	; 0x188
   c29b6:	9006      	str	r0, [sp, #24]
   c29b8:	a8e3      	add	r0, sp, #908	; 0x38c
   c29ba:	9005      	str	r0, [sp, #20]
   c29bc:	a8e2      	add	r0, sp, #904	; 0x388
   c29be:	9004      	str	r0, [sp, #16]
   c29c0:	a861      	add	r0, sp, #388	; 0x184
   c29c2:	9003      	str	r0, [sp, #12]
   c29c4:	a860      	add	r0, sp, #384	; 0x180
   c29c6:	9002      	str	r0, [sp, #8]
   c29c8:	f105 0010 	add.w	r0, r5, #16
   c29cc:	9001      	str	r0, [sp, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c29ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
   c29d0:	6840      	ldr	r0, [r0, #4]
   c29d2:	f04f 0738 	mov.w	r7, #56	; 0x38
   c29d6:	fb07 9000 	mla	r0, r7, r0, r9
  return nullptr;
   c29da:	bf08      	it	eq
   c29dc:	2300      	moveq	r3, #0
   c29de:	9000      	str	r0, [sp, #0]
   c29e0:	4620      	mov	r0, r4
   c29e2:	f7f2 fad7 	bl	b4f94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>
   c29e6:	2800      	cmp	r0, #0
   c29e8:	f43f af5a 	beq.w	c28a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18c>
   c29ec:	e6cc      	b.n	c2788 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    *activation_max = std::numeric_limits<T>::max();
   c29ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; c2a28 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x314>
    *activation_min = 0;
   c29f2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; c2a30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x31c>
   c29f6:	e77c      	b.n	c28f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    *activation_max = 6;
   c29f8:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   c29fc:	e7f9      	b.n	c29f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2de>
   c29fe:	bf00      	nop
   c2a00:	000c6fef 	.word	0x000c6fef
   c2a04:	000c7022 	.word	0x000c7022
   c2a08:	000c9339 	.word	0x000c9339
   c2a0c:	000c6fd5 	.word	0x000c6fd5
   c2a10:	000c703c 	.word	0x000c703c
   c2a14:	000c6f40 	.word	0x000c6f40
   c2a18:	000c7050 	.word	0x000c7050
   c2a1c:	000c881f 	.word	0x000c881f
   c2a20:	000c8aca 	.word	0x000c8aca
   c2a24:	000c8843 	.word	0x000c8843
   c2a28:	7f7fffff 	.word	0x7f7fffff
   c2a2c:	ff7fffff 	.word	0xff7fffff
   c2a30:	00000000 	.word	0x00000000
  op_params.padding_type = PaddingType::kSame;
   c2a34:	2301      	movs	r3, #1
   c2a36:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
  op_params.padding_values.width = data->padding.width;
   c2a3a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
   c2a3c:	f8ad 313a 	strh.w	r3, [sp, #314]	; 0x13a
  op_params.padding_values.height = data->padding.height;
   c2a40:	9b5d      	ldr	r3, [sp, #372]	; 0x174
   c2a42:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2a46:	686b      	ldr	r3, [r5, #4]
   c2a48:	f8ad 3142 	strh.w	r3, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c2a4c:	68ab      	ldr	r3, [r5, #8]
   c2a4e:	f8ad 3144 	strh.w	r3, [sp, #324]	; 0x144
  op_params.dilation_width_factor = params->dilation_width_factor;
   c2a52:	696b      	ldr	r3, [r5, #20]
   c2a54:	f8ad 3146 	strh.w	r3, [sp, #326]	; 0x146
  op_params.dilation_height_factor = params->dilation_height_factor;
   c2a58:	69ab      	ldr	r3, [r5, #24]
   c2a5a:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2a5e:	68eb      	ldr	r3, [r5, #12]
   c2a60:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
  op_params.input_offset = -input->params.zero_point;
   c2a64:	f8d8 3010 	ldr.w	r3, [r8, #16]
   c2a68:	425b      	negs	r3, r3
   c2a6a:	9353      	str	r3, [sp, #332]	; 0x14c
  op_params.weights_offset = 0;
   c2a6c:	2300      	movs	r3, #0
   c2a6e:	9354      	str	r3, [sp, #336]	; 0x150
  op_params.output_offset = output->params.zero_point;
   c2a70:	693b      	ldr	r3, [r7, #16]
   c2a72:	9355      	str	r3, [sp, #340]	; 0x154
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   c2a74:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   c2a78:	237f      	movs	r3, #127	; 0x7f
   c2a7a:	e9cd 0358 	strd	r0, r3, [sp, #352]	; 0x160
      data->per_channel_output_shift, GetTensorShape(input),
   c2a7e:	4641      	mov	r1, r8
   c2a80:	a83a      	add	r0, sp, #232	; 0xe8
   c2a82:	f7f3 ff02 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c2a86:	f8d8 9004 	ldr.w	r9, [r8, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2a8a:	f10d 08fc 	add.w	r8, sp, #252	; 0xfc
   c2a8e:	4631      	mov	r1, r6
   c2a90:	4640      	mov	r0, r8
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2a92:	ac44      	add	r4, sp, #272	; 0x110
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2a94:	f7f3 fef9 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2a98:	4659      	mov	r1, fp
   c2a9a:	4620      	mov	r0, r4
   c2a9c:	6876      	ldr	r6, [r6, #4]
   c2a9e:	f7f3 fef4 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2aa2:	f1bb 0f00 	cmp.w	fp, #0
   c2aa6:	d001      	beq.n	c2aac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x398>
   c2aa8:	f8db b004 	ldr.w	fp, [fp, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   c2aac:	ad49      	add	r5, sp, #292	; 0x124
   c2aae:	4639      	mov	r1, r7
   c2ab0:	4628      	mov	r0, r5
   c2ab2:	f7f3 feea 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
   c2ab6:	687b      	ldr	r3, [r7, #4]
   c2ab8:	f8cd 9000 	str.w	r9, [sp]
   c2abc:	aaa2      	add	r2, sp, #648	; 0x288
   c2abe:	a962      	add	r1, sp, #392	; 0x188
   c2ac0:	e9cd 5305 	strd	r5, r3, [sp, #20]
   c2ac4:	a84e      	add	r0, sp, #312	; 0x138
   c2ac6:	ab3a      	add	r3, sp, #232	; 0xe8
   c2ac8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   c2acc:	e9cd 8601 	strd	r8, r6, [sp, #4]
   c2ad0:	f7ff fab3 	bl	c203a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   c2ad4:	4628      	mov	r0, r5
   c2ad6:	f7f3 fc34 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2ada:	4620      	mov	r0, r4
   c2adc:	f7f3 fc31 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2ae0:	4640      	mov	r0, r8
   c2ae2:	e74e      	b.n	c2982 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x26e>
  op_params.padding_values.width = data->padding.width;
   c2ae4:	995c      	ldr	r1, [sp, #368]	; 0x170
  const int32_t input_offset = -input->params.zero_point;
   c2ae6:	f8d8 9010 	ldr.w	r9, [r8, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   c2aea:	6933      	ldr	r3, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
   c2aec:	6938      	ldr	r0, [r7, #16]
  op_params.padding_values.width = data->padding.width;
   c2aee:	f8ad 113a 	strh.w	r1, [sp, #314]	; 0x13a
  op_params.padding_type = PaddingType::kSame;
   c2af2:	2201      	movs	r2, #1
  op_params.padding_values.height = data->padding.height;
   c2af4:	995d      	ldr	r1, [sp, #372]	; 0x174
  op_params.padding_type = PaddingType::kSame;
   c2af6:	f88d 2138 	strb.w	r2, [sp, #312]	; 0x138
  op_params.padding_values.height = data->padding.height;
   c2afa:	f8ad 113c 	strh.w	r1, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2afe:	6869      	ldr	r1, [r5, #4]
   c2b00:	f8ad 1142 	strh.w	r1, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c2b04:	68a9      	ldr	r1, [r5, #8]
   c2b06:	f8ad 1144 	strh.w	r1, [sp, #324]	; 0x144
  op_params.dilation_width_factor = 1;
   c2b0a:	f8ad 2146 	strh.w	r2, [sp, #326]	; 0x146
  op_params.dilation_height_factor = 1;
   c2b0e:	f8ad 2148 	strh.w	r2, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2b12:	68e9      	ldr	r1, [r5, #12]
   c2b14:	f8ad 114a 	strh.w	r1, [sp, #330]	; 0x14a
  op_params.quantized_activation_min = data->output_activation_min;
   c2b18:	99e2      	ldr	r1, [sp, #904]	; 0x388
   c2b1a:	9158      	str	r1, [sp, #352]	; 0x160
  op_params.quantized_activation_max = data->output_activation_max;
   c2b1c:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   c2b1e:	9159      	str	r1, [sp, #356]	; 0x164
  const int32_t filter_offset = -filter->params.zero_point;
   c2b20:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
   c2b22:	f1c9 0100 	rsb	r1, r9, #0
  op_params.weights_offset = filter_offset;
   c2b26:	e9cd 1353 	strd	r1, r3, [sp, #332]	; 0x14c
  op_params.output_multiplier = data->output_multiplier;
   c2b2a:	9b60      	ldr	r3, [sp, #384]	; 0x180
   c2b2c:	9356      	str	r3, [sp, #344]	; 0x158
  op_params.output_shift = -data->output_shift;
   c2b2e:	9b61      	ldr	r3, [sp, #388]	; 0x184
  op_params.output_offset = output_offset;
   c2b30:	9055      	str	r0, [sp, #340]	; 0x154
  op_params.output_shift = -data->output_shift;
   c2b32:	425b      	negs	r3, r3
  const int filter_width = GetTensorShape(filter).Dims(2);
   c2b34:	4631      	mov	r1, r6
   c2b36:	a849      	add	r0, sp, #292	; 0x124
  op_params.output_shift = -data->output_shift;
   c2b38:	9357      	str	r3, [sp, #348]	; 0x15c
  const int filter_width = GetTensorShape(filter).Dims(2);
   c2b3a:	f7f3 fea6 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2b3e:	2102      	movs	r1, #2
   c2b40:	a849      	add	r0, sp, #292	; 0x124
   c2b42:	f7f3 fc09 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2b46:	4605      	mov	r5, r0
   c2b48:	a849      	add	r0, sp, #292	; 0x124
   c2b4a:	f7f3 fbfa 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const int input_depth = GetTensorShape(input).Dims(3);
   c2b4e:	4641      	mov	r1, r8
   c2b50:	a849      	add	r0, sp, #292	; 0x124
   c2b52:	f7f3 fe9a 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2b56:	4651      	mov	r1, sl
   c2b58:	a849      	add	r0, sp, #292	; 0x124
   c2b5a:	f7f3 fbfd 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2b5e:	900c      	str	r0, [sp, #48]	; 0x30
   c2b60:	a849      	add	r0, sp, #292	; 0x124
   c2b62:	f7f3 fbee 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const int output_depth = GetTensorShape(filter).Dims(3);
   c2b66:	4631      	mov	r1, r6
   c2b68:	a849      	add	r0, sp, #292	; 0x124
   c2b6a:	f7f3 fe8e 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2b6e:	4651      	mov	r1, sl
   c2b70:	a849      	add	r0, sp, #292	; 0x124
   c2b72:	f7f3 fbf1 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2b76:	900a      	str	r0, [sp, #40]	; 0x28
   c2b78:	a849      	add	r0, sp, #292	; 0x124
   c2b7a:	f7f3 fbe2 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  const int filter_height = GetTensorShape(filter).Dims(1);
   c2b7e:	4631      	mov	r1, r6
   c2b80:	a849      	add	r0, sp, #292	; 0x124
   c2b82:	f7f3 fe82 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2b86:	2201      	movs	r2, #1
   c2b88:	4611      	mov	r1, r2
   c2b8a:	a849      	add	r0, sp, #292	; 0x124
   c2b8c:	f7f3 fbe4 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2b90:	900b      	str	r0, [sp, #44]	; 0x2c
   c2b92:	a849      	add	r0, sp, #292	; 0x124
   c2b94:	f7f3 fbd5 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
  if ((filter_width == 8) && (input_offset == 0) && (input_depth == 1) &&
   c2b98:	2d08      	cmp	r5, #8
   c2b9a:	f10d 0ae8 	add.w	sl, sp, #232	; 0xe8
   c2b9e:	ad3f      	add	r5, sp, #252	; 0xfc
   c2ba0:	d133      	bne.n	c2c0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
   c2ba2:	f1b9 0f00 	cmp.w	r9, #0
   c2ba6:	d130      	bne.n	c2c0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
   c2ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2bac:	2b01      	cmp	r3, #1
   c2bae:	d12c      	bne.n	c2c0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
      output_depth * filter_width * filter_height * input_depth;
   c2bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2bb2:	fb02 f903 	mul.w	r9, r2, r3
   c2bb6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
  if ((filter_width == 8) && (input_offset == 0) && (input_depth == 1) &&
   c2bba:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
   c2bbe:	dc24      	bgt.n	c2c0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
    static TfLiteNode* initialized_node_address = node;
   c2bc0:	4a9f      	ldr	r2, [pc, #636]	; (c2e40 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x72c>)
   c2bc2:	f8df 928c 	ldr.w	r9, [pc, #652]	; c2e50 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x73c>
   c2bc6:	7813      	ldrb	r3, [r2, #0]
   c2bc8:	f3bf 8f5b 	dmb	ish
   c2bcc:	f013 0f01 	tst.w	r3, #1
   c2bd0:	d10a      	bne.n	c2be8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4d4>
   c2bd2:	4610      	mov	r0, r2
   c2bd4:	f7f1 ffa8 	bl	b4b28 <__cxa_guard_acquire>
   c2bd8:	4a99      	ldr	r2, [pc, #612]	; (c2e40 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x72c>)
   c2bda:	b128      	cbz	r0, c2be8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4d4>
   c2bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2bde:	f8c9 3000 	str.w	r3, [r9]
   c2be2:	4610      	mov	r0, r2
   c2be4:	f7f1 ffa5 	bl	b4b32 <__cxa_guard_release>
    if (initialized_node_address == node) {
   c2be8:	f8d9 3000 	ldr.w	r3, [r9]
   c2bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2bee:	429a      	cmp	r2, r3
   c2bf0:	d03a      	beq.n	c2c68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x554>
      if (!has_warned) {
   c2bf2:	f8df 9260 	ldr.w	r9, [pc, #608]	; c2e54 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x740>
   c2bf6:	f899 3000 	ldrb.w	r3, [r9]
   c2bfa:	b933      	cbnz	r3, c2c0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
        context->ReportError(
   c2bfc:	6963      	ldr	r3, [r4, #20]
   c2bfe:	4991      	ldr	r1, [pc, #580]	; (c2e44 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x730>)
   c2c00:	4620      	mov	r0, r4
   c2c02:	4798      	blx	r3
        has_warned = true;
   c2c04:	2301      	movs	r3, #1
   c2c06:	f889 3000 	strb.w	r3, [r9]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2c0a:	4641      	mov	r1, r8
   c2c0c:	a849      	add	r0, sp, #292	; 0x124
   c2c0e:	f7f3 fe3c 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   c2c12:	4631      	mov	r1, r6
   c2c14:	a844      	add	r0, sp, #272	; 0x110
   c2c16:	f8d8 4004 	ldr.w	r4, [r8, #4]
   c2c1a:	f7f3 fe36 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c2c1e:	4659      	mov	r1, fp
   c2c20:	4628      	mov	r0, r5
   c2c22:	6876      	ldr	r6, [r6, #4]
   c2c24:	f7f3 fe31 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2c28:	f1bb 0f00 	cmp.w	fp, #0
   c2c2c:	d001      	beq.n	c2c32 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x51e>
   c2c2e:	f8db b004 	ldr.w	fp, [fp, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   c2c32:	4639      	mov	r1, r7
   c2c34:	4650      	mov	r0, sl
   c2c36:	f7f3 fe28 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
   c2c3a:	687b      	ldr	r3, [r7, #4]
   c2c3c:	9600      	str	r6, [sp, #0]
   c2c3e:	4622      	mov	r2, r4
   c2c40:	a949      	add	r1, sp, #292	; 0x124
   c2c42:	e9cd a303 	strd	sl, r3, [sp, #12]
   c2c46:	a84e      	add	r0, sp, #312	; 0x138
   c2c48:	ab44      	add	r3, sp, #272	; 0x110
   c2c4a:	e9cd 5b01 	strd	r5, fp, [sp, #4]
   c2c4e:	f7ff fc3d 	bl	c24cc <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>
   c2c52:	4650      	mov	r0, sl
   c2c54:	f7f3 fb75 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c2c58:	4628      	mov	r0, r5
   c2c5a:	f7f3 fb72 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   c2c5e:	a844      	add	r0, sp, #272	; 0x110
   c2c60:	f7f3 fb6f 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2c64:	a849      	add	r0, sp, #292	; 0x124
   c2c66:	e68f      	b.n	c2988 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x274>
        context, op_params, GetTensorShape(input),
   c2c68:	4641      	mov	r1, r8
   c2c6a:	a844      	add	r0, sp, #272	; 0x110
   c2c6c:	f7f3 fe0d 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2c70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c2c74:	9318      	str	r3, [sp, #96]	; 0x60
        GetTensorData<uint8_t>(input), GetTensorShape(filter),
   c2c76:	4631      	mov	r1, r6
   c2c78:	4628      	mov	r0, r5
   c2c7a:	f7f3 fe06 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2c7e:	6873      	ldr	r3, [r6, #4]
   c2c80:	9319      	str	r3, [sp, #100]	; 0x64
        GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   c2c82:	4659      	mov	r1, fp
   c2c84:	4650      	mov	r0, sl
   c2c86:	f7f3 fe00 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2c8a:	f1bb 0f00 	cmp.w	fp, #0
   c2c8e:	d001      	beq.n	c2c94 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x580>
   c2c90:	f8db b004 	ldr.w	fp, [fp, #4]
        GetTensorData<int32_t>(bias), GetTensorShape(output),
   c2c94:	4639      	mov	r1, r7
   c2c96:	a835      	add	r0, sp, #212	; 0xd4
   c2c98:	f7f3 fdf7 	bl	b688a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int depth_multiplier = params.depth_multiplier;
   c2c9c:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
   c2ca0:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   c2ca2:	9b58      	ldr	r3, [sp, #352]	; 0x160
   c2ca4:	931e      	str	r3, [sp, #120]	; 0x78
  const int32 output_activation_max = params.quantized_activation_max;
   c2ca6:	9b59      	ldr	r3, [sp, #356]	; 0x164
   c2ca8:	931f      	str	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2caa:	9b44      	ldr	r3, [sp, #272]	; 0x110
   c2cac:	2b04      	cmp	r3, #4
   c2cae:	d001      	beq.n	c2cb4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
   c2cb0:	f001 fda4 	bl	c47fc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c2cb4:	682b      	ldr	r3, [r5, #0]
   c2cb6:	2b04      	cmp	r3, #4
   c2cb8:	d1fa      	bne.n	c2cb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c2cba:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   c2cbc:	2e04      	cmp	r6, #4
   c2cbe:	d1f7      	bne.n	c2cb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c2cc0:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
   c2cc4:	4293      	cmp	r3, r2
   c2cc6:	dcf3      	bgt.n	c2cb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2cc8:	2300      	movs	r3, #0
   c2cca:	4619      	mov	r1, r3
   c2ccc:	aa35      	add	r2, sp, #212	; 0xd4
   c2cce:	a844      	add	r0, sp, #272	; 0x110
   c2cd0:	f7f6 f827 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2cd4:	2303      	movs	r3, #3
   c2cd6:	4619      	mov	r1, r3
   c2cd8:	aa35      	add	r2, sp, #212	; 0xd4
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2cda:	9028      	str	r0, [sp, #160]	; 0xa0
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2cdc:	4628      	mov	r0, r5
   c2cde:	f7f6 f820 	bl	b8d22 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c2ce2:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2ce4:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   c2ce6:	a844      	add	r0, sp, #272	; 0x110
   c2ce8:	f7f3 fb36 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c2cec:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c2cee:	9021      	str	r0, [sp, #132]	; 0x84
  const int input_width = input_shape.Dims(2);
   c2cf0:	a844      	add	r0, sp, #272	; 0x110
   c2cf2:	f7f3 fb31 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c2cf6:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c2cf8:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = input_shape.Dims(3);
   c2cfa:	a844      	add	r0, sp, #272	; 0x110
   c2cfc:	f7f3 fb2c 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c2d00:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c2d02:	9011      	str	r0, [sp, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
   c2d04:	4628      	mov	r0, r5
   c2d06:	f7f3 fb27 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c2d0a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c2d0c:	900c      	str	r0, [sp, #48]	; 0x30
  const int filter_width = filter_shape.Dims(2);
   c2d0e:	4628      	mov	r0, r5
   c2d10:	f7f3 fb22 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c2d14:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c2d16:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_height = output_shape.Dims(1);
   c2d18:	a835      	add	r0, sp, #212	; 0xd4
   c2d1a:	f7f3 fb1d 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c2d1e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c2d20:	9029      	str	r0, [sp, #164]	; 0xa4
  const int output_width = output_shape.Dims(2);
   c2d22:	a835      	add	r0, sp, #212	; 0xd4
   c2d24:	f7f3 fb18 	bl	b6358 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2d28:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2d2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
   c2d2c:	902a      	str	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2d2e:	4353      	muls	r3, r2
   c2d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2d32:	429a      	cmp	r2, r3
   c2d34:	d1bc      	bne.n	c2cb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c2d36:	a83a      	add	r0, sp, #232	; 0xe8
   c2d38:	f7f7 faf5 	bl	ba326 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c2d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2d3e:	4283      	cmp	r3, r0
   c2d40:	d1b6      	bne.n	c2cb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
      output_depth * filter_width * filter_height * input_depth;
   c2d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c2d44:	435a      	muls	r2, r3
   c2d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2d48:	435a      	muls	r2, r3
  const int needed_size =
   c2d4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2d4c:	435a      	muls	r2, r3
  if (needed_size > kReshapedFilterDataSize) {
   c2d4e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   c2d52:	dd10      	ble.n	c2d76 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x662>
    context->ReportError(
   c2d54:	6965      	ldr	r5, [r4, #20]
   c2d56:	493c      	ldr	r1, [pc, #240]	; (c2e48 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x734>)
   c2d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
   c2d5c:	4620      	mov	r0, r4
   c2d5e:	47a8      	blx	r5
        GetTensorData<int32_t>(bias), GetTensorShape(output),
   c2d60:	a835      	add	r0, sp, #212	; 0xd4
   c2d62:	f7f3 faee 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   c2d66:	a83a      	add	r0, sp, #232	; 0xe8
   c2d68:	f7f3 faeb 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorData<uint8_t>(input), GetTensorShape(filter),
   c2d6c:	a83f      	add	r0, sp, #252	; 0xfc
   c2d6e:	f7f3 fae8 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
        context, op_params, GetTensorShape(input),
   c2d72:	a844      	add	r0, sp, #272	; 0x110
   c2d74:	e608      	b.n	c2988 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x274>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c2d76:	687b      	ldr	r3, [r7, #4]
   c2d78:	9325      	str	r3, [sp, #148]	; 0x94
  const int stride_width = params.stride_width;
   c2d7a:	f9bd 3142 	ldrsh.w	r3, [sp, #322]	; 0x142
   c2d7e:	931a      	str	r3, [sp, #104]	; 0x68
  const int stride_height = params.stride_height;
   c2d80:	f9bd 3144 	ldrsh.w	r3, [sp, #324]	; 0x144
   c2d84:	931b      	str	r3, [sp, #108]	; 0x6c
  const int pad_width = params.padding_values.width;
   c2d86:	f9bd 313a 	ldrsh.w	r3, [sp, #314]	; 0x13a
   c2d8a:	931c      	str	r3, [sp, #112]	; 0x70
  const int pad_height = params.padding_values.height;
   c2d8c:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
   c2d90:	931d      	str	r3, [sp, #116]	; 0x74
  const int32 input_offset = params.input_offset;
   c2d92:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   c2d94:	9326      	str	r3, [sp, #152]	; 0x98
  const int32 filter_offset = params.weights_offset;
   c2d96:	9b54      	ldr	r3, [sp, #336]	; 0x150
   c2d98:	9320      	str	r3, [sp, #128]	; 0x80
  const int32 output_offset = params.output_offset;
   c2d9a:	9b55      	ldr	r3, [sp, #340]	; 0x154
   c2d9c:	9327      	str	r3, [sp, #156]	; 0x9c
  const int32 output_multiplier = params.output_multiplier;
   c2d9e:	9b56      	ldr	r3, [sp, #344]	; 0x158
   c2da0:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   c2da4:	9b57      	ldr	r3, [sp, #348]	; 0x15c
   c2da6:	ee08 3a90 	vmov	s17, r3
  RuntimeShape() : size_(0) {}
   c2daa:	2300      	movs	r3, #0
   c2dac:	9349      	str	r3, [sp, #292]	; 0x124
  reshaped_filter_shape.BuildFrom(
   c2dae:	2301      	movs	r3, #1
   c2db0:	9331      	str	r3, [sp, #196]	; 0xc4
   c2db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2db4:	9332      	str	r3, [sp, #200]	; 0xc8
   c2db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2db8:	9333      	str	r3, [sp, #204]	; 0xcc
    Resize(dimensions_count);
   c2dba:	4631      	mov	r1, r6
   c2dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2dbe:	9334      	str	r3, [sp, #208]	; 0xd0
   c2dc0:	a849      	add	r0, sp, #292	; 0x124
   c2dc2:	f7f3 faeb 	bl	b639c <_ZN6tflite12RuntimeShape6ResizeEi>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c2dc6:	9b49      	ldr	r3, [sp, #292]	; 0x124
   c2dc8:	2b04      	cmp	r3, #4
   c2dca:	bfcc      	ite	gt
   c2dcc:	9a4a      	ldrgt	r2, [sp, #296]	; 0x128
   c2dce:	aa4a      	addle	r2, sp, #296	; 0x128
      *data = it;
   c2dd0:	ab31      	add	r3, sp, #196	; 0xc4
   c2dd2:	ad35      	add	r5, sp, #212	; 0xd4
   c2dd4:	461c      	mov	r4, r3
   c2dd6:	cc03      	ldmia	r4!, {r0, r1}
   c2dd8:	42ac      	cmp	r4, r5
   c2dda:	6010      	str	r0, [r2, #0]
   c2ddc:	6051      	str	r1, [r2, #4]
   c2dde:	4623      	mov	r3, r4
   c2de0:	f102 0208 	add.w	r2, r2, #8
   c2de4:	d1f6      	bne.n	c2dd4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>
  if (!is_reshaped_filter_initialized) {
   c2de6:	4b19      	ldr	r3, [pc, #100]	; (c2e4c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x738>)
   c2de8:	781c      	ldrb	r4, [r3, #0]
   c2dea:	2c00      	cmp	r4, #0
   c2dec:	d139      	bne.n	c2e62 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74e>
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2dee:	f8df 8068 	ldr.w	r8, [pc, #104]	; c2e58 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x744>
    for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2df4:	42a3      	cmp	r3, r4
   c2df6:	dd31      	ble.n	c2e5c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x748>
      for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2df8:	2500      	movs	r5, #0
   c2dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2dfc:	42ab      	cmp	r3, r5
   c2dfe:	dd1c      	ble.n	c2e3a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x726>
        for (int oc = 0; oc < output_depth; ++oc) {
   c2e00:	2600      	movs	r6, #0
   c2e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2e04:	42b3      	cmp	r3, r6
   c2e06:	dd16      	ble.n	c2e36 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x722>
              filter_data + Offset(filter_shape, 0, filter_y, filter_x, oc);
   c2e08:	9600      	str	r6, [sp, #0]
   c2e0a:	462b      	mov	r3, r5
   c2e0c:	4622      	mov	r2, r4
   c2e0e:	2100      	movs	r1, #0
   c2e10:	a83f      	add	r0, sp, #252	; 0xfc
   c2e12:	f7f3 fb08 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2e16:	4632      	mov	r2, r6
              filter_data + Offset(filter_shape, 0, filter_y, filter_x, oc);
   c2e18:	4607      	mov	r7, r0
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2e1a:	4623      	mov	r3, r4
   c2e1c:	9500      	str	r5, [sp, #0]
   c2e1e:	2100      	movs	r1, #0
   c2e20:	a849      	add	r0, sp, #292	; 0x124
   c2e22:	f7f3 fb00 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              static_cast<int16_t>(*current_filter) + filter_offset;
   c2e26:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
   c2e2a:	5ddb      	ldrb	r3, [r3, r7]
   c2e2c:	4413      	add	r3, r2
          *reshaped_filter =
   c2e2e:	f828 3010 	strh.w	r3, [r8, r0, lsl #1]
        for (int oc = 0; oc < output_depth; ++oc) {
   c2e32:	3601      	adds	r6, #1
   c2e34:	e7e5      	b.n	c2e02 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6ee>
      for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2e36:	3501      	adds	r5, #1
   c2e38:	e7df      	b.n	c2dfa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e6>
    for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2e3a:	3401      	adds	r4, #1
   c2e3c:	e7d9      	b.n	c2df2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6de>
   c2e3e:	bf00      	nop
   c2e40:	2003decc 	.word	0x2003decc
   c2e44:	000c93c4 	.word	0x000c93c4
   c2e48:	000c9457 	.word	0x000c9457
   c2e4c:	2003e6d0 	.word	0x2003e6d0
   c2e50:	2003e6d4 	.word	0x2003e6d4
   c2e54:	2003e6d1 	.word	0x2003e6d1
   c2e58:	2003ded0 	.word	0x2003ded0
    is_reshaped_filter_initialized = true;
   c2e5c:	4b9a      	ldr	r3, [pc, #616]	; (c30c8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b4>)
   c2e5e:	2201      	movs	r2, #1
   c2e60:	701a      	strb	r2, [r3, #0]
        for (int oc = 0; oc < output_depth; ++oc) {
   c2e62:	f04f 0a00 	mov.w	sl, #0
  for (int b = 0; b < batches; ++b) {
   c2e66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   c2e68:	4553      	cmp	r3, sl
   c2e6a:	f340 811b 	ble.w	c30a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x990>
   c2e6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   c2e70:	9314      	str	r3, [sp, #80]	; 0x50
   c2e72:	425b      	negs	r3, r3
   c2e74:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c2e76:	2300      	movs	r3, #0
   c2e78:	9312      	str	r3, [sp, #72]	; 0x48
   c2e7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   c2e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c2e7e:	4293      	cmp	r3, r2
   c2e80:	f340 810d 	ble.w	c309e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x98a>
   c2e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2e88:	9821      	ldr	r0, [sp, #132]	; 0x84
   c2e8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2e8e:	932d      	str	r3, [sp, #180]	; 0xb4
   c2e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2e92:	2b00      	cmp	r3, #0
   c2e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2e96:	bfa8      	it	ge
   c2e98:	2300      	movge	r3, #0
   c2e9a:	9323      	str	r3, [sp, #140]	; 0x8c
   c2e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   c2e9e:	4413      	add	r3, r2
   c2ea0:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
   c2ea4:	440a      	add	r2, r1
   c2ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
   c2ea8:	4290      	cmp	r0, r2
   c2eaa:	bfc8      	it	gt
   c2eac:	460b      	movgt	r3, r1
   c2eae:	932b      	str	r3, [sp, #172]	; 0xac
   c2eb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   c2eb2:	9310      	str	r3, [sp, #64]	; 0x40
   c2eb4:	425b      	negs	r3, r3
   c2eb6:	930f      	str	r3, [sp, #60]	; 0x3c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2eb8:	2300      	movs	r3, #0
   c2eba:	9313      	str	r3, [sp, #76]	; 0x4c
   c2ebc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   c2ebe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c2ec0:	4293      	cmp	r3, r2
   c2ec2:	f340 80e1 	ble.w	c3088 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x974>
   c2ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c2ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2eca:	9917      	ldr	r1, [sp, #92]	; 0x5c
   c2ecc:	4413      	add	r3, r2
   c2ece:	9324      	str	r3, [sp, #144]	; 0x90
   c2ed0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   c2ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2ed4:	9824      	ldr	r0, [sp, #144]	; 0x90
   c2ed6:	4413      	add	r3, r2
   c2ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c2eda:	4281      	cmp	r1, r0
   c2edc:	bfc8      	it	gt
   c2ede:	4613      	movgt	r3, r2
   c2ee0:	932c      	str	r3, [sp, #176]	; 0xb0
        for (int ic = 0; ic < input_depth; ++ic) {
   c2ee2:	2300      	movs	r3, #0
   c2ee4:	930d      	str	r3, [sp, #52]	; 0x34
   c2ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2ee8:	9315      	str	r3, [sp, #84]	; 0x54
        for (int ic = 0; ic < input_depth; ++ic) {
   c2eea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2eec:	4293      	cmp	r3, r2
   c2eee:	f340 80c0 	ble.w	c3072 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x95e>
   c2ef2:	9c15      	ldr	r4, [sp, #84]	; 0x54
          for (int m = 0; m < depth_multiplier; m++) {
   c2ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2ef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c2ef8:	1ae3      	subs	r3, r4, r3
   c2efa:	429a      	cmp	r2, r3
   c2efc:	f340 80b2 	ble.w	c3064 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x950>
            if (in_x_origin < 0) {
   c2f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              is_out_of_x_bounds = true;
   c2f02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2f04:	9924      	ldr	r1, [sp, #144]	; 0x90
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2f06:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            if (in_x_origin < 0) {
   c2f08:	2b00      	cmp	r3, #0
              in_x_start = 0;
   c2f0a:	bfbb      	ittet	lt
   c2f0c:	2300      	movlt	r3, #0
   c2f0e:	9322      	strlt	r3, [sp, #136]	; 0x88
            int filter_x_start = 0;
   c2f10:	2700      	movge	r7, #0
              is_out_of_x_bounds = true;
   c2f12:	2301      	movlt	r3, #1
            bool is_out_of_x_bounds = false;
   c2f14:	bfaa      	itet	ge
   c2f16:	970e      	strge	r7, [sp, #56]	; 0x38
              is_out_of_x_bounds = true;
   c2f18:	930e      	strlt	r3, [sp, #56]	; 0x38
            if (in_x_origin < 0) {
   c2f1a:	9322      	strge	r3, [sp, #136]	; 0x88
              is_out_of_x_bounds = true;
   c2f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
              filter_x_start = 0 - in_x_origin;
   c2f1e:	bfb8      	it	lt
   c2f20:	9f10      	ldrlt	r7, [sp, #64]	; 0x40
              is_out_of_x_bounds = true;
   c2f22:	428a      	cmp	r2, r1
   c2f24:	bfd8      	it	le
   c2f26:	2301      	movle	r3, #1
   c2f28:	930e      	str	r3, [sp, #56]	; 0x38
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2f2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   c2f2c:	1b9b      	subs	r3, r3, r6
            int32 acc = 0;
   c2f2e:	2500      	movs	r5, #0
   c2f30:	932e      	str	r3, [sp, #184]	; 0xb8
   c2f32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c2f34:	199a      	adds	r2, r3, r6
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2f36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   c2f38:	42b3      	cmp	r3, r6
   c2f3a:	dd70      	ble.n	c301e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x90a>
                  input_data + Offset(input_shape, b, in_y, in_x_start, ic);
   c2f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2f3e:	9300      	str	r3, [sp, #0]
   c2f40:	4651      	mov	r1, sl
   c2f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
   c2f44:	a844      	add	r0, sp, #272	; 0x110
   c2f46:	f7f3 fa6e 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c2f4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c2f4c:	eb03 0800 	add.w	r8, r3, r0
              if ((filter_width == 8) && !is_out_of_x_bounds) {
   c2f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2f52:	2b08      	cmp	r3, #8
                  input_data + Offset(input_shape, b, in_y, in_x_start, ic);
   c2f54:	4681      	mov	r9, r0
              if ((filter_width == 8) && !is_out_of_x_bounds) {
   c2f56:	d146      	bne.n	c2fe6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8d2>
   c2f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c2f5a:	2b00      	cmp	r3, #0
   c2f5c:	d143      	bne.n	c2fe6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8d2>
                    reshaped_filter_data + Offset(reshaped_filter_shape, 0, oc,
   c2f5e:	990e      	ldr	r1, [sp, #56]	; 0x38
   c2f60:	9700      	str	r7, [sp, #0]
   c2f62:	4633      	mov	r3, r6
   c2f64:	4622      	mov	r2, r4
   c2f66:	a849      	add	r0, sp, #292	; 0x124
   c2f68:	f7f3 fa5d 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                  filter_y, filter_x_start);
   c2f6c:	4a57      	ldr	r2, [pc, #348]	; (c30cc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>)
                const uint32_t input_vals0 =
   c2f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
                                                  filter_y, filter_x_start);
   c2f70:	eb02 0340 	add.w	r3, r2, r0, lsl #1
                const uint32_t input_vals0 =
   c2f74:	f851 1009 	ldr.w	r1, [r1, r9]
                const int32_t filter_vals0 =
   c2f78:	f852 9010 	ldr.w	r9, [r2, r0, lsl #1]
                const int32_t filter_vals1 =
   c2f7c:	f8d3 e004 	ldr.w	lr, [r3, #4]
                const uint32_t input_vals1 =
   c2f80:	f8d8 2004 	ldr.w	r2, [r8, #4]
                const int32_t filter_vals3 =
   c2f84:	e9d3 c002 	ldrd	ip, r0, [r3, #8]
                acc += filter_val1 * input_val1;
   c2f88:	ea4f 4329 	mov.w	r3, r9, asr #16
   c2f8c:	932f      	str	r3, [sp, #188]	; 0xbc
                acc += filter_val0 * input_val0;
   c2f8e:	fa0f f989 	sxth.w	r9, r9
   c2f92:	b2cb      	uxtb	r3, r1
   c2f94:	fb09 5903 	mla	r9, r9, r3, r5
                acc += filter_val1 * input_val1;
   c2f98:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   c2f9a:	f3c1 2807 	ubfx	r8, r1, #8, #8
   c2f9e:	fb03 9808 	mla	r8, r3, r8, r9
                acc += filter_val2 * input_val2;
   c2fa2:	f3c1 4307 	ubfx	r3, r1, #16, #8
   c2fa6:	fa0f f98e 	sxth.w	r9, lr
   c2faa:	fb09 8803 	mla	r8, r9, r3, r8
                const uint8 input_val3 = (input_vals0 >> 24) & 0xff;
   c2fae:	0e09      	lsrs	r1, r1, #24
                acc += filter_val3 * input_val3;
   c2fb0:	ea4f 452e 	mov.w	r5, lr, asr #16
   c2fb4:	fb01 8505 	mla	r5, r1, r5, r8
                acc += filter_val4 * input_val4;
   c2fb8:	fa0f f38c 	sxth.w	r3, ip
   c2fbc:	fa5f f882 	uxtb.w	r8, r2
   c2fc0:	fb03 5508 	mla	r5, r3, r8, r5
                acc += filter_val5 * input_val5;
   c2fc4:	f3c2 2107 	ubfx	r1, r2, #8, #8
   c2fc8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   c2fcc:	fb0c 5501 	mla	r5, ip, r1, r5
                acc += filter_val6 * input_val6;
   c2fd0:	b203      	sxth	r3, r0
   c2fd2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
   c2fd6:	fb03 550c 	mla	r5, r3, ip, r5
                acc += filter_val7 * input_val7;
   c2fda:	1400      	asrs	r0, r0, #16
                const uint8 input_val7 = (input_vals1 >> 24) & 0xff;
   c2fdc:	0e12      	lsrs	r2, r2, #24
                acc += filter_val7 * input_val7;
   c2fde:	fb02 5500 	mla	r5, r2, r0, r5
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2fe2:	3601      	adds	r6, #1
   c2fe4:	e7a5      	b.n	c2f32 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x81e>
                    Offset(filter_shape, 0, filter_y, filter_x_start, oc);
   c2fe6:	463b      	mov	r3, r7
   c2fe8:	9400      	str	r4, [sp, #0]
   c2fea:	4632      	mov	r2, r6
   c2fec:	2100      	movs	r1, #0
   c2fee:	a83f      	add	r0, sp, #252	; 0xfc
   c2ff0:	f7f3 fa19 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c2ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2ff6:	4418      	add	r0, r3
                for (int filter_x = filter_x_start; filter_x < filter_x_end;
   c2ff8:	463b      	mov	r3, r7
   c2ffa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   c2ffc:	429a      	cmp	r2, r3
   c2ffe:	ddf0      	ble.n	c2fe2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8ce>
                  current_input += input_depth;
   c3000:	9a11      	ldr	r2, [sp, #68]	; 0x44
                  current_filter += output_depth;
   c3002:	9909      	ldr	r1, [sp, #36]	; 0x24
                  int32 input_val = *current_input;
   c3004:	f898 c000 	ldrb.w	ip, [r8]
                  current_input += input_depth;
   c3008:	4490      	add	r8, r2
                  int32 filter_val = *current_filter;
   c300a:	7802      	ldrb	r2, [r0, #0]
                  current_filter += output_depth;
   c300c:	4408      	add	r0, r1
                      (filter_val + filter_offset) * (input_val + input_offset);
   c300e:	9920      	ldr	r1, [sp, #128]	; 0x80
   c3010:	440a      	add	r2, r1
   c3012:	9926      	ldr	r1, [sp, #152]	; 0x98
   c3014:	4461      	add	r1, ip
                  acc +=
   c3016:	fb01 5502 	mla	r5, r1, r2, r5
                for (int filter_x = filter_x_start; filter_x < filter_x_end;
   c301a:	3301      	adds	r3, #1
   c301c:	e7ed      	b.n	c2ffa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e6>
            if (bias_data) {
   c301e:	f1bb 0f00 	cmp.w	fp, #0
   c3022:	d002      	beq.n	c302a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x916>
              acc += bias_data[oc];
   c3024:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   c3028:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c302a:	ee18 2a90 	vmov	r2, s17
   c302e:	ee18 1a10 	vmov	r1, s16
   c3032:	4628      	mov	r0, r5
   c3034:	f7f7 f988 	bl	ba348 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c3038:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   c303c:	4605      	mov	r5, r0
   c303e:	9400      	str	r4, [sp, #0]
   c3040:	4651      	mov	r1, sl
   c3042:	a835      	add	r0, sp, #212	; 0xd4
   c3044:	f7f3 f9ef 	bl	b6426 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            acc += output_offset;
   c3048:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   c304a:	441d      	add	r5, r3
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c304c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   c304e:	429d      	cmp	r5, r3
   c3050:	bfb8      	it	lt
   c3052:	461d      	movlt	r5, r3
   c3054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   c3056:	429d      	cmp	r5, r3
   c3058:	bfa8      	it	ge
   c305a:	461d      	movge	r5, r3
   c305c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   c305e:	3401      	adds	r4, #1
   c3060:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; m++) {
   c3062:	e747      	b.n	c2ef4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7e0>
        for (int ic = 0; ic < input_depth; ++ic) {
   c3064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c3066:	3301      	adds	r3, #1
   c3068:	930d      	str	r3, [sp, #52]	; 0x34
   c306a:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	; 0x54
   c306e:	4413      	add	r3, r2
   c3070:	e739      	b.n	c2ee6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7d2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c3072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c3076:	3301      	adds	r3, #1
   c3078:	9313      	str	r3, [sp, #76]	; 0x4c
   c307a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c307c:	4413      	add	r3, r2
   c307e:	930f      	str	r3, [sp, #60]	; 0x3c
   c3080:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c3082:	1a9b      	subs	r3, r3, r2
   c3084:	9310      	str	r3, [sp, #64]	; 0x40
   c3086:	e719      	b.n	c2ebc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c3088:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c308a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c308c:	3301      	adds	r3, #1
   c308e:	9312      	str	r3, [sp, #72]	; 0x48
   c3090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3092:	4413      	add	r3, r2
   c3094:	930b      	str	r3, [sp, #44]	; 0x2c
   c3096:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3098:	1a9b      	subs	r3, r3, r2
   c309a:	9314      	str	r3, [sp, #80]	; 0x50
   c309c:	e6ed      	b.n	c2e7a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x766>
  for (int b = 0; b < batches; ++b) {
   c309e:	f10a 0a01 	add.w	sl, sl, #1
   c30a2:	e6e0      	b.n	c2e66 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x752>
  RuntimeShape reshaped_filter_shape;
   c30a4:	a849      	add	r0, sp, #292	; 0x124
   c30a6:	f7f3 f94c 	bl	b6342 <_ZN6tflite12RuntimeShapeD1Ev>
   c30aa:	e659      	b.n	c2d60 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x64c>
      context->ReportError(context, "Type %s (%d) not supported.",
   c30ac:	4650      	mov	r0, sl
   c30ae:	6965      	ldr	r5, [r4, #20]
   c30b0:	f7f1 fd68 	bl	b4b84 <TfLiteTypeGetName>
   c30b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c30b6:	4906      	ldr	r1, [pc, #24]	; (c30d0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9bc>)
   c30b8:	f819 3003 	ldrb.w	r3, [r9, r3]
   c30bc:	4602      	mov	r2, r0
   c30be:	4620      	mov	r0, r4
   c30c0:	47a8      	blx	r5
      return kTfLiteError;
   c30c2:	f7ff bb61 	b.w	c2788 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
   c30c6:	bf00      	nop
   c30c8:	2003e6d0 	.word	0x2003e6d0
   c30cc:	2003ded0 	.word	0x2003ded0
   c30d0:	000c85fa 	.word	0x000c85fa

000c30d4 <DebugLog>:
#define DEBUG_SERIAL_OBJECT (Serial)
#endif

// On Arduino platforms, we set up a serial port and write to it for debug
// logging.
extern "C" void DebugLog(const char* s) {
   c30d4:	b538      	push	{r3, r4, r5, lr}
  static bool is_initialized = false;
  if (!is_initialized) {
   c30d6:	4d09      	ldr	r5, [pc, #36]	; (c30fc <DebugLog+0x28>)
   c30d8:	782b      	ldrb	r3, [r5, #0]
extern "C" void DebugLog(const char* s) {
   c30da:	4604      	mov	r4, r0
  if (!is_initialized) {
   c30dc:	b93b      	cbnz	r3, c30ee <DebugLog+0x1a>
    DEBUG_SERIAL_OBJECT.begin(9600);
   c30de:	f001 fe1d 	bl	c4d1c <_Z16_fetch_usbserialv>
   c30e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c30e6:	f001 fe0d 	bl	c4d04 <_ZN9USBSerial5beginEl>
    is_initialized = true;
   c30ea:	2301      	movs	r3, #1
   c30ec:	702b      	strb	r3, [r5, #0]
  }
  DEBUG_SERIAL_OBJECT.print(s);
   c30ee:	f001 fe15 	bl	c4d1c <_Z16_fetch_usbserialv>
   c30f2:	4621      	mov	r1, r4
}
   c30f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DEBUG_SERIAL_OBJECT.print(s);
   c30f8:	f001 bc20 	b.w	c493c <_ZN5Print5printEPKc>
   c30fc:	2003e6d8 	.word	0x2003e6d8

000c3100 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
   c3100:	4770      	bx	lr

000c3102 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    error_reporter->Report("%s", line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   c3102:	6880      	ldr	r0, [r0, #8]
   c3104:	4770      	bx	lr

000c3106 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   c3106:	b510      	push	{r4, lr}
}
   c3108:	2128      	movs	r1, #40	; 0x28
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   c310a:	4604      	mov	r4, r0
}
   c310c:	f7f1 fcfd 	bl	b4b0a <_ZdlPvj>
   c3110:	4620      	mov	r0, r4
   c3112:	bd10      	pop	{r4, pc}

000c3114 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
   c3114:	b538      	push	{r3, r4, r5, lr}
   c3116:	4604      	mov	r4, r0
   c3118:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   c311a:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   c311e:	428d      	cmp	r5, r1
   c3120:	db05      	blt.n	c312e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    error_reporter->Report("Too many buffers (max is %d)", max_buffer_count_);
   c3122:	460a      	mov	r2, r1
   c3124:	490a      	ldr	r1, [pc, #40]	; (c3150 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x3c>)
   c3126:	f001 f9f3 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   c312a:	2001      	movs	r0, #1
}
   c312c:	bd38      	pop	{r3, r4, r5, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   c312e:	68e0      	ldr	r0, [r4, #12]
   c3130:	210c      	movs	r1, #12
   c3132:	434d      	muls	r5, r1
   c3134:	1941      	adds	r1, r0, r5
  current->size = size;
   c3136:	5142      	str	r2, [r0, r5]
  current->first_time_used = first_time_used;
   c3138:	604b      	str	r3, [r1, #4]
  current->last_time_used = last_time_used;
   c313a:	9b04      	ldr	r3, [sp, #16]
   c313c:	608b      	str	r3, [r1, #8]
  ++buffer_count_;
   c313e:	68a3      	ldr	r3, [r4, #8]
   c3140:	3301      	adds	r3, #1
   c3142:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
   c3144:	2301      	movs	r3, #1
   c3146:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return kTfLiteOk;
   c314a:	2000      	movs	r0, #0
   c314c:	e7ee      	b.n	c312c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   c314e:	bf00      	nop
   c3150:	000c949b 	.word	0x000c949b

000c3154 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   c3154:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   c3156:	4604      	mov	r4, r0
   c3158:	460b      	mov	r3, r1
   c315a:	2501      	movs	r5, #1
    any_swapped = false;
   c315c:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   c315e:	4295      	cmp	r5, r2
   c3160:	da12      	bge.n	c3188 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   c3162:	e9d4 7c00 	ldrd	r7, ip, [r4]
   c3166:	4567      	cmp	r7, ip
        values[i] = value_temp;
   c3168:	bfbc      	itt	lt
   c316a:	e9c4 c700 	strdlt	ip, r7, [r4]
        ids[i - 1] = ids[i];
   c316e:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    for (int i = 1; i < size; ++i) {
   c3172:	f105 0501 	add.w	r5, r5, #1
        ids[i] = id_temp;
   c3176:	bfb8      	it	lt
   c3178:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   c317c:	f104 0404 	add.w	r4, r4, #4
   c3180:	bfb8      	it	lt
   c3182:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   c3184:	3304      	adds	r3, #4
   c3186:	e7ea      	b.n	c315e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   c3188:	2e00      	cmp	r6, #0
   c318a:	d1e4      	bne.n	c3156 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   c318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000c3190 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   c3190:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   c3192:	4c0c      	ldr	r4, [pc, #48]	; (c31c4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x34>)
   c3194:	6004      	str	r4, [r0, #0]
   c3196:	2400      	movs	r4, #0
   c3198:	6084      	str	r4, [r0, #8]
   c319a:	2401      	movs	r4, #1
   c319c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  max_buffer_count_ = scratch_buffer_size / per_buffer_size;
   c31a0:	2424      	movs	r4, #36	; 0x24
   c31a2:	fb92 f2f4 	sdiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   c31a6:	240c      	movs	r4, #12
   c31a8:	4354      	muls	r4, r2
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   c31aa:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   c31ac:	4421      	add	r1, r4
  buffer_sizes_sorted_by_size_ = reinterpret_cast<int*>(next_free);
   c31ae:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   c31b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_by_size_ = reinterpret_cast<int*>(next_free);
   c31b4:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
   c31b6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   c31ba:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   c31bc:	4421      	add	r1, r4
  max_buffer_count_ = scratch_buffer_size / per_buffer_size;
   c31be:	6042      	str	r2, [r0, #4]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   c31c0:	6201      	str	r1, [r0, #32]
}
   c31c2:	bd10      	pop	{r4, pc}
   c31c4:	000c94ec 	.word	0x000c94ec

000c31c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   c31c8:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   c31ca:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   c31cc:	68c1      	ldr	r1, [r0, #12]
   c31ce:	200c      	movs	r0, #12
   c31d0:	fb00 1104 	mla	r1, r0, r4, r1
  if (entry_requirements->first_time_used > last_time_used) {
   c31d4:	6848      	ldr	r0, [r1, #4]
   c31d6:	4298      	cmp	r0, r3
   c31d8:	dc05      	bgt.n	c31e6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1e>
  if (first_time_used > entry_requirements->last_time_used) {
   c31da:	6888      	ldr	r0, [r1, #8]
   c31dc:	4290      	cmp	r0, r2
   c31de:	bfb4      	ite	lt
   c31e0:	2000      	movlt	r0, #0
   c31e2:	2001      	movge	r0, #1
}
   c31e4:	bd10      	pop	{r4, pc}
    return false;
   c31e6:	2000      	movs	r0, #0
   c31e8:	e7fc      	b.n	c31e4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>

000c31ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   c31ea:	b570      	push	{r4, r5, r6, lr}
   c31ec:	4605      	mov	r5, r0
  if (start == nullptr) {
   c31ee:	b969      	cbnz	r1, c320c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x22>
    candidate_next_entry = &buffers_sorted_by_offset_[0];
   c31f0:	6984      	ldr	r4, [r0, #24]
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   c31f2:	260c      	movs	r6, #12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   c31f4:	4621      	mov	r1, r4
   c31f6:	4628      	mov	r0, r5
   c31f8:	f7ff ffe6 	bl	c31c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   c31fc:	b978      	cbnz	r0, c321e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x34>
    if (candidate_next_entry->next_entry_index == -1) {
   c31fe:	68a1      	ldr	r1, [r4, #8]
   c3200:	1c4c      	adds	r4, r1, #1
   c3202:	d00e      	beq.n	c3222 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x38>
    candidate_next_entry =
   c3204:	69ac      	ldr	r4, [r5, #24]
   c3206:	fb06 4401 	mla	r4, r6, r1, r4
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   c320a:	e7f3      	b.n	c31f4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0xa>
    if (start->next_entry_index == -1) {
   c320c:	6889      	ldr	r1, [r1, #8]
   c320e:	1c4e      	adds	r6, r1, #1
   c3210:	d004      	beq.n	c321c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   c3212:	6984      	ldr	r4, [r0, #24]
   c3214:	200c      	movs	r0, #12
   c3216:	fb00 4401 	mla	r4, r0, r1, r4
   c321a:	e7ea      	b.n	c31f2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   c321c:	2400      	movs	r4, #0
}
   c321e:	4620      	mov	r0, r4
   c3220:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   c3222:	4604      	mov	r4, r0
   c3224:	e7fb      	b.n	c321e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x34>

000c3226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   c3226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   c322a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   c322e:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   c3230:	2b00      	cmp	r3, #0
   c3232:	f000 8089 	beq.w	c3348 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
   c3236:	6883      	ldr	r3, [r0, #8]
   c3238:	2b00      	cmp	r3, #0
   c323a:	f000 8085 	beq.w	c3348 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
  need_to_calculate_offsets_ = false;
   c323e:	2300      	movs	r3, #0
   c3240:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c3244:	260c      	movs	r6, #12
    buffer_offsets_[i] = -1;
   c3246:	f04f 31ff 	mov.w	r1, #4294967295
  for (int i = 0; i < buffer_count_; ++i) {
   c324a:	68a2      	ldr	r2, [r4, #8]
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c324c:	6920      	ldr	r0, [r4, #16]
  for (int i = 0; i < buffer_count_; ++i) {
   c324e:	429a      	cmp	r2, r3
   c3250:	dd0d      	ble.n	c326e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x48>
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c3252:	68e5      	ldr	r5, [r4, #12]
   c3254:	fb06 f203 	mul.w	r2, r6, r3
   c3258:	58aa      	ldr	r2, [r5, r2]
   c325a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    buffer_ids_sorted_by_size_[i] = i;
   c325e:	6962      	ldr	r2, [r4, #20]
   c3260:	f842 3023 	str.w	r3, [r2, r3, lsl #2]
    buffer_offsets_[i] = -1;
   c3264:	6a22      	ldr	r2, [r4, #32]
   c3266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   c326a:	3301      	adds	r3, #1
   c326c:	e7ed      	b.n	c324a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
  ReverseSortInPlace(buffer_sizes_sorted_by_size_, buffer_ids_sorted_by_size_,
   c326e:	6961      	ldr	r1, [r4, #20]
   c3270:	f7ff ff70 	bl	c3154 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[0];
   c3274:	69a7      	ldr	r7, [r4, #24]
  first_entry->offset = 0;
   c3276:	2300      	movs	r3, #0
   c3278:	603b      	str	r3, [r7, #0]
  first_entry->requirements_index = buffer_ids_sorted_by_size_[0];
   c327a:	6962      	ldr	r2, [r4, #20]
   c327c:	6812      	ldr	r2, [r2, #0]
   c327e:	607a      	str	r2, [r7, #4]
  first_entry->next_entry_index = -1;
   c3280:	f04f 32ff 	mov.w	r2, #4294967295
   c3284:	60ba      	str	r2, [r7, #8]
  buffer_offsets_[buffer_ids_sorted_by_size_[0]] = 0;
   c3286:	6962      	ldr	r2, [r4, #20]
  next_free_entry_ = 1;
   c3288:	2501      	movs	r5, #1
   c328a:	61e5      	str	r5, [r4, #28]
  buffer_offsets_[buffer_ids_sorted_by_size_[0]] = 0;
   c328c:	6811      	ldr	r1, [r2, #0]
   c328e:	6a22      	ldr	r2, [r4, #32]
   c3290:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c3294:	f04f 080c 	mov.w	r8, #12
  for (int i = 1; i < buffer_count_; ++i) {
   c3298:	68a3      	ldr	r3, [r4, #8]
   c329a:	42ab      	cmp	r3, r5
   c329c:	dd54      	ble.n	c3348 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    const int buffer_id = buffer_ids_sorted_by_size_[i];
   c329e:	6963      	ldr	r3, [r4, #20]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c32a0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    const int buffer_id = buffer_ids_sorted_by_size_[i];
   c32a4:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c32a8:	fb08 f20b 	mul.w	r2, r8, fp
   c32ac:	eb0a 0302 	add.w	r3, sl, r2
    const int wanted_size = wanted_requirements->size;
   c32b0:	f85a 2002 	ldr.w	r2, [sl, r2]
   c32b4:	9201      	str	r2, [sp, #4]
    int candidate_offset = 0;
   c32b6:	2600      	movs	r6, #0
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   c32b8:	685a      	ldr	r2, [r3, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   c32ba:	edd3 7a02 	vldr	s15, [r3, #8]
    ListEntry* prior_entry = nullptr;
   c32be:	4630      	mov	r0, r6
      ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   c32c0:	4681      	mov	r9, r0
   c32c2:	4601      	mov	r1, r0
   c32c4:	ee17 3a90 	vmov	r3, s15
   c32c8:	4620      	mov	r0, r4
   c32ca:	f7ff ff8e 	bl	c31ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
      if (prior_entry) {
   c32ce:	f1b9 0f00 	cmp.w	r9, #0
   c32d2:	d00b      	beq.n	c32ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc6>
            &requirements_[prior_entry->requirements_index];
   c32d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
        const int prior_entry_offset =
   c32d8:	f8d9 c000 	ldr.w	ip, [r9]
            prior_entry->offset + candidate_requirements->size;
   c32dc:	fb08 f101 	mul.w	r1, r8, r1
        const int prior_entry_offset =
   c32e0:	f85a 1001 	ldr.w	r1, [sl, r1]
   c32e4:	4461      	add	r1, ip
   c32e6:	428e      	cmp	r6, r1
   c32e8:	bfb8      	it	lt
   c32ea:	460e      	movlt	r6, r1
      if (next_entry == nullptr) {
   c32ec:	b120      	cbz	r0, c32f8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd2>
      const int gap = next_entry->offset - candidate_offset;
   c32ee:	6801      	ldr	r1, [r0, #0]
      if (gap >= wanted_size) {
   c32f0:	9b01      	ldr	r3, [sp, #4]
      const int gap = next_entry->offset - candidate_offset;
   c32f2:	1b89      	subs	r1, r1, r6
      if (gap >= wanted_size) {
   c32f4:	428b      	cmp	r3, r1
   c32f6:	dce3      	bgt.n	c32c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x9a>
    buffer_offsets_[buffer_id] = candidate_offset;
   c32f8:	6a23      	ldr	r3, [r4, #32]
   c32fa:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   c32fe:	69e3      	ldr	r3, [r4, #28]
   c3300:	69a2      	ldr	r2, [r4, #24]
   c3302:	fb08 f303 	mul.w	r3, r8, r3
   c3306:	eb02 0c03 	add.w	ip, r2, r3
    new_entry->offset = candidate_offset;
   c330a:	50d6      	str	r6, [r2, r3]
    new_entry->requirements_index = buffer_id;
   c330c:	f8cc b004 	str.w	fp, [ip, #4]
    const int new_entry_index = next_free_entry_;
   c3310:	69e0      	ldr	r0, [r4, #28]
    ++next_free_entry_;
   c3312:	1c43      	adds	r3, r0, #1
   c3314:	61e3      	str	r3, [r4, #28]
   c3316:	463b      	mov	r3, r7
      const int next_entry_index = current_entry->next_entry_index;
   c3318:	689a      	ldr	r2, [r3, #8]
      if (next_entry_index == -1) {
   c331a:	1c51      	adds	r1, r2, #1
   c331c:	d106      	bne.n	c332c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
        current_entry->next_entry_index = new_entry_index;
   c331e:	6098      	str	r0, [r3, #8]
        new_entry->next_entry_index = -1;
   c3320:	f8cc 2008 	str.w	r2, [ip, #8]
  for (int i = 1; i < buffer_count_; ++i) {
   c3324:	3501      	adds	r5, #1
   c3326:	e7b7      	b.n	c3298 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x72>
   c3328:	464b      	mov	r3, r9
   c332a:	e7f5      	b.n	c3318 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf2>
      ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   c332c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   c3330:	fb08 f102 	mul.w	r1, r8, r2
   c3334:	eb0e 0901 	add.w	r9, lr, r1
      if (next_entry->offset > candidate_offset) {
   c3338:	f85e 1001 	ldr.w	r1, [lr, r1]
   c333c:	428e      	cmp	r6, r1
   c333e:	daf3      	bge.n	c3328 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
        new_entry->next_entry_index = current_entry->next_entry_index;
   c3340:	f8cc 2008 	str.w	r2, [ip, #8]
        current_entry->next_entry_index = new_entry_index;
   c3344:	6098      	str	r0, [r3, #8]
        break;
   c3346:	e7ed      	b.n	c3324 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xfe>
}
   c3348:	b003      	add	sp, #12
   c334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c334e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
int GreedyMemoryPlanner::GetMaximumMemorySize() {
   c334e:	b570      	push	{r4, r5, r6, lr}
   c3350:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   c3352:	f7ff ff68 	bl	c3226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   c3356:	68a0      	ldr	r0, [r4, #8]
   c3358:	b198      	cbz	r0, c3382 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
  ListEntry* entry = &buffers_sorted_by_offset_[0];
   c335a:	69a1      	ldr	r1, [r4, #24]
  int max_size = 0;
   c335c:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[0];
   c335e:	460b      	mov	r3, r1
    const int current_size = entry->offset + requirements->size;
   c3360:	250c      	movs	r5, #12
  while (entry) {
   c3362:	b173      	cbz	r3, c3382 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
        &requirements_[entry->requirements_index];
   c3364:	685a      	ldr	r2, [r3, #4]
    const int current_size = entry->offset + requirements->size;
   c3366:	68e6      	ldr	r6, [r4, #12]
   c3368:	436a      	muls	r2, r5
   c336a:	58b2      	ldr	r2, [r6, r2]
   c336c:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   c336e:	689b      	ldr	r3, [r3, #8]
    const int current_size = entry->offset + requirements->size;
   c3370:	4432      	add	r2, r6
   c3372:	4290      	cmp	r0, r2
   c3374:	bfb8      	it	lt
   c3376:	4610      	movlt	r0, r2
    if (entry->next_entry_index == -1) {
   c3378:	1c5a      	adds	r2, r3, #1
   c337a:	d002      	beq.n	c3382 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   c337c:	fb05 1303 	mla	r3, r5, r3, r1
  while (entry) {
   c3380:	e7ef      	b.n	c3362 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x14>
}
   c3382:	bd70      	pop	{r4, r5, r6, pc}

000c3384 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   c3384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3386:	4614      	mov	r4, r2
   c3388:	4605      	mov	r5, r0
   c338a:	460f      	mov	r7, r1
   c338c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   c338e:	f7ff ff4a 	bl	c3226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   c3392:	2c00      	cmp	r4, #0
   c3394:	db02      	blt.n	c339c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   c3396:	68ab      	ldr	r3, [r5, #8]
   c3398:	42a3      	cmp	r3, r4
   c339a:	dc07      	bgt.n	c33ac <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    error_reporter->Report("buffer index %d is outside range 0 to %d",
   c339c:	68ab      	ldr	r3, [r5, #8]
   c339e:	4906      	ldr	r1, [pc, #24]	; (c33b8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   c33a0:	4622      	mov	r2, r4
   c33a2:	4638      	mov	r0, r7
   c33a4:	f001 f8b4 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c33a8:	2001      	movs	r0, #1
                           buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   c33aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   c33ac:	6a2b      	ldr	r3, [r5, #32]
   c33ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c33b2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   c33b4:	2000      	movs	r0, #0
   c33b6:	e7f8      	b.n	c33aa <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   c33b8:	000c94b8 	.word	0x000c94b8

000c33bc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0>:
};

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   c33bc:	b538      	push	{r3, r4, r5, lr}
   c33be:	4604      	mov	r4, r0
   c33c0:	4610      	mov	r0, r2
   c33c2:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   c33c4:	b924      	cbnz	r4, c33d0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    error_reporter->Report("Input array not provided for operation '%s'.\n",
   c33c6:	490f      	ldr	r1, [pc, #60]	; (c3404 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x48>)
                           op_name);
    return kTfLiteError;
  } else {
    int num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      error_reporter->Report(
   c33c8:	f001 f8a2 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   c33cc:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   c33ce:	bd38      	pop	{r3, r4, r5, pc}
   c33d0:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   c33d2:	2d08      	cmp	r5, #8
   c33d4:	d80c      	bhi.n	c33f0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x34>
   c33d6:	4622      	mov	r2, r4
      for (int i = 0; i < num_dimensions; ++i) {
   c33d8:	2300      	movs	r3, #0
   c33da:	429d      	cmp	r5, r3
   c33dc:	d010      	beq.n	c3400 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x44>
    FLATBUFFERS_ASSERT(i < size());
   c33de:	6820      	ldr	r0, [r4, #0]
   c33e0:	4298      	cmp	r0, r3
   c33e2:	d807      	bhi.n	c33f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x38>
   c33e4:	4b08      	ldr	r3, [pc, #32]	; (c3408 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
   c33e6:	4a09      	ldr	r2, [pc, #36]	; (c340c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   c33e8:	4809      	ldr	r0, [pc, #36]	; (c3410 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   c33ea:	21ed      	movs	r1, #237	; 0xed
   c33ec:	f001 fa16 	bl	c481c <__assert_func>
      error_reporter->Report(
   c33f0:	4908      	ldr	r1, [pc, #32]	; (c3414 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   c33f2:	e7e9      	b.n	c33c8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   c33f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   c33f8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (int i = 0; i < num_dimensions; ++i) {
   c33fc:	3301      	adds	r3, #1
   c33fe:	e7ec      	b.n	c33da <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   c3400:	2000      	movs	r0, #0
   c3402:	e7e4      	b.n	c33ce <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   c3404:	000c9504 	.word	0x000c9504
   c3408:	000c7147 	.word	0x000c7147
   c340c:	000c728e 	.word	0x000c728e
   c3410:	000c721a 	.word	0x000c721a
   c3414:	000c9532 	.word	0x000c9532

000c3418 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   c3418:	6803      	ldr	r3, [r0, #0]
   c341a:	685b      	ldr	r3, [r3, #4]
   c341c:	4718      	bx	r3

000c341e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   c341e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   c3420:	210c      	movs	r1, #12
   c3422:	4604      	mov	r4, r0
   c3424:	f7f2 f9bd 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c3428:	b110      	cbz	r0, c3430 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   c342a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c342c:	5820      	ldr	r0, [r4, r0]
   c342e:	4418      	add	r0, r3
  }
   c3430:	bd10      	pop	{r4, pc}
	...

000c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   c3434:	b508      	push	{r3, lr}
   c3436:	4603      	mov	r3, r0
   c3438:	4610      	mov	r0, r2
   c343a:	2b09      	cmp	r3, #9
   c343c:	d806      	bhi.n	c344c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x18>
   c343e:	e8df f003 	tbb	[pc, r3]
   c3442:	110f      	.short	0x110f
   c3444:	1d1b1715 	.word	0x1d1b1715
   c3448:	1921131f 	.word	0x1921131f
  *type = kTfLiteNoType;
   c344c:	2200      	movs	r2, #0
      break;
    case TensorType_BOOL:
      *type = kTfLiteBool;
      break;
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
   c344e:	700a      	strb	r2, [r1, #0]
      break;
  }
  if (*type == kTfLiteNoType) {
   c3450:	780a      	ldrb	r2, [r1, #0]
   c3452:	b9ca      	cbnz	r2, c3488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x54>
    error_reporter->Report("Unsupported data type %d in tensor\n", tensor_type);
   c3454:	490d      	ldr	r1, [pc, #52]	; (c348c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x58>)
   c3456:	461a      	mov	r2, r3
   c3458:	f001 f85a 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   c345c:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
   c345e:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
   c3460:	2201      	movs	r2, #1
   c3462:	e7f4      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteFloat16;
   c3464:	220a      	movs	r2, #10
   c3466:	e7f2      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt16;
   c3468:	2207      	movs	r2, #7
   c346a:	e7f0      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt32;
   c346c:	2202      	movs	r2, #2
   c346e:	e7ee      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteUInt8;
   c3470:	2203      	movs	r2, #3
   c3472:	e7ec      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt8;
   c3474:	2209      	movs	r2, #9
   c3476:	e7ea      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt64;
   c3478:	2204      	movs	r2, #4
   c347a:	e7e8      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteString;
   c347c:	2205      	movs	r2, #5
   c347e:	e7e6      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteBool;
   c3480:	2206      	movs	r2, #6
   c3482:	e7e4      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteComplex64;
   c3484:	2208      	movs	r2, #8
   c3486:	e7e2      	b.n	c344e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
  return kTfLiteOk;
   c3488:	2000      	movs	r0, #0
   c348a:	e7e8      	b.n	c345e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x2a>
   c348c:	000c9573 	.word	0x000c9573

000c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c3490:	b538      	push	{r3, r4, r5, lr}
   c3492:	4605      	mov	r5, r0
   c3494:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c3496:	f7f2 f984 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c349a:	b100      	cbz	r0, c349e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   c349c:	5c2c      	ldrb	r4, [r5, r0]
  }
   c349e:	4620      	mov	r0, r4
   c34a0:	bd38      	pop	{r3, r4, r5, pc}

000c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  BuiltinOptions builtin_options_type() const {
   c34a2:	b508      	push	{r3, lr}
    return static_cast<BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   c34a4:	2200      	movs	r2, #0
   c34a6:	210a      	movs	r1, #10
   c34a8:	f7ff fff2 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   c34ac:	bd08      	pop	{r3, pc}

000c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c34ae:	b538      	push	{r3, r4, r5, lr}
   c34b0:	4605      	mov	r5, r0
   c34b2:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c34b4:	f7f2 f975 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c34b8:	b100      	cbz	r0, c34bc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0xe>
   c34ba:	582c      	ldr	r4, [r5, r0]
  }
   c34bc:	4620      	mov	r0, r4
   c34be:	bd38      	pop	{r3, r4, r5, pc}

000c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c34c0:	b538      	push	{r3, r4, r5, lr}
   c34c2:	4605      	mov	r5, r0
   c34c4:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c34c6:	f7f2 f96c 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c34ca:	b100      	cbz	r0, c34ce <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   c34cc:	562c      	ldrsb	r4, [r5, r0]
  }
   c34ce:	4620      	mov	r0, r4
   c34d0:	bd38      	pop	{r3, r4, r5, pc}

000c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c34d2:	b510      	push	{r4, lr}
   c34d4:	ed2d 8b02 	vpush	{d8}
   c34d8:	4604      	mov	r4, r0
   c34da:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
   c34de:	f7f2 f960 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c34e2:	b110      	cbz	r0, c34ea <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
   c34e4:	4404      	add	r4, r0
   c34e6:	ed94 8a00 	vldr	s16, [r4]
  }
   c34ea:	eeb0 0a48 	vmov.f32	s0, s16
   c34ee:	ecbd 8b02 	vpop	{d8}
   c34f2:	bd10      	pop	{r4, pc}

000c34f4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
// If it returns kTfLiteOk, it passes the data out with `builtin_data`, which
// need to be released by calling `free`.`
// If it returns kTfLiteError, `builtin_data` will be `nullptr`.
TfLiteStatus ParseOpData(const Operator* op, BuiltinOperator op_type,
                         ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   c34f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c34f8:	9f08      	ldr	r7, [sp, #32]
   c34fa:	461c      	mov	r4, r3
        return kTfLiteCombinerTypeSum;
    }
  };

  SafeBuiltinDataAllocator safe_allocator(allocator);
  *builtin_data = nullptr;
   c34fc:	2300      	movs	r3, #0
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   c34fe:	4605      	mov	r5, r0
   c3500:	460e      	mov	r6, r1
   c3502:	4690      	mov	r8, r2
  *builtin_data = nullptr;
   c3504:	603b      	str	r3, [r7, #0]
  switch (op_type) {
   c3506:	2977      	cmp	r1, #119	; 0x77
   c3508:	f200 8284 	bhi.w	c3a14 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x520>
   c350c:	e8df f011 	tbh	[pc, r1, lsl #1]
   c3510:	010802df 	.word	0x010802df
   c3514:	0078029e 	.word	0x0078029e
   c3518:	04e30149 	.word	0x04e30149
   c351c:	02820282 	.word	0x02820282
   c3520:	024b0282 	.word	0x024b0282
   c3524:	03360282 	.word	0x03360282
   c3528:	03530108 	.word	0x03530108
   c352c:	00e90282 	.word	0x00e90282
   c3530:	01080384 	.word	0x01080384
   c3534:	028202c2 	.word	0x028202c2
   c3538:	02820282 	.word	0x02820282
   c353c:	04420478 	.word	0x04420478
   c3540:	0284020e 	.word	0x0284020e
   c3544:	019204ca 	.word	0x019204ca
   c3548:	02820282 	.word	0x02820282
   c354c:	028204a1 	.word	0x028204a1
   c3550:	022b0282 	.word	0x022b0282
   c3554:	01b70282 	.word	0x01b70282
   c3558:	028204fc 	.word	0x028204fc
   c355c:	02820282 	.word	0x02820282
   c3560:	03190517 	.word	0x03190517
   c3564:	056502fc 	.word	0x056502fc
   c3568:	058403c3 	.word	0x058403c3
   c356c:	028201de 	.word	0x028201de
   c3570:	05330282 	.word	0x05330282
   c3574:	067b0282 	.word	0x067b0282
   c3578:	00b80402 	.word	0x00b80402
   c357c:	02820282 	.word	0x02820282
   c3580:	028205b6 	.word	0x028205b6
   c3584:	02820282 	.word	0x02820282
   c3588:	02820282 	.word	0x02820282
   c358c:	02820282 	.word	0x02820282
   c3590:	02820282 	.word	0x02820282
   c3594:	05f00282 	.word	0x05f00282
   c3598:	02820622 	.word	0x02820622
   c359c:	02820282 	.word	0x02820282
   c35a0:	02820282 	.word	0x02820282
   c35a4:	02820517 	.word	0x02820517
   c35a8:	063e0282 	.word	0x063e0282
   c35ac:	05d30282 	.word	0x05d30282
   c35b0:	05170681 	.word	0x05170681
   c35b4:	065b0517 	.word	0x065b0517
   c35b8:	06b40282 	.word	0x06b40282
   c35bc:	02820282 	.word	0x02820282
   c35c0:	051706cd 	.word	0x051706cd
   c35c4:	05170282 	.word	0x05170282
   c35c8:	02820282 	.word	0x02820282
   c35cc:	02820282 	.word	0x02820282
   c35d0:	045d0282 	.word	0x045d0282
   c35d4:	028206ed 	.word	0x028206ed
   c35d8:	02820708 	.word	0x02820708
   c35dc:	0725054c 	.word	0x0725054c
   c35e0:	02820282 	.word	0x02820282
   c35e4:	02820282 	.word	0x02820282
   c35e8:	02820282 	.word	0x02820282
   c35ec:	02820282 	.word	0x02820282
   c35f0:	02820742 	.word	0x02820742
   c35f4:	02820282 	.word	0x02820282
   c35f8:	02820282 	.word	0x02820282
   c35fc:	07820762 	.word	0x07820762
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    return static_cast<T*>(this->Allocate(sizeof(T)));
   c3600:	6823      	ldr	r3, [r4, #0]
   c3602:	2118      	movs	r1, #24
   c3604:	681b      	ldr	r3, [r3, #0]
   c3606:	4620      	mov	r0, r4
   c3608:	4798      	blx	r3
   c360a:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_Conv2DOptions ? static_cast<const Conv2DOptions *>(builtin_options()) : nullptr;
   c360c:	4628      	mov	r0, r5
   c360e:	f7ff ff48 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3612:	2801      	cmp	r0, #1
   c3614:	4606      	mov	r6, r0
   c3616:	d131      	bne.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3618:	4628      	mov	r0, r5
   c361a:	f7ff ff00 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
    case BuiltinOperator_CONV_2D: {
      auto params = safe_allocator.Allocate<TfLiteConvParams>();
      if (auto* conv_params = op->builtin_options_as_Conv2DOptions()) {
   c361e:	4605      	mov	r5, r0
   c3620:	b360      	cbz	r0, c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c3622:	2200      	movs	r2, #0
   c3624:	2104      	movs	r1, #4
   c3626:	f7ff ff4b 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c362a:	b118      	cbz	r0, c3634 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x140>
   c362c:	2801      	cmp	r0, #1
   c362e:	bf14      	ite	ne
   c3630:	2600      	movne	r6, #0
   c3632:	2602      	moveq	r6, #2
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c3634:	2200      	movs	r2, #0
   c3636:	2106      	movs	r1, #6
        params->padding = parse_padding(conv_params->padding());
   c3638:	7026      	strb	r6, [r4, #0]
   c363a:	4628      	mov	r0, r5
   c363c:	f7ff ff37 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c3640:	2200      	movs	r2, #0
        params->stride_width = conv_params->stride_w();
   c3642:	6060      	str	r0, [r4, #4]
   c3644:	2108      	movs	r1, #8
   c3646:	4628      	mov	r0, r5
   c3648:	f7ff ff31 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c364c:	2200      	movs	r2, #0
        params->stride_height = conv_params->stride_h();
   c364e:	60a0      	str	r0, [r4, #8]
   c3650:	210a      	movs	r1, #10
   c3652:	4628      	mov	r0, r5
   c3654:	f7ff ff34 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3658:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c365a:	1e43      	subs	r3, r0, #1
   c365c:	2b04      	cmp	r3, #4
   c365e:	bf88      	it	hi
   c3660:	2000      	movhi	r0, #0
        params->activation =
   c3662:	7520      	strb	r0, [r4, #20]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   c3664:	2201      	movs	r2, #1
   c3666:	210c      	movs	r1, #12
   c3668:	4628      	mov	r0, r5
   c366a:	f7ff ff20 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   c366e:	2201      	movs	r2, #1
            parse_activation(conv_params->fused_activation_function());

        params->dilation_width_factor = conv_params->dilation_w_factor();
   c3670:	60e0      	str	r0, [r4, #12]
   c3672:	210e      	movs	r1, #14
   c3674:	4628      	mov	r0, r5
   c3676:	f7ff ff1a 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->dilation_height_factor = conv_params->dilation_h_factor();
   c367a:	6120      	str	r0, [r4, #16]
      TfLiteWhileParams* params = allocator->AllocatePOD<TfLiteWhileParams>();
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
        params->cond_subgraph_index = while_params->cond_subgraph_index();
        params->body_subgraph_index = while_params->body_subgraph_index();
      }
      *builtin_data = reinterpret_cast<void*>(params);
   c367c:	603c      	str	r4, [r7, #0]
      break;
   c367e:	e1c9      	b.n	c3a14 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x520>
   c3680:	6823      	ldr	r3, [r4, #0]
   c3682:	2102      	movs	r1, #2
   c3684:	681b      	ldr	r3, [r3, #0]
   c3686:	4620      	mov	r0, r4
   c3688:	4798      	blx	r3
   c368a:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_CastOptions ? static_cast<const CastOptions *>(builtin_options()) : nullptr;
   c368c:	4628      	mov	r0, r5
   c368e:	f7ff ff08 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3692:	2825      	cmp	r0, #37	; 0x25
   c3694:	f040 81bd 	bne.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3698:	4628      	mov	r0, r5
   c369a:	f7ff fec0 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_CastOptions()) {
   c369e:	4681      	mov	r9, r0
   c36a0:	2800      	cmp	r0, #0
   c36a2:	f000 81b6 	beq.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    return static_cast<TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
   c36a6:	2200      	movs	r2, #0
   c36a8:	2104      	movs	r1, #4
   c36aa:	f7ff ff09 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
            ConvertTensorType(schema_params->in_data_type(),
   c36ae:	4642      	mov	r2, r8
   c36b0:	4631      	mov	r1, r6
   c36b2:	b2c0      	uxtb	r0, r0
   c36b4:	f7ff febe 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
   c36b8:	2200      	movs	r2, #0
   c36ba:	4605      	mov	r5, r0
   c36bc:	2106      	movs	r1, #6
   c36be:	4648      	mov	r0, r9
   c36c0:	f7ff fefe 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
            ConvertTensorType(schema_params->out_data_type(),
   c36c4:	4642      	mov	r2, r8
   c36c6:	1c71      	adds	r1, r6, #1
   c36c8:	b2c0      	uxtb	r0, r0
   c36ca:	f7ff feb3 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
        if (in_status != kTfLiteOk || out_status != kTfLiteOk) {
   c36ce:	4328      	orrs	r0, r5
   c36d0:	b2c0      	uxtb	r0, r0
   c36d2:	2800      	cmp	r0, #0
   c36d4:	f000 819d 	beq.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   c36d8:	2e00      	cmp	r6, #0
   c36da:	f040 8194 	bne.w	c3a06 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x512>
      return kTfLiteError;
   c36de:	2001      	movs	r0, #1
   c36e0:	e210      	b.n	c3b04 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x610>
   c36e2:	6823      	ldr	r3, [r4, #0]
   c36e4:	2101      	movs	r1, #1
   c36e6:	681b      	ldr	r3, [r3, #0]
   c36e8:	4620      	mov	r0, r4
   c36ea:	4798      	blx	r3
   c36ec:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LSHProjectionOptions ? static_cast<const LSHProjectionOptions *>(builtin_options()) : nullptr;
   c36ee:	4628      	mov	r0, r5
   c36f0:	f7ff fed7 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c36f4:	2804      	cmp	r0, #4
   c36f6:	4606      	mov	r6, r0
   c36f8:	d1c0      	bne.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c36fa:	4628      	mov	r0, r5
   c36fc:	f7ff fe8f 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lshParams =
   c3700:	2800      	cmp	r0, #0
   c3702:	d0bb      	beq.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
   c3704:	2200      	movs	r2, #0
   c3706:	4631      	mov	r1, r6
   c3708:	f7ff feda 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   c370c:	2801      	cmp	r0, #1
   c370e:	d005      	beq.n	c371c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>
   c3710:	2802      	cmp	r0, #2
   c3712:	bf14      	ite	ne
   c3714:	2300      	movne	r3, #0
   c3716:	2302      	moveq	r3, #2
        params->type = parseLSHProjectionType(lshParams->type());
   c3718:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c371a:	e7af      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLiteLshProjectionSparse;
   c371c:	4603      	mov	r3, r0
   c371e:	e7fb      	b.n	c3718 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x224>
   c3720:	6823      	ldr	r3, [r4, #0]
   c3722:	2128      	movs	r1, #40	; 0x28
   c3724:	681b      	ldr	r3, [r3, #0]
   c3726:	4620      	mov	r0, r4
   c3728:	4798      	blx	r3
   c372a:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_Pool2DOptions ? static_cast<const Pool2DOptions *>(builtin_options()) : nullptr;
   c372c:	4628      	mov	r0, r5
   c372e:	f7ff feb8 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3732:	2805      	cmp	r0, #5
   c3734:	d1a2      	bne.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3736:	4628      	mov	r0, r5
   c3738:	f7ff fe71 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pool_params = op->builtin_options_as_Pool2DOptions()) {
   c373c:	4605      	mov	r5, r0
   c373e:	2800      	cmp	r0, #0
   c3740:	d09c      	beq.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c3742:	2200      	movs	r2, #0
   c3744:	2104      	movs	r1, #4
   c3746:	f7ff febb 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c374a:	b340      	cbz	r0, c379e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2aa>
   c374c:	2801      	cmp	r0, #1
   c374e:	bf14      	ite	ne
   c3750:	2300      	movne	r3, #0
   c3752:	2302      	moveq	r3, #2
        params->padding = parse_padding(pool_params->padding());
   c3754:	7023      	strb	r3, [r4, #0]
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c3756:	2200      	movs	r2, #0
   c3758:	2106      	movs	r1, #6
   c375a:	4628      	mov	r0, r5
   c375c:	f7ff fea7 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c3760:	2200      	movs	r2, #0
        params->stride_width = pool_params->stride_w();
   c3762:	6060      	str	r0, [r4, #4]
   c3764:	2108      	movs	r1, #8
   c3766:	4628      	mov	r0, r5
   c3768:	f7ff fea1 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   c376c:	2200      	movs	r2, #0
        params->stride_height = pool_params->stride_h();
   c376e:	60a0      	str	r0, [r4, #8]
   c3770:	210a      	movs	r1, #10
   c3772:	4628      	mov	r0, r5
   c3774:	f7ff fe9b 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   c3778:	2200      	movs	r2, #0
        params->filter_width = pool_params->filter_width();
   c377a:	60e0      	str	r0, [r4, #12]
   c377c:	210c      	movs	r1, #12
   c377e:	4628      	mov	r0, r5
   c3780:	f7ff fe95 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3784:	2200      	movs	r2, #0
        params->filter_height = pool_params->filter_height();
   c3786:	6120      	str	r0, [r4, #16]
   c3788:	210e      	movs	r1, #14
   c378a:	4628      	mov	r0, r5
   c378c:	f7ff fe98 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3790:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3792:	1e43      	subs	r3, r0, #1
   c3794:	2b04      	cmp	r3, #4
   c3796:	bf88      	it	hi
   c3798:	2000      	movhi	r0, #0
        params->activation =
   c379a:	7520      	strb	r0, [r4, #20]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c379c:	e76e      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c379e:	2301      	movs	r3, #1
   c37a0:	e7d8      	b.n	c3754 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x260>
   c37a2:	6823      	ldr	r3, [r4, #0]
   c37a4:	211c      	movs	r1, #28
   c37a6:	681b      	ldr	r3, [r3, #0]
   c37a8:	4620      	mov	r0, r4
   c37aa:	4798      	blx	r3
   c37ac:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   c37ae:	4628      	mov	r0, r5
   c37b0:	f7ff fe77 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c37b4:	2802      	cmp	r0, #2
   c37b6:	4606      	mov	r6, r0
   c37b8:	f47f af60 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c37bc:	4628      	mov	r0, r5
   c37be:	f7ff fe2e 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* conv_params =
   c37c2:	4605      	mov	r5, r0
   c37c4:	2800      	cmp	r0, #0
   c37c6:	f43f af59 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c37ca:	2200      	movs	r2, #0
   c37cc:	2104      	movs	r1, #4
   c37ce:	f7ff fe77 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c37d2:	b368      	cbz	r0, c3830 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x33c>
    return kTfLitePaddingUnknown;
   c37d4:	2801      	cmp	r0, #1
   c37d6:	bf18      	it	ne
   c37d8:	2600      	movne	r6, #0
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c37da:	2200      	movs	r2, #0
   c37dc:	2106      	movs	r1, #6
        params->padding = parse_padding(conv_params->padding());
   c37de:	7026      	strb	r6, [r4, #0]
   c37e0:	4628      	mov	r0, r5
   c37e2:	f7ff fe64 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c37e6:	2200      	movs	r2, #0
        params->stride_width = conv_params->stride_w();
   c37e8:	6060      	str	r0, [r4, #4]
   c37ea:	2108      	movs	r1, #8
   c37ec:	4628      	mov	r0, r5
   c37ee:	f7ff fe5e 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   c37f2:	2200      	movs	r2, #0
        params->stride_height = conv_params->stride_h();
   c37f4:	60a0      	str	r0, [r4, #8]
   c37f6:	210a      	movs	r1, #10
   c37f8:	4628      	mov	r0, r5
   c37fa:	f7ff fe58 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c37fe:	2200      	movs	r2, #0
        params->depth_multiplier = conv_params->depth_multiplier();
   c3800:	60e0      	str	r0, [r4, #12]
   c3802:	210c      	movs	r1, #12
   c3804:	4628      	mov	r0, r5
   c3806:	f7ff fe5b 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c380a:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c380c:	1e43      	subs	r3, r0, #1
   c380e:	2b04      	cmp	r3, #4
   c3810:	bf88      	it	hi
   c3812:	2000      	movhi	r0, #0
        params->activation =
   c3814:	7420      	strb	r0, [r4, #16]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   c3816:	2201      	movs	r2, #1
   c3818:	210e      	movs	r1, #14
   c381a:	4628      	mov	r0, r5
   c381c:	f7ff fe47 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   c3820:	2201      	movs	r2, #1
        params->dilation_width_factor = conv_params->dilation_w_factor();
   c3822:	6160      	str	r0, [r4, #20]
   c3824:	2110      	movs	r1, #16
   c3826:	4628      	mov	r0, r5
   c3828:	f7ff fe41 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->dilation_height_factor = conv_params->dilation_h_factor();
   c382c:	61a0      	str	r0, [r4, #24]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c382e:	e725      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c3830:	2601      	movs	r6, #1
   c3832:	e7d2      	b.n	c37da <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2e6>
   c3834:	6823      	ldr	r3, [r4, #0]
   c3836:	2108      	movs	r1, #8
   c3838:	681b      	ldr	r3, [r3, #0]
   c383a:	4620      	mov	r0, r4
   c383c:	4798      	blx	r3
   c383e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SVDFOptions ? static_cast<const SVDFOptions *>(builtin_options()) : nullptr;
   c3840:	4628      	mov	r0, r5
   c3842:	f7ff fe2e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3846:	2806      	cmp	r0, #6
   c3848:	4606      	mov	r6, r0
   c384a:	f47f af17 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c384e:	4628      	mov	r0, r5
   c3850:	f7ff fde5 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* svdf_params = op->builtin_options_as_SVDFOptions()) {
   c3854:	4605      	mov	r5, r0
   c3856:	2800      	cmp	r0, #0
   c3858:	f43f af10 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_RANK, 0);
   c385c:	2200      	movs	r2, #0
   c385e:	2104      	movs	r1, #4
   c3860:	f7ff fe25 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3864:	2200      	movs	r2, #0
        params->rank = svdf_params->rank();
   c3866:	6020      	str	r0, [r4, #0]
   c3868:	4631      	mov	r1, r6
   c386a:	4628      	mov	r0, r5
   c386c:	f7ff fe28 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3870:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3872:	1e5a      	subs	r2, r3, #1
   c3874:	2a04      	cmp	r2, #4
   c3876:	bf88      	it	hi
   c3878:	2300      	movhi	r3, #0
        params->activation =
   c387a:	7123      	strb	r3, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c387c:	e6fe      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c387e:	6823      	ldr	r3, [r4, #0]
   c3880:	2102      	movs	r1, #2
   c3882:	681b      	ldr	r3, [r3, #0]
   c3884:	4620      	mov	r0, r4
   c3886:	4798      	blx	r3
   c3888:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SequenceRNNOptions ? static_cast<const SequenceRNNOptions *>(builtin_options()) : nullptr;
   c388a:	4628      	mov	r0, r5
   c388c:	f7ff fe09 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3890:	281f      	cmp	r0, #31
   c3892:	f47f aef3 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3896:	4628      	mov	r0, r5
   c3898:	f7ff fdc1 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sequence_rnn_params =
   c389c:	4605      	mov	r5, r0
   c389e:	2800      	cmp	r0, #0
   c38a0:	f43f aeec 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c38a4:	2200      	movs	r2, #0
   c38a6:	2106      	movs	r1, #6
   c38a8:	f7ff fe0a 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c38ac:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c38ae:	1e5a      	subs	r2, r3, #1
   c38b0:	2a04      	cmp	r2, #4
   c38b2:	bf88      	it	hi
   c38b4:	2300      	movhi	r3, #0
        params->activation =
   c38b6:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c38b8:	2200      	movs	r2, #0
   c38ba:	2104      	movs	r1, #4
   c38bc:	4628      	mov	r0, r5
   c38be:	f7ff fde7 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c38c2:	3800      	subs	r0, #0
   c38c4:	bf18      	it	ne
   c38c6:	2001      	movne	r0, #1
   c38c8:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c38ca:	e6d7      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c38cc:	6823      	ldr	r3, [r4, #0]
   c38ce:	2103      	movs	r1, #3
   c38d0:	681b      	ldr	r3, [r3, #0]
   c38d2:	4620      	mov	r0, r4
   c38d4:	4798      	blx	r3
   c38d6:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_BidirectionalSequenceRNNOptions ? static_cast<const BidirectionalSequenceRNNOptions *>(builtin_options()) : nullptr;
   c38d8:	4628      	mov	r0, r5
   c38da:	f7ff fde2 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c38de:	2846      	cmp	r0, #70	; 0x46
   c38e0:	f47f aecc 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c38e4:	4628      	mov	r0, r5
   c38e6:	f7ff fd9a 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_sequence_rnn_params =
   c38ea:	4605      	mov	r5, r0
   c38ec:	2800      	cmp	r0, #0
   c38ee:	f43f aec5 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c38f2:	2200      	movs	r2, #0
   c38f4:	2106      	movs	r1, #6
   c38f6:	f7ff fde3 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c38fa:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c38fc:	1e5a      	subs	r2, r3, #1
   c38fe:	2a04      	cmp	r2, #4
   c3900:	bf88      	it	hi
   c3902:	2300      	movhi	r3, #0
        params->activation = parse_activation(
   c3904:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c3906:	2200      	movs	r2, #0
   c3908:	2104      	movs	r1, #4
   c390a:	4628      	mov	r0, r5
   c390c:	f7ff fdc0 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3910:	3800      	subs	r0, #0
   c3912:	bf18      	it	ne
   c3914:	2001      	movne	r0, #1
   c3916:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   c3918:	2200      	movs	r2, #0
   c391a:	2108      	movs	r1, #8
   c391c:	4628      	mov	r0, r5
   c391e:	f7ff fdb7 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3922:	3800      	subs	r0, #0
   c3924:	bf18      	it	ne
   c3926:	2001      	movne	r0, #1
   c3928:	70a0      	strb	r0, [r4, #2]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c392a:	e6a7      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c392c:	6823      	ldr	r3, [r4, #0]
   c392e:	2101      	movs	r1, #1
   c3930:	681b      	ldr	r3, [r3, #0]
   c3932:	4620      	mov	r0, r4
   c3934:	4798      	blx	r3
   c3936:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_RNNOptions ? static_cast<const RNNOptions *>(builtin_options()) : nullptr;
   c3938:	4628      	mov	r0, r5
   c393a:	f7ff fdb2 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c393e:	2807      	cmp	r0, #7
   c3940:	f47f ae9c 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3944:	4628      	mov	r0, r5
   c3946:	f7ff fd6a 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* rnn_params = op->builtin_options_as_RNNOptions()) {
   c394a:	2800      	cmp	r0, #0
   c394c:	f43f ae96 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3950:	2200      	movs	r2, #0
   c3952:	2104      	movs	r1, #4
   c3954:	f7ff fdb4 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3958:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c395a:	1e5a      	subs	r2, r3, #1
   c395c:	2a04      	cmp	r2, #4
   c395e:	bf88      	it	hi
   c3960:	2300      	movhi	r3, #0
        params->activation =
   c3962:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3964:	e68a      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3966:	6823      	ldr	r3, [r4, #0]
   c3968:	2101      	movs	r1, #1
   c396a:	681b      	ldr	r3, [r3, #0]
   c396c:	4620      	mov	r0, r4
   c396e:	4798      	blx	r3
   c3970:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
   c3972:	4628      	mov	r0, r5
   c3974:	f7ff fd95 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3978:	2814      	cmp	r0, #20
   c397a:	f47f ae7f 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c397e:	4628      	mov	r0, r5
   c3980:	f7ff fd4d 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* embedding_params =
   c3984:	2800      	cmp	r0, #0
   c3986:	f43f ae79 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
   c398a:	2200      	movs	r2, #0
   c398c:	2104      	movs	r1, #4
   c398e:	f7ff fd97 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   c3992:	2801      	cmp	r0, #1
   c3994:	d005      	beq.n	c39a2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4ae>
   c3996:	2802      	cmp	r0, #2
   c3998:	bf14      	ite	ne
   c399a:	2300      	movne	r3, #0
   c399c:	2302      	moveq	r3, #2
        params->combiner = parseCombinerType(embedding_params->combiner());
   c399e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c39a0:	e66c      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLiteLshProjectionSparse;
   c39a2:	4603      	mov	r3, r0
   c39a4:	e7fb      	b.n	c399e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4aa>
   c39a6:	6823      	ldr	r3, [r4, #0]
   c39a8:	2103      	movs	r1, #3
   c39aa:	681b      	ldr	r3, [r3, #0]
   c39ac:	4620      	mov	r0, r4
   c39ae:	4798      	blx	r3
   c39b0:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_FullyConnectedOptions ? static_cast<const FullyConnectedOptions *>(builtin_options()) : nullptr;
   c39b2:	4628      	mov	r0, r5
   c39b4:	f7ff fd75 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c39b8:	2808      	cmp	r0, #8
   c39ba:	4681      	mov	r9, r0
   c39bc:	d129      	bne.n	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c39be:	4628      	mov	r0, r5
   c39c0:	f7ff fd2d 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* fully_connected_params =
   c39c4:	4605      	mov	r5, r0
   c39c6:	b320      	cbz	r0, c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c39c8:	2200      	movs	r2, #0
   c39ca:	2104      	movs	r1, #4
   c39cc:	f7ff fd78 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c39d0:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c39d2:	1e5a      	subs	r2, r3, #1
   c39d4:	2a04      	cmp	r2, #4
   c39d6:	bf88      	it	hi
   c39d8:	2300      	movhi	r3, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   c39da:	2200      	movs	r2, #0
   c39dc:	4649      	mov	r1, r9
        params->activation = parse_activation(
   c39de:	7033      	strb	r3, [r6, #0]
   c39e0:	4628      	mov	r0, r5
   c39e2:	f7ff fd55 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c39e6:	3800      	subs	r0, #0
   c39e8:	bf18      	it	ne
   c39ea:	2001      	movne	r0, #1
   c39ec:	70b0      	strb	r0, [r6, #2]
    return static_cast<FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   c39ee:	2200      	movs	r2, #0
   c39f0:	2106      	movs	r1, #6
   c39f2:	4628      	mov	r0, r5
   c39f4:	f7ff fd64 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c39f8:	b150      	cbz	r0, c3a10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51c>
   c39fa:	2801      	cmp	r0, #1
   c39fc:	d008      	beq.n	c3a10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51c>
            error_reporter->Report("Unhandled fully-connected weights format.");
   c39fe:	49c1      	ldr	r1, [pc, #772]	; (c3d04 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x810>)
   c3a00:	4640      	mov	r0, r8
   c3a02:	f000 fd85 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  get_deleter()(std::move(__ptr));
   c3a06:	4631      	mov	r1, r6
   c3a08:	4620      	mov	r0, r4
   c3a0a:	f7ff fd05 	bl	c3418 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   c3a0e:	e666      	b.n	c36de <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ea>
            params->weights_format =
   c3a10:	7070      	strb	r0, [r6, #1]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3a12:	603e      	str	r6, [r7, #0]
  *builtin_data = nullptr;
   c3a14:	2000      	movs	r0, #0
   c3a16:	e075      	b.n	c3b04 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x610>
   c3a18:	6823      	ldr	r3, [r4, #0]
   c3a1a:	2104      	movs	r1, #4
   c3a1c:	681b      	ldr	r3, [r3, #0]
   c3a1e:	4620      	mov	r0, r4
   c3a20:	4798      	blx	r3
   c3a22:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SoftmaxOptions ? static_cast<const SoftmaxOptions *>(builtin_options()) : nullptr;
   c3a24:	4628      	mov	r0, r5
   c3a26:	f7ff fd3c 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3a2a:	2809      	cmp	r0, #9
   c3a2c:	f47f ae26 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3a30:	4628      	mov	r0, r5
   c3a32:	f7ff fcf4 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* softmax_params =
   c3a36:	2800      	cmp	r0, #0
   c3a38:	f43f ae20 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_BETA, 0.0f);
   c3a3c:	ed9f 0ab4 	vldr	s0, [pc, #720]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3a40:	2104      	movs	r1, #4
   c3a42:	f7ff fd46 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = softmax_params->beta();
   c3a46:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3a4a:	e617      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3a4c:	6823      	ldr	r3, [r4, #0]
   c3a4e:	2108      	movs	r1, #8
   c3a50:	681b      	ldr	r3, [r3, #0]
   c3a52:	4620      	mov	r0, r4
   c3a54:	4798      	blx	r3
   c3a56:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ConcatenationOptions ? static_cast<const ConcatenationOptions *>(builtin_options()) : nullptr;
   c3a58:	4628      	mov	r0, r5
   c3a5a:	f7ff fd22 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3a5e:	280a      	cmp	r0, #10
   c3a60:	f47f ae0c 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3a64:	4628      	mov	r0, r5
   c3a66:	f7ff fcda 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* concatenation_params =
   c3a6a:	4605      	mov	r5, r0
   c3a6c:	2800      	cmp	r0, #0
   c3a6e:	f43f ae05 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3a72:	2200      	movs	r2, #0
   c3a74:	2106      	movs	r1, #6
   c3a76:	f7ff fd23 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3a7a:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3a7c:	1e5a      	subs	r2, r3, #1
   c3a7e:	2a04      	cmp	r2, #4
   c3a80:	bf88      	it	hi
   c3a82:	2300      	movhi	r3, #0
        params->activation =
   c3a84:	7123      	strb	r3, [r4, #4]
    return GetField<int32_t>(VT_AXIS, 0);
   c3a86:	2200      	movs	r2, #0
   c3a88:	2104      	movs	r1, #4
   c3a8a:	4628      	mov	r0, r5
   c3a8c:	f7ff fd0f 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = concatenation_params->axis();
   c3a90:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3a92:	e5f3      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3a94:	6823      	ldr	r3, [r4, #0]
   c3a96:	2101      	movs	r1, #1
   c3a98:	681b      	ldr	r3, [r3, #0]
   c3a9a:	4620      	mov	r0, r4
   c3a9c:	4798      	blx	r3
   c3a9e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_MulOptions ? static_cast<const MulOptions *>(builtin_options()) : nullptr;
   c3aa0:	4628      	mov	r0, r5
   c3aa2:	f7ff fcfe 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3aa6:	2815      	cmp	r0, #21
   c3aa8:	f47f ade8 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3aac:	4628      	mov	r0, r5
   c3aae:	f7ff fcb6 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_MulOptions()) {
   c3ab2:	2800      	cmp	r0, #0
   c3ab4:	f43f ade2 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3ab8:	2200      	movs	r2, #0
   c3aba:	2104      	movs	r1, #4
   c3abc:	f7ff fd00 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3ac0:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3ac2:	1e5a      	subs	r2, r3, #1
   c3ac4:	2a04      	cmp	r2, #4
   c3ac6:	bf88      	it	hi
   c3ac8:	2300      	movhi	r3, #0
        params->activation =
   c3aca:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3acc:	e5d6      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ace:	6823      	ldr	r3, [r4, #0]
   c3ad0:	2101      	movs	r1, #1
   c3ad2:	681b      	ldr	r3, [r3, #0]
   c3ad4:	4620      	mov	r0, r4
   c3ad6:	4798      	blx	r3
   c3ad8:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_AddOptions ? static_cast<const AddOptions *>(builtin_options()) : nullptr;
   c3ada:	4628      	mov	r0, r5
   c3adc:	f7ff fce1 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ae0:	280b      	cmp	r0, #11
   c3ae2:	d10d      	bne.n	c3b00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60c>
   c3ae4:	4628      	mov	r0, r5
   c3ae6:	f7ff fc9a 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_AddOptions()) {
   c3aea:	b148      	cbz	r0, c3b00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60c>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3aec:	2200      	movs	r2, #0
   c3aee:	2104      	movs	r1, #4
   c3af0:	f7ff fce6 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3af4:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3af6:	1e5a      	subs	r2, r3, #1
   c3af8:	2a04      	cmp	r2, #4
   c3afa:	bf88      	it	hi
   c3afc:	4633      	movhi	r3, r6
        params->activation =
   c3afe:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b00:	603c      	str	r4, [r7, #0]
    case BuiltinOperator_QUANTIZE:
    case BuiltinOperator_NON_MAX_SUPPRESSION_V4:
    case BuiltinOperator_NON_MAX_SUPPRESSION_V5:
      break;
  }
  return kTfLiteOk;
   c3b02:	4630      	mov	r0, r6
}  // NOLINT[readability/fn_size]
   c3b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3b08:	6823      	ldr	r3, [r4, #0]
   c3b0a:	2101      	movs	r1, #1
   c3b0c:	681b      	ldr	r3, [r3, #0]
   c3b0e:	4620      	mov	r0, r4
   c3b10:	4798      	blx	r3
   c3b12:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DivOptions ? static_cast<const DivOptions *>(builtin_options()) : nullptr;
   c3b14:	4628      	mov	r0, r5
   c3b16:	f7ff fcc4 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b1a:	281d      	cmp	r0, #29
   c3b1c:	f47f adae 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b20:	4628      	mov	r0, r5
   c3b22:	f7ff fc7c 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_DivOptions()) {
   c3b26:	2800      	cmp	r0, #0
   c3b28:	f43f ada8 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3b2c:	2200      	movs	r2, #0
   c3b2e:	2104      	movs	r1, #4
   c3b30:	f7ff fcc6 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3b34:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3b36:	1e5a      	subs	r2, r3, #1
   c3b38:	2a04      	cmp	r2, #4
   c3b3a:	bf88      	it	hi
   c3b3c:	2300      	movhi	r3, #0
        params->activation =
   c3b3e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b40:	e59c      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b42:	6823      	ldr	r3, [r4, #0]
   c3b44:	2101      	movs	r1, #1
   c3b46:	681b      	ldr	r3, [r3, #0]
   c3b48:	4620      	mov	r0, r4
   c3b4a:	4798      	blx	r3
   c3b4c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SubOptions ? static_cast<const SubOptions *>(builtin_options()) : nullptr;
   c3b4e:	4628      	mov	r0, r5
   c3b50:	f7ff fca7 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b54:	281c      	cmp	r0, #28
   c3b56:	f47f ad91 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b5a:	4628      	mov	r0, r5
   c3b5c:	f7ff fc5f 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SubOptions()) {
   c3b60:	2800      	cmp	r0, #0
   c3b62:	f43f ad8b 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3b66:	2200      	movs	r2, #0
   c3b68:	2104      	movs	r1, #4
   c3b6a:	f7ff fca9 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3b6e:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3b70:	1e5a      	subs	r2, r3, #1
   c3b72:	2a04      	cmp	r2, #4
   c3b74:	bf88      	it	hi
   c3b76:	2300      	movhi	r3, #0
        params->activation =
   c3b78:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b7a:	e57f      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b7c:	6823      	ldr	r3, [r4, #0]
   c3b7e:	2101      	movs	r1, #1
   c3b80:	681b      	ldr	r3, [r3, #0]
   c3b82:	4620      	mov	r0, r4
   c3b84:	4798      	blx	r3
   c3b86:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_L2NormOptions ? static_cast<const L2NormOptions *>(builtin_options()) : nullptr;
   c3b88:	4628      	mov	r0, r5
   c3b8a:	f7ff fc8a 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b8e:	280c      	cmp	r0, #12
   c3b90:	f47f ad74 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b94:	4628      	mov	r0, r5
   c3b96:	f7ff fc42 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_L2NormOptions()) {
   c3b9a:	2800      	cmp	r0, #0
   c3b9c:	f43f ad6e 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3ba0:	2200      	movs	r2, #0
   c3ba2:	2104      	movs	r1, #4
   c3ba4:	f7ff fc8c 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3ba8:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3baa:	1e5a      	subs	r2, r3, #1
   c3bac:	2a04      	cmp	r2, #4
   c3bae:	bf88      	it	hi
   c3bb0:	2300      	movhi	r3, #0
        params->activation =
   c3bb2:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3bb4:	e562      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3bb6:	6823      	ldr	r3, [r4, #0]
   c3bb8:	2110      	movs	r1, #16
   c3bba:	681b      	ldr	r3, [r3, #0]
   c3bbc:	4620      	mov	r0, r4
   c3bbe:	4798      	blx	r3
   c3bc0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LocalResponseNormalizationOptions ? static_cast<const LocalResponseNormalizationOptions *>(builtin_options()) : nullptr;
   c3bc2:	4628      	mov	r0, r5
   c3bc4:	f7ff fc6d 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3bc8:	280d      	cmp	r0, #13
   c3bca:	f47f ad57 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3bce:	4628      	mov	r0, r5
   c3bd0:	f7ff fc25 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3bd4:	4605      	mov	r5, r0
   c3bd6:	2800      	cmp	r0, #0
   c3bd8:	f43f ad50 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_RADIUS, 0);
   c3bdc:	2200      	movs	r2, #0
   c3bde:	2104      	movs	r1, #4
   c3be0:	f7ff fc65 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<float>(VT_BIAS, 0.0f);
   c3be4:	2106      	movs	r1, #6
        params->radius = schema_params->radius();
   c3be6:	6020      	str	r0, [r4, #0]
   c3be8:	ed9f 0a49 	vldr	s0, [pc, #292]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3bec:	4628      	mov	r0, r5
   c3bee:	f7ff fc70 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_ALPHA, 0.0f);
   c3bf2:	2108      	movs	r1, #8
        params->bias = schema_params->bias();
   c3bf4:	ed84 0a01 	vstr	s0, [r4, #4]
   c3bf8:	4628      	mov	r0, r5
   c3bfa:	ed9f 0a45 	vldr	s0, [pc, #276]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3bfe:	f7ff fc68 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_BETA, 0.0f);
   c3c02:	210a      	movs	r1, #10
        params->alpha = schema_params->alpha();
   c3c04:	ed84 0a02 	vstr	s0, [r4, #8]
   c3c08:	4628      	mov	r0, r5
   c3c0a:	ed9f 0a41 	vldr	s0, [pc, #260]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c0e:	f7ff fc60 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = schema_params->beta();
   c3c12:	ed84 0a03 	vstr	s0, [r4, #12]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3c16:	e531      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3c18:	6823      	ldr	r3, [r4, #0]
   c3c1a:	2110      	movs	r1, #16
   c3c1c:	681b      	ldr	r3, [r3, #0]
   c3c1e:	4620      	mov	r0, r4
   c3c20:	4798      	blx	r3
   c3c22:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_LSTMOptions ? static_cast<const LSTMOptions *>(builtin_options()) : nullptr;
   c3c24:	4628      	mov	r0, r5
   c3c26:	f7ff fc3c 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3c2a:	280e      	cmp	r0, #14
   c3c2c:	d12e      	bne.n	c3c8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x798>
   c3c2e:	4628      	mov	r0, r5
   c3c30:	f7ff fbf5 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lstm_params = op->builtin_options_as_LSTMOptions()) {
   c3c34:	4605      	mov	r5, r0
   c3c36:	b348      	cbz	r0, c3c8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x798>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3c38:	2200      	movs	r2, #0
   c3c3a:	2104      	movs	r1, #4
   c3c3c:	f7ff fc40 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3c40:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3c42:	1e43      	subs	r3, r0, #1
   c3c44:	2b04      	cmp	r3, #4
   c3c46:	bf88      	it	hi
   c3c48:	2000      	movhi	r0, #0
        params->activation =
   c3c4a:	7030      	strb	r0, [r6, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3c4c:	2106      	movs	r1, #6
   c3c4e:	4628      	mov	r0, r5
   c3c50:	ed9f 0a2f 	vldr	s0, [pc, #188]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c54:	f7ff fc3d 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3c58:	2108      	movs	r1, #8
        params->cell_clip = lstm_params->cell_clip();
   c3c5a:	ed86 0a01 	vstr	s0, [r6, #4]
   c3c5e:	4628      	mov	r0, r5
   c3c60:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c64:	f7ff fc35 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return static_cast<LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
   c3c68:	2200      	movs	r2, #0
        params->proj_clip = lstm_params->proj_clip();
   c3c6a:	ed86 0a02 	vstr	s0, [r6, #8]
   c3c6e:	210a      	movs	r1, #10
   c3c70:	4628      	mov	r0, r5
   c3c72:	f7ff fc25 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3c76:	b138      	cbz	r0, c3c88 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x794>
   c3c78:	2801      	cmp	r0, #1
   c3c7a:	d005      	beq.n	c3c88 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x794>
            error_reporter->Report("Unhandled LSTM kernel type: %d",
   c3c7c:	b2c2      	uxtb	r2, r0
   c3c7e:	4922      	ldr	r1, [pc, #136]	; (c3d08 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x814>)
   c3c80:	4640      	mov	r0, r8
   c3c82:	f000 fc45 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   c3c86:	e6be      	b.n	c3a06 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x512>
            params->kernel_type = kTfLiteLSTMBasicKernel;
   c3c88:	7330      	strb	r0, [r6, #12]
            break;
   c3c8a:	e6c2      	b.n	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
        error_reporter->Report("No valid LSTM builtin options exist");
   c3c8c:	491f      	ldr	r1, [pc, #124]	; (c3d0c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x818>)
   c3c8e:	4640      	mov	r0, r8
   c3c90:	f000 fc3e 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c3c94:	e520      	b.n	c36d8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
   c3c96:	6823      	ldr	r3, [r4, #0]
   c3c98:	2110      	movs	r1, #16
   c3c9a:	681b      	ldr	r3, [r3, #0]
   c3c9c:	4620      	mov	r0, r4
   c3c9e:	4798      	blx	r3
   c3ca0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UnidirectionalSequenceLSTMOptions ? static_cast<const UnidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   c3ca2:	4628      	mov	r0, r5
   c3ca4:	f7ff fbfd 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ca8:	2847      	cmp	r0, #71	; 0x47
   c3caa:	f47f ace7 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3cae:	4628      	mov	r0, r5
   c3cb0:	f7ff fbb5 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* seq_lstm_params =
   c3cb4:	4605      	mov	r5, r0
   c3cb6:	2800      	cmp	r0, #0
   c3cb8:	f43f ace0 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3cbc:	2200      	movs	r2, #0
   c3cbe:	2104      	movs	r1, #4
   c3cc0:	f7ff fbfe 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3cc4:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3cc6:	1e43      	subs	r3, r0, #1
   c3cc8:	2b04      	cmp	r3, #4
   c3cca:	bf88      	it	hi
   c3ccc:	2000      	movhi	r0, #0
        params->activation =
   c3cce:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3cd0:	2106      	movs	r1, #6
   c3cd2:	4628      	mov	r0, r5
   c3cd4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3cd8:	f7ff fbfb 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3cdc:	2108      	movs	r1, #8
        params->cell_clip = seq_lstm_params->cell_clip();
   c3cde:	ed84 0a01 	vstr	s0, [r4, #4]
   c3ce2:	4628      	mov	r0, r5
   c3ce4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3ce8:	f7ff fbf3 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c3cec:	2200      	movs	r2, #0
        params->proj_clip = seq_lstm_params->proj_clip();
   c3cee:	ed84 0a02 	vstr	s0, [r4, #8]
   c3cf2:	210a      	movs	r1, #10
   c3cf4:	4628      	mov	r0, r5
   c3cf6:	f7ff fbcb 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3cfa:	3800      	subs	r0, #0
   c3cfc:	bf18      	it	ne
   c3cfe:	2001      	movne	r0, #1
   c3d00:	7320      	strb	r0, [r4, #12]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3d02:	e4bb      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3d04:	000c9597 	.word	0x000c9597
   c3d08:	000c95c1 	.word	0x000c95c1
   c3d0c:	000c95e0 	.word	0x000c95e0
   c3d10:	00000000 	.word	0x00000000
   c3d14:	6823      	ldr	r3, [r4, #0]
   c3d16:	2110      	movs	r1, #16
   c3d18:	681b      	ldr	r3, [r3, #0]
   c3d1a:	4620      	mov	r0, r4
   c3d1c:	4798      	blx	r3
   c3d1e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_BidirectionalSequenceLSTMOptions ? static_cast<const BidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   c3d20:	4628      	mov	r0, r5
   c3d22:	f7ff fbbe 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3d26:	2845      	cmp	r0, #69	; 0x45
   c3d28:	f47f aca8 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3d2c:	4628      	mov	r0, r5
   c3d2e:	f7ff fb76 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_lstm_params =
   c3d32:	4605      	mov	r5, r0
   c3d34:	2800      	cmp	r0, #0
   c3d36:	f43f aca1 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3d3a:	2200      	movs	r2, #0
   c3d3c:	2104      	movs	r1, #4
   c3d3e:	f7ff fbbf 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3d42:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3d44:	1e43      	subs	r3, r0, #1
   c3d46:	2b04      	cmp	r3, #4
   c3d48:	bf88      	it	hi
   c3d4a:	2000      	movhi	r0, #0
        params->activation =
   c3d4c:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3d4e:	2106      	movs	r1, #6
   c3d50:	4628      	mov	r0, r5
   c3d52:	ed1f 0a11 	vldr	s0, [pc, #-68]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3d56:	f7ff fbbc 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3d5a:	2108      	movs	r1, #8
        params->cell_clip = bidi_lstm_params->cell_clip();
   c3d5c:	ed84 0a01 	vstr	s0, [r4, #4]
   c3d60:	4628      	mov	r0, r5
   c3d62:	ed1f 0a15 	vldr	s0, [pc, #-84]	; c3d10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3d66:	f7ff fbb4 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   c3d6a:	2200      	movs	r2, #0
        params->proj_clip = bidi_lstm_params->proj_clip();
   c3d6c:	ed84 0a02 	vstr	s0, [r4, #8]
   c3d70:	210a      	movs	r1, #10
   c3d72:	4628      	mov	r0, r5
   c3d74:	f7ff fb8c 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3d78:	3800      	subs	r0, #0
   c3d7a:	bf18      	it	ne
   c3d7c:	2001      	movne	r0, #1
   c3d7e:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
   c3d80:	2201      	movs	r2, #1
   c3d82:	210c      	movs	r1, #12
   c3d84:	4628      	mov	r0, r5
   c3d86:	f7ff fb83 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3d8a:	3800      	subs	r0, #0
   c3d8c:	bf18      	it	ne
   c3d8e:	2001      	movne	r0, #1
   c3d90:	7360      	strb	r0, [r4, #13]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3d92:	e473      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3d94:	6823      	ldr	r3, [r4, #0]
   c3d96:	2101      	movs	r1, #1
   c3d98:	681b      	ldr	r3, [r3, #0]
   c3d9a:	4620      	mov	r0, r4
   c3d9c:	4798      	blx	r3
   c3d9e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ResizeBilinearOptions ? static_cast<const ResizeBilinearOptions *>(builtin_options()) : nullptr;
   c3da0:	4628      	mov	r0, r5
   c3da2:	f7ff fb7e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3da6:	280f      	cmp	r0, #15
   c3da8:	f47f ac68 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3dac:	4628      	mov	r0, r5
   c3dae:	f7ff fb36 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3db2:	2800      	cmp	r0, #0
   c3db4:	f43f ac62 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   c3db8:	2200      	movs	r2, #0
   c3dba:	2108      	movs	r1, #8
   c3dbc:	f7ff fb68 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3dc0:	3800      	subs	r0, #0
   c3dc2:	bf18      	it	ne
   c3dc4:	2001      	movne	r0, #1
   c3dc6:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3dc8:	e458      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3dca:	6823      	ldr	r3, [r4, #0]
   c3dcc:	2101      	movs	r1, #1
   c3dce:	681b      	ldr	r3, [r3, #0]
   c3dd0:	4620      	mov	r0, r4
   c3dd2:	4798      	blx	r3
   c3dd4:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   c3dd6:	4628      	mov	r0, r5
   c3dd8:	f7ff fb63 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ddc:	284a      	cmp	r0, #74	; 0x4a
   c3dde:	f47f ac4d 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3de2:	4628      	mov	r0, r5
   c3de4:	f7ff fb1b 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
        if (const auto* schema_params =
   c3de8:	2800      	cmp	r0, #0
   c3dea:	f43f ac47 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   c3dee:	2200      	movs	r2, #0
   c3df0:	2104      	movs	r1, #4
   c3df2:	f7ff fb4d 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3df6:	3800      	subs	r0, #0
   c3df8:	bf18      	it	ne
   c3dfa:	2001      	movne	r0, #1
   c3dfc:	7020      	strb	r0, [r4, #0]
        *builtin_data = reinterpret_cast<void*>(params.release());
   c3dfe:	e43d      	b.n	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e00:	6823      	ldr	r3, [r4, #0]
   c3e02:	2124      	movs	r1, #36	; 0x24
   c3e04:	681b      	ldr	r3, [r3, #0]
   c3e06:	4620      	mov	r0, r4
   c3e08:	4798      	blx	r3
   c3e0a:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_ReshapeOptions ? static_cast<const ReshapeOptions *>(builtin_options()) : nullptr;
   c3e0c:	4628      	mov	r0, r5
   c3e0e:	f7ff fb48 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3e12:	2811      	cmp	r0, #17
   c3e14:	f47f adfd 	bne.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3e18:	4628      	mov	r0, r5
   c3e1a:	f7ff fb00 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReshapeOptions()) {
   c3e1e:	4605      	mov	r5, r0
   c3e20:	2800      	cmp	r0, #0
   c3e22:	f43f adf6 	beq.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    auto field_offset = GetOptionalFieldOffset(field);
   c3e26:	2104      	movs	r1, #4
   c3e28:	f7f1 fcbb 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c3e2c:	4603      	mov	r3, r0
   c3e2e:	b170      	cbz	r0, c3e4e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x95a>
    auto p = data_ + field_offset;
   c3e30:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c3e32:	58ed      	ldr	r5, [r5, r3]
   c3e34:	4405      	add	r5, r0
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c3e36:	4bc5      	ldr	r3, [pc, #788]	; (c414c <platform_monolithic_firmware_flash_size+0x14c>)
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c3e38:	4642      	mov	r2, r8
   c3e3a:	4631      	mov	r1, r6
   c3e3c:	4628      	mov	r0, r5
   c3e3e:	f7ff fabd 	bl	c33bc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0>
   c3e42:	2800      	cmp	r0, #0
   c3e44:	f47f ac48 	bne.w	c36d8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
        params->num_squeeze_dims = squeeze_dims->size();
   c3e48:	682b      	ldr	r3, [r5, #0]
   c3e4a:	6233      	str	r3, [r6, #32]
   c3e4c:	e5e1      	b.n	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3e4e:	4605      	mov	r5, r0
   c3e50:	e7f1      	b.n	c3e36 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x942>
   c3e52:	6823      	ldr	r3, [r4, #0]
   c3e54:	210c      	movs	r1, #12
   c3e56:	681b      	ldr	r3, [r3, #0]
   c3e58:	4620      	mov	r0, r4
   c3e5a:	4798      	blx	r3
   c3e5c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SkipGramOptions ? static_cast<const SkipGramOptions *>(builtin_options()) : nullptr;
   c3e5e:	4628      	mov	r0, r5
   c3e60:	f7ff fb1f 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3e64:	2812      	cmp	r0, #18
   c3e66:	f47f ac09 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e6a:	4628      	mov	r0, r5
   c3e6c:	f7ff fad7 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* skip_gram_params =
   c3e70:	4605      	mov	r5, r0
   c3e72:	2800      	cmp	r0, #0
   c3e74:	f43f ac02 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
   c3e78:	2200      	movs	r2, #0
   c3e7a:	2104      	movs	r1, #4
   c3e7c:	f7ff fb17 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
   c3e80:	2200      	movs	r2, #0
        params->ngram_size = skip_gram_params->ngram_size();
   c3e82:	6020      	str	r0, [r4, #0]
   c3e84:	2106      	movs	r1, #6
   c3e86:	4628      	mov	r0, r5
   c3e88:	f7ff fb11 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
   c3e8c:	2200      	movs	r2, #0
        params->max_skip_size = skip_gram_params->max_skip_size();
   c3e8e:	6060      	str	r0, [r4, #4]
   c3e90:	2108      	movs	r1, #8
   c3e92:	4628      	mov	r0, r5
   c3e94:	f7ff fafc 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3e98:	3800      	subs	r0, #0
   c3e9a:	bf18      	it	ne
   c3e9c:	2001      	movne	r0, #1
   c3e9e:	7220      	strb	r0, [r4, #8]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3ea0:	f7ff bbec 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ea4:	6823      	ldr	r3, [r4, #0]
   c3ea6:	2104      	movs	r1, #4
   c3ea8:	681b      	ldr	r3, [r3, #0]
   c3eaa:	4620      	mov	r0, r4
   c3eac:	4798      	blx	r3
   c3eae:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SpaceToDepthOptions ? static_cast<const SpaceToDepthOptions *>(builtin_options()) : nullptr;
   c3eb0:	4628      	mov	r0, r5
   c3eb2:	f7ff faf6 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3eb6:	2813      	cmp	r0, #19
   c3eb8:	f47f abe0 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ebc:	4628      	mov	r0, r5
   c3ebe:	f7ff faae 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3ec2:	2800      	cmp	r0, #0
   c3ec4:	f43f abda 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   c3ec8:	2200      	movs	r2, #0
   c3eca:	2104      	movs	r1, #4
   c3ecc:	f7ff faef 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->block_size = schema_params->block_size();
   c3ed0:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3ed2:	f7ff bbd3 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ed6:	6823      	ldr	r3, [r4, #0]
   c3ed8:	2104      	movs	r1, #4
   c3eda:	681b      	ldr	r3, [r3, #0]
   c3edc:	4620      	mov	r0, r4
   c3ede:	4798      	blx	r3
   c3ee0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DepthToSpaceOptions ? static_cast<const DepthToSpaceOptions *>(builtin_options()) : nullptr;
   c3ee2:	4628      	mov	r0, r5
   c3ee4:	f7ff fadd 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ee8:	285e      	cmp	r0, #94	; 0x5e
   c3eea:	f47f abc7 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3eee:	4628      	mov	r0, r5
   c3ef0:	f7ff fa95 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3ef4:	2800      	cmp	r0, #0
   c3ef6:	f43f abc1 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   c3efa:	2200      	movs	r2, #0
   c3efc:	2104      	movs	r1, #4
   c3efe:	f7ff fad6 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->block_size = schema_params->block_size();
   c3f02:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f04:	f7ff bbba 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f08:	6823      	ldr	r3, [r4, #0]
   c3f0a:	2104      	movs	r1, #4
   c3f0c:	681b      	ldr	r3, [r3, #0]
   c3f0e:	4620      	mov	r0, r4
   c3f10:	4798      	blx	r3
      params->axis = 0;
   c3f12:	2600      	movs	r6, #0
   c3f14:	6006      	str	r6, [r0, #0]
   c3f16:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_GatherOptions ? static_cast<const GatherOptions *>(builtin_options()) : nullptr;
   c3f18:	4628      	mov	r0, r5
   c3f1a:	f7ff fac2 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f1e:	2817      	cmp	r0, #23
   c3f20:	f47f abac 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f24:	4628      	mov	r0, r5
   c3f26:	f7ff fa7a 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* gather_params = op->builtin_options_as_GatherOptions()) {
   c3f2a:	2800      	cmp	r0, #0
   c3f2c:	f43f aba6 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_AXIS, 0);
   c3f30:	4632      	mov	r2, r6
   c3f32:	2104      	movs	r1, #4
   c3f34:	f7ff fabb 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = gather_params->axis();
   c3f38:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f3a:	f7ff bb9f 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f3e:	6823      	ldr	r3, [r4, #0]
   c3f40:	2101      	movs	r1, #1
   c3f42:	681b      	ldr	r3, [r3, #0]
   c3f44:	4620      	mov	r0, r4
   c3f46:	4798      	blx	r3
   c3f48:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ReducerOptions ? static_cast<const ReducerOptions *>(builtin_options()) : nullptr;
   c3f4a:	4628      	mov	r0, r5
   c3f4c:	f7ff faa9 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f50:	281b      	cmp	r0, #27
   c3f52:	f47f ab93 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f56:	4628      	mov	r0, r5
   c3f58:	f7ff fa61 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReducerOptions()) {
   c3f5c:	2800      	cmp	r0, #0
   c3f5e:	f43f ab8d 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   c3f62:	2200      	movs	r2, #0
   c3f64:	2104      	movs	r1, #4
   c3f66:	f7ff fa93 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3f6a:	3800      	subs	r0, #0
   c3f6c:	bf18      	it	ne
   c3f6e:	2001      	movne	r0, #1
   c3f70:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f72:	f7ff bb83 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f76:	6823      	ldr	r3, [r4, #0]
   c3f78:	2104      	movs	r1, #4
   c3f7a:	681b      	ldr	r3, [r3, #0]
   c3f7c:	4620      	mov	r0, r4
   c3f7e:	4798      	blx	r3
   c3f80:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SplitOptions ? static_cast<const SplitOptions *>(builtin_options()) : nullptr;
   c3f82:	4628      	mov	r0, r5
   c3f84:	f7ff fa8d 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f88:	2823      	cmp	r0, #35	; 0x23
   c3f8a:	f47f ab77 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f8e:	4628      	mov	r0, r5
   c3f90:	f7ff fa45 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitOptions()) {
   c3f94:	2800      	cmp	r0, #0
   c3f96:	f43f ab71 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   c3f9a:	2200      	movs	r2, #0
   c3f9c:	2104      	movs	r1, #4
   c3f9e:	f7ff fa86 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->num_splits = schema_params->num_splits();
   c3fa2:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3fa4:	f7ff bb6a 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fa8:	6823      	ldr	r3, [r4, #0]
   c3faa:	2104      	movs	r1, #4
   c3fac:	681b      	ldr	r3, [r3, #0]
   c3fae:	4620      	mov	r0, r4
   c3fb0:	4798      	blx	r3
   c3fb2:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SplitVOptions ? static_cast<const SplitVOptions *>(builtin_options()) : nullptr;
   c3fb4:	4628      	mov	r0, r5
   c3fb6:	f7ff fa74 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3fba:	284f      	cmp	r0, #79	; 0x4f
   c3fbc:	f47f ab5e 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fc0:	4628      	mov	r0, r5
   c3fc2:	f7ff fa2c 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitVOptions()) {
   c3fc6:	2800      	cmp	r0, #0
   c3fc8:	f43f ab58 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   c3fcc:	2200      	movs	r2, #0
   c3fce:	2104      	movs	r1, #4
   c3fd0:	f7ff fa6d 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->num_splits = schema_params->num_splits();
   c3fd4:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3fd6:	f7ff bb51 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fda:	6823      	ldr	r3, [r4, #0]
   c3fdc:	2124      	movs	r1, #36	; 0x24
   c3fde:	681b      	ldr	r3, [r3, #0]
   c3fe0:	4620      	mov	r0, r4
   c3fe2:	4798      	blx	r3
   c3fe4:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_SqueezeOptions ? static_cast<const SqueezeOptions *>(builtin_options()) : nullptr;
   c3fe6:	4628      	mov	r0, r5
   c3fe8:	f7ff fa5b 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3fec:	281e      	cmp	r0, #30
   c3fee:	f47f ad10 	bne.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3ff2:	4628      	mov	r0, r5
   c3ff4:	f7ff fa13 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SqueezeOptions()) {
   c3ff8:	4605      	mov	r5, r0
   c3ffa:	2800      	cmp	r0, #0
   c3ffc:	f43f ad09 	beq.w	c3a12 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    auto field_offset = GetOptionalFieldOffset(field);
   c4000:	2104      	movs	r1, #4
   c4002:	f7f1 fbce 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c4006:	4603      	mov	r3, r0
   c4008:	b120      	cbz	r0, c4014 <platform_monolithic_firmware_flash_size+0x14>
    auto p = data_ + field_offset;
   c400a:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c400c:	58ed      	ldr	r5, [r5, r3]
   c400e:	4405      	add	r5, r0
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c4010:	4b4f      	ldr	r3, [pc, #316]	; (c4150 <platform_monolithic_firmware_flash_size+0x150>)
   c4012:	e711      	b.n	c3e38 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x944>
   c4014:	4605      	mov	r5, r0
   c4016:	e7fb      	b.n	c4010 <platform_monolithic_firmware_flash_size+0x10>
   c4018:	6823      	ldr	r3, [r4, #0]
   c401a:	2114      	movs	r1, #20
   c401c:	681b      	ldr	r3, [r3, #0]
   c401e:	4620      	mov	r0, r4
   c4020:	4798      	blx	r3
   c4022:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_StridedSliceOptions ? static_cast<const StridedSliceOptions *>(builtin_options()) : nullptr;
   c4024:	4628      	mov	r0, r5
   c4026:	f7ff fa3c 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c402a:	2820      	cmp	r0, #32
   c402c:	f47f ab26 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4030:	4628      	mov	r0, r5
   c4032:	f7ff f9f4 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c4036:	4605      	mov	r5, r0
   c4038:	2800      	cmp	r0, #0
   c403a:	f43f ab1f 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   c403e:	2200      	movs	r2, #0
   c4040:	2104      	movs	r1, #4
   c4042:	f7ff fa34 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   c4046:	2200      	movs	r2, #0
        params->begin_mask = schema_params->begin_mask();
   c4048:	6020      	str	r0, [r4, #0]
   c404a:	2106      	movs	r1, #6
   c404c:	4628      	mov	r0, r5
   c404e:	f7ff fa2e 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   c4052:	2200      	movs	r2, #0
        params->end_mask = schema_params->end_mask();
   c4054:	6060      	str	r0, [r4, #4]
   c4056:	2108      	movs	r1, #8
   c4058:	4628      	mov	r0, r5
   c405a:	f7ff fa28 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   c405e:	2200      	movs	r2, #0
        params->ellipsis_mask = schema_params->ellipsis_mask();
   c4060:	60a0      	str	r0, [r4, #8]
   c4062:	210a      	movs	r1, #10
   c4064:	4628      	mov	r0, r5
   c4066:	f7ff fa22 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   c406a:	2200      	movs	r2, #0
        params->new_axis_mask = schema_params->new_axis_mask();
   c406c:	60e0      	str	r0, [r4, #12]
   c406e:	210c      	movs	r1, #12
   c4070:	4628      	mov	r0, r5
   c4072:	f7ff fa1c 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->shrink_axis_mask = schema_params->shrink_axis_mask();
   c4076:	6120      	str	r0, [r4, #16]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4078:	f7ff bb00 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c407c:	6823      	ldr	r3, [r4, #0]
   c407e:	2101      	movs	r1, #1
   c4080:	681b      	ldr	r3, [r3, #0]
   c4082:	4620      	mov	r0, r4
   c4084:	4798      	blx	r3
   c4086:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ArgMaxOptions ? static_cast<const ArgMaxOptions *>(builtin_options()) : nullptr;
   c4088:	4628      	mov	r0, r5
   c408a:	f7ff fa0a 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c408e:	2828      	cmp	r0, #40	; 0x28
   c4090:	f47f aaf4 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4094:	4628      	mov	r0, r5
   c4096:	f7ff f9c2 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ArgMaxOptions()) {
   c409a:	2800      	cmp	r0, #0
   c409c:	f43f aaee 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   c40a0:	2200      	movs	r2, #0
   c40a2:	2104      	movs	r1, #4
   c40a4:	f7ff fa0c 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->output_type(), &params->output_type,
   c40a8:	4642      	mov	r2, r8
   c40aa:	4621      	mov	r1, r4
   c40ac:	b2c0      	uxtb	r0, r0
   c40ae:	f7ff f9c1 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = reinterpret_cast<void*>(params.release());
   c40b2:	f7ff bae3 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c40b6:	6823      	ldr	r3, [r4, #0]
   c40b8:	2101      	movs	r1, #1
   c40ba:	681b      	ldr	r3, [r3, #0]
   c40bc:	4620      	mov	r0, r4
   c40be:	4798      	blx	r3
   c40c0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ArgMinOptions ? static_cast<const ArgMinOptions *>(builtin_options()) : nullptr;
   c40c2:	4628      	mov	r0, r5
   c40c4:	f7ff f9ed 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c40c8:	2839      	cmp	r0, #57	; 0x39
   c40ca:	f47f aad7 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c40ce:	4628      	mov	r0, r5
   c40d0:	f7ff f9a5 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ArgMinOptions()) {
   c40d4:	2800      	cmp	r0, #0
   c40d6:	f43f aad1 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   c40da:	2200      	movs	r2, #0
   c40dc:	2104      	movs	r1, #4
   c40de:	f7ff f9ef 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->output_type(), &params->output_type,
   c40e2:	4642      	mov	r2, r8
   c40e4:	4621      	mov	r1, r4
   c40e6:	b2c0      	uxtb	r0, r0
   c40e8:	f7ff f9a4 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = reinterpret_cast<void*>(params.release());
   c40ec:	f7ff bac6 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c40f0:	6823      	ldr	r3, [r4, #0]
   c40f2:	210c      	movs	r1, #12
   c40f4:	681b      	ldr	r3, [r3, #0]
   c40f6:	4620      	mov	r0, r4
   c40f8:	4798      	blx	r3
   c40fa:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_TransposeConvOptions ? static_cast<const TransposeConvOptions *>(builtin_options()) : nullptr;
   c40fc:	4628      	mov	r0, r5
   c40fe:	f7ff f9d0 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4102:	2831      	cmp	r0, #49	; 0x31
   c4104:	f47f aaba 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4108:	4628      	mov	r0, r5
   c410a:	f7ff f988 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* transpose_conv_params =
   c410e:	4605      	mov	r5, r0
   c4110:	2800      	cmp	r0, #0
   c4112:	f43f aab3 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c4116:	2200      	movs	r2, #0
   c4118:	2104      	movs	r1, #4
   c411a:	f7ff f9d1 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c411e:	b190      	cbz	r0, c4146 <platform_monolithic_firmware_flash_size+0x146>
   c4120:	2801      	cmp	r0, #1
   c4122:	bf14      	ite	ne
   c4124:	2300      	movne	r3, #0
   c4126:	2302      	moveq	r3, #2
        params->padding = parse_padding(transpose_conv_params->padding());
   c4128:	7023      	strb	r3, [r4, #0]
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c412a:	2200      	movs	r2, #0
   c412c:	2106      	movs	r1, #6
   c412e:	4628      	mov	r0, r5
   c4130:	f7ff f9bd 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c4134:	2200      	movs	r2, #0
        params->stride_width = transpose_conv_params->stride_w();
   c4136:	6060      	str	r0, [r4, #4]
   c4138:	2108      	movs	r1, #8
   c413a:	4628      	mov	r0, r5
   c413c:	f7ff f9b7 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->stride_height = transpose_conv_params->stride_h();
   c4140:	60a0      	str	r0, [r4, #8]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4142:	f7ff ba9b 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c4146:	2301      	movs	r3, #1
   c4148:	e7ee      	b.n	c4128 <platform_monolithic_firmware_flash_size+0x128>
   c414a:	bf00      	nop
   c414c:	000c9604 	.word	0x000c9604
   c4150:	000c960c 	.word	0x000c960c
   c4154:	6823      	ldr	r3, [r4, #0]
   c4156:	2101      	movs	r1, #1
   c4158:	681b      	ldr	r3, [r3, #0]
   c415a:	4620      	mov	r0, r4
   c415c:	4798      	blx	r3
   c415e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SparseToDenseOptions ? static_cast<const SparseToDenseOptions *>(builtin_options()) : nullptr;
   c4160:	4628      	mov	r0, r5
   c4162:	f7ff f99e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4166:	2832      	cmp	r0, #50	; 0x32
   c4168:	f47f aa88 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c416c:	4628      	mov	r0, r5
   c416e:	f7ff f956 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sparse_to_dense_params =
   c4172:	2800      	cmp	r0, #0
   c4174:	f43f aa82 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
   c4178:	2200      	movs	r2, #0
   c417a:	2104      	movs	r1, #4
   c417c:	f7ff f988 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c4180:	3800      	subs	r0, #0
   c4182:	bf18      	it	ne
   c4184:	2001      	movne	r0, #1
   c4186:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4188:	f7ff ba78 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c418c:	6823      	ldr	r3, [r4, #0]
   c418e:	2101      	movs	r1, #1
   c4190:	681b      	ldr	r3, [r3, #0]
   c4192:	4620      	mov	r0, r4
   c4194:	4798      	blx	r3
   c4196:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ShapeOptions ? static_cast<const ShapeOptions *>(builtin_options()) : nullptr;
   c4198:	4628      	mov	r0, r5
   c419a:	f7ff f982 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c419e:	2837      	cmp	r0, #55	; 0x37
   c41a0:	f47f aa6c 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c41a4:	4628      	mov	r0, r5
   c41a6:	f7ff f93a 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ShapeOptions()) {
   c41aa:	2800      	cmp	r0, #0
   c41ac:	f43f aa66 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
   c41b0:	2200      	movs	r2, #0
   c41b2:	2104      	movs	r1, #4
   c41b4:	f7ff f984 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->out_type(), &params->out_type,
   c41b8:	4642      	mov	r2, r8
   c41ba:	4621      	mov	r1, r4
   c41bc:	b2c0      	uxtb	r0, r0
   c41be:	f7ff f939 	bl	c3434 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = static_cast<void*>(params.release());
   c41c2:	f7ff ba5b 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c41c6:	6823      	ldr	r3, [r4, #0]
   c41c8:	2108      	movs	r1, #8
   c41ca:	681b      	ldr	r3, [r3, #0]
   c41cc:	4620      	mov	r0, r4
   c41ce:	4798      	blx	r3
   c41d0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_PackOptions ? static_cast<const PackOptions *>(builtin_options()) : nullptr;
   c41d2:	4628      	mov	r0, r5
   c41d4:	f7ff f965 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c41d8:	283b      	cmp	r0, #59	; 0x3b
   c41da:	f47f aa4f 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c41de:	4628      	mov	r0, r5
   c41e0:	f7ff f91d 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pack_params = op->builtin_options_as_PackOptions()) {
   c41e4:	4605      	mov	r5, r0
   c41e6:	2800      	cmp	r0, #0
   c41e8:	f43f aa48 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   c41ec:	2200      	movs	r2, #0
   c41ee:	2104      	movs	r1, #4
   c41f0:	f7ff f95d 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   c41f4:	2200      	movs	r2, #0
        params->values_count = pack_params->values_count();
   c41f6:	6020      	str	r0, [r4, #0]
   c41f8:	2106      	movs	r1, #6
   c41fa:	4628      	mov	r0, r5
   c41fc:	f7ff f957 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = pack_params->axis();
   c4200:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4202:	f7ff ba3b 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
      error_reporter->Report("DELEGATE op shouldn't exist in model.");
   c4206:	4993      	ldr	r1, [pc, #588]	; (c4454 <platform_monolithic_firmware_flash_size+0x454>)
   c4208:	4610      	mov	r0, r2
   c420a:	f000 f981 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c420e:	f7ff ba66 	b.w	c36de <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ea>
   c4212:	6823      	ldr	r3, [r4, #0]
   c4214:	2110      	movs	r1, #16
   c4216:	681b      	ldr	r3, [r3, #0]
   c4218:	4620      	mov	r0, r4
   c421a:	4798      	blx	r3
   c421c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_FakeQuantOptions ? static_cast<const FakeQuantOptions *>(builtin_options()) : nullptr;
   c421e:	4628      	mov	r0, r5
   c4220:	f7ff f93f 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4224:	283a      	cmp	r0, #58	; 0x3a
   c4226:	f47f aa29 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c422a:	4628      	mov	r0, r5
   c422c:	f7ff f8f7 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c4230:	4605      	mov	r5, r0
   c4232:	2800      	cmp	r0, #0
   c4234:	f43f aa22 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_MIN, 0.0f);
   c4238:	2104      	movs	r1, #4
   c423a:	ed9f 0a87 	vldr	s0, [pc, #540]	; c4458 <platform_monolithic_firmware_flash_size+0x458>
   c423e:	f7ff f948 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_MAX, 0.0f);
   c4242:	2106      	movs	r1, #6
        params->min = schema_params->min();
   c4244:	ed84 0a00 	vstr	s0, [r4]
   c4248:	4628      	mov	r0, r5
   c424a:	ed9f 0a83 	vldr	s0, [pc, #524]	; c4458 <platform_monolithic_firmware_flash_size+0x458>
   c424e:	f7ff f940 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<int32_t>(VT_NUM_BITS, 0);
   c4252:	2200      	movs	r2, #0
        params->max = schema_params->max();
   c4254:	ed84 0a01 	vstr	s0, [r4, #4]
   c4258:	2108      	movs	r1, #8
   c425a:	4628      	mov	r0, r5
   c425c:	f7ff f927 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
   c4260:	2200      	movs	r2, #0
        params->num_bits = schema_params->num_bits();
   c4262:	60a0      	str	r0, [r4, #8]
   c4264:	210a      	movs	r1, #10
   c4266:	4628      	mov	r0, r5
   c4268:	f7ff f912 	bl	c3490 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c426c:	3800      	subs	r0, #0
   c426e:	bf18      	it	ne
   c4270:	2001      	movne	r0, #1
   c4272:	7320      	strb	r0, [r4, #12]
      *builtin_data = static_cast<void*>(params.release());
   c4274:	f7ff ba02 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4278:	6823      	ldr	r3, [r4, #0]
   c427a:	2104      	movs	r1, #4
   c427c:	681b      	ldr	r3, [r3, #0]
   c427e:	4620      	mov	r0, r4
   c4280:	4798      	blx	r3
   c4282:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_OneHotOptions ? static_cast<const OneHotOptions *>(builtin_options()) : nullptr;
   c4284:	4628      	mov	r0, r5
   c4286:	f7ff f90c 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c428a:	283d      	cmp	r0, #61	; 0x3d
   c428c:	f47f a9f6 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4290:	4628      	mov	r0, r5
   c4292:	f7ff f8c4 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
   c4296:	2800      	cmp	r0, #0
   c4298:	f43f a9f0 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_AXIS, 0);
   c429c:	2200      	movs	r2, #0
   c429e:	2104      	movs	r1, #4
   c42a0:	f7ff f905 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = schema_params->axis();
   c42a4:	6020      	str	r0, [r4, #0]
      *builtin_data = static_cast<void*>(params.release());
   c42a6:	f7ff b9e9 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c42aa:	6823      	ldr	r3, [r4, #0]
   c42ac:	2108      	movs	r1, #8
   c42ae:	681b      	ldr	r3, [r3, #0]
   c42b0:	4620      	mov	r0, r4
   c42b2:	4798      	blx	r3
   c42b4:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UnpackOptions ? static_cast<const UnpackOptions *>(builtin_options()) : nullptr;
   c42b6:	4628      	mov	r0, r5
   c42b8:	f7ff f8f3 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c42bc:	2840      	cmp	r0, #64	; 0x40
   c42be:	f47f a9dd 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c42c2:	4628      	mov	r0, r5
   c42c4:	f7ff f8ab 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* unpack_params = op->builtin_options_as_UnpackOptions()) {
   c42c8:	4605      	mov	r5, r0
   c42ca:	2800      	cmp	r0, #0
   c42cc:	f43f a9d6 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM, 0);
   c42d0:	2200      	movs	r2, #0
   c42d2:	2104      	movs	r1, #4
   c42d4:	f7ff f8eb 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   c42d8:	2200      	movs	r2, #0
        params->num = unpack_params->num();
   c42da:	6020      	str	r0, [r4, #0]
   c42dc:	2106      	movs	r1, #6
   c42de:	4628      	mov	r0, r5
   c42e0:	f7ff f8e5 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = unpack_params->axis();
   c42e4:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c42e6:	f7ff b9c9 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c42ea:	6823      	ldr	r3, [r4, #0]
   c42ec:	2104      	movs	r1, #4
   c42ee:	681b      	ldr	r3, [r3, #0]
   c42f0:	4620      	mov	r0, r4
   c42f2:	4798      	blx	r3
   c42f4:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LeakyReluOptions ? static_cast<const LeakyReluOptions *>(builtin_options()) : nullptr;
   c42f6:	4628      	mov	r0, r5
   c42f8:	f7ff f8d3 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c42fc:	284b      	cmp	r0, #75	; 0x4b
   c42fe:	f47f a9bd 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4302:	4628      	mov	r0, r5
   c4304:	f7ff f88b 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* leaky_relu_params =
   c4308:	2800      	cmp	r0, #0
   c430a:	f43f a9b7 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_ALPHA, 0.0f);
   c430e:	ed9f 0a52 	vldr	s0, [pc, #328]	; c4458 <platform_monolithic_firmware_flash_size+0x458>
   c4312:	2104      	movs	r1, #4
   c4314:	f7ff f8dd 	bl	c34d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->alpha = leaky_relu_params->alpha();
   c4318:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c431c:	f7ff b9ae 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4320:	6823      	ldr	r3, [r4, #0]
   c4322:	2101      	movs	r1, #1
   c4324:	681b      	ldr	r3, [r3, #0]
   c4326:	4620      	mov	r0, r4
   c4328:	4798      	blx	r3
   c432a:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_MirrorPadOptions ? static_cast<const MirrorPadOptions *>(builtin_options()) : nullptr;
   c432c:	4628      	mov	r0, r5
   c432e:	f7ff f8b8 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4332:	284d      	cmp	r0, #77	; 0x4d
   c4334:	f47f a9a2 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4338:	4628      	mov	r0, r5
   c433a:	f7ff f870 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (mirror_pad_params != nullptr) {
   c433e:	2800      	cmp	r0, #0
   c4340:	f43f a99c 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
   c4344:	2200      	movs	r2, #0
   c4346:	2104      	movs	r1, #4
   c4348:	f7ff f8ba 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
   c434c:	2800      	cmp	r0, #0
   c434e:	bf0c      	ite	eq
   c4350:	2301      	moveq	r3, #1
   c4352:	2302      	movne	r3, #2
        params->mode =
   c4354:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4356:	f7ff b991 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c435a:	6823      	ldr	r3, [r4, #0]
   c435c:	2101      	movs	r1, #1
   c435e:	681b      	ldr	r3, [r3, #0]
   c4360:	4620      	mov	r0, r4
   c4362:	4798      	blx	r3
   c4364:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UniqueOptions ? static_cast<const UniqueOptions *>(builtin_options()) : nullptr;
   c4366:	4628      	mov	r0, r5
   c4368:	f7ff f89b 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c436c:	2850      	cmp	r0, #80	; 0x50
   c436e:	f47f a985 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4372:	4628      	mov	r0, r5
   c4374:	f7ff f853 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (unique_params != nullptr) {
   c4378:	2800      	cmp	r0, #0
   c437a:	f43f a97f 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
   c437e:	2202      	movs	r2, #2
   c4380:	2104      	movs	r1, #4
   c4382:	f7ff f89d 	bl	c34c0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteType::kTfLiteInt64
   c4386:	2804      	cmp	r0, #4
   c4388:	bf0c      	ite	eq
   c438a:	2304      	moveq	r3, #4
   c438c:	2302      	movne	r3, #2
        params->index_out_type =
   c438e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4390:	f7ff b974 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4394:	6823      	ldr	r3, [r4, #0]
   c4396:	2108      	movs	r1, #8
   c4398:	681b      	ldr	r3, [r3, #0]
   c439a:	4620      	mov	r0, r4
   c439c:	4798      	blx	r3
   c439e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ReverseSequenceOptions ? static_cast<const ReverseSequenceOptions *>(builtin_options()) : nullptr;
   c43a0:	4628      	mov	r0, r5
   c43a2:	f7ff f87e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c43a6:	2857      	cmp	r0, #87	; 0x57
   c43a8:	f47f a968 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43ac:	4628      	mov	r0, r5
   c43ae:	f7ff f836 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* reverse_seq_params =
   c43b2:	4605      	mov	r5, r0
   c43b4:	2800      	cmp	r0, #0
   c43b6:	f43f a961 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_SEQ_DIM, 0);
   c43ba:	2200      	movs	r2, #0
   c43bc:	2104      	movs	r1, #4
   c43be:	f7ff f876 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BATCH_DIM, 0);
   c43c2:	2200      	movs	r2, #0
        params->seq_dim = reverse_seq_params->seq_dim();
   c43c4:	6020      	str	r0, [r4, #0]
   c43c6:	2106      	movs	r1, #6
   c43c8:	4628      	mov	r0, r5
   c43ca:	f7ff f870 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->batch_dim = reverse_seq_params->batch_dim();
   c43ce:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c43d0:	f7ff b954 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43d4:	6823      	ldr	r3, [r4, #0]
   c43d6:	2108      	movs	r1, #8
   c43d8:	681b      	ldr	r3, [r3, #0]
   c43da:	4620      	mov	r0, r4
   c43dc:	4798      	blx	r3
   c43de:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_IfOptions ? static_cast<const IfOptions *>(builtin_options()) : nullptr;
   c43e0:	4628      	mov	r0, r5
   c43e2:	f7ff f85e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c43e6:	285c      	cmp	r0, #92	; 0x5c
   c43e8:	f47f a948 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43ec:	4628      	mov	r0, r5
   c43ee:	f7ff f816 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
   c43f2:	4605      	mov	r5, r0
   c43f4:	2800      	cmp	r0, #0
   c43f6:	f43f a941 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
   c43fa:	2200      	movs	r2, #0
   c43fc:	2104      	movs	r1, #4
   c43fe:	f7ff f856 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
   c4402:	2200      	movs	r2, #0
        params->then_subgraph_index = if_params->then_subgraph_index();
   c4404:	6020      	str	r0, [r4, #0]
   c4406:	2106      	movs	r1, #6
   c4408:	4628      	mov	r0, r5
   c440a:	f7ff f850 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->else_subgraph_index = if_params->else_subgraph_index();
   c440e:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params);
   c4410:	f7ff b934 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4414:	6823      	ldr	r3, [r4, #0]
   c4416:	2108      	movs	r1, #8
   c4418:	681b      	ldr	r3, [r3, #0]
   c441a:	4620      	mov	r0, r4
   c441c:	4798      	blx	r3
   c441e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_WhileOptions ? static_cast<const WhileOptions *>(builtin_options()) : nullptr;
   c4420:	4628      	mov	r0, r5
   c4422:	f7ff f83e 	bl	c34a2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4426:	285d      	cmp	r0, #93	; 0x5d
   c4428:	f47f a928 	bne.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c442c:	4628      	mov	r0, r5
   c442e:	f7fe fff6 	bl	c341e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
   c4432:	4605      	mov	r5, r0
   c4434:	2800      	cmp	r0, #0
   c4436:	f43f a921 	beq.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
   c443a:	2200      	movs	r2, #0
   c443c:	2104      	movs	r1, #4
   c443e:	f7ff f836 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
   c4442:	2200      	movs	r2, #0
        params->cond_subgraph_index = while_params->cond_subgraph_index();
   c4444:	6020      	str	r0, [r4, #0]
   c4446:	2106      	movs	r1, #6
   c4448:	4628      	mov	r0, r5
   c444a:	f7ff f830 	bl	c34ae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->body_subgraph_index = while_params->body_subgraph_index();
   c444e:	6060      	str	r0, [r4, #4]
   c4450:	f7ff b914 	b.w	c367c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4454:	000c9614 	.word	0x000c9614
   c4458:	00000000 	.word	0x00000000

000c445c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c445c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c4460:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   c4462:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c4464:	460f      	mov	r7, r1
  *registration = nullptr;
   c4466:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   c4468:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c446a:	4605      	mov	r5, r0
   c446c:	4690      	mov	r8, r2
   c446e:	f7f1 f998 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c4472:	b190      	cbz	r0, c449a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   c4474:	562c      	ldrsb	r4, [r5, r0]
    auto field_offset = GetOptionalFieldOffset(field);
   c4476:	2108      	movs	r1, #8
   c4478:	4628      	mov	r0, r5
    return static_cast<BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   c447a:	b2e4      	uxtb	r4, r4
   c447c:	f7f1 f991 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c4480:	b168      	cbz	r0, c449e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
   c4482:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   c4484:	2c79      	cmp	r4, #121	; 0x79
   c4486:	d90c      	bls.n	c44a2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x46>
      builtin_code < BuiltinOperator_MIN) {
    error_reporter->Report(
   c4488:	491d      	ldr	r1, [pc, #116]	; (c4500 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   c448a:	4622      	mov	r2, r4
   c448c:	4640      	mov	r0, r8
   c448e:	f000 f83f 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    *registration = op_resolver.FindOp(builtin_code, version);
    if (*registration == nullptr) {
      error_reporter->Report(
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
   c4492:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   c4494:	b002      	add	sp, #8
   c4496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c449a:	4604      	mov	r4, r0
   c449c:	e7eb      	b.n	c4476 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   c449e:	2201      	movs	r2, #1
   c44a0:	e7f0      	b.n	c4484 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   c44a2:	2c20      	cmp	r4, #32
   c44a4:	d011      	beq.n	c44ca <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6e>
    *registration = op_resolver.FindOp(builtin_code, version);
   c44a6:	683b      	ldr	r3, [r7, #0]
   c44a8:	9201      	str	r2, [sp, #4]
   c44aa:	681b      	ldr	r3, [r3, #0]
   c44ac:	4621      	mov	r1, r4
   c44ae:	4638      	mov	r0, r7
   c44b0:	4798      	blx	r3
    if (*registration == nullptr) {
   c44b2:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   c44b4:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   c44b6:	bb08      	cbnz	r0, c44fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa0>
      error_reporter->Report(
   c44b8:	4613      	mov	r3, r2
   c44ba:	4a12      	ldr	r2, [pc, #72]	; (c4504 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   c44bc:	4912      	ldr	r1, [pc, #72]	; (c4508 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   c44be:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   c44c2:	4640      	mov	r0, r8
   c44c4:	f000 f824 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c44c8:	e7e3      	b.n	c4492 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   c44ca:	2106      	movs	r1, #6
   c44cc:	4628      	mov	r0, r5
   c44ce:	9201      	str	r2, [sp, #4]
   c44d0:	f7f1 f967 	bl	b57a2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
   c44d4:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c44d6:	b160      	cbz	r0, c44f2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x96>
   c44d8:	582b      	ldr	r3, [r5, r0]
    *registration = op_resolver.FindOp(name, version);
   c44da:	9a01      	ldr	r2, [sp, #4]
   c44dc:	4419      	add	r1, r3
   c44de:	683b      	ldr	r3, [r7, #0]
   c44e0:	3104      	adds	r1, #4
   c44e2:	685b      	ldr	r3, [r3, #4]
   c44e4:	4638      	mov	r0, r7
   c44e6:	4798      	blx	r3
   c44e8:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   c44ea:	fab0 f080 	clz	r0, r0
   c44ee:	0940      	lsrs	r0, r0, #5
   c44f0:	e7d0      	b.n	c4494 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
    error_reporter->Report(
   c44f2:	4906      	ldr	r1, [pc, #24]	; (c450c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   c44f4:	4640      	mov	r0, r8
   c44f6:	f000 f80b 	bl	c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
   c44fa:	e7ca      	b.n	c4492 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
  TfLiteStatus status = kTfLiteOk;
   c44fc:	2000      	movs	r0, #0
   c44fe:	e7c9      	b.n	c4494 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   c4500:	000c963a 	.word	0x000c963a
   c4504:	000c7df8 	.word	0x000c7df8
   c4508:	000c968e 	.word	0x000c968e
   c450c:	000c96c3 	.word	0x000c96c3

000c4510 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   c4510:	b40e      	push	{r1, r2, r3}
   c4512:	b503      	push	{r0, r1, lr}
   c4514:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   c4516:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
   c4518:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   c451c:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   c451e:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   c4520:	4798      	blx	r3
  va_end(args);
  return code;
}
   c4522:	b002      	add	sp, #8
   c4524:	f85d eb04 	ldr.w	lr, [sp], #4
   c4528:	b003      	add	sp, #12
   c452a:	4770      	bx	lr

000c452c <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include <string.h>

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   c452c:	b530      	push	{r4, r5, lr}
  if (!tensor->is_variable) {
   c452e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   c4532:	b16b      	cbz	r3, c4550 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x24>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   c4534:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   c4536:	6844      	ldr	r4, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   c4538:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
   c453a:	bf0c      	ite	eq
   c453c:	6901      	ldreq	r1, [r0, #16]
  int value = 0;
   c453e:	2100      	movne	r1, #0
  char* raw_ptr = tensor->data.raw;
   c4540:	4623      	mov	r3, r4
  for (int i = 0; i < tensor->bytes; ++i) {
   c4542:	6985      	ldr	r5, [r0, #24]
   c4544:	1b1a      	subs	r2, r3, r4
   c4546:	42aa      	cmp	r2, r5
   c4548:	d202      	bcs.n	c4550 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x24>
    *raw_ptr = value;
   c454a:	f803 1b01 	strb.w	r1, [r3], #1
  for (int i = 0; i < tensor->bytes; ++i) {
   c454e:	e7f8      	b.n	c4542 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x16>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   c4550:	2000      	movs	r0, #0
   c4552:	bd30      	pop	{r4, r5, pc}

000c4554 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   c4554:	b508      	push	{r3, lr}
   c4556:	4b02      	ldr	r3, [pc, #8]	; (c4560 <netdb_freeaddrinfo+0xc>)
   c4558:	681b      	ldr	r3, [r3, #0]
   c455a:	689b      	ldr	r3, [r3, #8]
   c455c:	9301      	str	r3, [sp, #4]
   c455e:	bd08      	pop	{r3, pc}
   c4560:	00030268 	.word	0x00030268

000c4564 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   c4564:	b508      	push	{r3, lr}
   c4566:	4b02      	ldr	r3, [pc, #8]	; (c4570 <netdb_getaddrinfo+0xc>)
   c4568:	681b      	ldr	r3, [r3, #0]
   c456a:	68db      	ldr	r3, [r3, #12]
   c456c:	9301      	str	r3, [sp, #4]
   c456e:	bd08      	pop	{r3, pc}
   c4570:	00030268 	.word	0x00030268

000c4574 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   c4574:	b508      	push	{r3, lr}
   c4576:	4b02      	ldr	r3, [pc, #8]	; (c4580 <HAL_RNG_GetRandomNumber+0xc>)
   c4578:	681b      	ldr	r3, [r3, #0]
   c457a:	685b      	ldr	r3, [r3, #4]
   c457c:	9301      	str	r3, [sp, #4]
   c457e:	bd08      	pop	{r3, pc}
   c4580:	00030218 	.word	0x00030218

000c4584 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   c4584:	b508      	push	{r3, lr}
   c4586:	4b02      	ldr	r3, [pc, #8]	; (c4590 <HAL_Delay_Microseconds+0xc>)
   c4588:	681b      	ldr	r3, [r3, #0]
   c458a:	68db      	ldr	r3, [r3, #12]
   c458c:	9301      	str	r3, [sp, #4]
   c458e:	bd08      	pop	{r3, pc}
   c4590:	00030218 	.word	0x00030218

000c4594 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   c4594:	b508      	push	{r3, lr}
   c4596:	4b02      	ldr	r3, [pc, #8]	; (c45a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   c4598:	681b      	ldr	r3, [r3, #0]
   c459a:	695b      	ldr	r3, [r3, #20]
   c459c:	9301      	str	r3, [sp, #4]
   c459e:	bd08      	pop	{r3, pc}
   c45a0:	00030218 	.word	0x00030218

000c45a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   c45a4:	b508      	push	{r3, lr}
   c45a6:	4b02      	ldr	r3, [pc, #8]	; (c45b0 <os_mutex_recursive_create+0xc>)
   c45a8:	681b      	ldr	r3, [r3, #0]
   c45aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c45ac:	9301      	str	r3, [sp, #4]
   c45ae:	bd08      	pop	{r3, pc}
   c45b0:	00030248 	.word	0x00030248

000c45b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   c45b4:	b508      	push	{r3, lr}
   c45b6:	4b02      	ldr	r3, [pc, #8]	; (c45c0 <inet_inet_ntop+0xc>)
   c45b8:	681b      	ldr	r3, [r3, #0]
   c45ba:	695b      	ldr	r3, [r3, #20]
   c45bc:	9301      	str	r3, [sp, #4]
   c45be:	bd08      	pop	{r3, pc}
   c45c0:	00030264 	.word	0x00030264

000c45c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   c45c4:	b508      	push	{r3, lr}
   c45c6:	4b02      	ldr	r3, [pc, #8]	; (c45d0 <hal_usart_write+0xc>)
   c45c8:	681b      	ldr	r3, [r3, #0]
   c45ca:	68db      	ldr	r3, [r3, #12]
   c45cc:	9301      	str	r3, [sp, #4]
   c45ce:	bd08      	pop	{r3, pc}
   c45d0:	0003023c 	.word	0x0003023c

000c45d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   c45d4:	b508      	push	{r3, lr}
   c45d6:	4b02      	ldr	r3, [pc, #8]	; (c45e0 <hal_usart_available+0xc>)
   c45d8:	681b      	ldr	r3, [r3, #0]
   c45da:	691b      	ldr	r3, [r3, #16]
   c45dc:	9301      	str	r3, [sp, #4]
   c45de:	bd08      	pop	{r3, pc}
   c45e0:	0003023c 	.word	0x0003023c

000c45e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   c45e4:	b508      	push	{r3, lr}
   c45e6:	4b02      	ldr	r3, [pc, #8]	; (c45f0 <hal_usart_read+0xc>)
   c45e8:	681b      	ldr	r3, [r3, #0]
   c45ea:	695b      	ldr	r3, [r3, #20]
   c45ec:	9301      	str	r3, [sp, #4]
   c45ee:	bd08      	pop	{r3, pc}
   c45f0:	0003023c 	.word	0x0003023c

000c45f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   c45f4:	b508      	push	{r3, lr}
   c45f6:	4b02      	ldr	r3, [pc, #8]	; (c4600 <hal_usart_peek+0xc>)
   c45f8:	681b      	ldr	r3, [r3, #0]
   c45fa:	699b      	ldr	r3, [r3, #24]
   c45fc:	9301      	str	r3, [sp, #4]
   c45fe:	bd08      	pop	{r3, pc}
   c4600:	0003023c 	.word	0x0003023c

000c4604 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   c4604:	b508      	push	{r3, lr}
   c4606:	4b02      	ldr	r3, [pc, #8]	; (c4610 <hal_usart_flush+0xc>)
   c4608:	681b      	ldr	r3, [r3, #0]
   c460a:	69db      	ldr	r3, [r3, #28]
   c460c:	9301      	str	r3, [sp, #4]
   c460e:	bd08      	pop	{r3, pc}
   c4610:	0003023c 	.word	0x0003023c

000c4614 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   c4614:	b508      	push	{r3, lr}
   c4616:	4b02      	ldr	r3, [pc, #8]	; (c4620 <hal_usart_available_data_for_write+0xc>)
   c4618:	681b      	ldr	r3, [r3, #0]
   c461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c461c:	9301      	str	r3, [sp, #4]
   c461e:	bd08      	pop	{r3, pc}
   c4620:	0003023c 	.word	0x0003023c

000c4624 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   c4624:	b508      	push	{r3, lr}
   c4626:	4b02      	ldr	r3, [pc, #8]	; (c4630 <hal_usart_init_ex+0xc>)
   c4628:	681b      	ldr	r3, [r3, #0]
   c462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c462c:	9301      	str	r3, [sp, #4]
   c462e:	bd08      	pop	{r3, pc}
   c4630:	0003023c 	.word	0x0003023c

000c4634 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   c4634:	b508      	push	{r3, lr}
   c4636:	4b02      	ldr	r3, [pc, #8]	; (c4640 <HAL_USB_USART_Init+0xc>)
   c4638:	681b      	ldr	r3, [r3, #0]
   c463a:	681b      	ldr	r3, [r3, #0]
   c463c:	9301      	str	r3, [sp, #4]
   c463e:	bd08      	pop	{r3, pc}
   c4640:	0003024c 	.word	0x0003024c

000c4644 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   c4644:	b508      	push	{r3, lr}
   c4646:	4b02      	ldr	r3, [pc, #8]	; (c4650 <HAL_USB_USART_Begin+0xc>)
   c4648:	681b      	ldr	r3, [r3, #0]
   c464a:	685b      	ldr	r3, [r3, #4]
   c464c:	9301      	str	r3, [sp, #4]
   c464e:	bd08      	pop	{r3, pc}
   c4650:	0003024c 	.word	0x0003024c

000c4654 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   c4654:	b508      	push	{r3, lr}
   c4656:	4b02      	ldr	r3, [pc, #8]	; (c4660 <HAL_USB_USART_Available_Data+0xc>)
   c4658:	681b      	ldr	r3, [r3, #0]
   c465a:	691b      	ldr	r3, [r3, #16]
   c465c:	9301      	str	r3, [sp, #4]
   c465e:	bd08      	pop	{r3, pc}
   c4660:	0003024c 	.word	0x0003024c

000c4664 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   c4664:	b508      	push	{r3, lr}
   c4666:	4b02      	ldr	r3, [pc, #8]	; (c4670 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   c4668:	681b      	ldr	r3, [r3, #0]
   c466a:	695b      	ldr	r3, [r3, #20]
   c466c:	9301      	str	r3, [sp, #4]
   c466e:	bd08      	pop	{r3, pc}
   c4670:	0003024c 	.word	0x0003024c

000c4674 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c4674:	b508      	push	{r3, lr}
   c4676:	4b02      	ldr	r3, [pc, #8]	; (c4680 <HAL_USB_USART_Receive_Data+0xc>)
   c4678:	681b      	ldr	r3, [r3, #0]
   c467a:	699b      	ldr	r3, [r3, #24]
   c467c:	9301      	str	r3, [sp, #4]
   c467e:	bd08      	pop	{r3, pc}
   c4680:	0003024c 	.word	0x0003024c

000c4684 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c4684:	b508      	push	{r3, lr}
   c4686:	4b02      	ldr	r3, [pc, #8]	; (c4690 <HAL_USB_USART_Send_Data+0xc>)
   c4688:	681b      	ldr	r3, [r3, #0]
   c468a:	69db      	ldr	r3, [r3, #28]
   c468c:	9301      	str	r3, [sp, #4]
   c468e:	bd08      	pop	{r3, pc}
   c4690:	0003024c 	.word	0x0003024c

000c4694 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   c4694:	b508      	push	{r3, lr}
   c4696:	4b02      	ldr	r3, [pc, #8]	; (c46a0 <HAL_USB_USART_Flush_Data+0xc>)
   c4698:	681b      	ldr	r3, [r3, #0]
   c469a:	6a1b      	ldr	r3, [r3, #32]
   c469c:	9301      	str	r3, [sp, #4]
   c469e:	bd08      	pop	{r3, pc}
   c46a0:	0003024c 	.word	0x0003024c

000c46a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   c46a4:	b508      	push	{r3, lr}
   c46a6:	4b02      	ldr	r3, [pc, #8]	; (c46b0 <panic_+0xc>)
   c46a8:	681b      	ldr	r3, [r3, #0]
   c46aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c46ac:	9301      	str	r3, [sp, #4]
   c46ae:	bd08      	pop	{r3, pc}
   c46b0:	00030260 	.word	0x00030260

000c46b4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   c46b4:	b508      	push	{r3, lr}
   c46b6:	4b02      	ldr	r3, [pc, #8]	; (c46c0 <set_system_mode+0xc>)
   c46b8:	681b      	ldr	r3, [r3, #0]
   c46ba:	685b      	ldr	r3, [r3, #4]
   c46bc:	9301      	str	r3, [sp, #4]
   c46be:	bd08      	pop	{r3, pc}
   c46c0:	00030220 	.word	0x00030220

000c46c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   c46c4:	b508      	push	{r3, lr}
   c46c6:	4b02      	ldr	r3, [pc, #8]	; (c46d0 <system_delay_ms+0xc>)
   c46c8:	681b      	ldr	r3, [r3, #0]
   c46ca:	695b      	ldr	r3, [r3, #20]
   c46cc:	9301      	str	r3, [sp, #4]
   c46ce:	bd08      	pop	{r3, pc}
   c46d0:	00030220 	.word	0x00030220

000c46d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   c46d4:	b508      	push	{r3, lr}
   c46d6:	4b03      	ldr	r3, [pc, #12]	; (c46e4 <system_ctrl_set_app_request_handler+0x10>)
   c46d8:	681b      	ldr	r3, [r3, #0]
   c46da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   c46de:	9301      	str	r3, [sp, #4]
   c46e0:	bd08      	pop	{r3, pc}
   c46e2:	0000      	.short	0x0000
   c46e4:	00030220 	.word	0x00030220

000c46e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   c46e8:	b508      	push	{r3, lr}
   c46ea:	4b03      	ldr	r3, [pc, #12]	; (c46f8 <system_ctrl_set_result+0x10>)
   c46ec:	681b      	ldr	r3, [r3, #0]
   c46ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   c46f2:	9301      	str	r3, [sp, #4]
   c46f4:	bd08      	pop	{r3, pc}
   c46f6:	0000      	.short	0x0000
   c46f8:	00030220 	.word	0x00030220

000c46fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   c46fc:	b508      	push	{r3, lr}
   c46fe:	4b02      	ldr	r3, [pc, #8]	; (c4708 <network_connect+0xc>)
   c4700:	681b      	ldr	r3, [r3, #0]
   c4702:	685b      	ldr	r3, [r3, #4]
   c4704:	9301      	str	r3, [sp, #4]
   c4706:	bd08      	pop	{r3, pc}
   c4708:	00030240 	.word	0x00030240

000c470c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   c470c:	b508      	push	{r3, lr}
   c470e:	4b02      	ldr	r3, [pc, #8]	; (c4718 <network_connecting+0xc>)
   c4710:	681b      	ldr	r3, [r3, #0]
   c4712:	689b      	ldr	r3, [r3, #8]
   c4714:	9301      	str	r3, [sp, #4]
   c4716:	bd08      	pop	{r3, pc}
   c4718:	00030240 	.word	0x00030240

000c471c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   c471c:	b508      	push	{r3, lr}
   c471e:	4b02      	ldr	r3, [pc, #8]	; (c4728 <network_disconnect+0xc>)
   c4720:	681b      	ldr	r3, [r3, #0]
   c4722:	68db      	ldr	r3, [r3, #12]
   c4724:	9301      	str	r3, [sp, #4]
   c4726:	bd08      	pop	{r3, pc}
   c4728:	00030240 	.word	0x00030240

000c472c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   c472c:	b508      	push	{r3, lr}
   c472e:	4b02      	ldr	r3, [pc, #8]	; (c4738 <network_ready+0xc>)
   c4730:	681b      	ldr	r3, [r3, #0]
   c4732:	691b      	ldr	r3, [r3, #16]
   c4734:	9301      	str	r3, [sp, #4]
   c4736:	bd08      	pop	{r3, pc}
   c4738:	00030240 	.word	0x00030240

000c473c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   c473c:	b508      	push	{r3, lr}
   c473e:	4b02      	ldr	r3, [pc, #8]	; (c4748 <network_on+0xc>)
   c4740:	681b      	ldr	r3, [r3, #0]
   c4742:	695b      	ldr	r3, [r3, #20]
   c4744:	9301      	str	r3, [sp, #4]
   c4746:	bd08      	pop	{r3, pc}
   c4748:	00030240 	.word	0x00030240

000c474c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   c474c:	b508      	push	{r3, lr}
   c474e:	4b02      	ldr	r3, [pc, #8]	; (c4758 <network_off+0xc>)
   c4750:	681b      	ldr	r3, [r3, #0]
   c4752:	699b      	ldr	r3, [r3, #24]
   c4754:	9301      	str	r3, [sp, #4]
   c4756:	bd08      	pop	{r3, pc}
   c4758:	00030240 	.word	0x00030240

000c475c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   c475c:	b508      	push	{r3, lr}
   c475e:	4b02      	ldr	r3, [pc, #8]	; (c4768 <network_listen+0xc>)
   c4760:	681b      	ldr	r3, [r3, #0]
   c4762:	69db      	ldr	r3, [r3, #28]
   c4764:	9301      	str	r3, [sp, #4]
   c4766:	bd08      	pop	{r3, pc}
   c4768:	00030240 	.word	0x00030240

000c476c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   c476c:	b508      	push	{r3, lr}
   c476e:	4b02      	ldr	r3, [pc, #8]	; (c4778 <network_listening+0xc>)
   c4770:	681b      	ldr	r3, [r3, #0]
   c4772:	6a1b      	ldr	r3, [r3, #32]
   c4774:	9301      	str	r3, [sp, #4]
   c4776:	bd08      	pop	{r3, pc}
   c4778:	00030240 	.word	0x00030240

000c477c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   c477c:	b508      	push	{r3, lr}
   c477e:	4b02      	ldr	r3, [pc, #8]	; (c4788 <network_set_listen_timeout+0xc>)
   c4780:	681b      	ldr	r3, [r3, #0]
   c4782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c4784:	9301      	str	r3, [sp, #4]
   c4786:	bd08      	pop	{r3, pc}
   c4788:	00030240 	.word	0x00030240

000c478c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   c478c:	b508      	push	{r3, lr}
   c478e:	4b02      	ldr	r3, [pc, #8]	; (c4798 <network_get_listen_timeout+0xc>)
   c4790:	681b      	ldr	r3, [r3, #0]
   c4792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c4794:	9301      	str	r3, [sp, #4]
   c4796:	bd08      	pop	{r3, pc}
   c4798:	00030240 	.word	0x00030240

000c479c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   c479c:	b508      	push	{r3, lr}
   c479e:	4b02      	ldr	r3, [pc, #8]	; (c47a8 <network_is_on+0xc>)
   c47a0:	681b      	ldr	r3, [r3, #0]
   c47a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c47a4:	9301      	str	r3, [sp, #4]
   c47a6:	bd08      	pop	{r3, pc}
   c47a8:	00030240 	.word	0x00030240

000c47ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   c47ac:	b508      	push	{r3, lr}
   c47ae:	4b02      	ldr	r3, [pc, #8]	; (c47b8 <network_is_off+0xc>)
   c47b0:	681b      	ldr	r3, [r3, #0]
   c47b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c47b4:	9301      	str	r3, [sp, #4]
   c47b6:	bd08      	pop	{r3, pc}
   c47b8:	00030240 	.word	0x00030240

000c47bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   c47bc:	b508      	push	{r3, lr}
   c47be:	4b02      	ldr	r3, [pc, #8]	; (c47c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   c47c0:	681b      	ldr	r3, [r3, #0]
   c47c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c47c4:	9301      	str	r3, [sp, #4]
   c47c6:	bd08      	pop	{r3, pc}
   c47c8:	00030244 	.word	0x00030244

000c47cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   c47cc:	b508      	push	{r3, lr}
   c47ce:	4b02      	ldr	r3, [pc, #8]	; (c47d8 <malloc+0xc>)
   c47d0:	681b      	ldr	r3, [r3, #0]
   c47d2:	681b      	ldr	r3, [r3, #0]
   c47d4:	9301      	str	r3, [sp, #4]
   c47d6:	bd08      	pop	{r3, pc}
   c47d8:	0003021c 	.word	0x0003021c

000c47dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   c47dc:	b508      	push	{r3, lr}
   c47de:	4b02      	ldr	r3, [pc, #8]	; (c47e8 <free+0xc>)
   c47e0:	681b      	ldr	r3, [r3, #0]
   c47e2:	685b      	ldr	r3, [r3, #4]
   c47e4:	9301      	str	r3, [sp, #4]
   c47e6:	bd08      	pop	{r3, pc}
   c47e8:	0003021c 	.word	0x0003021c

000c47ec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   c47ec:	b508      	push	{r3, lr}
   c47ee:	4b02      	ldr	r3, [pc, #8]	; (c47f8 <vsnprintf+0xc>)
   c47f0:	681b      	ldr	r3, [r3, #0]
   c47f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c47f4:	9301      	str	r3, [sp, #4]
   c47f6:	bd08      	pop	{r3, pc}
   c47f8:	0003021c 	.word	0x0003021c

000c47fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   c47fc:	b508      	push	{r3, lr}
   c47fe:	4b02      	ldr	r3, [pc, #8]	; (c4808 <abort+0xc>)
   c4800:	681b      	ldr	r3, [r3, #0]
   c4802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c4804:	9301      	str	r3, [sp, #4]
   c4806:	bd08      	pop	{r3, pc}
   c4808:	0003021c 	.word	0x0003021c

000c480c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   c480c:	b508      	push	{r3, lr}
   c480e:	4b02      	ldr	r3, [pc, #8]	; (c4818 <__errno+0xc>)
   c4810:	681b      	ldr	r3, [r3, #0]
   c4812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c4814:	9301      	str	r3, [sp, #4]
   c4816:	bd08      	pop	{r3, pc}
   c4818:	0003021c 	.word	0x0003021c

000c481c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   c481c:	b508      	push	{r3, lr}
   c481e:	4b02      	ldr	r3, [pc, #8]	; (c4828 <__assert_func+0xc>)
   c4820:	681b      	ldr	r3, [r3, #0]
   c4822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c4824:	9301      	str	r3, [sp, #4]
   c4826:	bd08      	pop	{r3, pc}
   c4828:	0003021c 	.word	0x0003021c

000c482c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   c482c:	b508      	push	{r3, lr}
   c482e:	4b02      	ldr	r3, [pc, #8]	; (c4838 <newlib_impure_ptr_callback+0xc>)
   c4830:	681b      	ldr	r3, [r3, #0]
   c4832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c4834:	9301      	str	r3, [sp, #4]
   c4836:	bd08      	pop	{r3, pc}
   c4838:	0003021c 	.word	0x0003021c

000c483c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c483c:	2200      	movs	r2, #0
   c483e:	6840      	ldr	r0, [r0, #4]
   c4840:	4611      	mov	r1, r2
   c4842:	f7ff bf93 	b.w	c476c <network_listening>

000c4846 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c4846:	2200      	movs	r2, #0
   c4848:	6840      	ldr	r0, [r0, #4]
   c484a:	4611      	mov	r1, r2
   c484c:	f7ff bf9e 	b.w	c478c <network_get_listen_timeout>

000c4850 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c4850:	6840      	ldr	r0, [r0, #4]
   c4852:	2200      	movs	r2, #0
   c4854:	f7ff bf92 	b.w	c477c <network_set_listen_timeout>

000c4858 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c4858:	6840      	ldr	r0, [r0, #4]
   c485a:	2200      	movs	r2, #0
   c485c:	f081 0101 	eor.w	r1, r1, #1
   c4860:	f7ff bf7c 	b.w	c475c <network_listen>

000c4864 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c4864:	2300      	movs	r3, #0
   c4866:	6840      	ldr	r0, [r0, #4]
   c4868:	461a      	mov	r2, r3
   c486a:	4619      	mov	r1, r3
   c486c:	f7ff bf6e 	b.w	c474c <network_off>

000c4870 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c4870:	2300      	movs	r3, #0
   c4872:	6840      	ldr	r0, [r0, #4]
   c4874:	461a      	mov	r2, r3
   c4876:	4619      	mov	r1, r3
   c4878:	f7ff bf60 	b.w	c473c <network_on>

000c487c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c487c:	2200      	movs	r2, #0
   c487e:	6840      	ldr	r0, [r0, #4]
   c4880:	4611      	mov	r1, r2
   c4882:	f7ff bf53 	b.w	c472c <network_ready>

000c4886 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c4886:	2200      	movs	r2, #0
   c4888:	6840      	ldr	r0, [r0, #4]
   c488a:	4611      	mov	r1, r2
   c488c:	f7ff bf3e 	b.w	c470c <network_connecting>

000c4890 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c4890:	6840      	ldr	r0, [r0, #4]
   c4892:	2200      	movs	r2, #0
   c4894:	2102      	movs	r1, #2
   c4896:	f7ff bf41 	b.w	c471c <network_disconnect>

000c489a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c489a:	2300      	movs	r3, #0
   c489c:	6840      	ldr	r0, [r0, #4]
   c489e:	461a      	mov	r2, r3
   c48a0:	f7ff bf2c 	b.w	c46fc <network_connect>

000c48a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   c48a4:	4b02      	ldr	r3, [pc, #8]	; (c48b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   c48a6:	2203      	movs	r2, #3
   c48a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   c48aa:	4a02      	ldr	r2, [pc, #8]	; (c48b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   c48ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   c48ae:	4770      	bx	lr
   c48b0:	2003e6dc 	.word	0x2003e6dc
   c48b4:	000c9704 	.word	0x000c9704

000c48b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c48b8:	4b05      	ldr	r3, [pc, #20]	; (c48d0 <_GLOBAL__sub_I_System+0x18>)
   c48ba:	2202      	movs	r2, #2
   c48bc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c48be:	4b05      	ldr	r3, [pc, #20]	; (c48d4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c48c0:	4a05      	ldr	r2, [pc, #20]	; (c48d8 <_GLOBAL__sub_I_System+0x20>)
   c48c2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c48c4:	2000      	movs	r0, #0
   c48c6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c48ca:	f7ff bef3 	b.w	c46b4 <set_system_mode>
   c48ce:	bf00      	nop
   c48d0:	2003e6f0 	.word	0x2003e6f0
   c48d4:	2003e6e4 	.word	0x2003e6e4
   c48d8:	ffff0000 	.word	0xffff0000

000c48dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   c48dc:	4802      	ldr	r0, [pc, #8]	; (c48e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   c48de:	2300      	movs	r3, #0
   c48e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   c48e2:	f7ff be5f 	b.w	c45a4 <os_mutex_recursive_create>
   c48e6:	bf00      	nop
   c48e8:	2003e6f4 	.word	0x2003e6f4

000c48ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c48ee:	4606      	mov	r6, r0
   c48f0:	460d      	mov	r5, r1
  size_t n = 0;
   c48f2:	188f      	adds	r7, r1, r2
   c48f4:	2400      	movs	r4, #0
  while (size--) {
   c48f6:	42bd      	cmp	r5, r7
   c48f8:	d00c      	beq.n	c4914 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c48fa:	6833      	ldr	r3, [r6, #0]
   c48fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   c4900:	689b      	ldr	r3, [r3, #8]
   c4902:	4630      	mov	r0, r6
   c4904:	4798      	blx	r3
     if (chunk>=0)
   c4906:	1e03      	subs	r3, r0, #0
   c4908:	db01      	blt.n	c490e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c490a:	441c      	add	r4, r3
  while (size--) {
   c490c:	e7f3      	b.n	c48f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c490e:	2c00      	cmp	r4, #0
   c4910:	bf08      	it	eq
   c4912:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c4914:	4620      	mov	r0, r4
   c4916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c4918 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   c4918:	b513      	push	{r0, r1, r4, lr}
   c491a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   c491c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   c491e:	b159      	cbz	r1, c4938 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   c4920:	9101      	str	r1, [sp, #4]
   c4922:	f7f0 f8ab 	bl	b4a7c <strlen>
   c4926:	6823      	ldr	r3, [r4, #0]
   c4928:	9901      	ldr	r1, [sp, #4]
   c492a:	68db      	ldr	r3, [r3, #12]
   c492c:	4602      	mov	r2, r0
   c492e:	4620      	mov	r0, r4
    }
   c4930:	b002      	add	sp, #8
   c4932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   c4936:	4718      	bx	r3
    }
   c4938:	b002      	add	sp, #8
   c493a:	bd10      	pop	{r4, pc}

000c493c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c493c:	b508      	push	{r3, lr}
  return write(str);
   c493e:	f7ff ffeb 	bl	c4918 <_ZN5Print5writeEPKc>
}
   c4942:	bd08      	pop	{r3, pc}

000c4944 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c4944:	6803      	ldr	r3, [r0, #0]
   c4946:	689b      	ldr	r3, [r3, #8]
   c4948:	4718      	bx	r3

000c494a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c494a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c494c:	210d      	movs	r1, #13
{
   c494e:	4605      	mov	r5, r0
  size_t n = print('\r');
   c4950:	f7ff fff8 	bl	c4944 <_ZN5Print5printEc>
  n += print('\n');
   c4954:	210a      	movs	r1, #10
  size_t n = print('\r');
   c4956:	4604      	mov	r4, r0
  n += print('\n');
   c4958:	4628      	mov	r0, r5
   c495a:	f7ff fff3 	bl	c4944 <_ZN5Print5printEc>
  return n;
}
   c495e:	4420      	add	r0, r4
   c4960:	bd38      	pop	{r3, r4, r5, pc}

000c4962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c4962:	b530      	push	{r4, r5, lr}
   c4964:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c4966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c4968:	2a01      	cmp	r2, #1
  *str = '\0';
   c496a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c496e:	bf98      	it	ls
   c4970:	220a      	movls	r2, #10
   c4972:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c4974:	460d      	mov	r5, r1
   c4976:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c497a:	fb01 5312 	mls	r3, r1, r2, r5
   c497e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c4982:	2b09      	cmp	r3, #9
   c4984:	bf94      	ite	ls
   c4986:	3330      	addls	r3, #48	; 0x30
   c4988:	3337      	addhi	r3, #55	; 0x37
   c498a:	b2db      	uxtb	r3, r3
  } while(n);
   c498c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c498e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c4992:	d9ef      	bls.n	c4974 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c4994:	4621      	mov	r1, r4
   c4996:	f7ff ffbf 	bl	c4918 <_ZN5Print5writeEPKc>
}
   c499a:	b00b      	add	sp, #44	; 0x2c
   c499c:	bd30      	pop	{r4, r5, pc}

000c499e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c49a2:	b086      	sub	sp, #24
   c49a4:	af00      	add	r7, sp, #0
   c49a6:	4605      	mov	r5, r0
   c49a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c49aa:	1d38      	adds	r0, r7, #4
   c49ac:	2114      	movs	r1, #20
{
   c49ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   c49b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c49b2:	f7ff ff1b 	bl	c47ec <vsnprintf>

    if (n<bufsize)
   c49b6:	2813      	cmp	r0, #19
   c49b8:	d80e      	bhi.n	c49d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c49ba:	1d39      	adds	r1, r7, #4
   c49bc:	4628      	mov	r0, r5
   c49be:	f7ff ffab 	bl	c4918 <_ZN5Print5writeEPKc>
   c49c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c49c4:	b11e      	cbz	r6, c49ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c49c6:	4628      	mov	r0, r5
   c49c8:	f7ff ffbf 	bl	c494a <_ZN5Print7printlnEv>
   c49cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c49ce:	4620      	mov	r0, r4
   c49d0:	3718      	adds	r7, #24
   c49d2:	46bd      	mov	sp, r7
   c49d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c49d8:	f100 0308 	add.w	r3, r0, #8
   c49dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c49e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   c49e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c49e6:	4622      	mov	r2, r4
   c49e8:	1c41      	adds	r1, r0, #1
   c49ea:	683b      	ldr	r3, [r7, #0]
   c49ec:	4668      	mov	r0, sp
   c49ee:	f7ff fefd 	bl	c47ec <vsnprintf>
  return write(str);
   c49f2:	4669      	mov	r1, sp
   c49f4:	4628      	mov	r0, r5
   c49f6:	f7ff ff8f 	bl	c4918 <_ZN5Print5writeEPKc>
   c49fa:	4604      	mov	r4, r0
   c49fc:	46c5      	mov	sp, r8
   c49fe:	e7e1      	b.n	c49c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c4a00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   c4a00:	4b01      	ldr	r3, [pc, #4]	; (c4a08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c4a02:	4a02      	ldr	r2, [pc, #8]	; (c4a0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c4a04:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c4a06:	4770      	bx	lr
   c4a08:	2003e6f8 	.word	0x2003e6f8
   c4a0c:	000c9738 	.word	0x000c9738

000c4a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c4a10:	4b02      	ldr	r3, [pc, #8]	; (c4a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c4a12:	681a      	ldr	r2, [r3, #0]
   c4a14:	4b02      	ldr	r3, [pc, #8]	; (c4a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c4a16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c4a18:	4770      	bx	lr
   c4a1a:	bf00      	nop
   c4a1c:	2003c5b8 	.word	0x2003c5b8
   c4a20:	2003e6fc 	.word	0x2003e6fc

000c4a24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c4a24:	2100      	movs	r1, #0
   c4a26:	f7ff be4d 	b.w	c46c4 <system_delay_ms>
	...

000c4a2c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   c4a2c:	4b01      	ldr	r3, [pc, #4]	; (c4a34 <_GLOBAL__sub_I_RGB+0x8>)
   c4a2e:	2200      	movs	r2, #0
   c4a30:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c4a32:	4770      	bx	lr
   c4a34:	2003e700 	.word	0x2003e700

000c4a38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c4a38:	4b01      	ldr	r3, [pc, #4]	; (c4a40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c4a3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c4a3c:	4770      	bx	lr
   c4a3e:	bf00      	nop
   c4a40:	2003c5c0 	.word	0x2003c5c0

000c4a44 <serialEventRun>:
{
   c4a44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c4a46:	4b0b      	ldr	r3, [pc, #44]	; (c4a74 <serialEventRun+0x30>)
   c4a48:	b143      	cbz	r3, c4a5c <serialEventRun+0x18>
   c4a4a:	f000 f967 	bl	c4d1c <_Z16_fetch_usbserialv>
   c4a4e:	6803      	ldr	r3, [r0, #0]
   c4a50:	691b      	ldr	r3, [r3, #16]
   c4a52:	4798      	blx	r3
   c4a54:	2800      	cmp	r0, #0
   c4a56:	dd01      	ble.n	c4a5c <serialEventRun+0x18>
        serialEvent();
   c4a58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c4a5c:	4b06      	ldr	r3, [pc, #24]	; (c4a78 <serialEventRun+0x34>)
   c4a5e:	b143      	cbz	r3, c4a72 <serialEventRun+0x2e>
   c4a60:	f000 fae0 	bl	c5024 <_Z22__fetch_global_Serial1v>
   c4a64:	6803      	ldr	r3, [r0, #0]
   c4a66:	691b      	ldr	r3, [r3, #16]
   c4a68:	4798      	blx	r3
   c4a6a:	2800      	cmp	r0, #0
   c4a6c:	dd01      	ble.n	c4a72 <serialEventRun+0x2e>
        serialEvent1();
   c4a6e:	f3af 8000 	nop.w
}
   c4a72:	bd08      	pop	{r3, pc}
	...

000c4a7c <_post_loop>:
{
   c4a7c:	b508      	push	{r3, lr}
	serialEventRun();
   c4a7e:	f7ff ffe1 	bl	c4a44 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c4a82:	f7ff fd87 	bl	c4594 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c4a86:	4b01      	ldr	r3, [pc, #4]	; (c4a8c <_post_loop+0x10>)
   c4a88:	6018      	str	r0, [r3, #0]
}
   c4a8a:	bd08      	pop	{r3, pc}
   c4a8c:	2003e758 	.word	0x2003e758

000c4a90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c4a90:	4805      	ldr	r0, [pc, #20]	; (c4aa8 <_Z33system_initialize_user_backup_ramv+0x18>)
   c4a92:	4a06      	ldr	r2, [pc, #24]	; (c4aac <_Z33system_initialize_user_backup_ramv+0x1c>)
   c4a94:	4906      	ldr	r1, [pc, #24]	; (c4ab0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c4a96:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c4a98:	1a12      	subs	r2, r2, r0
   c4a9a:	f002 f83b 	bl	c6b14 <memcpy>
    __backup_sram_signature = signature;
   c4a9e:	4b05      	ldr	r3, [pc, #20]	; (c4ab4 <_Z33system_initialize_user_backup_ramv+0x24>)
   c4aa0:	4a05      	ldr	r2, [pc, #20]	; (c4ab8 <_Z33system_initialize_user_backup_ramv+0x28>)
   c4aa2:	601a      	str	r2, [r3, #0]
}
   c4aa4:	bd08      	pop	{r3, pc}
   c4aa6:	bf00      	nop
   c4aa8:	2003f400 	.word	0x2003f400
   c4aac:	2003f404 	.word	0x2003f404
   c4ab0:	000ca6fc 	.word	0x000ca6fc
   c4ab4:	2003f400 	.word	0x2003f400
   c4ab8:	9a271c1e 	.word	0x9a271c1e

000c4abc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c4abc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c4abe:	2300      	movs	r3, #0
   c4ac0:	9300      	str	r3, [sp, #0]
   c4ac2:	461a      	mov	r2, r3
   c4ac4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c4ac8:	f7ff fe0e 	bl	c46e8 <system_ctrl_set_result>
}
   c4acc:	b003      	add	sp, #12
   c4ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c4ad4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c4ad4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c4ad6:	8843      	ldrh	r3, [r0, #2]
   c4ad8:	2b0a      	cmp	r3, #10
   c4ada:	d008      	beq.n	c4aee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c4adc:	2b50      	cmp	r3, #80	; 0x50
   c4ade:	d10b      	bne.n	c4af8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c4ae0:	4b09      	ldr	r3, [pc, #36]	; (c4b08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c4ae2:	681b      	ldr	r3, [r3, #0]
   c4ae4:	b14b      	cbz	r3, c4afa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c4ae6:	b003      	add	sp, #12
   c4ae8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c4aec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c4aee:	f7ff ffe5 	bl	c4abc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c4af2:	b003      	add	sp, #12
   c4af4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c4af8:	2300      	movs	r3, #0
   c4afa:	9300      	str	r3, [sp, #0]
   c4afc:	461a      	mov	r2, r3
   c4afe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c4b02:	f7ff fdf1 	bl	c46e8 <system_ctrl_set_result>
}
   c4b06:	e7f4      	b.n	c4af2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c4b08:	2003e714 	.word	0x2003e714

000c4b0c <module_user_init_hook>:
{
   c4b0c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c4b0e:	4812      	ldr	r0, [pc, #72]	; (c4b58 <module_user_init_hook+0x4c>)
   c4b10:	2100      	movs	r1, #0
   c4b12:	f7ff fe8b 	bl	c482c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c4b16:	4b11      	ldr	r3, [pc, #68]	; (c4b5c <module_user_init_hook+0x50>)
   c4b18:	681a      	ldr	r2, [r3, #0]
   c4b1a:	4b11      	ldr	r3, [pc, #68]	; (c4b60 <module_user_init_hook+0x54>)
   c4b1c:	429a      	cmp	r2, r3
   c4b1e:	4b11      	ldr	r3, [pc, #68]	; (c4b64 <module_user_init_hook+0x58>)
   c4b20:	bf0c      	ite	eq
   c4b22:	2201      	moveq	r2, #1
   c4b24:	2200      	movne	r2, #0
   c4b26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c4b28:	d001      	beq.n	c4b2e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c4b2a:	f7ff ffb1 	bl	c4a90 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c4b2e:	f7ff fd21 	bl	c4574 <HAL_RNG_GetRandomNumber>
   c4b32:	4604      	mov	r4, r0
    srand(seed);
   c4b34:	f002 f81e 	bl	c6b74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c4b38:	4b0b      	ldr	r3, [pc, #44]	; (c4b68 <module_user_init_hook+0x5c>)
   c4b3a:	b113      	cbz	r3, c4b42 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c4b3c:	4620      	mov	r0, r4
   c4b3e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c4b42:	2100      	movs	r1, #0
   c4b44:	4808      	ldr	r0, [pc, #32]	; (c4b68 <module_user_init_hook+0x5c>)
   c4b46:	f7ff fe39 	bl	c47bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c4b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c4b4e:	4807      	ldr	r0, [pc, #28]	; (c4b6c <module_user_init_hook+0x60>)
   c4b50:	2100      	movs	r1, #0
   c4b52:	f7ff bdbf 	b.w	c46d4 <system_ctrl_set_app_request_handler>
   c4b56:	bf00      	nop
   c4b58:	000c4a39 	.word	0x000c4a39
   c4b5c:	2003f400 	.word	0x2003f400
   c4b60:	9a271c1e 	.word	0x9a271c1e
   c4b64:	2003e710 	.word	0x2003e710
   c4b68:	00000000 	.word	0x00000000
   c4b6c:	000c4ad5 	.word	0x000c4ad5

000c4b70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c4b70:	4770      	bx	lr

000c4b72 <_ZN9IPAddressD0Ev>:
   c4b72:	b510      	push	{r4, lr}
   c4b74:	2118      	movs	r1, #24
   c4b76:	4604      	mov	r4, r0
   c4b78:	f7ef ffc7 	bl	b4b0a <_ZdlPvj>
   c4b7c:	4620      	mov	r0, r4
   c4b7e:	bd10      	pop	{r4, pc}

000c4b80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c4b80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c4b82:	7d03      	ldrb	r3, [r0, #20]
   c4b84:	2b06      	cmp	r3, #6
{
   c4b86:	b08d      	sub	sp, #52	; 0x34
   c4b88:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4b8a:	f100 0704 	add.w	r7, r0, #4
   c4b8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c4b92:	d012      	beq.n	c4bba <_ZNK9IPAddress7printToER5Print+0x3a>
   c4b94:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c4b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c4b9c:	220a      	movs	r2, #10
   c4b9e:	4630      	mov	r0, r6
   c4ba0:	f7ff fedf 	bl	c4962 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c4ba4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c4ba6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c4ba8:	d019      	beq.n	c4bde <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c4baa:	2c00      	cmp	r4, #0
   c4bac:	d0f4      	beq.n	c4b98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c4bae:	212e      	movs	r1, #46	; 0x2e
   c4bb0:	4630      	mov	r0, r6
   c4bb2:	f7ff fec7 	bl	c4944 <_ZN5Print5printEc>
   c4bb6:	4404      	add	r4, r0
   c4bb8:	e7ee      	b.n	c4b98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4bba:	232f      	movs	r3, #47	; 0x2f
   c4bbc:	466a      	mov	r2, sp
   c4bbe:	4639      	mov	r1, r7
   c4bc0:	200a      	movs	r0, #10
		buf[0] = 0;
   c4bc2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4bc6:	f7ff fcf5 	bl	c45b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c4bca:	4668      	mov	r0, sp
   c4bcc:	f7ef ff56 	bl	b4a7c <strlen>
   c4bd0:	6833      	ldr	r3, [r6, #0]
   c4bd2:	4602      	mov	r2, r0
   c4bd4:	68db      	ldr	r3, [r3, #12]
   c4bd6:	4669      	mov	r1, sp
   c4bd8:	4630      	mov	r0, r6
   c4bda:	4798      	blx	r3
   c4bdc:	4604      	mov	r4, r0
    }
    return n;
}
   c4bde:	4620      	mov	r0, r4
   c4be0:	b00d      	add	sp, #52	; 0x34
   c4be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c4be4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c4be4:	b510      	push	{r4, lr}
   c4be6:	4b05      	ldr	r3, [pc, #20]	; (c4bfc <_ZN9IPAddressC1Ev+0x18>)
   c4be8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c4bea:	2211      	movs	r2, #17
   c4bec:	f840 3b04 	str.w	r3, [r0], #4
   c4bf0:	2100      	movs	r1, #0
   c4bf2:	f001 ffb7 	bl	c6b64 <memset>
}
   c4bf6:	4620      	mov	r0, r4
   c4bf8:	bd10      	pop	{r4, pc}
   c4bfa:	bf00      	nop
   c4bfc:	000c9760 	.word	0x000c9760

000c4c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c4c00:	4603      	mov	r3, r0
   c4c02:	4a07      	ldr	r2, [pc, #28]	; (c4c20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c4c04:	b510      	push	{r4, lr}
   c4c06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c4c0a:	f101 0210 	add.w	r2, r1, #16
   c4c0e:	f851 4b04 	ldr.w	r4, [r1], #4
   c4c12:	f843 4b04 	str.w	r4, [r3], #4
   c4c16:	4291      	cmp	r1, r2
   c4c18:	d1f9      	bne.n	c4c0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c4c1a:	780a      	ldrb	r2, [r1, #0]
   c4c1c:	701a      	strb	r2, [r3, #0]
}
   c4c1e:	bd10      	pop	{r4, pc}
   c4c20:	000c9760 	.word	0x000c9760

000c4c24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c4c24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c4c26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c4c2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c4c2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c4c32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c4c36:	2304      	movs	r3, #4
   c4c38:	6041      	str	r1, [r0, #4]
   c4c3a:	7503      	strb	r3, [r0, #20]
}
   c4c3c:	bd10      	pop	{r4, pc}
	...

000c4c40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c4c40:	b507      	push	{r0, r1, r2, lr}
   c4c42:	4b06      	ldr	r3, [pc, #24]	; (c4c5c <_ZN9IPAddressC1EPKh+0x1c>)
   c4c44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c4c46:	78cb      	ldrb	r3, [r1, #3]
   c4c48:	9300      	str	r3, [sp, #0]
   c4c4a:	788b      	ldrb	r3, [r1, #2]
   c4c4c:	784a      	ldrb	r2, [r1, #1]
   c4c4e:	7809      	ldrb	r1, [r1, #0]
   c4c50:	f7ff ffe8 	bl	c4c24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c4c54:	b003      	add	sp, #12
   c4c56:	f85d fb04 	ldr.w	pc, [sp], #4
   c4c5a:	bf00      	nop
   c4c5c:	000c9760 	.word	0x000c9760

000c4c60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c4c60:	7441      	strb	r1, [r0, #17]
}
   c4c62:	4770      	bx	lr

000c4c64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4c64:	4770      	bx	lr

000c4c66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c4c66:	4770      	bx	lr

000c4c68 <_ZN9USBSerial4readEv>:
{
   c4c68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c4c6a:	2100      	movs	r1, #0
   c4c6c:	7c00      	ldrb	r0, [r0, #16]
   c4c6e:	f7ff fd01 	bl	c4674 <HAL_USB_USART_Receive_Data>
}
   c4c72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4c76:	bd08      	pop	{r3, pc}

000c4c78 <_ZN9USBSerial4peekEv>:
{
   c4c78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c4c7a:	2101      	movs	r1, #1
   c4c7c:	7c00      	ldrb	r0, [r0, #16]
   c4c7e:	f7ff fcf9 	bl	c4674 <HAL_USB_USART_Receive_Data>
}
   c4c82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4c86:	bd08      	pop	{r3, pc}

000c4c88 <_ZN9USBSerial17availableForWriteEv>:
{
   c4c88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c4c8a:	7c00      	ldrb	r0, [r0, #16]
   c4c8c:	f7ff fcea 	bl	c4664 <HAL_USB_USART_Available_Data_For_Write>
}
   c4c90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4c94:	bd08      	pop	{r3, pc}

000c4c96 <_ZN9USBSerial9availableEv>:
{
   c4c96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c4c98:	7c00      	ldrb	r0, [r0, #16]
   c4c9a:	f7ff fcdb 	bl	c4654 <HAL_USB_USART_Available_Data>
}
   c4c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4ca2:	bd08      	pop	{r3, pc}

000c4ca4 <_ZN9USBSerial5writeEh>:
{
   c4ca4:	b513      	push	{r0, r1, r4, lr}
   c4ca6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c4ca8:	7c00      	ldrb	r0, [r0, #16]
{
   c4caa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c4cac:	f7ff fcda 	bl	c4664 <HAL_USB_USART_Available_Data_For_Write>
   c4cb0:	2800      	cmp	r0, #0
   c4cb2:	9901      	ldr	r1, [sp, #4]
   c4cb4:	dc01      	bgt.n	c4cba <_ZN9USBSerial5writeEh+0x16>
   c4cb6:	7c60      	ldrb	r0, [r4, #17]
   c4cb8:	b120      	cbz	r0, c4cc4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c4cba:	7c20      	ldrb	r0, [r4, #16]
   c4cbc:	f7ff fce2 	bl	c4684 <HAL_USB_USART_Send_Data>
   c4cc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c4cc4:	b002      	add	sp, #8
   c4cc6:	bd10      	pop	{r4, pc}

000c4cc8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c4cc8:	7c00      	ldrb	r0, [r0, #16]
   c4cca:	f7ff bce3 	b.w	c4694 <HAL_USB_USART_Flush_Data>

000c4cce <_ZN9USBSerialD0Ev>:
   c4cce:	b510      	push	{r4, lr}
   c4cd0:	2114      	movs	r1, #20
   c4cd2:	4604      	mov	r4, r0
   c4cd4:	f7ef ff19 	bl	b4b0a <_ZdlPvj>
   c4cd8:	4620      	mov	r0, r4
   c4cda:	bd10      	pop	{r4, pc}

000c4cdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c4cdc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c4cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c4ce2:	4604      	mov	r4, r0
   c4ce4:	4608      	mov	r0, r1
   c4ce6:	2100      	movs	r1, #0
   c4ce8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c4cec:	4b04      	ldr	r3, [pc, #16]	; (c4d00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c4cee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c4cf0:	2301      	movs	r3, #1
  _serial = serial;
   c4cf2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c4cf4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c4cf6:	4611      	mov	r1, r2
   c4cf8:	f7ff fc9c 	bl	c4634 <HAL_USB_USART_Init>
}
   c4cfc:	4620      	mov	r0, r4
   c4cfe:	bd10      	pop	{r4, pc}
   c4d00:	000c9774 	.word	0x000c9774

000c4d04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c4d04:	7c00      	ldrb	r0, [r0, #16]
   c4d06:	2200      	movs	r2, #0
   c4d08:	f7ff bc9c 	b.w	c4644 <HAL_USB_USART_Begin>

000c4d0c <_Z19acquireSerialBufferv>:
{
   c4d0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c4d0e:	2214      	movs	r2, #20
{
   c4d10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c4d12:	2100      	movs	r1, #0
   c4d14:	f001 ff26 	bl	c6b64 <memset>
}
   c4d18:	4620      	mov	r0, r4
   c4d1a:	bd10      	pop	{r4, pc}

000c4d1c <_Z16_fetch_usbserialv>:
{
   c4d1c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4d1e:	4c0f      	ldr	r4, [pc, #60]	; (c4d5c <_Z16_fetch_usbserialv+0x40>)
{
   c4d20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c4d22:	a803      	add	r0, sp, #12
   c4d24:	f7ff fff2 	bl	c4d0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4d28:	7821      	ldrb	r1, [r4, #0]
   c4d2a:	f3bf 8f5b 	dmb	ish
   c4d2e:	f011 0101 	ands.w	r1, r1, #1
   c4d32:	d10f      	bne.n	c4d54 <_Z16_fetch_usbserialv+0x38>
   c4d34:	4620      	mov	r0, r4
   c4d36:	9101      	str	r1, [sp, #4]
   c4d38:	f7ef fef6 	bl	b4b28 <__cxa_guard_acquire>
   c4d3c:	9901      	ldr	r1, [sp, #4]
   c4d3e:	b148      	cbz	r0, c4d54 <_Z16_fetch_usbserialv+0x38>
   c4d40:	aa03      	add	r2, sp, #12
   c4d42:	4807      	ldr	r0, [pc, #28]	; (c4d60 <_Z16_fetch_usbserialv+0x44>)
   c4d44:	f7ff ffca 	bl	c4cdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c4d48:	4620      	mov	r0, r4
   c4d4a:	f7ef fef2 	bl	b4b32 <__cxa_guard_release>
   c4d4e:	4805      	ldr	r0, [pc, #20]	; (c4d64 <_Z16_fetch_usbserialv+0x48>)
   c4d50:	f001 feb6 	bl	c6ac0 <atexit>
	return _usbserial;
}
   c4d54:	4802      	ldr	r0, [pc, #8]	; (c4d60 <_Z16_fetch_usbserialv+0x44>)
   c4d56:	b008      	add	sp, #32
   c4d58:	bd10      	pop	{r4, pc}
   c4d5a:	bf00      	nop
   c4d5c:	2003e718 	.word	0x2003e718
   c4d60:	2003e71c 	.word	0x2003e71c
   c4d64:	000c4c65 	.word	0x000c4c65

000c4d68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c4d68:	4770      	bx	lr

000c4d6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c4d6a:	7441      	strb	r1, [r0, #17]
}
   c4d6c:	4770      	bx	lr

000c4d6e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c4d6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c4d70:	7c00      	ldrb	r0, [r0, #16]
   c4d72:	f7ff fc4f 	bl	c4614 <hal_usart_available_data_for_write>
}
   c4d76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4d7a:	bd08      	pop	{r3, pc}

000c4d7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c4d7c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c4d7e:	7c00      	ldrb	r0, [r0, #16]
   c4d80:	f7ff fc28 	bl	c45d4 <hal_usart_available>
}
   c4d84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4d88:	bd08      	pop	{r3, pc}

000c4d8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c4d8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c4d8c:	7c00      	ldrb	r0, [r0, #16]
   c4d8e:	f7ff fc31 	bl	c45f4 <hal_usart_peek>
}
   c4d92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4d96:	bd08      	pop	{r3, pc}

000c4d98 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c4d98:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c4d9a:	7c00      	ldrb	r0, [r0, #16]
   c4d9c:	f7ff fc22 	bl	c45e4 <hal_usart_read>
}
   c4da0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4da4:	bd08      	pop	{r3, pc}

000c4da6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c4da6:	7c00      	ldrb	r0, [r0, #16]
   c4da8:	f7ff bc2c 	b.w	c4604 <hal_usart_flush>

000c4dac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c4dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4dae:	7c45      	ldrb	r5, [r0, #17]
{
   c4db0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4db2:	b12d      	cbz	r5, c4dc0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c4db4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c4db6:	b003      	add	sp, #12
   c4db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c4dbc:	f7ff bc02 	b.w	c45c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4dc0:	7c00      	ldrb	r0, [r0, #16]
   c4dc2:	9101      	str	r1, [sp, #4]
   c4dc4:	f7ff fc26 	bl	c4614 <hal_usart_available_data_for_write>
   c4dc8:	2800      	cmp	r0, #0
   c4dca:	9901      	ldr	r1, [sp, #4]
   c4dcc:	dcf2      	bgt.n	c4db4 <_ZN11USARTSerial5writeEh+0x8>
}
   c4dce:	4628      	mov	r0, r5
   c4dd0:	b003      	add	sp, #12
   c4dd2:	bd30      	pop	{r4, r5, pc}

000c4dd4 <_ZN11USARTSerialD0Ev>:
   c4dd4:	b510      	push	{r4, lr}
   c4dd6:	2114      	movs	r1, #20
   c4dd8:	4604      	mov	r4, r0
   c4dda:	f7ef fe96 	bl	b4b0a <_ZdlPvj>
   c4dde:	4620      	mov	r0, r4
   c4de0:	bd10      	pop	{r4, pc}
	...

000c4de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c4de4:	b510      	push	{r4, lr}
   c4de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c4dea:	4604      	mov	r4, r0
   c4dec:	4608      	mov	r0, r1
   c4dee:	4611      	mov	r1, r2
   c4df0:	2200      	movs	r2, #0
   c4df2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c4df6:	4b04      	ldr	r3, [pc, #16]	; (c4e08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c4df8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c4dfa:	2301      	movs	r3, #1
  _serial = serial;
   c4dfc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c4dfe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c4e00:	f7ff fc10 	bl	c4624 <hal_usart_init_ex>
}
   c4e04:	4620      	mov	r0, r4
   c4e06:	bd10      	pop	{r4, pc}
   c4e08:	000c97a4 	.word	0x000c97a4

000c4e0c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   c4e0c:	2200      	movs	r2, #0
   c4e0e:	6840      	ldr	r0, [r0, #4]
   c4e10:	4611      	mov	r1, r2
   c4e12:	f7ff bc8b 	b.w	c472c <network_ready>

000c4e16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c4e16:	2200      	movs	r2, #0
   c4e18:	6840      	ldr	r0, [r0, #4]
   c4e1a:	4611      	mov	r1, r2
   c4e1c:	f7ff bca6 	b.w	c476c <network_listening>

000c4e20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c4e20:	2200      	movs	r2, #0
   c4e22:	6840      	ldr	r0, [r0, #4]
   c4e24:	4611      	mov	r1, r2
   c4e26:	f7ff bcb1 	b.w	c478c <network_get_listen_timeout>

000c4e2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c4e2a:	6840      	ldr	r0, [r0, #4]
   c4e2c:	2200      	movs	r2, #0
   c4e2e:	f7ff bca5 	b.w	c477c <network_set_listen_timeout>

000c4e32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c4e32:	6840      	ldr	r0, [r0, #4]
   c4e34:	2200      	movs	r2, #0
   c4e36:	f081 0101 	eor.w	r1, r1, #1
   c4e3a:	f7ff bc8f 	b.w	c475c <network_listen>

000c4e3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c4e3e:	2300      	movs	r3, #0
   c4e40:	6840      	ldr	r0, [r0, #4]
   c4e42:	461a      	mov	r2, r3
   c4e44:	4619      	mov	r1, r3
   c4e46:	f7ff bc81 	b.w	c474c <network_off>

000c4e4a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c4e4a:	2300      	movs	r3, #0
   c4e4c:	6840      	ldr	r0, [r0, #4]
   c4e4e:	461a      	mov	r2, r3
   c4e50:	4619      	mov	r1, r3
   c4e52:	f7ff bc73 	b.w	c473c <network_on>

000c4e56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c4e56:	2200      	movs	r2, #0
   c4e58:	6840      	ldr	r0, [r0, #4]
   c4e5a:	4611      	mov	r1, r2
   c4e5c:	f7ff bc56 	b.w	c470c <network_connecting>

000c4e60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c4e60:	6840      	ldr	r0, [r0, #4]
   c4e62:	2200      	movs	r2, #0
   c4e64:	2102      	movs	r1, #2
   c4e66:	f7ff bc59 	b.w	c471c <network_disconnect>

000c4e6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c4e6a:	2300      	movs	r3, #0
   c4e6c:	6840      	ldr	r0, [r0, #4]
   c4e6e:	461a      	mov	r2, r3
   c4e70:	f7ff bc44 	b.w	c46fc <network_connect>

000c4e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   c4e74:	4b02      	ldr	r3, [pc, #8]	; (c4e80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   c4e76:	2204      	movs	r2, #4
   c4e78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   c4e7a:	4a02      	ldr	r2, [pc, #8]	; (c4e84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   c4e7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   c4e7e:	4770      	bx	lr
   c4e80:	2003e730 	.word	0x2003e730
   c4e84:	000c97d4 	.word	0x000c97d4

000c4e88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c4e88:	2300      	movs	r3, #0
   c4e8a:	6840      	ldr	r0, [r0, #4]
   c4e8c:	461a      	mov	r2, r3
   c4e8e:	f7ff bc35 	b.w	c46fc <network_connect>

000c4e92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c4e92:	6840      	ldr	r0, [r0, #4]
   c4e94:	2200      	movs	r2, #0
   c4e96:	2102      	movs	r1, #2
   c4e98:	f7ff bc40 	b.w	c471c <network_disconnect>

000c4e9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c4e9c:	2200      	movs	r2, #0
   c4e9e:	6840      	ldr	r0, [r0, #4]
   c4ea0:	4611      	mov	r1, r2
   c4ea2:	f7ff bc33 	b.w	c470c <network_connecting>

000c4ea6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c4ea6:	2200      	movs	r2, #0
   c4ea8:	6840      	ldr	r0, [r0, #4]
   c4eaa:	4611      	mov	r1, r2
   c4eac:	f7ff bc3e 	b.w	c472c <network_ready>

000c4eb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c4eb0:	2300      	movs	r3, #0
   c4eb2:	6840      	ldr	r0, [r0, #4]
   c4eb4:	461a      	mov	r2, r3
   c4eb6:	4619      	mov	r1, r3
   c4eb8:	f7ff bc40 	b.w	c473c <network_on>

000c4ebc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c4ebc:	2300      	movs	r3, #0
   c4ebe:	6840      	ldr	r0, [r0, #4]
   c4ec0:	461a      	mov	r2, r3
   c4ec2:	4619      	mov	r1, r3
   c4ec4:	f7ff bc42 	b.w	c474c <network_off>

000c4ec8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c4ec8:	6840      	ldr	r0, [r0, #4]
   c4eca:	2100      	movs	r1, #0
   c4ecc:	f7ff bc66 	b.w	c479c <network_is_on>

000c4ed0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c4ed0:	6840      	ldr	r0, [r0, #4]
   c4ed2:	2100      	movs	r1, #0
   c4ed4:	f7ff bc6a 	b.w	c47ac <network_is_off>

000c4ed8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c4ed8:	6840      	ldr	r0, [r0, #4]
   c4eda:	2200      	movs	r2, #0
   c4edc:	f081 0101 	eor.w	r1, r1, #1
   c4ee0:	f7ff bc3c 	b.w	c475c <network_listen>

000c4ee4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c4ee4:	6840      	ldr	r0, [r0, #4]
   c4ee6:	2200      	movs	r2, #0
   c4ee8:	f7ff bc48 	b.w	c477c <network_set_listen_timeout>

000c4eec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c4eec:	2200      	movs	r2, #0
   c4eee:	6840      	ldr	r0, [r0, #4]
   c4ef0:	4611      	mov	r1, r2
   c4ef2:	f7ff bc4b 	b.w	c478c <network_get_listen_timeout>

000c4ef6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c4ef6:	2200      	movs	r2, #0
   c4ef8:	6840      	ldr	r0, [r0, #4]
   c4efa:	4611      	mov	r1, r2
   c4efc:	f7ff bc36 	b.w	c476c <network_listening>

000c4f00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c4f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c4f04:	b095      	sub	sp, #84	; 0x54
   c4f06:	4614      	mov	r4, r2
   c4f08:	460d      	mov	r5, r1
   c4f0a:	4607      	mov	r7, r0
    IPAddress addr;
   c4f0c:	f7ff fe6a 	bl	c4be4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c4f10:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c4f12:	221c      	movs	r2, #28
   c4f14:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c4f16:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c4f18:	f001 fe24 	bl	c6b64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c4f1c:	2340      	movs	r3, #64	; 0x40
   c4f1e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c4f20:	4620      	mov	r0, r4
   c4f22:	466b      	mov	r3, sp
   c4f24:	aa0c      	add	r2, sp, #48	; 0x30
   c4f26:	2100      	movs	r1, #0
   c4f28:	f7ff fb1c 	bl	c4564 <netdb_getaddrinfo>
    if (!r) {
   c4f2c:	4604      	mov	r4, r0
   c4f2e:	2800      	cmp	r0, #0
   c4f30:	d14b      	bne.n	c4fca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c4f32:	4602      	mov	r2, r0
   c4f34:	2101      	movs	r1, #1
   c4f36:	6868      	ldr	r0, [r5, #4]
   c4f38:	f7ff fbf8 	bl	c472c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c4f3c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c4f3e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c4f40:	4622      	mov	r2, r4
   c4f42:	6868      	ldr	r0, [r5, #4]
   c4f44:	f7ff fbf2 	bl	c472c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c4f48:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c4f4a:	4681      	mov	r9, r0
        bool ok = false;
   c4f4c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c4f4e:	2e00      	cmp	r6, #0
   c4f50:	d03b      	beq.n	c4fca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c4f52:	2900      	cmp	r1, #0
   c4f54:	d139      	bne.n	c4fca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c4f56:	6873      	ldr	r3, [r6, #4]
   c4f58:	2b02      	cmp	r3, #2
   c4f5a:	d003      	beq.n	c4f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c4f5c:	2b0a      	cmp	r3, #10
   c4f5e:	d011      	beq.n	c4f84 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c4f60:	69f6      	ldr	r6, [r6, #28]
   c4f62:	e7f4      	b.n	c4f4e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c4f64:	f1b8 0f00 	cmp.w	r8, #0
   c4f68:	d0fa      	beq.n	c4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c4f6a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c4f6c:	a806      	add	r0, sp, #24
   c4f6e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c4f70:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c4f72:	f7ff fe65 	bl	c4c40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c4f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c4f78:	1d3c      	adds	r4, r7, #4
   c4f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c4f7c:	682b      	ldr	r3, [r5, #0]
   c4f7e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c4f80:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c4f82:	e7ed      	b.n	c4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c4f84:	f1b9 0f00 	cmp.w	r9, #0
   c4f88:	d0ea      	beq.n	c4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c4f8a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c4f8c:	2210      	movs	r2, #16
   c4f8e:	a801      	add	r0, sp, #4
   c4f90:	f001 fde8 	bl	c6b64 <memset>
                    a.v = 6;
   c4f94:	2306      	movs	r3, #6
   c4f96:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c4f9a:	ad01      	add	r5, sp, #4
   c4f9c:	f104 0308 	add.w	r3, r4, #8
   c4fa0:	3418      	adds	r4, #24
   c4fa2:	6818      	ldr	r0, [r3, #0]
   c4fa4:	6859      	ldr	r1, [r3, #4]
   c4fa6:	462a      	mov	r2, r5
   c4fa8:	c203      	stmia	r2!, {r0, r1}
   c4faa:	3308      	adds	r3, #8
   c4fac:	42a3      	cmp	r3, r4
   c4fae:	4615      	mov	r5, r2
   c4fb0:	d1f7      	bne.n	c4fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c4fb2:	a901      	add	r1, sp, #4
   c4fb4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c4fb6:	ad07      	add	r5, sp, #28
   c4fb8:	f7ff fe22 	bl	c4c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c4fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c4fbe:	1d3c      	adds	r4, r7, #4
   c4fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c4fc2:	682b      	ldr	r3, [r5, #0]
   c4fc4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c4fc6:	4649      	mov	r1, r9
   c4fc8:	e7ca      	b.n	c4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c4fca:	9800      	ldr	r0, [sp, #0]
   c4fcc:	f7ff fac2 	bl	c4554 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c4fd0:	4638      	mov	r0, r7
   c4fd2:	b015      	add	sp, #84	; 0x54
   c4fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c4fd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c4fd8:	4b02      	ldr	r3, [pc, #8]	; (c4fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c4fda:	4a03      	ldr	r2, [pc, #12]	; (c4fe8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c4fdc:	601a      	str	r2, [r3, #0]
   c4fde:	2200      	movs	r2, #0
   c4fe0:	605a      	str	r2, [r3, #4]

} // spark
   c4fe2:	4770      	bx	lr
   c4fe4:	2003e738 	.word	0x2003e738
   c4fe8:	000c9810 	.word	0x000c9810

000c4fec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c4fec:	4770      	bx	lr
	...

000c4ff0 <_Z20acquireSerial1Bufferv>:
{
   c4ff0:	b538      	push	{r3, r4, r5, lr}
   c4ff2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c4ff4:	2514      	movs	r5, #20
   c4ff6:	462a      	mov	r2, r5
   c4ff8:	2100      	movs	r1, #0
   c4ffa:	f001 fdb3 	bl	c6b64 <memset>
   c4ffe:	8025      	strh	r5, [r4, #0]
   c5000:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c5002:	4907      	ldr	r1, [pc, #28]	; (c5020 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c5004:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c5006:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c5008:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c500a:	f000 f82f 	bl	c506c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c500e:	4904      	ldr	r1, [pc, #16]	; (c5020 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c5010:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c5012:	4628      	mov	r0, r5
   c5014:	f000 f82a 	bl	c506c <_ZnajRKSt9nothrow_t>
    };
   c5018:	60e0      	str	r0, [r4, #12]
}
   c501a:	4620      	mov	r0, r4
   c501c:	bd38      	pop	{r3, r4, r5, pc}
   c501e:	bf00      	nop
   c5020:	000c9844 	.word	0x000c9844

000c5024 <_Z22__fetch_global_Serial1v>:
{
   c5024:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c5026:	4d0e      	ldr	r5, [pc, #56]	; (c5060 <_Z22__fetch_global_Serial1v+0x3c>)
   c5028:	7829      	ldrb	r1, [r5, #0]
   c502a:	f3bf 8f5b 	dmb	ish
   c502e:	f011 0401 	ands.w	r4, r1, #1
{
   c5032:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c5034:	d111      	bne.n	c505a <_Z22__fetch_global_Serial1v+0x36>
   c5036:	4628      	mov	r0, r5
   c5038:	f7ef fd76 	bl	b4b28 <__cxa_guard_acquire>
   c503c:	b168      	cbz	r0, c505a <_Z22__fetch_global_Serial1v+0x36>
   c503e:	a801      	add	r0, sp, #4
   c5040:	f7ff ffd6 	bl	c4ff0 <_Z20acquireSerial1Bufferv>
   c5044:	aa01      	add	r2, sp, #4
   c5046:	4621      	mov	r1, r4
   c5048:	4806      	ldr	r0, [pc, #24]	; (c5064 <_Z22__fetch_global_Serial1v+0x40>)
   c504a:	f7ff fecb 	bl	c4de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c504e:	4628      	mov	r0, r5
   c5050:	f7ef fd6f 	bl	b4b32 <__cxa_guard_release>
   c5054:	4804      	ldr	r0, [pc, #16]	; (c5068 <_Z22__fetch_global_Serial1v+0x44>)
   c5056:	f001 fd33 	bl	c6ac0 <atexit>
    return serial1;
}
   c505a:	4802      	ldr	r0, [pc, #8]	; (c5064 <_Z22__fetch_global_Serial1v+0x40>)
   c505c:	b007      	add	sp, #28
   c505e:	bd30      	pop	{r4, r5, pc}
   c5060:	2003e740 	.word	0x2003e740
   c5064:	2003e744 	.word	0x2003e744
   c5068:	000c4fed 	.word	0x000c4fed

000c506c <_ZnajRKSt9nothrow_t>:
   c506c:	f7ef bd49 	b.w	b4b02 <_Znaj>

000c5070 <floor>:
   c5070:	ec51 0b10 	vmov	r0, r1, d0
   c5074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c5076:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c507a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   c507e:	2d13      	cmp	r5, #19
   c5080:	ee10 6a10 	vmov	r6, s0
   c5084:	460c      	mov	r4, r1
   c5086:	dc30      	bgt.n	c50ea <floor+0x7a>
   c5088:	2d00      	cmp	r5, #0
   c508a:	db1e      	blt.n	c50ca <floor+0x5a>
   c508c:	4f38      	ldr	r7, [pc, #224]	; (c5170 <floor+0x100>)
   c508e:	412f      	asrs	r7, r5
   c5090:	ea01 0307 	and.w	r3, r1, r7
   c5094:	4303      	orrs	r3, r0
   c5096:	d02d      	beq.n	c50f4 <floor+0x84>
   c5098:	a333      	add	r3, pc, #204	; (adr r3, c5168 <floor+0xf8>)
   c509a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c509e:	f7ee ffc5 	bl	b402c <__adddf3>
   c50a2:	2200      	movs	r2, #0
   c50a4:	2300      	movs	r3, #0
   c50a6:	f7ef fc07 	bl	b48b8 <__aeabi_dcmpgt>
   c50aa:	b148      	cbz	r0, c50c0 <floor+0x50>
   c50ac:	2c00      	cmp	r4, #0
   c50ae:	da04      	bge.n	c50ba <floor+0x4a>
   c50b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   c50b4:	fa43 f505 	asr.w	r5, r3, r5
   c50b8:	442c      	add	r4, r5
   c50ba:	ea24 0407 	bic.w	r4, r4, r7
   c50be:	2600      	movs	r6, #0
   c50c0:	4623      	mov	r3, r4
   c50c2:	4632      	mov	r2, r6
   c50c4:	ec43 2b10 	vmov	d0, r2, r3
   c50c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c50ca:	a327      	add	r3, pc, #156	; (adr r3, c5168 <floor+0xf8>)
   c50cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c50d0:	f7ee ffac 	bl	b402c <__adddf3>
   c50d4:	2200      	movs	r2, #0
   c50d6:	2300      	movs	r3, #0
   c50d8:	f7ef fbee 	bl	b48b8 <__aeabi_dcmpgt>
   c50dc:	2800      	cmp	r0, #0
   c50de:	d0ef      	beq.n	c50c0 <floor+0x50>
   c50e0:	2c00      	cmp	r4, #0
   c50e2:	db29      	blt.n	c5138 <floor+0xc8>
   c50e4:	2600      	movs	r6, #0
   c50e6:	4634      	mov	r4, r6
   c50e8:	e7ea      	b.n	c50c0 <floor+0x50>
   c50ea:	2d33      	cmp	r5, #51	; 0x33
   c50ec:	dd05      	ble.n	c50fa <floor+0x8a>
   c50ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   c50f2:	d019      	beq.n	c5128 <floor+0xb8>
   c50f4:	ec41 0b10 	vmov	d0, r0, r1
   c50f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c50fa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   c50fe:	f04f 37ff 	mov.w	r7, #4294967295
   c5102:	40df      	lsrs	r7, r3
   c5104:	4207      	tst	r7, r0
   c5106:	d0f5      	beq.n	c50f4 <floor+0x84>
   c5108:	a317      	add	r3, pc, #92	; (adr r3, c5168 <floor+0xf8>)
   c510a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c510e:	f7ee ff8d 	bl	b402c <__adddf3>
   c5112:	2200      	movs	r2, #0
   c5114:	2300      	movs	r3, #0
   c5116:	f7ef fbcf 	bl	b48b8 <__aeabi_dcmpgt>
   c511a:	2800      	cmp	r0, #0
   c511c:	d0d0      	beq.n	c50c0 <floor+0x50>
   c511e:	2c00      	cmp	r4, #0
   c5120:	db13      	blt.n	c514a <floor+0xda>
   c5122:	ea26 0607 	bic.w	r6, r6, r7
   c5126:	e7cb      	b.n	c50c0 <floor+0x50>
   c5128:	ee10 2a10 	vmov	r2, s0
   c512c:	460b      	mov	r3, r1
   c512e:	f7ee ff7d 	bl	b402c <__adddf3>
   c5132:	ec41 0b10 	vmov	d0, r0, r1
   c5136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5138:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   c513c:	4a0d      	ldr	r2, [pc, #52]	; (c5174 <floor+0x104>)
   c513e:	431e      	orrs	r6, r3
   c5140:	2e00      	cmp	r6, #0
   c5142:	bf18      	it	ne
   c5144:	4614      	movne	r4, r2
   c5146:	2600      	movs	r6, #0
   c5148:	e7ba      	b.n	c50c0 <floor+0x50>
   c514a:	2d14      	cmp	r5, #20
   c514c:	d008      	beq.n	c5160 <floor+0xf0>
   c514e:	2301      	movs	r3, #1
   c5150:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   c5154:	fa03 f505 	lsl.w	r5, r3, r5
   c5158:	19ae      	adds	r6, r5, r6
   c515a:	bf28      	it	cs
   c515c:	18e4      	addcs	r4, r4, r3
   c515e:	e7e0      	b.n	c5122 <floor+0xb2>
   c5160:	3401      	adds	r4, #1
   c5162:	e7de      	b.n	c5122 <floor+0xb2>
   c5164:	f3af 8000 	nop.w
   c5168:	8800759c 	.word	0x8800759c
   c516c:	7e37e43c 	.word	0x7e37e43c
   c5170:	000fffff 	.word	0x000fffff
   c5174:	bff00000 	.word	0xbff00000

000c5178 <frexp>:
   c5178:	ec53 2b10 	vmov	r2, r3, d0
   c517c:	b570      	push	{r4, r5, r6, lr}
   c517e:	4e16      	ldr	r6, [pc, #88]	; (c51d8 <frexp+0x60>)
   c5180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   c5184:	2500      	movs	r5, #0
   c5186:	42b1      	cmp	r1, r6
   c5188:	4604      	mov	r4, r0
   c518a:	6005      	str	r5, [r0, #0]
   c518c:	dc21      	bgt.n	c51d2 <frexp+0x5a>
   c518e:	ee10 6a10 	vmov	r6, s0
   c5192:	430e      	orrs	r6, r1
   c5194:	d01d      	beq.n	c51d2 <frexp+0x5a>
   c5196:	4e11      	ldr	r6, [pc, #68]	; (c51dc <frexp+0x64>)
   c5198:	401e      	ands	r6, r3
   c519a:	4618      	mov	r0, r3
   c519c:	b966      	cbnz	r6, c51b8 <frexp+0x40>
   c519e:	4619      	mov	r1, r3
   c51a0:	2200      	movs	r2, #0
   c51a2:	ee10 0a10 	vmov	r0, s0
   c51a6:	4b0e      	ldr	r3, [pc, #56]	; (c51e0 <frexp+0x68>)
   c51a8:	f7ef f8f6 	bl	b4398 <__aeabi_dmul>
   c51ac:	f06f 0535 	mvn.w	r5, #53	; 0x35
   c51b0:	4602      	mov	r2, r0
   c51b2:	4608      	mov	r0, r1
   c51b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c51b8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
   c51bc:	1509      	asrs	r1, r1, #20
   c51be:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
   c51c2:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   c51c6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   c51ca:	4429      	add	r1, r5
   c51cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   c51d0:	6021      	str	r1, [r4, #0]
   c51d2:	ec43 2b10 	vmov	d0, r2, r3
   c51d6:	bd70      	pop	{r4, r5, r6, pc}
   c51d8:	7fefffff 	.word	0x7fefffff
   c51dc:	7ff00000 	.word	0x7ff00000
   c51e0:	43500000 	.word	0x43500000

000c51e4 <round>:
   c51e4:	ec53 2b10 	vmov	r2, r3, d0
   c51e8:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   c51ec:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   c51f0:	2913      	cmp	r1, #19
   c51f2:	b510      	push	{r4, lr}
   c51f4:	ee10 0a10 	vmov	r0, s0
   c51f8:	469e      	mov	lr, r3
   c51fa:	dc22      	bgt.n	c5242 <round+0x5e>
   c51fc:	2900      	cmp	r1, #0
   c51fe:	db09      	blt.n	c5214 <round+0x30>
   c5200:	4c1f      	ldr	r4, [pc, #124]	; (c5280 <round+0x9c>)
   c5202:	fa44 fc01 	asr.w	ip, r4, r1
   c5206:	ea03 040c 	and.w	r4, r3, ip
   c520a:	4320      	orrs	r0, r4
   c520c:	d110      	bne.n	c5230 <round+0x4c>
   c520e:	ec43 2b10 	vmov	d0, r2, r3
   c5212:	bd10      	pop	{r4, pc}
   c5214:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   c5218:	3101      	adds	r1, #1
   c521a:	bf04      	itt	eq
   c521c:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   c5220:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   c5224:	2000      	movs	r0, #0
   c5226:	4673      	mov	r3, lr
   c5228:	4602      	mov	r2, r0
   c522a:	ec43 2b10 	vmov	d0, r2, r3
   c522e:	bd10      	pop	{r4, pc}
   c5230:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   c5234:	fa43 f101 	asr.w	r1, r3, r1
   c5238:	448e      	add	lr, r1
   c523a:	ea2e 0e0c 	bic.w	lr, lr, ip
   c523e:	2000      	movs	r0, #0
   c5240:	e7f1      	b.n	c5226 <round+0x42>
   c5242:	2933      	cmp	r1, #51	; 0x33
   c5244:	dd08      	ble.n	c5258 <round+0x74>
   c5246:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   c524a:	d1e0      	bne.n	c520e <round+0x2a>
   c524c:	4619      	mov	r1, r3
   c524e:	f7ee feed 	bl	b402c <__adddf3>
   c5252:	ec41 0b10 	vmov	d0, r0, r1
   c5256:	bd10      	pop	{r4, pc}
   c5258:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   c525c:	f04f 34ff 	mov.w	r4, #4294967295
   c5260:	fa24 fc0c 	lsr.w	ip, r4, ip
   c5264:	ea12 0f0c 	tst.w	r2, ip
   c5268:	d0d1      	beq.n	c520e <round+0x2a>
   c526a:	2301      	movs	r3, #1
   c526c:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   c5270:	fa03 f101 	lsl.w	r1, r3, r1
   c5274:	1840      	adds	r0, r0, r1
   c5276:	bf28      	it	cs
   c5278:	449e      	addcs	lr, r3
   c527a:	ea20 000c 	bic.w	r0, r0, ip
   c527e:	e7d2      	b.n	c5226 <round+0x42>
   c5280:	000fffff 	.word	0x000fffff

000c5284 <ceilf>:
   c5284:	ee10 2a10 	vmov	r2, s0
   c5288:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c528c:	3b7f      	subs	r3, #127	; 0x7f
   c528e:	2b16      	cmp	r3, #22
   c5290:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c5294:	dc2f      	bgt.n	c52f6 <ceilf+0x72>
   c5296:	2b00      	cmp	r3, #0
   c5298:	db18      	blt.n	c52cc <ceilf+0x48>
   c529a:	491a      	ldr	r1, [pc, #104]	; (c5304 <ceilf+0x80>)
   c529c:	4119      	asrs	r1, r3
   c529e:	420a      	tst	r2, r1
   c52a0:	d028      	beq.n	c52f4 <ceilf+0x70>
   c52a2:	eddf 7a19 	vldr	s15, [pc, #100]	; c5308 <ceilf+0x84>
   c52a6:	ee70 7a27 	vadd.f32	s15, s0, s15
   c52aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c52ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c52b2:	dd1f      	ble.n	c52f4 <ceilf+0x70>
   c52b4:	2a00      	cmp	r2, #0
   c52b6:	dd04      	ble.n	c52c2 <ceilf+0x3e>
   c52b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c52bc:	fa40 f303 	asr.w	r3, r0, r3
   c52c0:	441a      	add	r2, r3
   c52c2:	ea22 0301 	bic.w	r3, r2, r1
   c52c6:	ee00 3a10 	vmov	s0, r3
   c52ca:	4770      	bx	lr
   c52cc:	eddf 7a0e 	vldr	s15, [pc, #56]	; c5308 <ceilf+0x84>
   c52d0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c52d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c52d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c52dc:	dd0a      	ble.n	c52f4 <ceilf+0x70>
   c52de:	2a00      	cmp	r2, #0
   c52e0:	db06      	blt.n	c52f0 <ceilf+0x6c>
   c52e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c52e6:	2900      	cmp	r1, #0
   c52e8:	bf18      	it	ne
   c52ea:	eeb0 0a67 	vmovne.f32	s0, s15
   c52ee:	4770      	bx	lr
   c52f0:	ed9f 0a06 	vldr	s0, [pc, #24]	; c530c <ceilf+0x88>
   c52f4:	4770      	bx	lr
   c52f6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c52fa:	d3fb      	bcc.n	c52f4 <ceilf+0x70>
   c52fc:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5300:	4770      	bx	lr
   c5302:	bf00      	nop
   c5304:	007fffff 	.word	0x007fffff
   c5308:	7149f2ca 	.word	0x7149f2ca
   c530c:	80000000 	.word	0x80000000

000c5310 <cosf>:
   c5310:	ee10 3a10 	vmov	r3, s0
   c5314:	4a18      	ldr	r2, [pc, #96]	; (c5378 <cosf+0x68>)
   c5316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c531a:	4293      	cmp	r3, r2
   c531c:	dd1b      	ble.n	c5356 <cosf+0x46>
   c531e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c5322:	db02      	blt.n	c532a <cosf+0x1a>
   c5324:	ee30 0a40 	vsub.f32	s0, s0, s0
   c5328:	4770      	bx	lr
   c532a:	b500      	push	{lr}
   c532c:	b083      	sub	sp, #12
   c532e:	4668      	mov	r0, sp
   c5330:	f000 fdf2 	bl	c5f18 <__ieee754_rem_pio2f>
   c5334:	f000 0003 	and.w	r0, r0, #3
   c5338:	2801      	cmp	r0, #1
   c533a:	eddd 0a01 	vldr	s1, [sp, #4]
   c533e:	ed9d 0a00 	vldr	s0, [sp]
   c5342:	d00c      	beq.n	c535e <cosf+0x4e>
   c5344:	2802      	cmp	r0, #2
   c5346:	d012      	beq.n	c536e <cosf+0x5e>
   c5348:	b170      	cbz	r0, c5368 <cosf+0x58>
   c534a:	2001      	movs	r0, #1
   c534c:	f001 fad6 	bl	c68fc <__kernel_sinf>
   c5350:	b003      	add	sp, #12
   c5352:	f85d fb04 	ldr.w	pc, [sp], #4
   c5356:	eddf 0a09 	vldr	s1, [pc, #36]	; c537c <cosf+0x6c>
   c535a:	f000 bf13 	b.w	c6184 <__kernel_cosf>
   c535e:	f001 facd 	bl	c68fc <__kernel_sinf>
   c5362:	eeb1 0a40 	vneg.f32	s0, s0
   c5366:	e7f3      	b.n	c5350 <cosf+0x40>
   c5368:	f000 ff0c 	bl	c6184 <__kernel_cosf>
   c536c:	e7f0      	b.n	c5350 <cosf+0x40>
   c536e:	f000 ff09 	bl	c6184 <__kernel_cosf>
   c5372:	eeb1 0a40 	vneg.f32	s0, s0
   c5376:	e7eb      	b.n	c5350 <cosf+0x40>
   c5378:	3f490fd8 	.word	0x3f490fd8
   c537c:	00000000 	.word	0x00000000

000c5380 <floorf>:
   c5380:	ee10 2a10 	vmov	r2, s0
   c5384:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c5388:	3b7f      	subs	r3, #127	; 0x7f
   c538a:	2b16      	cmp	r3, #22
   c538c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c5390:	dc28      	bgt.n	c53e4 <floorf+0x64>
   c5392:	2b00      	cmp	r3, #0
   c5394:	db18      	blt.n	c53c8 <floorf+0x48>
   c5396:	491a      	ldr	r1, [pc, #104]	; (c5400 <floorf+0x80>)
   c5398:	4119      	asrs	r1, r3
   c539a:	420a      	tst	r2, r1
   c539c:	d021      	beq.n	c53e2 <floorf+0x62>
   c539e:	eddf 7a19 	vldr	s15, [pc, #100]	; c5404 <floorf+0x84>
   c53a2:	ee70 7a27 	vadd.f32	s15, s0, s15
   c53a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c53aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c53ae:	dd18      	ble.n	c53e2 <floorf+0x62>
   c53b0:	2a00      	cmp	r2, #0
   c53b2:	da04      	bge.n	c53be <floorf+0x3e>
   c53b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c53b8:	fa40 f303 	asr.w	r3, r0, r3
   c53bc:	441a      	add	r2, r3
   c53be:	ea22 0301 	bic.w	r3, r2, r1
   c53c2:	ee00 3a10 	vmov	s0, r3
   c53c6:	4770      	bx	lr
   c53c8:	eddf 7a0e 	vldr	s15, [pc, #56]	; c5404 <floorf+0x84>
   c53cc:	ee70 7a27 	vadd.f32	s15, s0, s15
   c53d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c53d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c53d8:	dd03      	ble.n	c53e2 <floorf+0x62>
   c53da:	2a00      	cmp	r2, #0
   c53dc:	db08      	blt.n	c53f0 <floorf+0x70>
   c53de:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c5408 <floorf+0x88>
   c53e2:	4770      	bx	lr
   c53e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c53e8:	d3fb      	bcc.n	c53e2 <floorf+0x62>
   c53ea:	ee30 0a00 	vadd.f32	s0, s0, s0
   c53ee:	4770      	bx	lr
   c53f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c53f4:	2900      	cmp	r1, #0
   c53f6:	bf18      	it	ne
   c53f8:	eeb0 0a67 	vmovne.f32	s0, s15
   c53fc:	4770      	bx	lr
   c53fe:	bf00      	nop
   c5400:	007fffff 	.word	0x007fffff
   c5404:	7149f2ca 	.word	0x7149f2ca
   c5408:	00000000 	.word	0x00000000

000c540c <fmaxf>:
   c540c:	b508      	push	{r3, lr}
   c540e:	ed2d 8b02 	vpush	{d8}
   c5412:	eef0 8a40 	vmov.f32	s17, s0
   c5416:	eeb0 8a60 	vmov.f32	s16, s1
   c541a:	f000 f833 	bl	c5484 <__fpclassifyf>
   c541e:	b920      	cbnz	r0, c542a <fmaxf+0x1e>
   c5420:	eeb0 0a48 	vmov.f32	s0, s16
   c5424:	ecbd 8b02 	vpop	{d8}
   c5428:	bd08      	pop	{r3, pc}
   c542a:	eeb0 0a48 	vmov.f32	s0, s16
   c542e:	f000 f829 	bl	c5484 <__fpclassifyf>
   c5432:	b120      	cbz	r0, c543e <fmaxf+0x32>
   c5434:	eef4 8ac8 	vcmpe.f32	s17, s16
   c5438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c543c:	ddf0      	ble.n	c5420 <fmaxf+0x14>
   c543e:	eeb0 0a68 	vmov.f32	s0, s17
   c5442:	ecbd 8b02 	vpop	{d8}
   c5446:	bd08      	pop	{r3, pc}

000c5448 <fminf>:
   c5448:	b508      	push	{r3, lr}
   c544a:	ed2d 8b02 	vpush	{d8}
   c544e:	eef0 8a40 	vmov.f32	s17, s0
   c5452:	eeb0 8a60 	vmov.f32	s16, s1
   c5456:	f000 f815 	bl	c5484 <__fpclassifyf>
   c545a:	b920      	cbnz	r0, c5466 <fminf+0x1e>
   c545c:	eeb0 0a48 	vmov.f32	s0, s16
   c5460:	ecbd 8b02 	vpop	{d8}
   c5464:	bd08      	pop	{r3, pc}
   c5466:	eeb0 0a48 	vmov.f32	s0, s16
   c546a:	f000 f80b 	bl	c5484 <__fpclassifyf>
   c546e:	b120      	cbz	r0, c547a <fminf+0x32>
   c5470:	eef4 8ac8 	vcmpe.f32	s17, s16
   c5474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5478:	d5f0      	bpl.n	c545c <fminf+0x14>
   c547a:	eeb0 0a68 	vmov.f32	s0, s17
   c547e:	ecbd 8b02 	vpop	{d8}
   c5482:	bd08      	pop	{r3, pc}

000c5484 <__fpclassifyf>:
   c5484:	ee10 3a10 	vmov	r3, s0
   c5488:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   c548c:	d00e      	beq.n	c54ac <__fpclassifyf+0x28>
   c548e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   c5492:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   c5496:	d30d      	bcc.n	c54b4 <__fpclassifyf+0x30>
   c5498:	4b07      	ldr	r3, [pc, #28]	; (c54b8 <__fpclassifyf+0x34>)
   c549a:	1e42      	subs	r2, r0, #1
   c549c:	429a      	cmp	r2, r3
   c549e:	d907      	bls.n	c54b0 <__fpclassifyf+0x2c>
   c54a0:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   c54a4:	fab0 f080 	clz	r0, r0
   c54a8:	0940      	lsrs	r0, r0, #5
   c54aa:	4770      	bx	lr
   c54ac:	2002      	movs	r0, #2
   c54ae:	4770      	bx	lr
   c54b0:	2003      	movs	r0, #3
   c54b2:	4770      	bx	lr
   c54b4:	2004      	movs	r0, #4
   c54b6:	4770      	bx	lr
   c54b8:	007ffffe 	.word	0x007ffffe

000c54bc <roundf>:
   c54bc:	ee10 3a10 	vmov	r3, s0
   c54c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c54c4:	3a7f      	subs	r2, #127	; 0x7f
   c54c6:	2a16      	cmp	r2, #22
   c54c8:	ee10 1a10 	vmov	r1, s0
   c54cc:	dc15      	bgt.n	c54fa <roundf+0x3e>
   c54ce:	2a00      	cmp	r2, #0
   c54d0:	db0c      	blt.n	c54ec <roundf+0x30>
   c54d2:	480c      	ldr	r0, [pc, #48]	; (c5504 <roundf+0x48>)
   c54d4:	4110      	asrs	r0, r2
   c54d6:	4203      	tst	r3, r0
   c54d8:	d005      	beq.n	c54e6 <roundf+0x2a>
   c54da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   c54de:	4113      	asrs	r3, r2
   c54e0:	440b      	add	r3, r1
   c54e2:	ea23 0300 	bic.w	r3, r3, r0
   c54e6:	ee00 3a10 	vmov	s0, r3
   c54ea:	4770      	bx	lr
   c54ec:	3201      	adds	r2, #1
   c54ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   c54f2:	d1f8      	bne.n	c54e6 <roundf+0x2a>
   c54f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   c54f8:	e7f5      	b.n	c54e6 <roundf+0x2a>
   c54fa:	2a80      	cmp	r2, #128	; 0x80
   c54fc:	d1f3      	bne.n	c54e6 <roundf+0x2a>
   c54fe:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5502:	4770      	bx	lr
   c5504:	007fffff 	.word	0x007fffff

000c5508 <sinf>:
   c5508:	ee10 3a10 	vmov	r3, s0
   c550c:	4a19      	ldr	r2, [pc, #100]	; (c5574 <sinf+0x6c>)
   c550e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c5512:	4293      	cmp	r3, r2
   c5514:	dd1c      	ble.n	c5550 <sinf+0x48>
   c5516:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c551a:	db02      	blt.n	c5522 <sinf+0x1a>
   c551c:	ee30 0a40 	vsub.f32	s0, s0, s0
   c5520:	4770      	bx	lr
   c5522:	b500      	push	{lr}
   c5524:	b083      	sub	sp, #12
   c5526:	4668      	mov	r0, sp
   c5528:	f000 fcf6 	bl	c5f18 <__ieee754_rem_pio2f>
   c552c:	f000 0003 	and.w	r0, r0, #3
   c5530:	2801      	cmp	r0, #1
   c5532:	eddd 0a01 	vldr	s1, [sp, #4]
   c5536:	ed9d 0a00 	vldr	s0, [sp]
   c553a:	d00e      	beq.n	c555a <sinf+0x52>
   c553c:	2802      	cmp	r0, #2
   c553e:	d013      	beq.n	c5568 <sinf+0x60>
   c5540:	b170      	cbz	r0, c5560 <sinf+0x58>
   c5542:	f000 fe1f 	bl	c6184 <__kernel_cosf>
   c5546:	eeb1 0a40 	vneg.f32	s0, s0
   c554a:	b003      	add	sp, #12
   c554c:	f85d fb04 	ldr.w	pc, [sp], #4
   c5550:	eddf 0a09 	vldr	s1, [pc, #36]	; c5578 <sinf+0x70>
   c5554:	2000      	movs	r0, #0
   c5556:	f001 b9d1 	b.w	c68fc <__kernel_sinf>
   c555a:	f000 fe13 	bl	c6184 <__kernel_cosf>
   c555e:	e7f4      	b.n	c554a <sinf+0x42>
   c5560:	2001      	movs	r0, #1
   c5562:	f001 f9cb 	bl	c68fc <__kernel_sinf>
   c5566:	e7f0      	b.n	c554a <sinf+0x42>
   c5568:	2001      	movs	r0, #1
   c556a:	f001 f9c7 	bl	c68fc <__kernel_sinf>
   c556e:	eeb1 0a40 	vneg.f32	s0, s0
   c5572:	e7ea      	b.n	c554a <sinf+0x42>
   c5574:	3f490fd8 	.word	0x3f490fd8
	...

000c5580 <exp>:
   c5580:	b508      	push	{r3, lr}
   c5582:	ed2d 8b04 	vpush	{d8-d9}
   c5586:	eeb0 8a40 	vmov.f32	s16, s0
   c558a:	eef0 8a60 	vmov.f32	s17, s1
   c558e:	f000 f8e7 	bl	c5760 <__ieee754_exp>
   c5592:	4b23      	ldr	r3, [pc, #140]	; (c5620 <exp+0xa0>)
   c5594:	eeb0 9a40 	vmov.f32	s18, s0
   c5598:	eef0 9a60 	vmov.f32	s19, s1
   c559c:	f993 3000 	ldrsb.w	r3, [r3]
   c55a0:	3301      	adds	r3, #1
   c55a2:	d016      	beq.n	c55d2 <exp+0x52>
   c55a4:	eeb0 0a48 	vmov.f32	s0, s16
   c55a8:	eef0 0a68 	vmov.f32	s1, s17
   c55ac:	f001 f9ee 	bl	c698c <finite>
   c55b0:	b178      	cbz	r0, c55d2 <exp+0x52>
   c55b2:	a313      	add	r3, pc, #76	; (adr r3, c5600 <exp+0x80>)
   c55b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c55b8:	ec51 0b18 	vmov	r0, r1, d8
   c55bc:	f7ef f97c 	bl	b48b8 <__aeabi_dcmpgt>
   c55c0:	b9a8      	cbnz	r0, c55ee <exp+0x6e>
   c55c2:	a311      	add	r3, pc, #68	; (adr r3, c5608 <exp+0x88>)
   c55c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c55c8:	ec51 0b18 	vmov	r0, r1, d8
   c55cc:	f7ef f956 	bl	b487c <__aeabi_dcmplt>
   c55d0:	b930      	cbnz	r0, c55e0 <exp+0x60>
   c55d2:	eeb0 0a49 	vmov.f32	s0, s18
   c55d6:	eef0 0a69 	vmov.f32	s1, s19
   c55da:	ecbd 8b04 	vpop	{d8-d9}
   c55de:	bd08      	pop	{r3, pc}
   c55e0:	f7ff f914 	bl	c480c <__errno>
   c55e4:	2322      	movs	r3, #34	; 0x22
   c55e6:	ed9f 9b0a 	vldr	d9, [pc, #40]	; c5610 <exp+0x90>
   c55ea:	6003      	str	r3, [r0, #0]
   c55ec:	e7f1      	b.n	c55d2 <exp+0x52>
   c55ee:	f7ff f90d 	bl	c480c <__errno>
   c55f2:	2322      	movs	r3, #34	; 0x22
   c55f4:	ed9f 9b08 	vldr	d9, [pc, #32]	; c5618 <exp+0x98>
   c55f8:	6003      	str	r3, [r0, #0]
   c55fa:	e7ea      	b.n	c55d2 <exp+0x52>
   c55fc:	f3af 8000 	nop.w
   c5600:	fefa39ef 	.word	0xfefa39ef
   c5604:	40862e42 	.word	0x40862e42
   c5608:	d52d3051 	.word	0xd52d3051
   c560c:	c0874910 	.word	0xc0874910
	...
   c561c:	7ff00000 	.word	0x7ff00000
   c5620:	2003c5bc 	.word	0x2003c5bc

000c5624 <expf>:
   c5624:	b508      	push	{r3, lr}
   c5626:	ed2d 8b02 	vpush	{d8}
   c562a:	eeb0 8a40 	vmov.f32	s16, s0
   c562e:	f000 fa7d 	bl	c5b2c <__ieee754_expf>
   c5632:	4b16      	ldr	r3, [pc, #88]	; (c568c <expf+0x68>)
   c5634:	f993 3000 	ldrsb.w	r3, [r3]
   c5638:	3301      	adds	r3, #1
   c563a:	eef0 8a40 	vmov.f32	s17, s0
   c563e:	d012      	beq.n	c5666 <expf+0x42>
   c5640:	eeb0 0a48 	vmov.f32	s0, s16
   c5644:	f001 f9b6 	bl	c69b4 <finitef>
   c5648:	b168      	cbz	r0, c5666 <expf+0x42>
   c564a:	eddf 7a11 	vldr	s15, [pc, #68]	; c5690 <expf+0x6c>
   c564e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c5652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5656:	dc12      	bgt.n	c567e <expf+0x5a>
   c5658:	eddf 7a0e 	vldr	s15, [pc, #56]	; c5694 <expf+0x70>
   c565c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c5660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5664:	d404      	bmi.n	c5670 <expf+0x4c>
   c5666:	eeb0 0a68 	vmov.f32	s0, s17
   c566a:	ecbd 8b02 	vpop	{d8}
   c566e:	bd08      	pop	{r3, pc}
   c5670:	f7ff f8cc 	bl	c480c <__errno>
   c5674:	2322      	movs	r3, #34	; 0x22
   c5676:	eddf 8a08 	vldr	s17, [pc, #32]	; c5698 <expf+0x74>
   c567a:	6003      	str	r3, [r0, #0]
   c567c:	e7f3      	b.n	c5666 <expf+0x42>
   c567e:	f7ff f8c5 	bl	c480c <__errno>
   c5682:	2322      	movs	r3, #34	; 0x22
   c5684:	eddf 8a05 	vldr	s17, [pc, #20]	; c569c <expf+0x78>
   c5688:	6003      	str	r3, [r0, #0]
   c568a:	e7ec      	b.n	c5666 <expf+0x42>
   c568c:	2003c5bc 	.word	0x2003c5bc
   c5690:	42b17180 	.word	0x42b17180
   c5694:	c2cff1b5 	.word	0xc2cff1b5
   c5698:	00000000 	.word	0x00000000
   c569c:	7f800000 	.word	0x7f800000

000c56a0 <logf>:
   c56a0:	b508      	push	{r3, lr}
   c56a2:	ed2d 8b02 	vpush	{d8}
   c56a6:	eeb0 8a40 	vmov.f32	s16, s0
   c56aa:	f000 fb35 	bl	c5d18 <__ieee754_logf>
   c56ae:	4b14      	ldr	r3, [pc, #80]	; (c5700 <logf+0x60>)
   c56b0:	f993 3000 	ldrsb.w	r3, [r3]
   c56b4:	3301      	adds	r3, #1
   c56b6:	d014      	beq.n	c56e2 <logf+0x42>
   c56b8:	eeb4 8a48 	vcmp.f32	s16, s16
   c56bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c56c0:	d60f      	bvs.n	c56e2 <logf+0x42>
   c56c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   c56c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c56ca:	dc0a      	bgt.n	c56e2 <logf+0x42>
   c56cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c56d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c56d4:	d108      	bne.n	c56e8 <logf+0x48>
   c56d6:	f7ff f899 	bl	c480c <__errno>
   c56da:	2322      	movs	r3, #34	; 0x22
   c56dc:	ed9f 0a09 	vldr	s0, [pc, #36]	; c5704 <logf+0x64>
   c56e0:	6003      	str	r3, [r0, #0]
   c56e2:	ecbd 8b02 	vpop	{d8}
   c56e6:	bd08      	pop	{r3, pc}
   c56e8:	f7ff f890 	bl	c480c <__errno>
   c56ec:	ecbd 8b02 	vpop	{d8}
   c56f0:	4603      	mov	r3, r0
   c56f2:	2221      	movs	r2, #33	; 0x21
   c56f4:	601a      	str	r2, [r3, #0]
   c56f6:	4804      	ldr	r0, [pc, #16]	; (c5708 <logf+0x68>)
   c56f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c56fc:	f001 b968 	b.w	c69d0 <nanf>
   c5700:	2003c5bc 	.word	0x2003c5bc
   c5704:	ff800000 	.word	0xff800000
   c5708:	000c9848 	.word	0x000c9848

000c570c <sqrtf>:
   c570c:	b508      	push	{r3, lr}
   c570e:	ed2d 8b02 	vpush	{d8}
   c5712:	eeb0 8a40 	vmov.f32	s16, s0
   c5716:	f000 fd31 	bl	c617c <__ieee754_sqrtf>
   c571a:	4b0e      	ldr	r3, [pc, #56]	; (c5754 <sqrtf+0x48>)
   c571c:	f993 3000 	ldrsb.w	r3, [r3]
   c5720:	3301      	adds	r3, #1
   c5722:	d00b      	beq.n	c573c <sqrtf+0x30>
   c5724:	eeb4 8a48 	vcmp.f32	s16, s16
   c5728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c572c:	d606      	bvs.n	c573c <sqrtf+0x30>
   c572e:	eddf 8a0a 	vldr	s17, [pc, #40]	; c5758 <sqrtf+0x4c>
   c5732:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c5736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c573a:	d402      	bmi.n	c5742 <sqrtf+0x36>
   c573c:	ecbd 8b02 	vpop	{d8}
   c5740:	bd08      	pop	{r3, pc}
   c5742:	f7ff f863 	bl	c480c <__errno>
   c5746:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c574a:	ecbd 8b02 	vpop	{d8}
   c574e:	2321      	movs	r3, #33	; 0x21
   c5750:	6003      	str	r3, [r0, #0]
   c5752:	bd08      	pop	{r3, pc}
   c5754:	2003c5bc 	.word	0x2003c5bc
	...

000c5760 <__ieee754_exp>:
   c5760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5764:	ec55 4b10 	vmov	r4, r5, d0
   c5768:	ed2d 8b02 	vpush	{d8}
   c576c:	49dc      	ldr	r1, [pc, #880]	; (c5ae0 <__ieee754_exp+0x380>)
   c576e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c5772:	428a      	cmp	r2, r1
   c5774:	b083      	sub	sp, #12
   c5776:	ea4f 76d5 	mov.w	r6, r5, lsr #31
   c577a:	d913      	bls.n	c57a4 <__ieee754_exp+0x44>
   c577c:	49d9      	ldr	r1, [pc, #868]	; (c5ae4 <__ieee754_exp+0x384>)
   c577e:	428a      	cmp	r2, r1
   c5780:	d92f      	bls.n	c57e2 <__ieee754_exp+0x82>
   c5782:	f3c5 0313 	ubfx	r3, r5, #0, #20
   c5786:	4323      	orrs	r3, r4
   c5788:	ee10 2a10 	vmov	r2, s0
   c578c:	f040 8162 	bne.w	c5a54 <__ieee754_exp+0x2f4>
   c5790:	2e00      	cmp	r6, #0
   c5792:	f000 80f9 	beq.w	c5988 <__ieee754_exp+0x228>
   c5796:	ed9f 0bba 	vldr	d0, [pc, #744]	; c5a80 <__ieee754_exp+0x320>
   c579a:	b003      	add	sp, #12
   c579c:	ecbd 8b02 	vpop	{d8}
   c57a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c57a4:	4bd0      	ldr	r3, [pc, #832]	; (c5ae8 <__ieee754_exp+0x388>)
   c57a6:	429a      	cmp	r2, r3
   c57a8:	d85b      	bhi.n	c5862 <__ieee754_exp+0x102>
   c57aa:	4bd0      	ldr	r3, [pc, #832]	; (c5aec <__ieee754_exp+0x38c>)
   c57ac:	429a      	cmp	r2, r3
   c57ae:	f200 80f0 	bhi.w	c5992 <__ieee754_exp+0x232>
   c57b2:	a3b5      	add	r3, pc, #724	; (adr r3, c5a88 <__ieee754_exp+0x328>)
   c57b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c57b8:	ee10 0a10 	vmov	r0, s0
   c57bc:	4629      	mov	r1, r5
   c57be:	f7ee fc35 	bl	b402c <__adddf3>
   c57c2:	4bcb      	ldr	r3, [pc, #812]	; (c5af0 <__ieee754_exp+0x390>)
   c57c4:	2200      	movs	r2, #0
   c57c6:	f7ef f877 	bl	b48b8 <__aeabi_dcmpgt>
   c57ca:	2800      	cmp	r0, #0
   c57cc:	f000 80e1 	beq.w	c5992 <__ieee754_exp+0x232>
   c57d0:	4bc7      	ldr	r3, [pc, #796]	; (c5af0 <__ieee754_exp+0x390>)
   c57d2:	2200      	movs	r2, #0
   c57d4:	4620      	mov	r0, r4
   c57d6:	4629      	mov	r1, r5
   c57d8:	f7ee fc28 	bl	b402c <__adddf3>
   c57dc:	ec41 0b10 	vmov	d0, r0, r1
   c57e0:	e0d2      	b.n	c5988 <__ieee754_exp+0x228>
   c57e2:	a3ab      	add	r3, pc, #684	; (adr r3, c5a90 <__ieee754_exp+0x330>)
   c57e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c57e8:	ee10 0a10 	vmov	r0, s0
   c57ec:	4629      	mov	r1, r5
   c57ee:	f7ef f863 	bl	b48b8 <__aeabi_dcmpgt>
   c57f2:	2800      	cmp	r0, #0
   c57f4:	f040 813a 	bne.w	c5a6c <__ieee754_exp+0x30c>
   c57f8:	a3a7      	add	r3, pc, #668	; (adr r3, c5a98 <__ieee754_exp+0x338>)
   c57fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c57fe:	4620      	mov	r0, r4
   c5800:	4629      	mov	r1, r5
   c5802:	f7ef f83b 	bl	b487c <__aeabi_dcmplt>
   c5806:	2800      	cmp	r0, #0
   c5808:	d1c5      	bne.n	c5796 <__ieee754_exp+0x36>
   c580a:	4bba      	ldr	r3, [pc, #744]	; (c5af4 <__ieee754_exp+0x394>)
   c580c:	4620      	mov	r0, r4
   c580e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c5812:	4629      	mov	r1, r5
   c5814:	a3a2      	add	r3, pc, #648	; (adr r3, c5aa0 <__ieee754_exp+0x340>)
   c5816:	e9d3 2300 	ldrd	r2, r3, [r3]
   c581a:	f7ee fdbd 	bl	b4398 <__aeabi_dmul>
   c581e:	e9d6 2300 	ldrd	r2, r3, [r6]
   c5822:	f7ee fc03 	bl	b402c <__adddf3>
   c5826:	f7ef f851 	bl	b48cc <__aeabi_d2iz>
   c582a:	9001      	str	r0, [sp, #4]
   c582c:	f7ee fd4a 	bl	b42c4 <__aeabi_i2d>
   c5830:	a39d      	add	r3, pc, #628	; (adr r3, c5aa8 <__ieee754_exp+0x348>)
   c5832:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5836:	4606      	mov	r6, r0
   c5838:	460f      	mov	r7, r1
   c583a:	f7ee fdad 	bl	b4398 <__aeabi_dmul>
   c583e:	4602      	mov	r2, r0
   c5840:	460b      	mov	r3, r1
   c5842:	4620      	mov	r0, r4
   c5844:	4629      	mov	r1, r5
   c5846:	f7ee fbef 	bl	b4028 <__aeabi_dsub>
   c584a:	a399      	add	r3, pc, #612	; (adr r3, c5ab0 <__ieee754_exp+0x350>)
   c584c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5850:	4680      	mov	r8, r0
   c5852:	4689      	mov	r9, r1
   c5854:	4630      	mov	r0, r6
   c5856:	4639      	mov	r1, r7
   c5858:	f7ee fd9e 	bl	b4398 <__aeabi_dmul>
   c585c:	ec41 0b18 	vmov	d8, r0, r1
   c5860:	e01c      	b.n	c589c <__ieee754_exp+0x13c>
   c5862:	4ba5      	ldr	r3, [pc, #660]	; (c5af8 <__ieee754_exp+0x398>)
   c5864:	429a      	cmp	r2, r3
   c5866:	d8d0      	bhi.n	c580a <__ieee754_exp+0xaa>
   c5868:	4ba4      	ldr	r3, [pc, #656]	; (c5afc <__ieee754_exp+0x39c>)
   c586a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   c586e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5872:	ee10 0a10 	vmov	r0, s0
   c5876:	4629      	mov	r1, r5
   c5878:	f7ee fbd6 	bl	b4028 <__aeabi_dsub>
   c587c:	4ba0      	ldr	r3, [pc, #640]	; (c5b00 <__ieee754_exp+0x3a0>)
   c587e:	00f4      	lsls	r4, r6, #3
   c5880:	4423      	add	r3, r4
   c5882:	ed93 7b00 	vldr	d7, [r3]
   c5886:	f1c6 0a01 	rsb	sl, r6, #1
   c588a:	ebaa 0306 	sub.w	r3, sl, r6
   c588e:	4680      	mov	r8, r0
   c5890:	4689      	mov	r9, r1
   c5892:	9301      	str	r3, [sp, #4]
   c5894:	eeb0 8a47 	vmov.f32	s16, s14
   c5898:	eef0 8a67 	vmov.f32	s17, s15
   c589c:	ec53 2b18 	vmov	r2, r3, d8
   c58a0:	4640      	mov	r0, r8
   c58a2:	4649      	mov	r1, r9
   c58a4:	f7ee fbc0 	bl	b4028 <__aeabi_dsub>
   c58a8:	4602      	mov	r2, r0
   c58aa:	460b      	mov	r3, r1
   c58ac:	4682      	mov	sl, r0
   c58ae:	468b      	mov	fp, r1
   c58b0:	f7ee fd72 	bl	b4398 <__aeabi_dmul>
   c58b4:	a380      	add	r3, pc, #512	; (adr r3, c5ab8 <__ieee754_exp+0x358>)
   c58b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58ba:	4604      	mov	r4, r0
   c58bc:	460d      	mov	r5, r1
   c58be:	f7ee fd6b 	bl	b4398 <__aeabi_dmul>
   c58c2:	a37f      	add	r3, pc, #508	; (adr r3, c5ac0 <__ieee754_exp+0x360>)
   c58c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58c8:	f7ee fbae 	bl	b4028 <__aeabi_dsub>
   c58cc:	4622      	mov	r2, r4
   c58ce:	462b      	mov	r3, r5
   c58d0:	f7ee fd62 	bl	b4398 <__aeabi_dmul>
   c58d4:	a37c      	add	r3, pc, #496	; (adr r3, c5ac8 <__ieee754_exp+0x368>)
   c58d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58da:	f7ee fba7 	bl	b402c <__adddf3>
   c58de:	4622      	mov	r2, r4
   c58e0:	462b      	mov	r3, r5
   c58e2:	f7ee fd59 	bl	b4398 <__aeabi_dmul>
   c58e6:	a37a      	add	r3, pc, #488	; (adr r3, c5ad0 <__ieee754_exp+0x370>)
   c58e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58ec:	f7ee fb9c 	bl	b4028 <__aeabi_dsub>
   c58f0:	4622      	mov	r2, r4
   c58f2:	462b      	mov	r3, r5
   c58f4:	f7ee fd50 	bl	b4398 <__aeabi_dmul>
   c58f8:	a377      	add	r3, pc, #476	; (adr r3, c5ad8 <__ieee754_exp+0x378>)
   c58fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58fe:	f7ee fb95 	bl	b402c <__adddf3>
   c5902:	4622      	mov	r2, r4
   c5904:	462b      	mov	r3, r5
   c5906:	f7ee fd47 	bl	b4398 <__aeabi_dmul>
   c590a:	4602      	mov	r2, r0
   c590c:	460b      	mov	r3, r1
   c590e:	4650      	mov	r0, sl
   c5910:	4659      	mov	r1, fp
   c5912:	f7ee fb89 	bl	b4028 <__aeabi_dsub>
   c5916:	9b01      	ldr	r3, [sp, #4]
   c5918:	460f      	mov	r7, r1
   c591a:	4606      	mov	r6, r0
   c591c:	4654      	mov	r4, sl
   c591e:	465d      	mov	r5, fp
   c5920:	4601      	mov	r1, r0
   c5922:	463a      	mov	r2, r7
   c5924:	2b00      	cmp	r3, #0
   c5926:	d06d      	beq.n	c5a04 <__ieee754_exp+0x2a4>
   c5928:	4632      	mov	r2, r6
   c592a:	463b      	mov	r3, r7
   c592c:	4650      	mov	r0, sl
   c592e:	4659      	mov	r1, fp
   c5930:	f7ee fd32 	bl	b4398 <__aeabi_dmul>
   c5934:	4632      	mov	r2, r6
   c5936:	4604      	mov	r4, r0
   c5938:	463b      	mov	r3, r7
   c593a:	460d      	mov	r5, r1
   c593c:	2000      	movs	r0, #0
   c593e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   c5942:	f7ee fb71 	bl	b4028 <__aeabi_dsub>
   c5946:	4602      	mov	r2, r0
   c5948:	460b      	mov	r3, r1
   c594a:	4620      	mov	r0, r4
   c594c:	4629      	mov	r1, r5
   c594e:	f7ee fe4d 	bl	b45ec <__aeabi_ddiv>
   c5952:	4602      	mov	r2, r0
   c5954:	460b      	mov	r3, r1
   c5956:	ec51 0b18 	vmov	r0, r1, d8
   c595a:	f7ee fb65 	bl	b4028 <__aeabi_dsub>
   c595e:	4642      	mov	r2, r8
   c5960:	464b      	mov	r3, r9
   c5962:	f7ee fb61 	bl	b4028 <__aeabi_dsub>
   c5966:	4602      	mov	r2, r0
   c5968:	460b      	mov	r3, r1
   c596a:	2000      	movs	r0, #0
   c596c:	4960      	ldr	r1, [pc, #384]	; (c5af0 <__ieee754_exp+0x390>)
   c596e:	f7ee fb5b 	bl	b4028 <__aeabi_dsub>
   c5972:	9c01      	ldr	r4, [sp, #4]
   c5974:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   c5978:	429c      	cmp	r4, r3
   c597a:	4602      	mov	r2, r0
   c597c:	f2c0 80c2 	blt.w	c5b04 <__ieee754_exp+0x3a4>
   c5980:	eb01 5304 	add.w	r3, r1, r4, lsl #20
   c5984:	ec43 2b10 	vmov	d0, r2, r3
   c5988:	b003      	add	sp, #12
   c598a:	ecbd 8b02 	vpop	{d8}
   c598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5992:	4622      	mov	r2, r4
   c5994:	462b      	mov	r3, r5
   c5996:	4620      	mov	r0, r4
   c5998:	4629      	mov	r1, r5
   c599a:	f7ee fcfd 	bl	b4398 <__aeabi_dmul>
   c599e:	a346      	add	r3, pc, #280	; (adr r3, c5ab8 <__ieee754_exp+0x358>)
   c59a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59a4:	4606      	mov	r6, r0
   c59a6:	460f      	mov	r7, r1
   c59a8:	f7ee fcf6 	bl	b4398 <__aeabi_dmul>
   c59ac:	a344      	add	r3, pc, #272	; (adr r3, c5ac0 <__ieee754_exp+0x360>)
   c59ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59b2:	f7ee fb39 	bl	b4028 <__aeabi_dsub>
   c59b6:	4632      	mov	r2, r6
   c59b8:	463b      	mov	r3, r7
   c59ba:	f7ee fced 	bl	b4398 <__aeabi_dmul>
   c59be:	a342      	add	r3, pc, #264	; (adr r3, c5ac8 <__ieee754_exp+0x368>)
   c59c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59c4:	f7ee fb32 	bl	b402c <__adddf3>
   c59c8:	4632      	mov	r2, r6
   c59ca:	463b      	mov	r3, r7
   c59cc:	f7ee fce4 	bl	b4398 <__aeabi_dmul>
   c59d0:	a33f      	add	r3, pc, #252	; (adr r3, c5ad0 <__ieee754_exp+0x370>)
   c59d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59d6:	f7ee fb27 	bl	b4028 <__aeabi_dsub>
   c59da:	4632      	mov	r2, r6
   c59dc:	463b      	mov	r3, r7
   c59de:	f7ee fcdb 	bl	b4398 <__aeabi_dmul>
   c59e2:	a33d      	add	r3, pc, #244	; (adr r3, c5ad8 <__ieee754_exp+0x378>)
   c59e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59e8:	f7ee fb20 	bl	b402c <__adddf3>
   c59ec:	4632      	mov	r2, r6
   c59ee:	463b      	mov	r3, r7
   c59f0:	f7ee fcd2 	bl	b4398 <__aeabi_dmul>
   c59f4:	4602      	mov	r2, r0
   c59f6:	460b      	mov	r3, r1
   c59f8:	4620      	mov	r0, r4
   c59fa:	4629      	mov	r1, r5
   c59fc:	f7ee fb14 	bl	b4028 <__aeabi_dsub>
   c5a00:	460a      	mov	r2, r1
   c5a02:	4601      	mov	r1, r0
   c5a04:	4691      	mov	r9, r2
   c5a06:	4688      	mov	r8, r1
   c5a08:	460a      	mov	r2, r1
   c5a0a:	464b      	mov	r3, r9
   c5a0c:	4620      	mov	r0, r4
   c5a0e:	4629      	mov	r1, r5
   c5a10:	f7ee fcc2 	bl	b4398 <__aeabi_dmul>
   c5a14:	2200      	movs	r2, #0
   c5a16:	4606      	mov	r6, r0
   c5a18:	460f      	mov	r7, r1
   c5a1a:	4640      	mov	r0, r8
   c5a1c:	4649      	mov	r1, r9
   c5a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5a22:	f7ee fb01 	bl	b4028 <__aeabi_dsub>
   c5a26:	4602      	mov	r2, r0
   c5a28:	460b      	mov	r3, r1
   c5a2a:	4630      	mov	r0, r6
   c5a2c:	4639      	mov	r1, r7
   c5a2e:	f7ee fddd 	bl	b45ec <__aeabi_ddiv>
   c5a32:	4622      	mov	r2, r4
   c5a34:	462b      	mov	r3, r5
   c5a36:	f7ee faf7 	bl	b4028 <__aeabi_dsub>
   c5a3a:	4602      	mov	r2, r0
   c5a3c:	460b      	mov	r3, r1
   c5a3e:	2000      	movs	r0, #0
   c5a40:	492b      	ldr	r1, [pc, #172]	; (c5af0 <__ieee754_exp+0x390>)
   c5a42:	f7ee faf1 	bl	b4028 <__aeabi_dsub>
   c5a46:	ec41 0b10 	vmov	d0, r0, r1
   c5a4a:	b003      	add	sp, #12
   c5a4c:	ecbd 8b02 	vpop	{d8}
   c5a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5a54:	462b      	mov	r3, r5
   c5a56:	4620      	mov	r0, r4
   c5a58:	4629      	mov	r1, r5
   c5a5a:	f7ee fae7 	bl	b402c <__adddf3>
   c5a5e:	ec41 0b10 	vmov	d0, r0, r1
   c5a62:	b003      	add	sp, #12
   c5a64:	ecbd 8b02 	vpop	{d8}
   c5a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5a6c:	a306      	add	r3, pc, #24	; (adr r3, c5a88 <__ieee754_exp+0x328>)
   c5a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5a72:	4610      	mov	r0, r2
   c5a74:	4619      	mov	r1, r3
   c5a76:	f7ee fc8f 	bl	b4398 <__aeabi_dmul>
   c5a7a:	ec41 0b10 	vmov	d0, r0, r1
   c5a7e:	e783      	b.n	c5988 <__ieee754_exp+0x228>
	...
   c5a88:	8800759c 	.word	0x8800759c
   c5a8c:	7e37e43c 	.word	0x7e37e43c
   c5a90:	fefa39ef 	.word	0xfefa39ef
   c5a94:	40862e42 	.word	0x40862e42
   c5a98:	d52d3051 	.word	0xd52d3051
   c5a9c:	c0874910 	.word	0xc0874910
   c5aa0:	652b82fe 	.word	0x652b82fe
   c5aa4:	3ff71547 	.word	0x3ff71547
   c5aa8:	fee00000 	.word	0xfee00000
   c5aac:	3fe62e42 	.word	0x3fe62e42
   c5ab0:	35793c76 	.word	0x35793c76
   c5ab4:	3dea39ef 	.word	0x3dea39ef
   c5ab8:	72bea4d0 	.word	0x72bea4d0
   c5abc:	3e663769 	.word	0x3e663769
   c5ac0:	c5d26bf1 	.word	0xc5d26bf1
   c5ac4:	3ebbbd41 	.word	0x3ebbbd41
   c5ac8:	af25de2c 	.word	0xaf25de2c
   c5acc:	3f11566a 	.word	0x3f11566a
   c5ad0:	16bebd93 	.word	0x16bebd93
   c5ad4:	3f66c16c 	.word	0x3f66c16c
   c5ad8:	5555553e 	.word	0x5555553e
   c5adc:	3fc55555 	.word	0x3fc55555
   c5ae0:	40862e41 	.word	0x40862e41
   c5ae4:	7fefffff 	.word	0x7fefffff
   c5ae8:	3fd62e42 	.word	0x3fd62e42
   c5aec:	3e2fffff 	.word	0x3e2fffff
   c5af0:	3ff00000 	.word	0x3ff00000
   c5af4:	000c9850 	.word	0x000c9850
   c5af8:	3ff0a2b1 	.word	0x3ff0a2b1
   c5afc:	000c9860 	.word	0x000c9860
   c5b00:	000c9870 	.word	0x000c9870
   c5b04:	9801      	ldr	r0, [sp, #4]
   c5b06:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
   c5b0a:	eb01 530a 	add.w	r3, r1, sl, lsl #20
   c5b0e:	4610      	mov	r0, r2
   c5b10:	4619      	mov	r1, r3
   c5b12:	2200      	movs	r2, #0
   c5b14:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   c5b18:	f7ee fc3e 	bl	b4398 <__aeabi_dmul>
   c5b1c:	ec41 0b10 	vmov	d0, r0, r1
   c5b20:	b003      	add	sp, #12
   c5b22:	ecbd 8b02 	vpop	{d8}
   c5b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b2a:	bf00      	nop

000c5b2c <__ieee754_expf>:
   c5b2c:	ee10 3a10 	vmov	r3, s0
   c5b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c5b34:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c5b38:	d855      	bhi.n	c5be6 <__ieee754_expf+0xba>
   c5b3a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   c5b3e:	f000 8096 	beq.w	c5c6e <__ieee754_expf+0x142>
   c5b42:	4863      	ldr	r0, [pc, #396]	; (c5cd0 <__ieee754_expf+0x1a4>)
   c5b44:	4283      	cmp	r3, r0
   c5b46:	dc51      	bgt.n	c5bec <__ieee754_expf+0xc0>
   c5b48:	2b00      	cmp	r3, #0
   c5b4a:	f2c0 8089 	blt.w	c5c60 <__ieee754_expf+0x134>
   c5b4e:	4b61      	ldr	r3, [pc, #388]	; (c5cd4 <__ieee754_expf+0x1a8>)
   c5b50:	429a      	cmp	r2, r3
   c5b52:	d950      	bls.n	c5bf6 <__ieee754_expf+0xca>
   c5b54:	4b60      	ldr	r3, [pc, #384]	; (c5cd8 <__ieee754_expf+0x1ac>)
   c5b56:	429a      	cmp	r2, r3
   c5b58:	f200 809c 	bhi.w	c5c94 <__ieee754_expf+0x168>
   c5b5c:	4b5f      	ldr	r3, [pc, #380]	; (c5cdc <__ieee754_expf+0x1b0>)
   c5b5e:	4a60      	ldr	r2, [pc, #384]	; (c5ce0 <__ieee754_expf+0x1b4>)
   c5b60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c5b64:	ed93 4a00 	vldr	s8, [r3]
   c5b68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   c5b6c:	f1c1 0301 	rsb	r3, r1, #1
   c5b70:	ee30 4a44 	vsub.f32	s8, s0, s8
   c5b74:	ed92 7a00 	vldr	s14, [r2]
   c5b78:	1a5b      	subs	r3, r3, r1
   c5b7a:	ee34 0a47 	vsub.f32	s0, s8, s14
   c5b7e:	eddf 7a59 	vldr	s15, [pc, #356]	; c5ce4 <__ieee754_expf+0x1b8>
   c5b82:	eddf 4a59 	vldr	s9, [pc, #356]	; c5ce8 <__ieee754_expf+0x1bc>
   c5b86:	ed9f 5a59 	vldr	s10, [pc, #356]	; c5cec <__ieee754_expf+0x1c0>
   c5b8a:	ed9f 6a59 	vldr	s12, [pc, #356]	; c5cf0 <__ieee754_expf+0x1c4>
   c5b8e:	eddf 5a59 	vldr	s11, [pc, #356]	; c5cf4 <__ieee754_expf+0x1c8>
   c5b92:	ee60 6a00 	vmul.f32	s13, s0, s0
   c5b96:	eee6 4aa7 	vfma.f32	s9, s13, s15
   c5b9a:	eea4 5aa6 	vfma.f32	s10, s9, s13
   c5b9e:	eea5 6a26 	vfma.f32	s12, s10, s13
   c5ba2:	eee6 5a26 	vfma.f32	s11, s12, s13
   c5ba6:	eeb0 6a40 	vmov.f32	s12, s0
   c5baa:	eea5 6ae6 	vfms.f32	s12, s11, s13
   c5bae:	2b00      	cmp	r3, #0
   c5bb0:	d047      	beq.n	c5c42 <__ieee754_expf+0x116>
   c5bb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   c5bb6:	ee60 5a06 	vmul.f32	s11, s0, s12
   c5bba:	ee36 6ac6 	vsub.f32	s12, s13, s12
   c5bbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c5bc2:	ee85 0a86 	vdiv.f32	s0, s11, s12
   c5bc6:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   c5bca:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5bce:	ee30 0a44 	vsub.f32	s0, s0, s8
   c5bd2:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c5bd6:	db51      	blt.n	c5c7c <__ieee754_expf+0x150>
   c5bd8:	ee10 2a10 	vmov	r2, s0
   c5bdc:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   c5be0:	ee00 3a10 	vmov	s0, r3
   c5be4:	4770      	bx	lr
   c5be6:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5bea:	4770      	bx	lr
   c5bec:	ed9f 0a42 	vldr	s0, [pc, #264]	; c5cf8 <__ieee754_expf+0x1cc>
   c5bf0:	ee20 0a00 	vmul.f32	s0, s0, s0
   c5bf4:	4770      	bx	lr
   c5bf6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   c5bfa:	d20a      	bcs.n	c5c12 <__ieee754_expf+0xe6>
   c5bfc:	eddf 7a3e 	vldr	s15, [pc, #248]	; c5cf8 <__ieee754_expf+0x1cc>
   c5c00:	ee70 7a27 	vadd.f32	s15, s0, s15
   c5c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c5c08:	eef4 7ac7 	vcmpe.f32	s15, s14
   c5c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5c10:	dc5a      	bgt.n	c5cc8 <__ieee754_expf+0x19c>
   c5c12:	ee60 7a00 	vmul.f32	s15, s0, s0
   c5c16:	ed9f 7a33 	vldr	s14, [pc, #204]	; c5ce4 <__ieee754_expf+0x1b8>
   c5c1a:	eddf 5a33 	vldr	s11, [pc, #204]	; c5ce8 <__ieee754_expf+0x1bc>
   c5c1e:	ed9f 6a33 	vldr	s12, [pc, #204]	; c5cec <__ieee754_expf+0x1c0>
   c5c22:	eddf 6a33 	vldr	s13, [pc, #204]	; c5cf0 <__ieee754_expf+0x1c4>
   c5c26:	eee7 5a87 	vfma.f32	s11, s15, s14
   c5c2a:	ed9f 7a32 	vldr	s14, [pc, #200]	; c5cf4 <__ieee754_expf+0x1c8>
   c5c2e:	eea7 6aa5 	vfma.f32	s12, s15, s11
   c5c32:	eee7 6a86 	vfma.f32	s13, s15, s12
   c5c36:	eeb0 6a40 	vmov.f32	s12, s0
   c5c3a:	eea7 7aa6 	vfma.f32	s14, s15, s13
   c5c3e:	eea7 6ac7 	vfms.f32	s12, s15, s14
   c5c42:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c5c46:	ee60 6a06 	vmul.f32	s13, s0, s12
   c5c4a:	ee36 6a67 	vsub.f32	s12, s12, s15
   c5c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c5c52:	eec6 7a86 	vdiv.f32	s15, s13, s12
   c5c56:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c5c5a:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5c5e:	4770      	bx	lr
   c5c60:	4b26      	ldr	r3, [pc, #152]	; (c5cfc <__ieee754_expf+0x1d0>)
   c5c62:	429a      	cmp	r2, r3
   c5c64:	f67f af73 	bls.w	c5b4e <__ieee754_expf+0x22>
   c5c68:	ed9f 0a25 	vldr	s0, [pc, #148]	; c5d00 <__ieee754_expf+0x1d4>
   c5c6c:	4770      	bx	lr
   c5c6e:	eddf 7a24 	vldr	s15, [pc, #144]	; c5d00 <__ieee754_expf+0x1d4>
   c5c72:	2900      	cmp	r1, #0
   c5c74:	bf18      	it	ne
   c5c76:	eeb0 0a67 	vmovne.f32	s0, s15
   c5c7a:	4770      	bx	lr
   c5c7c:	ee10 2a10 	vmov	r2, s0
   c5c80:	3364      	adds	r3, #100	; 0x64
   c5c82:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   c5c86:	eddf 7a1f 	vldr	s15, [pc, #124]	; c5d04 <__ieee754_expf+0x1d8>
   c5c8a:	ee00 3a10 	vmov	s0, r3
   c5c8e:	ee20 0a27 	vmul.f32	s0, s0, s15
   c5c92:	4770      	bx	lr
   c5c94:	4b1c      	ldr	r3, [pc, #112]	; (c5d08 <__ieee754_expf+0x1dc>)
   c5c96:	ed9f 7a1d 	vldr	s14, [pc, #116]	; c5d0c <__ieee754_expf+0x1e0>
   c5c9a:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c5d10 <__ieee754_expf+0x1e4>
   c5c9e:	eddf 6a1d 	vldr	s13, [pc, #116]	; c5d14 <__ieee754_expf+0x1e8>
   c5ca2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c5ca6:	edd3 7a00 	vldr	s15, [r3]
   c5caa:	eee0 7a07 	vfma.f32	s15, s0, s14
   c5cae:	eeb0 4a40 	vmov.f32	s8, s0
   c5cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c5cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   c5cba:	ee17 3a90 	vmov	r3, s15
   c5cbe:	eea7 4a46 	vfms.f32	s8, s14, s12
   c5cc2:	ee27 7a26 	vmul.f32	s14, s14, s13
   c5cc6:	e758      	b.n	c5b7a <__ieee754_expf+0x4e>
   c5cc8:	ee30 0a07 	vadd.f32	s0, s0, s14
   c5ccc:	4770      	bx	lr
   c5cce:	bf00      	nop
   c5cd0:	42b17217 	.word	0x42b17217
   c5cd4:	3eb17218 	.word	0x3eb17218
   c5cd8:	3f851591 	.word	0x3f851591
   c5cdc:	000c9888 	.word	0x000c9888
   c5ce0:	000c9890 	.word	0x000c9890
   c5ce4:	3331bb4c 	.word	0x3331bb4c
   c5ce8:	b5ddea0e 	.word	0xb5ddea0e
   c5cec:	388ab355 	.word	0x388ab355
   c5cf0:	bb360b61 	.word	0xbb360b61
   c5cf4:	3e2aaaab 	.word	0x3e2aaaab
   c5cf8:	7149f2ca 	.word	0x7149f2ca
   c5cfc:	42cff1b5 	.word	0x42cff1b5
   c5d00:	00000000 	.word	0x00000000
   c5d04:	0d800000 	.word	0x0d800000
   c5d08:	000c9880 	.word	0x000c9880
   c5d0c:	3fb8aa3b 	.word	0x3fb8aa3b
   c5d10:	3f317180 	.word	0x3f317180
   c5d14:	3717f7d1 	.word	0x3717f7d1

000c5d18 <__ieee754_logf>:
   c5d18:	ee10 3a10 	vmov	r3, s0
   c5d1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c5d20:	d02e      	beq.n	c5d80 <__ieee754_logf+0x68>
   c5d22:	2b00      	cmp	r3, #0
   c5d24:	db33      	blt.n	c5d8e <__ieee754_logf+0x76>
   c5d26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c5d2a:	da40      	bge.n	c5dae <__ieee754_logf+0x96>
   c5d2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   c5d30:	db34      	blt.n	c5d9c <__ieee754_logf+0x84>
   c5d32:	f04f 0c00 	mov.w	ip, #0
   c5d36:	4868      	ldr	r0, [pc, #416]	; (c5ed8 <__ieee754_logf+0x1c0>)
   c5d38:	f3c3 0116 	ubfx	r1, r3, #0, #23
   c5d3c:	4408      	add	r0, r1
   c5d3e:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   c5d42:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   c5d46:	430a      	orrs	r2, r1
   c5d48:	15db      	asrs	r3, r3, #23
   c5d4a:	ee00 2a10 	vmov	s0, r2
   c5d4e:	3b7f      	subs	r3, #127	; 0x7f
   c5d50:	4a62      	ldr	r2, [pc, #392]	; (c5edc <__ieee754_logf+0x1c4>)
   c5d52:	4463      	add	r3, ip
   c5d54:	f101 0c0f 	add.w	ip, r1, #15
   c5d58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c5d5c:	ea0c 0202 	and.w	r2, ip, r2
   c5d60:	ee30 0a67 	vsub.f32	s0, s0, s15
   c5d64:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   c5d68:	bb22      	cbnz	r2, c5db4 <__ieee754_logf+0x9c>
   c5d6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   c5d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5d72:	d160      	bne.n	c5e36 <__ieee754_logf+0x11e>
   c5d74:	2b00      	cmp	r3, #0
   c5d76:	f040 8092 	bne.w	c5e9e <__ieee754_logf+0x186>
   c5d7a:	ed9f 0a59 	vldr	s0, [pc, #356]	; c5ee0 <__ieee754_logf+0x1c8>
   c5d7e:	4770      	bx	lr
   c5d80:	ed9f 7a58 	vldr	s14, [pc, #352]	; c5ee4 <__ieee754_logf+0x1cc>
   c5d84:	eddf 7a56 	vldr	s15, [pc, #344]	; c5ee0 <__ieee754_logf+0x1c8>
   c5d88:	ee87 0a27 	vdiv.f32	s0, s14, s15
   c5d8c:	4770      	bx	lr
   c5d8e:	ee70 7a40 	vsub.f32	s15, s0, s0
   c5d92:	ed9f 7a53 	vldr	s14, [pc, #332]	; c5ee0 <__ieee754_logf+0x1c8>
   c5d96:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c5d9a:	4770      	bx	lr
   c5d9c:	eddf 7a52 	vldr	s15, [pc, #328]	; c5ee8 <__ieee754_logf+0x1d0>
   c5da0:	ee60 7a27 	vmul.f32	s15, s0, s15
   c5da4:	f06f 0c18 	mvn.w	ip, #24
   c5da8:	ee17 3a90 	vmov	r3, s15
   c5dac:	e7c3      	b.n	c5d36 <__ieee754_logf+0x1e>
   c5dae:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5db2:	4770      	bx	lr
   c5db4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c5db8:	ee70 7a27 	vadd.f32	s15, s0, s15
   c5dbc:	ee07 3a10 	vmov	s14, r3
   c5dc0:	ee80 4a27 	vdiv.f32	s8, s0, s15
   c5dc4:	4849      	ldr	r0, [pc, #292]	; (c5eec <__ieee754_logf+0x1d4>)
   c5dc6:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   c5dca:	4408      	add	r0, r1
   c5dcc:	f502 7222 	add.w	r2, r2, #648	; 0x288
   c5dd0:	4302      	orrs	r2, r0
   c5dd2:	2a00      	cmp	r2, #0
   c5dd4:	ed9f 3a46 	vldr	s6, [pc, #280]	; c5ef0 <__ieee754_logf+0x1d8>
   c5dd8:	eddf 4a46 	vldr	s9, [pc, #280]	; c5ef4 <__ieee754_logf+0x1dc>
   c5ddc:	eddf 5a46 	vldr	s11, [pc, #280]	; c5ef8 <__ieee754_logf+0x1e0>
   c5de0:	eddf 3a46 	vldr	s7, [pc, #280]	; c5efc <__ieee754_logf+0x1e4>
   c5de4:	ed9f 5a46 	vldr	s10, [pc, #280]	; c5f00 <__ieee754_logf+0x1e8>
   c5de8:	eddf 7a46 	vldr	s15, [pc, #280]	; c5f04 <__ieee754_logf+0x1ec>
   c5dec:	eddf 6a46 	vldr	s13, [pc, #280]	; c5f08 <__ieee754_logf+0x1f0>
   c5df0:	ee24 6a04 	vmul.f32	s12, s8, s8
   c5df4:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   c5df8:	ee26 7a06 	vmul.f32	s14, s12, s12
   c5dfc:	eee7 4a03 	vfma.f32	s9, s14, s6
   c5e00:	eea7 5a23 	vfma.f32	s10, s14, s7
   c5e04:	eee4 5a87 	vfma.f32	s11, s9, s14
   c5e08:	eee5 6a07 	vfma.f32	s13, s10, s14
   c5e0c:	eee5 7a87 	vfma.f32	s15, s11, s14
   c5e10:	ee67 7a86 	vmul.f32	s15, s15, s12
   c5e14:	eee6 7a87 	vfma.f32	s15, s13, s14
   c5e18:	dd2a      	ble.n	c5e70 <__ieee754_logf+0x158>
   c5e1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c5e1e:	ee20 7a07 	vmul.f32	s14, s0, s14
   c5e22:	ee27 7a00 	vmul.f32	s14, s14, s0
   c5e26:	bb4b      	cbnz	r3, c5e7c <__ieee754_logf+0x164>
   c5e28:	ee77 7a87 	vadd.f32	s15, s15, s14
   c5e2c:	eea7 7ac4 	vfms.f32	s14, s15, s8
   c5e30:	ee30 0a47 	vsub.f32	s0, s0, s14
   c5e34:	4770      	bx	lr
   c5e36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c5e3a:	eddf 6a34 	vldr	s13, [pc, #208]	; c5f0c <__ieee754_logf+0x1f4>
   c5e3e:	eef0 7a47 	vmov.f32	s15, s14
   c5e42:	eee0 7a66 	vfms.f32	s15, s0, s13
   c5e46:	ee20 7a00 	vmul.f32	s14, s0, s0
   c5e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
   c5e4e:	2b00      	cmp	r3, #0
   c5e50:	d0ee      	beq.n	c5e30 <__ieee754_logf+0x118>
   c5e52:	ee07 3a90 	vmov	s15, r3
   c5e56:	ed9f 6a2e 	vldr	s12, [pc, #184]	; c5f10 <__ieee754_logf+0x1f8>
   c5e5a:	eddf 6a2e 	vldr	s13, [pc, #184]	; c5f14 <__ieee754_logf+0x1fc>
   c5e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5e62:	eea7 7ac6 	vfms.f32	s14, s15, s12
   c5e66:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5e6a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   c5e6e:	4770      	bx	lr
   c5e70:	bb13      	cbnz	r3, c5eb8 <__ieee754_logf+0x1a0>
   c5e72:	ee70 7a67 	vsub.f32	s15, s0, s15
   c5e76:	eea7 0ac4 	vfms.f32	s0, s15, s8
   c5e7a:	4770      	bx	lr
   c5e7c:	eddf 6a24 	vldr	s13, [pc, #144]	; c5f10 <__ieee754_logf+0x1f8>
   c5e80:	ed9f 6a24 	vldr	s12, [pc, #144]	; c5f14 <__ieee754_logf+0x1fc>
   c5e84:	ee77 7a87 	vadd.f32	s15, s15, s14
   c5e88:	ee62 6aa6 	vmul.f32	s13, s5, s13
   c5e8c:	eee7 6a84 	vfma.f32	s13, s15, s8
   c5e90:	ee37 7a66 	vsub.f32	s14, s14, s13
   c5e94:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5e98:	ee92 0a86 	vfnms.f32	s0, s5, s12
   c5e9c:	4770      	bx	lr
   c5e9e:	ee07 3a90 	vmov	s15, r3
   c5ea2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; c5f10 <__ieee754_logf+0x1f8>
   c5ea6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; c5f14 <__ieee754_logf+0x1fc>
   c5eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5eae:	ee27 0a80 	vmul.f32	s0, s15, s0
   c5eb2:	eea7 0a87 	vfma.f32	s0, s15, s14
   c5eb6:	4770      	bx	lr
   c5eb8:	ed9f 7a15 	vldr	s14, [pc, #84]	; c5f10 <__ieee754_logf+0x1f8>
   c5ebc:	eddf 6a15 	vldr	s13, [pc, #84]	; c5f14 <__ieee754_logf+0x1fc>
   c5ec0:	ee70 7a67 	vsub.f32	s15, s0, s15
   c5ec4:	ee27 7a62 	vnmul.f32	s14, s14, s5
   c5ec8:	eea7 7a84 	vfma.f32	s14, s15, s8
   c5ecc:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5ed0:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   c5ed4:	4770      	bx	lr
   c5ed6:	bf00      	nop
   c5ed8:	004afb20 	.word	0x004afb20
   c5edc:	007ffff0 	.word	0x007ffff0
   c5ee0:	00000000 	.word	0x00000000
   c5ee4:	cc000000 	.word	0xcc000000
   c5ee8:	4c000000 	.word	0x4c000000
   c5eec:	ffcf5c30 	.word	0xffcf5c30
   c5ef0:	3e178897 	.word	0x3e178897
   c5ef4:	3e3a3325 	.word	0x3e3a3325
   c5ef8:	3e924925 	.word	0x3e924925
   c5efc:	3e1cd04f 	.word	0x3e1cd04f
   c5f00:	3e638e29 	.word	0x3e638e29
   c5f04:	3f2aaaab 	.word	0x3f2aaaab
   c5f08:	3ecccccd 	.word	0x3ecccccd
   c5f0c:	3eaaaaab 	.word	0x3eaaaaab
   c5f10:	3717f7d1 	.word	0x3717f7d1
   c5f14:	3f317180 	.word	0x3f317180

000c5f18 <__ieee754_rem_pio2f>:
   c5f18:	b570      	push	{r4, r5, r6, lr}
   c5f1a:	ee10 3a10 	vmov	r3, s0
   c5f1e:	4a89      	ldr	r2, [pc, #548]	; (c6144 <__ieee754_rem_pio2f+0x22c>)
   c5f20:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c5f24:	4294      	cmp	r4, r2
   c5f26:	b086      	sub	sp, #24
   c5f28:	4605      	mov	r5, r0
   c5f2a:	dd70      	ble.n	c600e <__ieee754_rem_pio2f+0xf6>
   c5f2c:	4a86      	ldr	r2, [pc, #536]	; (c6148 <__ieee754_rem_pio2f+0x230>)
   c5f2e:	4294      	cmp	r4, r2
   c5f30:	ee10 6a10 	vmov	r6, s0
   c5f34:	dc22      	bgt.n	c5f7c <__ieee754_rem_pio2f+0x64>
   c5f36:	2b00      	cmp	r3, #0
   c5f38:	eddf 7a84 	vldr	s15, [pc, #528]	; c614c <__ieee754_rem_pio2f+0x234>
   c5f3c:	4a84      	ldr	r2, [pc, #528]	; (c6150 <__ieee754_rem_pio2f+0x238>)
   c5f3e:	f024 040f 	bic.w	r4, r4, #15
   c5f42:	eeb0 7a40 	vmov.f32	s14, s0
   c5f46:	f340 80e4 	ble.w	c6112 <__ieee754_rem_pio2f+0x1fa>
   c5f4a:	4294      	cmp	r4, r2
   c5f4c:	ee70 7a67 	vsub.f32	s15, s0, s15
   c5f50:	bf09      	itett	eq
   c5f52:	eddf 6a80 	vldreq	s13, [pc, #512]	; c6154 <__ieee754_rem_pio2f+0x23c>
   c5f56:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c6158 <__ieee754_rem_pio2f+0x240>
   c5f5a:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c615c <__ieee754_rem_pio2f+0x244>
   c5f5e:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c5f62:	2001      	movs	r0, #1
   c5f64:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c5f68:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c5f6c:	edc5 6a00 	vstr	s13, [r5]
   c5f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c5f74:	edc5 7a01 	vstr	s15, [r5, #4]
   c5f78:	b006      	add	sp, #24
   c5f7a:	bd70      	pop	{r4, r5, r6, pc}
   c5f7c:	4a78      	ldr	r2, [pc, #480]	; (c6160 <__ieee754_rem_pio2f+0x248>)
   c5f7e:	4294      	cmp	r4, r2
   c5f80:	dd54      	ble.n	c602c <__ieee754_rem_pio2f+0x114>
   c5f82:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c5f86:	da49      	bge.n	c601c <__ieee754_rem_pio2f+0x104>
   c5f88:	15e2      	asrs	r2, r4, #23
   c5f8a:	3a86      	subs	r2, #134	; 0x86
   c5f8c:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c5f90:	ee07 3a90 	vmov	s15, r3
   c5f94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c5f98:	eddf 6a72 	vldr	s13, [pc, #456]	; c6164 <__ieee754_rem_pio2f+0x24c>
   c5f9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c5fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c5fa4:	ed8d 7a03 	vstr	s14, [sp, #12]
   c5fa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c5fac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c5fb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c5fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c5fb8:	ed8d 7a04 	vstr	s14, [sp, #16]
   c5fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c5fc0:	eef5 7a40 	vcmp.f32	s15, #0.0
   c5fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5fc8:	edcd 7a05 	vstr	s15, [sp, #20]
   c5fcc:	f040 8090 	bne.w	c60f0 <__ieee754_rem_pio2f+0x1d8>
   c5fd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c5fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5fd8:	bf14      	ite	ne
   c5fda:	2302      	movne	r3, #2
   c5fdc:	2301      	moveq	r3, #1
   c5fde:	4962      	ldr	r1, [pc, #392]	; (c6168 <__ieee754_rem_pio2f+0x250>)
   c5fe0:	9101      	str	r1, [sp, #4]
   c5fe2:	2102      	movs	r1, #2
   c5fe4:	9100      	str	r1, [sp, #0]
   c5fe6:	a803      	add	r0, sp, #12
   c5fe8:	4629      	mov	r1, r5
   c5fea:	f000 f94d 	bl	c6288 <__kernel_rem_pio2f>
   c5fee:	2e00      	cmp	r6, #0
   c5ff0:	dac2      	bge.n	c5f78 <__ieee754_rem_pio2f+0x60>
   c5ff2:	ed95 7a00 	vldr	s14, [r5]
   c5ff6:	edd5 7a01 	vldr	s15, [r5, #4]
   c5ffa:	eeb1 7a47 	vneg.f32	s14, s14
   c5ffe:	eef1 7a67 	vneg.f32	s15, s15
   c6002:	ed85 7a00 	vstr	s14, [r5]
   c6006:	edc5 7a01 	vstr	s15, [r5, #4]
   c600a:	4240      	negs	r0, r0
   c600c:	e7b4      	b.n	c5f78 <__ieee754_rem_pio2f+0x60>
   c600e:	2200      	movs	r2, #0
   c6010:	ed85 0a00 	vstr	s0, [r5]
   c6014:	6042      	str	r2, [r0, #4]
   c6016:	2000      	movs	r0, #0
   c6018:	b006      	add	sp, #24
   c601a:	bd70      	pop	{r4, r5, r6, pc}
   c601c:	ee70 7a40 	vsub.f32	s15, s0, s0
   c6020:	2000      	movs	r0, #0
   c6022:	edc5 7a01 	vstr	s15, [r5, #4]
   c6026:	edc5 7a00 	vstr	s15, [r5]
   c602a:	e7a5      	b.n	c5f78 <__ieee754_rem_pio2f+0x60>
   c602c:	f000 fcba 	bl	c69a4 <fabsf>
   c6030:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c616c <__ieee754_rem_pio2f+0x254>
   c6034:	ed9f 6a45 	vldr	s12, [pc, #276]	; c614c <__ieee754_rem_pio2f+0x234>
   c6038:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c603c:	eee0 7a07 	vfma.f32	s15, s0, s14
   c6040:	ed9f 7a45 	vldr	s14, [pc, #276]	; c6158 <__ieee754_rem_pio2f+0x240>
   c6044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c6048:	ee17 0a90 	vmov	r0, s15
   c604c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c6050:	281f      	cmp	r0, #31
   c6052:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c6056:	ee66 7a87 	vmul.f32	s15, s13, s14
   c605a:	eeb1 6a66 	vneg.f32	s12, s13
   c605e:	dc1e      	bgt.n	c609e <__ieee754_rem_pio2f+0x186>
   c6060:	4a43      	ldr	r2, [pc, #268]	; (c6170 <__ieee754_rem_pio2f+0x258>)
   c6062:	1e41      	subs	r1, r0, #1
   c6064:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c6068:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c606c:	4293      	cmp	r3, r2
   c606e:	d016      	beq.n	c609e <__ieee754_rem_pio2f+0x186>
   c6070:	ee30 7a67 	vsub.f32	s14, s0, s15
   c6074:	ed85 7a00 	vstr	s14, [r5]
   c6078:	ee30 0a47 	vsub.f32	s0, s0, s14
   c607c:	2e00      	cmp	r6, #0
   c607e:	ee30 0a67 	vsub.f32	s0, s0, s15
   c6082:	ed85 0a01 	vstr	s0, [r5, #4]
   c6086:	f6bf af77 	bge.w	c5f78 <__ieee754_rem_pio2f+0x60>
   c608a:	eeb1 7a47 	vneg.f32	s14, s14
   c608e:	eeb1 0a40 	vneg.f32	s0, s0
   c6092:	ed85 7a00 	vstr	s14, [r5]
   c6096:	ed85 0a01 	vstr	s0, [r5, #4]
   c609a:	4240      	negs	r0, r0
   c609c:	e76c      	b.n	c5f78 <__ieee754_rem_pio2f+0x60>
   c609e:	ee30 7a67 	vsub.f32	s14, s0, s15
   c60a2:	15e2      	asrs	r2, r4, #23
   c60a4:	ee17 3a10 	vmov	r3, s14
   c60a8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c60ac:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c60b0:	2c08      	cmp	r4, #8
   c60b2:	dddf      	ble.n	c6074 <__ieee754_rem_pio2f+0x15c>
   c60b4:	eddf 7a27 	vldr	s15, [pc, #156]	; c6154 <__ieee754_rem_pio2f+0x23c>
   c60b8:	ed9f 7a28 	vldr	s14, [pc, #160]	; c615c <__ieee754_rem_pio2f+0x244>
   c60bc:	eef0 5a40 	vmov.f32	s11, s0
   c60c0:	eee6 5a27 	vfma.f32	s11, s12, s15
   c60c4:	ee30 0a65 	vsub.f32	s0, s0, s11
   c60c8:	eea6 0a27 	vfma.f32	s0, s12, s15
   c60cc:	eef0 7a40 	vmov.f32	s15, s0
   c60d0:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c60d4:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c60d8:	ee17 3a10 	vmov	r3, s14
   c60dc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c60e0:	1ad2      	subs	r2, r2, r3
   c60e2:	2a19      	cmp	r2, #25
   c60e4:	dc06      	bgt.n	c60f4 <__ieee754_rem_pio2f+0x1dc>
   c60e6:	eeb0 0a65 	vmov.f32	s0, s11
   c60ea:	ed85 7a00 	vstr	s14, [r5]
   c60ee:	e7c3      	b.n	c6078 <__ieee754_rem_pio2f+0x160>
   c60f0:	2303      	movs	r3, #3
   c60f2:	e774      	b.n	c5fde <__ieee754_rem_pio2f+0xc6>
   c60f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c6174 <__ieee754_rem_pio2f+0x25c>
   c60f8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c6178 <__ieee754_rem_pio2f+0x260>
   c60fc:	eeb0 0a65 	vmov.f32	s0, s11
   c6100:	eea6 0a07 	vfma.f32	s0, s12, s14
   c6104:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c6108:	eee6 7a07 	vfma.f32	s15, s12, s14
   c610c:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c6110:	e7ae      	b.n	c6070 <__ieee754_rem_pio2f+0x158>
   c6112:	4294      	cmp	r4, r2
   c6114:	ee70 7a27 	vadd.f32	s15, s0, s15
   c6118:	bf09      	itett	eq
   c611a:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c6154 <__ieee754_rem_pio2f+0x23c>
   c611e:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c6158 <__ieee754_rem_pio2f+0x240>
   c6122:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c615c <__ieee754_rem_pio2f+0x244>
   c6126:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c612a:	f04f 30ff 	mov.w	r0, #4294967295
   c612e:	ee77 6a87 	vadd.f32	s13, s15, s14
   c6132:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c6136:	edc5 6a00 	vstr	s13, [r5]
   c613a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c613e:	edc5 7a01 	vstr	s15, [r5, #4]
   c6142:	e719      	b.n	c5f78 <__ieee754_rem_pio2f+0x60>
   c6144:	3f490fd8 	.word	0x3f490fd8
   c6148:	4016cbe3 	.word	0x4016cbe3
   c614c:	3fc90f80 	.word	0x3fc90f80
   c6150:	3fc90fd0 	.word	0x3fc90fd0
   c6154:	37354400 	.word	0x37354400
   c6158:	37354443 	.word	0x37354443
   c615c:	2e85a308 	.word	0x2e85a308
   c6160:	43490f80 	.word	0x43490f80
   c6164:	43800000 	.word	0x43800000
   c6168:	000c9918 	.word	0x000c9918
   c616c:	3f22f984 	.word	0x3f22f984
   c6170:	000c9898 	.word	0x000c9898
   c6174:	2e85a300 	.word	0x2e85a300
   c6178:	248d3132 	.word	0x248d3132

000c617c <__ieee754_sqrtf>:
   c617c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c6180:	4770      	bx	lr
   c6182:	bf00      	nop

000c6184 <__kernel_cosf>:
   c6184:	ee10 3a10 	vmov	r3, s0
   c6188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c618c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c6190:	da2c      	bge.n	c61ec <__kernel_cosf+0x68>
   c6192:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c6196:	ee17 3a90 	vmov	r3, s15
   c619a:	2b00      	cmp	r3, #0
   c619c:	d060      	beq.n	c6260 <__kernel_cosf+0xdc>
   c619e:	ee20 7a00 	vmul.f32	s14, s0, s0
   c61a2:	eddf 7a31 	vldr	s15, [pc, #196]	; c6268 <__kernel_cosf+0xe4>
   c61a6:	ed9f 5a31 	vldr	s10, [pc, #196]	; c626c <__kernel_cosf+0xe8>
   c61aa:	eddf 5a31 	vldr	s11, [pc, #196]	; c6270 <__kernel_cosf+0xec>
   c61ae:	ed9f 6a31 	vldr	s12, [pc, #196]	; c6274 <__kernel_cosf+0xf0>
   c61b2:	eddf 6a31 	vldr	s13, [pc, #196]	; c6278 <__kernel_cosf+0xf4>
   c61b6:	eea7 5a27 	vfma.f32	s10, s14, s15
   c61ba:	eddf 7a30 	vldr	s15, [pc, #192]	; c627c <__kernel_cosf+0xf8>
   c61be:	eee7 5a05 	vfma.f32	s11, s14, s10
   c61c2:	eea7 6a25 	vfma.f32	s12, s14, s11
   c61c6:	eee7 7a06 	vfma.f32	s15, s14, s12
   c61ca:	eee7 6a27 	vfma.f32	s13, s14, s15
   c61ce:	ee67 6a26 	vmul.f32	s13, s14, s13
   c61d2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c61d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c61da:	eee7 0a26 	vfma.f32	s1, s14, s13
   c61de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c61e2:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c61e6:	ee30 0a60 	vsub.f32	s0, s0, s1
   c61ea:	4770      	bx	lr
   c61ec:	ee20 7a00 	vmul.f32	s14, s0, s0
   c61f0:	eddf 7a1d 	vldr	s15, [pc, #116]	; c6268 <__kernel_cosf+0xe4>
   c61f4:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c626c <__kernel_cosf+0xe8>
   c61f8:	eddf 5a1d 	vldr	s11, [pc, #116]	; c6270 <__kernel_cosf+0xec>
   c61fc:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c6274 <__kernel_cosf+0xf0>
   c6200:	eddf 6a1d 	vldr	s13, [pc, #116]	; c6278 <__kernel_cosf+0xf4>
   c6204:	4a1e      	ldr	r2, [pc, #120]	; (c6280 <__kernel_cosf+0xfc>)
   c6206:	eea7 5a27 	vfma.f32	s10, s14, s15
   c620a:	4293      	cmp	r3, r2
   c620c:	eddf 7a1b 	vldr	s15, [pc, #108]	; c627c <__kernel_cosf+0xf8>
   c6210:	eee5 5a07 	vfma.f32	s11, s10, s14
   c6214:	eea5 6a87 	vfma.f32	s12, s11, s14
   c6218:	eee6 7a07 	vfma.f32	s15, s12, s14
   c621c:	eee7 6a87 	vfma.f32	s13, s15, s14
   c6220:	ee66 6a87 	vmul.f32	s13, s13, s14
   c6224:	ddd5      	ble.n	c61d2 <__kernel_cosf+0x4e>
   c6226:	4a17      	ldr	r2, [pc, #92]	; (c6284 <__kernel_cosf+0x100>)
   c6228:	4293      	cmp	r3, r2
   c622a:	dc14      	bgt.n	c6256 <__kernel_cosf+0xd2>
   c622c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c6230:	ee07 3a90 	vmov	s15, r3
   c6234:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c6238:	ee36 6a67 	vsub.f32	s12, s12, s15
   c623c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c6240:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c6244:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c6248:	eee7 0a26 	vfma.f32	s1, s14, s13
   c624c:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c6250:	ee36 0a60 	vsub.f32	s0, s12, s1
   c6254:	4770      	bx	lr
   c6256:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c625a:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c625e:	e7ed      	b.n	c623c <__kernel_cosf+0xb8>
   c6260:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6264:	4770      	bx	lr
   c6266:	bf00      	nop
   c6268:	ad47d74e 	.word	0xad47d74e
   c626c:	310f74f6 	.word	0x310f74f6
   c6270:	b493f27c 	.word	0xb493f27c
   c6274:	37d00d01 	.word	0x37d00d01
   c6278:	3d2aaaab 	.word	0x3d2aaaab
   c627c:	bab60b61 	.word	0xbab60b61
   c6280:	3e999999 	.word	0x3e999999
   c6284:	3f480000 	.word	0x3f480000

000c6288 <__kernel_rem_pio2f>:
   c6288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c628c:	ed2d 8b04 	vpush	{d8-d9}
   c6290:	b0db      	sub	sp, #364	; 0x16c
   c6292:	461c      	mov	r4, r3
   c6294:	9303      	str	r3, [sp, #12]
   c6296:	9106      	str	r1, [sp, #24]
   c6298:	4ba3      	ldr	r3, [pc, #652]	; (c6528 <__kernel_rem_pio2f+0x2a0>)
   c629a:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c629c:	9208      	str	r2, [sp, #32]
   c629e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c62a2:	1d11      	adds	r1, r2, #4
   c62a4:	4682      	mov	sl, r0
   c62a6:	f104 38ff 	add.w	r8, r4, #4294967295
   c62aa:	f2c0 82a2 	blt.w	c67f2 <__kernel_rem_pio2f+0x56a>
   c62ae:	1ed3      	subs	r3, r2, #3
   c62b0:	bf44      	itt	mi
   c62b2:	4613      	movmi	r3, r2
   c62b4:	3304      	addmi	r3, #4
   c62b6:	10db      	asrs	r3, r3, #3
   c62b8:	9302      	str	r3, [sp, #8]
   c62ba:	3301      	adds	r3, #1
   c62bc:	00db      	lsls	r3, r3, #3
   c62be:	9307      	str	r3, [sp, #28]
   c62c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c62c4:	1a9b      	subs	r3, r3, r2
   c62c6:	9305      	str	r3, [sp, #20]
   c62c8:	9b02      	ldr	r3, [sp, #8]
   c62ca:	eb15 0108 	adds.w	r1, r5, r8
   c62ce:	eba3 0308 	sub.w	r3, r3, r8
   c62d2:	d416      	bmi.n	c6302 <__kernel_rem_pio2f+0x7a>
   c62d4:	3101      	adds	r1, #1
   c62d6:	ed9f 7a95 	vldr	s14, [pc, #596]	; c652c <__kernel_rem_pio2f+0x2a4>
   c62da:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c62dc:	4419      	add	r1, r3
   c62de:	aa1e      	add	r2, sp, #120	; 0x78
   c62e0:	2b00      	cmp	r3, #0
   c62e2:	bfa4      	itt	ge
   c62e4:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c62e8:	ee07 4a90 	vmovge	s15, r4
   c62ec:	f103 0301 	add.w	r3, r3, #1
   c62f0:	bfac      	ite	ge
   c62f2:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c62f6:	eef0 7a47 	vmovlt.f32	s15, s14
   c62fa:	428b      	cmp	r3, r1
   c62fc:	ece2 7a01 	vstmia	r2!, {s15}
   c6300:	d1ee      	bne.n	c62e0 <__kernel_rem_pio2f+0x58>
   c6302:	2d00      	cmp	r5, #0
   c6304:	f2c0 82e5 	blt.w	c68d2 <__kernel_rem_pio2f+0x64a>
   c6308:	9b03      	ldr	r3, [sp, #12]
   c630a:	a91e      	add	r1, sp, #120	; 0x78
   c630c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c6310:	ae46      	add	r6, sp, #280	; 0x118
   c6312:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c6316:	4640      	mov	r0, r8
   c6318:	18ef      	adds	r7, r5, r3
   c631a:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c631e:	f1b8 0f00 	cmp.w	r8, #0
   c6322:	eddf 7a82 	vldr	s15, [pc, #520]	; c652c <__kernel_rem_pio2f+0x2a4>
   c6326:	db09      	blt.n	c633c <__kernel_rem_pio2f+0xb4>
   c6328:	4622      	mov	r2, r4
   c632a:	4653      	mov	r3, sl
   c632c:	ecf3 6a01 	vldmia	r3!, {s13}
   c6330:	ed32 7a01 	vldmdb	r2!, {s14}
   c6334:	428b      	cmp	r3, r1
   c6336:	eee6 7a87 	vfma.f32	s15, s13, s14
   c633a:	d1f7      	bne.n	c632c <__kernel_rem_pio2f+0xa4>
   c633c:	3001      	adds	r0, #1
   c633e:	42b8      	cmp	r0, r7
   c6340:	ece6 7a01 	vstmia	r6!, {s15}
   c6344:	f104 0404 	add.w	r4, r4, #4
   c6348:	d1e9      	bne.n	c631e <__kernel_rem_pio2f+0x96>
   c634a:	ab09      	add	r3, sp, #36	; 0x24
   c634c:	af0a      	add	r7, sp, #40	; 0x28
   c634e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c6352:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c6356:	3b08      	subs	r3, #8
   c6358:	ed9f 9a76 	vldr	s18, [pc, #472]	; c6534 <__kernel_rem_pio2f+0x2ac>
   c635c:	eddf 8a74 	vldr	s17, [pc, #464]	; c6530 <__kernel_rem_pio2f+0x2a8>
   c6360:	9805      	ldr	r0, [sp, #20]
   c6362:	9304      	str	r3, [sp, #16]
   c6364:	eb0a 040c 	add.w	r4, sl, ip
   c6368:	ae46      	add	r6, sp, #280	; 0x118
   c636a:	9500      	str	r5, [sp, #0]
   c636c:	ab5a      	add	r3, sp, #360	; 0x168
   c636e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c6372:	2d00      	cmp	r5, #0
   c6374:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c6378:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c637c:	dd16      	ble.n	c63ac <__kernel_rem_pio2f+0x124>
   c637e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c6382:	463a      	mov	r2, r7
   c6384:	ee60 7a09 	vmul.f32	s15, s0, s18
   c6388:	eeb0 7a40 	vmov.f32	s14, s0
   c638c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c6390:	ed73 6a01 	vldmdb	r3!, {s13}
   c6394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c6398:	42b3      	cmp	r3, r6
   c639a:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c639e:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c63a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c63a6:	eca2 7a01 	vstmia	r2!, {s14}
   c63aa:	d1eb      	bne.n	c6384 <__kernel_rem_pio2f+0xfc>
   c63ac:	9001      	str	r0, [sp, #4]
   c63ae:	f000 fb15 	bl	c69dc <scalbnf>
   c63b2:	eeb0 8a40 	vmov.f32	s16, s0
   c63b6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c63ba:	ee28 0a00 	vmul.f32	s0, s16, s0
   c63be:	f7fe ffdf 	bl	c5380 <floorf>
   c63c2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c63c6:	eea0 8a67 	vfms.f32	s16, s0, s15
   c63ca:	9801      	ldr	r0, [sp, #4]
   c63cc:	2800      	cmp	r0, #0
   c63ce:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c63d2:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c63d6:	ee38 8a67 	vsub.f32	s16, s16, s15
   c63da:	dd79      	ble.n	c64d0 <__kernel_rem_pio2f+0x248>
   c63dc:	f105 3eff 	add.w	lr, r5, #4294967295
   c63e0:	f1c0 0308 	rsb	r3, r0, #8
   c63e4:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c63e8:	fa41 fc03 	asr.w	ip, r1, r3
   c63ec:	fa0c f303 	lsl.w	r3, ip, r3
   c63f0:	1acb      	subs	r3, r1, r3
   c63f2:	f1c0 0207 	rsb	r2, r0, #7
   c63f6:	ee19 1a90 	vmov	r1, s19
   c63fa:	fa43 f202 	asr.w	r2, r3, r2
   c63fe:	4461      	add	r1, ip
   c6400:	2a00      	cmp	r2, #0
   c6402:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c6406:	ee09 1a90 	vmov	s19, r1
   c640a:	dc69      	bgt.n	c64e0 <__kernel_rem_pio2f+0x258>
   c640c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c6410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c6414:	f040 80c1 	bne.w	c659a <__kernel_rem_pio2f+0x312>
   c6418:	9b00      	ldr	r3, [sp, #0]
   c641a:	f105 3bff 	add.w	fp, r5, #4294967295
   c641e:	455b      	cmp	r3, fp
   c6420:	dc10      	bgt.n	c6444 <__kernel_rem_pio2f+0x1bc>
   c6422:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c6426:	3b01      	subs	r3, #1
   c6428:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c642c:	2100      	movs	r1, #0
   c642e:	4694      	mov	ip, r2
   c6430:	f853 2904 	ldr.w	r2, [r3], #-4
   c6434:	454b      	cmp	r3, r9
   c6436:	ea41 0102 	orr.w	r1, r1, r2
   c643a:	d1f9      	bne.n	c6430 <__kernel_rem_pio2f+0x1a8>
   c643c:	4662      	mov	r2, ip
   c643e:	2900      	cmp	r1, #0
   c6440:	f040 80f3 	bne.w	c662a <__kernel_rem_pio2f+0x3a2>
   c6444:	9b00      	ldr	r3, [sp, #0]
   c6446:	3b01      	subs	r3, #1
   c6448:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c644c:	2b00      	cmp	r3, #0
   c644e:	f040 80e8 	bne.w	c6622 <__kernel_rem_pio2f+0x39a>
   c6452:	9b04      	ldr	r3, [sp, #16]
   c6454:	f04f 0c01 	mov.w	ip, #1
   c6458:	f853 2904 	ldr.w	r2, [r3], #-4
   c645c:	f10c 0c01 	add.w	ip, ip, #1
   c6460:	2a00      	cmp	r2, #0
   c6462:	d0f9      	beq.n	c6458 <__kernel_rem_pio2f+0x1d0>
   c6464:	1c6b      	adds	r3, r5, #1
   c6466:	44ac      	add	ip, r5
   c6468:	469e      	mov	lr, r3
   c646a:	9a03      	ldr	r2, [sp, #12]
   c646c:	1951      	adds	r1, r2, r5
   c646e:	9a02      	ldr	r2, [sp, #8]
   c6470:	eb02 0b03 	add.w	fp, r2, r3
   c6474:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c6478:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c647a:	f10b 3bff 	add.w	fp, fp, #4294967295
   c647e:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c6482:	ab1e      	add	r3, sp, #120	; 0x78
   c6484:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c6488:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c648c:	eddb 7a01 	vldr	s15, [fp, #4]
   c6490:	ed9f 7a26 	vldr	s14, [pc, #152]	; c652c <__kernel_rem_pio2f+0x2a4>
   c6494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c6498:	f1b8 0f00 	cmp.w	r8, #0
   c649c:	f10b 0b04 	add.w	fp, fp, #4
   c64a0:	edc1 7a00 	vstr	s15, [r1]
   c64a4:	460a      	mov	r2, r1
   c64a6:	f101 0104 	add.w	r1, r1, #4
   c64aa:	db09      	blt.n	c64c0 <__kernel_rem_pio2f+0x238>
   c64ac:	4653      	mov	r3, sl
   c64ae:	e001      	b.n	c64b4 <__kernel_rem_pio2f+0x22c>
   c64b0:	ed72 7a01 	vldmdb	r2!, {s15}
   c64b4:	ecf3 6a01 	vldmia	r3!, {s13}
   c64b8:	42a3      	cmp	r3, r4
   c64ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c64be:	d1f7      	bne.n	c64b0 <__kernel_rem_pio2f+0x228>
   c64c0:	f10e 0e01 	add.w	lr, lr, #1
   c64c4:	45e6      	cmp	lr, ip
   c64c6:	eca5 7a01 	vstmia	r5!, {s14}
   c64ca:	dddf      	ble.n	c648c <__kernel_rem_pio2f+0x204>
   c64cc:	4665      	mov	r5, ip
   c64ce:	e74d      	b.n	c636c <__kernel_rem_pio2f+0xe4>
   c64d0:	f040 809d 	bne.w	c660e <__kernel_rem_pio2f+0x386>
   c64d4:	1e6b      	subs	r3, r5, #1
   c64d6:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c64da:	1212      	asrs	r2, r2, #8
   c64dc:	2a00      	cmp	r2, #0
   c64de:	dd95      	ble.n	c640c <__kernel_rem_pio2f+0x184>
   c64e0:	ee19 3a90 	vmov	r3, s19
   c64e4:	2d00      	cmp	r5, #0
   c64e6:	f103 0301 	add.w	r3, r3, #1
   c64ea:	ee09 3a90 	vmov	s19, r3
   c64ee:	f340 8196 	ble.w	c681e <__kernel_rem_pio2f+0x596>
   c64f2:	6839      	ldr	r1, [r7, #0]
   c64f4:	2900      	cmp	r1, #0
   c64f6:	f040 8080 	bne.w	c65fa <__kernel_rem_pio2f+0x372>
   c64fa:	2d01      	cmp	r5, #1
   c64fc:	d026      	beq.n	c654c <__kernel_rem_pio2f+0x2c4>
   c64fe:	463b      	mov	r3, r7
   c6500:	f04f 0c01 	mov.w	ip, #1
   c6504:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c6508:	2900      	cmp	r1, #0
   c650a:	d07a      	beq.n	c6602 <__kernel_rem_pio2f+0x37a>
   c650c:	f10c 0301 	add.w	r3, ip, #1
   c6510:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c6514:	429d      	cmp	r5, r3
   c6516:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c651a:	dd16      	ble.n	c654a <__kernel_rem_pio2f+0x2c2>
   c651c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c6520:	44bb      	add	fp, r7
   c6522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c6526:	e00a      	b.n	c653e <__kernel_rem_pio2f+0x2b6>
   c6528:	000c9c5c 	.word	0x000c9c5c
   c652c:	00000000 	.word	0x00000000
   c6530:	43800000 	.word	0x43800000
   c6534:	3b800000 	.word	0x3b800000
   c6538:	3fc90000 	.word	0x3fc90000
   c653c:	6819      	ldr	r1, [r3, #0]
   c653e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c6542:	f843 1b04 	str.w	r1, [r3], #4
   c6546:	455b      	cmp	r3, fp
   c6548:	d1f8      	bne.n	c653c <__kernel_rem_pio2f+0x2b4>
   c654a:	2101      	movs	r1, #1
   c654c:	2800      	cmp	r0, #0
   c654e:	dd0c      	ble.n	c656a <__kernel_rem_pio2f+0x2e2>
   c6550:	2801      	cmp	r0, #1
   c6552:	f000 8145 	beq.w	c67e0 <__kernel_rem_pio2f+0x558>
   c6556:	2802      	cmp	r0, #2
   c6558:	d107      	bne.n	c656a <__kernel_rem_pio2f+0x2e2>
   c655a:	f105 3cff 	add.w	ip, r5, #4294967295
   c655e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c6562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c6566:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c656a:	2a02      	cmp	r2, #2
   c656c:	f47f af4e 	bne.w	c640c <__kernel_rem_pio2f+0x184>
   c6570:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6574:	ee30 8a48 	vsub.f32	s16, s0, s16
   c6578:	2900      	cmp	r1, #0
   c657a:	f43f af47 	beq.w	c640c <__kernel_rem_pio2f+0x184>
   c657e:	9209      	str	r2, [sp, #36]	; 0x24
   c6580:	9001      	str	r0, [sp, #4]
   c6582:	f000 fa2b 	bl	c69dc <scalbnf>
   c6586:	ee38 8a40 	vsub.f32	s16, s16, s0
   c658a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c658c:	9801      	ldr	r0, [sp, #4]
   c658e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c6592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c6596:	f43f af3f 	beq.w	c6418 <__kernel_rem_pio2f+0x190>
   c659a:	9202      	str	r2, [sp, #8]
   c659c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c65a0:	eeb0 0a48 	vmov.f32	s0, s16
   c65a4:	1a98      	subs	r0, r3, r2
   c65a6:	9501      	str	r5, [sp, #4]
   c65a8:	9d00      	ldr	r5, [sp, #0]
   c65aa:	f000 fa17 	bl	c69dc <scalbnf>
   c65ae:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c6530 <__kernel_rem_pio2f+0x2a8>
   c65b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c65b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c65ba:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c65be:	f2c0 8156 	blt.w	c686e <__kernel_rem_pio2f+0x5e6>
   c65c2:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c6534 <__kernel_rem_pio2f+0x2ac>
   c65c6:	9905      	ldr	r1, [sp, #20]
   c65c8:	ee60 7a27 	vmul.f32	s15, s0, s15
   c65cc:	3108      	adds	r1, #8
   c65ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c65d2:	9105      	str	r1, [sp, #20]
   c65d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c65d8:	f103 0b01 	add.w	fp, r3, #1
   c65dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c65e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c65e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c65e8:	ee10 1a10 	vmov	r1, s0
   c65ec:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c65f0:	ee17 3a90 	vmov	r3, s15
   c65f4:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c65f8:	e02e      	b.n	c6658 <__kernel_rem_pio2f+0x3d0>
   c65fa:	2301      	movs	r3, #1
   c65fc:	f04f 0c00 	mov.w	ip, #0
   c6600:	e786      	b.n	c6510 <__kernel_rem_pio2f+0x288>
   c6602:	f10c 0c01 	add.w	ip, ip, #1
   c6606:	45ac      	cmp	ip, r5
   c6608:	f47f af7c 	bne.w	c6504 <__kernel_rem_pio2f+0x27c>
   c660c:	e79e      	b.n	c654c <__kernel_rem_pio2f+0x2c4>
   c660e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c6612:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c6616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c661a:	f280 80ef 	bge.w	c67fc <__kernel_rem_pio2f+0x574>
   c661e:	2200      	movs	r2, #0
   c6620:	e6f4      	b.n	c640c <__kernel_rem_pio2f+0x184>
   c6622:	1c6b      	adds	r3, r5, #1
   c6624:	469e      	mov	lr, r3
   c6626:	469c      	mov	ip, r3
   c6628:	e71f      	b.n	c646a <__kernel_rem_pio2f+0x1e2>
   c662a:	9905      	ldr	r1, [sp, #20]
   c662c:	f1a1 0008 	sub.w	r0, r1, #8
   c6630:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c6634:	9005      	str	r0, [sp, #20]
   c6636:	462b      	mov	r3, r5
   c6638:	9d00      	ldr	r5, [sp, #0]
   c663a:	b969      	cbnz	r1, c6658 <__kernel_rem_pio2f+0x3d0>
   c663c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c6640:	3b02      	subs	r3, #2
   c6642:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c6646:	4601      	mov	r1, r0
   c6648:	f853 0904 	ldr.w	r0, [r3], #-4
   c664c:	f10b 3bff 	add.w	fp, fp, #4294967295
   c6650:	3908      	subs	r1, #8
   c6652:	2800      	cmp	r0, #0
   c6654:	d0f8      	beq.n	c6648 <__kernel_rem_pio2f+0x3c0>
   c6656:	9105      	str	r1, [sp, #20]
   c6658:	9805      	ldr	r0, [sp, #20]
   c665a:	9200      	str	r2, [sp, #0]
   c665c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6660:	f000 f9bc 	bl	c69dc <scalbnf>
   c6664:	f1bb 0f00 	cmp.w	fp, #0
   c6668:	9a00      	ldr	r2, [sp, #0]
   c666a:	f2c0 8125 	blt.w	c68b8 <__kernel_rem_pio2f+0x630>
   c666e:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c6672:	ab46      	add	r3, sp, #280	; 0x118
   c6674:	eb03 060e 	add.w	r6, r3, lr
   c6678:	f10e 0c04 	add.w	ip, lr, #4
   c667c:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c6534 <__kernel_rem_pio2f+0x2ac>
   c6680:	eb07 030c 	add.w	r3, r7, ip
   c6684:	1d31      	adds	r1, r6, #4
   c6686:	ed73 7a01 	vldmdb	r3!, {s15}
   c668a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c668e:	42bb      	cmp	r3, r7
   c6690:	ee67 7a80 	vmul.f32	s15, s15, s0
   c6694:	ee20 0a07 	vmul.f32	s0, s0, s14
   c6698:	ed61 7a01 	vstmdb	r1!, {s15}
   c669c:	d1f3      	bne.n	c6686 <__kernel_rem_pio2f+0x3fe>
   c669e:	2d00      	cmp	r5, #0
   c66a0:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c6538 <__kernel_rem_pio2f+0x2b0>
   c66a4:	f04f 0400 	mov.w	r4, #0
   c66a8:	db20      	blt.n	c66ec <__kernel_rem_pio2f+0x464>
   c66aa:	4892      	ldr	r0, [pc, #584]	; (c68f4 <__kernel_rem_pio2f+0x66c>)
   c66ac:	eddf 7a92 	vldr	s15, [pc, #584]	; c68f8 <__kernel_rem_pio2f+0x670>
   c66b0:	eeb0 7a46 	vmov.f32	s14, s12
   c66b4:	4631      	mov	r1, r6
   c66b6:	2300      	movs	r3, #0
   c66b8:	e003      	b.n	c66c2 <__kernel_rem_pio2f+0x43a>
   c66ba:	429c      	cmp	r4, r3
   c66bc:	db08      	blt.n	c66d0 <__kernel_rem_pio2f+0x448>
   c66be:	ecb0 7a01 	vldmia	r0!, {s14}
   c66c2:	ecf1 6a01 	vldmia	r1!, {s13}
   c66c6:	3301      	adds	r3, #1
   c66c8:	429d      	cmp	r5, r3
   c66ca:	eee6 7a87 	vfma.f32	s15, s13, s14
   c66ce:	daf4      	bge.n	c66ba <__kernel_rem_pio2f+0x432>
   c66d0:	ab5a      	add	r3, sp, #360	; 0x168
   c66d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c66d6:	45a3      	cmp	fp, r4
   c66d8:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c66dc:	f1a6 0604 	sub.w	r6, r6, #4
   c66e0:	f104 0301 	add.w	r3, r4, #1
   c66e4:	d005      	beq.n	c66f2 <__kernel_rem_pio2f+0x46a>
   c66e6:	2d00      	cmp	r5, #0
   c66e8:	461c      	mov	r4, r3
   c66ea:	dade      	bge.n	c66aa <__kernel_rem_pio2f+0x422>
   c66ec:	eddf 7a82 	vldr	s15, [pc, #520]	; c68f8 <__kernel_rem_pio2f+0x670>
   c66f0:	e7ee      	b.n	c66d0 <__kernel_rem_pio2f+0x448>
   c66f2:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c66f4:	2902      	cmp	r1, #2
   c66f6:	dc1c      	bgt.n	c6732 <__kernel_rem_pio2f+0x4aa>
   c66f8:	2900      	cmp	r1, #0
   c66fa:	f300 8092 	bgt.w	c6822 <__kernel_rem_pio2f+0x59a>
   c66fe:	d10f      	bne.n	c6720 <__kernel_rem_pio2f+0x498>
   c6700:	ab32      	add	r3, sp, #200	; 0xc8
   c6702:	eddf 7a7d 	vldr	s15, [pc, #500]	; c68f8 <__kernel_rem_pio2f+0x670>
   c6706:	449c      	add	ip, r3
   c6708:	ed3c 7a01 	vldmdb	ip!, {s14}
   c670c:	4563      	cmp	r3, ip
   c670e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c6712:	d1f9      	bne.n	c6708 <__kernel_rem_pio2f+0x480>
   c6714:	b10a      	cbz	r2, c671a <__kernel_rem_pio2f+0x492>
   c6716:	eef1 7a67 	vneg.f32	s15, s15
   c671a:	9b06      	ldr	r3, [sp, #24]
   c671c:	edc3 7a00 	vstr	s15, [r3]
   c6720:	ee19 3a90 	vmov	r3, s19
   c6724:	f003 0007 	and.w	r0, r3, #7
   c6728:	b05b      	add	sp, #364	; 0x16c
   c672a:	ecbd 8b04 	vpop	{d8-d9}
   c672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c6732:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c6734:	2b03      	cmp	r3, #3
   c6736:	d1f3      	bne.n	c6720 <__kernel_rem_pio2f+0x498>
   c6738:	f1bb 0f00 	cmp.w	fp, #0
   c673c:	f000 80d1 	beq.w	c68e2 <__kernel_rem_pio2f+0x65a>
   c6740:	ab5a      	add	r3, sp, #360	; 0x168
   c6742:	4473      	add	r3, lr
   c6744:	a932      	add	r1, sp, #200	; 0xc8
   c6746:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c674a:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c674e:	ed73 7a01 	vldmdb	r3!, {s15}
   c6752:	eef0 6a47 	vmov.f32	s13, s14
   c6756:	ee37 7a27 	vadd.f32	s14, s14, s15
   c675a:	4299      	cmp	r1, r3
   c675c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6760:	ed83 7a00 	vstr	s14, [r3]
   c6764:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c6768:	edc3 7a01 	vstr	s15, [r3, #4]
   c676c:	d1ef      	bne.n	c674e <__kernel_rem_pio2f+0x4c6>
   c676e:	f1bb 0f01 	cmp.w	fp, #1
   c6772:	f340 80b6 	ble.w	c68e2 <__kernel_rem_pio2f+0x65a>
   c6776:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c677a:	ab5a      	add	r3, sp, #360	; 0x168
   c677c:	f10b 3bff 	add.w	fp, fp, #4294967295
   c6780:	449e      	add	lr, r3
   c6782:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c6786:	f10b 0304 	add.w	r3, fp, #4
   c678a:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c678e:	440b      	add	r3, r1
   c6790:	a833      	add	r0, sp, #204	; 0xcc
   c6792:	ed73 7a01 	vldmdb	r3!, {s15}
   c6796:	eef0 6a47 	vmov.f32	s13, s14
   c679a:	ee37 7a27 	vadd.f32	s14, s14, s15
   c679e:	4298      	cmp	r0, r3
   c67a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c67a4:	ed83 7a00 	vstr	s14, [r3]
   c67a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c67ac:	edc3 7a01 	vstr	s15, [r3, #4]
   c67b0:	d1ef      	bne.n	c6792 <__kernel_rem_pio2f+0x50a>
   c67b2:	f10b 0b08 	add.w	fp, fp, #8
   c67b6:	eddf 7a50 	vldr	s15, [pc, #320]	; c68f8 <__kernel_rem_pio2f+0x670>
   c67ba:	eb01 030b 	add.w	r3, r1, fp
   c67be:	3108      	adds	r1, #8
   c67c0:	ed33 7a01 	vldmdb	r3!, {s14}
   c67c4:	4299      	cmp	r1, r3
   c67c6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c67ca:	d1f9      	bne.n	c67c0 <__kernel_rem_pio2f+0x538>
   c67cc:	2a00      	cmp	r2, #0
   c67ce:	d156      	bne.n	c687e <__kernel_rem_pio2f+0x5f6>
   c67d0:	9906      	ldr	r1, [sp, #24]
   c67d2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c67d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c67d6:	600a      	str	r2, [r1, #0]
   c67d8:	604b      	str	r3, [r1, #4]
   c67da:	edc1 7a02 	vstr	s15, [r1, #8]
   c67de:	e79f      	b.n	c6720 <__kernel_rem_pio2f+0x498>
   c67e0:	f105 3cff 	add.w	ip, r5, #4294967295
   c67e4:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c67e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c67ec:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c67f0:	e6bb      	b.n	c656a <__kernel_rem_pio2f+0x2e2>
   c67f2:	2308      	movs	r3, #8
   c67f4:	9307      	str	r3, [sp, #28]
   c67f6:	2300      	movs	r3, #0
   c67f8:	9302      	str	r3, [sp, #8]
   c67fa:	e561      	b.n	c62c0 <__kernel_rem_pio2f+0x38>
   c67fc:	ee19 3a90 	vmov	r3, s19
   c6800:	2d00      	cmp	r5, #0
   c6802:	f103 0301 	add.w	r3, r3, #1
   c6806:	ee09 3a90 	vmov	s19, r3
   c680a:	bfc8      	it	gt
   c680c:	2202      	movgt	r2, #2
   c680e:	f73f ae70 	bgt.w	c64f2 <__kernel_rem_pio2f+0x26a>
   c6812:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c6816:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c681a:	2202      	movs	r2, #2
   c681c:	e5f6      	b.n	c640c <__kernel_rem_pio2f+0x184>
   c681e:	2100      	movs	r1, #0
   c6820:	e694      	b.n	c654c <__kernel_rem_pio2f+0x2c4>
   c6822:	a932      	add	r1, sp, #200	; 0xc8
   c6824:	eddf 7a34 	vldr	s15, [pc, #208]	; c68f8 <__kernel_rem_pio2f+0x670>
   c6828:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c682c:	ed33 7a01 	vldmdb	r3!, {s14}
   c6830:	4299      	cmp	r1, r3
   c6832:	ee77 7a87 	vadd.f32	s15, s15, s14
   c6836:	d1f9      	bne.n	c682c <__kernel_rem_pio2f+0x5a4>
   c6838:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c683c:	bb8a      	cbnz	r2, c68a2 <__kernel_rem_pio2f+0x61a>
   c683e:	9b06      	ldr	r3, [sp, #24]
   c6840:	f1bb 0f00 	cmp.w	fp, #0
   c6844:	edc3 7a00 	vstr	s15, [r3]
   c6848:	ee77 7a67 	vsub.f32	s15, s14, s15
   c684c:	dd0b      	ble.n	c6866 <__kernel_rem_pio2f+0x5de>
   c684e:	a933      	add	r1, sp, #204	; 0xcc
   c6850:	2301      	movs	r3, #1
   c6852:	ecb1 7a01 	vldmia	r1!, {s14}
   c6856:	3301      	adds	r3, #1
   c6858:	459b      	cmp	fp, r3
   c685a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c685e:	daf8      	bge.n	c6852 <__kernel_rem_pio2f+0x5ca>
   c6860:	b10a      	cbz	r2, c6866 <__kernel_rem_pio2f+0x5de>
   c6862:	eef1 7a67 	vneg.f32	s15, s15
   c6866:	9b06      	ldr	r3, [sp, #24]
   c6868:	edc3 7a01 	vstr	s15, [r3, #4]
   c686c:	e758      	b.n	c6720 <__kernel_rem_pio2f+0x498>
   c686e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c6872:	469b      	mov	fp, r3
   c6874:	ee10 1a10 	vmov	r1, s0
   c6878:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c687c:	e6ec      	b.n	c6658 <__kernel_rem_pio2f+0x3d0>
   c687e:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c6882:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c6886:	9b06      	ldr	r3, [sp, #24]
   c6888:	eef1 6a66 	vneg.f32	s13, s13
   c688c:	eeb1 7a47 	vneg.f32	s14, s14
   c6890:	eef1 7a67 	vneg.f32	s15, s15
   c6894:	edc3 6a00 	vstr	s13, [r3]
   c6898:	ed83 7a01 	vstr	s14, [r3, #4]
   c689c:	edc3 7a02 	vstr	s15, [r3, #8]
   c68a0:	e73e      	b.n	c6720 <__kernel_rem_pio2f+0x498>
   c68a2:	9b06      	ldr	r3, [sp, #24]
   c68a4:	eef1 6a67 	vneg.f32	s13, s15
   c68a8:	f1bb 0f00 	cmp.w	fp, #0
   c68ac:	ee77 7a67 	vsub.f32	s15, s14, s15
   c68b0:	edc3 6a00 	vstr	s13, [r3]
   c68b4:	dccb      	bgt.n	c684e <__kernel_rem_pio2f+0x5c6>
   c68b6:	e7d4      	b.n	c6862 <__kernel_rem_pio2f+0x5da>
   c68b8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c68ba:	2b02      	cmp	r3, #2
   c68bc:	dc0d      	bgt.n	c68da <__kernel_rem_pio2f+0x652>
   c68be:	2b00      	cmp	r3, #0
   c68c0:	dc14      	bgt.n	c68ec <__kernel_rem_pio2f+0x664>
   c68c2:	f47f af2d 	bne.w	c6720 <__kernel_rem_pio2f+0x498>
   c68c6:	eddf 7a0c 	vldr	s15, [pc, #48]	; c68f8 <__kernel_rem_pio2f+0x670>
   c68ca:	2a00      	cmp	r2, #0
   c68cc:	f43f af25 	beq.w	c671a <__kernel_rem_pio2f+0x492>
   c68d0:	e721      	b.n	c6716 <__kernel_rem_pio2f+0x48e>
   c68d2:	9b03      	ldr	r3, [sp, #12]
   c68d4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c68d8:	e537      	b.n	c634a <__kernel_rem_pio2f+0xc2>
   c68da:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c68dc:	2b03      	cmp	r3, #3
   c68de:	f47f af1f 	bne.w	c6720 <__kernel_rem_pio2f+0x498>
   c68e2:	eddf 7a05 	vldr	s15, [pc, #20]	; c68f8 <__kernel_rem_pio2f+0x670>
   c68e6:	2a00      	cmp	r2, #0
   c68e8:	d1c9      	bne.n	c687e <__kernel_rem_pio2f+0x5f6>
   c68ea:	e771      	b.n	c67d0 <__kernel_rem_pio2f+0x548>
   c68ec:	eddf 7a02 	vldr	s15, [pc, #8]	; c68f8 <__kernel_rem_pio2f+0x670>
   c68f0:	e7a2      	b.n	c6838 <__kernel_rem_pio2f+0x5b0>
   c68f2:	bf00      	nop
   c68f4:	000c9c34 	.word	0x000c9c34
   c68f8:	00000000 	.word	0x00000000

000c68fc <__kernel_sinf>:
   c68fc:	ee10 3a10 	vmov	r3, s0
   c6900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c6904:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c6908:	da04      	bge.n	c6914 <__kernel_sinf+0x18>
   c690a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c690e:	ee17 3a90 	vmov	r3, s15
   c6912:	b35b      	cbz	r3, c696c <__kernel_sinf+0x70>
   c6914:	ee60 7a00 	vmul.f32	s15, s0, s0
   c6918:	ed9f 7a15 	vldr	s14, [pc, #84]	; c6970 <__kernel_sinf+0x74>
   c691c:	eddf 5a15 	vldr	s11, [pc, #84]	; c6974 <__kernel_sinf+0x78>
   c6920:	ed9f 6a15 	vldr	s12, [pc, #84]	; c6978 <__kernel_sinf+0x7c>
   c6924:	eddf 6a15 	vldr	s13, [pc, #84]	; c697c <__kernel_sinf+0x80>
   c6928:	eee7 5a87 	vfma.f32	s11, s15, s14
   c692c:	ed9f 7a14 	vldr	s14, [pc, #80]	; c6980 <__kernel_sinf+0x84>
   c6930:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c6934:	ee20 5a27 	vmul.f32	s10, s0, s15
   c6938:	eee6 6a27 	vfma.f32	s13, s12, s15
   c693c:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c6940:	b930      	cbnz	r0, c6950 <__kernel_sinf+0x54>
   c6942:	eddf 6a10 	vldr	s13, [pc, #64]	; c6984 <__kernel_sinf+0x88>
   c6946:	eee7 6a87 	vfma.f32	s13, s15, s14
   c694a:	eea6 0a85 	vfma.f32	s0, s13, s10
   c694e:	4770      	bx	lr
   c6950:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c6954:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c6958:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c695c:	eddf 6a0a 	vldr	s13, [pc, #40]	; c6988 <__kernel_sinf+0x8c>
   c6960:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c6964:	eee5 0a26 	vfma.f32	s1, s10, s13
   c6968:	ee30 0a60 	vsub.f32	s0, s0, s1
   c696c:	4770      	bx	lr
   c696e:	bf00      	nop
   c6970:	2f2ec9d3 	.word	0x2f2ec9d3
   c6974:	b2d72f34 	.word	0xb2d72f34
   c6978:	3638ef1b 	.word	0x3638ef1b
   c697c:	b9500d01 	.word	0xb9500d01
   c6980:	3c088889 	.word	0x3c088889
   c6984:	be2aaaab 	.word	0xbe2aaaab
   c6988:	3e2aaaab 	.word	0x3e2aaaab

000c698c <finite>:
   c698c:	b082      	sub	sp, #8
   c698e:	ed8d 0b00 	vstr	d0, [sp]
   c6992:	9801      	ldr	r0, [sp, #4]
   c6994:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   c6998:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   c699c:	0fc0      	lsrs	r0, r0, #31
   c699e:	b002      	add	sp, #8
   c69a0:	4770      	bx	lr
   c69a2:	bf00      	nop

000c69a4 <fabsf>:
   c69a4:	ee10 3a10 	vmov	r3, s0
   c69a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c69ac:	ee00 3a10 	vmov	s0, r3
   c69b0:	4770      	bx	lr
   c69b2:	bf00      	nop

000c69b4 <finitef>:
   c69b4:	b082      	sub	sp, #8
   c69b6:	ed8d 0a01 	vstr	s0, [sp, #4]
   c69ba:	9801      	ldr	r0, [sp, #4]
   c69bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c69c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   c69c4:	bfac      	ite	ge
   c69c6:	2000      	movge	r0, #0
   c69c8:	2001      	movlt	r0, #1
   c69ca:	b002      	add	sp, #8
   c69cc:	4770      	bx	lr
   c69ce:	bf00      	nop

000c69d0 <nanf>:
   c69d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c69d8 <nanf+0x8>
   c69d4:	4770      	bx	lr
   c69d6:	bf00      	nop
   c69d8:	7fc00000 	.word	0x7fc00000

000c69dc <scalbnf>:
   c69dc:	b082      	sub	sp, #8
   c69de:	ed8d 0a01 	vstr	s0, [sp, #4]
   c69e2:	9b01      	ldr	r3, [sp, #4]
   c69e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c69e8:	d02a      	beq.n	c6a40 <scalbnf+0x64>
   c69ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c69ee:	d223      	bcs.n	c6a38 <scalbnf+0x5c>
   c69f0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c69f4:	d128      	bne.n	c6a48 <scalbnf+0x6c>
   c69f6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c69fa:	eddf 7a2a 	vldr	s15, [pc, #168]	; c6aa4 <scalbnf+0xc8>
   c69fe:	4b2a      	ldr	r3, [pc, #168]	; (c6aa8 <scalbnf+0xcc>)
   c6a00:	ee67 7a27 	vmul.f32	s15, s14, s15
   c6a04:	4298      	cmp	r0, r3
   c6a06:	edcd 7a01 	vstr	s15, [sp, #4]
   c6a0a:	db37      	blt.n	c6a7c <scalbnf+0xa0>
   c6a0c:	9b01      	ldr	r3, [sp, #4]
   c6a0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c6a12:	3a19      	subs	r2, #25
   c6a14:	4402      	add	r2, r0
   c6a16:	2afe      	cmp	r2, #254	; 0xfe
   c6a18:	dd1a      	ble.n	c6a50 <scalbnf+0x74>
   c6a1a:	ed9f 0a24 	vldr	s0, [pc, #144]	; c6aac <scalbnf+0xd0>
   c6a1e:	ed9f 7a24 	vldr	s14, [pc, #144]	; c6ab0 <scalbnf+0xd4>
   c6a22:	9b01      	ldr	r3, [sp, #4]
   c6a24:	2b00      	cmp	r3, #0
   c6a26:	eef0 7a40 	vmov.f32	s15, s0
   c6a2a:	bfb8      	it	lt
   c6a2c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c6a30:	ee20 0a27 	vmul.f32	s0, s0, s15
   c6a34:	b002      	add	sp, #8
   c6a36:	4770      	bx	lr
   c6a38:	ee30 0a00 	vadd.f32	s0, s0, s0
   c6a3c:	b002      	add	sp, #8
   c6a3e:	4770      	bx	lr
   c6a40:	ed9d 0a01 	vldr	s0, [sp, #4]
   c6a44:	b002      	add	sp, #8
   c6a46:	4770      	bx	lr
   c6a48:	0dd2      	lsrs	r2, r2, #23
   c6a4a:	4402      	add	r2, r0
   c6a4c:	2afe      	cmp	r2, #254	; 0xfe
   c6a4e:	dce4      	bgt.n	c6a1a <scalbnf+0x3e>
   c6a50:	2a00      	cmp	r2, #0
   c6a52:	dc0b      	bgt.n	c6a6c <scalbnf+0x90>
   c6a54:	f112 0f16 	cmn.w	r2, #22
   c6a58:	da17      	bge.n	c6a8a <scalbnf+0xae>
   c6a5a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c6a5e:	4298      	cmp	r0, r3
   c6a60:	dcdb      	bgt.n	c6a1a <scalbnf+0x3e>
   c6a62:	ed9f 0a14 	vldr	s0, [pc, #80]	; c6ab4 <scalbnf+0xd8>
   c6a66:	ed9f 7a14 	vldr	s14, [pc, #80]	; c6ab8 <scalbnf+0xdc>
   c6a6a:	e7da      	b.n	c6a22 <scalbnf+0x46>
   c6a6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c6a70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c6a74:	ee00 3a10 	vmov	s0, r3
   c6a78:	b002      	add	sp, #8
   c6a7a:	4770      	bx	lr
   c6a7c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c6ab4 <scalbnf+0xd8>
   c6a80:	eddd 7a01 	vldr	s15, [sp, #4]
   c6a84:	ee27 0a80 	vmul.f32	s0, s15, s0
   c6a88:	e7d8      	b.n	c6a3c <scalbnf+0x60>
   c6a8a:	3219      	adds	r2, #25
   c6a8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c6a90:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c6a94:	eddf 7a09 	vldr	s15, [pc, #36]	; c6abc <scalbnf+0xe0>
   c6a98:	ee07 3a10 	vmov	s14, r3
   c6a9c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c6aa0:	e7cc      	b.n	c6a3c <scalbnf+0x60>
   c6aa2:	bf00      	nop
   c6aa4:	4c000000 	.word	0x4c000000
   c6aa8:	ffff3cb0 	.word	0xffff3cb0
   c6aac:	7149f2ca 	.word	0x7149f2ca
   c6ab0:	f149f2ca 	.word	0xf149f2ca
   c6ab4:	0da24260 	.word	0x0da24260
   c6ab8:	8da24260 	.word	0x8da24260
   c6abc:	33000000 	.word	0x33000000

000c6ac0 <atexit>:
   c6ac0:	2300      	movs	r3, #0
   c6ac2:	4601      	mov	r1, r0
   c6ac4:	461a      	mov	r2, r3
   c6ac6:	4618      	mov	r0, r3
   c6ac8:	f000 b8c0 	b.w	c6c4c <__register_exitproc>

000c6acc <exit>:
   c6acc:	b508      	push	{r3, lr}
   c6ace:	4b07      	ldr	r3, [pc, #28]	; (c6aec <exit+0x20>)
   c6ad0:	4604      	mov	r4, r0
   c6ad2:	b113      	cbz	r3, c6ada <exit+0xe>
   c6ad4:	2100      	movs	r1, #0
   c6ad6:	f000 f91b 	bl	c6d10 <__call_exitprocs>
   c6ada:	4b05      	ldr	r3, [pc, #20]	; (c6af0 <exit+0x24>)
   c6adc:	6818      	ldr	r0, [r3, #0]
   c6ade:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c6ae0:	b103      	cbz	r3, c6ae4 <exit+0x18>
   c6ae2:	4798      	blx	r3
   c6ae4:	4620      	mov	r0, r4
   c6ae6:	f7ee f813 	bl	b4b10 <_exit>
   c6aea:	bf00      	nop
   c6aec:	000c6d11 	.word	0x000c6d11
   c6af0:	000c9c68 	.word	0x000c9c68

000c6af4 <memcmp>:
   c6af4:	b510      	push	{r4, lr}
   c6af6:	3901      	subs	r1, #1
   c6af8:	4402      	add	r2, r0
   c6afa:	4290      	cmp	r0, r2
   c6afc:	d101      	bne.n	c6b02 <memcmp+0xe>
   c6afe:	2000      	movs	r0, #0
   c6b00:	e005      	b.n	c6b0e <memcmp+0x1a>
   c6b02:	7803      	ldrb	r3, [r0, #0]
   c6b04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c6b08:	42a3      	cmp	r3, r4
   c6b0a:	d001      	beq.n	c6b10 <memcmp+0x1c>
   c6b0c:	1b18      	subs	r0, r3, r4
   c6b0e:	bd10      	pop	{r4, pc}
   c6b10:	3001      	adds	r0, #1
   c6b12:	e7f2      	b.n	c6afa <memcmp+0x6>

000c6b14 <memcpy>:
   c6b14:	440a      	add	r2, r1
   c6b16:	4291      	cmp	r1, r2
   c6b18:	f100 33ff 	add.w	r3, r0, #4294967295
   c6b1c:	d100      	bne.n	c6b20 <memcpy+0xc>
   c6b1e:	4770      	bx	lr
   c6b20:	b510      	push	{r4, lr}
   c6b22:	f811 4b01 	ldrb.w	r4, [r1], #1
   c6b26:	f803 4f01 	strb.w	r4, [r3, #1]!
   c6b2a:	4291      	cmp	r1, r2
   c6b2c:	d1f9      	bne.n	c6b22 <memcpy+0xe>
   c6b2e:	bd10      	pop	{r4, pc}

000c6b30 <memmove>:
   c6b30:	4288      	cmp	r0, r1
   c6b32:	b510      	push	{r4, lr}
   c6b34:	eb01 0402 	add.w	r4, r1, r2
   c6b38:	d902      	bls.n	c6b40 <memmove+0x10>
   c6b3a:	4284      	cmp	r4, r0
   c6b3c:	4623      	mov	r3, r4
   c6b3e:	d807      	bhi.n	c6b50 <memmove+0x20>
   c6b40:	1e43      	subs	r3, r0, #1
   c6b42:	42a1      	cmp	r1, r4
   c6b44:	d008      	beq.n	c6b58 <memmove+0x28>
   c6b46:	f811 2b01 	ldrb.w	r2, [r1], #1
   c6b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c6b4e:	e7f8      	b.n	c6b42 <memmove+0x12>
   c6b50:	4402      	add	r2, r0
   c6b52:	4601      	mov	r1, r0
   c6b54:	428a      	cmp	r2, r1
   c6b56:	d100      	bne.n	c6b5a <memmove+0x2a>
   c6b58:	bd10      	pop	{r4, pc}
   c6b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c6b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c6b62:	e7f7      	b.n	c6b54 <memmove+0x24>

000c6b64 <memset>:
   c6b64:	4402      	add	r2, r0
   c6b66:	4603      	mov	r3, r0
   c6b68:	4293      	cmp	r3, r2
   c6b6a:	d100      	bne.n	c6b6e <memset+0xa>
   c6b6c:	4770      	bx	lr
   c6b6e:	f803 1b01 	strb.w	r1, [r3], #1
   c6b72:	e7f9      	b.n	c6b68 <memset+0x4>

000c6b74 <srand>:
   c6b74:	b538      	push	{r3, r4, r5, lr}
   c6b76:	4b10      	ldr	r3, [pc, #64]	; (c6bb8 <srand+0x44>)
   c6b78:	681d      	ldr	r5, [r3, #0]
   c6b7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c6b7c:	4604      	mov	r4, r0
   c6b7e:	b9b3      	cbnz	r3, c6bae <srand+0x3a>
   c6b80:	2018      	movs	r0, #24
   c6b82:	f7fd fe23 	bl	c47cc <malloc>
   c6b86:	4602      	mov	r2, r0
   c6b88:	63a8      	str	r0, [r5, #56]	; 0x38
   c6b8a:	b920      	cbnz	r0, c6b96 <srand+0x22>
   c6b8c:	4b0b      	ldr	r3, [pc, #44]	; (c6bbc <srand+0x48>)
   c6b8e:	480c      	ldr	r0, [pc, #48]	; (c6bc0 <srand+0x4c>)
   c6b90:	2142      	movs	r1, #66	; 0x42
   c6b92:	f7fd fe43 	bl	c481c <__assert_func>
   c6b96:	490b      	ldr	r1, [pc, #44]	; (c6bc4 <srand+0x50>)
   c6b98:	4b0b      	ldr	r3, [pc, #44]	; (c6bc8 <srand+0x54>)
   c6b9a:	e9c0 1300 	strd	r1, r3, [r0]
   c6b9e:	4b0b      	ldr	r3, [pc, #44]	; (c6bcc <srand+0x58>)
   c6ba0:	6083      	str	r3, [r0, #8]
   c6ba2:	230b      	movs	r3, #11
   c6ba4:	8183      	strh	r3, [r0, #12]
   c6ba6:	2100      	movs	r1, #0
   c6ba8:	2001      	movs	r0, #1
   c6baa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c6bae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c6bb0:	2200      	movs	r2, #0
   c6bb2:	611c      	str	r4, [r3, #16]
   c6bb4:	615a      	str	r2, [r3, #20]
   c6bb6:	bd38      	pop	{r3, r4, r5, pc}
   c6bb8:	2003c5c0 	.word	0x2003c5c0
   c6bbc:	000c9c6c 	.word	0x000c9c6c
   c6bc0:	000c9c83 	.word	0x000c9c83
   c6bc4:	abcd330e 	.word	0xabcd330e
   c6bc8:	e66d1234 	.word	0xe66d1234
   c6bcc:	0005deec 	.word	0x0005deec

000c6bd0 <rand>:
   c6bd0:	4b16      	ldr	r3, [pc, #88]	; (c6c2c <rand+0x5c>)
   c6bd2:	b510      	push	{r4, lr}
   c6bd4:	681c      	ldr	r4, [r3, #0]
   c6bd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c6bd8:	b9b3      	cbnz	r3, c6c08 <rand+0x38>
   c6bda:	2018      	movs	r0, #24
   c6bdc:	f7fd fdf6 	bl	c47cc <malloc>
   c6be0:	63a0      	str	r0, [r4, #56]	; 0x38
   c6be2:	b928      	cbnz	r0, c6bf0 <rand+0x20>
   c6be4:	4602      	mov	r2, r0
   c6be6:	4b12      	ldr	r3, [pc, #72]	; (c6c30 <rand+0x60>)
   c6be8:	4812      	ldr	r0, [pc, #72]	; (c6c34 <rand+0x64>)
   c6bea:	214e      	movs	r1, #78	; 0x4e
   c6bec:	f7fd fe16 	bl	c481c <__assert_func>
   c6bf0:	4a11      	ldr	r2, [pc, #68]	; (c6c38 <rand+0x68>)
   c6bf2:	4b12      	ldr	r3, [pc, #72]	; (c6c3c <rand+0x6c>)
   c6bf4:	e9c0 2300 	strd	r2, r3, [r0]
   c6bf8:	4b11      	ldr	r3, [pc, #68]	; (c6c40 <rand+0x70>)
   c6bfa:	6083      	str	r3, [r0, #8]
   c6bfc:	230b      	movs	r3, #11
   c6bfe:	8183      	strh	r3, [r0, #12]
   c6c00:	2201      	movs	r2, #1
   c6c02:	2300      	movs	r3, #0
   c6c04:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c6c08:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c6c0a:	4a0e      	ldr	r2, [pc, #56]	; (c6c44 <rand+0x74>)
   c6c0c:	6920      	ldr	r0, [r4, #16]
   c6c0e:	6963      	ldr	r3, [r4, #20]
   c6c10:	490d      	ldr	r1, [pc, #52]	; (c6c48 <rand+0x78>)
   c6c12:	4342      	muls	r2, r0
   c6c14:	fb01 2203 	mla	r2, r1, r3, r2
   c6c18:	fba0 0101 	umull	r0, r1, r0, r1
   c6c1c:	1c43      	adds	r3, r0, #1
   c6c1e:	eb42 0001 	adc.w	r0, r2, r1
   c6c22:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c6c26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c6c2a:	bd10      	pop	{r4, pc}
   c6c2c:	2003c5c0 	.word	0x2003c5c0
   c6c30:	000c9c6c 	.word	0x000c9c6c
   c6c34:	000c9c83 	.word	0x000c9c83
   c6c38:	abcd330e 	.word	0xabcd330e
   c6c3c:	e66d1234 	.word	0xe66d1234
   c6c40:	0005deec 	.word	0x0005deec
   c6c44:	5851f42d 	.word	0x5851f42d
   c6c48:	4c957f2d 	.word	0x4c957f2d

000c6c4c <__register_exitproc>:
   c6c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c6c50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c6d0c <__register_exitproc+0xc0>
   c6c54:	4606      	mov	r6, r0
   c6c56:	f8d8 0000 	ldr.w	r0, [r8]
   c6c5a:	461f      	mov	r7, r3
   c6c5c:	460d      	mov	r5, r1
   c6c5e:	4691      	mov	r9, r2
   c6c60:	f000 f8b2 	bl	c6dc8 <__retarget_lock_acquire_recursive>
   c6c64:	4b25      	ldr	r3, [pc, #148]	; (c6cfc <__register_exitproc+0xb0>)
   c6c66:	681c      	ldr	r4, [r3, #0]
   c6c68:	b934      	cbnz	r4, c6c78 <__register_exitproc+0x2c>
   c6c6a:	4c25      	ldr	r4, [pc, #148]	; (c6d00 <__register_exitproc+0xb4>)
   c6c6c:	601c      	str	r4, [r3, #0]
   c6c6e:	4b25      	ldr	r3, [pc, #148]	; (c6d04 <__register_exitproc+0xb8>)
   c6c70:	b113      	cbz	r3, c6c78 <__register_exitproc+0x2c>
   c6c72:	681b      	ldr	r3, [r3, #0]
   c6c74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c6c78:	6863      	ldr	r3, [r4, #4]
   c6c7a:	2b1f      	cmp	r3, #31
   c6c7c:	dd07      	ble.n	c6c8e <__register_exitproc+0x42>
   c6c7e:	f8d8 0000 	ldr.w	r0, [r8]
   c6c82:	f000 f8a3 	bl	c6dcc <__retarget_lock_release_recursive>
   c6c86:	f04f 30ff 	mov.w	r0, #4294967295
   c6c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c6c8e:	b34e      	cbz	r6, c6ce4 <__register_exitproc+0x98>
   c6c90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c6c94:	b988      	cbnz	r0, c6cba <__register_exitproc+0x6e>
   c6c96:	4b1c      	ldr	r3, [pc, #112]	; (c6d08 <__register_exitproc+0xbc>)
   c6c98:	b923      	cbnz	r3, c6ca4 <__register_exitproc+0x58>
   c6c9a:	f8d8 0000 	ldr.w	r0, [r8]
   c6c9e:	f000 f894 	bl	c6dca <__retarget_lock_release>
   c6ca2:	e7f0      	b.n	c6c86 <__register_exitproc+0x3a>
   c6ca4:	f44f 7084 	mov.w	r0, #264	; 0x108
   c6ca8:	f7fd fd90 	bl	c47cc <malloc>
   c6cac:	2800      	cmp	r0, #0
   c6cae:	d0f4      	beq.n	c6c9a <__register_exitproc+0x4e>
   c6cb0:	2300      	movs	r3, #0
   c6cb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c6cb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c6cba:	6863      	ldr	r3, [r4, #4]
   c6cbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c6cc0:	2201      	movs	r2, #1
   c6cc2:	409a      	lsls	r2, r3
   c6cc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c6cc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c6ccc:	4313      	orrs	r3, r2
   c6cce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c6cd2:	2e02      	cmp	r6, #2
   c6cd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c6cd8:	bf02      	ittt	eq
   c6cda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c6cde:	4313      	orreq	r3, r2
   c6ce0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c6ce4:	6863      	ldr	r3, [r4, #4]
   c6ce6:	f8d8 0000 	ldr.w	r0, [r8]
   c6cea:	1c5a      	adds	r2, r3, #1
   c6cec:	3302      	adds	r3, #2
   c6cee:	6062      	str	r2, [r4, #4]
   c6cf0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c6cf4:	f000 f86a 	bl	c6dcc <__retarget_lock_release_recursive>
   c6cf8:	2000      	movs	r0, #0
   c6cfa:	e7c6      	b.n	c6c8a <__register_exitproc+0x3e>
   c6cfc:	2003e7e8 	.word	0x2003e7e8
   c6d00:	2003e75c 	.word	0x2003e75c
   c6d04:	00000000 	.word	0x00000000
   c6d08:	000c47cd 	.word	0x000c47cd
   c6d0c:	2003c624 	.word	0x2003c624

000c6d10 <__call_exitprocs>:
   c6d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6d14:	f8df 90a8 	ldr.w	r9, [pc, #168]	; c6dc0 <__call_exitprocs+0xb0>
   c6d18:	9100      	str	r1, [sp, #0]
   c6d1a:	4680      	mov	r8, r0
   c6d1c:	f8d9 0000 	ldr.w	r0, [r9]
   c6d20:	f8df a0a0 	ldr.w	sl, [pc, #160]	; c6dc4 <__call_exitprocs+0xb4>
   c6d24:	f000 f850 	bl	c6dc8 <__retarget_lock_acquire_recursive>
   c6d28:	f8da 4000 	ldr.w	r4, [sl]
   c6d2c:	b934      	cbnz	r4, c6d3c <__call_exitprocs+0x2c>
   c6d2e:	f8d9 0000 	ldr.w	r0, [r9]
   c6d32:	b003      	add	sp, #12
   c6d34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6d38:	f000 b848 	b.w	c6dcc <__retarget_lock_release_recursive>
   c6d3c:	6865      	ldr	r5, [r4, #4]
   c6d3e:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   c6d42:	1e6e      	subs	r6, r5, #1
   c6d44:	3501      	adds	r5, #1
   c6d46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   c6d4a:	f107 0b80 	add.w	fp, r7, #128	; 0x80
   c6d4e:	2e00      	cmp	r6, #0
   c6d50:	dbed      	blt.n	c6d2e <__call_exitprocs+0x1e>
   c6d52:	9b00      	ldr	r3, [sp, #0]
   c6d54:	b143      	cbz	r3, c6d68 <__call_exitprocs+0x58>
   c6d56:	b917      	cbnz	r7, c6d5e <__call_exitprocs+0x4e>
   c6d58:	3e01      	subs	r6, #1
   c6d5a:	3d04      	subs	r5, #4
   c6d5c:	e7f7      	b.n	c6d4e <__call_exitprocs+0x3e>
   c6d5e:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
   c6d62:	9b00      	ldr	r3, [sp, #0]
   c6d64:	429a      	cmp	r2, r3
   c6d66:	d1f7      	bne.n	c6d58 <__call_exitprocs+0x48>
   c6d68:	6861      	ldr	r1, [r4, #4]
   c6d6a:	682a      	ldr	r2, [r5, #0]
   c6d6c:	3901      	subs	r1, #1
   c6d6e:	42b1      	cmp	r1, r6
   c6d70:	bf16      	itet	ne
   c6d72:	2300      	movne	r3, #0
   c6d74:	6066      	streq	r6, [r4, #4]
   c6d76:	602b      	strne	r3, [r5, #0]
   c6d78:	2a00      	cmp	r2, #0
   c6d7a:	d0ed      	beq.n	c6d58 <__call_exitprocs+0x48>
   c6d7c:	6863      	ldr	r3, [r4, #4]
   c6d7e:	9301      	str	r3, [sp, #4]
   c6d80:	b13f      	cbz	r7, c6d92 <__call_exitprocs+0x82>
   c6d82:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
   c6d86:	2301      	movs	r3, #1
   c6d88:	fa03 fc06 	lsl.w	ip, r3, r6
   c6d8c:	ea1c 0f01 	tst.w	ip, r1
   c6d90:	d109      	bne.n	c6da6 <__call_exitprocs+0x96>
   c6d92:	4790      	blx	r2
   c6d94:	6861      	ldr	r1, [r4, #4]
   c6d96:	9b01      	ldr	r3, [sp, #4]
   c6d98:	f8da 2000 	ldr.w	r2, [sl]
   c6d9c:	4299      	cmp	r1, r3
   c6d9e:	d1c3      	bne.n	c6d28 <__call_exitprocs+0x18>
   c6da0:	4294      	cmp	r4, r2
   c6da2:	d0d9      	beq.n	c6d58 <__call_exitprocs+0x48>
   c6da4:	e7c0      	b.n	c6d28 <__call_exitprocs+0x18>
   c6da6:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
   c6daa:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   c6dae:	ea1c 0f00 	tst.w	ip, r0
   c6db2:	d102      	bne.n	c6dba <__call_exitprocs+0xaa>
   c6db4:	4640      	mov	r0, r8
   c6db6:	4790      	blx	r2
   c6db8:	e7ec      	b.n	c6d94 <__call_exitprocs+0x84>
   c6dba:	4608      	mov	r0, r1
   c6dbc:	4790      	blx	r2
   c6dbe:	e7e9      	b.n	c6d94 <__call_exitprocs+0x84>
   c6dc0:	2003c624 	.word	0x2003c624
   c6dc4:	2003e7e8 	.word	0x2003e7e8

000c6dc8 <__retarget_lock_acquire_recursive>:
   c6dc8:	4770      	bx	lr

000c6dca <__retarget_lock_release>:
   c6dca:	4770      	bx	lr

000c6dcc <__retarget_lock_release_recursive>:
   c6dcc:	4770      	bx	lr

000c6dce <link_code_end>:
	...

000c6dd0 <dynalib_user>:
   c6dd0:	4a8d 000b 4ac9 000b 4af1 000b 4af5 000b     .J...J...J...J..
   c6de0:	0000 0000 7845 7469 4320 6c61 656c 0064     ....Exit Called.
   c6df0:	6e55 6e6b 776f 206e 7974 6570 4e00 544f     Unknown type.NOT
   c6e00:	5059 0045 4c46 414f 3354 0032 4e49 3354     YPE.FLOAT32.INT3
   c6e10:	0032 4955 544e 0038 4e49 3654 0034 5453     2.UINT8.INT64.ST
   c6e20:	4952 474e 4200 4f4f 004c 4e49 3154 0036     RING.BOOL.INT16.
   c6e30:	4f43 504d 454c 3658 0034 4c46 414f 3154     COMPLEX64.FLOAT1
   c6e40:	0036 0000                                   6...

000c6e44 <CSWTCH.19>:
   c6e44:	6dfd 000c 6e04 000c 6e0c 000c 6e12 000c     .m...n...n...n..
   c6e54:	6e18 000c 6e1e 000c 6e25 000c 6e2a 000c     .n...n..%n..*n..
   c6e64:	6e30 000c 6e13 000c 6e3a 000c 6f4d 6564     0n...n..:n..Mode
   c6e74:	206c 7270 766f 6469 6465 6920 2073 6373     l provided is sc
   c6e84:	6568 616d 7620 7265 6973 6e6f 2520 2064     hema version %d 
   c6e94:	6f6e 2074 7165 6175 206c 6f74 7320 7075     not equal to sup
   c6ea4:	6f70 7472 6465 7620 7265 6973 6e6f 2520     ported version %
   c6eb4:	2e64 4900 766e 6b6f 2065 6166 6c69 6465     d..Invoke failed
   c6ec4:	6f20 206e 5f78 6176 3a6c 2520 0a66 2500      on x_val: %f..%
   c6ed4:	322e 2c66 2520 322e 0066 3a63 552f 6573     .2f, %.2f.c:/Use
   c6ee4:	7372 742f 646f 7264 642f 7665 702f 7261     rs/toddr/dev/par
   c6ef4:	6974 6c63 2d65 4654 696c 6574 6c2f 6269     ticle-TFlite/lib
   c6f04:	542f 6e65 6f73 4672 6f6c 4c77 7469 2f65     /TensorFlowLite/
   c6f14:	7273 2f63 6574 736e 726f 6c66 776f 6c2f     src/tensorflow/l
   c6f24:	7469 2f65 656b 6e72 6c65 2f73 656b 6e72     ite/kernels/kern
   c6f34:	6c65 755f 6974 2e6c 7063 0070 7325 253a     el_util.cpp.%s:%
   c6f44:	2064 7325 7720 7361 6e20 746f 7420 7572     d %s was not tru
   c6f54:	2e65 6900 706e 7475 705f 6f72 7564 7463     e..input_product
   c6f64:	735f 6163 656c 3e20 203d 0030 7473 3a64     _scale >= 0.std:
   c6f74:	613a 7362 6928 706e 7475 705f 6f72 7564     :abs(input_produ
   c6f84:	7463 735f 6163 656c 2d20 6220 6169 5f73     ct_scale - bias_
   c6f94:	6373 6c61 2965 3c20 203d 6531 362d 2a20     scale) <= 1e-6 *
   c6fa4:	7320 6474 3a3a 696d 286e 6e69 7570 5f74      std::min(input_
   c6fb4:	7270 646f 6375 5f74 6373 6c61 2c65 6220     product_scale, b
   c6fc4:	6169 5f73 6373 6c61 2965 6600 6c61 6573     ias_scale).false
   c6fd4:	2500 3a73 6425 2520 2073 3d21 2520 2073     .%s:%d %s != %s 
   c6fe4:	2528 2064 3d21 2520 2964 6b00 6654 694c     (%d != %d).kTfLi
   c6ff4:	6574 6641 6966 656e 7551 6e61 6974 617a     teAffineQuantiza
   c7004:	6974 6e6f 6900 706e 7475 3e2d 7571 6e61     tion.input->quan
   c7014:	6974 617a 6974 6e6f 742e 7079 0065 6966     tization.type.fi
   c7024:	746c 7265 3e2d 7571 6e61 6974 617a 6974     lter->quantizati
   c7034:	6e6f 742e 7079 0065 6661 6966 656e 715f     on.type.affine_q
   c7044:	6175 746e 7a69 7461 6f69 006e 6661 6966     uantization.affi
   c7054:	656e 715f 6175 746e 7a69 7461 6f69 2d6e     ne_quantization-
   c7064:	733e 6163 656c 6900 706e 7475 3e2d 7974     >scale.input->ty
   c7074:	6570 6600 6c69 6574 2d72 743e 7079 0065     pe.filter->type.
   c7084:	6966 746c 7265 3e2d 6964 736d 3e2d 6164     filter->dims->da
   c7094:	6174 615b 6666 6e69 5f65 7571 6e61 6974     ta[affine_quanti
   c70a4:	617a 6974 6e6f 3e2d 7571 6e61 6974 657a     zation->quantize
   c70b4:	5f64 6964 656d 736e 6f69 5d6e 6100 6666     d_dimension].aff
   c70c4:	6e69 5f65 7571 6e61 6974 617a 6974 6e6f     ine_quantization
   c70d4:	3e2d 6373 6c61 2d65 733e 7a69 0065 0a0d     ->scale->size...
   c70e4:	0000 0000                                   ....

000c70e8 <_ZTVN6tflite18MicroErrorReporterE>:
	...
   c70f0:	546b 000b 5519 000b 546d 000b 7954 6570     kT...U..mT..Type
   c7100:	2520 2073 2528 2964 6e20 746f 6920 2073      %s (%d) not is 
   c7110:	6f6e 2074 7573 7070 726f 6574 0064 6e4f     not supported.On
   c7120:	796c 3120 7320 6275 7267 7061 2068 7369     ly 1 subgraph is
   c7130:	6320 7275 6572 746e 796c 7320 7075 6f70      currently suppo
   c7140:	7472 6465 0a2e 6900 3c20 7320 7a69 2865     rted...i < size(
   c7150:	0029 6c66 7461 7562 6666 7265 3a73 563a     ).flatbuffers::V
   c7160:	6365 6f74 3c72 3e54 3a3a 6572 7574 6e72     ector<T>::return
   c7170:	745f 7079 2065 6c66 7461 7562 6666 7265     _type flatbuffer
   c7180:	3a73 563a 6365 6f74 3c72 3e54 3a3a 6547     s::Vector<T>::Ge
   c7190:	2874 6c66 7461 7562 6666 7265 3a73 753a     t(flatbuffers::u
   c71a0:	666f 7366 7465 745f 2029 6f63 736e 2074     offset_t) const 
   c71b0:	775b 7469 2068 2054 203d 6c66 616f 3b74     [with T = float;
   c71c0:	6620 616c 6274 6675 6566 7372 3a3a 6556      flatbuffers::Ve
   c71d0:	7463 726f 543c 3a3e 723a 7465 7275 5f6e     ctor<T>::return_
   c71e0:	7974 6570 3d20 6620 6f6c 7461 203b 6c66     type = float; fl
   c71f0:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c7200:	7465 745f 3d20 6c20 6e6f 2067 6e75 6973     et_t = long unsi
   c7210:	6e67 6465 6920 746e 005d 3a63 552f 6573     gned int].c:/Use
   c7220:	7372 742f 646f 7264 642f 7665 702f 7261     rs/toddr/dev/par
   c7230:	6974 6c63 2d65 4654 696c 6574 6c2f 6269     ticle-TFlite/lib
   c7240:	542f 6e65 6f73 4672 6f6c 4c77 7469 2f65     /TensorFlowLite/
   c7250:	7273 2f63 6874 7269 5f64 6170 7472 2f79     src/third_party/
   c7260:	6c66 7461 7562 6666 7265 2f73 6e69 6c63     flatbuffers/incl
   c7270:	6475 2f65 6c66 7461 7562 6666 7265 2f73     ude/flatbuffers/
   c7280:	6c66 7461 7562 6666 7265 2e73 0068 6c66     flatbuffers.h.fl
   c7290:	7461 7562 6666 7265 3a73 563a 6365 6f74     atbuffers::Vecto
   c72a0:	3c72 3e54 3a3a 6572 7574 6e72 745f 7079     r<T>::return_typ
   c72b0:	2065 6c66 7461 7562 6666 7265 3a73 563a     e flatbuffers::V
   c72c0:	6365 6f74 3c72 3e54 3a3a 6547 2874 6c66     ector<T>::Get(fl
   c72d0:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c72e0:	7465 745f 2029 6f63 736e 2074 775b 7469     et_t) const [wit
   c72f0:	2068 2054 203d 6f6c 676e 6920 746e 203b     h T = long int; 
   c7300:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c7310:	6f74 3c72 3e54 3a3a 6572 7574 6e72 745f     tor<T>::return_t
   c7320:	7079 2065 203d 6f6c 676e 6920 746e 203b     ype = long int; 
   c7330:	6c66 7461 7562 6666 7265 3a73 753a 666f     flatbuffers::uof
   c7340:	7366 7465 745f 3d20 6c20 6e6f 2067 6e75     fset_t = long un
   c7350:	6973 6e67 6465 6920 746e 005d 6c66 7461     signed int].flat
   c7360:	7562 6666 7265 3a73 563a 6365 6f74 3c72     buffers::Vector<
   c7370:	3e54 3a3a 6572 7574 6e72 745f 7079 2065     T>::return_type 
   c7380:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c7390:	6f74 3c72 3e54 3a3a 6547 2874 6c66 7461     tor<T>::Get(flat
   c73a0:	7562 6666 7265 3a73 753a 666f 7366 7465     buffers::uoffset
   c73b0:	745f 2029 6f63 736e 2074 775b 7469 2068     _t) const [with 
   c73c0:	2054 203d 6c66 7461 7562 6666 7265 3a73     T = flatbuffers:
   c73d0:	4f3a 6666 6573 3c74 6674 696c 6574 3a3a     :Offset<tflite::
   c73e0:	6554 736e 726f 3b3e 6620 616c 6274 6675     Tensor>; flatbuf
   c73f0:	6566 7372 3a3a 6556 7463 726f 543c 3a3e     fers::Vector<T>:
   c7400:	723a 7465 7275 5f6e 7974 6570 3d20 6320     :return_type = c
   c7410:	6e6f 7473 7420 6c66 7469 3a65 543a 6e65     onst tflite::Ten
   c7420:	6f73 2a72 203b 6c66 7461 7562 6666 7265     sor*; flatbuffer
   c7430:	3a73 753a 666f 7366 7465 745f 3d20 6c20     s::uoffset_t = l
   c7440:	6e6f 2067 6e75 6973 6e67 6465 6920 746e     ong unsigned int
   c7450:	005d 6c66 7461 7562 6666 7265 3a73 563a     ].flatbuffers::V
   c7460:	6365 6f74 3c72 3e54 3a3a 6572 7574 6e72     ector<T>::return
   c7470:	745f 7079 2065 6c66 7461 7562 6666 7265     _type flatbuffer
   c7480:	3a73 563a 6365 6f74 3c72 3e54 3a3a 6547     s::Vector<T>::Ge
   c7490:	2874 6c66 7461 7562 6666 7265 3a73 753a     t(flatbuffers::u
   c74a0:	666f 7366 7465 745f 2029 6f63 736e 2074     offset_t) const 
   c74b0:	775b 7469 2068 2054 203d 6c66 7461 7562     [with T = flatbu
   c74c0:	6666 7265 3a73 4f3a 6666 6573 3c74 6674     ffers::Offset<tf
   c74d0:	696c 6574 3a3a 7542 6666 7265 3b3e 6620     lite::Buffer>; f
   c74e0:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c74f0:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c7500:	6570 3d20 6320 6e6f 7473 7420 6c66 7469     pe = const tflit
   c7510:	3a65 423a 6675 6566 2a72 203b 6c66 7461     e::Buffer*; flat
   c7520:	7562 6666 7265 3a73 753a 666f 7366 7465     buffers::uoffset
   c7530:	745f 3d20 6c20 6e6f 2067 6e75 6973 6e67     _t = long unsign
   c7540:	6465 6920 746e 005d 6c66 7461 7562 6666     ed int].flatbuff
   c7550:	7265 3a73 563a 6365 6f74 3c72 3e54 3a3a     ers::Vector<T>::
   c7560:	6572 7574 6e72 745f 7079 2065 6c66 7461     return_type flat
   c7570:	7562 6666 7265 3a73 563a 6365 6f74 3c72     buffers::Vector<
   c7580:	3e54 3a3a 6547 2874 6c66 7461 7562 6666     T>::Get(flatbuff
   c7590:	7265 3a73 753a 666f 7366 7465 745f 2029     ers::uoffset_t) 
   c75a0:	6f63 736e 2074 775b 7469 2068 2054 203d     const [with T = 
   c75b0:	6f6c 676e 6c20 6e6f 2067 6e69 3b74 6620     long long int; f
   c75c0:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c75d0:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c75e0:	6570 3d20 6c20 6e6f 2067 6f6c 676e 6920     pe = long long i
   c75f0:	746e 203b 6c66 7461 7562 6666 7265 3a73     nt; flatbuffers:
   c7600:	753a 666f 7366 7465 745f 3d20 6c20 6e6f     :uoffset_t = lon
   c7610:	2067 6e75 6973 6e67 6465 6920 746e 005d     g unsigned int].
   c7620:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c7630:	6f74 3c72 3e54 3a3a 6572 7574 6e72 745f     tor<T>::return_t
   c7640:	7079 2065 6c66 7461 7562 6666 7265 3a73     ype flatbuffers:
   c7650:	563a 6365 6f74 3c72 3e54 3a3a 6547 2874     :Vector<T>::Get(
   c7660:	6c66 7461 7562 6666 7265 3a73 753a 666f     flatbuffers::uof
   c7670:	7366 7465 745f 2029 6f63 736e 2074 775b     fset_t) const [w
   c7680:	7469 2068 2054 203d 6c66 7461 7562 6666     ith T = flatbuff
   c7690:	7265 3a73 4f3a 6666 6573 3c74 6674 696c     ers::Offset<tfli
   c76a0:	6574 3a3a 704f 7265 7461 726f 3b3e 6620     te::Operator>; f
   c76b0:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c76c0:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c76d0:	6570 3d20 6320 6e6f 7473 7420 6c66 7469     pe = const tflit
   c76e0:	3a65 4f3a 6570 6172 6f74 2a72 203b 6c66     e::Operator*; fl
   c76f0:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c7700:	7465 745f 3d20 6c20 6e6f 2067 6e75 6973     et_t = long unsi
   c7710:	6e67 6465 6920 746e 005d 6f4c 6967 2063     gned int].Logic 
   c7720:	7265 6f72 2072 6e69 6d20 6d65 726f 2079     error in memory 
   c7730:	6c70 6e61 656e 2c72 7420 6e65 6f73 2072     planner, tensor 
   c7740:	6425 6820 7361 6120 206e 6e69 6176 696c     %d has an invali
   c7750:	2064 696c 6566 6974 656d 4100 6572 616e     d lifetime.Arena
   c7760:	7320 7a69 2065 7369 7420 6f6f 7320 616d      size is too sma
   c7770:	6c6c 6620 726f 6120 7463 7669 7461 6f69     ll for activatio
   c7780:	206e 7562 6666 7265 2e73 4e20 6565 6564     n buffers. Neede
   c7790:	2064 6425 6220 7475 6f20 6c6e 2079 6425     d %d but only %d
   c77a0:	7720 7361 6120 6176 6c69 6261 656c 002e      was available..
   c77b0:	6156 6972 6261 656c 6920 2073 6f6e 2074     Variable is not 
   c77c0:	6c61 6f6c 6163 6574 0064 6e49 6f76 656b     allocated.Invoke
   c77d0:	2928 6320 6c61 656c 2064 6661 6574 2072     () called after 
   c77e0:	6e69 7469 6169 696c 617a 6974 6e6f 6620     initialization f
   c77f0:	6961 656c 0a64 4d00 7369 6973 676e 7220     ailed..Missing r
   c7800:	6765 7369 7274 7461 6f69 206e 6f66 2072     egistration for 
   c7810:	706f 6f63 6564 695f 646e 7865 2520 0a64     opcode_index %d.
   c7820:	5300 696b 7070 6e69 2067 706f 6620 726f     .Skipping op for
   c7830:	6f20 6370 646f 5f65 6e69 6564 2078 6425      opcode_index %d
   c7840:	000a 6e55 7573 7070 726f 6574 2064 6562     ..Unsupported be
   c7850:	6168 6976 726f 203a 6f66 6e75 2064 7562     havior: found bu
   c7860:	6c69 6974 206e 706f 7265 7461 726f 2520     iltin operator %
   c7870:	2073 6977 6874 6320 7375 6f74 206d 706f     s with custom op
   c7880:	6974 6e6f 2e73 000a 6f4e 6564 2520 2073     tions...Node %s 
   c7890:	6e28 6d75 6562 2072 6425 2029 6166 6c69     (number %d) fail
   c78a0:	6465 7420 206f 7270 7065 7261 2065 6977     ed to prepare wi
   c78b0:	6874 7320 6174 7574 2073 6425 4e00 646f     th status %d.Nod
   c78c0:	2065 7325 2820 756e 626d 7265 2520 2964     e %s (number %d)
   c78d0:	6620 6961 656c 2064 6f74 6920 766e 6b6f      failed to invok
   c78e0:	2065 6977 6874 7320 6174 7574 2073 6425     e with status %d
   c78f0:	4900 706e 7475 6920 646e 7865 2520 2064     .Input index %d 
   c7900:	756f 2074 666f 7220 6e61 6567 2820 656c     out of range (le
   c7910:	676e 6874 6920 2073 6425 0029 754f 7074     ngth is %d).Outp
   c7920:	7475 6920 646e 7865 2520 2064 756f 2074     ut index %d out 
   c7930:	666f 7220 6e61 6567 2820 656c 676e 6874     of range (length
   c7940:	6920 2073 6425 0029 4441 0044 5641 5245      is %d).ADD.AVER
   c7950:	4741 5f45 4f50 4c4f 325f 0044 4f43 434e     AGE_POOL_2D.CONC
   c7960:	5441 4e45 5441 4f49 004e 4544 5450 5748     ATENATION.DEPTHW
   c7970:	5349 5f45 4f43 564e 325f 0044 4544 5450     ISE_CONV_2D.DEPT
   c7980:	5f48 4f54 535f 4150 4543 4400 5145 4155     H_TO_SPACE.DEQUA
   c7990:	544e 5a49 0045 4d45 4542 4444 4e49 5f47     NTIZE.EMBEDDING_
   c79a0:	4f4c 4b4f 5055 4600 4f4c 524f 4600 4c55     LOOKUP.FLOOR.FUL
   c79b0:	594c 435f 4e4f 454e 5443 4445 4800 5341     LY_CONNECTED.HAS
   c79c0:	5448 4241 454c 4c5f 4f4f 554b 0050 324c     HTABLE_LOOKUP.L2
   c79d0:	4e5f 524f 414d 494c 415a 4954 4e4f 4c00     _NORMALIZATION.L
   c79e0:	5f32 4f50 4c4f 325f 0044 4f4c 4143 5f4c     2_POOL_2D.LOCAL_
   c79f0:	4552 5053 4e4f 4553 4e5f 524f 414d 494c     RESPONSE_NORMALI
   c7a00:	415a 4954 4e4f 4c00 474f 5349 4954 0043     ZATION.LOGISTIC.
   c7a10:	534c 5f48 5250 4a4f 4345 4954 4e4f 4d00     LSH_PROJECTION.M
   c7a20:	5841 505f 4f4f 5f4c 4432 4d00 4c55 5200     AX_POOL_2D.MUL.R
   c7a30:	4c45 5f55 314e 545f 5f4f 0031 4552 554c     ELU_N1_TO_1.RELU
   c7a40:	0036 4552 4853 5041 0045 4552 4953 455a     6.RESHAPE.RESIZE
   c7a50:	425f 4c49 4e49 4145 0052 5053 4341 5f45     _BILINEAR.SPACE_
   c7a60:	4f54 445f 5045 4854 5300 4456 0046 4154     TO_DEPTH.SVDF.TA
   c7a70:	484e 4300 4e4f 4143 5f54 4d45 4542 4444     NH.CONCAT_EMBEDD
   c7a80:	4e49 5347 5300 494b 5f50 5247 4d41 4300     INGS.SKIP_GRAM.C
   c7a90:	4c41 004c 5543 5453 4d4f 4500 424d 4445     ALL.CUSTOM.EMBED
   c7aa0:	4944 474e 4c5f 4f4f 554b 5f50 5053 5241     DING_LOOKUP_SPAR
   c7ab0:	4553 5500 494e 4944 4552 5443 4f49 414e     SE.UNIDIRECTIONA
   c7ac0:	5f4c 4553 5551 4e45 4543 525f 4e4e 4700     L_SEQUENCE_RNN.G
   c7ad0:	5441 4548 0052 4142 4354 5f48 4f54 535f     ATHER.BATCH_TO_S
   c7ae0:	4150 4543 4e5f 0044 5053 4341 5f45 4f54     PACE_ND.SPACE_TO
   c7af0:	425f 5441 4843 4e5f 0044 5254 4e41 5053     _BATCH_ND.TRANSP
   c7b00:	534f 0045 454d 4e41 5300 4255 5300 5551     OSE.MEAN.SUB.SQU
   c7b10:	4545 455a 5500 494e 4944 4552 5443 4f49     EEZE.UNIDIRECTIO
   c7b20:	414e 5f4c 4553 5551 4e45 4543 4c5f 5453     NAL_SEQUENCE_LST
   c7b30:	004d 5453 4952 4544 5f44 4c53 4349 0045     M.STRIDED_SLICE.
   c7b40:	4942 4944 4552 5443 4f49 414e 5f4c 4553     BIDIRECTIONAL_SE
   c7b50:	5551 4e45 4543 525f 4e4e 4500 5058 5400     QUENCE_RNN.EXP.T
   c7b60:	504f 5f4b 3256 5300 4c50 5449 4c00 474f     OPK_V2.SPLIT.LOG
   c7b70:	535f 464f 4d54 5841 4400 4c45 4745 5441     _SOFTMAX.DELEGAT
   c7b80:	0045 4942 4944 4552 5443 4f49 414e 5f4c     E.BIDIRECTIONAL_
   c7b90:	4553 5551 4e45 4543 4c5f 5453 004d 4143     SEQUENCE_LSTM.CA
   c7ba0:	5453 5000 4552 554c 4d00 5841 4d49 4d55     ST.PRELU.MAXIMUM
   c7bb0:	4100 4752 4d5f 5841 4d00 4e49 4d49 4d55     .ARG_MAX.MINIMUM
   c7bc0:	4c00 5345 0053 454e 0047 4150 5644 0032     .LESS.NEG.PADV2.
   c7bd0:	5247 4145 4554 0052 5247 4145 4554 5f52     GREATER.GREATER_
   c7be0:	5145 4155 004c 454c 5353 455f 5551 4c41     EQUAL.LESS_EQUAL
   c7bf0:	5300 4c45 4345 0054 4953 004e 5254 4e41     .SELECT.SIN.TRAN
   c7c00:	5053 534f 5f45 4f43 564e 5300 4150 5352     SPOSE_CONV.SPARS
   c7c10:	5f45 4f54 445f 4e45 4553 5400 4c49 0045     E_TO_DENSE.TILE.
   c7c20:	5845 4150 444e 445f 4d49 0053 4f4e 5f54     EXPAND_DIMS.NOT_
   c7c30:	5145 4155 004c 4f4c 0047 5553 004d 5352     EQUAL.LOG.SUM.RS
   c7c40:	5251 0054 4f50 0057 5241 5f47 494d 004e     QRT.POW.ARG_MIN.
   c7c50:	4146 454b 515f 4155 544e 5200 4445 4355     FAKE_QUANT.REDUC
   c7c60:	5f45 5250 444f 5200 4445 4355 5f45 414d     E_PROD.REDUCE_MA
   c7c70:	0058 4f4c 4947 4143 5f4c 524f 4f00 454e     X.LOGICAL_OR.ONE
   c7c80:	485f 544f 4c00 474f 4349 4c41 415f 444e     _HOT.LOGICAL_AND
   c7c90:	4c00 474f 4349 4c41 4e5f 544f 5500 504e     .LOGICAL_NOT.UNP
   c7ca0:	4341 004b 4552 5544 4543 4d5f 4e49 4600     ACK.REDUCE_MIN.F
   c7cb0:	4f4c 524f 445f 5649 5200 4445 4355 5f45     LOOR_DIV.REDUCE_
   c7cc0:	4e41 0059 5153 4155 4552 5a00 5245 534f     ANY.SQUARE.ZEROS
   c7cd0:	4c5f 4b49 0045 4946 4c4c 4600 4f4c 524f     _LIKE.FILL.FLOOR
   c7ce0:	4d5f 444f 5200 4e41 4547 5200 5345 5a49     _MOD.RANGE.RESIZ
   c7cf0:	5f45 454e 5241 5345 5f54 454e 4749 4248     E_NEAREST_NEIGHB
   c7d00:	524f 4c00 4145 594b 525f 4c45 0055 5153     OR.LEAKY_RELU.SQ
   c7d10:	4155 4552 5f44 4944 4646 5245 4e45 4543     UARED_DIFFERENCE
   c7d20:	4d00 5249 4f52 5f52 4150 0044 4241 0053     .MIRROR_PAD.ABS.
   c7d30:	5053 494c 5f54 0056 4e55 5149 4555 4300     SPLIT_V.UNIQUE.C
   c7d40:	4945 004c 4552 4556 5352 5f45 3256 4100     EIL.REVERSE_V2.A
   c7d50:	4444 4e5f 4700 5441 4548 5f52 444e 4300     DD_N.GATHER_ND.C
   c7d60:	534f 5700 4548 4552 5200 4e41 004b 4552     OS.WHERE.RANK.RE
   c7d70:	4556 5352 5f45 4553 5551 4e45 4543 4d00     VERSE_SEQUENCE.M
   c7d80:	5441 4952 5f58 4944 4741 4d00 5441 4952     ATRIX_DIAG.MATRI
   c7d90:	5f58 4553 5f54 4944 4741 5200 554f 444e     X_SET_DIAG.ROUND
   c7da0:	4800 5241 5f44 5753 5349 0048 4649 5700     .HARD_SWISH.IF.W
   c7db0:	4948 454c 4e00 4e4f 4d5f 5841 535f 5055     HILE.NON_MAX_SUP
   c7dc0:	5250 5345 4953 4e4f 565f 0034 4f4e 5f4e     PRESSION_V4.NON_
   c7dd0:	414d 5f58 5553 5050 4552 5353 4f49 5f4e     MAX_SUPPRESSION_
   c7de0:	3556 4600 616c 4274 6675 6566 7372 3120     V5.FlatBuffers 1
   c7df0:	312e 2e31 0030 0000                         .11.0...

000c7df8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
   c7df8:	7948 000c 794c 000c 795c 000c 7974 000c     Hy..Ly..\y..ty..
   c7e08:	796a 000c 797c 000c 798b 000c 7996 000c     jy..|y...y...y..
   c7e18:	79a7 000c 79ad 000c 79bd 000c 79ce 000c     .y...y...y...y..
   c7e28:	79df 000c 79ea 000c 7a07 000c 7a10 000c     .y...y...z...z..
   c7e38:	7b99 000c 7a1f 000c 7a2b 000c 7ba4 000c     .{...z..+z...{..
   c7e48:	7a2f 000c 7a3c 000c 7a42 000c 7a4a 000c     /z..<z..Bz..Jz..
   c7e58:	7b57 000c 7b71 000c 7a5a 000c 7a69 000c     W{..q{..Zz..iz..
   c7e68:	7a6e 000c 7a73 000c 7a85 000c 7a8f 000c     nz..sz...z...z..
   c7e78:	7a94 000c 7a9b 000c 7d28 000c 7ab3 000c     .z...z..(}...z..
   c7e88:	7acf 000c 7ad6 000c 7ae8 000c 7afa 000c     .z...z...z...z..
   c7e98:	7b04 000c 7b09 000c 7cb5 000c 7b0d 000c     .{...{...|...{..
   c7ea8:	7b15 000c 7b32 000c 7b40 000c 7b5b 000c     .{..2{..@{..[{..
   c7eb8:	7b5f 000c 7b67 000c 7b6d 000c 7b79 000c     _{..g{..m{..y{..
   c7ec8:	7b82 000c 7b9e 000c 7ba3 000c 7ba9 000c     .{...{...{...{..
   c7ed8:	7bb1 000c 7bb9 000c 7bc1 000c 7bc6 000c     .{...{...{...{..
   c7ee8:	7bca 000c 7bd0 000c 7bd8 000c 7be6 000c     .{...{...{...{..
   c7ef8:	7bf1 000c 7b3a 000c 7bf8 000c 7bfc 000c     .{..:{...{...{..
   c7f08:	7c0b 000c 7c1b 000c 7c20 000c 7be0 000c     .|...|.. |...{..
   c7f18:	7c2c 000c 7c36 000c 7c3a 000c 7c3f 000c     ,|..6|..:|..?|..
   c7f28:	7c3e 000c 7a44 000c 7c44 000c 7c48 000c     >|..Dz..D|..H|..
   c7f38:	7c50 000c 7c5b 000c 7c67 000c 7c9f 000c     P|..[|..g|...|..
   c7f48:	7c72 000c 7c7d 000c 7c85 000c 7c91 000c     r|..}|...|...|..
   c7f58:	7c9d 000c 7ca4 000c 7caf 000c 7cb9 000c     .|...|...|...|..
   c7f68:	7cc4 000c 7ccb 000c 7cd6 000c 7cdb 000c     .|...|...|...|..
   c7f78:	7ce5 000c 7ceb 000c 7d03 000c 7d0e 000c     .|...|...}...}..
   c7f88:	7d21 000c 7d2c 000c 7d30 000c 7d38 000c     !}..,}..0}..8}..
   c7f98:	7d3f 000c 7d44 000c 7d4f 000c 7d55 000c     ?}..D}..O}..U}..
   c7fa8:	7d5f 000c 7d63 000c 7d69 000c 7ba5 000c     _}..c}..i}...{..
   c7fb8:	7d6e 000c 7d7f 000c 798d 000c 7d8b 000c     n}...}...y...}..
   c7fc8:	7d9b 000c 7da1 000c 7dac 000c 7daf 000c     .}...}...}...}..
   c7fd8:	7db5 000c 7dcc 000c 0000 0000               .}...}......

000c7fe4 <_ZTVN6tflite12_GLOBAL__N_118StackDataAllocatorE>:
	...
   c7fec:	5e29 000b 5e33 000b 5e35 000b 5e57 000b     )^..3^..5^..W^..
   c7ffc:	6e49 0066 614e 004e 322a 005e 0403 0b08     Inf.NaN.*2^.....
   c800c:	0e0d 1211 1413 1615 0017 7865 6f70 656e     ..........expone
   c801c:	746e 3e20 203d 0030 6e49 6574 6567 5472     nt >= 0.IntegerT
   c802c:	7079 2065 6567 6d6d 6f6c 7077 3a3a 6f52     ype gemmlowp::Ro
   c803c:	6e75 6964 676e 6944 6976 6564 7942 4f50     undingDivideByPO
   c804c:	2854 6e49 6574 6567 5472 7079 2c65 6920     T(IntegerType, i
   c805c:	746e 2029 775b 7469 2068 6e49 6574 6567     nt) [with Intege
   c806c:	5472 7079 2065 203d 6f6c 676e 6920 746e     rType = long int
   c807c:	005d 3a63 552f 6573 7372 742f 646f 7264     ].c:/Users/toddr
   c808c:	642f 7665 702f 7261 6974 6c63 2d65 4654     /dev/particle-TF
   c809c:	696c 6574 6c2f 6269 542f 6e65 6f73 4672     lite/lib/TensorF
   c80ac:	6f6c 4c77 7469 2f65 7273 2f63 6874 7269     lowLite/src/thir
   c80bc:	5f64 6170 7472 2f79 6567 6d6d 6f6c 7077     d_party/gemmlowp
   c80cc:	662f 7869 6465 6f70 6e69 2f74 6966 6578     /fixedpoint/fixe
   c80dc:	7064 696f 746e 682e 6500 7078 6e6f 6e65     dpoint.h.exponen
   c80ec:	2074 3d3c 3320 0031 6e49 7570 7374 6120     t <= 31.Inputs a
   c80fc:	646e 6f20 7475 7570 7374 6e20 746f 6120     nd outputs not a
   c810c:	6c6c 6620 6f6c 7461 757c 6e69 3874 697c     ll float|uint8|i
   c811c:	746e 2038 7974 6570 2e73 5400 7079 2065     nt8 types..Type 
   c812c:	2527 2773 6920 2073 6f6e 2074 7573 7070     '%s' is not supp
   c813c:	726f 6574 2064 7962 7520 706e 6361 2e6b     orted by unpack.
   c814c:	4f00 6c6e 2079 6c66 616f 3374 2c32 7520     .Only float32, u
   c815c:	6e69 3874 6120 646e 6920 746e 2038 7261     int8 and int8 ar
   c816c:	2065 7573 7070 726f 6574 2064 7563 7272     e supported curr
   c817c:	6e65 6c74 2c79 6720 746f 2520 2e73 4f00     ently, got %s..O
   c818c:	6c6e 2079 6e69 3374 2032 7261 2065 7573     nly int32 are su
   c819c:	7070 726f 6574 2064 7563 7272 6e65 6c74     pported currentl
   c81ac:	2c79 6720 746f 2520 2e73 6300 2f3a 7355     y, got %s..c:/Us
   c81bc:	7265 2f73 6f74 6464 2f72 6564 2f76 6170     ers/toddr/dev/pa
   c81cc:	7472 6369 656c 542d 6c46 7469 2f65 696c     rticle-TFlite/li
   c81dc:	2f62 6554 736e 726f 6c46 776f 694c 6574     b/TensorFlowLite
   c81ec:	732f 6372 742f 6e65 6f73 6672 6f6c 2f77     /src/tensorflow/
   c81fc:	696c 6574 652f 7078 7265 6d69 6e65 6174     lite/experimenta
   c820c:	2f6c 696d 7263 2f6f 656b 6e72 6c65 2f73     l/micro/kernels/
   c821c:	7473 6972 6564 5f64 6c73 6369 2e65 7063     strided_slice.cp
   c822c:	2070 7473 6972 6564 7620 6c61 6575 6820     p stride value h
   c823c:	7361 7420 206f 6562 6e20 6e6f 7a2d 7265     as to be non-zer
   c824c:	006f 3a63 552f 6573 7372 742f 646f 7264     o.c:/Users/toddr
   c825c:	642f 7665 702f 7261 6974 6c63 2d65 4654     /dev/particle-TF
   c826c:	696c 6574 6c2f 6269 542f 6e65 6f73 4672     lite/lib/TensorF
   c827c:	6f6c 4c77 7469 2f65 7273 2f63 6574 736e     lowLite/src/tens
   c828c:	726f 6c66 776f 6c2f 7469 2f65 7865 6570     orflow/lite/expe
   c829c:	6972 656d 746e 6c61 6d2f 6369 6f72 6b2f     rimental/micro/k
   c82ac:	7265 656e 736c 732f 7274 6469 6465 735f     ernels/strided_s
   c82bc:	696c 6563 632e 7070 6400 6d69 735f 6168     lice.cpp.dim_sha
   c82cc:	6570 6f00 7475 7570 5f74 6873 7061 2d65     pe.output_shape-
   c82dc:	643e 7461 5b61 6873 7061 5f65 6973 657a     >data[shape_size
   c82ec:	005d 6873 7061 5f65 6973 657a 6f00 7475     ].shape_size.out
   c82fc:	7570 5f74 6873 7061 2d65 733e 7a69 0065     put_shape->size.
   c830c:	754e 496d 706e 7475 2873 6f6e 6564 0029     NumInputs(node).
   c831c:	754e 4f6d 7475 7570 7374 6e28 646f 2965     NumOutputs(node)
   c832c:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c833c:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c834c:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c835c:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c836c:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c837c:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c838c:	6e72 6c65 2f73 7473 6972 6564 5f64 6c73     rnels/strided_sl
   c839c:	6369 2e65 7063 2070 6e69 7570 2074 6964     ice.cpp input di
   c83ac:	206d 6873 756f 646c 6e20 746f 6520 6378     m should not exc
   c83bc:	6565 2064 0034 7954 6570 2520 2064 7369     eed 4.Type %d is
   c83cc:	6320 7275 6572 746e 796c 6e20 746f 7320      currently not s
   c83dc:	7075 6f70 7472 6465 6220 2079 7453 6972     upported by Stri
   c83ec:	6564 5364 696c 6563 002e 3a63 552f 6573     dedSlice..c:/Use
   c83fc:	7372 742f 646f 7264 642f 7665 702f 7261     rs/toddr/dev/par
   c840c:	6974 6c63 2d65 4654 696c 6574 6c2f 6269     ticle-TFlite/lib
   c841c:	542f 6e65 6f73 4672 6f6c 4c77 7469 2f65     /TensorFlowLite/
   c842c:	7273 2f63 6574 736e 726f 6c66 776f 6c2f     src/tensorflow/l
   c843c:	7469 2f65 7865 6570 6972 656d 746e 6c61     ite/experimental
   c844c:	6d2f 6369 6f72 6b2f 7265 656e 736c 632f     /micro/kernels/c
   c845c:	6965 2e6c 7063 0070 756f 7074 7475 3e2d     eil.cpp.output->
   c846c:	7974 6570 6900 706e 7475 3e2d 7962 6574     type.input->byte
   c847c:	0073 756f 7074 7475 3e2d 7962 6574 0073     s.output->bytes.
   c848c:	6e69 7570 2d74 643e 6d69 2d73 733e 7a69     input->dims->siz
   c849c:	0065 756f 7074 7475 3e2d 6964 736d 3e2d     e.output->dims->
   c84ac:	6973 657a 6900 706e 7475 3e2d 6964 736d     size.input->dims
   c84bc:	3e2d 6164 6174 695b 005d 756f 7074 7475     ->data[i].output
   c84cc:	3e2d 6964 736d 3e2d 6164 6174 695b 005d     ->dims->data[i].
   c84dc:	7954 6570 2720 7325 2027 7369 6e20 746f     Type '%s' is not
   c84ec:	7320 7075 6f70 7472 6465 6220 2079 6170      supported by pa
   c84fc:	6b63 002e 654e 2067 6e6f 796c 6320 7275     ck..Neg only cur
   c850c:	6572 746e 796c 7320 7075 6f70 7472 2073     rently supports 
   c851c:	6c66 616f 3374 2c32 6720 746f 2520 2e64     float32, got %d.
   c852c:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c853c:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c854c:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c855c:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c856c:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c857c:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c858c:	6e72 6c65 2f73 6564 7571 6e61 6974 657a     rnels/dequantize
   c859c:	632e 7070 6900 706e 7475 3e2d 7974 6570     .cpp.input->type
   c85ac:	3d20 203d 546b 4c66 7469 5565 6e49 3874      == kTfLiteUInt8
   c85bc:	7c20 207c 6e69 7570 2d74 743e 7079 2065      || input->type 
   c85cc:	3d3d 6b20 6654 694c 6574 6e49 3874 6f00     == kTfLiteInt8.o
   c85dc:	7475 7570 2d74 743e 7079 2065 3d3d 6b20     utput->type == k
   c85ec:	6654 694c 6574 6c46 616f 3374 0032 7954     TfLiteFloat32.Ty
   c85fc:	6570 2520 2073 2528 2964 6e20 746f 7320     pe %s (%d) not s
   c860c:	7075 6f70 7472 6465 002e 7954 6570 2520     upported..Type %
   c861c:	2073 6f6e 2074 7563 7272 6e65 6c74 2079     s not currently 
   c862c:	7573 7070 726f 6574 2e64 4900 706e 7475     supported..Input
   c863c:	7420 7079 2065 7325 6920 2073 6f6e 2074      type %s is not 
   c864c:	7563 7272 6e65 6c74 2079 7573 7070 726f     currently suppor
   c865c:	6574 0064 3a63 552f 6573 7372 742f 646f     ted.c:/Users/tod
   c866c:	7264 642f 7665 702f 7261 6974 6c63 2d65     dr/dev/particle-
   c867c:	4654 696c 6574 6c2f 6269 542f 6e65 6f73     TFlite/lib/Tenso
   c868c:	4672 6f6c 4c77 7469 2f65 7273 2f63 6574     rFlowLite/src/te
   c869c:	736e 726f 6c66 776f 6c2f 7469 2f65 7865     nsorflow/lite/ex
   c86ac:	6570 6972 656d 746e 6c61 6d2f 6369 6f72     perimental/micro
   c86bc:	6b2f 7265 656e 736c 732f 666f 6d74 7861     /kernels/softmax
   c86cc:	632e 7070 6f00 7475 7570 2d74 703e 7261     .cpp.output->par
   c86dc:	6d61 2e73 657a 6f72 705f 696f 746e 6f00     ams.zero_point.o
   c86ec:	7475 7570 2d74 703e 7261 6d61 2e73 6373     utput->params.sc
   c86fc:	6c61 2065 3d3d 3120 662e 2f20 3220 3635     ale == 1.f / 256
   c870c:	4f00 6c6e 2079 4431 202c 4432 6120 646e     .Only 1D, 2D and
   c871c:	3420 2044 6574 736e 726f 2073 7573 7070      4D tensors supp
   c872c:	726f 6574 2064 7563 7272 6e65 6c74 2c79     orted currently,
   c873c:	6720 746f 2520 4464 002e 6e4f 796c 3220      got %dD..Only 2
   c874c:	2044 6e61 2064 4434 7420 6e65 6f73 7372     D and 4D tensors
   c875c:	7320 7075 6f70 7472 6465 6320 7275 6572      supported curre
   c876c:	746e 796c 202c 6f67 2074 6425 2e44 4f00     ntly, got %dD..O
   c877c:	6c6e 2079 6c66 616f 3374 2032 6e61 2064     nly float32 and 
   c878c:	6975 746e 5f38 2074 7573 7070 726f 6574     uint8_t supporte
   c879c:	2064 7563 7272 6e65 6c74 2c79 6720 746f     d currently, got
   c87ac:	2520 2e64 6300 2f3a 7355 7265 2f73 6f74      %d..c:/Users/to
   c87bc:	6464 2f72 6564 2f76 6170 7472 6369 656c     ddr/dev/particle
   c87cc:	542d 6c46 7469 2f65 696c 2f62 6554 736e     -TFlite/lib/Tens
   c87dc:	726f 6c46 776f 694c 6574 732f 6372 742f     orFlowLite/src/t
   c87ec:	6e65 6f73 6672 6f6c 2f77 696c 6574 652f     ensorflow/lite/e
   c87fc:	7078 7265 6d69 6e65 6174 2f6c 696d 7263     xperimental/micr
   c880c:	2f6f 656b 6e72 6c65 2f73 6f63 766e 632e     o/kernels/conv.c
   c881c:	7070 6800 7361 625f 6169 2073 7c7c 6e20     pp.has_bias || n
   c882c:	646f 2d65 693e 706e 7475 2d73 733e 7a69     ode->inputs->siz
   c883c:	2065 3d3d 3220 6e00 646f 2d65 6f3e 7475     e == 2.node->out
   c884c:	7570 7374 3e2d 6973 657a 6300 2f3a 7355     puts->size.c:/Us
   c885c:	7265 2f73 6f74 6464 2f72 6564 2f76 6170     ers/toddr/dev/pa
   c886c:	7472 6369 656c 542d 6c46 7469 2f65 696c     rticle-TFlite/li
   c887c:	2f62 6554 736e 726f 6c46 776f 694c 6574     b/TensorFlowLite
   c888c:	732f 6372 742f 6e65 6f73 6672 6f6c 2f77     /src/tensorflow/
   c889c:	696c 6574 652f 7078 7265 6d69 6e65 6174     lite/experimenta
   c88ac:	2f6c 696d 7263 2f6f 656b 6e72 6c65 2f73     l/micro/kernels/
   c88bc:	7073 696c 2e74 7063 2070 6f4e 206e 6f63     split.cpp Non co
   c88cc:	736e 6174 746e 6120 6978 2073 6574 736e     nstant axis tens
   c88dc:	726f 6e20 746f 7320 7075 6f70 7472 6465     or not supported
   c88ec:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c88fc:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c890c:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c891c:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c892c:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c893c:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c894c:	6e72 6c65 2f73 7073 696c 2e74 7063 0070     rnels/split.cpp.
   c895c:	7861 7369 765f 6c61 6575 3e20 203d 0030     axis_value >= 0.
   c896c:	7861 7369 765f 6c61 6575 3c20 4e20 6d75     axis_value < Num
   c897c:	6944 656d 736e 6f69 736e 6928 706e 7475     Dimensions(input
   c898c:	0029 7954 6570 2520 2073 7563 7272 6e65     ).Type %s curren
   c899c:	6c74 2079 6f6e 2074 7573 7070 726f 6574     tly not supporte
   c89ac:	2e64 4400 656f 2073 6f6e 2074 7573 7070     d..Does not supp
   c89bc:	726f 2074 7974 6570 2520 2c64 7220 7165     ort type %d, req
   c89cc:	6975 6572 2073 6f62 6c6f 667c 6f6c 7461     uires bool|float
   c89dc:	697c 746e 757c 6e69 3874 4400 656f 2073     |int|uint8.Does 
   c89ec:	6f6e 2074 7573 7070 726f 2074 7974 6570     not support type
   c89fc:	2520 2c64 7220 7165 6975 6572 2073 6c66      %d, requires fl
   c8a0c:	616f 7c74 6e69 7c74 6975 746e 0038 3a63     oat|int|uint8.c:
   c8a1c:	552f 6573 7372 742f 646f 7264 642f 7665     /Users/toddr/dev
   c8a2c:	702f 7261 6974 6c63 2d65 4654 696c 6574     /particle-TFlite
   c8a3c:	6c2f 6269 542f 6e65 6f73 4672 6f6c 4c77     /lib/TensorFlowL
   c8a4c:	7469 2f65 7273 2f63 6574 736e 726f 6c66     ite/src/tensorfl
   c8a5c:	776f 6c2f 7469 2f65 7865 6570 6972 656d     ow/lite/experime
   c8a6c:	746e 6c61 6d2f 6369 6f72 6b2f 7265 656e     ntal/micro/kerne
   c8a7c:	736c 712f 6175 746e 7a69 2e65 7063 0070     ls/quantize.cpp.
   c8a8c:	756f 7074 7475 3e2d 7571 6e61 6974 617a     output->quantiza
   c8a9c:	6974 6e6f 742e 7079 0065 6661 6966 656e     tion.type.affine
   c8aac:	715f 6175 746e 7a69 7461 6f69 2d6e 733e     _quantization->s
   c8abc:	6163 656c 3e2d 6973 657a 3d20 203d 0031     cale->size == 1.
   c8acc:	6e69 7570 2d74 743e 7079 2065 3d3d 6b20     input->type == k
   c8adc:	6654 694c 6574 6c46 616f 3374 0032 756f     TfLiteFloat32.ou
   c8aec:	7074 7475 3e2d 7974 6570 3d20 203d 546b     tput->type == kT
   c8afc:	4c66 7469 5565 6e49 3874 7c20 207c 756f     fLiteUInt8 || ou
   c8b0c:	7074 7475 3e2d 7974 6570 3d20 203d 546b     tput->type == kT
   c8b1c:	4c66 7469 4965 746e 0038 754f 7074 7475     fLiteInt8.Output
   c8b2c:	7420 7079 2065 7325 2820 6425 2029 6f6e      type %s (%d) no
   c8b3c:	2074 7573 7070 726f 6574 0064 3a63 552f     t supported.c:/U
   c8b4c:	6573 7372 742f 646f 7264 642f 7665 702f     sers/toddr/dev/p
   c8b5c:	7261 6974 6c63 2d65 4654 696c 6574 6c2f     article-TFlite/l
   c8b6c:	6269 542f 6e65 6f73 4672 6f6c 4c77 7469     ib/TensorFlowLit
   c8b7c:	2f65 7273 2f63 6574 736e 726f 6c66 776f     e/src/tensorflow
   c8b8c:	6c2f 7469 2f65 7865 6570 6972 656d 746e     /lite/experiment
   c8b9c:	6c61 6d2f 6369 6f72 6b2f 7265 656e 736c     al/micro/kernels
   c8bac:	722f 7365 6168 6570 632e 7070 4e00 6d75     /reshape.cpp.Num
   c8bbc:	6e49 7570 7374 6e28 646f 2965 3d20 203d     Inputs(node) == 
   c8bcc:	2031 7c7c 4e20 6d75 6e49 7570 7374 6e28     1 || NumInputs(n
   c8bdc:	646f 2965 3d20 203d 0032 312d 7300 7274     ode) == 2.-1.str
   c8bec:	7465 6863 645f 6d69 6e00 6d75 6f5f 7475     etch_dim.num_out
   c8bfc:	7570 5f74 6c65 6d65 6e65 7374 6e00 6d75     put_elements.num
   c8c0c:	695f 706e 7475 655f 656c 656d 746e 0073     _input_elements.
   c8c1c:	7954 6570 2520 2073 2528 2964 6920 2073     Type %s (%d) is 
   c8c2c:	6f6e 2074 7573 7070 726f 6574 2064 7962     not supported by
   c8c3c:	4d20 7861 6d69 6d75 4d2f 6e69 6d69 6d75      Maximum/Minimum
   c8c4c:	002e 7551 6e61 6974 657a 2064 7546 6c6c     ..Quantized Full
   c8c5c:	4379 6e6f 656e 7463 6465 6520 7078 6365     yConnected expec
   c8c6c:	7374 6f20 7475 7570 2074 6164 6174 7420     ts output data t
   c8c7c:	7079 2065 6975 746e 2038 726f 6920 746e     ype uint8 or int
   c8c8c:	3631 5400 7079 2065 6425 6e20 746f 6320     16.Type %d not c
   c8c9c:	7275 6572 746e 796c 7320 7075 6f70 7472     urrently support
   c8cac:	6465 002e 3a63 552f 6573 7372 742f 646f     ed..c:/Users/tod
   c8cbc:	7264 642f 7665 702f 7261 6974 6c63 2d65     dr/dev/particle-
   c8ccc:	4654 696c 6574 6c2f 6269 542f 6e65 6f73     TFlite/lib/Tenso
   c8cdc:	4672 6f6c 4c77 7469 2f65 7273 2f63 6574     rFlowLite/src/te
   c8cec:	736e 726f 6c66 776f 6c2f 7469 2f65 7865     nsorflow/lite/ex
   c8cfc:	6570 6972 656d 746e 6c61 6d2f 6369 6f72     perimental/micro
   c8d0c:	6b2f 7265 656e 736c 722f 756f 646e 632e     /kernels/round.c
   c8d1c:	7070 0000                                   pp..

000c8d20 <_ZTVN6tflite3ops5micro14AllOpsResolverE>:
	...
   c8d28:	53b3 000b 53e1 000b 0929 000c 092b 000c     .S...S..)...+...
   c8d38:	3a63 552f 6573 7372 742f 646f 7264 642f     c:/Users/toddr/d
   c8d48:	7665 702f 7261 6974 6c63 2d65 4654 696c     ev/particle-TFli
   c8d58:	6574 6c2f 6269 542f 6e65 6f73 4672 6f6c     te/lib/TensorFlo
   c8d68:	4c77 7469 2f65 7273 2f63 6574 736e 726f     wLite/src/tensor
   c8d78:	6c66 776f 6c2f 7469 2f65 7865 6570 6972     flow/lite/experi
   c8d88:	656d 746e 6c61 6d2f 6369 6f72 6b2f 7265     mental/micro/ker
   c8d98:	656e 736c 652f 656c 656d 746e 6977 6573     nels/elementwise
   c8da8:	632e 7070 4900 706e 7475 6420 7461 2061     .cpp.Input data 
   c8db8:	7974 6570 2520 2073 2528 2964 6920 2073     type %s (%d) is 
   c8dc8:	6f6e 2074 7573 7070 726f 6574 2e64 6500     not supported..e
   c8dd8:	7078 6365 6574 5f64 7974 6570 6300 2f3a     xpected_type.c:/
   c8de8:	7355 7265 2f73 6f74 6464 2f72 6564 2f76     Users/toddr/dev/
   c8df8:	6170 7472 6369 656c 542d 6c46 7469 2f65     particle-TFlite/
   c8e08:	696c 2f62 6554 736e 726f 6c46 776f 694c     lib/TensorFlowLi
   c8e18:	6574 732f 6372 742f 6e65 6f73 6672 6f6c     te/src/tensorflo
   c8e28:	2f77 696c 6574 652f 7078 7265 6d69 6e65     w/lite/experimen
   c8e38:	6174 2f6c 696d 7263 2f6f 656b 6e72 6c65     tal/micro/kernel
   c8e48:	2f73 6c66 6f6f 2e72 7063 0070 6e4f 796c     s/floor.cpp.Only
   c8e58:	6620 6f6c 7461 3233 6920 2073 7573 7070      float32 is supp
   c8e68:	726f 6574 2064 7563 7272 6e65 6c74 2c79     orted currently,
   c8e78:	6720 746f 2520 0073 6e4f 796c 6620 6f6c      got %s.Only flo
   c8e88:	7461 3233 6120 646e 7520 6e69 3874 6120     at32 and uint8 a
   c8e98:	6572 7320 7075 6f70 7472 6465 6320 7275     re supported cur
   c8ea8:	6572 746e 796c 202c 6f67 2074 6425 002e     rently, got %d..
   c8eb8:	3a63 552f 6573 7372 742f 646f 7264 642f     c:/Users/toddr/d
   c8ec8:	7665 702f 7261 6974 6c63 2d65 4654 696c     ev/particle-TFli
   c8ed8:	6574 6c2f 6269 542f 6e65 6f73 4672 6f6c     te/lib/TensorFlo
   c8ee8:	4c77 7469 2f65 7273 2f63 6574 736e 726f     wLite/src/tensor
   c8ef8:	6c66 776f 6c2f 7469 2f65 7865 6570 6972     flow/lite/experi
   c8f08:	656d 746e 6c61 6d2f 6369 6f72 6b2f 7265     mental/micro/ker
   c8f18:	656e 736c 732f 6476 2e66 7063 0070 6f6e     nels/svdf.cpp.no
   c8f28:	6564 3e2d 6e69 7570 7374 3e2d 6973 657a     de->inputs->size
   c8f38:	6e00 6d75 665f 6c69 6574 7372 2520 7220     .num_filters % r
   c8f48:	6e61 006b 754e 446d 6d69 6e65 6973 6e6f     ank.NumDimension
   c8f58:	2873 6577 6769 7468 5f73 6566 7461 7275     s(weights_featur
   c8f68:	2965 6900 706e 7475 735f 7a69 0065 6577     e).input_size.we
   c8f78:	6769 7468 5f73 6566 7461 7275 2d65 643e     ights_feature->d
   c8f88:	6d69 2d73 643e 7461 5b61 5d31 4e00 6d75     ims->data[1].Num
   c8f98:	6944 656d 736e 6f69 736e 7728 6965 6867     Dimensions(weigh
   c8fa8:	7374 745f 6d69 2965 6e00 6d75 755f 696e     ts_time).num_uni
   c8fb8:	7374 6200 6169 2d73 643e 6d69 2d73 643e     ts.bias->dims->d
   c8fc8:	7461 5b61 5d30 6200 6169 2d73 743e 7079     ata[0].bias->typ
   c8fd8:	0065 6361 6974 6176 6974 6e6f 735f 6174     e.activation_sta
   c8fe8:	6574 3e2d 7974 6570 4e00 6d75 6944 656d     te->type.NumDime
   c8ff8:	736e 6f69 736e 6128 7463 7669 7461 6f69     nsions(activatio
   c9008:	5f6e 7473 7461 2965 6200 7461 6863 735f     n_state).batch_s
   c9018:	7a69 0065 6361 6974 6176 6974 6e6f 735f     ize.activation_s
   c9028:	6174 6574 3e2d 6964 736d 3e2d 6164 6174     tate->dims->data
   c9038:	305b 005d 656d 6f6d 7972 735f 7a69 2065     [0].memory_size 
   c9048:	202a 756e 5f6d 6966 746c 7265 0073 6361     * num_filters.ac
   c9058:	6974 6176 6974 6e6f 735f 6174 6574 3e2d     tivation_state->
   c9068:	6964 736d 3e2d 6164 6174 315b 005d 6373     dims->data[1].sc
   c9078:	6172 6374 5f68 6574 736e 726f 3e2d 7974     ratch_tensor->ty
   c9088:	6570 4e00 6d75 6944 656d 736e 6f69 736e     pe.NumDimensions
   c9098:	7328 7263 7461 6863 745f 6e65 6f73 2972     (scratch_tensor)
   c90a8:	7300 7263 7461 6863 745f 6e65 6f73 2d72     .scratch_tensor-
   c90b8:	643e 6d69 2d73 643e 7461 5b61 5d30 7300     >dims->data[0].s
   c90c8:	7263 7461 6863 745f 6e65 6f73 2d72 643e     cratch_tensor->d
   c90d8:	6d69 2d73 643e 7461 5b61 5d31 7700 6965     ims->data[1].wei
   c90e8:	6867 7374 745f 6d69 2d65 743e 7079 2065     ghts_time->type 
   c90f8:	3d3d 6b20 6654 694c 6574 4955 746e 2038     == kTfLiteUInt8 
   c9108:	7c7c 7720 6965 6867 7374 745f 6d69 2d65     || weights_time-
   c9118:	743e 7079 2065 3d3d 6b20 6654 694c 6574     >type == kTfLite
   c9128:	6e49 3874 6e00 646f 2d65 743e 6d65 6f70     Int8.node->tempo
   c9138:	6172 6972 7365 3e2d 6973 657a 7300 7263     raries->size.scr
   c9148:	7461 6863 695f 706e 7475 715f 6175 746e     atch_input_quant
   c9158:	7a69 6465 3e2d 7974 6570 3d20 203d 546b     ized->type == kT
   c9168:	4c66 7469 5565 6e49 3874 7c20 207c 6373     fLiteUInt8 || sc
   c9178:	6172 6374 5f68 6e69 7570 5f74 7571 6e61     ratch_input_quan
   c9188:	6974 657a 2d64 743e 7079 2065 3d3d 6b20     tized->type == k
   c9198:	6654 694c 6574 6e49 3874 7300 7263 7461     TfLiteInt8.scrat
   c91a8:	6863 695f 706e 7475 715f 6175 746e 7a69     ch_input_quantiz
   c91b8:	6465 3e2d 6964 736d 3e2d 6164 6174 305b     ed->dims->data[0
   c91c8:	005d 6373 6172 6374 5f68 6373 6c61 6e69     ].scratch_scalin
   c91d8:	5f67 6166 7463 726f 2d73 743e 7079 0065     g_factors->type.
   c91e8:	754e 446d 6d69 6e65 6973 6e6f 2873 6373     NumDimensions(sc
   c91f8:	6172 6374 5f68 6373 6c61 6e69 5f67 6166     ratch_scaling_fa
   c9208:	7463 726f 2973 7300 7263 7461 6863 735f     ctors).scratch_s
   c9218:	6163 696c 676e 665f 6361 6f74 7372 3e2d     caling_factors->
   c9228:	6964 736d 3e2d 6164 6174 305b 005d 6373     dims->data[0].sc
   c9238:	6172 6374 5f68 6c66 616f 5f74 6577 6769     ratch_float_weig
   c9248:	7468 5f73 6974 656d 3e2d 7974 6570 4e00     hts_time->type.N
   c9258:	6d75 6944 656d 736e 6f69 736e 7328 7263     umDimensions(scr
   c9268:	7461 6863 665f 6f6c 7461 775f 6965 6867     atch_float_weigh
   c9278:	7374 745f 6d69 2965 7300 7263 7461 6863     ts_time).scratch
   c9288:	665f 6f6c 7461 775f 6965 6867 7374 745f     _float_weights_t
   c9298:	6d69 2d65 643e 6d69 2d73 643e 7461 5b61     ime->dims->data[
   c92a8:	5d30 6d00 6d65 726f 5f79 6973 657a 7300     0].memory_size.s
   c92b8:	7263 7461 6863 665f 6f6c 7461 775f 6965     cratch_float_wei
   c92c8:	6867 7374 745f 6d69 2d65 643e 6d69 2d73     ghts_time->dims-
   c92d8:	643e 7461 5b61 5d31 7700 6965 6867 7374     >data[1].weights
   c92e8:	665f 6165 7574 6572 3e2d 7974 6570 4e00     _feature->type.N
   c92f8:	6d75 6944 656d 736e 6f69 736e 6f28 7475     umDimensions(out
   c9308:	7570 2974 6f00 7475 7570 2d74 643e 6d69     put).output->dim
   c9318:	2d73 643e 7461 5b61 5d30 6f00 7475 7570     s->data[0].outpu
   c9328:	2d74 643e 6d69 2d73 643e 7461 5b61 5d31     t->dims->data[1]
   c9338:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c9348:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c9358:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c9368:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c9378:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c9388:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c9398:	6e72 6c65 2f73 6f70 7472 6261 656c 6f5f     rnels/portable_o
   c93a8:	7470 6d69 7a69 6465 642f 7065 6874 6977     ptimized/depthwi
   c93b8:	6573 635f 6e6f 2e76 7063 0070 754d 746c     se_conv.cpp.Mult
   c93c8:	7069 656c 6420 7065 6874 6977 6573 6320     iple depthwise c
   c93d8:	6e6f 2076 706f 2073 616d 6374 2068 706f     onv ops match op
   c93e8:	6974 696d 617a 6974 6e6f 7020 7261 6d61     timization param
   c93f8:	7465 7265 2c73 6220 7475 6f20 6c6e 2079     eters, but only 
   c9408:	6874 2065 6966 7372 2074 6977 6c6c 7520     the first will u
   c9418:	6573 7420 6568 6620 7361 2074 6170 6874     se the fast path
   c9428:	202c 6562 6163 7375 2065 6874 7265 2765     , because there'
   c9438:	2073 6e6f 796c 6f20 656e 5220 4d41 6320     s only one RAM c
   c9448:	6361 6568 6120 6176 6c69 6261 656c 5300     ache available.S
   c9458:	7a69 2065 6f74 206f 616c 6772 2065 6f66     ize too large fo
   c9468:	2072 6572 6873 7061 6465 7720 6965 6867     r reshaped weigh
   c9478:	2074 7562 6666 7265 2820 6425 6e20 6565     t buffer (%d nee
   c9488:	6564 2c64 2520 2064 7661 6961 616c 6c62     ded, %d availabl
   c9498:	2965 5400 6f6f 6d20 6e61 2079 7562 6666     e).Too many buff
   c94a8:	7265 2073 6d28 7861 6920 2073 6425 0029     ers (max is %d).
   c94b8:	7562 6666 7265 6920 646e 7865 2520 2064     buffer index %d 
   c94c8:	7369 6f20 7475 6973 6564 7220 6e61 6567     is outside range
   c94d8:	3020 7420 206f 6425 0000 0000                0 to %d....

000c94e4 <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
   c94ec:	3101 000c 3107 000c 3115 000c 334f 000c     .1...1...1..O3..
   c94fc:	3103 000c 3385 000c 6e49 7570 2074 7261     .1...3..Input ar
   c950c:	6172 2079 6f6e 2074 7270 766f 6469 6465     ray not provided
   c951c:	6620 726f 6f20 6570 6172 6974 6e6f 2720      for operation '
   c952c:	7325 2e27 000a 6f46 6e75 2064 6f74 206f     %s'...Found too 
   c953c:	616d 796e 6420 6d69 6e65 6973 6e6f 2073     many dimensions 
   c954c:	6e69 7420 6568 6920 706e 7475 6120 7272     in the input arr
   c955c:	7961 6f20 2066 706f 7265 7461 6f69 206e     ay of operation 
   c956c:	2527 2773 0a2e 5500 736e 7075 6f70 7472     '%s'...Unsupport
   c957c:	6465 6420 7461 2061 7974 6570 2520 2064     ed data type %d 
   c958c:	6e69 7420 6e65 6f73 0a72 5500 686e 6e61     in tensor..Unhan
   c959c:	6c64 6465 6620 6c75 796c 632d 6e6f 656e     dled fully-conne
   c95ac:	7463 6465 7720 6965 6867 7374 6620 726f     cted weights for
   c95bc:	616d 2e74 5500 686e 6e61 6c64 6465 4c20     mat..Unhandled L
   c95cc:	5453 204d 656b 6e72 6c65 7420 7079 3a65     STM kernel type:
   c95dc:	2520 0064 6f4e 7620 6c61 6469 4c20 5453      %d.No valid LST
   c95ec:	204d 7562 6c69 6974 206e 706f 6974 6e6f     M builtin option
   c95fc:	2073 7865 7369 0074 6572 6873 7061 0065     s exist.reshape.
   c960c:	7173 6575 7a65 0065 4544 454c 4147 4554     squeeze.DELEGATE
   c961c:	6f20 2070 6873 756f 646c 276e 2074 7865      op shouldn't ex
   c962c:	7369 2074 6e69 6d20 646f 6c65 002e 704f     ist in model..Op
   c963c:	6220 6975 746c 6e69 635f 646f 2065 756f      builtin_code ou
   c964c:	2074 666f 7220 6e61 6567 203a 6425 202e     t of range: %d. 
   c965c:	7241 2065 6f79 2075 7375 6e69 2067 6c6f     Are you using ol
   c966c:	2064 4654 694c 6574 6220 6e69 7261 2079     d TFLite binary 
   c967c:	6977 6874 6e20 7765 7265 6d20 646f 6c65     with newer model
   c968c:	003f 6944 6e64 7427 6620 6e69 2064 706f     ?.Didn't find op
   c969c:	6620 726f 6220 6975 746c 6e69 6f20 6370      for builtin opc
   c96ac:	646f 2065 2527 2773 7620 7265 6973 6e6f     ode '%s' version
   c96bc:	2720 6425 0a27 4f00 6570 6172 6f74 2072      '%d'..Operator 
   c96cc:	6977 6874 4320 5355 4f54 204d 7562 6c69     with CUSTOM buil
   c96dc:	6974 5f6e 6f63 6564 6820 7361 6e20 206f     tin_code has no 
   c96ec:	7563 7473 6d6f 635f 646f 2e65 000a 0000     custom_code.....

000c96fc <_ZTVN5spark13EthernetClassE>:
	...
   c9704:	489b 000c 4891 000c 4887 000c 487d 000c     .H...H...H..}H..
   c9714:	4871 000c 4865 000c 4ec9 000c 4ed1 000c     qH..eH...N...N..
   c9724:	4859 000c 4851 000c 4847 000c 483d 000c     YH..QH..GH..=H..
   c9734:	4f01 000c 7061 0070 5925 252d 2d6d 6425     .O..app.%Y-%m-%d
   c9744:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c9754:	6d69 0065                                   ime.

000c9758 <_ZTV9IPAddress>:
	...
   c9760:	4b81 000c 4b71 000c 4b73 000c               .K..qK..sK..

000c976c <_ZTV9USBSerial>:
	...
   c9774:	4c67 000c 4ccf 000c 4ca5 000c 48ed 000c     gL...L...L...H..
   c9784:	4c97 000c 4c69 000c 4c79 000c 4cc9 000c     .L..iL..yL...L..
   c9794:	4c89 000c 4c61 000c                         .L..aL..

000c979c <_ZTV11USARTSerial>:
	...
   c97a4:	4d69 000c 4dd5 000c 4dad 000c 48ed 000c     iM...M...M...H..
   c97b4:	4d7d 000c 4d99 000c 4d8b 000c 4da7 000c     }M...M...M...M..
   c97c4:	4d6b 000c 4d6f 000c                         kM..oM..

000c97cc <_ZTVN5spark9WiFiClassE>:
	...
   c97d4:	4e6b 000c 4e61 000c 4e57 000c 4e0d 000c     kN..aN..WN...N..
   c97e4:	4e4b 000c 4e3f 000c 4ec9 000c 4ed1 000c     KN..?N...N...N..
   c97f4:	4e33 000c 4e2b 000c 4e21 000c 4e17 000c     3N..+N..!N...N..
   c9804:	4f01 000c                                   .O..

000c9808 <_ZTVN5spark12NetworkClassE>:
	...
   c9810:	4e89 000c 4e93 000c 4e9d 000c 4ea7 000c     .N...N...N...N..
   c9820:	4eb1 000c 4ebd 000c 4ec9 000c 4ed1 000c     .N...N...N...N..
   c9830:	4ed9 000c 4ee5 000c 4eed 000c 4ef7 000c     .N...N...N...N..
   c9840:	4f01 000c                                   .O..

000c9844 <_ZSt7nothrow>:
	...

000c9850 <halF>:
   c9850:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000c9860 <ln2HI>:
   c9860:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000c9870 <ln2LO>:
   c9870:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000c9880 <halF>:
   c9880:	0000 3f00 0000 bf00                         ...?....

000c9888 <ln2HI>:
   c9888:	7180 3f31 7180 bf31                         .q1?.q1.

000c9890 <ln2LO>:
   c9890:	f7d1 3717 f7d1 b717                         ...7....

000c9898 <npio2_hw>:
   c9898:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c98a8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c98b8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c98c8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c98d8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c98e8:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c98f8:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c9908:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c9918 <two_over_pi>:
   c9918:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c9928:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c9938:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c9948:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c9958:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c9968:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c9978:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c9988:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c9998:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c99a8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c99b8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c99c8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c99d8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c99e8:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c99f8:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c9a08:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c9a18:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c9a28:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c9a38:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c9a48:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c9a58:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c9a68:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c9a78:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c9a88:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c9a98:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c9aa8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c9ab8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c9ac8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c9ad8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c9ae8:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c9af8:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c9b08:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c9b18:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c9b28:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c9b38:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c9b48:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c9b58:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c9b68:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c9b78:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c9b88:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c9b98:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c9ba8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c9bb8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c9bc8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c9bd8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c9be8:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c9bf8:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c9c08:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c9c18:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c9c28:	008c 0000 006b 0000                         ....k...

000c9c30 <PIo2>:
   c9c30:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c9c40:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c9c50:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c9c5c <init_jk>:
   c9c5c:	0004 0000 0007 0000 0009 0000               ............

000c9c68 <_global_impure_ptr>:
   c9c68:	c5c4 2003 4552 4e45 2054 616d 6c6c 636f     ... REENT malloc
   c9c78:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   c9c88:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   c9c98:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   c9ca8:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   c9cb8:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   c9cc8:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   c9cd8:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   c9ce8:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   c9cf8:	722f 6e61 2e64 0063                         /rand.c.

000c9d00 <link_const_data_end>:
   c9d00:	000b4ce9 	.word	0x000b4ce9
   c9d04:	000c48a5 	.word	0x000c48a5
   c9d08:	000c48b9 	.word	0x000c48b9
   c9d0c:	000c48dd 	.word	0x000c48dd
   c9d10:	000c4a01 	.word	0x000c4a01
   c9d14:	000c4a11 	.word	0x000c4a11
   c9d18:	000c4a2d 	.word	0x000c4a2d
   c9d1c:	000c4e75 	.word	0x000c4e75
   c9d20:	000c4fd9 	.word	0x000c4fd9
