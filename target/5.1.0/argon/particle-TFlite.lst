
c:/Users/toddr/dev/particle-TFlite/target/5.1.0/argon/particle-TFlite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015e24  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c9e44  000c9e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000009b4  2003bc6c  000c9e68  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000021d0  2003c620  2003c620  0002c620  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000ca81c  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000ca820  000ca820  0002a820  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000ca826  000ca826  0002a826  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000ca84a  000ca84a  0002a84a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   002e6b69  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000265ea  00000000  00000000  003113b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00082496  00000000  00000000  003379a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003590  00000000  00000000  003b9e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00012710  00000000  00000000  003bd3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b96e  00000000  00000000  003cfad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0007bc20  00000000  00000000  0041b445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001cbd10  00000000  00000000  00497065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a400  00000000  00000000  00662d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2uiz>:
   b491c:	004a      	lsls	r2, r1, #1
   b491e:	d211      	bcs.n	b4944 <__aeabi_d2uiz+0x28>
   b4920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4924:	d211      	bcs.n	b494a <__aeabi_d2uiz+0x2e>
   b4926:	d50d      	bpl.n	b4944 <__aeabi_d2uiz+0x28>
   b4928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b492c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4930:	d40e      	bmi.n	b4950 <__aeabi_d2uiz+0x34>
   b4932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b493a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b493e:	fa23 f002 	lsr.w	r0, r3, r2
   b4942:	4770      	bx	lr
   b4944:	f04f 0000 	mov.w	r0, #0
   b4948:	4770      	bx	lr
   b494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b494e:	d102      	bne.n	b4956 <__aeabi_d2uiz+0x3a>
   b4950:	f04f 30ff 	mov.w	r0, #4294967295
   b4954:	4770      	bx	lr
   b4956:	f04f 0000 	mov.w	r0, #0
   b495a:	4770      	bx	lr

000b495c <__aeabi_d2f>:
   b495c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4964:	bf24      	itt	cs
   b4966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b496a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b496e:	d90d      	bls.n	b498c <__aeabi_d2f+0x30>
   b4970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b497c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4984:	bf08      	it	eq
   b4986:	f020 0001 	biceq.w	r0, r0, #1
   b498a:	4770      	bx	lr
   b498c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4990:	d121      	bne.n	b49d6 <__aeabi_d2f+0x7a>
   b4992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4996:	bfbc      	itt	lt
   b4998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b499c:	4770      	bxlt	lr
   b499e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49a6:	f1c2 0218 	rsb	r2, r2, #24
   b49aa:	f1c2 0c20 	rsb	ip, r2, #32
   b49ae:	fa10 f30c 	lsls.w	r3, r0, ip
   b49b2:	fa20 f002 	lsr.w	r0, r0, r2
   b49b6:	bf18      	it	ne
   b49b8:	f040 0001 	orrne.w	r0, r0, #1
   b49bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49c8:	ea40 000c 	orr.w	r0, r0, ip
   b49cc:	fa23 f302 	lsr.w	r3, r3, r2
   b49d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49d4:	e7cc      	b.n	b4970 <__aeabi_d2f+0x14>
   b49d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49da:	d107      	bne.n	b49ec <__aeabi_d2f+0x90>
   b49dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49e0:	bf1e      	ittt	ne
   b49e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49ea:	4770      	bxne	lr
   b49ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49f8:	4770      	bx	lr
   b49fa:	bf00      	nop

000b49fc <__aeabi_d2lz>:
   b49fc:	b538      	push	{r3, r4, r5, lr}
   b49fe:	2200      	movs	r2, #0
   b4a00:	2300      	movs	r3, #0
   b4a02:	4604      	mov	r4, r0
   b4a04:	460d      	mov	r5, r1
   b4a06:	f7ff ff39 	bl	b487c <__aeabi_dcmplt>
   b4a0a:	b928      	cbnz	r0, b4a18 <__aeabi_d2lz+0x1c>
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	4629      	mov	r1, r5
   b4a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a14:	f000 b80a 	b.w	b4a2c <__aeabi_d2ulz>
   b4a18:	4620      	mov	r0, r4
   b4a1a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a1e:	f000 f805 	bl	b4a2c <__aeabi_d2ulz>
   b4a22:	4240      	negs	r0, r0
   b4a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a28:	bd38      	pop	{r3, r4, r5, pc}
   b4a2a:	bf00      	nop

000b4a2c <__aeabi_d2ulz>:
   b4a2c:	b5d0      	push	{r4, r6, r7, lr}
   b4a2e:	4b0c      	ldr	r3, [pc, #48]	; (b4a60 <__aeabi_d2ulz+0x34>)
   b4a30:	2200      	movs	r2, #0
   b4a32:	4606      	mov	r6, r0
   b4a34:	460f      	mov	r7, r1
   b4a36:	f7ff fcaf 	bl	b4398 <__aeabi_dmul>
   b4a3a:	f7ff ff6f 	bl	b491c <__aeabi_d2uiz>
   b4a3e:	4604      	mov	r4, r0
   b4a40:	f7ff fc30 	bl	b42a4 <__aeabi_ui2d>
   b4a44:	4b07      	ldr	r3, [pc, #28]	; (b4a64 <__aeabi_d2ulz+0x38>)
   b4a46:	2200      	movs	r2, #0
   b4a48:	f7ff fca6 	bl	b4398 <__aeabi_dmul>
   b4a4c:	4602      	mov	r2, r0
   b4a4e:	460b      	mov	r3, r1
   b4a50:	4630      	mov	r0, r6
   b4a52:	4639      	mov	r1, r7
   b4a54:	f7ff fae8 	bl	b4028 <__aeabi_dsub>
   b4a58:	f7ff ff60 	bl	b491c <__aeabi_d2uiz>
   b4a5c:	4621      	mov	r1, r4
   b4a5e:	bdd0      	pop	{r4, r6, r7, pc}
   b4a60:	3df00000 	.word	0x3df00000
   b4a64:	41f00000 	.word	0x41f00000

000b4a68 <strcmp>:
   b4a68:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a70:	2a01      	cmp	r2, #1
   b4a72:	bf28      	it	cs
   b4a74:	429a      	cmpcs	r2, r3
   b4a76:	d0f7      	beq.n	b4a68 <strcmp>
   b4a78:	1ad0      	subs	r0, r2, r3
   b4a7a:	4770      	bx	lr

000b4a7c <strlen>:
   b4a7c:	4603      	mov	r3, r0
   b4a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a82:	2a00      	cmp	r2, #0
   b4a84:	d1fb      	bne.n	b4a7e <strlen+0x2>
   b4a86:	1a18      	subs	r0, r3, r0
   b4a88:	3801      	subs	r0, #1
   b4a8a:	4770      	bx	lr

000b4a8c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a8c:	4809      	ldr	r0, [pc, #36]	; (b4ab4 <module_user_pre_init+0x28>)
   b4a8e:	490a      	ldr	r1, [pc, #40]	; (b4ab8 <module_user_pre_init+0x2c>)
   b4a90:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a92:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a94:	d005      	beq.n	b4aa2 <module_user_pre_init+0x16>
   b4a96:	4a09      	ldr	r2, [pc, #36]	; (b4abc <module_user_pre_init+0x30>)
   b4a98:	4282      	cmp	r2, r0
   b4a9a:	d002      	beq.n	b4aa2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a9c:	1a12      	subs	r2, r2, r0
   b4a9e:	f012 f8a1 	bl	c6be4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4aa2:	4807      	ldr	r0, [pc, #28]	; (b4ac0 <module_user_pre_init+0x34>)
   b4aa4:	4a07      	ldr	r2, [pc, #28]	; (b4ac4 <module_user_pre_init+0x38>)
   b4aa6:	2100      	movs	r1, #0
   b4aa8:	1a12      	subs	r2, r2, r0
   b4aaa:	f012 f8c3 	bl	c6c34 <memset>
    return &link_global_data_start;
}
   b4aae:	4801      	ldr	r0, [pc, #4]	; (b4ab4 <module_user_pre_init+0x28>)
   b4ab0:	bd08      	pop	{r3, pc}
   b4ab2:	bf00      	nop
   b4ab4:	2003bc6c 	.word	0x2003bc6c
   b4ab8:	000c9e68 	.word	0x000c9e68
   b4abc:	2003c620 	.word	0x2003c620
   b4ac0:	2003c620 	.word	0x2003c620
   b4ac4:	2003e7f0 	.word	0x2003e7f0

000b4ac8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4ac8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aca:	4e07      	ldr	r6, [pc, #28]	; (b4ae8 <module_user_init+0x20>)
   b4acc:	4c07      	ldr	r4, [pc, #28]	; (b4aec <module_user_init+0x24>)
    module_user_init_hook();
   b4ace:	f010 f87f 	bl	c4bd0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4ad2:	1ba4      	subs	r4, r4, r6
   b4ad4:	08a4      	lsrs	r4, r4, #2
   b4ad6:	2500      	movs	r5, #0
   b4ad8:	42ac      	cmp	r4, r5
   b4ada:	d100      	bne.n	b4ade <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4adc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4ade:	f856 3b04 	ldr.w	r3, [r6], #4
   b4ae2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4ae4:	3501      	adds	r5, #1
   b4ae6:	e7f7      	b.n	b4ad8 <module_user_init+0x10>
   b4ae8:	000c9e20 	.word	0x000c9e20
   b4aec:	000c9e44 	.word	0x000c9e44

000b4af0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4af0:	f000 b876 	b.w	b4be0 <setup>

000b4af4 <module_user_loop>:
}

void module_user_loop() {
   b4af4:	b508      	push	{r3, lr}
    loop();
   b4af6:	f000 f8d3 	bl	b4ca0 <loop>
    _post_loop();
}
   b4afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4afe:	f010 b81f 	b.w	c4b40 <_post_loop>

000b4b02 <_Znaj>:
   b4b02:	f00f beb3 	b.w	c486c <malloc>

000b4b06 <_ZdaPv>:
   b4b06:	f00f beb9 	b.w	c487c <free>

000b4b0a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b0a:	f00f beb7 	b.w	c487c <free>
	...

000b4b10 <_exit>:
int _getpid(void)
{
	return 1;
}

void _exit(int status) {
   b4b10:	b508      	push	{r3, lr}
    PANIC(Exit,"Exit Called");
   b4b12:	4a03      	ldr	r2, [pc, #12]	; (b4b20 <_exit+0x10>)
   b4b14:	4903      	ldr	r1, [pc, #12]	; (b4b24 <_exit+0x14>)
   b4b16:	2007      	movs	r0, #7
   b4b18:	f00f fe14 	bl	c4744 <panic_>

    while (1) {
   b4b1c:	e7fe      	b.n	b4b1c <_exit+0xc>
   b4b1e:	bf00      	nop
   b4b20:	000c4605 	.word	0x000c4605
   b4b24:	000c6eb4 	.word	0x000c6eb4

000b4b28 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b28:	7800      	ldrb	r0, [r0, #0]
   b4b2a:	fab0 f080 	clz	r0, r0
   b4b2e:	0940      	lsrs	r0, r0, #5
   b4b30:	4770      	bx	lr

000b4b32 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b32:	2301      	movs	r3, #1
   b4b34:	7003      	strb	r3, [r0, #0]
   b4b36:	4770      	bx	lr

000b4b38 <TfLiteIntArrayEqualsArray>:
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray *a, int b_size,
                              const int b_data[])
{
   b4b38:	b530      	push	{r4, r5, lr}
  if (a == NULL)
   b4b3a:	b918      	cbnz	r0, b4b44 <TfLiteIntArrayEqualsArray+0xc>
    return (b_size == 0);
   b4b3c:	fab1 f081 	clz	r0, r1
   b4b40:	0940      	lsrs	r0, r0, #5
  int i = 0;
  for (; i < a->size; i++)
    if (a->data[i] != b_data[i])
      return 0;
  return 1;
}
   b4b42:	bd30      	pop	{r4, r5, pc}
  if (a->size != b_size)
   b4b44:	6803      	ldr	r3, [r0, #0]
   b4b46:	428b      	cmp	r3, r1
   b4b48:	d10d      	bne.n	b4b66 <TfLiteIntArrayEqualsArray+0x2e>
   b4b4a:	3004      	adds	r0, #4
  int i = 0;
   b4b4c:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   b4b4e:	428b      	cmp	r3, r1
   b4b50:	db01      	blt.n	b4b56 <TfLiteIntArrayEqualsArray+0x1e>
  return 1;
   b4b52:	2001      	movs	r0, #1
   b4b54:	e7f5      	b.n	b4b42 <TfLiteIntArrayEqualsArray+0xa>
    if (a->data[i] != b_data[i])
   b4b56:	f850 5b04 	ldr.w	r5, [r0], #4
   b4b5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b4b5e:	42a5      	cmp	r5, r4
   b4b60:	d101      	bne.n	b4b66 <TfLiteIntArrayEqualsArray+0x2e>
  for (; i < a->size; i++)
   b4b62:	3301      	adds	r3, #1
   b4b64:	e7f3      	b.n	b4b4e <TfLiteIntArrayEqualsArray+0x16>
    return 0;
   b4b66:	2000      	movs	r0, #0
   b4b68:	e7eb      	b.n	b4b42 <TfLiteIntArrayEqualsArray+0xa>

000b4b6a <TfLiteIntArrayEqual>:
  if (a == b)
   b4b6a:	4288      	cmp	r0, r1
   b4b6c:	d005      	beq.n	b4b7a <TfLiteIntArrayEqual+0x10>
  if (a == NULL || b == NULL)
   b4b6e:	b130      	cbz	r0, b4b7e <TfLiteIntArrayEqual+0x14>
   b4b70:	b131      	cbz	r1, b4b80 <TfLiteIntArrayEqual+0x16>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   b4b72:	1d0a      	adds	r2, r1, #4
   b4b74:	6809      	ldr	r1, [r1, #0]
   b4b76:	f7ff bfdf 	b.w	b4b38 <TfLiteIntArrayEqualsArray>
    return 1;
   b4b7a:	2001      	movs	r0, #1
   b4b7c:	4770      	bx	lr
   b4b7e:	4770      	bx	lr
    return 0;
   b4b80:	4608      	mov	r0, r1
}
   b4b82:	4770      	bx	lr

000b4b84 <TfLiteTypeGetName>:
}
#endif // TF_LITE_STATIC_MEMORY

const char *TfLiteTypeGetName(TfLiteType type)
{
  switch (type)
   b4b84:	280a      	cmp	r0, #10
   b4b86:	bf9a      	itte	ls
   b4b88:	4b02      	ldrls	r3, [pc, #8]	; (b4b94 <TfLiteTypeGetName+0x10>)
   b4b8a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   b4b8e:	4802      	ldrhi	r0, [pc, #8]	; (b4b98 <TfLiteTypeGetName+0x14>)
    return "STRING";
  case kTfLiteFloat16:
    return "FLOAT16";
  }
  return "Unknown type";
}
   b4b90:	4770      	bx	lr
   b4b92:	bf00      	nop
   b4b94:	000c6f14 	.word	0x000c6f14
   b4b98:	000c6ec0 	.word	0x000c6ec0

000b4b9c <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b9c:	b40e      	push	{r1, r2, r3}
   b4b9e:	b503      	push	{r0, r1, lr}
   b4ba0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4ba2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ba4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ba8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4baa:	f00f ff5a 	bl	c4a62 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4bae:	b002      	add	sp, #8
   b4bb0:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bb4:	b003      	add	sp, #12
   b4bb6:	4770      	bx	lr

000b4bb8 <_Z9randFloatff>:

TfLiteTensor *input = nullptr;
TfLiteTensor *output = nullptr;

float randFloat(float min, float max)
{
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	ed2d 8b02 	vpush	{d8}
  return ((max - min) * ((float)rand() / RAND_MAX)) + min;
   b4bbe:	ee70 8ac0 	vsub.f32	s17, s1, s0
{
   b4bc2:	eeb0 8a40 	vmov.f32	s16, s0
  return ((max - min) * ((float)rand() / RAND_MAX)) + min;
   b4bc6:	f012 f86b 	bl	c6ca0 <rand>
   b4bca:	ee07 0a90 	vmov	s15, r0
   b4bce:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
   b4bd2:	eeb0 0a48 	vmov.f32	s0, s16
   b4bd6:	eea8 0aa7 	vfma.f32	s0, s17, s15
   b4bda:	ecbd 8b02 	vpop	{d8}
   b4bde:	bd08      	pop	{r3, pc}

000b4be0 <setup>:
																		kTensorArenaSize, error_reporter);
TfLiteStatus allocate_status = interpreter.AllocateTensors();

// setup() runs once, when the device is first turned on.
void setup()
{
   b4be0:	b507      	push	{r0, r1, r2, lr}
	// Put initialization like pinMode and begin functions here.
	Serial.begin();
   b4be2:	f010 f901 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4be6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bea:	f010 f8ed 	bl	c4dc8 <_ZN9USBSerial5beginEl>
	while(!Serial.isConnected());
   b4bee:	f010 f8fb 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4bf2:	f010 f8ed 	bl	c4dd0 <_ZN9USBSerial11isConnectedEv>
   b4bf6:	2800      	cmp	r0, #0
   b4bf8:	d0f9      	beq.n	b4bee <setup+0xe>
	if (model->version() != TFLITE_SCHEMA_VERSION)
   b4bfa:	4b1e      	ldr	r3, [pc, #120]	; (b4c74 <setup+0x94>)
   b4bfc:	6819      	ldr	r1, [r3, #0]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
   b4bfe:	680b      	ldr	r3, [r1, #0]
   b4c00:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b4c02:	881a      	ldrh	r2, [r3, #0]
   b4c04:	2a04      	cmp	r2, #4
   b4c06:	d90d      	bls.n	b4c24 <setup+0x44>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
   b4c08:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b4c0a:	b112      	cbz	r2, b4c12 <setup+0x32>
   b4c0c:	588a      	ldr	r2, [r1, r2]
   b4c0e:	2a03      	cmp	r2, #3
   b4c10:	d00a      	beq.n	b4c28 <setup+0x48>
	{
		error_reporter->Report(
   b4c12:	4819      	ldr	r0, [pc, #100]	; (b4c78 <setup+0x98>)
   b4c14:	4919      	ldr	r1, [pc, #100]	; (b4c7c <setup+0x9c>)
   b4c16:	6800      	ldr	r0, [r0, #0]
   b4c18:	2303      	movs	r3, #3
	output = interpreter.output(0);
	uint32_t postSetupMemory = System.freeMemory();
	Serial.printlnf("Post model setup: %d", postSetupMemory);
	Serial.printlnf("Before model prealloc: %d", beforePreAlloc);
	Serial.printlnf("Before model import: %d", beforeModelImport);
}
   b4c1a:	b003      	add	sp, #12
   b4c1c:	f85d eb04 	ldr.w	lr, [sp], #4
		error_reporter->Report(
   b4c20:	f00f bcb6 	b.w	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   b4c24:	2200      	movs	r2, #0
   b4c26:	e7f4      	b.n	b4c12 <setup+0x32>
	input = interpreter.input(0);
   b4c28:	2100      	movs	r1, #0
   b4c2a:	4815      	ldr	r0, [pc, #84]	; (b4c80 <setup+0xa0>)
   b4c2c:	f001 fac0 	bl	b61b0 <_ZN6tflite16MicroInterpreter5inputEj>
   b4c30:	4b14      	ldr	r3, [pc, #80]	; (b4c84 <setup+0xa4>)
	output = interpreter.output(0);
   b4c32:	2100      	movs	r1, #0
	input = interpreter.input(0);
   b4c34:	6018      	str	r0, [r3, #0]
	output = interpreter.output(0);
   b4c36:	4812      	ldr	r0, [pc, #72]	; (b4c80 <setup+0xa0>)
   b4c38:	f001 fad6 	bl	b61e8 <_ZN6tflite16MicroInterpreter6outputEj>
   b4c3c:	4b12      	ldr	r3, [pc, #72]	; (b4c88 <setup+0xa8>)
   b4c3e:	6018      	str	r0, [r3, #0]
	uint32_t postSetupMemory = System.freeMemory();
   b4c40:	f00f fe8a 	bl	c4958 <_ZN11SystemClass10freeMemoryEv>
   b4c44:	9001      	str	r0, [sp, #4]
	Serial.printlnf("Post model setup: %d", postSetupMemory);
   b4c46:	f010 f8cf 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4c4a:	9a01      	ldr	r2, [sp, #4]
   b4c4c:	490f      	ldr	r1, [pc, #60]	; (b4c8c <setup+0xac>)
   b4c4e:	f7ff ffa5 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
	Serial.printlnf("Before model prealloc: %d", beforePreAlloc);
   b4c52:	f010 f8c9 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4c56:	4b0e      	ldr	r3, [pc, #56]	; (b4c90 <setup+0xb0>)
   b4c58:	490e      	ldr	r1, [pc, #56]	; (b4c94 <setup+0xb4>)
   b4c5a:	681a      	ldr	r2, [r3, #0]
   b4c5c:	f7ff ff9e 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
	Serial.printlnf("Before model import: %d", beforeModelImport);
   b4c60:	f010 f8c2 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4c64:	4b0c      	ldr	r3, [pc, #48]	; (b4c98 <setup+0xb8>)
   b4c66:	490d      	ldr	r1, [pc, #52]	; (b4c9c <setup+0xbc>)
   b4c68:	681a      	ldr	r2, [r3, #0]
   b4c6a:	f7ff ff97 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
}
   b4c6e:	b003      	add	sp, #12
   b4c70:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c74:	2003d6c4 	.word	0x2003d6c4
   b4c78:	2003bc6c 	.word	0x2003bc6c
   b4c7c:	000c6f40 	.word	0x000c6f40
   b4c80:	2003d644 	.word	0x2003d644
   b4c84:	2003d640 	.word	0x2003d640
   b4c88:	2003d6c8 	.word	0x2003d6c8
   b4c8c:	000c6f87 	.word	0x000c6f87
   b4c90:	2003d63c 	.word	0x2003d63c
   b4c94:	000c6f9c 	.word	0x000c6f9c
   b4c98:	2003d638 	.word	0x2003d638
   b4c9c:	000c6fb6 	.word	0x000c6fb6

000b4ca0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   b4ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	float x_val = randFloat(0, 1);
   b4ca2:	ed9f 0a23 	vldr	s0, [pc, #140]	; b4d30 <loop+0x90>
   b4ca6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   b4caa:	f7ff ff85 	bl	b4bb8 <_Z9randFloatff>
	input->data.f[0] = x_val;
   b4cae:	4b21      	ldr	r3, [pc, #132]	; (b4d34 <loop+0x94>)

	TfLiteStatus invoke_status = interpreter.Invoke();
   b4cb0:	4821      	ldr	r0, [pc, #132]	; (b4d38 <loop+0x98>)
	input->data.f[0] = x_val;
   b4cb2:	681b      	ldr	r3, [r3, #0]
   b4cb4:	685b      	ldr	r3, [r3, #4]
   b4cb6:	ed83 0a00 	vstr	s0, [r3]
	float x_val = randFloat(0, 1);
   b4cba:	ee10 4a10 	vmov	r4, s0
	TfLiteStatus invoke_status = interpreter.Invoke();
   b4cbe:	f001 f973 	bl	b5fa8 <_ZN6tflite16MicroInterpreter6InvokeEv>
	if (invoke_status != kTfLiteOk)
   b4cc2:	b160      	cbz	r0, b4cde <loop+0x3e>
	{
		error_reporter->Report("Invoke failed on x_val: %f\n",
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	f7ff fb0f 	bl	b42e8 <__aeabi_f2d>
   b4cca:	4602      	mov	r2, r0
   b4ccc:	481b      	ldr	r0, [pc, #108]	; (b4d3c <loop+0x9c>)
   b4cce:	460b      	mov	r3, r1
   b4cd0:	6800      	ldr	r0, [r0, #0]
   b4cd2:	491b      	ldr	r1, [pc, #108]	; (b4d40 <loop+0xa0>)

	Serial.printlnf("%.2f, %.2f", x_val, y_val);
	delay(500);
	uint32_t freemem = System.freeMemory();
	Serial.printlnf("Free memory: %d", freemem);
   b4cd4:	b004      	add	sp, #16
   b4cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		error_reporter->Report("Invoke failed on x_val: %f\n",
   b4cda:	f00f bc59 	b.w	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	float y_val = output->data.f[0];
   b4cde:	4b19      	ldr	r3, [pc, #100]	; (b4d44 <loop+0xa4>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	685b      	ldr	r3, [r3, #4]
   b4ce4:	681e      	ldr	r6, [r3, #0]
	Serial.printlnf("%.2f, %.2f", x_val, y_val);
   b4ce6:	f010 f87f 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4cea:	4605      	mov	r5, r0
   b4cec:	4620      	mov	r0, r4
   b4cee:	f7ff fafb 	bl	b42e8 <__aeabi_f2d>
   b4cf2:	4602      	mov	r2, r0
   b4cf4:	460b      	mov	r3, r1
   b4cf6:	4630      	mov	r0, r6
   b4cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4cfc:	f7ff faf4 	bl	b42e8 <__aeabi_f2d>
   b4d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4d04:	e9cd 0100 	strd	r0, r1, [sp]
   b4d08:	490f      	ldr	r1, [pc, #60]	; (b4d48 <loop+0xa8>)
   b4d0a:	4628      	mov	r0, r5
   b4d0c:	f7ff ff46 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
	delay(500);
   b4d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4d14:	f00f fee8 	bl	c4ae8 <delay>
	uint32_t freemem = System.freeMemory();
   b4d18:	f00f fe1e 	bl	c4958 <_ZN11SystemClass10freeMemoryEv>
   b4d1c:	9002      	str	r0, [sp, #8]
	Serial.printlnf("Free memory: %d", freemem);
   b4d1e:	f010 f863 	bl	c4de8 <_Z16_fetch_usbserialv>
   b4d22:	9a02      	ldr	r2, [sp, #8]
   b4d24:	4909      	ldr	r1, [pc, #36]	; (b4d4c <loop+0xac>)
   b4d26:	f7ff ff39 	bl	b4b9c <_ZN5Print8printlnfEPKcz>
   b4d2a:	b004      	add	sp, #16
   b4d2c:	bd70      	pop	{r4, r5, r6, pc}
   b4d2e:	bf00      	nop
   b4d30:	00000000 	.word	0x00000000
   b4d34:	2003d640 	.word	0x2003d640
   b4d38:	2003d644 	.word	0x2003d644
   b4d3c:	2003bc6c 	.word	0x2003bc6c
   b4d40:	000c6fce 	.word	0x000c6fce
   b4d44:	2003d6c8 	.word	0x2003d6c8
   b4d48:	000c6fea 	.word	0x000c6fea
   b4d4c:	000c6ff5 	.word	0x000c6ff5

000b4d50 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4d50:	4b17      	ldr	r3, [pc, #92]	; (b4db0 <_GLOBAL__sub_I_SystemMode+0x60>)
   b4d52:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d54:	2200      	movs	r2, #0
   b4d56:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4d5a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4d5e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4d60:	2003      	movs	r0, #3
   b4d62:	f00f fcf7 	bl	c4754 <set_system_mode>
uint32_t beforeModelImport = System.freeMemory();
   b4d66:	f00f fdf7 	bl	c4958 <_ZN11SystemClass10freeMemoryEv>
   b4d6a:	4b12      	ldr	r3, [pc, #72]	; (b4db4 <_GLOBAL__sub_I_SystemMode+0x64>)
const tflite::Model *model = tflite::GetModel(g_linear_regresion_model_data);
   b4d6c:	4d12      	ldr	r5, [pc, #72]	; (b4db8 <_GLOBAL__sub_I_SystemMode+0x68>)
uint32_t beforeModelImport = System.freeMemory();
   b4d6e:	6018      	str	r0, [r3, #0]
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   b4d70:	4b12      	ldr	r3, [pc, #72]	; (b4dbc <_GLOBAL__sub_I_SystemMode+0x6c>)
																		kTensorArenaSize, error_reporter);
   b4d72:	4c13      	ldr	r4, [pc, #76]	; (b4dc0 <_GLOBAL__sub_I_SystemMode+0x70>)
   b4d74:	681a      	ldr	r2, [r3, #0]
   b4d76:	4413      	add	r3, r2
const tflite::Model *model = tflite::GetModel(g_linear_regresion_model_data);
   b4d78:	602b      	str	r3, [r5, #0]
uint32_t beforePreAlloc = System.freeMemory();
   b4d7a:	f00f fded 	bl	c4958 <_ZN11SystemClass10freeMemoryEv>
   b4d7e:	4b11      	ldr	r3, [pc, #68]	; (b4dc4 <_GLOBAL__sub_I_SystemMode+0x74>)
static tflite::ops::micro::AllOpsResolver resolver;
   b4d80:	4a11      	ldr	r2, [pc, #68]	; (b4dc8 <_GLOBAL__sub_I_SystemMode+0x78>)
uint32_t beforePreAlloc = System.freeMemory();
   b4d82:	6018      	str	r0, [r3, #0]
static tflite::ops::micro::AllOpsResolver resolver;
   b4d84:	4610      	mov	r0, r2
   b4d86:	f00b fe19 	bl	c09bc <_ZN6tflite3ops5micro14AllOpsResolverC1Ev>
																		kTensorArenaSize, error_reporter);
   b4d8a:	4b10      	ldr	r3, [pc, #64]	; (b4dcc <_GLOBAL__sub_I_SystemMode+0x7c>)
   b4d8c:	4a0e      	ldr	r2, [pc, #56]	; (b4dc8 <_GLOBAL__sub_I_SystemMode+0x78>)
   b4d8e:	681b      	ldr	r3, [r3, #0]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b4d96:	6829      	ldr	r1, [r5, #0]
   b4d98:	9300      	str	r3, [sp, #0]
   b4d9a:	4620      	mov	r0, r4
   b4d9c:	4b0c      	ldr	r3, [pc, #48]	; (b4dd0 <_GLOBAL__sub_I_SystemMode+0x80>)
   b4d9e:	f001 f8a1 	bl	b5ee4 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE>
TfLiteStatus allocate_status = interpreter.AllocateTensors();
   b4da2:	4620      	mov	r0, r4
   b4da4:	f001 f8f4 	bl	b5f90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
   b4da8:	4b0a      	ldr	r3, [pc, #40]	; (b4dd4 <_GLOBAL__sub_I_SystemMode+0x84>)
   b4daa:	7018      	strb	r0, [r3, #0]
   b4dac:	b003      	add	sp, #12
   b4dae:	bd30      	pop	{r4, r5, pc}
   b4db0:	2003c620 	.word	0x2003c620
   b4db4:	2003d638 	.word	0x2003d638
   b4db8:	2003d6c4 	.word	0x2003d6c4
   b4dbc:	2003bc70 	.word	0x2003bc70
   b4dc0:	2003d644 	.word	0x2003d644
   b4dc4:	2003d63c 	.word	0x2003d63c
   b4dc8:	2003c62c 	.word	0x2003c62c
   b4dcc:	2003bc6c 	.word	0x2003bc6c
   b4dd0:	2003d6cc 	.word	0x2003d6cc
   b4dd4:	2003d634 	.word	0x2003d634

000b4dd8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
   b4dd8:	b510      	push	{r4, lr}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   b4dda:	edd0 7a00 	vldr	s15, [r0]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   b4dde:	ee80 0a27 	vdiv.f32	s0, s0, s15
  auto quantize = [scale, zero_point](float f) {
   b4de2:	4604      	mov	r4, r0
   b4de4:	f010 fbd2 	bl	c558c <roundf>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   b4de8:	6860      	ldr	r0, [r4, #4]
   b4dea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  };
   b4dee:	ee10 3a10 	vmov	r3, s0
   b4df2:	4403      	add	r3, r0
   b4df4:	4618      	mov	r0, r3
   b4df6:	bd10      	pop	{r4, pc}

000b4df8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
   b4df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  if (activation == kTfLiteActRelu) {
   b4dfa:	2801      	cmp	r0, #1
                                           int32_t* act_min, int32_t* act_max) {
   b4dfc:	4614      	mov	r4, r2
  const auto zero_point = output->params.zero_point;
   b4dfe:	691a      	ldr	r2, [r3, #16]
  };
   b4e00:	68db      	ldr	r3, [r3, #12]
   b4e02:	9300      	str	r3, [sp, #0]
                                           int32_t* act_min, int32_t* act_max) {
   b4e04:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   b4e08:	460d      	mov	r5, r1
  };
   b4e0a:	9201      	str	r2, [sp, #4]
  if (activation == kTfLiteActRelu) {
   b4e0c:	d10a      	bne.n	b4e24 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x2c>
    *act_min = std::max(qmin, quantize(0.0));
   b4e0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; b4e70 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x78>
   b4e12:	4668      	mov	r0, sp
   b4e14:	f7ff ffe0 	bl	b4dd8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   b4e18:	42a8      	cmp	r0, r5
   b4e1a:	bfac      	ite	ge
   b4e1c:	6038      	strge	r0, [r7, #0]
   b4e1e:	603d      	strlt	r5, [r7, #0]
  } else if (activation == kTfLiteActRelu1) {
    *act_min = std::max(qmin, quantize(-1.0));
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
   b4e20:	6034      	str	r4, [r6, #0]
  }
}
   b4e22:	e013      	b.n	b4e4c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x54>
  } else if (activation == kTfLiteActRelu6) {
   b4e24:	2803      	cmp	r0, #3
   b4e26:	d113      	bne.n	b4e50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x58>
    *act_min = std::max(qmin, quantize(0.0));
   b4e28:	ed9f 0a11 	vldr	s0, [pc, #68]	; b4e70 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x78>
   b4e2c:	4668      	mov	r0, sp
   b4e2e:	f7ff ffd3 	bl	b4dd8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   b4e32:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   b4e36:	42a8      	cmp	r0, r5
   b4e38:	bfac      	ite	ge
   b4e3a:	6038      	strge	r0, [r7, #0]
   b4e3c:	603d      	strlt	r5, [r7, #0]
    *act_max = std::min(qmax, quantize(1.0));
   b4e3e:	4668      	mov	r0, sp
   b4e40:	f7ff ffca 	bl	b4dd8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   b4e44:	4284      	cmp	r4, r0
   b4e46:	bfd4      	ite	le
   b4e48:	6034      	strle	r4, [r6, #0]
   b4e4a:	6030      	strgt	r0, [r6, #0]
}
   b4e4c:	b003      	add	sp, #12
   b4e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (activation == kTfLiteActRelu1) {
   b4e50:	2802      	cmp	r0, #2
   b4e52:	d10b      	bne.n	b4e6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x74>
    *act_min = std::max(qmin, quantize(-1.0));
   b4e54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b4e58:	4668      	mov	r0, sp
   b4e5a:	f7ff ffbd 	bl	b4dd8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   b4e5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   b4e62:	42a8      	cmp	r0, r5
   b4e64:	bfac      	ite	ge
   b4e66:	6038      	strge	r0, [r7, #0]
   b4e68:	603d      	strlt	r5, [r7, #0]
    *act_max = std::min(qmax, quantize(1.0));
   b4e6a:	e7e8      	b.n	b4e3e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x46>
    *act_min = qmin;
   b4e6c:	6039      	str	r1, [r7, #0]
   b4e6e:	e7d7      	b.n	b4e20 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x28>
   b4e70:	00000000 	.word	0x00000000

000b4e74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
   b4e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4e76:	edd1 7a03 	vldr	s15, [r1, #12]
   b4e7a:	ed92 7a03 	vldr	s14, [r2, #12]
   b4e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   b4e82:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   b4e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e8c:	da09      	bge.n	b4ea2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   b4e8e:	4b0f      	ldr	r3, [pc, #60]	; (b4ecc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   b4e90:	9300      	str	r3, [sp, #0]
   b4e92:	6944      	ldr	r4, [r0, #20]
   b4e94:	4a0e      	ldr	r2, [pc, #56]	; (b4ed0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   b4e96:	490f      	ldr	r1, [pc, #60]	; (b4ed4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   b4e98:	2376      	movs	r3, #118	; 0x76
   b4e9a:	47a0      	blx	r4
   b4e9c:	2001      	movs	r0, #1
}
   b4e9e:	b002      	add	sp, #8
   b4ea0:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4ea2:	ee17 0a90 	vmov	r0, s15
   b4ea6:	f7ff fa1f 	bl	b42e8 <__aeabi_f2d>
   b4eaa:	4604      	mov	r4, r0
  *multiplier = input_product_scale / output->params.scale;
   b4eac:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4eae:	460d      	mov	r5, r1
  *multiplier = input_product_scale / output->params.scale;
   b4eb0:	f7ff fa1a 	bl	b42e8 <__aeabi_f2d>
   b4eb4:	460b      	mov	r3, r1
   b4eb6:	4602      	mov	r2, r0
   b4eb8:	4629      	mov	r1, r5
   b4eba:	4620      	mov	r0, r4
   b4ebc:	f7ff fb96 	bl	b45ec <__aeabi_ddiv>
   b4ec0:	9b06      	ldr	r3, [sp, #24]
   b4ec2:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   b4ec6:	2000      	movs	r0, #0
   b4ec8:	e7e9      	b.n	b4e9e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   b4eca:	bf00      	nop
   b4ecc:	000c707e 	.word	0x000c707e
   b4ed0:	000c7005 	.word	0x000c7005
   b4ed4:	000c7067 	.word	0x000c7067

000b4ed8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
   b4ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4edc:	ed2d 8b02 	vpush	{d8}
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4ee0:	ed91 8a03 	vldr	s16, [r1, #12]
   b4ee4:	edd2 7a03 	vldr	s15, [r2, #12]
                                              double* multiplier) {
   b4ee8:	b087      	sub	sp, #28
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4eea:	ee28 8a27 	vmul.f32	s16, s16, s15
                                              double* multiplier) {
   b4eee:	461e      	mov	r6, r3
   b4ef0:	e9dd b312 	ldrd	fp, r3, [sp, #72]	; 0x48
   b4ef4:	4604      	mov	r4, r0
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4ef6:	ee18 0a10 	vmov	r0, s16
                                              double* multiplier) {
   b4efa:	460d      	mov	r5, r1
   b4efc:	4692      	mov	sl, r2
   b4efe:	9305      	str	r3, [sp, #20]
  const double input_product_scale = input->params.scale * filter->params.scale;
   b4f00:	f7ff f9f2 	bl	b42e8 <__aeabi_f2d>
   b4f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (bias) {
   b4f08:	b31e      	cbz	r6, b4f52 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7a>
    const double bias_scale = bias->params.scale;
   b4f0a:	edd6 8a03 	vldr	s17, [r6, #12]
   b4f0e:	ee18 0a90 	vmov	r0, s17
   b4f12:	f7ff f9e9 	bl	b42e8 <__aeabi_f2d>
    TF_LITE_ENSURE(context,
   b4f16:	4602      	mov	r2, r0
   b4f18:	460b      	mov	r3, r1
    const double bias_scale = bias->params.scale;
   b4f1a:	4606      	mov	r6, r0
   b4f1c:	460f      	mov	r7, r1
    TF_LITE_ENSURE(context,
   b4f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b4f22:	f7ff f881 	bl	b4028 <__aeabi_dsub>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   b4f26:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   b4f2e:	4680      	mov	r8, r0
   b4f30:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   b4f34:	dc01      	bgt.n	b4f3a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x62>
	return __b;
      return __a;
   b4f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   b4f3a:	a316      	add	r3, pc, #88	; (adr r3, b4f94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xbc>)
   b4f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f40:	4630      	mov	r0, r6
   b4f42:	4639      	mov	r1, r7
   b4f44:	f7ff fa28 	bl	b4398 <__aeabi_dmul>
   b4f48:	4642      	mov	r2, r8
   b4f4a:	464b      	mov	r3, r9
   b4f4c:	f7ff fcaa 	bl	b48a4 <__aeabi_dcmpge>
   b4f50:	b160      	cbz	r0, b4f6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x94>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   b4f52:	9b05      	ldr	r3, [sp, #20]
   b4f54:	9312      	str	r3, [sp, #72]	; 0x48
   b4f56:	4652      	mov	r2, sl
   b4f58:	465b      	mov	r3, fp
   b4f5a:	4629      	mov	r1, r5
   b4f5c:	4620      	mov	r0, r4
}
   b4f5e:	b007      	add	sp, #28
   b4f60:	ecbd 8b02 	vpop	{d8}
   b4f64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   b4f68:	f7ff bf84 	b.w	b4e74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context,
   b4f6c:	4b06      	ldr	r3, [pc, #24]	; (b4f88 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
   b4f6e:	9300      	str	r3, [sp, #0]
   b4f70:	4620      	mov	r0, r4
   b4f72:	6965      	ldr	r5, [r4, #20]
   b4f74:	4a05      	ldr	r2, [pc, #20]	; (b4f8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
   b4f76:	4906      	ldr	r1, [pc, #24]	; (b4f90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb8>)
   b4f78:	2368      	movs	r3, #104	; 0x68
   b4f7a:	47a8      	blx	r5
}
   b4f7c:	2001      	movs	r0, #1
   b4f7e:	b007      	add	sp, #28
   b4f80:	ecbd 8b02 	vpop	{d8}
   b4f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f88:	000c7097 	.word	0x000c7097
   b4f8c:	000c7005 	.word	0x000c7005
   b4f90:	000c7067 	.word	0x000c7067
   b4f94:	a0b5ed8d 	.word	0xa0b5ed8d
   b4f98:	3eb0c6f7 	.word	0x3eb0c6f7

000b4f9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   b4f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4f9e:	460c      	mov	r4, r1
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   b4fa0:	7811      	ldrb	r1, [r2, #0]
   b4fa2:	2903      	cmp	r1, #3
   b4fa4:	d00d      	beq.n	b4fc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x26>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   b4fa6:	2909      	cmp	r1, #9
   b4fa8:	d017      	beq.n	b4fda <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3e>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   b4faa:	2907      	cmp	r1, #7
   b4fac:	d019      	beq.n	b4fe2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   b4fae:	4b0f      	ldr	r3, [pc, #60]	; (b4fec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x50>)
   b4fb0:	9300      	str	r3, [sp, #0]
   b4fb2:	6944      	ldr	r4, [r0, #20]
   b4fb4:	4a0e      	ldr	r2, [pc, #56]	; (b4ff0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x54>)
   b4fb6:	490f      	ldr	r1, [pc, #60]	; (b4ff4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x58>)
   b4fb8:	23a9      	movs	r3, #169	; 0xa9
   b4fba:	47a0      	blx	r4
   b4fbc:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   b4fbe:	b003      	add	sp, #12
   b4fc0:	bd30      	pop	{r4, r5, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   b4fc2:	20ff      	movs	r0, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   b4fc4:	2100      	movs	r1, #0
  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b4fc6:	9d06      	ldr	r5, [sp, #24]
   b4fc8:	e9cd 3500 	strd	r3, r5, [sp]
   b4fcc:	4613      	mov	r3, r2
   b4fce:	4602      	mov	r2, r0
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	f7ff ff11 	bl	b4df8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
  return kTfLiteOk;
   b4fd6:	2000      	movs	r0, #0
   b4fd8:	e7f1      	b.n	b4fbe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x22>
    qmax = std::numeric_limits<int8_t>::max();
   b4fda:	207f      	movs	r0, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   b4fdc:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   b4fe0:	e7f1      	b.n	b4fc6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2a>
    qmin = std::numeric_limits<int16_t>::min();
   b4fe2:	4905      	ldr	r1, [pc, #20]	; (b4ff8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5c>)
    qmax = std::numeric_limits<int16_t>::max();
   b4fe4:	f647 70ff 	movw	r0, #32767	; 0x7fff
   b4fe8:	e7ed      	b.n	b4fc6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2a>
   b4fea:	bf00      	nop
   b4fec:	000c70f6 	.word	0x000c70f6
   b4ff0:	000c7005 	.word	0x000c7005
   b4ff4:	000c7067 	.word	0x000c7067
   b4ff8:	ffff8000 	.word	0xffff8000

000b4ffc <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>:

void CalculateActivationRangeUint8(TfLiteFusedActivation activation,
                                   TfLiteTensor* output, int32_t* act_min,
                                   int32_t* act_max) {
   b4ffc:	b507      	push	{r0, r1, r2, lr}
  const int32_t qmin = std::numeric_limits<uint8_t>::min();
  const int32_t qmax = std::numeric_limits<uint8_t>::max();

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b4ffe:	e9cd 2300 	strd	r2, r3, [sp]
   b5002:	460b      	mov	r3, r1
   b5004:	22ff      	movs	r2, #255	; 0xff
   b5006:	2100      	movs	r1, #0
   b5008:	f7ff fef6 	bl	b4df8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
}
   b500c:	b003      	add	sp, #12
   b500e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5014 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>:
    int32_t* per_channel_multiplier, int* per_channel_shift) {
   b5014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5018:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   b501c:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
   b5020:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift) {
   b5024:	ee09 3a10 	vmov	s18, r3
   b5028:	b08b      	sub	sp, #44	; 0x2c
   b502a:	4605      	mov	r5, r0
   b502c:	460e      	mov	r6, r1
   b502e:	4617      	mov	r7, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   b5030:	d00c      	beq.n	b504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x38>
   b5032:	2401      	movs	r4, #1
   b5034:	4b66      	ldr	r3, [pc, #408]	; (b51d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1bc>)
   b5036:	9301      	str	r3, [sp, #4]
   b5038:	e9cd 8402 	strd	r8, r4, [sp, #8]
   b503c:	4b65      	ldr	r3, [pc, #404]	; (b51d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c0>)
   b503e:	9300      	str	r3, [sp, #0]
   b5040:	6945      	ldr	r5, [r0, #20]
   b5042:	2320      	movs	r3, #32
    TF_LITE_ENSURE_EQ(
   b5044:	4a64      	ldr	r2, [pc, #400]	; (b51d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b5046:	4965      	ldr	r1, [pc, #404]	; (b51dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c8>)
   b5048:	47a8      	blx	r5
   b504a:	e00f      	b.n	b506c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   b504c:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   b5050:	2c01      	cmp	r4, #1
   b5052:	d011      	beq.n	b5078 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x64>
   b5054:	e9cd 4802 	strd	r4, r8, [sp, #8]
   b5058:	4b5d      	ldr	r3, [pc, #372]	; (b51d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1bc>)
   b505a:	9301      	str	r3, [sp, #4]
   b505c:	4b60      	ldr	r3, [pc, #384]	; (b51e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1cc>)
   b505e:	9300      	str	r3, [sp, #0]
   b5060:	6944      	ldr	r4, [r0, #20]
   b5062:	4a5d      	ldr	r2, [pc, #372]	; (b51d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b5064:	495d      	ldr	r1, [pc, #372]	; (b51dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c8>)
   b5066:	2322      	movs	r3, #34	; 0x22
   b5068:	47a0      	blx	r4
   b506a:	4644      	mov	r4, r8
}
   b506c:	4620      	mov	r0, r4
   b506e:	b00b      	add	sp, #44	; 0x2c
   b5070:	ecbd 8b04 	vpop	{d8-d9}
   b5074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto* affine_quantization =
   b5078:	6b51      	ldr	r1, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   b507a:	b939      	cbnz	r1, b508c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x78>
   b507c:	4b59      	ldr	r3, [pc, #356]	; (b51e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d0>)
   b507e:	9300      	str	r3, [sp, #0]
   b5080:	6945      	ldr	r5, [r0, #20]
   b5082:	232d      	movs	r3, #45	; 0x2d
  TF_LITE_ENSURE(context, affine_quantization->scale);
   b5084:	4a54      	ldr	r2, [pc, #336]	; (b51d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1c4>)
   b5086:	4958      	ldr	r1, [pc, #352]	; (b51e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d4>)
   b5088:	47a8      	blx	r5
   b508a:	e7ef      	b.n	b506c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
   b508c:	680b      	ldr	r3, [r1, #0]
   b508e:	b923      	cbnz	r3, b509a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x86>
   b5090:	4b56      	ldr	r3, [pc, #344]	; (b51ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1d8>)
   b5092:	9300      	str	r3, [sp, #0]
   b5094:	6945      	ldr	r5, [r0, #20]
   b5096:	232e      	movs	r3, #46	; 0x2e
   b5098:	e7f4      	b.n	b5084 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   b509a:	f8d3 a000 	ldr.w	sl, [r3]
  if (is_per_channel) {
   b509e:	f1ba 0f01 	cmp.w	sl, #1
   b50a2:	dd2a      	ble.n	b50fa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xe6>
    TF_LITE_ENSURE_EQ(context, input->type, kTfLiteInt8);
   b50a4:	7832      	ldrb	r2, [r6, #0]
   b50a6:	2a09      	cmp	r2, #9
   b50a8:	d009      	beq.n	b50be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xaa>
   b50aa:	2309      	movs	r3, #9
   b50ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b50b0:	4b4f      	ldr	r3, [pc, #316]	; (b51f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1dc>)
   b50b2:	9301      	str	r3, [sp, #4]
   b50b4:	4b4f      	ldr	r3, [pc, #316]	; (b51f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e0>)
   b50b6:	9300      	str	r3, [sp, #0]
   b50b8:	6945      	ldr	r5, [r0, #20]
   b50ba:	2332      	movs	r3, #50	; 0x32
   b50bc:	e7c2      	b.n	b5044 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   b50be:	f897 c000 	ldrb.w	ip, [r7]
   b50c2:	f1bc 0f09 	cmp.w	ip, #9
   b50c6:	d008      	beq.n	b50da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xc6>
   b50c8:	4b49      	ldr	r3, [pc, #292]	; (b51f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1dc>)
   b50ca:	9301      	str	r3, [sp, #4]
   b50cc:	e9cd c202 	strd	ip, r2, [sp, #8]
   b50d0:	4b49      	ldr	r3, [pc, #292]	; (b51f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e4>)
   b50d2:	9300      	str	r3, [sp, #0]
   b50d4:	6945      	ldr	r5, [r0, #20]
   b50d6:	2333      	movs	r3, #51	; 0x33
   b50d8:	e7b4      	b.n	b5044 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
    TF_LITE_ENSURE_EQ(
   b50da:	68ba      	ldr	r2, [r7, #8]
   b50dc:	6889      	ldr	r1, [r1, #8]
   b50de:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   b50e2:	6852      	ldr	r2, [r2, #4]
   b50e4:	4592      	cmp	sl, r2
   b50e6:	d008      	beq.n	b50fa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0xe6>
   b50e8:	4b44      	ldr	r3, [pc, #272]	; (b51fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1e8>)
   b50ea:	9301      	str	r3, [sp, #4]
   b50ec:	e9cd a202 	strd	sl, r2, [sp, #8]
   b50f0:	4b43      	ldr	r3, [pc, #268]	; (b5200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1ec>)
   b50f2:	9300      	str	r3, [sp, #0]
   b50f4:	6945      	ldr	r5, [r0, #20]
   b50f6:	2334      	movs	r3, #52	; 0x34
   b50f8:	e7a4      	b.n	b5044 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x30>
  const float input_scale = input->params.scale;
   b50fa:	edd6 7a03 	vldr	s15, [r6, #12]
  const float output_scale = output->params.scale;
   b50fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   b5100:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   b5104:	edd2 7a03 	vldr	s15, [r2, #12]
   b5108:	3304      	adds	r3, #4
   b510a:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   b510e:	9304      	str	r3, [sp, #16]
   b5110:	f04f 0b00 	mov.w	fp, #0
   b5114:	45da      	cmp	sl, fp
   b5116:	dd32      	ble.n	b517e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x16a>
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b5118:	9b04      	ldr	r3, [sp, #16]
   b511a:	461a      	mov	r2, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   b511c:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b5120:	f852 3b04 	ldr.w	r3, [r2], #4
   b5124:	9204      	str	r2, [sp, #16]
   b5126:	9305      	str	r3, [sp, #20]
    const double effective_output_scale = static_cast<double>(input_scale) *
   b5128:	f7ff f8de 	bl	b42e8 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b512c:	9b05      	ldr	r3, [sp, #20]
    const double effective_output_scale = static_cast<double>(input_scale) *
   b512e:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b5130:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   b5132:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(filter_scales[i]);
   b5134:	f7ff f8d8 	bl	b42e8 <__aeabi_f2d>
   b5138:	4602      	mov	r2, r0
   b513a:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   b513c:	4640      	mov	r0, r8
   b513e:	4649      	mov	r1, r9
   b5140:	f7ff f92a 	bl	b4398 <__aeabi_dmul>
   b5144:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   b5146:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   b514a:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   b514c:	f7ff f8cc 	bl	b42e8 <__aeabi_f2d>
   b5150:	4602      	mov	r2, r0
   b5152:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   b5154:	4640      	mov	r0, r8
   b5156:	4649      	mov	r1, r9
   b5158:	f7ff fa48 	bl	b45ec <__aeabi_ddiv>
   b515c:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &shift);
   b5160:	a908      	add	r1, sp, #32
   b5162:	a807      	add	r0, sp, #28
   b5164:	f000 f864 	bl	b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
   b5168:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   b516a:	9b07      	ldr	r3, [sp, #28]
   b516c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    per_channel_shift[i] = shift;
   b5170:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b5172:	9b08      	ldr	r3, [sp, #32]
   b5174:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   b5178:	f10b 0b01 	add.w	fp, fp, #1
   b517c:	e7ca      	b.n	b5114 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x100>
  if (input->type == kTfLiteUInt8) {
   b517e:	7833      	ldrb	r3, [r6, #0]
   b5180:	2b03      	cmp	r3, #3
   b5182:	d122      	bne.n	b51ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x1b6>
    double real_multiplier = 0.0;
   b5184:	2200      	movs	r2, #0
   b5186:	2300      	movs	r3, #0
   b5188:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   b518c:	ab08      	add	r3, sp, #32
   b518e:	9301      	str	r3, [sp, #4]
   b5190:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5192:	9300      	str	r3, [sp, #0]
   b5194:	463a      	mov	r2, r7
   b5196:	ee19 3a10 	vmov	r3, s18
   b519a:	4631      	mov	r1, r6
   b519c:	4628      	mov	r0, r5
   b519e:	f7ff fe9b 	bl	b4ed8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   b51a2:	2800      	cmp	r0, #0
   b51a4:	f47f af62 	bne.w	b506c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   b51a8:	981a      	ldr	r0, [sp, #104]	; 0x68
   b51aa:	a907      	add	r1, sp, #28
   b51ac:	ed9d 0b08 	vldr	d0, [sp, #32]
   b51b0:	f000 f83e 	bl	b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
   b51b4:	9b07      	ldr	r3, [sp, #28]
   b51b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    CalculateActivationRangeUint8(activation, output, output_activation_min,
   b51b8:	e9dd 1018 	ldrd	r1, r0, [sp, #96]	; 0x60
    *shift = -exponent;
   b51bc:	425b      	negs	r3, r3
   b51be:	6013      	str	r3, [r2, #0]
    CalculateActivationRangeUint8(activation, output, output_activation_min,
   b51c0:	7800      	ldrb	r0, [r0, #0]
   b51c2:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
   b51c6:	f7ff ff19 	bl	b4ffc <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  return kTfLiteOk;
   b51ca:	2400      	movs	r4, #0
   b51cc:	e74e      	b.n	b506c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_+0x58>
   b51ce:	bf00      	nop
   b51d0:	000c7116 	.word	0x000c7116
   b51d4:	000c7130 	.word	0x000c7130
   b51d8:	000c7005 	.word	0x000c7005
   b51dc:	000c70fc 	.word	0x000c70fc
   b51e0:	000c7149 	.word	0x000c7149
   b51e4:	000c7163 	.word	0x000c7163
   b51e8:	000c7067 	.word	0x000c7067
   b51ec:	000c7177 	.word	0x000c7177
   b51f0:	000c92bb 	.word	0x000c92bb
   b51f4:	000c7192 	.word	0x000c7192
   b51f8:	000c719e 	.word	0x000c719e
   b51fc:	000c71ab 	.word	0x000c71ab
   b5200:	000c71e8 	.word	0x000c71e8

000b5204 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>:

void CalculateActivationRangeInt8(TfLiteFusedActivation activation,
                                  TfLiteTensor* output, int32_t* act_min,
                                  int32_t* act_max) {
   b5204:	b507      	push	{r0, r1, r2, lr}
  const int32_t qmin = std::numeric_limits<int8_t>::min();
  const int32_t qmax = std::numeric_limits<int8_t>::max();

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   b5206:	e9cd 2300 	strd	r2, r3, [sp]
   b520a:	460b      	mov	r3, r1
   b520c:	227f      	movs	r2, #127	; 0x7f
   b520e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   b5212:	f7ff fdf1 	bl	b4df8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
}
   b5216:	b003      	add	sp, #12
   b5218:	f85d fb04 	ldr.w	pc, [sp], #4

000b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   b521c:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   b521e:	6889      	ldr	r1, [r1, #8]
   b5220:	6880      	ldr	r0, [r0, #8]
   b5222:	f7ff fca2 	bl	b4b6a <TfLiteIntArrayEqual>
}
   b5226:	3800      	subs	r0, #0
   b5228:	bf18      	it	ne
   b522a:	2001      	movne	r0, #1
   b522c:	bd08      	pop	{r3, pc}
	...

000b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
   b5230:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
   b5232:	2200      	movs	r2, #0
                        int* shift) {
   b5234:	4606      	mov	r6, r0
   b5236:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   b5238:	2300      	movs	r3, #0
   b523a:	ec51 0b10 	vmov	r0, r1, d0
   b523e:	ed8d 0b00 	vstr	d0, [sp]
   b5242:	f7ff fb11 	bl	b4868 <__aeabi_dcmpeq>
   b5246:	ed9d 0b00 	vldr	d0, [sp]
   b524a:	4605      	mov	r5, r0
   b524c:	b120      	cbz	r0, b5258 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
   b524e:	2300      	movs	r3, #0
   b5250:	6033      	str	r3, [r6, #0]
    *shift = 0;
   b5252:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
   b5254:	b002      	add	sp, #8
   b5256:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
   b5258:	4620      	mov	r0, r4
   b525a:	f00f fff5 	bl	c5248 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b525e:	4b14      	ldr	r3, [pc, #80]	; (b52b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
   b5260:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   b5262:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b5266:	f7ff f897 	bl	b4398 <__aeabi_dmul>
}
inline double TfLiteRound(const double x) { return ::round(x); }
#else
template <class T>
inline T TfLiteRound(const T x) {
  return std::round(x);
   b526a:	ec41 0b10 	vmov	d0, r0, r1
   b526e:	f010 f821 	bl	c52b4 <round>
   b5272:	ec51 0b10 	vmov	r0, r1, d0
   b5276:	f7ff fbc1 	bl	b49fc <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   b527a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b527e:	4282      	cmp	r2, r0
   b5280:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   b5284:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   b5286:	da01      	bge.n	b528c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
   b5288:	f00f fb08 	bl	c489c <abort>
  if (q_fixed == (1ll << 31)) {
   b528c:	42a9      	cmp	r1, r5
   b528e:	bf08      	it	eq
   b5290:	4290      	cmpeq	r0, r2
    ++*shift;
   b5292:	bf02      	ittt	eq
   b5294:	6823      	ldreq	r3, [r4, #0]
   b5296:	3301      	addeq	r3, #1
   b5298:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   b529a:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
   b529c:	bf08      	it	eq
   b529e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
   b52a2:	321f      	adds	r2, #31
    *shift = 0;
   b52a4:	bfbc      	itt	lt
   b52a6:	2300      	movlt	r3, #0
   b52a8:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   b52aa:	6033      	str	r3, [r6, #0]
   b52ac:	e7d2      	b.n	b5254 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
   b52ae:	bf00      	nop
   b52b0:	41e00000 	.word	0x41e00000

000b52b4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
   b52b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   b52b6:	4b0c      	ldr	r3, [pc, #48]	; (b52e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
   b52b8:	4605      	mov	r5, r0
   b52ba:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   b52bc:	2200      	movs	r2, #0
   b52be:	ec51 0b10 	vmov	r0, r1, d0
   b52c2:	ed8d 0b00 	vstr	d0, [sp]
   b52c6:	f7ff faf7 	bl	b48b8 <__aeabi_dcmpgt>
   b52ca:	ed9d 0b00 	vldr	d0, [sp]
   b52ce:	b908      	cbnz	r0, b52d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
   b52d0:	f00f fae4 	bl	c489c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   b52d4:	4621      	mov	r1, r4
   b52d6:	4628      	mov	r0, r5
   b52d8:	f7ff ffaa 	bl	b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
   b52dc:	6823      	ldr	r3, [r4, #0]
   b52de:	2b00      	cmp	r3, #0
   b52e0:	dbf6      	blt.n	b52d0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
   b52e2:	b003      	add	sp, #12
   b52e4:	bd30      	pop	{r4, r5, pc}
   b52e6:	bf00      	nop
   b52e8:	3ff00000 	.word	0x3ff00000

000b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
   b52ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b52ee:	ec55 4b10 	vmov	r4, r5, d0
   b52f2:	4607      	mov	r7, r0
   b52f4:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   b52f6:	4b0f      	ldr	r3, [pc, #60]	; (b5334 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x48>)
   b52f8:	ee10 0a10 	vmov	r0, s0
   b52fc:	2200      	movs	r2, #0
   b52fe:	4629      	mov	r1, r5
   b5300:	f7ff fabc 	bl	b487c <__aeabi_dcmplt>
   b5304:	b908      	cbnz	r0, b530a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1e>
   b5306:	f00f fac9 	bl	c489c <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   b530a:	2200      	movs	r2, #0
   b530c:	2300      	movs	r3, #0
   b530e:	4620      	mov	r0, r4
   b5310:	4629      	mov	r1, r5
   b5312:	f7ff fad1 	bl	b48b8 <__aeabi_dcmpgt>
   b5316:	2800      	cmp	r0, #0
   b5318:	d0f5      	beq.n	b5306 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   b531a:	ec45 4b10 	vmov	d0, r4, r5
   b531e:	a901      	add	r1, sp, #4
   b5320:	4638      	mov	r0, r7
   b5322:	f7ff ff85 	bl	b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
   b5326:	9b01      	ldr	r3, [sp, #4]
   b5328:	2b00      	cmp	r3, #0
   b532a:	dcec      	bgt.n	b5306 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  *left_shift = shift;
   b532c:	6033      	str	r3, [r6, #0]
}
   b532e:	b003      	add	sp, #12
   b5330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5332:	bf00      	nop
   b5334:	3ff00000 	.word	0x3ff00000

000b5338 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   b5338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b533c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   b5340:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b5344:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   b5348:	ec57 6b10 	vmov	r6, r7, d0
   b534c:	ec59 8b11 	vmov	r8, r9, d1
   b5350:	4693      	mov	fp, r2
   b5352:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   b5354:	f7fe ffb6 	bl	b42c4 <__aeabi_i2d>
   b5358:	4642      	mov	r2, r8
   b535a:	4604      	mov	r4, r0
   b535c:	460d      	mov	r5, r1
   b535e:	464b      	mov	r3, r9
   b5360:	4630      	mov	r0, r6
   b5362:	4639      	mov	r1, r7
   b5364:	f7ff f818 	bl	b4398 <__aeabi_dmul>
   b5368:	4602      	mov	r2, r0
   b536a:	460b      	mov	r3, r1
   b536c:	4620      	mov	r0, r4
   b536e:	4629      	mov	r1, r5
   b5370:	f7ff f812 	bl	b4398 <__aeabi_dmul>
   b5374:	4602      	mov	r2, r0
   b5376:	460b      	mov	r3, r1
   b5378:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   b537c:	a30a      	add	r3, pc, #40	; (adr r3, b53a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
   b537e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5382:	f7ff fa99 	bl	b48b8 <__aeabi_dcmpgt>
   b5386:	b108      	cbz	r0, b538c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
   b5388:	ed9f 8b07 	vldr	d8, [pc, #28]	; b53a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b538c:	eeb0 0a48 	vmov.f32	s0, s16
   b5390:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
   b5394:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b5398:	4659      	mov	r1, fp
   b539a:	4650      	mov	r0, sl
}
   b539c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   b53a0:	f7ff bf88 	b.w	b52b4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
   b53a4:	f3af 8000 	nop.w
   b53a8:	ffc00000 	.word	0xffc00000
   b53ac:	41dfffff 	.word	0x41dfffff

000b53b0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   b53b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   b53b4:	2401      	movs	r4, #1
                         int total_signed_bits) {
   b53b6:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   b53b8:	fa04 f000 	lsl.w	r0, r4, r0
   b53bc:	3801      	subs	r0, #1
                         int total_signed_bits) {
   b53be:	4688      	mov	r8, r1
   b53c0:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   b53c2:	f7fe ff7f 	bl	b42c4 <__aeabi_i2d>
   b53c6:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   b53c8:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   b53cc:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   b53ce:	f1c0 0320 	rsb	r3, r0, #32
   b53d2:	f1a0 0120 	sub.w	r1, r0, #32
   b53d6:	fa24 f303 	lsr.w	r3, r4, r3
   b53da:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   b53de:	fa04 f000 	lsl.w	r0, r4, r0
   b53e2:	4319      	orrs	r1, r3
   b53e4:	f7fe ffaa 	bl	b433c <__aeabi_l2d>
   b53e8:	4602      	mov	r2, r0
   b53ea:	460b      	mov	r3, r1
   b53ec:	4630      	mov	r0, r6
   b53ee:	4639      	mov	r1, r7
   b53f0:	f7fe ffd2 	bl	b4398 <__aeabi_dmul>
      (1ll << input_left_shift);
   b53f4:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   b53f8:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   b53fa:	f1a8 0120 	sub.w	r1, r8, #32
   b53fe:	fa24 f303 	lsr.w	r3, r4, r3
   b5402:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   b5406:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   b5408:	4319      	orrs	r1, r3
   b540a:	fa04 f008 	lsl.w	r0, r4, r8
   b540e:	f7fe ff95 	bl	b433c <__aeabi_l2d>
   b5412:	4602      	mov	r2, r0
   b5414:	460b      	mov	r3, r1
  const double max_input_rescaled =
   b5416:	4630      	mov	r0, r6
   b5418:	4639      	mov	r1, r7
   b541a:	f7ff f8e7 	bl	b45ec <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   b541e:	ec41 0b10 	vmov	d0, r0, r1
   b5422:	f00f fe8d 	bl	c5140 <floor>
   b5426:	ec51 0b10 	vmov	r0, r1, d0
   b542a:	f7ff fa4f 	bl	b48cc <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   b542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5432 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi>:
#include "tensorflow/lite/experimental/micro/micro_mutable_op_resolver.h"

namespace tflite {

const TfLiteRegistration* MicroMutableOpResolver::FindOp(
    tflite::BuiltinOperator op, int version) const {
   b5432:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < registrations_len_; ++i) {
   b5434:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   b5438:	2400      	movs	r4, #0
   b543a:	685d      	ldr	r5, [r3, #4]
   b543c:	4603      	mov	r3, r0
   b543e:	42a5      	cmp	r5, r4
   b5440:	dd0c      	ble.n	b545c <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x2a>
    const TfLiteRegistration& registration = registrations_[i];
    if ((registration.builtin_code == op) &&
   b5442:	699e      	ldr	r6, [r3, #24]
   b5444:	428e      	cmp	r6, r1
   b5446:	d106      	bne.n	b5456 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x24>
   b5448:	6a1e      	ldr	r6, [r3, #32]
   b544a:	4296      	cmp	r6, r2
   b544c:	d103      	bne.n	b5456 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x24>
    const TfLiteRegistration& registration = registrations_[i];
   b544e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   b5452:	3004      	adds	r0, #4
        (registration.version == version)) {
      return &registration;
    }
  }
  return nullptr;
}
   b5454:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < registrations_len_; ++i) {
   b5456:	3401      	adds	r4, #1
   b5458:	3320      	adds	r3, #32
   b545a:	e7f0      	b.n	b543e <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0xc>
  return nullptr;
   b545c:	2000      	movs	r0, #0
   b545e:	e7f9      	b.n	b5454 <_ZNK6tflite22MicroMutableOpResolver6FindOpENS_15BuiltinOperatorEi+0x22>

000b5460 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci>:

const TfLiteRegistration* MicroMutableOpResolver::FindOp(const char* op,
                                                         int version) const {
   b5460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (int i = 0; i < registrations_len_; ++i) {
   b5464:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
                                                         int version) const {
   b5468:	4606      	mov	r6, r0
  for (int i = 0; i < registrations_len_; ++i) {
   b546a:	f8d3 8004 	ldr.w	r8, [r3, #4]
                                                         int version) const {
   b546e:	4689      	mov	r9, r1
   b5470:	4617      	mov	r7, r2
   b5472:	4605      	mov	r5, r0
  for (int i = 0; i < registrations_len_; ++i) {
   b5474:	2400      	movs	r4, #0
   b5476:	45a0      	cmp	r8, r4
   b5478:	dd12      	ble.n	b54a0 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x40>
    const TfLiteRegistration& registration = registrations_[i];
    if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   b547a:	69ab      	ldr	r3, [r5, #24]
   b547c:	2b20      	cmp	r3, #32
   b547e:	d10c      	bne.n	b549a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
        (strcmp(registration.custom_name, op) == 0) &&
   b5480:	69e8      	ldr	r0, [r5, #28]
   b5482:	4649      	mov	r1, r9
   b5484:	f7ff faf0 	bl	b4a68 <strcmp>
    if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   b5488:	b938      	cbnz	r0, b549a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
        (strcmp(registration.custom_name, op) == 0) &&
   b548a:	6a2b      	ldr	r3, [r5, #32]
   b548c:	42bb      	cmp	r3, r7
   b548e:	d104      	bne.n	b549a <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x3a>
    const TfLiteRegistration& registration = registrations_[i];
   b5490:	eb06 1044 	add.w	r0, r6, r4, lsl #5
   b5494:	3004      	adds	r0, #4
        (registration.version == version)) {
      return &registration;
    }
  }
  return nullptr;
}
   b5496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (int i = 0; i < registrations_len_; ++i) {
   b549a:	3401      	adds	r4, #1
   b549c:	3520      	adds	r5, #32
   b549e:	e7ea      	b.n	b5476 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x16>
  return nullptr;
   b54a0:	2000      	movs	r0, #0
   b54a2:	e7f8      	b.n	b5496 <_ZNK6tflite22MicroMutableOpResolver6FindOpEPKci+0x36>

000b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>:

void MicroMutableOpResolver::AddBuiltin(tflite::BuiltinOperator op,
                                        TfLiteRegistration* registration,
                                        int min_version, int max_version) {
   b54a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b54a8:	4686      	mov	lr, r0
   b54aa:	4688      	mov	r8, r1
   b54ac:	4691      	mov	r9, r2
   b54ae:	461f      	mov	r7, r3
  for (int version = min_version; version <= max_version; ++version) {
    if (registrations_len_ >= TFLITE_REGISTRATIONS_MAX) {
   b54b0:	f500 5a80 	add.w	sl, r0, #4096	; 0x1000
  for (int version = min_version; version <= max_version; ++version) {
   b54b4:	9b08      	ldr	r3, [sp, #32]
   b54b6:	429f      	cmp	r7, r3
   b54b8:	dc15      	bgt.n	b54e6 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x42>
    if (registrations_len_ >= TFLITE_REGISTRATIONS_MAX) {
   b54ba:	f8da 6004 	ldr.w	r6, [sl, #4]
   b54be:	2e7f      	cmp	r6, #127	; 0x7f
   b54c0:	dc11      	bgt.n	b54e6 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x42>
      // TODO(petewarden) - Add error reporting hooks so we can report this!
      return;
    }
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
    registrations_len_ += 1;
   b54c2:	1c73      	adds	r3, r6, #1
   b54c4:	f8ca 3004 	str.w	r3, [sl, #4]

    *new_registration = *registration;
   b54c8:	464d      	mov	r5, r9
   b54ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b54cc:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
   b54d0:	1d34      	adds	r4, r6, #4
   b54d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b54d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    new_registration->builtin_code = op;
    new_registration->version = version;
   b54dc:	6237      	str	r7, [r6, #32]
    new_registration->builtin_code = op;
   b54de:	f8c6 8018 	str.w	r8, [r6, #24]
  for (int version = min_version; version <= max_version; ++version) {
   b54e2:	3701      	adds	r7, #1
   b54e4:	e7e6      	b.n	b54b4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii+0x10>
  }
}
   b54e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b54ea <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() {}
   b54ea:	4770      	bx	lr

000b54ec <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
  DebugLog("\r\n");
}
} // namespace

int MicroErrorReporter::Report(const char *format, va_list args)
{
   b54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  int output_cache_index = 0;
   b54ee:	2300      	movs	r3, #0
{
   b54f0:	b093      	sub	sp, #76	; 0x4c
   b54f2:	460d      	mov	r5, r1
   b54f4:	4614      	mov	r4, r2
      output_cache[output_cache_index] = 0;
   b54f6:	461f      	mov	r7, r3
  while (*current != 0)
   b54f8:	782a      	ldrb	r2, [r5, #0]
   b54fa:	2a00      	cmp	r2, #0
   b54fc:	d03c      	beq.n	b5578 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x8c>
    if (*current == '%')
   b54fe:	2a25      	cmp	r2, #37	; 0x25
   b5500:	d12d      	bne.n	b555e <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x72>
      const char next = *(current + 1);
   b5502:	786e      	ldrb	r6, [r5, #1]
      if ((next == 'd') || (next == 's') || (next == 'f'))
   b5504:	f006 02fd 	and.w	r2, r6, #253	; 0xfd
   b5508:	2a64      	cmp	r2, #100	; 0x64
   b550a:	d001      	beq.n	b5510 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x24>
   b550c:	2e73      	cmp	r6, #115	; 0x73
   b550e:	d12b      	bne.n	b5568 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x7c>
        current += 1;
   b5510:	3501      	adds	r5, #1
        if (output_cache_index > 0)
   b5512:	b133      	cbz	r3, b5522 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x36>
          output_cache[output_cache_index] = 0;
   b5514:	aa12      	add	r2, sp, #72	; 0x48
   b5516:	4413      	add	r3, r2
          DebugLog(output_cache);
   b5518:	a801      	add	r0, sp, #4
          output_cache[output_cache_index] = 0;
   b551a:	f803 7c44 	strb.w	r7, [r3, #-68]
          DebugLog(output_cache);
   b551e:	f00d fe19 	bl	c3154 <DebugLog>
        if (next == 'd')
   b5522:	2e64      	cmp	r6, #100	; 0x64
   b5524:	d106      	bne.n	b5534 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>
          DebugLogInt32(va_arg(args, int));
   b5526:	f854 0b04 	ldr.w	r0, [r4], #4
   b552a:	f000 feaf 	bl	b628c <DebugLogInt32>
   b552e:	2300      	movs	r3, #0
    current += 1;
   b5530:	3501      	adds	r5, #1
  while (*current != 0)
   b5532:	e7e1      	b.n	b54f8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xc>
        else if (next == 's')
   b5534:	2e73      	cmp	r6, #115	; 0x73
   b5536:	d104      	bne.n	b5542 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x56>
          DebugLog(va_arg(args, char *));
   b5538:	f854 0b04 	ldr.w	r0, [r4], #4
      DebugLog(output_cache);
   b553c:	f00d fe0a 	bl	c3154 <DebugLog>
      output_cache_index = 0;
   b5540:	e7f5      	b.n	b552e <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
        else if (next == 'f')
   b5542:	2e66      	cmp	r6, #102	; 0x66
   b5544:	d1f3      	bne.n	b552e <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
          DebugLogFloat(va_arg(args, double));
   b5546:	3407      	adds	r4, #7
   b5548:	f024 0407 	bic.w	r4, r4, #7
   b554c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   b5550:	f7ff fa04 	bl	b495c <__aeabi_d2f>
   b5554:	ee00 0a10 	vmov	s0, r0
   b5558:	f000 feae 	bl	b62b8 <DebugLogFloat>
   b555c:	e7e7      	b.n	b552e <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x42>
      output_cache[output_cache_index] = *current;
   b555e:	a912      	add	r1, sp, #72	; 0x48
   b5560:	4419      	add	r1, r3
      output_cache_index += 1;
   b5562:	3301      	adds	r3, #1
      output_cache[output_cache_index] = *current;
   b5564:	f801 2c44 	strb.w	r2, [r1, #-68]
    if (output_cache_index >= output_cache_size)
   b5568:	2b3f      	cmp	r3, #63	; 0x3f
   b556a:	dde1      	ble.n	b5530 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x44>
      output_cache[output_cache_index] = 0;
   b556c:	aa12      	add	r2, sp, #72	; 0x48
   b556e:	4413      	add	r3, r2
      DebugLog(output_cache);
   b5570:	a801      	add	r0, sp, #4
      output_cache[output_cache_index] = 0;
   b5572:	f803 7c44 	strb.w	r7, [r3, #-68]
      DebugLog(output_cache);
   b5576:	e7e1      	b.n	b553c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x50>
  if (output_cache_index > 0)
   b5578:	b133      	cbz	r3, b5588 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x9c>
    output_cache[output_cache_index] = 0;
   b557a:	a912      	add	r1, sp, #72	; 0x48
   b557c:	440b      	add	r3, r1
    DebugLog(output_cache);
   b557e:	a801      	add	r0, sp, #4
    output_cache[output_cache_index] = 0;
   b5580:	f803 2c44 	strb.w	r2, [r3, #-68]
    DebugLog(output_cache);
   b5584:	f00d fde6 	bl	c3154 <DebugLog>
  DebugLog("\r\n");
   b5588:	4802      	ldr	r0, [pc, #8]	; (b5594 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xa8>)
   b558a:	f00d fde3 	bl	c3154 <DebugLog>
  DebugLogPrintf(format, args);
  return 0;
}
   b558e:	2000      	movs	r0, #0
   b5590:	b013      	add	sp, #76	; 0x4c
   b5592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5594:	000c7209 	.word	0x000c7209

000b5598 <_ZN6tflite18MicroErrorReporterD0Ev>:
   b5598:	b510      	push	{r4, lr}
   b559a:	2104      	movs	r1, #4
   b559c:	4604      	mov	r4, r0
   b559e:	f7ff fab4 	bl	b4b0a <_ZdlPvj>
   b55a2:	4620      	mov	r0, r4
   b55a4:	bd10      	pop	{r4, pc}

000b55a6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
static const int8_t kAsymmetricInt8Max = 127;
static const int kSymmetricInt8Scale = kAsymmetricInt8Max;

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
   b55a6:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   b55a8:	f850 4b04 	ldr.w	r4, [r0], #4
   b55ac:	2200      	movs	r2, #0
  int result = 1;
   b55ae:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   b55b0:	4294      	cmp	r4, r2
   b55b2:	dd04      	ble.n	b55be <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   b55b4:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   b55b8:	3201      	adds	r2, #1
    result *= dims.data[i];
   b55ba:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   b55bc:	e7f8      	b.n	b55b0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   b55be:	4618      	mov	r0, r3
   b55c0:	bd10      	pop	{r4, pc}
	...

000b55c4 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf>:

void SignedSymmetricPerChannelQuantize(const float* values,
                                       TfLiteIntArray* dims,
                                       int quantized_dimension,
                                       int8_t* quantized_values,
                                       float* scaling_factors) {
   b55c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55c8:	ed2d 8b06 	vpush	{d8-d10}
   b55cc:	b089      	sub	sp, #36	; 0x24
   b55ce:	460e      	mov	r6, r1
   b55d0:	9003      	str	r0, [sp, #12]
  int input_size = ElementCount(*dims);
   b55d2:	4608      	mov	r0, r1
                                       float* scaling_factors) {
   b55d4:	9304      	str	r3, [sp, #16]
   b55d6:	9202      	str	r2, [sp, #8]
  int input_size = ElementCount(*dims);
   b55d8:	f7ff ffe5 	bl	b55a6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  int channel_count = dims->data[quantized_dimension];
   b55dc:	9b02      	ldr	r3, [sp, #8]
   b55de:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  int per_channel_size = input_size / channel_count;
  for (int channel = 0; channel < channel_count; channel++) {
    float min = 0;
    float max = 0;
   b55e2:	ed9f 9a3e 	vldr	s18, [pc, #248]	; b56dc <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x118>
      int idx = channel * channel_stride + i * stride;
      min = fminf(min, values[idx]);
      max = fmaxf(max, values[idx]);
    }
    scaling_factors[channel] =
        fmaxf(fabs(min), fabs(max)) / kSymmetricInt8Scale;
   b55e6:	eddf 9a3e 	vldr	s19, [pc, #248]	; b56e0 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x11c>
    for (int i = 0; i < per_channel_size; i++) {
      int idx = channel * channel_stride + i * stride;
      const int32_t quantized_value =
          static_cast<int32_t>(roundf(values[idx] / scaling_factors[channel]));
      // Clamp: just in case some odd numeric offset.
      quantized_values[idx] = fminf(
   b55ea:	ed9f aa3e 	vldr	s20, [pc, #248]	; b56e4 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x120>
  int channel_count = dims->data[quantized_dimension];
   b55ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  for (int channel = 0; channel < channel_count; channel++) {
   b55f2:	2700      	movs	r7, #0
  int channel_count = dims->data[quantized_dimension];
   b55f4:	685b      	ldr	r3, [r3, #4]
   b55f6:	9301      	str	r3, [sp, #4]
  int per_channel_size = input_size / channel_count;
   b55f8:	fb90 f5f3 	sdiv	r5, r0, r3
  for (int channel = 0; channel < channel_count; channel++) {
   b55fc:	9b01      	ldr	r3, [sp, #4]
   b55fe:	429f      	cmp	r7, r3
   b5600:	da67      	bge.n	b56d2 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x10e>
   b5602:	1d31      	adds	r1, r6, #4
    for (int i = 0; i < quantized_dimension; i++) {
   b5604:	2200      	movs	r2, #0
    int stride = 1;
   b5606:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < quantized_dimension; i++) {
   b560a:	9b02      	ldr	r3, [sp, #8]
   b560c:	429a      	cmp	r2, r3
   b560e:	da05      	bge.n	b561c <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x58>
      stride *= dims->data[i];
   b5610:	f851 0b04 	ldr.w	r0, [r1], #4
    for (int i = 0; i < quantized_dimension; i++) {
   b5614:	3201      	adds	r2, #1
      stride *= dims->data[i];
   b5616:	fb00 fa0a 	mul.w	sl, r0, sl
    for (int i = 0; i < quantized_dimension; i++) {
   b561a:	e7f6      	b.n	b560a <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x46>
    for (int i = 0; i < per_channel_size; i++) {
   b561c:	9b03      	ldr	r3, [sp, #12]
    int channel_stride = per_channel_size / stride;
   b561e:	fb95 f4fa 	sdiv	r4, r5, sl
      int idx = channel * channel_stride + i * stride;
   b5622:	437c      	muls	r4, r7
   b5624:	eb03 0884 	add.w	r8, r3, r4, lsl #2
   b5628:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   b562c:	4641      	mov	r1, r8
    for (int i = 0; i < per_channel_size; i++) {
   b562e:	2000      	movs	r0, #0
    float max = 0;
   b5630:	eef0 8a49 	vmov.f32	s17, s18
    float min = 0;
   b5634:	eeb0 8a49 	vmov.f32	s16, s18
    for (int i = 0; i < per_channel_size; i++) {
   b5638:	42a8      	cmp	r0, r5
   b563a:	9007      	str	r0, [sp, #28]
   b563c:	da17      	bge.n	b566e <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0xaa>
      min = fminf(min, values[idx]);
   b563e:	edd1 0a00 	vldr	s1, [r1]
   b5642:	9106      	str	r1, [sp, #24]
   b5644:	eeb0 0a48 	vmov.f32	s0, s16
   b5648:	edcd 0a05 	vstr	s1, [sp, #20]
   b564c:	f00f ff64 	bl	c5518 <fminf>
      max = fmaxf(max, values[idx]);
   b5650:	eddd 0a05 	vldr	s1, [sp, #20]
      min = fminf(min, values[idx]);
   b5654:	eeb0 8a40 	vmov.f32	s16, s0
      max = fmaxf(max, values[idx]);
   b5658:	eeb0 0a68 	vmov.f32	s0, s17
   b565c:	f00f ff3e 	bl	c54dc <fmaxf>
    for (int i = 0; i < per_channel_size; i++) {
   b5660:	9807      	ldr	r0, [sp, #28]
   b5662:	9906      	ldr	r1, [sp, #24]
      max = fmaxf(max, values[idx]);
   b5664:	eef0 8a40 	vmov.f32	s17, s0
    for (int i = 0; i < per_channel_size; i++) {
   b5668:	3001      	adds	r0, #1
   b566a:	4459      	add	r1, fp
   b566c:	e7e4      	b.n	b5638 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x74>
        fmaxf(fabs(min), fabs(max)) / kSymmetricInt8Scale;
   b566e:	eef0 0ae8 	vabs.f32	s1, s17
   b5672:	eeb0 0ac8 	vabs.f32	s0, s16
   b5676:	f00f ff31 	bl	c54dc <fmaxf>
   b567a:	eec0 7a29 	vdiv.f32	s15, s0, s19
   b567e:	9b04      	ldr	r3, [sp, #16]
    for (int i = 0; i < per_channel_size; i++) {
   b5680:	2100      	movs	r1, #0
   b5682:	441c      	add	r4, r3
    scaling_factors[channel] =
   b5684:	ece9 7a01 	vstmia	r9!, {s15}
    for (int i = 0; i < per_channel_size; i++) {
   b5688:	42a9      	cmp	r1, r5
   b568a:	9105      	str	r1, [sp, #20]
   b568c:	da1f      	bge.n	b56ce <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x10a>
          static_cast<int32_t>(roundf(values[idx] / scaling_factors[channel]));
   b568e:	ed59 7a01 	vldr	s15, [r9, #-4]
   b5692:	ed98 0a00 	vldr	s0, [r8]
   b5696:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b569a:	f00f ff77 	bl	c558c <roundf>
      quantized_values[idx] = fminf(
   b569e:	44d8      	add	r8, fp
      const int32_t quantized_value =
   b56a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
      quantized_values[idx] = fminf(
   b56a4:	eef8 0ac0 	vcvt.f32.s32	s1, s0
   b56a8:	eeb0 0a4a 	vmov.f32	s0, s20
   b56ac:	f00f ff16 	bl	c54dc <fmaxf>
   b56b0:	eef0 0a40 	vmov.f32	s1, s0
   b56b4:	eeb0 0a69 	vmov.f32	s0, s19
   b56b8:	f00f ff2e 	bl	c5518 <fminf>
   b56bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    for (int i = 0; i < per_channel_size; i++) {
   b56c0:	9905      	ldr	r1, [sp, #20]
      quantized_values[idx] = fminf(
   b56c2:	ee17 0a90 	vmov	r0, s15
    for (int i = 0; i < per_channel_size; i++) {
   b56c6:	3101      	adds	r1, #1
      quantized_values[idx] = fminf(
   b56c8:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < per_channel_size; i++) {
   b56ca:	4454      	add	r4, sl
   b56cc:	e7dc      	b.n	b5688 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0xc4>
  for (int channel = 0; channel < channel_count; channel++) {
   b56ce:	3701      	adds	r7, #1
   b56d0:	e794      	b.n	b55fc <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf+0x38>
          kSymmetricInt8Scale, fmaxf(-kSymmetricInt8Scale, quantized_value));
    }
  }
}
   b56d2:	b009      	add	sp, #36	; 0x24
   b56d4:	ecbd 8b06 	vpop	{d8-d10}
   b56d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56dc:	00000000 	.word	0x00000000
   b56e0:	42fe0000 	.word	0x42fe0000
   b56e4:	c2fe0000 	.word	0xc2fe0000

000b56e8 <_ZN6tflite19SymmetricDequantizeEPKaifPf>:
}

void SymmetricDequantize(const int8_t* values, const int size,
                         const float dequantization_scale,
                         float* dequantized_values) {
  for (int i = 0; i < size; ++i) {
   b56e8:	2300      	movs	r3, #0
   b56ea:	428b      	cmp	r3, r1
   b56ec:	da0b      	bge.n	b5706 <_ZN6tflite19SymmetricDequantizeEPKaifPf+0x1e>
    dequantized_values[i] = values[i] * dequantization_scale;
   b56ee:	f910 c003 	ldrsb.w	ip, [r0, r3]
   b56f2:	ee07 ca90 	vmov	s15, ip
   b56f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < size; ++i) {
   b56fa:	3301      	adds	r3, #1
    dequantized_values[i] = values[i] * dequantization_scale;
   b56fc:	ee67 7a80 	vmul.f32	s15, s15, s0
   b5700:	ece2 7a01 	vstmia	r2!, {s15}
  for (int i = 0; i < size; ++i) {
   b5704:	e7f1      	b.n	b56ea <_ZN6tflite19SymmetricDequantizeEPKaifPf+0x2>
  }
}
   b5706:	4770      	bx	lr

000b5708 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  size_t data_as_size_t = reinterpret_cast<size_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_size_t + (alignment - 1)) / alignment) * alignment);
   b5708:	1e4b      	subs	r3, r1, #1
   b570a:	4418      	add	r0, r3
   b570c:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   b5710:	4348      	muls	r0, r1
   b5712:	4770      	bx	lr

000b5714 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  size_t data_as_size_t = reinterpret_cast<size_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_size_t / alignment) * alignment);
   b5714:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   b5718:	4348      	muls	r0, r1
   b571a:	4770      	bx	lr

000b571c <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   b571c:	3801      	subs	r0, #1
   b571e:	4408      	add	r0, r1
   b5720:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
   b5724:	4348      	muls	r0, r1
   b5726:	4770      	bx	lr

000b5728 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
   b5728:	b513      	push	{r0, r1, r4, lr}
   b572a:	4614      	mov	r4, r2
   b572c:	1e42      	subs	r2, r0, #1
   b572e:	4603      	mov	r3, r0
   b5730:	2a08      	cmp	r2, #8
   b5732:	d811      	bhi.n	b5758 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x30>
   b5734:	e8df f002 	tbb	[pc, r2]
   b5738:	0e0c0505 	.word	0x0e0c0505
   b573c:	0e0a0c10 	.word	0x0e0a0c10
   b5740:	0c          	.byte	0x0c
   b5741:	00          	.byte	0x00
  switch (type) {
    case kTfLiteFloat32:
      *size = sizeof(float);
   b5742:	2304      	movs	r3, #4
      break;
    case kTfLiteInt16:
      *size = sizeof(int16_t);
   b5744:	600b      	str	r3, [r1, #0]
    default:
      reporter->Report("Type %s (%d) not is not supported",
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   b5746:	2000      	movs	r0, #0
}
   b5748:	b002      	add	sp, #8
   b574a:	bd10      	pop	{r4, pc}
      *size = sizeof(int16_t);
   b574c:	2302      	movs	r3, #2
   b574e:	e7f9      	b.n	b5744 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(uint8_t);
   b5750:	2301      	movs	r3, #1
   b5752:	e7f7      	b.n	b5744 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      *size = sizeof(int64_t);
   b5754:	2308      	movs	r3, #8
   b5756:	e7f5      	b.n	b5744 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>
      reporter->Report("Type %s (%d) not is not supported",
   b5758:	4618      	mov	r0, r3
   b575a:	9301      	str	r3, [sp, #4]
   b575c:	f7ff fa12 	bl	b4b84 <TfLiteTypeGetName>
   b5760:	9b01      	ldr	r3, [sp, #4]
   b5762:	4903      	ldr	r1, [pc, #12]	; (b5770 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x48>)
   b5764:	4602      	mov	r2, r0
   b5766:	4620      	mov	r0, r4
   b5768:	f00e ff12 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   b576c:	2001      	movs	r0, #1
   b576e:	e7eb      	b.n	b5748 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x20>
   b5770:	000c7220 	.word	0x000c7220

000b5774 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   b5774:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return data_ - ReadScalar<soffset_t>(data_);
   b5778:	6804      	ldr	r4, [r0, #0]
   b577a:	1b04      	subs	r4, r0, r4
   b577c:	4615      	mov	r5, r2
   b577e:	f8b4 c000 	ldrh.w	ip, [r4]
   b5782:	461a      	mov	r2, r3
   b5784:	460e      	mov	r6, r1
  int element_count = 1;
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5786:	2300      	movs	r3, #0
  int element_count = 1;
   b5788:	2701      	movs	r7, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b578a:	f1bc 0f04 	cmp.w	ip, #4
   b578e:	d930      	bls.n	b57f2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7e>
   b5790:	88a1      	ldrh	r1, [r4, #4]
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
   b5792:	eb00 0801 	add.w	r8, r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5796:	b361      	cbz	r1, b57f2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7e>
   b5798:	f850 e001 	ldr.w	lr, [r0, r1]
   b579c:	eb08 010e 	add.w	r1, r8, lr
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b57a0:	f858 e00e 	ldr.w	lr, [r8, lr]
   b57a4:	4573      	cmp	r3, lr
   b57a6:	d205      	bcs.n	b57b4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x40>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b57a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   b57ac:	3301      	adds	r3, #1
    element_count *= flatbuffer_tensor.shape()->Get(n);
   b57ae:	6849      	ldr	r1, [r1, #4]
   b57b0:	434f      	muls	r7, r1
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b57b2:	e7ea      	b.n	b578a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x16>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b57b4:	f1bc 0f06 	cmp.w	ip, #6
   b57b8:	d90e      	bls.n	b57d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
   b57ba:	88e4      	ldrh	r4, [r4, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b57bc:	b104      	cbz	r4, b57c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
   b57be:	5704      	ldrsb	r4, [r0, r4]
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b57c0:	9201      	str	r2, [sp, #4]
   b57c2:	f10d 010f 	add.w	r1, sp, #15
   b57c6:	b2e0      	uxtb	r0, r4
   b57c8:	f00d fe74 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   b57cc:	9a01      	ldr	r2, [sp, #4]
   b57ce:	b128      	cbz	r0, b57dc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
   b57d0:	2001      	movs	r0, #1
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
   b57d2:	b004      	add	sp, #16
   b57d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b57d8:	2400      	movs	r4, #0
   b57da:	e7f1      	b.n	b57c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
  TF_LITE_ENSURE_STATUS(
   b57dc:	f89d 000f 	ldrb.w	r0, [sp, #15]
   b57e0:	4629      	mov	r1, r5
   b57e2:	f7ff ffa1 	bl	b5728 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
   b57e6:	2800      	cmp	r0, #0
   b57e8:	d1f2      	bne.n	b57d0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5c>
  *bytes = element_count * (*type_size);
   b57ea:	682b      	ldr	r3, [r5, #0]
   b57ec:	435f      	muls	r7, r3
   b57ee:	6037      	str	r7, [r6, #0]
  return kTfLiteOk;
   b57f0:	e7ef      	b.n	b57d2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5e>
  uoffset_t size() const { return EndianScalar(length_); }
   b57f2:	2300      	movs	r3, #0
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	deff      	udf	#255	; 0xff

000b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
#include "tensorflow/lite/experimental/micro/memory_helpers.h"

namespace tflite {

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
   b57f8:	b538      	push	{r3, r4, r5, lr}
   b57fa:	4605      	mov	r5, r0
  uint8_t* previous_free = (data_ + data_size_max_) - data_size_;
   b57fc:	e9d5 3400 	ldrd	r3, r4, [r5]
   b5800:	1ae3      	subs	r3, r4, r3
   b5802:	68ac      	ldr	r4, [r5, #8]
                                                 size_t alignment) {
   b5804:	4608      	mov	r0, r1
  uint8_t* previous_free = (data_ + data_size_max_) - data_size_;
   b5806:	441c      	add	r4, r3
  uint8_t* current_data = previous_free - size;
  uint8_t* aligned_result = AlignPointerDown(current_data, alignment);
   b5808:	4611      	mov	r1, r2
   b580a:	1a20      	subs	r0, r4, r0
   b580c:	f7ff ff82 	bl	b5714 <_ZN6tflite16AlignPointerDownEPhj>
  size_t aligned_size = (previous_free - aligned_result);
  if ((data_size_ + aligned_size) > data_size_max_) {
   b5810:	682b      	ldr	r3, [r5, #0]
  size_t aligned_size = (previous_free - aligned_result);
   b5812:	1a24      	subs	r4, r4, r0
  if ((data_size_ + aligned_size) > data_size_max_) {
   b5814:	441c      	add	r4, r3
   b5816:	686b      	ldr	r3, [r5, #4]
   b5818:	429c      	cmp	r4, r3
    // TODO(petewarden): Add error reporting beyond returning null!
    return nullptr;
  }
  data_size_ += aligned_size;
   b581a:	bf94      	ite	ls
   b581c:	602c      	strls	r4, [r5, #0]
    return nullptr;
   b581e:	2000      	movhi	r0, #0
  return aligned_result;
}
   b5820:	bd38      	pop	{r3, r4, r5, pc}

000b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   b5822:	6803      	ldr	r3, [r0, #0]
   b5824:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   b5826:	8803      	ldrh	r3, [r0, #0]
   b5828:	428b      	cmp	r3, r1
   b582a:	bf8c      	ite	hi
   b582c:	5a40      	ldrhhi	r0, [r0, r1]
   b582e:	2000      	movls	r0, #0
  }
   b5830:	4770      	bx	lr

000b5832 <_ZNK6tflite22QuantizationParameters5scaleEv>:
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MIN);
  }
  const flatbuffers::Vector<float> *max() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MAX);
  }
  const flatbuffers::Vector<float> *scale() const {
   b5832:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b5834:	2108      	movs	r1, #8
   b5836:	4604      	mov	r4, r0
   b5838:	f7ff fff3 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b583c:	b110      	cbz	r0, b5844 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   b583e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5840:	5820      	ldr	r0, [r4, r0]
   b5842:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
  }
   b5844:	bd10      	pop	{r4, pc}

000b5846 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   b5846:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b5848:	210a      	movs	r1, #10
   b584a:	4604      	mov	r4, r0
   b584c:	f7ff ffe9 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5850:	b110      	cbz	r0, b5858 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   b5852:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5854:	5820      	ldr	r0, [r4, r0]
   b5856:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
  }
   b5858:	bd10      	pop	{r4, pc}

000b585a <_ZNK6tflite6Tensor11is_variableEv>:
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const QuantizationParameters *quantization() const {
    return GetPointer<const QuantizationParameters *>(VT_QUANTIZATION);
  }
  bool is_variable() const {
   b585a:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b585c:	210e      	movs	r1, #14
   b585e:	4604      	mov	r4, r0
   b5860:	f7ff ffdf 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5864:	b100      	cbz	r0, b5868 <_ZNK6tflite6Tensor11is_variableEv+0xe>
   b5866:	5c20      	ldrb	r0, [r4, r0]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
  }
   b5868:	3800      	subs	r0, #0
   b586a:	bf18      	it	ne
   b586c:	2001      	movne	r0, #1
   b586e:	bd10      	pop	{r4, pc}

000b5870 <_ZNK6tflite5Model7buffersEv>:
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubGraph>> *>(VT_SUBGRAPHS);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *buffers() const {
   b5870:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   b5872:	210c      	movs	r1, #12
   b5874:	4604      	mov	r4, r0
   b5876:	f7ff ffd4 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b587a:	b110      	cbz	r0, b5882 <_ZNK6tflite5Model7buffersEv+0x12>
    auto p = data_ + field_offset;
   b587c:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b587e:	5820      	ldr	r0, [r4, r0]
   b5880:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *>(VT_BUFFERS);
  }
   b5882:	bd10      	pop	{r4, pc}

000b5884 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>:
// requirement for SIMD extensions.
constexpr int kBufferAlignment = 16;

}  // namespace

MicroAllocator::MicroAllocator(TfLiteContext* context, const Model* model,
   b5884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5886:	4615      	mov	r5, r2
   b5888:	e9dd 2706 	ldrd	r2, r7, [sp, #24]
   b588c:	460e      	mov	r6, r1
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 public:
  SimpleMemoryAllocator(uint8_t* buffer, size_t buffer_size)
      : data_size_(0), data_size_max_(buffer_size), data_(buffer) {}
   b588e:	2100      	movs	r1, #0
   b5890:	e9c0 1201 	strd	r1, r2, [r0, #4]
    : model_(model),
      memory_allocator_(tensor_arena, arena_size),
      error_reporter_(error_reporter),
      context_(context),
      arena_(tensor_arena),
      arena_size_(arena_size) {
   b5894:	e9c0 3703 	strd	r3, r7, [r0, #12]
   b5898:	e9c0 6305 	strd	r6, r3, [r0, #20]
MicroAllocator::MicroAllocator(TfLiteContext* context, const Model* model,
   b589c:	4604      	mov	r4, r0
      arena_size_(arena_size) {
   b589e:	6005      	str	r5, [r0, #0]
   b58a0:	61c2      	str	r2, [r0, #28]
    auto field_offset = GetOptionalFieldOffset(field);
   b58a2:	2108      	movs	r1, #8
   b58a4:	4628      	mov	r0, r5
   b58a6:	f7ff ffbc 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58aa:	2800      	cmp	r0, #0
   b58ac:	d038      	beq.n	b5920 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x9c>
   b58ae:	582a      	ldr	r2, [r5, r0]
    auto p = data_ + field_offset;
   b58b0:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58b2:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   b58b4:	588a      	ldr	r2, [r1, r2]
   b58b6:	2a01      	cmp	r2, #1
   b58b8:	d005      	beq.n	b58c6 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x42>
    error_reporter->Report("Only 1 subgraph is currently supported.\n");
   b58ba:	491a      	ldr	r1, [pc, #104]	; (b5924 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0xa0>)
   b58bc:	4638      	mov	r0, r7
   b58be:	f00e fe67 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  // Null all inputs so we can later perform a null check to avoid re-allocating
  // registered pre-allocated inputs.
  for (size_t i = 0; i < context_->tensors_size; ++i) {
    context_->tensors[i].data.raw = nullptr;
  }
}
   b58c2:	4620      	mov	r0, r4
   b58c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b58c6:	1d1f      	adds	r7, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b58c8:	685b      	ldr	r3, [r3, #4]
   b58ca:	441f      	add	r7, r3
  subgraph_ = (*subgraphs)[0];
   b58cc:	6227      	str	r7, [r4, #32]
    auto field_offset = GetOptionalFieldOffset(field);
   b58ce:	2104      	movs	r1, #4
   b58d0:	4638      	mov	r0, r7
   b58d2:	f7ff ffa6 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58d6:	b308      	cbz	r0, b591c <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x98>
    auto p = data_ + field_offset;
   b58d8:	183d      	adds	r5, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58da:	5838      	ldr	r0, [r7, r0]
   b58dc:	4405      	add	r5, r0
  tensors_ = subgraph_->tensors();
   b58de:	62a5      	str	r5, [r4, #40]	; 0x28
    auto field_offset = GetOptionalFieldOffset(field);
   b58e0:	210a      	movs	r1, #10
   b58e2:	4638      	mov	r0, r7
   b58e4:	f7ff ff9d 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58e8:	b110      	cbz	r0, b58f0 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x6c>
    auto p = data_ + field_offset;
   b58ea:	183b      	adds	r3, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b58ec:	5838      	ldr	r0, [r7, r0]
   b58ee:	4418      	add	r0, r3
  uoffset_t size() const { return EndianScalar(length_); }
   b58f0:	6829      	ldr	r1, [r5, #0]
  operators_ = subgraph_->operators();
   b58f2:	6260      	str	r0, [r4, #36]	; 0x24
      reinterpret_cast<TfLiteTensor*>(memory_allocator_.AllocateFromTail(
   b58f4:	2204      	movs	r2, #4
   b58f6:	2538      	movs	r5, #56	; 0x38
  context_->tensors_size = tensors_->size();
   b58f8:	6031      	str	r1, [r6, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_.AllocateFromTail(
   b58fa:	18a0      	adds	r0, r4, r2
   b58fc:	4369      	muls	r1, r5
   b58fe:	f7ff ff7b 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5902:	2300      	movs	r3, #0
  context_->tensors =
   b5904:	60b0      	str	r0, [r6, #8]
    context_->tensors[i].data.raw = nullptr;
   b5906:	4619      	mov	r1, r3
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5908:	6962      	ldr	r2, [r4, #20]
   b590a:	6810      	ldr	r0, [r2, #0]
   b590c:	4298      	cmp	r0, r3
   b590e:	d9d8      	bls.n	b58c2 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x3e>
    context_->tensors[i].data.raw = nullptr;
   b5910:	6892      	ldr	r2, [r2, #8]
   b5912:	fb05 2203 	mla	r2, r5, r3, r2
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b5916:	3301      	adds	r3, #1
    context_->tensors[i].data.raw = nullptr;
   b5918:	6051      	str	r1, [r2, #4]
  for (size_t i = 0; i < context_->tensors_size; ++i) {
   b591a:	e7f5      	b.n	b5908 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x84>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b591c:	4605      	mov	r5, r0
   b591e:	e7de      	b.n	b58de <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
   b5920:	6803      	ldr	r3, [r0, #0]
   b5922:	deff      	udf	#255	; 0xff
   b5924:	000c7242 	.word	0x000c7242

000b5928 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
   b5928:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b592a:	6803      	ldr	r3, [r0, #0]
   b592c:	4299      	cmp	r1, r3
   b592e:	d305      	bcc.n	b593c <_ZNK11flatbuffers6VectorIfE3GetEm+0x14>
   b5930:	4b05      	ldr	r3, [pc, #20]	; (b5948 <_ZNK11flatbuffers6VectorIfE3GetEm+0x20>)
   b5932:	4a06      	ldr	r2, [pc, #24]	; (b594c <_ZNK11flatbuffers6VectorIfE3GetEm+0x24>)
   b5934:	4806      	ldr	r0, [pc, #24]	; (b5950 <_ZNK11flatbuffers6VectorIfE3GetEm+0x28>)
   b5936:	21ed      	movs	r1, #237	; 0xed
   b5938:	f00e ffc0 	bl	c48bc <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b593c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
   b5940:	ed90 0a01 	vldr	s0, [r0, #4]
   b5944:	bd08      	pop	{r3, pc}
   b5946:	bf00      	nop
   b5948:	000c726b 	.word	0x000c726b
   b594c:	000c7276 	.word	0x000c7276
   b5950:	000c733e 	.word	0x000c733e

000b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
   b5954:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b5956:	6803      	ldr	r3, [r0, #0]
   b5958:	4299      	cmp	r1, r3
   b595a:	d305      	bcc.n	b5968 <_ZNK11flatbuffers6VectorIlE3GetEm+0x14>
   b595c:	4b04      	ldr	r3, [pc, #16]	; (b5970 <_ZNK11flatbuffers6VectorIlE3GetEm+0x1c>)
   b595e:	4a05      	ldr	r2, [pc, #20]	; (b5974 <_ZNK11flatbuffers6VectorIlE3GetEm+0x20>)
   b5960:	4805      	ldr	r0, [pc, #20]	; (b5978 <_ZNK11flatbuffers6VectorIlE3GetEm+0x24>)
   b5962:	21ed      	movs	r1, #237	; 0xed
   b5964:	f00e ffaa 	bl	c48bc <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b5968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
   b596c:	6840      	ldr	r0, [r0, #4]
   b596e:	bd08      	pop	{r3, pc}
   b5970:	000c726b 	.word	0x000c726b
   b5974:	000c73b2 	.word	0x000c73b2
   b5978:	000c733e 	.word	0x000c733e

000b597c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
   b597c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   b597e:	6803      	ldr	r3, [r0, #0]
   b5980:	4299      	cmp	r1, r3
   b5982:	d305      	bcc.n	b5990 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x14>
   b5984:	4b06      	ldr	r3, [pc, #24]	; (b59a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x24>)
   b5986:	4a07      	ldr	r2, [pc, #28]	; (b59a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x28>)
   b5988:	4807      	ldr	r0, [pc, #28]	; (b59a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x2c>)
   b598a:	21ed      	movs	r1, #237	; 0xed
   b598c:	f00e ff96 	bl	c48bc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5990:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   b5992:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5996:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   b599a:	4410      	add	r0, r2
   b599c:	bd08      	pop	{r3, pc}
   b599e:	bf00      	nop
   b59a0:	000c726b 	.word	0x000c726b
   b59a4:	000c7480 	.word	0x000c7480
   b59a8:	000c733e 	.word	0x000c733e

000b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   b59ac:	b510      	push	{r4, lr}
   b59ae:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   b59b0:	f7ff ff37 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b59b4:	b110      	cbz	r0, b59bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x10>
    auto p = data_ + field_offset;
   b59b6:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b59b8:	5820      	ldr	r0, [r4, r0]
   b59ba:	4418      	add	r0, r3
                        : nullptr;
  }
   b59bc:	bd10      	pop	{r4, pc}
	...

000b59c0 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh>:

TfLiteStatus MicroAllocator::InitializeRuntimeTensor(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result,
    uint8_t* preallocated_buffer) {
   b59c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59c4:	460d      	mov	r5, r1
   b59c6:	b087      	sub	sp, #28
   b59c8:	4683      	mov	fp, r0
    auto field_offset = GetOptionalFieldOffset(field);
   b59ca:	2106      	movs	r1, #6
   b59cc:	4628      	mov	r0, r5
   b59ce:	e9dd 4610 	ldrd	r4, r6, [sp, #64]	; 0x40
   b59d2:	4617      	mov	r7, r2
   b59d4:	4698      	mov	r8, r3
   b59d6:	f7ff ff24 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b59da:	b100      	cbz	r0, b59de <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1e>
   b59dc:	5628      	ldrsb	r0, [r5, r0]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b59de:	4642      	mov	r2, r8
   b59e0:	4621      	mov	r1, r4
   b59e2:	b2c0      	uxtb	r0, r0
   b59e4:	f00d fd66 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   b59e8:	4682      	mov	sl, r0
   b59ea:	2800      	cmp	r0, #0
   b59ec:	f040 80f2 	bne.w	b5bd4 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x214>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
   b59f0:	4628      	mov	r0, r5
   b59f2:	f7ff ff32 	bl	b585a <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
   b59f6:	2108      	movs	r1, #8
   b59f8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  // We need to figure out where the actual contents of this tensor are stored
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  result->data.raw = nullptr;
   b59fc:	f8c4 a004 	str.w	sl, [r4, #4]
  result->bytes = 0;
   b5a00:	f8c4 a018 	str.w	sl, [r4, #24]
   b5a04:	4628      	mov	r0, r5
   b5a06:	f7ff ff0c 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5a0a:	4601      	mov	r1, r0
   b5a0c:	b100      	cbz	r0, b5a10 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x50>
   b5a0e:	5829      	ldr	r1, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
   b5a10:	683b      	ldr	r3, [r7, #0]
   b5a12:	428b      	cmp	r3, r1
   b5a14:	d805      	bhi.n	b5a22 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x62>
   b5a16:	4b74      	ldr	r3, [pc, #464]	; (b5be8 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x228>)
   b5a18:	4a74      	ldr	r2, [pc, #464]	; (b5bec <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x22c>)
   b5a1a:	4875      	ldr	r0, [pc, #468]	; (b5bf0 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x230>)
   b5a1c:	21ed      	movs	r1, #237	; 0xed
   b5a1e:	f00e ff4d 	bl	c48bc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5a22:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
   b5a24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5a28:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
   b5a2c:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
   b5a2e:	2104      	movs	r1, #4
   b5a30:	4638      	mov	r0, r7
   b5a32:	f7ff fef6 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5a36:	2800      	cmp	r0, #0
   b5a38:	f000 80ce 	beq.w	b5bd8 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x218>
   b5a3c:	583a      	ldr	r2, [r7, r0]
    auto p = data_ + field_offset;
   b5a3e:	1839      	adds	r1, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5a40:	188b      	adds	r3, r1, r2
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
      // If it has any data, is the data size larger than zero?
      if (size_t array_size = array->size()) {
   b5a42:	588a      	ldr	r2, [r1, r2]
   b5a44:	2a00      	cmp	r2, #0
   b5a46:	f000 80c7 	beq.w	b5bd8 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x218>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5a4a:	3304      	adds	r3, #4
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.raw =
   b5a4c:	6063      	str	r3, [r4, #4]
            const_cast<char*>(reinterpret_cast<const char*>(array->data()));
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
   b5a4e:	2301      	movs	r3, #1
   b5a50:	7523      	strb	r3, [r4, #20]
    }
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
   b5a52:	4643      	mov	r3, r8
   b5a54:	aa05      	add	r2, sp, #20
   b5a56:	f104 0118 	add.w	r1, r4, #24
   b5a5a:	4628      	mov	r0, r5
   b5a5c:	f7ff fe8a 	bl	b5774 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   b5a60:	4607      	mov	r7, r0
   b5a62:	2800      	cmp	r0, #0
   b5a64:	f040 80b6 	bne.w	b5bd4 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x214>
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b5a68:	2104      	movs	r1, #4
   b5a6a:	4628      	mov	r0, r5
   b5a6c:	f7ff ff9e 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));
  // Copy the shape of the tensor from the serialized data into the runtime
  // form. We have to allocate memory for this.
  result->dims =
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
          sizeof(int) * (flatbuffer_tensor.shape()->Length() + 1),
   b5a70:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
   b5a72:	f10b 0b04 	add.w	fp, fp, #4
          sizeof(int) * (flatbuffer_tensor.shape()->Length() + 1),
   b5a76:	3101      	adds	r1, #1
      reinterpret_cast<TfLiteIntArray*>(memory_allocator_.AllocateFromTail(
   b5a78:	2204      	movs	r2, #4
   b5a7a:	0089      	lsls	r1, r1, #2
   b5a7c:	4658      	mov	r0, fp
   b5a7e:	f7ff febb 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
   b5a82:	2104      	movs	r1, #4
   b5a84:	4606      	mov	r6, r0
  result->dims =
   b5a86:	60a0      	str	r0, [r4, #8]
   b5a88:	4628      	mov	r0, r5
   b5a8a:	f7ff ff8f 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          sizeof(int)));
  result->dims->size = flatbuffer_tensor.shape()->Length();
   b5a8e:	6803      	ldr	r3, [r0, #0]
   b5a90:	6033      	str	r3, [r6, #0]
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5a92:	463e      	mov	r6, r7
   b5a94:	2104      	movs	r1, #4
   b5a96:	4628      	mov	r0, r5
   b5a98:	f7ff ff88 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5a9c:	6803      	ldr	r3, [r0, #0]
   b5a9e:	42b3      	cmp	r3, r6
   b5aa0:	d90a      	bls.n	b5ab8 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0xf8>
    result->dims->data[n] = flatbuffer_tensor.shape()->Get(n);
   b5aa2:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b5aa6:	4631      	mov	r1, r6
   b5aa8:	f7ff ff54 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b5aac:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5ab0:	3601      	adds	r6, #1
    result->dims->data[n] = flatbuffer_tensor.shape()->Get(n);
   b5ab2:	f8c8 0004 	str.w	r0, [r8, #4]
  for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   b5ab6:	e7ed      	b.n	b5a94 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0xd4>
    auto field_offset = GetOptionalFieldOffset(field);
   b5ab8:	210c      	movs	r1, #12
   b5aba:	4628      	mov	r0, r5
   b5abc:	f7ff feb1 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5ac0:	2800      	cmp	r0, #0
   b5ac2:	d073      	beq.n	b5bac <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
   b5ac4:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
   b5ac6:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5ac8:	441e      	add	r6, r3
  }
  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
  if (src_quantization && src_quantization->scale() &&
   b5aca:	4630      	mov	r0, r6
   b5acc:	f7ff feb1 	bl	b5832 <_ZNK6tflite22QuantizationParameters5scaleEv>
   b5ad0:	4680      	mov	r8, r0
   b5ad2:	2800      	cmp	r0, #0
   b5ad4:	d06a      	beq.n	b5bac <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
   b5ad6:	6803      	ldr	r3, [r0, #0]
   b5ad8:	2b00      	cmp	r3, #0
   b5ada:	d067      	beq.n	b5bac <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
   b5adc:	4630      	mov	r0, r6
   b5ade:	f7ff feb2 	bl	b5846 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
   b5ae2:	2800      	cmp	r0, #0
   b5ae4:	d062      	beq.n	b5bac <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      src_quantization->zero_point() &&
   b5ae6:	6803      	ldr	r3, [r0, #0]
   b5ae8:	2b00      	cmp	r3, #0
   b5aea:	d05f      	beq.n	b5bac <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1ec>
      (src_quantization->zero_point()->size() > 0)) {
    result->params.scale = src_quantization->scale()->Get(0);
   b5aec:	4640      	mov	r0, r8
   b5aee:	2100      	movs	r1, #0
   b5af0:	f7ff ff1a 	bl	b5928 <_ZNK11flatbuffers6VectorIfE3GetEm>
   b5af4:	f104 090f 	add.w	r9, r4, #15
   b5af8:	ed84 0a03 	vstr	s0, [r4, #12]
    // This magic handles issues with little-endianness.
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5afc:	f04f 0800 	mov.w	r8, #0
      *(reinterpret_cast<char*>(&result->params.zero_point) + b) =
          *(reinterpret_cast<const char*>(
                src_quantization->zero_point()->Data()) +
   b5b00:	4630      	mov	r0, r6
   b5b02:	f7ff fea0 	bl	b5846 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
          *(reinterpret_cast<const char*>(
   b5b06:	4440      	add	r0, r8
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5b08:	f108 0801 	add.w	r8, r8, #1
          *(reinterpret_cast<const char*>(
   b5b0c:	7903      	ldrb	r3, [r0, #4]
      *(reinterpret_cast<char*>(&result->params.zero_point) + b) =
   b5b0e:	f809 3f01 	strb.w	r3, [r9, #1]!
    for (unsigned int b = 0; b < sizeof(int64_t); ++b)
   b5b12:	f1b8 0f08 	cmp.w	r8, #8
   b5b16:	d1f3      	bne.n	b5b00 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x140>
            b);
    result->params.zero_point =
        flatbuffers::EndianScalar(result->params.zero_point);

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
   b5b18:	4630      	mov	r0, r6
   b5b1a:	f7ff fe8a 	bl	b5832 <_ZNK6tflite22QuantizationParameters5scaleEv>
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            memory_allocator_.AllocateFromTail(sizeof(TfLiteAffineQuantization),
   b5b1e:	2204      	movs	r2, #4
  uoffset_t size() const { return EndianScalar(length_); }
   b5b20:	f8d0 a000 	ldr.w	sl, [r0]
   b5b24:	210c      	movs	r1, #12
   b5b26:	4658      	mov	r0, fp
   b5b28:	f7ff fe66 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
                                               sizeof(int)));
    int* zero_point_array =
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
            channels * sizeof(int) + sizeof(int), sizeof(int)));
   b5b2c:	f10a 0101 	add.w	r1, sl, #1
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b30:	0089      	lsls	r1, r1, #2
            memory_allocator_.AllocateFromTail(sizeof(TfLiteAffineQuantization),
   b5b32:	9001      	str	r0, [sp, #4]
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b34:	2204      	movs	r2, #4
   b5b36:	4658      	mov	r0, fp
   b5b38:	9102      	str	r1, [sp, #8]
   b5b3a:	f7ff fe5d 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
    int* scale_array =
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b3e:	9902      	ldr	r1, [sp, #8]
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b40:	4681      	mov	r9, r0
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b42:	2204      	movs	r2, #4
   b5b44:	4658      	mov	r0, fp
   b5b46:	f7ff fe57 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
            channels * sizeof(float) + sizeof(int), sizeof(int)));
    zero_point_array[0] = channels;
    scale_array[0] = channels;
   b5b4a:	4680      	mov	r8, r0
    zero_point_array[0] = channels;
   b5b4c:	f8c9 a000 	str.w	sl, [r9]
    scale_array[0] = channels;
   b5b50:	f848 ab04 	str.w	sl, [r8], #4
        reinterpret_cast<int*>(memory_allocator_.AllocateFromTail(
   b5b54:	9002      	str	r0, [sp, #8]
    int* zero_point_data = &zero_point_array[1];
    float* scale_data = reinterpret_cast<float*>(&scale_array[1]);
    for (int i = 0; i < channels; i++) {
   b5b56:	f8cd 900c 	str.w	r9, [sp, #12]
   b5b5a:	f04f 0b00 	mov.w	fp, #0
   b5b5e:	45da      	cmp	sl, fp
   b5b60:	dd1a      	ble.n	b5b98 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1d8>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   b5b62:	4630      	mov	r0, r6
   b5b64:	f7ff fe6f 	bl	b5846 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    FLATBUFFERS_ASSERT(i < size());
   b5b68:	6802      	ldr	r2, [r0, #0]
   b5b6a:	4593      	cmp	fp, r2
   b5b6c:	d302      	bcc.n	b5b74 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1b4>
   b5b6e:	4b1e      	ldr	r3, [pc, #120]	; (b5be8 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x228>)
   b5b70:	4a20      	ldr	r2, [pc, #128]	; (b5bf4 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x234>)
   b5b72:	e752      	b.n	b5a1a <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x5a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   b5b74:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
   b5b78:	9b03      	ldr	r3, [sp, #12]
   b5b7a:	6842      	ldr	r2, [r0, #4]
   b5b7c:	f843 2f04 	str.w	r2, [r3, #4]!
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b80:	4630      	mov	r0, r6
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   b5b82:	9303      	str	r3, [sp, #12]
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b84:	f7ff fe55 	bl	b5832 <_ZNK6tflite22QuantizationParameters5scaleEv>
   b5b88:	4659      	mov	r1, fp
   b5b8a:	f7ff fecd 	bl	b5928 <_ZNK11flatbuffers6VectorIfE3GetEm>
    for (int i = 0; i < channels; i++) {
   b5b8e:	f10b 0b01 	add.w	fp, fp, #1
      scale_data[i] = src_quantization->scale()->Get(i);
   b5b92:	eca8 0a01 	vstmia	r8!, {s0}
    for (int i = 0; i < channels; i++) {
   b5b96:	e7e2      	b.n	b5b5e <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x19e>
    }
    quantization->scale = reinterpret_cast<TfLiteFloatArray*>(scale_array);
   b5b98:	9b01      	ldr	r3, [sp, #4]
   b5b9a:	461a      	mov	r2, r3
   b5b9c:	9b02      	ldr	r3, [sp, #8]
   b5b9e:	6013      	str	r3, [r2, #0]
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(zero_point_array);

    result->quantization = {kTfLiteAffineQuantization, quantization};
   b5ba0:	2301      	movs	r3, #1
    quantization->zero_point =
   b5ba2:	f8c2 9004 	str.w	r9, [r2, #4]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   b5ba6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5baa:	6362      	str	r2, [r4, #52]	; 0x34
    auto field_offset = GetOptionalFieldOffset(field);
   b5bac:	210a      	movs	r1, #10
   b5bae:	4628      	mov	r0, r5
   b5bb0:	f7ff fe37 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5bb4:	b110      	cbz	r0, b5bbc <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x1fc>
    auto p = data_ + field_offset;
   b5bb6:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5bb8:	5828      	ldr	r0, [r5, r0]
   b5bba:	4418      	add	r0, r3
    result->name = flatbuffer_tensor.name()->c_str();
  } else {
    result->name = "<No name>";
  }
  // These aren't used by the micro flavor of TFL, so set them to defaults.
  result->allocation = nullptr;
   b5bbc:	2300      	movs	r3, #0
  result->delegate = nullptr;
  result->buffer_handle = 0;
   b5bbe:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5bc2:	3004      	adds	r0, #4
    result->name = flatbuffer_tensor.name()->c_str();
   b5bc4:	6220      	str	r0, [r4, #32]
  result->allocation = nullptr;
   b5bc6:	61e3      	str	r3, [r4, #28]
  result->data_is_stale = false;
   b5bc8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return kTfLiteOk;
}
   b5bcc:	4638      	mov	r0, r7
   b5bce:	b007      	add	sp, #28
   b5bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   b5bd4:	2701      	movs	r7, #1
   b5bd6:	e7f9      	b.n	b5bcc <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x20c>
    result->allocation_type = kTfLiteArenaRw;
   b5bd8:	2302      	movs	r3, #2
   b5bda:	7523      	strb	r3, [r4, #20]
    if (preallocated_buffer != nullptr) {
   b5bdc:	2e00      	cmp	r6, #0
   b5bde:	f43f af38 	beq.w	b5a52 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x92>
      result->data.raw = reinterpret_cast<char*>(preallocated_buffer);
   b5be2:	6066      	str	r6, [r4, #4]
   b5be4:	e735      	b.n	b5a52 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh+0x92>
   b5be6:	bf00      	nop
   b5be8:	000c726b 	.word	0x000c726b
   b5bec:	000c7576 	.word	0x000c7576
   b5bf0:	000c733e 	.word	0x000c733e
   b5bf4:	000c766c 	.word	0x000c766c

000b5bf8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv>:
TfLiteStatus MicroAllocator::AllocateTensors() {
   b5bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uoffset_t size() const { return EndianScalar(length_); }
   b5bfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b5bfe:	f8d3 9000 	ldr.w	r9, [r3]
      reinterpret_cast<TensorInfo*>(memory_allocator_.AllocateFromTail(
   b5c02:	2214      	movs	r2, #20
   b5c04:	fb02 f109 	mul.w	r1, r2, r9
TfLiteStatus MicroAllocator::AllocateTensors() {
   b5c08:	b093      	sub	sp, #76	; 0x4c
   b5c0a:	4604      	mov	r4, r0
      reinterpret_cast<TensorInfo*>(memory_allocator_.AllocateFromTail(
   b5c0c:	3004      	adds	r0, #4
   b5c0e:	f7ff fdf3 	bl	b57f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
   b5c12:	4605      	mov	r5, r0
      model_->buffers();
   b5c14:	6820      	ldr	r0, [r4, #0]
   b5c16:	f7ff fe2b 	bl	b5870 <_ZNK6tflite5Model7buffersEv>
  for (size_t i = 0; i < tensors_size; ++i) {
   b5c1a:	f04f 0800 	mov.w	r8, #0
      model_->buffers();
   b5c1e:	4602      	mov	r2, r0
  for (size_t i = 0; i < tensors_size; ++i) {
   b5c20:	462f      	mov	r7, r5
      model_->buffers();
   b5c22:	462e      	mov	r6, r5
      current->first_created = -1;
   b5c24:	f04f 3aff 	mov.w	sl, #4294967295
      current->first_created = 0;
   b5c28:	46c3      	mov	fp, r8
  for (size_t i = 0; i < tensors_size; ++i) {
   b5c2a:	45c8      	cmp	r8, r9
   b5c2c:	9205      	str	r2, [sp, #20]
   b5c2e:	d02e      	beq.n	b5c8e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x96>
    current->flatbuffer_tensor = &(*(tensors_->Get(i)));
   b5c30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c32:	4641      	mov	r1, r8
   b5c34:	f7ff fea2 	bl	b597c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
   b5c38:	6030      	str	r0, [r6, #0]
    current->runtime_tensor = &context_->tensors[i];
   b5c3a:	6963      	ldr	r3, [r4, #20]
    current->flatbuffer_tensor = &(*(tensors_->Get(i)));
   b5c3c:	9004      	str	r0, [sp, #16]
    current->runtime_tensor = &context_->tensors[i];
   b5c3e:	689b      	ldr	r3, [r3, #8]
   b5c40:	2238      	movs	r2, #56	; 0x38
   b5c42:	fb02 3308 	mla	r3, r2, r8, r3
   b5c46:	6073      	str	r3, [r6, #4]
   b5c48:	9303      	str	r3, [sp, #12]
    const bool is_variable = current->flatbuffer_tensor->is_variable();
   b5c4a:	f7ff fe06 	bl	b585a <_ZNK6tflite6Tensor11is_variableEv>
    if (is_variable) {
   b5c4e:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
   b5c52:	9a05      	ldr	r2, [sp, #20]
   b5c54:	b160      	cbz	r0, b5c70 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x78>
      current->first_created = 0;
   b5c56:	f8c6 b008 	str.w	fp, [r6, #8]
   b5c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      current->last_used = operators_->size();
   b5c5c:	6800      	ldr	r0, [r0, #0]
   b5c5e:	60f0      	str	r0, [r6, #12]
    current->needs_allocating = false;
   b5c60:	f886 b010 	strb.w	fp, [r6, #16]
    if (!is_preallocated_input) {
   b5c64:	6858      	ldr	r0, [r3, #4]
   b5c66:	b130      	cbz	r0, b5c76 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x7e>
  for (size_t i = 0; i < tensors_size; ++i) {
   b5c68:	f108 0801 	add.w	r8, r8, #1
   b5c6c:	3614      	adds	r6, #20
   b5c6e:	e7dc      	b.n	b5c2a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x32>
      current->last_used = -1;
   b5c70:	e9c6 aa02 	strd	sl, sl, [r6, #8]
   b5c74:	e7f4      	b.n	b5c60 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x68>
      TF_LITE_ENSURE_STATUS(InitializeRuntimeTensor(
   b5c76:	e9cd 3000 	strd	r3, r0, [sp]
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	6923      	ldr	r3, [r4, #16]
   b5c7e:	9203      	str	r2, [sp, #12]
   b5c80:	f7ff fe9e 	bl	b59c0 <_ZN6tflite14MicroAllocator23InitializeRuntimeTensorERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensorPh>
   b5c84:	9a03      	ldr	r2, [sp, #12]
   b5c86:	2800      	cmp	r0, #0
   b5c88:	d0ee      	beq.n	b5c68 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x70>
   b5c8a:	2401      	movs	r4, #1
   b5c8c:	e0b3      	b.n	b5df6 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1fe>
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c8e:	2600      	movs	r6, #0
    TensorInfo* current = &tensor_info[tensor_index];
   b5c90:	f04f 0914 	mov.w	r9, #20
    current->first_created = 0;
   b5c94:	46b0      	mov	r8, r6
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b5c96:	6a20      	ldr	r0, [r4, #32]
   b5c98:	2106      	movs	r1, #6
   b5c9a:	f7ff fe87 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5c9e:	6803      	ldr	r3, [r0, #0]
   b5ca0:	429e      	cmp	r6, r3
   b5ca2:	d20e      	bcs.n	b5cc2 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xca>
    const int tensor_index = subgraph_->inputs()->Get(i);
   b5ca4:	4631      	mov	r1, r6
   b5ca6:	f7ff fe55 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
    TensorInfo* current = &tensor_info[tensor_index];
   b5caa:	fb09 5000 	mla	r0, r9, r0, r5
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5cae:	3601      	adds	r6, #1
    current->needs_allocating = (current->runtime_tensor->data.raw == nullptr);
   b5cb0:	6843      	ldr	r3, [r0, #4]
   b5cb2:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
   b5cb4:	f8c0 8008 	str.w	r8, [r0, #8]
    current->needs_allocating = (current->runtime_tensor->data.raw == nullptr);
   b5cb8:	fab3 f383 	clz	r3, r3
   b5cbc:	095b      	lsrs	r3, r3, #5
   b5cbe:	7403      	strb	r3, [r0, #16]
  for (size_t i = 0; i < subgraph_->inputs()->size(); ++i) {
   b5cc0:	e7e9      	b.n	b5c96 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x9e>
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5cc2:	2600      	movs	r6, #0
    current->last_used = operators_->size() - 1;
   b5cc4:	f04f 0814 	mov.w	r8, #20
   b5cc8:	6a20      	ldr	r0, [r4, #32]
   b5cca:	2108      	movs	r1, #8
   b5ccc:	f7ff fe6e 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5cd0:	6803      	ldr	r3, [r0, #0]
   b5cd2:	429e      	cmp	r6, r3
   b5cd4:	d20a      	bcs.n	b5cec <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xf4>
    const int tensor_index = subgraph_->outputs()->Get(i);
   b5cd6:	4631      	mov	r1, r6
   b5cd8:	f7ff fe3c 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
  uoffset_t size() const { return EndianScalar(length_); }
   b5cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    current->last_used = operators_->size() - 1;
   b5cde:	681b      	ldr	r3, [r3, #0]
   b5ce0:	fb08 5000 	mla	r0, r8, r0, r5
   b5ce4:	3b01      	subs	r3, #1
   b5ce6:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph_->outputs()->size(); ++i) {
   b5ce8:	3601      	adds	r6, #1
   b5cea:	e7ed      	b.n	b5cc8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xd0>
   b5cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5cee:	681e      	ldr	r6, [r3, #0]
      TensorInfo* current = &tensor_info[tensor_index];
   b5cf0:	f04f 0914 	mov.w	r9, #20
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5cf4:	3e01      	subs	r6, #1
   b5cf6:	2e00      	cmp	r6, #0
   b5cf8:	db3f      	blt.n	b5d7a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x182>
    const auto* op = operators_->Get(i);
   b5cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    FLATBUFFERS_ASSERT(i < size());
   b5cfc:	681a      	ldr	r2, [r3, #0]
   b5cfe:	42b2      	cmp	r2, r6
   b5d00:	d805      	bhi.n	b5d0e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x116>
   b5d02:	4b63      	ldr	r3, [pc, #396]	; (b5e90 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x298>)
   b5d04:	4a63      	ldr	r2, [pc, #396]	; (b5e94 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x29c>)
   b5d06:	4864      	ldr	r0, [pc, #400]	; (b5e98 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a0>)
   b5d08:	21ed      	movs	r1, #237	; 0xed
   b5d0a:	f00e fdd7 	bl	c48bc <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5d0e:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   b5d10:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5d14:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   b5d18:	f04f 0800 	mov.w	r8, #0
   b5d1c:	449a      	add	sl, r3
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b5d1e:	2106      	movs	r1, #6
   b5d20:	4650      	mov	r0, sl
   b5d22:	f7ff fe43 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5d26:	6803      	ldr	r3, [r0, #0]
   b5d28:	4598      	cmp	r8, r3
   b5d2a:	d20d      	bcs.n	b5d48 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x150>
      const int tensor_index = op->inputs()->Get(n);
   b5d2c:	4641      	mov	r1, r8
   b5d2e:	f7ff fe11 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TensorInfo* current = &tensor_info[tensor_index];
   b5d32:	fb09 5000 	mla	r0, r9, r0, r5
      if ((current->last_used == -1) || (current->last_used > i)) {
   b5d36:	68c3      	ldr	r3, [r0, #12]
   b5d38:	1c59      	adds	r1, r3, #1
   b5d3a:	d001      	beq.n	b5d40 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x148>
   b5d3c:	42b3      	cmp	r3, r6
   b5d3e:	dd00      	ble.n	b5d42 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x14a>
        current->last_used = i;
   b5d40:	60c6      	str	r6, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   b5d42:	f108 0801 	add.w	r8, r8, #1
   b5d46:	e7ea      	b.n	b5d1e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x126>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   b5d48:	f04f 0800 	mov.w	r8, #0
   b5d4c:	2108      	movs	r1, #8
   b5d4e:	4650      	mov	r0, sl
   b5d50:	f7ff fe2c 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b5d54:	6803      	ldr	r3, [r0, #0]
   b5d56:	4598      	cmp	r8, r3
   b5d58:	d20d      	bcs.n	b5d76 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x17e>
      const int tensor_index = op->outputs()->Get(n);
   b5d5a:	4641      	mov	r1, r8
   b5d5c:	f7ff fdfa 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TensorInfo* current = &tensor_info[tensor_index];
   b5d60:	fb09 5000 	mla	r0, r9, r0, r5
      if ((current->first_created == -1) || (current->first_created < i)) {
   b5d64:	6883      	ldr	r3, [r0, #8]
   b5d66:	1c5a      	adds	r2, r3, #1
   b5d68:	d001      	beq.n	b5d6e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x176>
   b5d6a:	42b3      	cmp	r3, r6
   b5d6c:	da00      	bge.n	b5d70 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x178>
        current->first_created = i;
   b5d6e:	6086      	str	r6, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   b5d70:	f108 0801 	add.w	r8, r8, #1
   b5d74:	e7ea      	b.n	b5d4c <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x154>
  for (int i = (operators_->size() - 1); i >= 0; --i) {
   b5d76:	3e01      	subs	r6, #1
   b5d78:	e7bd      	b.n	b5cf6 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0xfe>
   b5d7a:	462b      	mov	r3, r5
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d7c:	2200      	movs	r2, #0
      current->needs_allocating = true;
   b5d7e:	2001      	movs	r0, #1
  uoffset_t size() const { return EndianScalar(length_); }
   b5d80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5d82:	6809      	ldr	r1, [r1, #0]
   b5d84:	428a      	cmp	r2, r1
   b5d86:	d213      	bcs.n	b5db0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b8>
        (current->first_created == -1) && (current->last_used != -1);
   b5d88:	6899      	ldr	r1, [r3, #8]
   b5d8a:	3101      	adds	r1, #1
   b5d8c:	68d9      	ldr	r1, [r3, #12]
   b5d8e:	d106      	bne.n	b5d9e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1a6>
   b5d90:	3101      	adds	r1, #1
   b5d92:	d10a      	bne.n	b5daa <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b2>
      error_reporter_->Report(
   b5d94:	4941      	ldr	r1, [pc, #260]	; (b5e9c <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a4>)
   b5d96:	6920      	ldr	r0, [r4, #16]
   b5d98:	f00e fbfa 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   b5d9c:	e775      	b.n	b5c8a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x92>
        ((current->first_created == -1) || (current->last_used == -1));
   b5d9e:	3101      	adds	r1, #1
   b5da0:	d0f8      	beq.n	b5d94 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x19c>
        (current->runtime_tensor->data.raw != nullptr);
   b5da2:	6859      	ldr	r1, [r3, #4]
    if (!is_read_only && !is_preallocated_input) {
   b5da4:	6849      	ldr	r1, [r1, #4]
   b5da6:	b901      	cbnz	r1, b5daa <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1b2>
      current->needs_allocating = true;
   b5da8:	7418      	strb	r0, [r3, #16]
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5daa:	3201      	adds	r2, #1
   b5dac:	3314      	adds	r3, #20
   b5dae:	e7e7      	b.n	b5d80 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x188>
  uint8_t* aligned_arena = AlignPointerUp(arena_, kBufferAlignment);
   b5db0:	2110      	movs	r1, #16
   b5db2:	69a0      	ldr	r0, [r4, #24]
   b5db4:	f7ff fca8 	bl	b5708 <_ZN6tflite14AlignPointerUpEPhj>
      arena_size_ - (memory_allocator_.GetDataSize() + alignment_loss);
   b5db8:	6863      	ldr	r3, [r4, #4]
   b5dba:	69e6      	ldr	r6, [r4, #28]
   b5dbc:	1af6      	subs	r6, r6, r3
  const size_t alignment_loss = (aligned_arena - arena_);
   b5dbe:	69a3      	ldr	r3, [r4, #24]
   b5dc0:	1ac3      	subs	r3, r0, r3
      arena_size_ - (memory_allocator_.GetDataSize() + alignment_loss);
   b5dc2:	1af6      	subs	r6, r6, r3
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5dc4:	4601      	mov	r1, r0
  uint8_t* aligned_arena = AlignPointerUp(arena_, kBufferAlignment);
   b5dc6:	4680      	mov	r8, r0
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5dc8:	4632      	mov	r2, r6
   b5dca:	a808      	add	r0, sp, #32
   b5dcc:	f00d fa20 	bl	c3210 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5dd0:	f04f 0900 	mov.w	r9, #0
   b5dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5dd6:	681b      	ldr	r3, [r3, #0]
   b5dd8:	4599      	cmp	r9, r3
   b5dda:	d220      	bcs.n	b5e1e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x226>
    if (current->needs_allocating) {
   b5ddc:	7c2b      	ldrb	r3, [r5, #16]
   b5dde:	b1d3      	cbz	r3, b5e16 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x21e>
      TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(*current->flatbuffer_tensor,
   b5de0:	6923      	ldr	r3, [r4, #16]
   b5de2:	6828      	ldr	r0, [r5, #0]
   b5de4:	aa07      	add	r2, sp, #28
   b5de6:	a906      	add	r1, sp, #24
   b5de8:	f7ff fcc4 	bl	b5774 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   b5dec:	b138      	cbz	r0, b5dfe <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x206>
    return kTfLiteError;
   b5dee:	2401      	movs	r4, #1
  GreedyMemoryPlanner planner(aligned_arena, remaining_arena_size);
   b5df0:	a808      	add	r0, sp, #32
   b5df2:	f00d f9c5 	bl	c3180 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
}
   b5df6:	4620      	mov	r0, r4
   b5df8:	b013      	add	sp, #76	; 0x4c
   b5dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          AlignSizeUp(bytes_required, kBufferAlignment);
   b5dfe:	2110      	movs	r1, #16
   b5e00:	9806      	ldr	r0, [sp, #24]
   b5e02:	f7ff fc8b 	bl	b571c <_ZN6tflite11AlignSizeUpEjj>
      planner.AddBuffer(error_reporter_, aligned_bytes_required,
   b5e06:	68eb      	ldr	r3, [r5, #12]
   b5e08:	9300      	str	r3, [sp, #0]
          AlignSizeUp(bytes_required, kBufferAlignment);
   b5e0a:	4602      	mov	r2, r0
      planner.AddBuffer(error_reporter_, aligned_bytes_required,
   b5e0c:	68ab      	ldr	r3, [r5, #8]
   b5e0e:	6921      	ldr	r1, [r4, #16]
   b5e10:	a808      	add	r0, sp, #32
   b5e12:	f00d f9bf 	bl	c3194 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5e16:	f109 0901 	add.w	r9, r9, #1
   b5e1a:	3514      	adds	r5, #20
   b5e1c:	e7da      	b.n	b5dd4 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1dc>
  if (planner.GetMaximumMemorySize() > remaining_arena_size) {
   b5e1e:	a808      	add	r0, sp, #32
   b5e20:	f00d fad5 	bl	c33ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   b5e24:	42b0      	cmp	r0, r6
   b5e26:	dd0a      	ble.n	b5e3e <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x246>
    error_reporter_->Report(
   b5e28:	a808      	add	r0, sp, #32
   b5e2a:	6924      	ldr	r4, [r4, #16]
   b5e2c:	f00d facf 	bl	c33ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   b5e30:	491b      	ldr	r1, [pc, #108]	; (b5ea0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2a8>)
   b5e32:	4602      	mov	r2, r0
   b5e34:	4633      	mov	r3, r6
   b5e36:	4620      	mov	r0, r4
   b5e38:	f00e fbaa 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   b5e3c:	e7d7      	b.n	b5dee <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5e3e:	2500      	movs	r5, #0
  int planner_index = 0;
   b5e40:	462e      	mov	r6, r5
   b5e42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	429d      	cmp	r5, r3
   b5e48:	d21f      	bcs.n	b5e8a <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x292>
    if (current->needs_allocating) {
   b5e4a:	7c3b      	ldrb	r3, [r7, #16]
   b5e4c:	b163      	cbz	r3, b5e68 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x270>
      TF_LITE_ENSURE_STATUS(
   b5e4e:	6921      	ldr	r1, [r4, #16]
   b5e50:	ab07      	add	r3, sp, #28
   b5e52:	4632      	mov	r2, r6
   b5e54:	a808      	add	r0, sp, #32
   b5e56:	f00d fad5 	bl	c3404 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
   b5e5a:	2800      	cmp	r0, #0
   b5e5c:	d1c7      	bne.n	b5dee <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
      current->runtime_tensor->data.uint8 = aligned_arena + offset;
   b5e5e:	9b07      	ldr	r3, [sp, #28]
   b5e60:	687a      	ldr	r2, [r7, #4]
   b5e62:	4443      	add	r3, r8
   b5e64:	6053      	str	r3, [r2, #4]
      ++planner_index;
   b5e66:	3601      	adds	r6, #1
    if (current->flatbuffer_tensor->is_variable()) {
   b5e68:	6838      	ldr	r0, [r7, #0]
   b5e6a:	f7ff fcf6 	bl	b585a <_ZNK6tflite6Tensor11is_variableEv>
   b5e6e:	b148      	cbz	r0, b5e84 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x28c>
      if (current->runtime_tensor->data.uint8 == nullptr) {
   b5e70:	6878      	ldr	r0, [r7, #4]
   b5e72:	6843      	ldr	r3, [r0, #4]
   b5e74:	b923      	cbnz	r3, b5e80 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x288>
        error_reporter_->Report("Variable is not allocated");
   b5e76:	490b      	ldr	r1, [pc, #44]	; (b5ea4 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x2ac>)
   b5e78:	6920      	ldr	r0, [r4, #16]
   b5e7a:	f00e fb89 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   b5e7e:	e7b6      	b.n	b5dee <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f6>
      tflite::ResetVariableTensor(current->runtime_tensor);
   b5e80:	f00e fb94 	bl	c45ac <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < tensors_->size(); ++i) {
   b5e84:	3501      	adds	r5, #1
   b5e86:	3714      	adds	r7, #20
   b5e88:	e7db      	b.n	b5e42 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x24a>
  return kTfLiteOk;
   b5e8a:	2400      	movs	r4, #0
   b5e8c:	e7b0      	b.n	b5df0 <_ZN6tflite14MicroAllocator15AllocateTensorsEv+0x1f8>
   b5e8e:	bf00      	nop
   b5e90:	000c726b 	.word	0x000c726b
   b5e94:	000c7744 	.word	0x000c7744
   b5e98:	000c733e 	.word	0x000c733e
   b5e9c:	000c783e 	.word	0x000c783e
   b5ea0:	000c787f 	.word	0x000c787f
   b5ea4:	000c78d4 	.word	0x000c78d4

000b5ea8 <_ZN6tflite12_GLOBAL__N_118StackDataAllocator8AllocateEj>:
namespace {
const int kStackDataAllocatorSize = 128;
class StackDataAllocator : public BuiltinDataAllocator {
 public:
  void* Allocate(size_t size) override {
    if (size > kStackDataAllocatorSize) {
   b5ea8:	2980      	cmp	r1, #128	; 0x80
      return nullptr;
    } else {
      return data_;
   b5eaa:	bf94      	ite	ls
   b5eac:	3004      	addls	r0, #4
      return nullptr;
   b5eae:	2000      	movhi	r0, #0
    }
  }
   b5eb0:	4770      	bx	lr

000b5eb2 <_ZN6tflite12_GLOBAL__N_118StackDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
    // Do nothing.
  }
   b5eb2:	4770      	bx	lr

000b5eb4 <_ZN6tflite12_GLOBAL__N_118StackDataAllocatorD1Ev>:
class StackDataAllocator : public BuiltinDataAllocator {
   b5eb4:	4770      	bx	lr

000b5eb6 <_ZN6tflite12_GLOBAL__N_113ReportOpErrorEP13TfLiteContextPKcz>:
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}

void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5eb6:	b40e      	push	{r1, r2, r3}
   b5eb8:	b503      	push	{r0, r1, lr}
  MicroInterpreter* interpreter =
   b5eba:	68c3      	ldr	r3, [r0, #12]
  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }

  TfLiteStatus initialization_status() const { return initialization_status_; }

  ErrorReporter* error_reporter() { return error_reporter_; }
   b5ebc:	6898      	ldr	r0, [r3, #8]
void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5ebe:	aa03      	add	r2, sp, #12
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
  interpreter->error_reporter()->Report(format, args);
   b5ec0:	6803      	ldr	r3, [r0, #0]
void ReportOpError(struct TfLiteContext* context, const char* format, ...) {
   b5ec2:	f852 1b04 	ldr.w	r1, [r2], #4
  interpreter->error_reporter()->Report(format, args);
   b5ec6:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   b5ec8:	9201      	str	r2, [sp, #4]
  interpreter->error_reporter()->Report(format, args);
   b5eca:	4798      	blx	r3
  va_end(args);
}
   b5ecc:	b002      	add	sp, #8
   b5ece:	f85d eb04 	ldr.w	lr, [sp], #4
   b5ed2:	b003      	add	sp, #12
   b5ed4:	4770      	bx	lr

000b5ed6 <_ZN6tflite12_GLOBAL__N_118StackDataAllocatorD0Ev>:
class StackDataAllocator : public BuiltinDataAllocator {
   b5ed6:	b510      	push	{r4, lr}
   b5ed8:	2184      	movs	r1, #132	; 0x84
   b5eda:	4604      	mov	r4, r0
   b5edc:	f7fe fe15 	bl	b4b0a <_ZdlPvj>
   b5ee0:	4620      	mov	r0, r4
   b5ee2:	bd10      	pop	{r4, pc}

000b5ee4 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE>:

}  // namespace

MicroInterpreter::MicroInterpreter(const Model* model,
   b5ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ee6:	b085      	sub	sp, #20
      op_resolver_(op_resolver),
      error_reporter_(error_reporter),
      context_(),
      allocator_(&context_, model_, tensor_arena, tensor_arena_size,
                 error_reporter_),
      tensors_allocated_(false) {
   b5ee8:	f100 070c 	add.w	r7, r0, #12
MicroInterpreter::MicroInterpreter(const Model* model,
   b5eec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
      tensors_allocated_(false) {
   b5eee:	6086      	str	r6, [r0, #8]
   b5ef0:	e9c0 1200 	strd	r1, r2, [r0]
MicroInterpreter::MicroInterpreter(const Model* model,
   b5ef4:	4604      	mov	r4, r0
   b5ef6:	460d      	mov	r5, r1
      tensors_allocated_(false) {
   b5ef8:	2238      	movs	r2, #56	; 0x38
   b5efa:	2100      	movs	r1, #0
   b5efc:	4638      	mov	r0, r7
MicroInterpreter::MicroInterpreter(const Model* model,
   b5efe:	9303      	str	r3, [sp, #12]
      tensors_allocated_(false) {
   b5f00:	f010 fe98 	bl	c6c34 <memset>
   b5f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5f06:	9b03      	ldr	r3, [sp, #12]
   b5f08:	9200      	str	r2, [sp, #0]
   b5f0a:	4639      	mov	r1, r7
   b5f0c:	9601      	str	r6, [sp, #4]
   b5f0e:	462a      	mov	r2, r5
   b5f10:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5f14:	f7ff fcb6 	bl	b5884 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>
   b5f18:	2300      	movs	r3, #0
   b5f1a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    auto field_offset = GetOptionalFieldOffset(field);
   b5f1e:	2108      	movs	r1, #8
   b5f20:	4628      	mov	r0, r5
   b5f22:	f7ff fc7e 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f26:	b360      	cbz	r0, b5f82 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x9e>
   b5f28:	582a      	ldr	r2, [r5, r0]
    auto p = data_ + field_offset;
   b5f2a:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f2c:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   b5f2e:	588a      	ldr	r2, [r1, r2]
   b5f30:	2a01      	cmp	r2, #1
   b5f32:	d009      	beq.n	b5f48 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x64>
    error_reporter->Report("Only 1 subgraph is currently supported.\n");
   b5f34:	4914      	ldr	r1, [pc, #80]	; (b5f88 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0xa4>)
   b5f36:	4630      	mov	r0, r6
   b5f38:	f00e fb2a 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
   b5f3c:	2301      	movs	r3, #1
        CorrectTensorEndianness(thisTensor);
    }
  }

  initialization_status_ = kTfLiteOk;
}
   b5f3e:	4620      	mov	r0, r4
  initialization_status_ = kTfLiteOk;
   b5f40:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
   b5f44:	b005      	add	sp, #20
   b5f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5f48:	1d1d      	adds	r5, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5f4a:	685b      	ldr	r3, [r3, #4]
   b5f4c:	441d      	add	r5, r3
  subgraph_ = (*subgraphs)[0];
   b5f4e:	67e5      	str	r5, [r4, #124]	; 0x7c
    auto field_offset = GetOptionalFieldOffset(field);
   b5f50:	2104      	movs	r1, #4
   b5f52:	4628      	mov	r0, r5
   b5f54:	f7ff fc65 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f58:	b110      	cbz	r0, b5f60 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x7c>
    auto p = data_ + field_offset;
   b5f5a:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f5c:	5828      	ldr	r0, [r5, r0]
   b5f5e:	4418      	add	r0, r3
  tensors_ = subgraph_->tensors();
   b5f60:	6760      	str	r0, [r4, #116]	; 0x74
    auto field_offset = GetOptionalFieldOffset(field);
   b5f62:	210a      	movs	r1, #10
   b5f64:	4628      	mov	r0, r5
   b5f66:	f7ff fc5c 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f6a:	b110      	cbz	r0, b5f72 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x8e>
    auto p = data_ + field_offset;
   b5f6c:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5f6e:	5828      	ldr	r0, [r5, r0]
   b5f70:	4418      	add	r0, r3
  context_.ReportError = ReportOpError;
   b5f72:	4b06      	ldr	r3, [pc, #24]	; (b5f8c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0xa8>)
   b5f74:	6223      	str	r3, [r4, #32]
  context_.recommended_num_threads = 1;
   b5f76:	2301      	movs	r3, #1
   b5f78:	6323      	str	r3, [r4, #48]	; 0x30
  operators_ = subgraph_->operators();
   b5f7a:	67a0      	str	r0, [r4, #120]	; 0x78
  context_.impl_ = static_cast<void*>(this);
   b5f7c:	61a4      	str	r4, [r4, #24]
  initialization_status_ = kTfLiteOk;
   b5f7e:	2300      	movs	r3, #0
   b5f80:	e7dd      	b.n	b5f3e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_10OpResolverEPhjPNS_13ErrorReporterE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
   b5f82:	6803      	ldr	r3, [r0, #0]
   b5f84:	deff      	udf	#255	; 0xff
   b5f86:	bf00      	nop
   b5f88:	000c7242 	.word	0x000c7242
   b5f8c:	000b5eb7 	.word	0x000b5eb7

000b5f90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::RegisterPreallocatedInput(uint8_t* buffer,
                                                         size_t input_index) {
  return allocator_.RegisterPreallocatedInput(buffer, input_index);
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
   b5f90:	b510      	push	{r4, lr}
   b5f92:	4604      	mov	r4, r0
  TfLiteStatus status = allocator_.AllocateTensors();
   b5f94:	3044      	adds	r0, #68	; 0x44
   b5f96:	f7ff fe2f 	bl	b5bf8 <_ZN6tflite14MicroAllocator15AllocateTensorsEv>
  TF_LITE_ENSURE_OK(&context_, status);
   b5f9a:	2301      	movs	r3, #1
   b5f9c:	b910      	cbnz	r0, b5fa4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x14>
  tensors_allocated_ = true;
   b5f9e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  return kTfLiteOk;
}
   b5fa2:	bd10      	pop	{r4, pc}
  TF_LITE_ENSURE_OK(&context_, status);
   b5fa4:	4618      	mov	r0, r3
   b5fa6:	e7fc      	b.n	b5fa2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x12>

000b5fa8 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
   b5fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
   b5fac:	f890 a071 	ldrb.w	sl, [r0, #113]	; 0x71
TfLiteStatus MicroInterpreter::Invoke() {
   b5fb0:	b0c3      	sub	sp, #268	; 0x10c
   b5fb2:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
   b5fb4:	f1ba 0f00 	cmp.w	sl, #0
   b5fb8:	d009      	beq.n	b5fce <_ZN6tflite16MicroInterpreter6InvokeEv+0x26>
    error_reporter_->Report("Invoke() called after initialization failed\n");
   b5fba:	4974      	ldr	r1, [pc, #464]	; (b618c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e4>)
   b5fbc:	6880      	ldr	r0, [r0, #8]
   b5fbe:	f00e fae7 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   b5fc2:	f04f 0a01 	mov.w	sl, #1
    if (registration->free) {
      registration->free(&context_, user_data);
    }
  }
  return status;
}
   b5fc6:	4650      	mov	r0, sl
   b5fc8:	b043      	add	sp, #268	; 0x10c
   b5fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
   b5fce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   b5fd2:	b90b      	cbnz	r3, b5fd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>
    AllocateTensors();
   b5fd4:	f7ff ffdc 	bl	b5f90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OperatorCode>> *>(VT_OPERATOR_CODES);
   b5fd8:	6826      	ldr	r6, [r4, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   b5fda:	2106      	movs	r1, #6
   b5fdc:	4630      	mov	r0, r6
   b5fde:	f7ff fc20 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5fe2:	b300      	cbz	r0, b6026 <_ZN6tflite16MicroInterpreter6InvokeEv+0x7e>
   b5fe4:	5835      	ldr	r5, [r6, r0]
    auto p = data_ + field_offset;
   b5fe6:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b5fe8:	441d      	add	r5, r3
  for (size_t i = 0; i < operators_->size(); ++i) {
   b5fea:	f04f 0900 	mov.w	r9, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b5fee:	46cb      	mov	fp, r9
   b5ff0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b5ff2:	681a      	ldr	r2, [r3, #0]
   b5ff4:	4591      	cmp	r9, r2
   b5ff6:	d2e6      	bcs.n	b5fc6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b5ff8:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   b5ffa:	eb03 0689 	add.w	r6, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b5ffe:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   b6002:	441e      	add	r6, r3
    auto field_offset = GetOptionalFieldOffset(field);
   b6004:	2104      	movs	r1, #4
   b6006:	4630      	mov	r0, r6
   b6008:	f7ff fc0b 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b600c:	b168      	cbz	r0, b602a <_ZN6tflite16MicroInterpreter6InvokeEv+0x82>
   b600e:	5837      	ldr	r7, [r6, r0]
    if (index < 0 || index >= opcodes->size()) {
   b6010:	682b      	ldr	r3, [r5, #0]
      error_reporter_->Report("Missing registration for opcode_index %d\n",
   b6012:	68a0      	ldr	r0, [r4, #8]
    if (index < 0 || index >= opcodes->size()) {
   b6014:	42bb      	cmp	r3, r7
   b6016:	d80a      	bhi.n	b602e <_ZN6tflite16MicroInterpreter6InvokeEv+0x86>
      error_reporter_->Report("Missing registration for opcode_index %d\n",
   b6018:	495d      	ldr	r1, [pc, #372]	; (b6190 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e8>)
   b601a:	463a      	mov	r2, r7
      error_reporter_->Report(
   b601c:	f00e fab8 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class StackDataAllocator : public BuiltinDataAllocator {
   b6020:	2001      	movs	r0, #1
      return kTfLiteError;
   b6022:	4682      	mov	sl, r0
   b6024:	e7cf      	b.n	b5fc6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b6026:	4605      	mov	r5, r0
   b6028:	e7df      	b.n	b5fea <_ZN6tflite16MicroInterpreter6InvokeEv+0x42>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   b602a:	4607      	mov	r7, r0
   b602c:	e7f0      	b.n	b6010 <_ZN6tflite16MicroInterpreter6InvokeEv+0x68>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b602e:	1d2b      	adds	r3, r5, #4
    p += i * sizeof(uoffset_t);
   b6030:	eb03 0c87 	add.w	ip, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   b6034:	f853 e027 	ldr.w	lr, [r3, r7, lsl #2]
    status = GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
   b6038:	6861      	ldr	r1, [r4, #4]
    const TfLiteRegistration* registration = nullptr;
   b603a:	f8cd b014 	str.w	fp, [sp, #20]
    status = GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
   b603e:	4602      	mov	r2, r0
   b6040:	ab05      	add	r3, sp, #20
   b6042:	eb0c 000e 	add.w	r0, ip, lr
   b6046:	f00e fa49 	bl	c44dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
    if (status != kTfLiteOk) {
   b604a:	2800      	cmp	r0, #0
   b604c:	d1e9      	bne.n	b6022 <_ZN6tflite16MicroInterpreter6InvokeEv+0x7a>
    if (registration == nullptr) {
   b604e:	9b05      	ldr	r3, [sp, #20]
   b6050:	b91b      	cbnz	r3, b605a <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
      error_reporter_->Report("Skipping op for opcode_index %d\n", index);
   b6052:	4950      	ldr	r1, [pc, #320]	; (b6194 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1ec>)
   b6054:	463a      	mov	r2, r7
      error_reporter_->Report(
   b6056:	68a0      	ldr	r0, [r4, #8]
   b6058:	e7e0      	b.n	b601c <_ZN6tflite16MicroInterpreter6InvokeEv+0x74>
    BuiltinOperator op_type =
   b605a:	7d1f      	ldrb	r7, [r3, #20]
    if (op_type != BuiltinOperator_CUSTOM && op->custom_options()) {
   b605c:	2f20      	cmp	r7, #32
   b605e:	d00c      	beq.n	b607a <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
    auto field_offset = GetOptionalFieldOffset(field);
   b6060:	210e      	movs	r1, #14
   b6062:	4630      	mov	r0, r6
   b6064:	f7ff fbdd 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b6068:	b138      	cbz	r0, b607a <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b606a:	2f79      	cmp	r7, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b606c:	bf96      	itet	ls
   b606e:	4b4a      	ldrls	r3, [pc, #296]	; (b6198 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b6070:	4a4a      	ldrhi	r2, [pc, #296]	; (b619c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b6072:	f853 2027 	ldrls.w	r2, [r3, r7, lsl #2]
      error_reporter_->Report(
   b6076:	494a      	ldr	r1, [pc, #296]	; (b61a0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f8>)
   b6078:	e7ed      	b.n	b6056 <_ZN6tflite16MicroInterpreter6InvokeEv+0xae>
class StackDataAllocator : public BuiltinDataAllocator {
   b607a:	4b4a      	ldr	r3, [pc, #296]	; (b61a4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1fc>)
   b607c:	9321      	str	r3, [sp, #132]	; 0x84
    auto field_offset = GetOptionalFieldOffset(field);
   b607e:	210e      	movs	r1, #14
   b6080:	4630      	mov	r0, r6
    unsigned char* builtin_data = nullptr;
   b6082:	f8cd b018 	str.w	fp, [sp, #24]
   b6086:	f7ff fbcc 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
   b608a:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   b608c:	2800      	cmp	r0, #0
   b608e:	d042      	beq.n	b6116 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16e>
   b6090:	5832      	ldr	r2, [r6, r0]
   b6092:	188b      	adds	r3, r1, r2
  uoffset_t size() const { return EndianScalar(length_); }
   b6094:	f851 8002 	ldr.w	r8, [r1, r2]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   b6098:	3304      	adds	r3, #4
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b609a:	9805      	ldr	r0, [sp, #20]
   b609c:	6942      	ldr	r2, [r0, #20]
    if (registration->init) {
   b609e:	6807      	ldr	r7, [r0, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b60a0:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(builtin_data);
   b60a2:	bf19      	ittee	ne
   b60a4:	9906      	ldrne	r1, [sp, #24]
      init_data_size = 0;
   b60a6:	2200      	movne	r2, #0
      init_data_size = custom_data_size;
   b60a8:	4642      	moveq	r2, r8
      init_data = custom_data;
   b60aa:	4619      	moveq	r1, r3
    if (registration->init) {
   b60ac:	b12f      	cbz	r7, b60ba <_ZN6tflite16MicroInterpreter6InvokeEv+0x112>
      user_data = registration->init(&context_, init_data, init_data_size);
   b60ae:	f104 000c 	add.w	r0, r4, #12
   b60b2:	9302      	str	r3, [sp, #8]
   b60b4:	47b8      	blx	r7
   b60b6:	9b02      	ldr	r3, [sp, #8]
   b60b8:	4607      	mov	r7, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b60ba:	2106      	movs	r1, #6
   b60bc:	4630      	mov	r0, r6
   b60be:	9303      	str	r3, [sp, #12]
   b60c0:	f7ff fc74 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
   b60c4:	2108      	movs	r1, #8
   b60c6:	9002      	str	r0, [sp, #8]
   b60c8:	4630      	mov	r0, r6
   b60ca:	f7ff fc6f 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    node.inputs = inputs_array;
   b60ce:	9a02      	ldr	r2, [sp, #8]
    node.custom_initial_data = custom_data;
   b60d0:	9b03      	ldr	r3, [sp, #12]
    node.delegate = nullptr;
   b60d2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    node.outputs = outputs_array;
   b60d6:	e9cd 2007 	strd	r2, r0, [sp, #28]
    node.temporaries = temporaries_array;
   b60da:	aa10      	add	r2, sp, #64	; 0x40
    node.user_data = user_data;
   b60dc:	e9cd 270a 	strd	r2, r7, [sp, #40]	; 0x28
    node.custom_initial_data_size = custom_data_size;
   b60e0:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
    node.builtin_data = reinterpret_cast<void*>(builtin_data);
   b60e4:	9a06      	ldr	r2, [sp, #24]
    if (registration->prepare) {
   b60e6:	9b05      	ldr	r3, [sp, #20]
    node.builtin_data = reinterpret_cast<void*>(builtin_data);
   b60e8:	920c      	str	r2, [sp, #48]	; 0x30
    if (registration->prepare) {
   b60ea:	689b      	ldr	r3, [r3, #8]
    temporaries_array->size = 0;
   b60ec:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    if (registration->prepare) {
   b60f0:	b33b      	cbz	r3, b6142 <_ZN6tflite16MicroInterpreter6InvokeEv+0x19a>
      TfLiteStatus prepare_status = registration->prepare(&context_, &node);
   b60f2:	a907      	add	r1, sp, #28
   b60f4:	f104 000c 	add.w	r0, r4, #12
   b60f8:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
   b60fa:	4601      	mov	r1, r0
   b60fc:	b308      	cbz	r0, b6142 <_ZN6tflite16MicroInterpreter6InvokeEv+0x19a>
        error_reporter_->Report(
   b60fe:	9a05      	ldr	r2, [sp, #20]
   b6100:	68a0      	ldr	r0, [r4, #8]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b6102:	6953      	ldr	r3, [r2, #20]
   b6104:	2b20      	cmp	r3, #32
   b6106:	d114      	bne.n	b6132 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18a>
    return registration->custom_name;
   b6108:	6992      	ldr	r2, [r2, #24]
        error_reporter_->Report(
   b610a:	9100      	str	r1, [sp, #0]
   b610c:	4926      	ldr	r1, [pc, #152]	; (b61a8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x200>)
   b610e:	464b      	mov	r3, r9
        error_reporter_->Report(
   b6110:	f00e fa3e 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   b6114:	e784      	b.n	b6020 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
      TF_LITE_ENSURE_STATUS(ParseOpData(op, op_type, error_reporter_,
   b6116:	ab06      	add	r3, sp, #24
   b6118:	9300      	str	r3, [sp, #0]
   b611a:	68a2      	ldr	r2, [r4, #8]
   b611c:	ab21      	add	r3, sp, #132	; 0x84
   b611e:	4639      	mov	r1, r7
   b6120:	4630      	mov	r0, r6
   b6122:	f00d fa27 	bl	c3574 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   b6126:	2800      	cmp	r0, #0
   b6128:	f47f af7a 	bne.w	b6020 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
    size_t custom_data_size = 0;
   b612c:	4680      	mov	r8, r0
    const char* custom_data = nullptr;
   b612e:	4603      	mov	r3, r0
   b6130:	e7b3      	b.n	b609a <_ZN6tflite16MicroInterpreter6InvokeEv+0xf2>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b6132:	b2db      	uxtb	r3, r3
   b6134:	2b79      	cmp	r3, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b6136:	bf96      	itet	ls
   b6138:	4a17      	ldrls	r2, [pc, #92]	; (b6198 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b613a:	4a18      	ldrhi	r2, [pc, #96]	; (b619c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b613c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   b6140:	e7e3      	b.n	b610a <_ZN6tflite16MicroInterpreter6InvokeEv+0x162>
    if (registration->invoke) {
   b6142:	9b05      	ldr	r3, [sp, #20]
   b6144:	68db      	ldr	r3, [r3, #12]
   b6146:	b1bb      	cbz	r3, b6178 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1d0>
      TfLiteStatus invoke_status = registration->invoke(&context_, &node);
   b6148:	a907      	add	r1, sp, #28
   b614a:	f104 000c 	add.w	r0, r4, #12
   b614e:	4798      	blx	r3
      if (invoke_status != kTfLiteOk) {
   b6150:	4601      	mov	r1, r0
   b6152:	b188      	cbz	r0, b6178 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1d0>
        error_reporter_->Report(
   b6154:	9a05      	ldr	r2, [sp, #20]
   b6156:	68a0      	ldr	r0, [r4, #8]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   b6158:	6953      	ldr	r3, [r2, #20]
   b615a:	2b20      	cmp	r3, #32
   b615c:	d104      	bne.n	b6168 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c0>
    return registration->custom_name;
   b615e:	6992      	ldr	r2, [r2, #24]
        error_reporter_->Report(
   b6160:	9100      	str	r1, [sp, #0]
   b6162:	464b      	mov	r3, r9
   b6164:	4911      	ldr	r1, [pc, #68]	; (b61ac <_ZN6tflite16MicroInterpreter6InvokeEv+0x204>)
   b6166:	e7d3      	b.n	b6110 <_ZN6tflite16MicroInterpreter6InvokeEv+0x168>
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b6168:	b2db      	uxtb	r3, r3
   b616a:	2b79      	cmp	r3, #121	; 0x79
  return EnumNamesBuiltinOperator()[index];
   b616c:	bf96      	itet	ls
   b616e:	4a0a      	ldrls	r2, [pc, #40]	; (b6198 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f0>)
  if (e < BuiltinOperator_ADD || e > BuiltinOperator_NON_MAX_SUPPRESSION_V5) return "";
   b6170:	4a0a      	ldrhi	r2, [pc, #40]	; (b619c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1f4>)
  return EnumNamesBuiltinOperator()[index];
   b6172:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   b6176:	e7f3      	b.n	b6160 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1b8>
    if (registration->free) {
   b6178:	9b05      	ldr	r3, [sp, #20]
   b617a:	685b      	ldr	r3, [r3, #4]
   b617c:	b11b      	cbz	r3, b6186 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1de>
      registration->free(&context_, user_data);
   b617e:	4639      	mov	r1, r7
   b6180:	f104 000c 	add.w	r0, r4, #12
   b6184:	4798      	blx	r3
  for (size_t i = 0; i < operators_->size(); ++i) {
   b6186:	f109 0901 	add.w	r9, r9, #1
   b618a:	e731      	b.n	b5ff0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x48>
   b618c:	000c78ee 	.word	0x000c78ee
   b6190:	000c791b 	.word	0x000c791b
   b6194:	000c7945 	.word	0x000c7945
   b6198:	000c7f1c 	.word	0x000c7f1c
   b619c:	000c720b 	.word	0x000c720b
   b61a0:	000c7966 	.word	0x000c7966
   b61a4:	000c8110 	.word	0x000c8110
   b61a8:	000c79ac 	.word	0x000c79ac
   b61ac:	000c79e1 	.word	0x000c79e1

000b61b0 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
   b61b0:	b513      	push	{r0, r1, r4, lr}
   b61b2:	4604      	mov	r4, r0
   b61b4:	9101      	str	r1, [sp, #4]
   b61b6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b61b8:	2106      	movs	r1, #6
   b61ba:	f7ff fbf7 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  const flatbuffers::Vector<int32_t>* inputs = subgraph_->inputs();
  const size_t length = inputs->size();
  if ((index < 0) || (index >= length)) {
   b61be:	9a01      	ldr	r2, [sp, #4]
  uoffset_t size() const { return EndianScalar(length_); }
   b61c0:	6803      	ldr	r3, [r0, #0]
   b61c2:	429a      	cmp	r2, r3
   b61c4:	d306      	bcc.n	b61d4 <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    error_reporter_->Report("Input index %d out of range (length is %d)", index,
   b61c6:	4907      	ldr	r1, [pc, #28]	; (b61e4 <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
   b61c8:	68a0      	ldr	r0, [r4, #8]
   b61ca:	f00e f9e1 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                            length);
    return nullptr;
   b61ce:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs->Get(index)]);
}
   b61d0:	b002      	add	sp, #8
   b61d2:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs->Get(index)]);
   b61d4:	4611      	mov	r1, r2
   b61d6:	f7ff fbbd 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b61da:	6963      	ldr	r3, [r4, #20]
   b61dc:	2238      	movs	r2, #56	; 0x38
   b61de:	fb02 3000 	mla	r0, r2, r0, r3
   b61e2:	e7f5      	b.n	b61d0 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
   b61e4:	000c7a15 	.word	0x000c7a15

000b61e8 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
   b61e8:	b513      	push	{r0, r1, r4, lr}
   b61ea:	4604      	mov	r4, r0
   b61ec:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   b61ee:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b61f0:	2108      	movs	r1, #8
   b61f2:	f7ff fbdb 	bl	b59ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  const flatbuffers::Vector<int32_t>* outputs = subgraph_->outputs();
  const size_t length = outputs->size();
  if ((index < 0) || (index >= outputs->size())) {
   b61f6:	9a01      	ldr	r2, [sp, #4]
  uoffset_t size() const { return EndianScalar(length_); }
   b61f8:	6803      	ldr	r3, [r0, #0]
   b61fa:	4293      	cmp	r3, r2
   b61fc:	d806      	bhi.n	b620c <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    error_reporter_->Report("Output index %d out of range (length is %d)",
   b61fe:	4907      	ldr	r1, [pc, #28]	; (b621c <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
   b6200:	68a0      	ldr	r0, [r4, #8]
   b6202:	f00e f9c5 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                            index, length);
    return nullptr;
   b6206:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs->Get(index)]);
}
   b6208:	b002      	add	sp, #8
   b620a:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs->Get(index)]);
   b620c:	4611      	mov	r1, r2
   b620e:	f7ff fba1 	bl	b5954 <_ZNK11flatbuffers6VectorIlE3GetEm>
   b6212:	6963      	ldr	r3, [r4, #20]
   b6214:	2238      	movs	r2, #56	; 0x38
   b6216:	fb02 3000 	mla	r0, r2, r0, r3
   b621a:	e7f5      	b.n	b6208 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
   b621c:	000c7a40 	.word	0x000c7a40

000b6220 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
  return start;
}

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   b6220:	b530      	push	{r4, r5, lr}
   b6222:	4603      	mov	r3, r0
  char* current = main;
   b6224:	4604      	mov	r4, r0
   b6226:	4620      	mov	r0, r4
  while (*current != 0) {
   b6228:	f814 5b01 	ldrb.w	r5, [r4], #1
   b622c:	2d00      	cmp	r5, #0
   b622e:	d1fa      	bne.n	b6226 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
    ++current;
  }
  char* current_end = main + (main_max_length - 1);
   b6230:	3901      	subs	r1, #1
   b6232:	440b      	add	r3, r1
   b6234:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   b6236:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b623a:	b121      	cbz	r1, b6246 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   b623c:	4298      	cmp	r0, r3
   b623e:	d202      	bcs.n	b6246 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   b6240:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   b6244:	e7f7      	b.n	b6236 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
    ++current;
    ++to_append;
  }
  *current = 0;
   b6246:	2300      	movs	r3, #0
   b6248:	7003      	strb	r3, [r0, #0]
  return current;
}
   b624a:	bd30      	pop	{r4, r5, pc}

000b624c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   b624c:	b570      	push	{r4, r5, r6, lr}
   b624e:	460c      	mov	r4, r1
  char* start = buffer;
  do {
    int32_t digit = i % base;
   b6250:	fbb0 f6f2 	udiv	r6, r0, r2
   b6254:	fb02 0516 	mls	r5, r2, r6, r0
    char character;
    if (digit < 10) {
      character = '0' + digit;
   b6258:	b2eb      	uxtb	r3, r5
    if (digit < 10) {
   b625a:	2d09      	cmp	r5, #9
      character = '0' + digit;
   b625c:	bf94      	ite	ls
   b625e:	3330      	addls	r3, #48	; 0x30
    } else {
      character = 'a' + (digit - 10);
   b6260:	3357      	addhi	r3, #87	; 0x57
    }
    *buffer++ = character;
   b6262:	4625      	mov	r5, r4
      character = 'a' + (digit - 10);
   b6264:	b2db      	uxtb	r3, r3
    i /= base;
  } while (i > 0);
   b6266:	4282      	cmp	r2, r0
    *buffer++ = character;
   b6268:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   b626c:	d90a      	bls.n	b6284 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x38>
  *buffer = 0;
   b626e:	2300      	movs	r3, #0
   b6270:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   b6272:	428c      	cmp	r4, r1
   b6274:	d909      	bls.n	b628a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x3e>
    char tmp = *p1;
   b6276:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   b6278:	7822      	ldrb	r2, [r4, #0]
   b627a:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   b627e:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   b6282:	e7f6      	b.n	b6272 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x26>
   b6284:	462c      	mov	r4, r5
    i /= base;
   b6286:	4630      	mov	r0, r6
   b6288:	e7e2      	b.n	b6250 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0+0x4>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
   b628a:	bd70      	pop	{r4, r5, r6, pc}

000b628c <DebugLogInt32>:
  return current;
}

}  // namespace

extern "C" void DebugLogInt32(int32_t i) {
   b628c:	b500      	push	{lr}
  if (i < 0) {
   b628e:	2800      	cmp	r0, #0
extern "C" void DebugLogInt32(int32_t i) {
   b6290:	b08d      	sub	sp, #52	; 0x34
    *buffer++ = '-';
   b6292:	bfbd      	ittte	lt
   b6294:	232d      	movlt	r3, #45	; 0x2d
    u = -u;
   b6296:	4240      	neglt	r0, r0
    *buffer++ = '-';
   b6298:	f10d 0101 	addlt.w	r1, sp, #1
   b629c:	4669      	movge	r1, sp
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b629e:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
   b62a2:	bfb8      	it	lt
   b62a4:	f88d 3000 	strblt.w	r3, [sp]
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b62a8:	f7ff ffd0 	bl	b624c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(i, number_string);
  DebugLog(number_string);
   b62ac:	4668      	mov	r0, sp
   b62ae:	f00c ff51 	bl	c3154 <DebugLog>
}
   b62b2:	b00d      	add	sp, #52	; 0x34
   b62b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b62b8 <DebugLogFloat>:
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(i, number_string, 16);
  DebugLog(number_string);
}

extern "C" void DebugLogFloat(float i) {
   b62b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62bc:	b09e      	sub	sp, #120	; 0x78
   b62be:	ed8d 0a01 	vstr	s0, [sp, #4]
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
   b62c2:	9b01      	ldr	r3, [sp, #4]
  if (u & sign_mask) {
   b62c4:	2b00      	cmp	r3, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   b62c6:	f3c3 57c7 	ubfx	r7, r3, #23, #8
  const uint32_t fraction = (u & fraction_mask);
   b62ca:	f3c3 0e16 	ubfx	lr, r3, #0, #23
    *current = '-';
   b62ce:	bfbb      	ittet	lt
   b62d0:	232d      	movlt	r3, #45	; 0x2d
   b62d2:	f88d 3018 	strblt.w	r3, [sp, #24]
  char* current = buffer;
   b62d6:	ab06      	addge	r3, sp, #24
    current += 1;
   b62d8:	f10d 0319 	addlt.w	r3, sp, #25
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   b62dc:	f1a7 067f 	sub.w	r6, r7, #127	; 0x7f
  *current = 0;
   b62e0:	2200      	movs	r2, #0
  if (exponent == 128) {
   b62e2:	2e80      	cmp	r6, #128	; 0x80
  *current = 0;
   b62e4:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
   b62e6:	d111      	bne.n	b630c <DebugLogFloat+0x54>
      current = StrCatStr(current, (current_end - current), "Inf");
   b62e8:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   b62ec:	1ac9      	subs	r1, r1, r3
    if (fraction == 0) {
   b62ee:	f1be 0f00 	cmp.w	lr, #0
   b62f2:	d109      	bne.n	b6308 <DebugLogFloat+0x50>
      current = StrCatStr(current, (current_end - current), "Inf");
   b62f4:	4a2c      	ldr	r2, [pc, #176]	; (b63a8 <DebugLogFloat+0xf0>)
      current = StrCatStr(current, (current_end - current), "NaN");
   b62f6:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
   b62f8:	f7ff ff92 	bl	b6220 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  char number_string[kFastToBufferSize];
  FastFloatToBufferLeft(i, number_string);
  DebugLog(number_string);
   b62fc:	a806      	add	r0, sp, #24
   b62fe:	f00c ff29 	bl	c3154 <DebugLog>
}
   b6302:	b01e      	add	sp, #120	; 0x78
   b6304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      current = StrCatStr(current, (current_end - current), "NaN");
   b6308:	4a28      	ldr	r2, [pc, #160]	; (b63ac <DebugLogFloat+0xf4>)
   b630a:	e7f4      	b.n	b62f6 <DebugLogFloat+0x3e>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
   b630c:	4a28      	ldr	r2, [pc, #160]	; (b63b0 <DebugLogFloat+0xf8>)
   b630e:	ac02      	add	r4, sp, #8
   b6310:	f102 0808 	add.w	r8, r2, #8
   b6314:	4625      	mov	r5, r4
   b6316:	6810      	ldr	r0, [r2, #0]
   b6318:	6851      	ldr	r1, [r2, #4]
   b631a:	46a4      	mov	ip, r4
   b631c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6320:	3208      	adds	r2, #8
   b6322:	4542      	cmp	r2, r8
   b6324:	4664      	mov	r4, ip
   b6326:	d1f6      	bne.n	b6316 <DebugLogFloat+0x5e>
   b6328:	6810      	ldr	r0, [r2, #0]
   b632a:	7912      	ldrb	r2, [r2, #4]
   b632c:	f8cc 0000 	str.w	r0, [ip]
   b6330:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
   b6334:	4670      	mov	r0, lr
   b6336:	462a      	mov	r2, r5
  for (int i = 0; i < scale_shifts_size; ++i) {
   b6338:	2100      	movs	r1, #0
    scaled_fraction += (fraction >> scale_shifts[i]);
   b633a:	f912 4b01 	ldrsb.w	r4, [r2], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
   b633e:	3101      	adds	r1, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
   b6340:	fa2e f404 	lsr.w	r4, lr, r4
  for (int i = 0; i < scale_shifts_size; ++i) {
   b6344:	290d      	cmp	r1, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
   b6346:	4420      	add	r0, r4
  for (int i = 0; i < scale_shifts_size; ++i) {
   b6348:	d1f7      	bne.n	b633a <DebugLogFloat+0x82>
  *current = '1';
   b634a:	2231      	movs	r2, #49	; 0x31
   b634c:	701a      	strb	r2, [r3, #0]
  *current = '.';
   b634e:	222e      	movs	r2, #46	; 0x2e
   b6350:	705a      	strb	r2, [r3, #1]
  *current = 0;
   b6352:	2200      	movs	r2, #0
  current += 1;
   b6354:	1c9d      	adds	r5, r3, #2
  *current = 0;
   b6356:	709a      	strb	r2, [r3, #2]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
   b6358:	f10d 0447 	add.w	r4, sp, #71	; 0x47
  FastUInt32ToBufferLeft(number, number_string, base);
   b635c:	220a      	movs	r2, #10
   b635e:	a912      	add	r1, sp, #72	; 0x48
   b6360:	f7ff ff74 	bl	b624c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  return StrCatStr(main, main_max_length, number_string);
   b6364:	1b61      	subs	r1, r4, r5
   b6366:	aa12      	add	r2, sp, #72	; 0x48
   b6368:	4628      	mov	r0, r5
   b636a:	f7ff ff59 	bl	b6220 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatStr(current, (current_end - current), "*2^");
   b636e:	4a11      	ldr	r2, [pc, #68]	; (b63b4 <DebugLogFloat+0xfc>)
   b6370:	1a21      	subs	r1, r4, r0
   b6372:	f7ff ff55 	bl	b6220 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  if (i < 0) {
   b6376:	2e00      	cmp	r6, #0
    u = -u;
   b6378:	bfb8      	it	lt
   b637a:	f1c7 067f 	rsblt	r6, r7, #127	; 0x7f
  current = StrCatStr(current, (current_end - current), "*2^");
   b637e:	4605      	mov	r5, r0
  current = StrCatInt32(current, (current_end - current), exponent);
   b6380:	eba4 0400 	sub.w	r4, r4, r0
    *buffer++ = '-';
   b6384:	bfba      	itte	lt
   b6386:	232d      	movlt	r3, #45	; 0x2d
   b6388:	f10d 0149 	addlt.w	r1, sp, #73	; 0x49
   b638c:	a912      	addge	r1, sp, #72	; 0x48
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b638e:	f04f 020a 	mov.w	r2, #10
   b6392:	4630      	mov	r0, r6
    *buffer++ = '-';
   b6394:	bfb8      	it	lt
   b6396:	f88d 3048 	strblt.w	r3, [sp, #72]	; 0x48
  return FastUInt32ToBufferLeft(u, buffer, 10);
   b639a:	f7ff ff57 	bl	b624c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci.isra.0>
  return StrCatStr(main, main_max_length, number_string);
   b639e:	aa12      	add	r2, sp, #72	; 0x48
   b63a0:	4621      	mov	r1, r4
   b63a2:	4628      	mov	r0, r5
   b63a4:	e7a8      	b.n	b62f8 <DebugLogFloat+0x40>
   b63a6:	bf00      	nop
   b63a8:	000c8120 	.word	0x000c8120
   b63ac:	000c8124 	.word	0x000c8124
   b63b0:	000c812c 	.word	0x000c812c
   b63b4:	000c8128 	.word	0x000c8128

000b63b8 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
  int32 output_offset;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b63b8:	2000      	movs	r0, #0
   b63ba:	4770      	bx	lr

000b63bc <_ZN6tflite3ops5micro3add4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b63bc:	4770      	bx	lr

000b63be <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b63be:	2000      	movs	r0, #0
   b63c0:	4770      	bx	lr

000b63c2 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
   b63c2:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   b63c4:	6803      	ldr	r3, [r0, #0]
   b63c6:	2b04      	cmp	r3, #4
  ~RuntimeShape() {
   b63c8:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   b63ca:	dd03      	ble.n	b63d4 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b63cc:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b63ce:	b108      	cbz	r0, b63d4 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b63d0:	f7fe fb99 	bl	b4b06 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b63d4:	4620      	mov	r0, r4
   b63d6:	bd10      	pop	{r4, pc}

000b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32 DimensionsCount() const { return size_; }
  inline int32 Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   b63d8:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   b63da:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b63dc:	da01      	bge.n	b63e2 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   b63de:	f00e fa5d 	bl	c489c <abort>
    TFLITE_DCHECK_LT(i, size_);
   b63e2:	6803      	ldr	r3, [r0, #0]
   b63e4:	428b      	cmp	r3, r1
   b63e6:	ddfa      	ble.n	b63de <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   b63e8:	2b04      	cmp	r3, #4
   b63ea:	bfcb      	itete	gt
   b63ec:	6843      	ldrgt	r3, [r0, #4]
   b63ee:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   b63f2:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   b63f6:	6840      	ldrle	r0, [r0, #4]
  }
   b63f8:	bd08      	pop	{r3, pc}

000b63fa <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
    TFLITE_DCHECK_GE(i, 0);
   b63fa:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   b63fc:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b63fe:	da01      	bge.n	b6404 <_ZN6tflite12RuntimeShape6SetDimEil+0xa>
   b6400:	f00e fa4c 	bl	c489c <abort>
    TFLITE_DCHECK_LT(i, size_);
   b6404:	6803      	ldr	r3, [r0, #0]
   b6406:	428b      	cmp	r3, r1
   b6408:	ddfa      	ble.n	b6400 <_ZN6tflite12RuntimeShape6SetDimEil+0x6>
    if (size_ > kMaxSmallSize) {
   b640a:	2b04      	cmp	r3, #4
      dims_pointer_[i] = val;
   b640c:	bfcb      	itete	gt
   b640e:	6843      	ldrgt	r3, [r0, #4]
    } else {
      dims_[i] = val;
   b6410:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   b6414:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   b6418:	6042      	strle	r2, [r0, #4]
    }
  }
   b641a:	bd08      	pop	{r3, pc}

000b641c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 4-D.
  inline const int32* DimsDataUpTo4D() const { return dims_; }

  inline void Resize(int dimensions_count) {
   b641c:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   b641e:	6803      	ldr	r3, [r0, #0]
   b6420:	2b04      	cmp	r3, #4
  inline void Resize(int dimensions_count) {
   b6422:	4605      	mov	r5, r0
   b6424:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   b6426:	dd03      	ble.n	b6430 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b6428:	6840      	ldr	r0, [r0, #4]
   b642a:	b108      	cbz	r0, b6430 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   b642c:	f7fe fb6b 	bl	b4b06 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    if (dimensions_count > kMaxSmallSize) {
   b6430:	2c04      	cmp	r4, #4
    size_ = dimensions_count;
   b6432:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   b6434:	dd09      	ble.n	b644a <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
   b6436:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b643a:	429c      	cmp	r4, r3
   b643c:	bfb4      	ite	lt
   b643e:	00a0      	lsllt	r0, r4, #2
   b6440:	f04f 30ff 	movge.w	r0, #4294967295
   b6444:	f7fe fb5d 	bl	b4b02 <_Znaj>
   b6448:	6068      	str	r0, [r5, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b644a:	bd38      	pop	{r3, r4, r5, pc}

000b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6450:	4698      	mov	r8, r3
      : size_(0) {
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b6452:	6813      	ldr	r3, [r2, #0]
      : size_(0) {
   b6454:	2700      	movs	r7, #0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b6456:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b6458:	4605      	mov	r5, r0
   b645a:	460e      	mov	r6, r1
   b645c:	4614      	mov	r4, r2
      : size_(0) {
   b645e:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b6460:	da01      	bge.n	b6466 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   b6462:	f00e fa1b 	bl	c489c <abort>
    Resize(new_shape_size);
   b6466:	f7ff ffd9 	bl	b641c <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   b646a:	6820      	ldr	r0, [r4, #0]
   b646c:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   b646e:	42b7      	cmp	r7, r6
   b6470:	da06      	bge.n	b6480 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   b6472:	4639      	mov	r1, r7
   b6474:	4642      	mov	r2, r8
   b6476:	4628      	mov	r0, r5
   b6478:	f7ff ffbf 	bl	b63fa <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
   b647c:	3701      	adds	r7, #1
   b647e:	e7f6      	b.n	b646e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6480:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6482:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6484:	2b04      	cmp	r3, #4
   b6486:	bfcc      	ite	gt
   b6488:	6868      	ldrgt	r0, [r5, #4]
   b648a:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b648c:	2a04      	cmp	r2, #4
   b648e:	bfc8      	it	gt
   b6490:	6861      	ldrgt	r1, [r4, #4]
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b6492:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6496:	bfd8      	it	le
   b6498:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b649a:	0092      	lsls	r2, r2, #2
   b649c:	f010 fba2 	bl	c6be4 <memcpy>
                sizeof(int32) * shape.DimensionsCount());
  }
   b64a0:	4628      	mov	r0, r5
   b64a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b64a6:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b64a8:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b64aa:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b64ac:	2d04      	cmp	r5, #4
   b64ae:	d001      	beq.n	b64b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   b64b0:	f00e f9f4 	bl	c489c <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo4D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   b64b4:	2900      	cmp	r1, #0
   b64b6:	dbfb      	blt.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b64b8:	6845      	ldr	r5, [r0, #4]
   b64ba:	428d      	cmp	r5, r1
   b64bc:	ddf8      	ble.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   b64be:	2a00      	cmp	r2, #0
   b64c0:	dbf6      	blt.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b64c2:	6886      	ldr	r6, [r0, #8]
   b64c4:	4296      	cmp	r6, r2
   b64c6:	ddf3      	ble.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   b64c8:	2b00      	cmp	r3, #0
   b64ca:	dbf1      	blt.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b64cc:	68c5      	ldr	r5, [r0, #12]
   b64ce:	429d      	cmp	r5, r3
   b64d0:	ddee      	ble.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   b64d2:	2c00      	cmp	r4, #0
   b64d4:	dbec      	blt.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b64d6:	6900      	ldr	r0, [r0, #16]
   b64d8:	42a0      	cmp	r0, r4
   b64da:	dde9      	ble.n	b64b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   b64dc:	fb01 2206 	mla	r2, r1, r6, r2
   b64e0:	fb05 3302 	mla	r3, r5, r2, r3
}
   b64e4:	fb00 4003 	mla	r0, r0, r3, r4
   b64e8:	bd70      	pop	{r4, r5, r6, pc}

000b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
  return shape.FlatSize();
}

inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0,
                            const RuntimeShape& check_shape_1) {
   b64ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32 DimensionsCount() const { return size_; }
   b64ee:	6805      	ldr	r5, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b64f0:	680b      	ldr	r3, [r1, #0]
   b64f2:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   b64f4:	4604      	mov	r4, r0
   b64f6:	4688      	mov	r8, r1
   b64f8:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b64fa:	d001      	beq.n	b6500 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   b64fc:	f00e f9ce 	bl	c489c <abort>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   b6500:	2600      	movs	r6, #0
   b6502:	42ae      	cmp	r6, r5
   b6504:	da0c      	bge.n	b6520 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b6506:	4631      	mov	r1, r6
   b6508:	4620      	mov	r0, r4
   b650a:	f7ff ff65 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b650e:	4631      	mov	r1, r6
   b6510:	4681      	mov	r9, r0
   b6512:	4640      	mov	r0, r8
   b6514:	f7ff ff60 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6518:	4581      	cmp	r9, r0
   b651a:	d1ef      	bne.n	b64fc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b651c:	3601      	adds	r6, #1
   b651e:	e7f0      	b.n	b6502 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b6520:	683b      	ldr	r3, [r7, #0]
   b6522:	429d      	cmp	r5, r3
   b6524:	d1ea      	bne.n	b64fc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b6526:	2600      	movs	r6, #0
   b6528:	42b5      	cmp	r5, r6
   b652a:	dd0c      	ble.n	b6546 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b652c:	4631      	mov	r1, r6
   b652e:	4620      	mov	r0, r4
   b6530:	f7ff ff52 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6534:	4631      	mov	r1, r6
   b6536:	4680      	mov	r8, r0
   b6538:	4638      	mov	r0, r7
   b653a:	f7ff ff4d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b653e:	4580      	cmp	r8, r0
   b6540:	d1dc      	bne.n	b64fc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   b6542:	3601      	adds	r6, #1
   b6544:	e7f0      	b.n	b6528 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6546:	2d04      	cmp	r5, #4
   b6548:	bfcc      	ite	gt
   b654a:	6864      	ldrgt	r4, [r4, #4]
   b654c:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   b654e:	2300      	movs	r3, #0
    int buffer_size = 1;
   b6550:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   b6552:	429d      	cmp	r5, r3
   b6554:	dd04      	ble.n	b6560 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   b6556:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b655a:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b655c:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   b655e:	e7f8      	b.n	b6552 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
  }
  return MatchingFlatSize(shape, check_shape_1);
}
   b6560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b6564:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
   b6566:	b510      	push	{r4, lr}
   b6568:	d123      	bne.n	b65b2 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x4e>
   b656a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   b656e:	425c      	negs	r4, r3
   b6570:	415c      	adcs	r4, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   b6572:	fb80 0101 	smull	r0, r1, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b6576:	2900      	cmp	r1, #0
   b6578:	4b1a      	ldr	r3, [pc, #104]	; (b65e4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x80>)
   b657a:	bfa8      	it	ge
   b657c:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b6580:	b9cc      	cbnz	r4, b65b6 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x52>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b6582:	1818      	adds	r0, r3, r0
   b6584:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   b6588:	2900      	cmp	r1, #0
   b658a:	da04      	bge.n	b6596 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x32>
   b658c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b6590:	18c0      	adds	r0, r0, r3
   b6592:	f141 0100 	adc.w	r1, r1, #0
   b6596:	0fc0      	lsrs	r0, r0, #31
   b6598:	ea40 0041 	orr.w	r0, r0, r1, lsl #1

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   b659c:	2a00      	cmp	r2, #0
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   b659e:	f1c2 0100 	rsb	r1, r2, #0
   b65a2:	dd0b      	ble.n	b65bc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x58>
   b65a4:	4b10      	ldr	r3, [pc, #64]	; (b65e8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x84>)
   b65a6:	4a11      	ldr	r2, [pc, #68]	; (b65ec <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x88>)
   b65a8:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   b65ac:	4810      	ldr	r0, [pc, #64]	; (b65f0 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x8c>)
   b65ae:	f00e f985 	bl	c48bc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b65b2:	2400      	movs	r4, #0
   b65b4:	e7dd      	b.n	b6572 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xe>
   b65b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b65ba:	e7ef      	b.n	b659c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x38>
  assert(exponent <= 31);
   b65bc:	321f      	adds	r2, #31
   b65be:	da04      	bge.n	b65ca <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x66>
   b65c0:	4b0c      	ldr	r3, [pc, #48]	; (b65f4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x90>)
   b65c2:	4a0a      	ldr	r2, [pc, #40]	; (b65ec <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x88>)
   b65c4:	f240 1167 	movw	r1, #359	; 0x167
   b65c8:	e7f0      	b.n	b65ac <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x48>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b65ca:	2301      	movs	r3, #1
   b65cc:	408b      	lsls	r3, r1
   b65ce:	3b01      	subs	r3, #1
  return a & b;
   b65d0:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   b65d4:	105b      	asrs	r3, r3, #1
  return a + b;
   b65d6:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   b65da:	4108      	asrs	r0, r1
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
   b65dc:	429a      	cmp	r2, r3
   b65de:	bfc8      	it	gt
   b65e0:	3001      	addgt	r0, #1
   b65e2:	bd10      	pop	{r4, pc}
   b65e4:	c0000001 	.word	0xc0000001
   b65e8:	000c813a 	.word	0x000c813a
   b65ec:	000c8148 	.word	0x000c8148
   b65f0:	000c81a2 	.word	0x000c81a2
   b65f4:	000c8209 	.word	0x000c8209

000b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
   b65f8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b65fa:	2900      	cmp	r1, #0
                            int i3) {
   b65fc:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b65fe:	db02      	blt.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b6600:	6804      	ldr	r4, [r0, #0]
   b6602:	428c      	cmp	r4, r1
   b6604:	dc01      	bgt.n	b660a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   b6606:	f00e f949 	bl	c489c <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   b660a:	2a00      	cmp	r2, #0
   b660c:	dbfb      	blt.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b660e:	6844      	ldr	r4, [r0, #4]
   b6610:	4294      	cmp	r4, r2
   b6612:	ddf8      	ble.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   b6614:	2b00      	cmp	r3, #0
   b6616:	dbf6      	blt.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b6618:	6884      	ldr	r4, [r0, #8]
   b661a:	429c      	cmp	r4, r3
   b661c:	ddf3      	ble.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   b661e:	2d00      	cmp	r5, #0
   b6620:	dbf1      	blt.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b6622:	68c4      	ldr	r4, [r0, #12]
   b6624:	42ac      	cmp	r4, r5
   b6626:	ddee      	ble.n	b6606 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b6628:	e9d0 6404 	ldrd	r6, r4, [r0, #16]
   b662c:	4354      	muls	r4, r2
   b662e:	6982      	ldr	r2, [r0, #24]
         i3 * desc.strides[3];
   b6630:	69c0      	ldr	r0, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b6632:	fb06 4101 	mla	r1, r6, r1, r4
   b6636:	fb02 1203 	mla	r2, r2, r3, r1
}
   b663a:	fb00 2005 	mla	r0, r0, r5, r2
   b663e:	bd70      	pop	{r4, r5, r6, pc}

000b6640 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   b6640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6644:	4604      	mov	r4, r0
   b6646:	4690      	mov	r8, r2
   b6648:	4608      	mov	r0, r1
   b664a:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b664c:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   b6650:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   b6652:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b6654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b6656:	dd01      	ble.n	b665c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   b6658:	f00e f920 	bl	c489c <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b665c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b665e:	f7ff ff44 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   b6662:	6862      	ldr	r2, [r4, #4]
   b6664:	f112 0fff 	cmn.w	r2, #255	; 0xff
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b6668:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   b666a:	dbf5      	blt.n	b6658 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   b666c:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   b666e:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   b6670:	dcf2      	bgt.n	b6658 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   b6672:	33ff      	adds	r3, #255	; 0xff
   b6674:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   b6678:	d8ee      	bhi.n	b6658 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   b667a:	2700      	movs	r7, #0
   b667c:	45b9      	cmp	r9, r7
   b667e:	dd28      	ble.n	b66d2 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   b6680:	f816 a007 	ldrb.w	sl, [r6, r7]
   b6684:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   b6686:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   b6688:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   b668a:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   b668c:	f818 3007 	ldrb.w	r3, [r8, r7]
   b6690:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   b6692:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6696:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b669a:	fa03 f000 	lsl.w	r0, r3, r0
   b669e:	f7ff ff61 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66a2:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66a6:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66a8:	4650      	mov	r0, sl
   b66aa:	f7ff ff5b 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b66ae:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b66b2:	4458      	add	r0, fp
   b66b4:	f7ff ff56 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
   b66b8:	68e3      	ldr	r3, [r4, #12]
   b66ba:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   b66bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   b66be:	4283      	cmp	r3, r0
   b66c0:	bfb8      	it	lt
   b66c2:	4603      	movlt	r3, r0
   b66c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b66c6:	4283      	cmp	r3, r0
   b66c8:	bfa8      	it	ge
   b66ca:	4603      	movge	r3, r0
   b66cc:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   b66ce:	3701      	adds	r7, #1
   b66d0:	e7d4      	b.n	b667c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   b66d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b66d6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   b66d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66da:	4604      	mov	r4, r0
   b66dc:	4690      	mov	r8, r2
   b66de:	4608      	mov	r0, r1
   b66e0:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b66e2:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   b66e6:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   b66e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b66ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b66ec:	dd01      	ble.n	b66f2 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   b66ee:	f00e f8d5 	bl	c489c <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b66f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b66f4:	f7ff fef9 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   b66f8:	6862      	ldr	r2, [r4, #4]
   b66fa:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b66fe:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   b6700:	dbf5      	blt.n	b66ee <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   b6702:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   b6704:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   b6706:	dcf2      	bgt.n	b66ee <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   b6708:	337f      	adds	r3, #127	; 0x7f
   b670a:	2bfe      	cmp	r3, #254	; 0xfe
   b670c:	d8ef      	bhi.n	b66ee <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   b670e:	2700      	movs	r7, #0
   b6710:	45b9      	cmp	r9, r7
   b6712:	dd28      	ble.n	b6766 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   b6714:	f916 a007 	ldrsb.w	sl, [r6, r7]
   b6718:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   b671a:	6862      	ldr	r2, [r4, #4]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   b671c:	69a0      	ldr	r0, [r4, #24]
    const int32 input2_val = params.input2_offset + input2_data[i];
   b671e:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   b6720:	f918 3007 	ldrsb.w	r3, [r8, r7]
   b6724:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   b6726:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b672a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b672e:	fa03 f000 	lsl.w	r0, r3, r0
   b6732:	f7ff ff17 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6736:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b673a:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b673c:	4650      	mov	r0, sl
   b673e:	f7ff ff11 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6742:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6746:	4458      	add	r0, fp
   b6748:	f7ff ff0c 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
   b674c:	68e3      	ldr	r3, [r4, #12]
   b674e:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   b6750:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   b6752:	4283      	cmp	r3, r0
   b6754:	bfb8      	it	lt
   b6756:	4603      	movlt	r3, r0
   b6758:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b675a:	4283      	cmp	r3, r0
   b675c:	bfa8      	it	ge
   b675e:	4603      	movge	r3, r0
   b6760:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   b6762:	3701      	adds	r7, #1
   b6764:	e7d4      	b.n	b6710 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   b6766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b676a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   b676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b676e:	6804      	ldr	r4, [r0, #0]
   b6770:	680b      	ldr	r3, [r1, #0]
   b6772:	429c      	cmp	r4, r3
   b6774:	b090      	sub	sp, #64	; 0x40
   b6776:	bfb8      	it	lt
   b6778:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b677a:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   b677c:	4680      	mov	r8, r0
   b677e:	460f      	mov	r7, r1
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   b6780:	2600      	movs	r6, #0
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b6782:	7013      	strb	r3, [r2, #0]
    Resize(shape_size);
   b6784:	4621      	mov	r1, r4
   b6786:	eb0d 0003 	add.w	r0, sp, r3
                                   tflite::ArithmeticParams* params) {
   b678a:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   b678c:	9601      	str	r6, [sp, #4]
    Resize(shape_size);
   b678e:	f7ff fe45 	bl	b641c <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   b6792:	42a6      	cmp	r6, r4
   b6794:	da06      	bge.n	b67a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x3a>
      SetDim(i, value);
   b6796:	4631      	mov	r1, r6
   b6798:	2201      	movs	r2, #1
   b679a:	a801      	add	r0, sp, #4
   b679c:	f7ff fe2d 	bl	b63fa <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
   b67a0:	3601      	adds	r6, #1
   b67a2:	e7f6      	b.n	b6792 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28>
    return RuntimeShape(new_shape_size, shape, 1);
   b67a4:	2301      	movs	r3, #1
   b67a6:	4642      	mov	r2, r8
   b67a8:	4621      	mov	r1, r4
   b67aa:	a806      	add	r0, sp, #24
   b67ac:	f7ff fe4e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b67b0:	2301      	movs	r3, #1
   b67b2:	463a      	mov	r2, r7
   b67b4:	4621      	mov	r1, r4
   b67b6:	a80b      	add	r0, sp, #44	; 0x2c
   b67b8:	f7ff fe48 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   b67bc:	9a06      	ldr	r2, [sp, #24]
   b67be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b67c0:	429a      	cmp	r2, r3
   b67c2:	d10f      	bne.n	b67e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b67c4:	2a04      	cmp	r2, #4
   b67c6:	bfcc      	ite	gt
   b67c8:	9807      	ldrgt	r0, [sp, #28]
   b67ca:	a807      	addle	r0, sp, #28
   b67cc:	2b04      	cmp	r3, #4
   b67ce:	bfcc      	ite	gt
   b67d0:	990c      	ldrgt	r1, [sp, #48]	; 0x30
   b67d2:	a90c      	addle	r1, sp, #48	; 0x30
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   b67d4:	0092      	lsls	r2, r2, #2
   b67d6:	f010 f9f5 	bl	c6bc4 <memcmp>
    return this->size_ == comp.size_ &&
   b67da:	b918      	cbnz	r0, b67e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7a>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   b67dc:	2301      	movs	r3, #1
   b67de:	702b      	strb	r3, [r5, #0]

  if (params->broadcast_category !=
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    return false;
   b67e0:	2400      	movs	r4, #0
   b67e2:	e03f      	b.n	b6864 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfa>
  for (int i = dims_count - 1; i >= 0; --i) {
   b67e4:	3c01      	subs	r4, #1
   b67e6:	4626      	mov	r6, r4
   b67e8:	2e00      	cmp	r6, #0
   b67ea:	db10      	blt.n	b680e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xa4>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   b67ec:	4631      	mov	r1, r6
   b67ee:	a806      	add	r0, sp, #24
   b67f0:	f7ff fdf2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b67f4:	4631      	mov	r1, r6
   b67f6:	4607      	mov	r7, r0
   b67f8:	a80b      	add	r0, sp, #44	; 0x2c
   b67fa:	f7ff fded 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b67fe:	4287      	cmp	r7, r0
   b6800:	d101      	bne.n	b6806 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x9c>
  for (int i = dims_count - 1; i >= 0; --i) {
   b6802:	3e01      	subs	r6, #1
   b6804:	e7f0      	b.n	b67e8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7e>
    } else if (extended_shape0.Dims(i) == 1) {
   b6806:	2f01      	cmp	r7, #1
   b6808:	d125      	bne.n	b6856 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xec>
      params->broadcast_category =
   b680a:	2302      	movs	r3, #2
      params->broadcast_category =
   b680c:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   b680e:	782b      	ldrb	r3, [r5, #0]
   b6810:	1e9a      	subs	r2, r3, #2
   b6812:	2a01      	cmp	r2, #1
   b6814:	d8e4      	bhi.n	b67e0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
   b6816:	2b03      	cmp	r3, #3
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
   b6818:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   b681c:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  params->broadcast_shape[2] = 1;
  params->broadcast_shape[3] = 1;
   b6820:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  const RuntimeShape* shape_a =
   b6824:	bf19      	ittee	ne
   b6826:	af06      	addne	r7, sp, #24
  const RuntimeShape* shape_b =
   b6828:	ae0b      	addne	r6, sp, #44	; 0x2c
  const RuntimeShape* shape_a =
   b682a:	af0b      	addeq	r7, sp, #44	; 0x2c
  const RuntimeShape* shape_b =
   b682c:	ae06      	addeq	r6, sp, #24
  params->broadcast_shape[4] = 1;
   b682e:	64eb      	str	r3, [r5, #76]	; 0x4c
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6830:	2c00      	cmp	r4, #0
   b6832:	db16      	blt.n	b6862 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
   b6834:	4621      	mov	r1, r4
   b6836:	4638      	mov	r0, r7
   b6838:	f7ff fdce 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b683c:	4621      	mov	r1, r4
   b683e:	4680      	mov	r8, r0
   b6840:	4630      	mov	r0, r6
   b6842:	f7ff fdc9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6846:	4580      	cmp	r8, r0
   b6848:	d119      	bne.n	b687e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x114>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   b684a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   b684c:	fb08 f000 	mul.w	r0, r8, r0
   b6850:	64e8      	str	r0, [r5, #76]	; 0x4c
    --i;
   b6852:	3c01      	subs	r4, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6854:	e7ec      	b.n	b6830 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
    } else if (extended_shape1.Dims(i) == 1) {
   b6856:	2801      	cmp	r0, #1
   b6858:	d101      	bne.n	b685e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
      params->broadcast_category =
   b685a:	2303      	movs	r3, #3
   b685c:	e7d6      	b.n	b680c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xa2>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b685e:	2304      	movs	r3, #4
   b6860:	702b      	strb	r3, [r5, #0]
  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
   b6862:	2401      	movs	r4, #1
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   b6864:	a80b      	add	r0, sp, #44	; 0x2c
   b6866:	f7ff fdac 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   b686a:	a806      	add	r0, sp, #24
   b686c:	f7ff fda9 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   b6870:	a801      	add	r0, sp, #4
   b6872:	f7ff fda6 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b6876:	4620      	mov	r0, r4
   b6878:	b010      	add	sp, #64	; 0x40
   b687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b687e:	4621      	mov	r1, r4
   b6880:	4638      	mov	r0, r7
   b6882:	f7ff fda9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6886:	2801      	cmp	r0, #1
   b6888:	d10a      	bne.n	b68a0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x136>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b688a:	4621      	mov	r1, r4
   b688c:	4630      	mov	r0, r6
   b688e:	f7ff fda3 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6892:	6cab      	ldr	r3, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b6894:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b6896:	fb03 f000 	mul.w	r0, r3, r0
   b689a:	64a8      	str	r0, [r5, #72]	; 0x48
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b689c:	d2ef      	bcs.n	b687e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x114>
   b689e:	e7e0      	b.n	b6862 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b68a0:	4621      	mov	r1, r4
   b68a2:	4638      	mov	r0, r7
   b68a4:	f7ff fd98 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68a8:	4621      	mov	r1, r4
   b68aa:	4680      	mov	r8, r0
   b68ac:	4630      	mov	r0, r6
   b68ae:	f7ff fd93 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68b2:	4580      	cmp	r8, r0
   b68b4:	d106      	bne.n	b68c4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15a>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b68b6:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b68b8:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b68ba:	fb08 f000 	mul.w	r0, r8, r0
   b68be:	6468      	str	r0, [r5, #68]	; 0x44
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b68c0:	d2ee      	bcs.n	b68a0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x136>
   b68c2:	e7ce      	b.n	b6862 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b68c4:	4621      	mov	r1, r4
   b68c6:	4630      	mov	r0, r6
   b68c8:	f7ff fd86 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68cc:	2801      	cmp	r0, #1
   b68ce:	d10a      	bne.n	b68e6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17c>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b68d0:	4621      	mov	r1, r4
   b68d2:	4638      	mov	r0, r7
   b68d4:	f7ff fd80 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b68da:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b68dc:	fb03 f000 	mul.w	r0, r3, r0
   b68e0:	6428      	str	r0, [r5, #64]	; 0x40
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b68e2:	d2ef      	bcs.n	b68c4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15a>
   b68e4:	e7bd      	b.n	b6862 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b68e6:	4621      	mov	r1, r4
   b68e8:	4638      	mov	r0, r7
   b68ea:	f7ff fd75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68ee:	4621      	mov	r1, r4
   b68f0:	4680      	mov	r8, r0
   b68f2:	4630      	mov	r0, r6
   b68f4:	f7ff fd70 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b68f8:	4580      	cmp	r8, r0
   b68fa:	d1b0      	bne.n	b685e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b68fc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b68fe:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b6900:	fb08 f000 	mul.w	r0, r8, r0
   b6904:	63e8      	str	r0, [r5, #60]	; 0x3c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b6906:	d2ee      	bcs.n	b68e6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17c>
   b6908:	e7ab      	b.n	b6862 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf8>

000b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   b690a:	b570      	push	{r4, r5, r6, lr}
   b690c:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   b690e:	b911      	cbnz	r1, b6916 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   b6910:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   b6912:	4620      	mov	r0, r4
   b6914:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   b6916:	688d      	ldr	r5, [r1, #8]
   b6918:	f855 6b04 	ldr.w	r6, [r5], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b691c:	2300      	movs	r3, #0
   b691e:	6003      	str	r3, [r0, #0]
    Resize(dimensions_count);
   b6920:	4631      	mov	r1, r6
   b6922:	f7ff fd7b 	bl	b641c <_ZN6tflite12RuntimeShape6ResizeEi>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b6926:	6823      	ldr	r3, [r4, #0]
   b6928:	2b04      	cmp	r3, #4
   b692a:	bfcc      	ite	gt
   b692c:	6860      	ldrgt	r0, [r4, #4]
   b692e:	1d20      	addle	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   b6930:	00b2      	lsls	r2, r6, #2
   b6932:	4629      	mov	r1, r5
   b6934:	f010 f956 	bl	c6be4 <memcpy>
  }
   b6938:	e7eb      	b.n	b6912 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
	...

000b693c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   b693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6940:	ed2d 8b06 	vpush	{d8-d10}
   b6944:	4688      	mov	r8, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   b6946:	4610      	mov	r0, r2
   b6948:	4619      	mov	r1, r3
                             OpData* data) {
   b694a:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
   b694e:	461e      	mov	r6, r3
   b6950:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   b6952:	f7fe fc63 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   b6956:	f080 0001 	eor.w	r0, r0, #1
   b695a:	7020      	strb	r0, [r4, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b695c:	782b      	ldrb	r3, [r5, #0]
   b695e:	2b03      	cmp	r3, #3
   b6960:	d001      	beq.n	b6966 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2a>
   b6962:	2b09      	cmp	r3, #9
   b6964:	d16c      	bne.n	b6a40 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x104>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
   b6966:	693b      	ldr	r3, [r7, #16]
   b6968:	425b      	negs	r3, r3
   b696a:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   b696c:	6933      	ldr	r3, [r6, #16]
   b696e:	425b      	negs	r3, r3
   b6970:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   b6972:	692b      	ldr	r3, [r5, #16]
   b6974:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   b6976:	2314      	movs	r3, #20
   b6978:	6263      	str	r3, [r4, #36]	; 0x24
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   b697a:	ed96 8a03 	vldr	s16, [r6, #12]
   b697e:	ed97 aa03 	vldr	s20, [r7, #12]
    const double twice_max_input_scale =
        2 * std::max(input1->params.scale, input2->params.scale);
   b6982:	eeb4 aac8 	vcmpe.f32	s20, s16
   b6986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b698a:	bf54      	ite	pl
   b698c:	eef0 7a4a 	vmovpl.f32	s15, s20
   b6990:	eef0 7a48 	vmovmi.f32	s15, s16
   b6994:	ee77 7aa7 	vadd.f32	s15, s15, s15
        input2->params.scale / twice_max_input_scale;
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * output->params.scale);

    QuantizeMultiplierSmallerThanOneExp(
   b6998:	f104 0a04 	add.w	sl, r4, #4
        2 * std::max(input1->params.scale, input2->params.scale);
   b699c:	ee17 0a90 	vmov	r0, s15
   b69a0:	f7fd fca2 	bl	b42e8 <__aeabi_f2d>
   b69a4:	4606      	mov	r6, r0
   b69a6:	460f      	mov	r7, r1
        input2->params.scale / twice_max_input_scale;
   b69a8:	ee18 0a10 	vmov	r0, s16
   b69ac:	f7fd fc9c 	bl	b42e8 <__aeabi_f2d>
    const double real_input2_multiplier =
   b69b0:	4632      	mov	r2, r6
   b69b2:	463b      	mov	r3, r7
   b69b4:	f7fd fe1a 	bl	b45ec <__aeabi_ddiv>
        ((1 << data->left_shift) * output->params.scale);
   b69b8:	ed95 7a03 	vldr	s14, [r5, #12]
   b69bc:	eddf 7a24 	vldr	s15, [pc, #144]	; b6a50 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x114>
   b69c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const double real_input2_multiplier =
   b69c4:	ec41 0b19 	vmov	d9, r0, r1
        ((1 << data->left_shift) * output->params.scale);
   b69c8:	ee17 0a90 	vmov	r0, s15
   b69cc:	f7fd fc8c 	bl	b42e8 <__aeabi_f2d>
   b69d0:	4602      	mov	r2, r0
   b69d2:	460b      	mov	r3, r1
    const double real_output_multiplier =
   b69d4:	4630      	mov	r0, r6
   b69d6:	4639      	mov	r1, r7
   b69d8:	f7fd fe08 	bl	b45ec <__aeabi_ddiv>
   b69dc:	ec41 0b18 	vmov	d8, r0, r1
        input1->params.scale / twice_max_input_scale;
   b69e0:	ee1a 0a10 	vmov	r0, s20
   b69e4:	f7fd fc80 	bl	b42e8 <__aeabi_f2d>
    const double real_input1_multiplier =
   b69e8:	4632      	mov	r2, r6
   b69ea:	463b      	mov	r3, r7
   b69ec:	f7fd fdfe 	bl	b45ec <__aeabi_ddiv>
    QuantizeMultiplierSmallerThanOneExp(
   b69f0:	f104 0914 	add.w	r9, r4, #20
    const double real_input1_multiplier =
   b69f4:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
   b69f8:	4651      	mov	r1, sl
   b69fa:	4648      	mov	r0, r9
   b69fc:	f7fe fc76 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   b6a00:	eeb0 0a49 	vmov.f32	s0, s18
   b6a04:	eef0 0a69 	vmov.f32	s1, s19
   b6a08:	f104 0108 	add.w	r1, r4, #8
   b6a0c:	f104 0018 	add.w	r0, r4, #24
   b6a10:	f7fe fc6c 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   b6a14:	eeb0 0a48 	vmov.f32	s0, s16
   b6a18:	eef0 0a68 	vmov.f32	s1, s17
   b6a1c:	f104 0120 	add.w	r1, r4, #32
   b6a20:	f104 001c 	add.w	r0, r4, #28
   b6a24:	f7fe fc62 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    if (output->type == kTfLiteUInt8) {
   b6a28:	7829      	ldrb	r1, [r5, #0]
   b6a2a:	f898 0000 	ldrb.w	r0, [r8]
   b6a2e:	2903      	cmp	r1, #3
      CalculateActivationRangeUint8(params->activation, output,
   b6a30:	f104 020c 	add.w	r2, r4, #12
   b6a34:	f104 0310 	add.w	r3, r4, #16
   b6a38:	4629      	mov	r1, r5
    if (output->type == kTfLiteUInt8) {
   b6a3a:	d106      	bne.n	b6a4a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x10e>
      CalculateActivationRangeUint8(params->activation, output,
   b6a3c:	f7fe fade 	bl	b4ffc <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
                                   &data->output_activation_max);
    }
  }

  return kTfLiteOk;
}
   b6a40:	ecbd 8b06 	vpop	{d8-d10}
   b6a44:	2000      	movs	r0, #0
   b6a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      CalculateActivationRangeInt8(params->activation, output,
   b6a4a:	f7fe fbdb 	bl	b5204 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
   b6a4e:	e7f7      	b.n	b6a40 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x104>
   b6a50:	49800000 	.word	0x49800000

000b6a54 <_ZN6tflite3ops5micro12Register_ADDEv>:
}  // namespace add

TfLiteRegistration* Register_ADD() {
  static TfLiteRegistration r = {add::Init, add::Free, add::Prepare, add::Eval};
  return &r;
}
   b6a54:	4800      	ldr	r0, [pc, #0]	; (b6a58 <_ZN6tflite3ops5micro12Register_ADDEv+0x4>)
   b6a56:	4770      	bx	lr
   b6a58:	2003c090 	.word	0x2003c090

000b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    }
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
   b6a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a60:	460c      	mov	r4, r1
   b6a62:	b08a      	sub	sp, #40	; 0x28
   b6a64:	461e      	mov	r6, r3
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
   b6a66:	4615      	mov	r5, r2
   b6a68:	b90a      	cbnz	r2, b6a6e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   b6a6a:	f00d ff17 	bl	c489c <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   b6a6e:	2b00      	cmp	r3, #0
   b6a70:	d0fb      	beq.n	b6a6a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   b6a72:	4602      	mov	r2, r0
   b6a74:	2301      	movs	r3, #1
   b6a76:	2104      	movs	r1, #4
   b6a78:	4668      	mov	r0, sp
   b6a7a:	f7ff fce7 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b6a7e:	4622      	mov	r2, r4
   b6a80:	2301      	movs	r3, #1
   b6a82:	2104      	movs	r1, #4
   b6a84:	a805      	add	r0, sp, #20
   b6a86:	f7ff fce1 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);

  // Copy dims to desc, calculating strides.
  int desc0_stride = 1;
  int desc1_stride = 1;
   b6a8a:	2701      	movs	r7, #1
   b6a8c:	f105 0a0c 	add.w	sl, r5, #12
   b6a90:	f106 080c 	add.w	r8, r6, #12
  for (int i = N - 1; i >= 0; --i) {
   b6a94:	2403      	movs	r4, #3
  int desc0_stride = 1;
   b6a96:	46b9      	mov	r9, r7
    desc0_out->extents[i] = extended_input0_shape.Dims(i);
   b6a98:	4621      	mov	r1, r4
   b6a9a:	4668      	mov	r0, sp
   b6a9c:	f7ff fc9c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6aa0:	f84a 0904 	str.w	r0, [sl], #-4
    desc0_out->strides[i] = desc0_stride;
    desc0_stride *= extended_input0_shape.Dims(i);
   b6aa4:	4621      	mov	r1, r4
    desc0_out->strides[i] = desc0_stride;
   b6aa6:	f8ca 9014 	str.w	r9, [sl, #20]
    desc0_stride *= extended_input0_shape.Dims(i);
   b6aaa:	4668      	mov	r0, sp
   b6aac:	f7ff fc94 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   b6ab0:	4621      	mov	r1, r4
    desc0_stride *= extended_input0_shape.Dims(i);
   b6ab2:	fb00 f909 	mul.w	r9, r0, r9
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   b6ab6:	a805      	add	r0, sp, #20
   b6ab8:	f7ff fc8e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6abc:	f848 0904 	str.w	r0, [r8], #-4
    desc1_out->strides[i] = desc1_stride;
    desc1_stride *= extended_input1_shape.Dims(i);
   b6ac0:	4621      	mov	r1, r4
    desc1_out->strides[i] = desc1_stride;
   b6ac2:	f8c8 7014 	str.w	r7, [r8, #20]
    desc1_stride *= extended_input1_shape.Dims(i);
   b6ac6:	a805      	add	r0, sp, #20
   b6ac8:	f7ff fc86 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   b6acc:	3c01      	subs	r4, #1
    desc1_stride *= extended_input1_shape.Dims(i);
   b6ace:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   b6ad2:	d2e1      	bcs.n	b6a98 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x3c>
  }

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
   b6ad4:	2400      	movs	r4, #0
   b6ad6:	46a0      	mov	r8, r4
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
   b6ad8:	f106 0910 	add.w	r9, r6, #16
    const int extent0 = extended_input0_shape.Dims(i);
   b6adc:	4621      	mov	r1, r4
   b6ade:	4668      	mov	r0, sp
   b6ae0:	f7ff fc7a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   b6ae4:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   b6ae6:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   b6ae8:	a805      	add	r0, sp, #20
   b6aea:	f7ff fc75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   b6aee:	4287      	cmp	r7, r0
   b6af0:	d004      	beq.n	b6afc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa0>
      if (extent0 == 1) {
   b6af2:	2f01      	cmp	r7, #1
   b6af4:	d110      	bne.n	b6b18 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xbc>
        desc0_out->strides[i] = 0;
   b6af6:	f8c5 8010 	str.w	r8, [r5, #16]
        desc0_out->extents[i] = extent1;
   b6afa:	6028      	str	r0, [r5, #0]
  for (int i = 0; i < N; ++i) {
   b6afc:	3401      	adds	r4, #1
   b6afe:	2c04      	cmp	r4, #4
   b6b00:	f105 0504 	add.w	r5, r5, #4
   b6b04:	d1ea      	bne.n	b6adc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x80>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   b6b06:	a805      	add	r0, sp, #20
   b6b08:	f7ff fc5b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   b6b0c:	4668      	mov	r0, sp
   b6b0e:	f7ff fc58 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        desc1_out->extents[i] = extent0;
      }
    }
  }
}
   b6b12:	b00a      	add	sp, #40	; 0x28
   b6b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   b6b18:	2801      	cmp	r0, #1
   b6b1a:	d1a6      	bne.n	b6a6a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   b6b1c:	f849 8024 	str.w	r8, [r9, r4, lsl #2]
        desc1_out->extents[i] = extent0;
   b6b20:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   b6b24:	e7ea      	b.n	b6afc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa0>

000b6b26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   b6b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b2a:	ed2d 8b02 	vpush	{d8}
   b6b2e:	b099      	sub	sp, #100	; 0x64
   b6b30:	4683      	mov	fp, r0
   b6b32:	4616      	mov	r6, r2
   b6b34:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6b36:	aa08      	add	r2, sp, #32
                               float* output_data) {
   b6b38:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6b3a:	ab10      	add	r3, sp, #64	; 0x40
   b6b3c:	f7ff ff8e 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   b6b40:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6b42:	2301      	movs	r3, #1
   b6b44:	2104      	movs	r1, #4
   b6b46:	a803      	add	r0, sp, #12
   b6b48:	f7ff fc80 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6b4c:	2400      	movs	r4, #0
   b6b4e:	2100      	movs	r1, #0
   b6b50:	a803      	add	r0, sp, #12
   b6b52:	f7ff fc41 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6b56:	42a0      	cmp	r0, r4
   b6b58:	dd5b      	ble.n	b6c12 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6b5a:	2500      	movs	r5, #0
   b6b5c:	f10d 080c 	add.w	r8, sp, #12
   b6b60:	2101      	movs	r1, #1
   b6b62:	4640      	mov	r0, r8
   b6b64:	f7ff fc38 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6b68:	42a8      	cmp	r0, r5
   b6b6a:	dd50      	ble.n	b6c0e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6b6c:	2700      	movs	r7, #0
   b6b6e:	2102      	movs	r1, #2
   b6b70:	4640      	mov	r0, r8
   b6b72:	f7ff fc31 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6b76:	42b8      	cmp	r0, r7
   b6b78:	dd47      	ble.n	b6c0a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6b7a:	f04f 0900 	mov.w	r9, #0
   b6b7e:	2103      	movs	r1, #3
   b6b80:	4640      	mov	r0, r8
   b6b82:	f7ff fc29 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6b86:	4548      	cmp	r0, r9
   b6b88:	dd3d      	ble.n	b6c06 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe0>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6b8a:	f8cd 9000 	str.w	r9, [sp]
   b6b8e:	463b      	mov	r3, r7
   b6b90:	462a      	mov	r2, r5
   b6b92:	4621      	mov	r1, r4
   b6b94:	a808      	add	r0, sp, #32
   b6b96:	f7ff fd2f 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6b9a:	f8cd 9000 	str.w	r9, [sp]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6b9e:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6ba0:	463b      	mov	r3, r7
   b6ba2:	462a      	mov	r2, r5
   b6ba4:	4621      	mov	r1, r4
   b6ba6:	a810      	add	r0, sp, #64	; 0x40
   b6ba8:	f7ff fd26 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6bac:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  params.float_activation_min, params.float_activation_max);
   b6bae:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   b6bb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   b6bb6:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
              ActivationFunctionWithMinMax(
   b6bba:	ed90 7a00 	vldr	s14, [r0]
   b6bbe:	edda 7a00 	vldr	s15, [sl]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6bc2:	f8cd 9000 	str.w	r9, [sp]
              ActivationFunctionWithMinMax(
   b6bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
                  params.float_activation_min, params.float_activation_max);
   b6bca:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
	return __b;
      return __a;
   b6bce:	eef4 7ac8 	vcmpe.f32	s15, s16
   b6bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6bd6:	bf58      	it	pl
   b6bd8:	eeb0 8a67 	vmovpl.f32	s16, s15
	return __b;
   b6bdc:	eeb4 7a48 	vcmp.f32	s14, s16
   b6be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6be4:	463b      	mov	r3, r7
   b6be6:	462a      	mov	r2, r5
   b6be8:	4621      	mov	r1, r4
   b6bea:	4640      	mov	r0, r8
   b6bec:	bf48      	it	mi
   b6bee:	eeb0 8a47 	vmovmi.f32	s16, s14
   b6bf2:	f7ff fc58 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b6bf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b6bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6bfc:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6c00:	f109 0901 	add.w	r9, r9, #1
   b6c04:	e7bb      	b.n	b6b7e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x58>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6c06:	3701      	adds	r7, #1
   b6c08:	e7b1      	b.n	b6b6e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x48>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6c0a:	3501      	adds	r5, #1
   b6c0c:	e7a6      	b.n	b6b5c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6c0e:	3401      	adds	r4, #1
   b6c10:	e79d      	b.n	b6b4e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6c12:	a803      	add	r0, sp, #12
   b6c14:	f7ff fbd5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   b6c18:	b019      	add	sp, #100	; 0x64
   b6c1a:	ecbd 8b02 	vpop	{d8}
   b6c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b6c24 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   b6c24:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   b6c26:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   b6c28:	b0a9      	sub	sp, #164	; 0xa4
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   b6c2a:	2a01      	cmp	r2, #1
   b6c2c:	e9dd 652e 	ldrd	r6, r5, [sp, #184]	; 0xb8
   b6c30:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   b6c32:	d03d      	beq.n	b6cb0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   b6c34:	2a03      	cmp	r2, #3
   b6c36:	d040      	beq.n	b6cba <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x96>
  } else if (activation == kTfLiteActRelu1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   b6c38:	ed9f 7a3b 	vldr	s14, [pc, #236]	; b6d28 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
   b6c3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; b6d2c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
   b6c40:	2a02      	cmp	r2, #2
   b6c42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6c46:	bf18      	it	ne
   b6c48:	eef0 7a47 	vmovne.f32	s15, s14
   b6c4c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b6c50:	bf18      	it	ne
   b6c52:	eeb0 7a66 	vmovne.f32	s14, s13
  if (data->requires_broadcast) {
   b6c56:	781b      	ldrb	r3, [r3, #0]
  int output_shift;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
   b6c58:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
  params->float_activation_max = max;
   b6c5c:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
   b6c60:	af0f      	add	r7, sp, #60	; 0x3c
    TF_LITE_ADD(BroadcastAdd4DSlow);
   b6c62:	4631      	mov	r1, r6
   b6c64:	a805      	add	r0, sp, #20
  if (data->requires_broadcast) {
   b6c66:	b35b      	cbz	r3, b6cc0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x9c>
    TF_LITE_ADD(BroadcastAdd4DSlow);
   b6c68:	f7ff fe4f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6c6c:	b106      	cbz	r6, b6c70 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x4c>
   b6c6e:	6876      	ldr	r6, [r6, #4]
   b6c70:	4629      	mov	r1, r5
   b6c72:	a80a      	add	r0, sp, #40	; 0x28
   b6c74:	f7ff fe49 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6c78:	b105      	cbz	r5, b6c7c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x58>
   b6c7a:	686d      	ldr	r5, [r5, #4]
   b6c7c:	4621      	mov	r1, r4
   b6c7e:	4638      	mov	r0, r7
   b6c80:	f7ff fe43 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b6c84:	b104      	cbz	r4, b6c88 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x64>
   b6c86:	6864      	ldr	r4, [r4, #4]
   b6c88:	9500      	str	r5, [sp, #0]
   b6c8a:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b6c8e:	ab0a      	add	r3, sp, #40	; 0x28
   b6c90:	4632      	mov	r2, r6
   b6c92:	a905      	add	r1, sp, #20
   b6c94:	a814      	add	r0, sp, #80	; 0x50
   b6c96:	f7ff ff46 	bl	b6b26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
   b6c9a:	4638      	mov	r0, r7
   b6c9c:	f7ff fb91 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b6ca0:	a80a      	add	r0, sp, #40	; 0x28
   b6ca2:	f7ff fb8e 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b6ca6:	a805      	add	r0, sp, #20
   b6ca8:	f7ff fb8b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b6cac:	b029      	add	sp, #164	; 0xa4
   b6cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
   b6cb0:	eddf 7a1d 	vldr	s15, [pc, #116]	; b6d28 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
    *activation_min = 0;
   b6cb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; b6d30 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10c>
   b6cb8:	e7cd      	b.n	b6c56 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x32>
    *activation_max = 6;
   b6cba:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b6cbe:	e7f9      	b.n	b6cb4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x90>
    TF_LITE_ADD(Add);
   b6cc0:	f7ff fe23 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6cc4:	b106      	cbz	r6, b6cc8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa4>
   b6cc6:	6876      	ldr	r6, [r6, #4]
   b6cc8:	4629      	mov	r1, r5
   b6cca:	a80a      	add	r0, sp, #40	; 0x28
   b6ccc:	f7ff fe1d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6cd0:	b105      	cbz	r5, b6cd4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb0>
   b6cd2:	686d      	ldr	r5, [r5, #4]
   b6cd4:	4621      	mov	r1, r4
   b6cd6:	4638      	mov	r0, r7
   b6cd8:	f7ff fe17 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b6cdc:	b104      	cbz	r4, b6ce0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xbc>
   b6cde:	6864      	ldr	r4, [r4, #4]
  const int size = MatchingFlatSize(input1_shape, input2_shape, output_shape);
   b6ce0:	463a      	mov	r2, r7
   b6ce2:	a90a      	add	r1, sp, #40	; 0x28
   b6ce4:	a805      	add	r0, sp, #20
   b6ce6:	f7ff fc00 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < size; i++) {
   b6cea:	2300      	movs	r3, #0
   b6cec:	4298      	cmp	r0, r3
   b6cee:	ddd4      	ble.n	b6c9a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x76>
    auto x = input1_data[i] + input2_data[i];
   b6cf0:	ecf5 7a01 	vldmia	r5!, {s15}
   b6cf4:	ecb6 7a01 	vldmia	r6!, {s14}
        x, params.float_activation_min, params.float_activation_max);
   b6cf8:	eddd 6a22 	vldr	s13, [sp, #136]	; 0x88
    auto x = input1_data[i] + input2_data[i];
   b6cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
        x, params.float_activation_min, params.float_activation_max);
   b6d00:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
      return __a;
   b6d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6d0c:	bf58      	it	pl
   b6d0e:	eef0 7a47 	vmovpl.f32	s15, s14
	return __b;
   b6d12:	eef4 6a67 	vcmp.f32	s13, s15
   b6d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6d1a:	bf48      	it	mi
   b6d1c:	eef0 7a66 	vmovmi.f32	s15, s13
    output_data[i] = ActivationFunctionWithMinMax(
   b6d20:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < size; i++) {
   b6d24:	3301      	adds	r3, #1
   b6d26:	e7e1      	b.n	b6cec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
   b6d28:	7f7fffff 	.word	0x7f7fffff
   b6d2c:	ff7fffff 	.word	0xff7fffff
   b6d30:	00000000 	.word	0x00000000

000b6d34 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   b6d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d38:	b09b      	sub	sp, #108	; 0x6c
   b6d3a:	4604      	mov	r4, r0
   b6d3c:	4693      	mov	fp, r2
   b6d3e:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6d40:	aa0a      	add	r2, sp, #40	; 0x28
                               int8_t* output_data) {
   b6d42:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6d44:	ab12      	add	r3, sp, #72	; 0x48
   b6d46:	f7ff fe89 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   b6d4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6d4c:	2301      	movs	r3, #1
   b6d4e:	2104      	movs	r1, #4
   b6d50:	a805      	add	r0, sp, #20
   b6d52:	f7ff fb7b 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6d56:	2600      	movs	r6, #0
   b6d58:	2100      	movs	r1, #0
   b6d5a:	a805      	add	r0, sp, #20
   b6d5c:	f7ff fb3c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d60:	42b0      	cmp	r0, r6
   b6d62:	dd66      	ble.n	b6e32 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfe>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6d64:	2700      	movs	r7, #0
   b6d66:	f10d 0914 	add.w	r9, sp, #20
   b6d6a:	2101      	movs	r1, #1
   b6d6c:	4648      	mov	r0, r9
   b6d6e:	f7ff fb33 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d72:	42b8      	cmp	r0, r7
   b6d74:	dd5b      	ble.n	b6e2e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfa>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6d76:	f04f 0800 	mov.w	r8, #0
   b6d7a:	2102      	movs	r1, #2
   b6d7c:	4648      	mov	r0, r9
   b6d7e:	f7ff fb2b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d82:	4540      	cmp	r0, r8
   b6d84:	dd51      	ble.n	b6e2a <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6d86:	f04f 0a00 	mov.w	sl, #0
   b6d8a:	2103      	movs	r1, #3
   b6d8c:	4648      	mov	r0, r9
   b6d8e:	f7ff fb23 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6d92:	4550      	cmp	r0, sl
   b6d94:	dd46      	ble.n	b6e24 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf0>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6d96:	f8cd a000 	str.w	sl, [sp]
   b6d9a:	4643      	mov	r3, r8
   b6d9c:	463a      	mov	r2, r7
   b6d9e:	4631      	mov	r1, r6
   b6da0:	a80a      	add	r0, sp, #40	; 0x28
   b6da2:	f7ff fc29 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6da6:	6863      	ldr	r3, [r4, #4]
   b6da8:	f91b 5000 	ldrsb.w	r5, [fp, r0]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6dac:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6db0:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6db2:	463a      	mov	r2, r7
   b6db4:	4643      	mov	r3, r8
   b6db6:	4631      	mov	r1, r6
   b6db8:	a812      	add	r0, sp, #72	; 0x48
   b6dba:	f7ff fc1d 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6dbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6dc0:	68a2      	ldr	r2, [r4, #8]
   b6dc2:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   b6dc4:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6dc8:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   b6dca:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6dce:	fa05 f00c 	lsl.w	r0, r5, ip
   b6dd2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   b6dd6:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6dd8:	f7ff fbc4 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6ddc:	9b03      	ldr	r3, [sp, #12]
   b6dde:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6de2:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6de4:	4618      	mov	r0, r3
   b6de6:	f7ff fbbd 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6dea:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6dee:	4428      	add	r0, r5
   b6df0:	f7ff fbb8 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  raw_sum, params.output_multiplier, params.output_shift) +
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6df4:	f8cd a000 	str.w	sl, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6df8:	4605      	mov	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6dfa:	4643      	mov	r3, r8
   b6dfc:	463a      	mov	r2, r7
   b6dfe:	4631      	mov	r1, r6
   b6e00:	4648      	mov	r0, r9
   b6e02:	f7ff fb50 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   b6e06:	68e3      	ldr	r3, [r4, #12]
   b6e08:	441d      	add	r5, r3
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6e0c:	429d      	cmp	r5, r3
   b6e0e:	bfb8      	it	lt
   b6e10:	461d      	movlt	r5, r3
   b6e12:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6e14:	429d      	cmp	r5, r3
   b6e16:	bfa8      	it	ge
   b6e18:	461d      	movge	r5, r3
   b6e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6e1c:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6e20:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6e22:	e7b2      	b.n	b6d8a <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x56>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6e24:	f108 0801 	add.w	r8, r8, #1
   b6e28:	e7a7      	b.n	b6d7a <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6e2a:	3701      	adds	r7, #1
   b6e2c:	e79b      	b.n	b6d66 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x32>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6e2e:	3601      	adds	r6, #1
   b6e30:	e792      	b.n	b6d58 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x24>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6e32:	a805      	add	r0, sp, #20
   b6e34:	f7ff fac5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   b6e38:	b01b      	add	sp, #108	; 0x6c
   b6e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6e3e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   b6e3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e42:	b09b      	sub	sp, #108	; 0x6c
   b6e44:	4604      	mov	r4, r0
   b6e46:	4693      	mov	fp, r2
   b6e48:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6e4a:	aa0a      	add	r2, sp, #40	; 0x28
                               uint8* output_data) {
   b6e4c:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   b6e4e:	ab12      	add	r3, sp, #72	; 0x48
   b6e50:	f7ff fe04 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   b6e54:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6e56:	2301      	movs	r3, #1
   b6e58:	2104      	movs	r1, #4
   b6e5a:	a805      	add	r0, sp, #20
   b6e5c:	f7ff faf6 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6e60:	2600      	movs	r6, #0
   b6e62:	2100      	movs	r1, #0
   b6e64:	a805      	add	r0, sp, #20
   b6e66:	f7ff fab7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e6a:	42b0      	cmp	r0, r6
   b6e6c:	dd66      	ble.n	b6f3c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfe>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6e6e:	2700      	movs	r7, #0
   b6e70:	f10d 0914 	add.w	r9, sp, #20
   b6e74:	2101      	movs	r1, #1
   b6e76:	4648      	mov	r0, r9
   b6e78:	f7ff faae 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e7c:	42b8      	cmp	r0, r7
   b6e7e:	dd5b      	ble.n	b6f38 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfa>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6e80:	f04f 0800 	mov.w	r8, #0
   b6e84:	2102      	movs	r1, #2
   b6e86:	4648      	mov	r0, r9
   b6e88:	f7ff faa6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e8c:	4540      	cmp	r0, r8
   b6e8e:	dd51      	ble.n	b6f34 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6e90:	f04f 0a00 	mov.w	sl, #0
   b6e94:	2103      	movs	r1, #3
   b6e96:	4648      	mov	r0, r9
   b6e98:	f7ff fa9e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b6e9c:	4550      	cmp	r0, sl
   b6e9e:	dd46      	ble.n	b6f2e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf0>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6ea0:	f8cd a000 	str.w	sl, [sp]
   b6ea4:	4643      	mov	r3, r8
   b6ea6:	463a      	mov	r2, r7
   b6ea8:	4631      	mov	r1, r6
   b6eaa:	a80a      	add	r0, sp, #40	; 0x28
   b6eac:	f7ff fba4 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6eb0:	6863      	ldr	r3, [r4, #4]
   b6eb2:	f81b 5000 	ldrb.w	r5, [fp, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6eb6:	f8cd a000 	str.w	sl, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   b6eba:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6ebc:	463a      	mov	r2, r7
   b6ebe:	4643      	mov	r3, r8
   b6ec0:	4631      	mov	r1, r6
   b6ec2:	a812      	add	r0, sp, #72	; 0x48
   b6ec4:	f7ff fb98 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   b6ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6eca:	68a2      	ldr	r2, [r4, #8]
   b6ecc:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   b6ece:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   b6ed2:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   b6ed4:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6ed8:	fa05 f00c 	lsl.w	r0, r5, ip
   b6edc:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   b6ee0:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6ee2:	f7ff fb3f 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6ee6:	9b03      	ldr	r3, [sp, #12]
   b6ee8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6eec:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6eee:	4618      	mov	r0, r3
   b6ef0:	f7ff fb38 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6ef4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   b6ef8:	4428      	add	r0, r5
   b6efa:	f7ff fb33 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  raw_sum, params.output_multiplier, params.output_shift) +
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6efe:	f8cd a000 	str.w	sl, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   b6f02:	4605      	mov	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6f04:	4643      	mov	r3, r8
   b6f06:	463a      	mov	r2, r7
   b6f08:	4631      	mov	r1, r6
   b6f0a:	4648      	mov	r0, r9
   b6f0c:	f7ff facb 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   b6f10:	68e3      	ldr	r3, [r4, #12]
   b6f12:	441d      	add	r5, r3
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6f16:	429d      	cmp	r5, r3
   b6f18:	bfb8      	it	lt
   b6f1a:	461d      	movlt	r5, r3
   b6f1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6f1e:	429d      	cmp	r5, r3
   b6f20:	bfa8      	it	ge
   b6f22:	461d      	movge	r5, r3
   b6f24:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6f26:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   b6f2a:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   b6f2c:	e7b2      	b.n	b6e94 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x56>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   b6f2e:	f108 0801 	add.w	r8, r8, #1
   b6f32:	e7a7      	b.n	b6e84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   b6f34:	3701      	adds	r7, #1
   b6f36:	e79b      	b.n	b6e70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x32>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   b6f38:	3601      	adds	r6, #1
   b6f3a:	e792      	b.n	b6e62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x24>
      RuntimeShape::ExtendedShape(4, output_shape);
   b6f3c:	a805      	add	r0, sp, #20
   b6f3e:	f7ff fa40 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   b6f42:	b01b      	add	sp, #108	; 0x6c
   b6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6f48 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f4a:	b0a9      	sub	sp, #164	; 0xa4
   b6f4c:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   b6f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6f50:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.input1_offset = data->input1_offset;
   b6f52:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b6f54:	9315      	str	r3, [sp, #84]	; 0x54
    op_params.input1_multiplier = data->input1_multiplier;
   b6f56:	6943      	ldr	r3, [r0, #20]
   b6f58:	931b      	str	r3, [sp, #108]	; 0x6c
    op_params.input1_shift = data->input1_shift;
   b6f5a:	6843      	ldr	r3, [r0, #4]
   b6f5c:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input2_offset = data->input2_offset;
   b6f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6f60:	9316      	str	r3, [sp, #88]	; 0x58
    op_params.input2_multiplier = data->input2_multiplier;
   b6f62:	6983      	ldr	r3, [r0, #24]
   b6f64:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input2_shift = data->input2_shift;
   b6f66:	6883      	ldr	r3, [r0, #8]
   b6f68:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.output_offset = data->output_offset;
   b6f6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   b6f6c:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.output_multiplier = data->output_multiplier;
   b6f6e:	69c3      	ldr	r3, [r0, #28]
   b6f70:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.output_shift = data->output_shift;
   b6f72:	6a03      	ldr	r3, [r0, #32]
   b6f74:	9319      	str	r3, [sp, #100]	; 0x64
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6f76:	4614      	mov	r4, r2
}

template <typename P>
inline void SetActivationParams(int32 min, int32 max, P* params) {
  params->quantized_activation_min = min;
   b6f78:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6f7c:	a80f      	add	r0, sp, #60	; 0x3c
  params->quantized_activation_max = max;
   b6f7e:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   b6f82:	460d      	mov	r5, r1
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6f84:	f7ff fcc1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6f88:	4621      	mov	r1, r4
   b6f8a:	a80a      	add	r0, sp, #40	; 0x28
   b6f8c:	f7ff fcbd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   b6f90:	a90a      	add	r1, sp, #40	; 0x28
   b6f92:	aa14      	add	r2, sp, #80	; 0x50
   b6f94:	a80f      	add	r0, sp, #60	; 0x3c
   b6f96:	f7ff fbe8 	bl	b676a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   b6f9a:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   b6f9c:	a80a      	add	r0, sp, #40	; 0x28
   b6f9e:	f7ff fa10 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b6fa2:	a80f      	add	r0, sp, #60	; 0x3c
   b6fa4:	f7ff fa0d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   b6fa8:	7833      	ldrb	r3, [r6, #0]
   b6faa:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   b6fac:	4629      	mov	r1, r5
   b6fae:	a80f      	add	r0, sp, #60	; 0x3c
    if (output->type == kTfLiteInt8) {
   b6fb0:	d13e      	bne.n	b7030 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   b6fb2:	b31f      	cbz	r7, b6ffc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   b6fb4:	f7ff fca9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b6fb8:	b105      	cbz	r5, b6fbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   b6fba:	686d      	ldr	r5, [r5, #4]
   b6fbc:	4621      	mov	r1, r4
   b6fbe:	a80a      	add	r0, sp, #40	; 0x28
   b6fc0:	f7ff fca3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fc4:	b104      	cbz	r4, b6fc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   b6fc6:	6864      	ldr	r4, [r4, #4]
   b6fc8:	4631      	mov	r1, r6
   b6fca:	a805      	add	r0, sp, #20
   b6fcc:	f7ff fc9d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b6fd0:	6873      	ldr	r3, [r6, #4]
   b6fd2:	9302      	str	r3, [sp, #8]
   b6fd4:	ab05      	add	r3, sp, #20
   b6fd6:	e9cd 4300 	strd	r4, r3, [sp]
   b6fda:	462a      	mov	r2, r5
   b6fdc:	ab0a      	add	r3, sp, #40	; 0x28
   b6fde:	a90f      	add	r1, sp, #60	; 0x3c
   b6fe0:	a814      	add	r0, sp, #80	; 0x50
   b6fe2:	f7ff fea7 	bl	b6d34 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   b6fe6:	a805      	add	r0, sp, #20
   b6fe8:	f7ff f9eb 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b6fec:	a80a      	add	r0, sp, #40	; 0x28
   b6fee:	f7ff f9e8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b6ff2:	a80f      	add	r0, sp, #60	; 0x3c
   b6ff4:	f7ff f9e5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b6ff8:	b029      	add	sp, #164	; 0xa4
   b6ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   b6ffc:	f7ff fc85 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7000:	b105      	cbz	r5, b7004 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   b7002:	686d      	ldr	r5, [r5, #4]
   b7004:	4621      	mov	r1, r4
   b7006:	a80a      	add	r0, sp, #40	; 0x28
   b7008:	f7ff fc7f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b700c:	b104      	cbz	r4, b7010 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   b700e:	6864      	ldr	r4, [r4, #4]
   b7010:	4631      	mov	r1, r6
   b7012:	a805      	add	r0, sp, #20
   b7014:	f7ff fc79 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7018:	6873      	ldr	r3, [r6, #4]
   b701a:	9302      	str	r3, [sp, #8]
   b701c:	ab05      	add	r3, sp, #20
   b701e:	e9cd 4300 	strd	r4, r3, [sp]
   b7022:	462a      	mov	r2, r5
   b7024:	ab0a      	add	r3, sp, #40	; 0x28
   b7026:	a90f      	add	r1, sp, #60	; 0x3c
   b7028:	a814      	add	r0, sp, #80	; 0x50
   b702a:	f7ff fb54 	bl	b66d6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   b702e:	e7da      	b.n	b6fe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   b7030:	b1cf      	cbz	r7, b7066 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   b7032:	f7ff fc6a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7036:	b105      	cbz	r5, b703a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   b7038:	686d      	ldr	r5, [r5, #4]
   b703a:	4621      	mov	r1, r4
   b703c:	a80a      	add	r0, sp, #40	; 0x28
   b703e:	f7ff fc64 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7042:	b104      	cbz	r4, b7046 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   b7044:	6864      	ldr	r4, [r4, #4]
   b7046:	4631      	mov	r1, r6
   b7048:	a805      	add	r0, sp, #20
   b704a:	f7ff fc5e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b704e:	6873      	ldr	r3, [r6, #4]
   b7050:	9302      	str	r3, [sp, #8]
   b7052:	ab05      	add	r3, sp, #20
   b7054:	e9cd 4300 	strd	r4, r3, [sp]
   b7058:	462a      	mov	r2, r5
   b705a:	ab0a      	add	r3, sp, #40	; 0x28
   b705c:	a90f      	add	r1, sp, #60	; 0x3c
   b705e:	a814      	add	r0, sp, #80	; 0x50
   b7060:	f7ff feed 	bl	b6e3e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   b7064:	e7bf      	b.n	b6fe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   b7066:	f7ff fc50 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b706a:	b105      	cbz	r5, b706e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   b706c:	686d      	ldr	r5, [r5, #4]
   b706e:	4621      	mov	r1, r4
   b7070:	a80a      	add	r0, sp, #40	; 0x28
   b7072:	f7ff fc4a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7076:	b104      	cbz	r4, b707a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   b7078:	6864      	ldr	r4, [r4, #4]
   b707a:	4631      	mov	r1, r6
   b707c:	a805      	add	r0, sp, #20
   b707e:	f7ff fc44 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b7082:	6873      	ldr	r3, [r6, #4]
   b7084:	9302      	str	r3, [sp, #8]
   b7086:	ab05      	add	r3, sp, #20
   b7088:	e9cd 4300 	strd	r4, r3, [sp]
   b708c:	462a      	mov	r2, r5
   b708e:	ab0a      	add	r3, sp, #40	; 0x28
   b7090:	a90f      	add	r1, sp, #60	; 0x3c
   b7092:	a814      	add	r0, sp, #80	; 0x50
   b7094:	f7ff fad4 	bl	b6640 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   b7098:	e7a5      	b.n	b6fe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

000b709a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   b709a:	b508      	push	{r3, lr}
   b709c:	4618      	mov	r0, r3
   b709e:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b70a0:	781a      	ldrb	r2, [r3, #0]
   b70a2:	2a03      	cmp	r2, #3
   b70a4:	d001      	beq.n	b70aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   b70a6:	2a09      	cmp	r2, #9
   b70a8:	d103      	bne.n	b70b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   b70aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   b70ae:	f7ff ff4b 	bl	b6f48 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   b70b2:	2000      	movs	r0, #0
   b70b4:	bd08      	pop	{r3, pc}
	...

000b70b8 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b70b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70bc:	460e      	mov	r6, r1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b70be:	f8d0 9008 	ldr.w	r9, [r0, #8]
   b70c2:	6833      	ldr	r3, [r6, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   b70c4:	6949      	ldr	r1, [r1, #20]
   b70c6:	685f      	ldr	r7, [r3, #4]
   b70c8:	689b      	ldr	r3, [r3, #8]
   b70ca:	2238      	movs	r2, #56	; 0x38
   b70cc:	fb02 9803 	mla	r8, r2, r3, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b70d0:	6873      	ldr	r3, [r6, #4]
   b70d2:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b70d4:	b095      	sub	sp, #84	; 0x54
   b70d6:	4353      	muls	r3, r2
   b70d8:	eb09 0b03 	add.w	fp, r9, r3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b70dc:	fb02 9707 	mla	r7, r2, r7, r9
  TF_LITE_ENSURE_STATUS(
   b70e0:	f10d 0a1c 	add.w	sl, sp, #28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b70e4:	9304      	str	r3, [sp, #16]
   b70e6:	e9cd ba00 	strd	fp, sl, [sp]
   b70ea:	4643      	mov	r3, r8
   b70ec:	463a      	mov	r2, r7
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b70ee:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   b70f0:	9105      	str	r1, [sp, #20]
   b70f2:	f7ff fc23 	bl	b693c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   b70f6:	4604      	mov	r4, r0
   b70f8:	bb38      	cbnz	r0, b714a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  if (output->type == kTfLiteFloat32) {
   b70fa:	9b04      	ldr	r3, [sp, #16]
   b70fc:	9905      	ldr	r1, [sp, #20]
   b70fe:	f819 3003 	ldrb.w	r3, [r9, r3]
   b7102:	2b01      	cmp	r3, #1
   b7104:	d10c      	bne.n	b7120 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
   b7106:	460a      	mov	r2, r1
   b7108:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   b710c:	9700      	str	r7, [sp, #0]
   b710e:	4653      	mov	r3, sl
   b7110:	4631      	mov	r1, r6
   b7112:	4628      	mov	r0, r5
   b7114:	f7ff fd86 	bl	b6c24 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   b7118:	4620      	mov	r0, r4
   b711a:	b015      	add	sp, #84	; 0x54
   b711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   b7120:	2b03      	cmp	r3, #3
   b7122:	d001      	beq.n	b7128 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b7124:	2b09      	cmp	r3, #9
   b7126:	d10c      	bne.n	b7142 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
   b7128:	460a      	mov	r2, r1
   b712a:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   b712e:	9700      	str	r7, [sp, #0]
   b7130:	4653      	mov	r3, sl
   b7132:	4631      	mov	r1, r6
   b7134:	4628      	mov	r0, r5
   b7136:	f7ff ffb0 	bl	b709a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
  TF_LITE_ENSURE_STATUS(
   b713a:	1e04      	subs	r4, r0, #0
   b713c:	bf18      	it	ne
   b713e:	2401      	movne	r4, #1
   b7140:	e7ea      	b.n	b7118 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    context->ReportError(context,
   b7142:	696b      	ldr	r3, [r5, #20]
   b7144:	4902      	ldr	r1, [pc, #8]	; (b7150 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x98>)
   b7146:	4628      	mov	r0, r5
   b7148:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
   b714a:	2401      	movs	r4, #1
   b714c:	e7e4      	b.n	b7118 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   b714e:	bf00      	nop
   b7150:	000c8218 	.word	0x000c8218

000b7154 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

constexpr int kInputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b7154:	2000      	movs	r0, #0
   b7156:	4770      	bx	lr

000b7158 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b7158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b715c:	680a      	ldr	r2, [r1, #0]
   b715e:	6885      	ldr	r5, [r0, #8]
  TfLiteUnpackParams* data =
   b7160:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b7162:	b085      	sub	sp, #20
   b7164:	9001      	str	r0, [sp, #4]
   b7166:	6850      	ldr	r0, [r2, #4]
   b7168:	2238      	movs	r2, #56	; 0x38
   b716a:	4350      	muls	r0, r2
   b716c:	182a      	adds	r2, r5, r0
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);

  switch (input->type) {
   b716e:	5c28      	ldrb	r0, [r5, r0]
   b7170:	1e46      	subs	r6, r0, #1
   b7172:	2e08      	cmp	r6, #8
   b7174:	f200 81bc 	bhi.w	b74f0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
   b7178:	e8df f016 	tbh	[pc, r6, lsl #1]
   b717c:	00780009 	.word	0x00780009
   b7180:	01ba00e2 	.word	0x01ba00e2
   b7184:	01ba01ba 	.word	0x01ba01ba
   b7188:	01ba01ba 	.word	0x01ba01ba
   b718c:	014e      	.short	0x014e
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   b718e:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b7192:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7194:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b7196:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b719a:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b719c:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b719e:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b71a0:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b71a4:	bfb8      	it	lt
   b71a6:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b71a8:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b71aa:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b71ac:	dd0c      	ble.n	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b71ae:	f106 0c04 	add.w	ip, r6, #4
   b71b2:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b71b4:	2000      	movs	r0, #0
  int outer_size = 1;
   b71b6:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b71b8:	4283      	cmp	r3, r0
   b71ba:	dd07      	ble.n	b71cc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74>
    outer_size *= input_dims->data[i];
   b71bc:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b71c0:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b71c2:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b71c6:	e7f7      	b.n	b71b8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
  TFLITE_DCHECK_LT(axis, dimensions);
   b71c8:	f00d fb68 	bl	c489c <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
   b71cc:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b71ce:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b71d0:	4586      	cmp	lr, r0
   b71d2:	d10c      	bne.n	b71ee <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_dims->size; ++i) {
   b71d4:	4638      	mov	r0, r7
  int output_size = 1;
   b71d6:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b71d8:	f850 eb04 	ldr.w	lr, [r0], #4
   b71dc:	2700      	movs	r7, #0
   b71de:	45be      	cmp	lr, r7
   b71e0:	dd0a      	ble.n	b71f8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
    output_size *= output_dims->data[i];
   b71e2:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b71e6:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b71e8:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b71ec:	e7f7      	b.n	b71de <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
    copy_size *= input_dims->data[i];
   b71ee:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b71f2:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b71f4:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b71f6:	e7eb      	b.n	b71d0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b71f8:	fb03 f006 	mul.w	r0, r3, r6
   b71fc:	4285      	cmp	r5, r0
   b71fe:	d1e3      	bne.n	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b7200:	6852      	ldr	r2, [r2, #4]
   b7202:	9202      	str	r2, [sp, #8]
   b7204:	2000      	movs	r0, #0
   b7206:	fb03 f209 	mul.w	r2, r3, r9
   b720a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
   b720c:	4605      	mov	r5, r0
   b720e:	45a9      	cmp	r9, r5
   b7210:	dc03      	bgt.n	b721a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   b7212:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   b7214:	b005      	add	sp, #20
   b7216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b721a:	684a      	ldr	r2, [r1, #4]
   b721c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b7220:	2438      	movs	r4, #56	; 0x38
   b7222:	6857      	ldr	r7, [r2, #4]
   b7224:	9a01      	ldr	r2, [sp, #4]
   b7226:	6892      	ldr	r2, [r2, #8]
   b7228:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b722c:	b102      	cbz	r2, b7230 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   b722e:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b7230:	2700      	movs	r7, #0
   b7232:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b7234:	46be      	mov	lr, r7
   b7236:	4576      	cmp	r6, lr
   b7238:	dd15      	ble.n	b7266 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10e>
   b723a:	9c02      	ldr	r4, [sp, #8]
   b723c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
   b7240:	eb04 0b8c 	add.w	fp, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b7244:	f04f 0800 	mov.w	r8, #0
   b7248:	4543      	cmp	r3, r8
   b724a:	dd06      	ble.n	b725a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
   b724c:	ecfb 7a01 	vldmia	fp!, {s15}
   b7250:	f108 0801 	add.w	r8, r8, #1
   b7254:	ecea 7a01 	vstmia	sl!, {s15}
   b7258:	e7f6      	b.n	b7248 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    for (int k = 0; k < outer_size; ++k) {
   b725a:	9c03      	ldr	r4, [sp, #12]
   b725c:	f10e 0e01 	add.w	lr, lr, #1
   b7260:	44a4      	add	ip, r4
   b7262:	441f      	add	r7, r3
   b7264:	e7e7      	b.n	b7236 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xde>
  for (int i = 0; i < output_count; ++i) {
   b7266:	3501      	adds	r5, #1
   b7268:	4418      	add	r0, r3
   b726a:	e7d0      	b.n	b720e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
   b726c:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b7270:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7272:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b7274:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7278:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b727a:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b727c:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b727e:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b7282:	bfb8      	it	lt
   b7284:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b7286:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b7288:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b728a:	dd9d      	ble.n	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b728c:	f106 0c04 	add.w	ip, r6, #4
   b7290:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b7292:	2000      	movs	r0, #0
  int outer_size = 1;
   b7294:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b7296:	4283      	cmp	r3, r0
   b7298:	dd05      	ble.n	b72a6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    outer_size *= input_dims->data[i];
   b729a:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b729e:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b72a0:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b72a4:	e7f7      	b.n	b7296 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
  for (int i = axis + 1; i < dimensions; ++i) {
   b72a6:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b72a8:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b72aa:	4586      	cmp	lr, r0
   b72ac:	d10c      	bne.n	b72c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>
  for (int i = 0; i < output_dims->size; ++i) {
   b72ae:	4638      	mov	r0, r7
  int output_size = 1;
   b72b0:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b72b2:	f850 eb04 	ldr.w	lr, [r0], #4
   b72b6:	2700      	movs	r7, #0
   b72b8:	45be      	cmp	lr, r7
   b72ba:	dd0a      	ble.n	b72d2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    output_size *= output_dims->data[i];
   b72bc:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b72c0:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b72c2:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b72c6:	e7f7      	b.n	b72b8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
    copy_size *= input_dims->data[i];
   b72c8:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b72cc:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b72ce:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b72d0:	e7eb      	b.n	b72aa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b72d2:	fb03 f006 	mul.w	r0, r3, r6
   b72d6:	4285      	cmp	r5, r0
   b72d8:	f47f af76 	bne.w	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b72dc:	6852      	ldr	r2, [r2, #4]
   b72de:	9203      	str	r2, [sp, #12]
   b72e0:	2000      	movs	r0, #0
   b72e2:	fb03 f20b 	mul.w	r2, r3, fp
   b72e6:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < output_count; ++i) {
   b72e8:	4605      	mov	r5, r0
   b72ea:	45ab      	cmp	fp, r5
   b72ec:	dd91      	ble.n	b7212 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b72ee:	684a      	ldr	r2, [r1, #4]
   b72f0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b72f4:	2438      	movs	r4, #56	; 0x38
   b72f6:	6857      	ldr	r7, [r2, #4]
   b72f8:	9a01      	ldr	r2, [sp, #4]
   b72fa:	6892      	ldr	r2, [r2, #8]
   b72fc:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7300:	b102      	cbz	r2, b7304 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   b7302:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b7304:	2700      	movs	r7, #0
   b7306:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b7308:	46be      	mov	lr, r7
   b730a:	4576      	cmp	r6, lr
   b730c:	dd15      	ble.n	b733a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   b730e:	9c03      	ldr	r4, [sp, #12]
   b7310:	eb02 0987 	add.w	r9, r2, r7, lsl #2
   b7314:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b7318:	f04f 0800 	mov.w	r8, #0
   b731c:	4543      	cmp	r3, r8
   b731e:	dd06      	ble.n	b732e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
   b7320:	f85a 4b04 	ldr.w	r4, [sl], #4
   b7324:	f849 4b04 	str.w	r4, [r9], #4
   b7328:	f108 0801 	add.w	r8, r8, #1
   b732c:	e7f6      	b.n	b731c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    for (int k = 0; k < outer_size; ++k) {
   b732e:	9c02      	ldr	r4, [sp, #8]
   b7330:	f10e 0e01 	add.w	lr, lr, #1
   b7334:	44a4      	add	ip, r4
   b7336:	441f      	add	r7, r3
   b7338:	e7e7      	b.n	b730a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b2>
  for (int i = 0; i < output_count; ++i) {
   b733a:	3501      	adds	r5, #1
   b733c:	4418      	add	r0, r3
   b733e:	e7d4      	b.n	b72ea <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
   b7340:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b7344:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7346:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   b7348:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b734c:	6840      	ldr	r0, [r0, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b734e:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b7350:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b7352:	fb07 5500 	mla	r5, r7, r0, r5
    axis += NumDimensions(input);
   b7356:	bfb8      	it	lt
   b7358:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b735a:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b735c:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b735e:	f77f af33 	ble.w	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b7362:	f106 0c04 	add.w	ip, r6, #4
   b7366:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b7368:	2000      	movs	r0, #0
  int outer_size = 1;
   b736a:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b736c:	4283      	cmp	r3, r0
   b736e:	dd05      	ble.n	b737c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    outer_size *= input_dims->data[i];
   b7370:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b7374:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b7376:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b737a:	e7f7      	b.n	b736c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
  for (int i = axis + 1; i < dimensions; ++i) {
   b737c:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b737e:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b7380:	4586      	cmp	lr, r0
   b7382:	d10c      	bne.n	b739e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
  for (int i = 0; i < output_dims->size; ++i) {
   b7384:	4638      	mov	r0, r7
  int output_size = 1;
   b7386:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b7388:	f850 eb04 	ldr.w	lr, [r0], #4
   b738c:	2700      	movs	r7, #0
   b738e:	45be      	cmp	lr, r7
   b7390:	dd0a      	ble.n	b73a8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
    output_size *= output_dims->data[i];
   b7392:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b7396:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b7398:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b739c:	e7f7      	b.n	b738e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
    copy_size *= input_dims->data[i];
   b739e:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b73a2:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b73a4:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b73a6:	e7eb      	b.n	b7380 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b73a8:	fb03 f006 	mul.w	r0, r3, r6
   b73ac:	4285      	cmp	r5, r0
   b73ae:	f47f af0b 	bne.w	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b73b2:	6852      	ldr	r2, [r2, #4]
   b73b4:	9202      	str	r2, [sp, #8]
   b73b6:	2000      	movs	r0, #0
   b73b8:	fb03 f20b 	mul.w	r2, r3, fp
   b73bc:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < output_count; ++i) {
   b73be:	4605      	mov	r5, r0
   b73c0:	45ab      	cmp	fp, r5
   b73c2:	f77f af26 	ble.w	b7212 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b73c6:	684a      	ldr	r2, [r1, #4]
   b73c8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b73cc:	2438      	movs	r4, #56	; 0x38
   b73ce:	6857      	ldr	r7, [r2, #4]
   b73d0:	9a01      	ldr	r2, [sp, #4]
   b73d2:	6892      	ldr	r2, [r2, #8]
   b73d4:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b73d8:	b102      	cbz	r2, b73dc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
   b73da:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b73dc:	2700      	movs	r7, #0
   b73de:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b73e0:	46be      	mov	lr, r7
   b73e2:	4576      	cmp	r6, lr
   b73e4:	dd15      	ble.n	b7412 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
   b73e6:	9c02      	ldr	r4, [sp, #8]
   b73e8:	eb02 0907 	add.w	r9, r2, r7
   b73ec:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b73f0:	f04f 0800 	mov.w	r8, #0
   b73f4:	4543      	cmp	r3, r8
   b73f6:	dd06      	ble.n	b7406 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ae>
   b73f8:	f81a 4b01 	ldrb.w	r4, [sl], #1
   b73fc:	f809 4b01 	strb.w	r4, [r9], #1
   b7400:	f108 0801 	add.w	r8, r8, #1
   b7404:	e7f6      	b.n	b73f4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>
    for (int k = 0; k < outer_size; ++k) {
   b7406:	9c03      	ldr	r4, [sp, #12]
   b7408:	f10e 0e01 	add.w	lr, lr, #1
   b740c:	44a4      	add	ip, r4
   b740e:	441f      	add	r7, r3
   b7410:	e7e7      	b.n	b73e2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28a>
  for (int i = 0; i < output_count; ++i) {
   b7412:	3501      	adds	r5, #1
   b7414:	4418      	add	r0, r3
   b7416:	e7d3      	b.n	b73c0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x268>
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
   b7418:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input->dims;
   b741c:	6890      	ldr	r0, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b741e:	684e      	ldr	r6, [r1, #4]
  const int dimensions = input_dims->size;
   b7420:	f8d0 e000 	ldr.w	lr, [r0]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   b7424:	6876      	ldr	r6, [r6, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   b7426:	2738      	movs	r7, #56	; 0x38
  if (axis < 0) {
   b7428:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   b742a:	fb07 5506 	mla	r5, r7, r6, r5
    axis += NumDimensions(input);
   b742e:	bfb8      	it	lt
   b7430:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, dimensions);
   b7432:	459e      	cmp	lr, r3
  const TfLiteIntArray* output_dims = output0->dims;
   b7434:	68af      	ldr	r7, [r5, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   b7436:	f77f aec7 	ble.w	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b743a:	f100 0c04 	add.w	ip, r0, #4
   b743e:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b7440:	2000      	movs	r0, #0
  int outer_size = 1;
   b7442:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b7444:	4283      	cmp	r3, r0
   b7446:	dd05      	ble.n	b7454 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    outer_size *= input_dims->data[i];
   b7448:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b744c:	3001      	adds	r0, #1
    outer_size *= input_dims->data[i];
   b744e:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b7452:	e7f7      	b.n	b7444 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
  for (int i = axis + 1; i < dimensions; ++i) {
   b7454:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b7456:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b7458:	4586      	cmp	lr, r0
   b745a:	d10c      	bne.n	b7476 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
  for (int i = 0; i < output_dims->size; ++i) {
   b745c:	4638      	mov	r0, r7
  int output_size = 1;
   b745e:	2501      	movs	r5, #1
  for (int i = 0; i < output_dims->size; ++i) {
   b7460:	f850 eb04 	ldr.w	lr, [r0], #4
   b7464:	2700      	movs	r7, #0
   b7466:	45be      	cmp	lr, r7
   b7468:	dd0a      	ble.n	b7480 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x328>
    output_size *= output_dims->data[i];
   b746a:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < output_dims->size; ++i) {
   b746e:	3701      	adds	r7, #1
    output_size *= output_dims->data[i];
   b7470:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < output_dims->size; ++i) {
   b7474:	e7f7      	b.n	b7466 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30e>
    copy_size *= input_dims->data[i];
   b7476:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b747a:	3001      	adds	r0, #1
    copy_size *= input_dims->data[i];
   b747c:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b747e:	e7eb      	b.n	b7458 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   b7480:	fb03 f006 	mul.w	r0, r3, r6
   b7484:	4285      	cmp	r5, r0
   b7486:	f47f ae9f 	bne.w	b71c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b748a:	6852      	ldr	r2, [r2, #4]
   b748c:	9203      	str	r2, [sp, #12]
   b748e:	2000      	movs	r0, #0
   b7490:	fb03 f20b 	mul.w	r2, r3, fp
   b7494:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < output_count; ++i) {
   b7496:	4605      	mov	r5, r0
   b7498:	45ab      	cmp	fp, r5
   b749a:	f77f aeba 	ble.w	b7212 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   b749e:	684a      	ldr	r2, [r1, #4]
   b74a0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b74a4:	2438      	movs	r4, #56	; 0x38
   b74a6:	6857      	ldr	r7, [r2, #4]
   b74a8:	9a01      	ldr	r2, [sp, #4]
   b74aa:	6892      	ldr	r2, [r2, #8]
   b74ac:	fb04 2207 	mla	r2, r4, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b74b0:	b102      	cbz	r2, b74b4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>
   b74b2:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < output_count; ++i) {
   b74b4:	2700      	movs	r7, #0
   b74b6:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b74b8:	46be      	mov	lr, r7
   b74ba:	4576      	cmp	r6, lr
   b74bc:	dd15      	ble.n	b74ea <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
   b74be:	9c03      	ldr	r4, [sp, #12]
   b74c0:	eb02 0907 	add.w	r9, r2, r7
   b74c4:	eb04 0a0c 	add.w	sl, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b74c8:	f04f 0800 	mov.w	r8, #0
   b74cc:	4543      	cmp	r3, r8
   b74ce:	dd06      	ble.n	b74de <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x386>
   b74d0:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   b74d4:	f809 4b01 	strb.w	r4, [r9], #1
   b74d8:	f108 0801 	add.w	r8, r8, #1
   b74dc:	e7f6      	b.n	b74cc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    for (int k = 0; k < outer_size; ++k) {
   b74de:	9c02      	ldr	r4, [sp, #8]
   b74e0:	f10e 0e01 	add.w	lr, lr, #1
   b74e4:	44a4      	add	ip, r4
   b74e6:	441f      	add	r7, r3
   b74e8:	e7e7      	b.n	b74ba <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x362>
  for (int i = 0; i < output_count; ++i) {
   b74ea:	3501      	adds	r5, #1
   b74ec:	4418      	add	r0, r3
   b74ee:	e7d3      	b.n	b7498 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x340>
      context->ReportError(context, "Type '%s' is not supported by unpack.",
   b74f0:	9b01      	ldr	r3, [sp, #4]
   b74f2:	695d      	ldr	r5, [r3, #20]
   b74f4:	f7fd fb46 	bl	b4b84 <TfLiteTypeGetName>
   b74f8:	4902      	ldr	r1, [pc, #8]	; (b7504 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
   b74fa:	4602      	mov	r2, r0
   b74fc:	9801      	ldr	r0, [sp, #4]
   b74fe:	47a8      	blx	r5
      return kTfLiteError;
   b7500:	2001      	movs	r0, #1
   b7502:	e687      	b.n	b7214 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
   b7504:	000c824b 	.word	0x000c824b

000b7508 <_ZN6tflite3ops5micro15Register_UNPACKEv>:

TfLiteRegistration* Register_UNPACK() {
  static TfLiteRegistration r = {nullptr, nullptr, unpack::Prepare,
                                 unpack::Eval};
  return &r;
}
   b7508:	4800      	ldr	r0, [pc, #0]	; (b750c <_ZN6tflite3ops5micro15Register_UNPACKEv+0x4>)
   b750a:	4770      	bx	lr
   b750c:	2003c0b0 	.word	0x2003c0b0

000b7510 <_ZN6tflite3ops5micro11arg_min_max7PrepareEP13TfLiteContextP10TfLiteNode>:
constexpr int kAxis = 1;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b7510:	2000      	movs	r0, #0
   b7512:	4770      	bx	lr

000b7514 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
                             output_shape, output_data, micro::Less());
  }
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   b7514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7518:	4614      	mov	r4, r2
   b751a:	680a      	ldr	r2, [r1, #0]
   b751c:	6883      	ldr	r3, [r0, #8]
   b751e:	4605      	mov	r5, r0
   b7520:	6890      	ldr	r0, [r2, #8]
   b7522:	2738      	movs	r7, #56	; 0x38
   b7524:	4378      	muls	r0, r7
   b7526:	eb03 0800 	add.w	r8, r3, r0

#define TF_LITE_ARG_MIN_MAX(data_type, axis_type, output_type)            \
  ArgMinMaxHelper(GetTensorShape(input), GetTensorData<data_type>(input), \
                  GetTensorData<axis_type>(axis), GetTensorShape(output), \
                  GetTensorData<output_type>(output), is_arg_max)
  if (axis->type == kTfLiteInt32) {
   b752a:	5c18      	ldrb	r0, [r3, r0]
   b752c:	2802      	cmp	r0, #2
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   b752e:	b0a5      	sub	sp, #148	; 0x94
  if (axis->type == kTfLiteInt32) {
   b7530:	f040 8312 	bne.w	b7b58 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x644>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7534:	6849      	ldr	r1, [r1, #4]
   b7536:	6849      	ldr	r1, [r1, #4]
   b7538:	4379      	muls	r1, r7
   b753a:	185e      	adds	r6, r3, r1
    if (output->type == kTfLiteInt32) {
   b753c:	5c58      	ldrb	r0, [r3, r1]
   b753e:	2802      	cmp	r0, #2
   b7540:	f040 830a 	bne.w	b7b58 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x644>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b7544:	6852      	ldr	r2, [r2, #4]
   b7546:	437a      	muls	r2, r7
   b7548:	189f      	adds	r7, r3, r2
      switch (input->type) {
   b754a:	5c98      	ldrb	r0, [r3, r2]
   b754c:	2803      	cmp	r0, #3
   b754e:	f000 8110 	beq.w	b7772 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x25e>
   b7552:	2809      	cmp	r0, #9
   b7554:	f000 8202 	beq.w	b795c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x448>
   b7558:	2801      	cmp	r0, #1
   b755a:	f040 82f4 	bne.w	b7b46 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x632>
        case kTfLiteFloat32:
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   b755e:	4639      	mov	r1, r7
   b7560:	a806      	add	r0, sp, #24
   b7562:	f7ff f9d2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7566:	687b      	ldr	r3, [r7, #4]
   b7568:	9301      	str	r3, [sp, #4]
   b756a:	4631      	mov	r1, r6
   b756c:	a80b      	add	r0, sp, #44	; 0x2c
   b756e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7572:	f7ff f9ca 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7576:	6873      	ldr	r3, [r6, #4]
   b7578:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b757a:	9e06      	ldr	r6, [sp, #24]
  if (is_arg_max) {
   b757c:	2c00      	cmp	r4, #0
   b757e:	d077      	beq.n	b7670 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x15c>

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7580:	2e00      	cmp	r6, #0
   b7582:	dc01      	bgt.n	b7588 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x74>
   b7584:	f00d f98a 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b758a:	1e73      	subs	r3, r6, #1
   b758c:	4293      	cmp	r3, r2
   b758e:	d1f9      	bne.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   b7590:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7592:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7594:	bfb8      	it	lt
   b7596:	19a4      	addlt	r4, r4, r6
  }
  const int axis_size = input1_shape.Dims(axis);
   b7598:	4621      	mov	r1, r4
   b759a:	a806      	add	r0, sp, #24
   b759c:	f7fe ff1c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   b75a0:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b75a2:	4605      	mov	r5, r0
  int outer_size = 1;
   b75a4:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b75a8:	42bc      	cmp	r4, r7
   b75aa:	dd0e      	ble.n	b75ca <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xb6>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b75ac:	4639      	mov	r1, r7
   b75ae:	a806      	add	r0, sp, #24
   b75b0:	f7fe ff12 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b75b4:	4639      	mov	r1, r7
   b75b6:	4681      	mov	r9, r0
   b75b8:	a80b      	add	r0, sp, #44	; 0x2c
   b75ba:	f7fe ff0d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b75be:	4581      	cmp	r9, r0
   b75c0:	d1e0      	bne.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b75c2:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b75c6:	3701      	adds	r7, #1
   b75c8:	e7ee      	b.n	b75a8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x94>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   b75ca:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b75cc:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b75ce:	42be      	cmp	r6, r7
   b75d0:	dc31      	bgt.n	b7636 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x122>
   b75d2:	fb04 f305 	mul.w	r3, r4, r5
   b75d6:	9305      	str	r3, [sp, #20]
   b75d8:	00a3      	lsls	r3, r4, #2
   b75da:	9304      	str	r3, [sp, #16]
   b75dc:	2300      	movs	r3, #0
   b75de:	2001      	movs	r0, #1
   b75e0:	461e      	mov	r6, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   b75e2:	461f      	mov	r7, r3
   b75e4:	45b8      	cmp	r8, r7
   b75e6:	f340 80ba 	ble.w	b775e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x24a>
   b75ea:	9a03      	ldr	r2, [sp, #12]
   b75ec:	9901      	ldr	r1, [sp, #4]
   b75ee:	eb02 0986 	add.w	r9, r2, r6, lsl #2
   b75f2:	fb04 f200 	mul.w	r2, r4, r0
   b75f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b75fa:	9202      	str	r2, [sp, #8]
   b75fc:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   b7600:	f04f 0c00 	mov.w	ip, #0
   b7604:	4564      	cmp	r4, ip
   b7606:	dd2d      	ble.n	b7664 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x150>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7608:	ecfb 7a01 	vldmia	fp!, {s15}
   b760c:	f8dd e008 	ldr.w	lr, [sp, #8]
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   b7610:	2101      	movs	r1, #1
      T2 min_max_index = 0;
   b7612:	f04f 0a00 	mov.w	sl, #0
      for (int i = 1; i < axis_size; ++i) {
   b7616:	428d      	cmp	r5, r1
   b7618:	dd1c      	ble.n	b7654 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x140>
// Same as gtl::Greater but defined here to reduce dependencies and
// binary size for micro environment.
struct Greater {
  template <typename T>
  bool operator()(const T& x, const T& y) const {
    return x > y;
   b761a:	ed9e 7a00 	vldr	s14, [lr]
   b761e:	9a04      	ldr	r2, [sp, #16]
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   b7620:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7628:	bfc4      	itt	gt
   b762a:	468a      	movgt	sl, r1
          min_max_value = curr_value;
   b762c:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   b7630:	3101      	adds	r1, #1
   b7632:	4496      	add	lr, r2
   b7634:	e7ef      	b.n	b7616 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x102>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b7636:	4639      	mov	r1, r7
   b7638:	a806      	add	r0, sp, #24
   b763a:	f7fe fecd 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b763e:	1e79      	subs	r1, r7, #1
   b7640:	4681      	mov	r9, r0
   b7642:	a80b      	add	r0, sp, #44	; 0x2c
   b7644:	f7fe fec8 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7648:	4581      	cmp	r9, r0
   b764a:	d19b      	bne.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b764c:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7650:	3701      	adds	r7, #1
   b7652:	e7bc      	b.n	b75ce <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xba>
   b7654:	9a02      	ldr	r2, [sp, #8]
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   b7656:	f849 ab04 	str.w	sl, [r9], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b765a:	3204      	adds	r2, #4
   b765c:	f10c 0c01 	add.w	ip, ip, #1
   b7660:	9202      	str	r2, [sp, #8]
   b7662:	e7cf      	b.n	b7604 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf0>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7664:	9a05      	ldr	r2, [sp, #20]
   b7666:	3701      	adds	r7, #1
   b7668:	4426      	add	r6, r4
   b766a:	4428      	add	r0, r5
   b766c:	4413      	add	r3, r2
   b766e:	e7b9      	b.n	b75e4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xd0>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7670:	2e00      	cmp	r6, #0
   b7672:	dd87      	ble.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7676:	1e73      	subs	r3, r6, #1
   b7678:	4293      	cmp	r3, r2
   b767a:	d183      	bne.n	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b767c:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b767e:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7680:	bfb8      	it	lt
   b7682:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b7684:	4621      	mov	r1, r4
   b7686:	a806      	add	r0, sp, #24
   b7688:	f7fe fea6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b768c:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b768e:	4605      	mov	r5, r0
  int outer_size = 1;
   b7690:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7694:	42bc      	cmp	r4, r7
   b7696:	dd0f      	ble.n	b76b8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1a4>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7698:	4639      	mov	r1, r7
   b769a:	a806      	add	r0, sp, #24
   b769c:	f7fe fe9c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b76a0:	4639      	mov	r1, r7
   b76a2:	4681      	mov	r9, r0
   b76a4:	a80b      	add	r0, sp, #44	; 0x2c
   b76a6:	f7fe fe97 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b76aa:	4581      	cmp	r9, r0
   b76ac:	f47f af6a 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b76b0:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b76b4:	3701      	adds	r7, #1
   b76b6:	e7ed      	b.n	b7694 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x180>
  for (int i = axis + 1; i < dims_count; ++i) {
   b76b8:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b76ba:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b76bc:	42be      	cmp	r6, r7
   b76be:	dc30      	bgt.n	b7722 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x20e>
   b76c0:	fb05 f304 	mul.w	r3, r5, r4
   b76c4:	9305      	str	r3, [sp, #20]
   b76c6:	00a3      	lsls	r3, r4, #2
   b76c8:	9304      	str	r3, [sp, #16]
   b76ca:	2300      	movs	r3, #0
   b76cc:	2001      	movs	r0, #1
   b76ce:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b76d0:	461f      	mov	r7, r3
   b76d2:	45b8      	cmp	r8, r7
   b76d4:	dd43      	ble.n	b775e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x24a>
   b76d6:	9a03      	ldr	r2, [sp, #12]
   b76d8:	9901      	ldr	r1, [sp, #4]
   b76da:	eb02 0986 	add.w	r9, r2, r6, lsl #2
   b76de:	fb04 f200 	mul.w	r2, r4, r0
   b76e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b76e6:	9202      	str	r2, [sp, #8]
   b76e8:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   b76ec:	f04f 0c00 	mov.w	ip, #0
   b76f0:	4564      	cmp	r4, ip
   b76f2:	dd2e      	ble.n	b7752 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x23e>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b76f4:	ecfb 7a01 	vldmia	fp!, {s15}
   b76f8:	f8dd e008 	ldr.w	lr, [sp, #8]
      for (int i = 1; i < axis_size; ++i) {
   b76fc:	2101      	movs	r1, #1
      T2 min_max_index = 0;
   b76fe:	f04f 0a00 	mov.w	sl, #0
      for (int i = 1; i < axis_size; ++i) {
   b7702:	428d      	cmp	r5, r1
   b7704:	dd1d      	ble.n	b7742 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x22e>
};

struct Less {
  template <typename T>
  bool operator()(const T& x, const T& y) const {
    return x < y;
   b7706:	ed9e 7a00 	vldr	s14, [lr]
   b770a:	9a04      	ldr	r2, [sp, #16]
        if (cmp(curr_value, min_max_value)) {
   b770c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7714:	bf44      	itt	mi
   b7716:	468a      	movmi	sl, r1
          min_max_value = curr_value;
   b7718:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   b771c:	3101      	adds	r1, #1
   b771e:	4496      	add	lr, r2
   b7720:	e7ef      	b.n	b7702 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1ee>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b7722:	4639      	mov	r1, r7
   b7724:	a806      	add	r0, sp, #24
   b7726:	f7fe fe57 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b772a:	1e79      	subs	r1, r7, #1
   b772c:	4681      	mov	r9, r0
   b772e:	a80b      	add	r0, sp, #44	; 0x2c
   b7730:	f7fe fe52 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7734:	4581      	cmp	r9, r0
   b7736:	f47f af25 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b773a:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b773e:	3701      	adds	r7, #1
   b7740:	e7bc      	b.n	b76bc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1a8>
   b7742:	9a02      	ldr	r2, [sp, #8]
      output_data[outer * inner_size + inner] = min_max_index;
   b7744:	f849 ab04 	str.w	sl, [r9], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b7748:	3204      	adds	r2, #4
   b774a:	f10c 0c01 	add.w	ip, ip, #1
   b774e:	9202      	str	r2, [sp, #8]
   b7750:	e7ce      	b.n	b76f0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1dc>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7752:	9a05      	ldr	r2, [sp, #20]
   b7754:	3701      	adds	r7, #1
   b7756:	4426      	add	r6, r4
   b7758:	4428      	add	r0, r5
   b775a:	4413      	add	r3, r2
   b775c:	e7b9      	b.n	b76d2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x1be>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   b775e:	a80b      	add	r0, sp, #44	; 0x2c
   b7760:	f7fe fe2f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b7764:	a806      	add	r0, sp, #24
          break;
        case kTfLiteUInt8:
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
          break;
        case kTfLiteInt8:
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b7766:	f7fe fe2c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
    return kTfLiteError;
  }

#undef TF_LITE_ARG_MIN_MAX

  return kTfLiteOk;
   b776a:	2000      	movs	r0, #0
}
   b776c:	b025      	add	sp, #148	; 0x94
   b776e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   b7772:	4639      	mov	r1, r7
   b7774:	a810      	add	r0, sp, #64	; 0x40
   b7776:	f7ff f8c8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b777a:	687b      	ldr	r3, [r7, #4]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	4631      	mov	r1, r6
   b7780:	a815      	add	r0, sp, #84	; 0x54
   b7782:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7786:	f7ff f8c0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b778a:	6873      	ldr	r3, [r6, #4]
   b778c:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b778e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (is_arg_max) {
   b7790:	2c00      	cmp	r4, #0
   b7792:	d06f      	beq.n	b7874 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x360>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7794:	2e00      	cmp	r6, #0
   b7796:	f77f aef5 	ble.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b779a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b779c:	1e73      	subs	r3, r6, #1
   b779e:	4293      	cmp	r3, r2
   b77a0:	f47f aef0 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b77a4:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b77a6:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b77a8:	bfb8      	it	lt
   b77aa:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b77ac:	4621      	mov	r1, r4
   b77ae:	a810      	add	r0, sp, #64	; 0x40
   b77b0:	f7fe fe12 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b77b4:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b77b6:	4605      	mov	r5, r0
  int outer_size = 1;
   b77b8:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b77bc:	42bc      	cmp	r4, r7
   b77be:	dd0f      	ble.n	b77e0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2cc>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b77c0:	4639      	mov	r1, r7
   b77c2:	a810      	add	r0, sp, #64	; 0x40
   b77c4:	f7fe fe08 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b77c8:	4639      	mov	r1, r7
   b77ca:	4681      	mov	r9, r0
   b77cc:	a815      	add	r0, sp, #84	; 0x54
   b77ce:	f7fe fe03 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b77d2:	4581      	cmp	r9, r0
   b77d4:	f47f aed6 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b77d8:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b77dc:	3701      	adds	r7, #1
   b77de:	e7ed      	b.n	b77bc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2a8>
  for (int i = axis + 1; i < dims_count; ++i) {
   b77e0:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b77e2:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b77e4:	42be      	cmp	r6, r7
   b77e6:	dc29      	bgt.n	b783c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x328>
   b77e8:	fb05 f304 	mul.w	r3, r5, r4
   b77ec:	9305      	str	r3, [sp, #20]
   b77ee:	2301      	movs	r3, #1
   b77f0:	9302      	str	r3, [sp, #8]
   b77f2:	2300      	movs	r3, #0
   b77f4:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b77f6:	461f      	mov	r7, r3
   b77f8:	45b8      	cmp	r8, r7
   b77fa:	f340 80aa 	ble.w	b7952 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x43e>
   b77fe:	9a03      	ldr	r2, [sp, #12]
   b7800:	9902      	ldr	r1, [sp, #8]
   b7802:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7806:	9a01      	ldr	r2, [sp, #4]
   b7808:	eb03 0902 	add.w	r9, r3, r2
   b780c:	fb01 2204 	mla	r2, r1, r4, r2
   b7810:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b7812:	2200      	movs	r2, #0
   b7814:	4294      	cmp	r4, r2
   b7816:	dd25      	ble.n	b7864 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x350>
   b7818:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b781a:	f819 ab01 	ldrb.w	sl, [r9], #1
   b781e:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7822:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7824:	2101      	movs	r1, #1
   b7826:	428d      	cmp	r5, r1
   b7828:	dd18      	ble.n	b785c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x348>
    return x > y;
   b782a:	f89c b000 	ldrb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b782e:	45d3      	cmp	fp, sl
   b7830:	bf84      	itt	hi
   b7832:	4608      	movhi	r0, r1
   b7834:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7836:	3101      	adds	r1, #1
   b7838:	44a4      	add	ip, r4
   b783a:	e7f4      	b.n	b7826 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x312>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b783c:	4639      	mov	r1, r7
   b783e:	a810      	add	r0, sp, #64	; 0x40
   b7840:	f7fe fdca 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7844:	1e79      	subs	r1, r7, #1
   b7846:	4681      	mov	r9, r0
   b7848:	a815      	add	r0, sp, #84	; 0x54
   b784a:	f7fe fdc5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b784e:	4581      	cmp	r9, r0
   b7850:	f47f ae98 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b7854:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7858:	3701      	adds	r7, #1
   b785a:	e7c3      	b.n	b77e4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2d0>
      output_data[outer * inner_size + inner] = min_max_index;
   b785c:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b7860:	3201      	adds	r2, #1
   b7862:	e7d7      	b.n	b7814 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x300>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7864:	9a05      	ldr	r2, [sp, #20]
   b7866:	4413      	add	r3, r2
   b7868:	9a02      	ldr	r2, [sp, #8]
   b786a:	442a      	add	r2, r5
   b786c:	3701      	adds	r7, #1
   b786e:	4426      	add	r6, r4
   b7870:	9202      	str	r2, [sp, #8]
   b7872:	e7c1      	b.n	b77f8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x2e4>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7874:	2e00      	cmp	r6, #0
   b7876:	f77f ae85 	ble.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b787a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b787c:	1e73      	subs	r3, r6, #1
   b787e:	4293      	cmp	r3, r2
   b7880:	f47f ae80 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b7884:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7886:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7888:	bfb8      	it	lt
   b788a:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b788c:	4621      	mov	r1, r4
   b788e:	a810      	add	r0, sp, #64	; 0x40
   b7890:	f7fe fda2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b7894:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7896:	4605      	mov	r5, r0
  int outer_size = 1;
   b7898:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b789c:	42bc      	cmp	r4, r7
   b789e:	dd0f      	ble.n	b78c0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3ac>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b78a0:	4639      	mov	r1, r7
   b78a2:	a810      	add	r0, sp, #64	; 0x40
   b78a4:	f7fe fd98 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b78a8:	4639      	mov	r1, r7
   b78aa:	4681      	mov	r9, r0
   b78ac:	a815      	add	r0, sp, #84	; 0x54
   b78ae:	f7fe fd93 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b78b2:	4581      	cmp	r9, r0
   b78b4:	f47f ae66 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b78b8:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b78bc:	3701      	adds	r7, #1
   b78be:	e7ed      	b.n	b789c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x388>
  for (int i = axis + 1; i < dims_count; ++i) {
   b78c0:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b78c2:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b78c4:	42be      	cmp	r6, r7
   b78c6:	dc28      	bgt.n	b791a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x406>
   b78c8:	fb05 f304 	mul.w	r3, r5, r4
   b78cc:	9305      	str	r3, [sp, #20]
   b78ce:	2301      	movs	r3, #1
   b78d0:	9302      	str	r3, [sp, #8]
   b78d2:	2300      	movs	r3, #0
   b78d4:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b78d6:	461f      	mov	r7, r3
   b78d8:	45b8      	cmp	r8, r7
   b78da:	dd3a      	ble.n	b7952 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x43e>
   b78dc:	9a03      	ldr	r2, [sp, #12]
   b78de:	9902      	ldr	r1, [sp, #8]
   b78e0:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b78e4:	9a01      	ldr	r2, [sp, #4]
   b78e6:	eb03 0902 	add.w	r9, r3, r2
   b78ea:	fb01 2204 	mla	r2, r1, r4, r2
   b78ee:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b78f0:	2200      	movs	r2, #0
   b78f2:	4294      	cmp	r4, r2
   b78f4:	dd25      	ble.n	b7942 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x42e>
   b78f6:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b78f8:	f819 ab01 	ldrb.w	sl, [r9], #1
   b78fc:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7900:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7902:	2101      	movs	r1, #1
   b7904:	428d      	cmp	r5, r1
   b7906:	dd18      	ble.n	b793a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x426>
    return x < y;
   b7908:	f89c b000 	ldrb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b790c:	45d3      	cmp	fp, sl
   b790e:	bf3c      	itt	cc
   b7910:	4608      	movcc	r0, r1
   b7912:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7914:	3101      	adds	r1, #1
   b7916:	44a4      	add	ip, r4
   b7918:	e7f4      	b.n	b7904 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3f0>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b791a:	4639      	mov	r1, r7
   b791c:	a810      	add	r0, sp, #64	; 0x40
   b791e:	f7fe fd5b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7922:	1e79      	subs	r1, r7, #1
   b7924:	4681      	mov	r9, r0
   b7926:	a815      	add	r0, sp, #84	; 0x54
   b7928:	f7fe fd56 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b792c:	4581      	cmp	r9, r0
   b792e:	f47f ae29 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b7932:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7936:	3701      	adds	r7, #1
   b7938:	e7c4      	b.n	b78c4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3b0>
      output_data[outer * inner_size + inner] = min_max_index;
   b793a:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b793e:	3201      	adds	r2, #1
   b7940:	e7d7      	b.n	b78f2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3de>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7942:	9a05      	ldr	r2, [sp, #20]
   b7944:	4413      	add	r3, r2
   b7946:	9a02      	ldr	r2, [sp, #8]
   b7948:	442a      	add	r2, r5
   b794a:	3701      	adds	r7, #1
   b794c:	4426      	add	r6, r4
   b794e:	9202      	str	r2, [sp, #8]
   b7950:	e7c2      	b.n	b78d8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x3c4>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   b7952:	a815      	add	r0, sp, #84	; 0x54
   b7954:	f7fe fd35 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b7958:	a810      	add	r0, sp, #64	; 0x40
   b795a:	e704      	b.n	b7766 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x252>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b795c:	4639      	mov	r1, r7
   b795e:	a81a      	add	r0, sp, #104	; 0x68
   b7960:	f7fe ffd3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7964:	687b      	ldr	r3, [r7, #4]
   b7966:	9301      	str	r3, [sp, #4]
   b7968:	4631      	mov	r1, r6
   b796a:	a81f      	add	r0, sp, #124	; 0x7c
   b796c:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7970:	f7fe ffcb 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b7974:	6873      	ldr	r3, [r6, #4]
   b7976:	9303      	str	r3, [sp, #12]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   b7978:	9e1a      	ldr	r6, [sp, #104]	; 0x68
  if (is_arg_max) {
   b797a:	2c00      	cmp	r4, #0
   b797c:	d06f      	beq.n	b7a5e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x54a>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b797e:	2e00      	cmp	r6, #0
   b7980:	f77f ae00 	ble.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7984:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b7986:	1e73      	subs	r3, r6, #1
   b7988:	4293      	cmp	r3, r2
   b798a:	f47f adfb 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b798e:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7990:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7992:	bfb8      	it	lt
   b7994:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b7996:	4621      	mov	r1, r4
   b7998:	a81a      	add	r0, sp, #104	; 0x68
   b799a:	f7fe fd1d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b799e:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b79a0:	4605      	mov	r5, r0
  int outer_size = 1;
   b79a2:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b79a6:	42bc      	cmp	r4, r7
   b79a8:	dd0f      	ble.n	b79ca <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4b6>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b79aa:	4639      	mov	r1, r7
   b79ac:	a81a      	add	r0, sp, #104	; 0x68
   b79ae:	f7fe fd13 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b79b2:	4639      	mov	r1, r7
   b79b4:	4681      	mov	r9, r0
   b79b6:	a81f      	add	r0, sp, #124	; 0x7c
   b79b8:	f7fe fd0e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b79bc:	4581      	cmp	r9, r0
   b79be:	f47f ade1 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b79c2:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b79c6:	3701      	adds	r7, #1
   b79c8:	e7ed      	b.n	b79a6 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x492>
  for (int i = axis + 1; i < dims_count; ++i) {
   b79ca:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b79cc:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b79ce:	42be      	cmp	r6, r7
   b79d0:	dc29      	bgt.n	b7a26 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x512>
   b79d2:	fb05 f304 	mul.w	r3, r5, r4
   b79d6:	9305      	str	r3, [sp, #20]
   b79d8:	2301      	movs	r3, #1
   b79da:	9302      	str	r3, [sp, #8]
   b79dc:	2300      	movs	r3, #0
   b79de:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b79e0:	461f      	mov	r7, r3
   b79e2:	45b8      	cmp	r8, r7
   b79e4:	f340 80aa 	ble.w	b7b3c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x628>
   b79e8:	9a03      	ldr	r2, [sp, #12]
   b79ea:	9902      	ldr	r1, [sp, #8]
   b79ec:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b79f0:	9a01      	ldr	r2, [sp, #4]
   b79f2:	eb03 0902 	add.w	r9, r3, r2
   b79f6:	fb01 2204 	mla	r2, r1, r4, r2
   b79fa:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b79fc:	2200      	movs	r2, #0
   b79fe:	4294      	cmp	r4, r2
   b7a00:	dd25      	ble.n	b7a4e <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x53a>
   b7a02:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7a04:	f919 ab01 	ldrsb.w	sl, [r9], #1
   b7a08:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7a0c:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7a0e:	2101      	movs	r1, #1
   b7a10:	428d      	cmp	r5, r1
   b7a12:	dd18      	ble.n	b7a46 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x532>
    return x > y;
   b7a14:	f99c b000 	ldrsb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b7a18:	45d3      	cmp	fp, sl
   b7a1a:	bfc4      	itt	gt
   b7a1c:	4608      	movgt	r0, r1
   b7a1e:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7a20:	3101      	adds	r1, #1
   b7a22:	44a4      	add	ip, r4
   b7a24:	e7f4      	b.n	b7a10 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4fc>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b7a26:	4639      	mov	r1, r7
   b7a28:	a81a      	add	r0, sp, #104	; 0x68
   b7a2a:	f7fe fcd5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a2e:	1e79      	subs	r1, r7, #1
   b7a30:	4681      	mov	r9, r0
   b7a32:	a81f      	add	r0, sp, #124	; 0x7c
   b7a34:	f7fe fcd0 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a38:	4581      	cmp	r9, r0
   b7a3a:	f47f ada3 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b7a3e:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7a42:	3701      	adds	r7, #1
   b7a44:	e7c3      	b.n	b79ce <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ba>
      output_data[outer * inner_size + inner] = min_max_index;
   b7a46:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b7a4a:	3201      	adds	r2, #1
   b7a4c:	e7d7      	b.n	b79fe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ea>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7a4e:	9a05      	ldr	r2, [sp, #20]
   b7a50:	4413      	add	r3, r2
   b7a52:	9a02      	ldr	r2, [sp, #8]
   b7a54:	442a      	add	r2, r5
   b7a56:	3701      	adds	r7, #1
   b7a58:	4426      	add	r6, r4
   b7a5a:	9202      	str	r2, [sp, #8]
   b7a5c:	e7c1      	b.n	b79e2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x4ce>
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   b7a5e:	2e00      	cmp	r6, #0
   b7a60:	f77f ad90 	ble.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   b7a64:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b7a66:	1e73      	subs	r3, r6, #1
   b7a68:	4293      	cmp	r3, r2
   b7a6a:	f47f ad8b 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
  int axis = input2_data[0];
   b7a6e:	682c      	ldr	r4, [r5, #0]
  if (axis < 0) {
   b7a70:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   b7a72:	bfb8      	it	lt
   b7a74:	19a4      	addlt	r4, r4, r6
  const int axis_size = input1_shape.Dims(axis);
   b7a76:	4621      	mov	r1, r4
   b7a78:	a81a      	add	r0, sp, #104	; 0x68
   b7a7a:	f7fe fcad 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
   b7a7e:	2700      	movs	r7, #0
  const int axis_size = input1_shape.Dims(axis);
   b7a80:	4605      	mov	r5, r0
  int outer_size = 1;
   b7a82:	f04f 0801 	mov.w	r8, #1
  for (int i = 0; i < axis; ++i) {
   b7a86:	42bc      	cmp	r4, r7
   b7a88:	dd0f      	ble.n	b7aaa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x596>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   b7a8a:	4639      	mov	r1, r7
   b7a8c:	a81a      	add	r0, sp, #104	; 0x68
   b7a8e:	f7fe fca3 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a92:	4639      	mov	r1, r7
   b7a94:	4681      	mov	r9, r0
   b7a96:	a81f      	add	r0, sp, #124	; 0x7c
   b7a98:	f7fe fc9e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7a9c:	4581      	cmp	r9, r0
   b7a9e:	f47f ad71 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    outer_size *= input1_shape.Dims(i);
   b7aa2:	fb09 f808 	mul.w	r8, r9, r8
  for (int i = 0; i < axis; ++i) {
   b7aa6:	3701      	adds	r7, #1
   b7aa8:	e7ed      	b.n	b7a86 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x572>
  for (int i = axis + 1; i < dims_count; ++i) {
   b7aaa:	1c67      	adds	r7, r4, #1
  int inner_size = 1;
   b7aac:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   b7aae:	42be      	cmp	r6, r7
   b7ab0:	dc28      	bgt.n	b7b04 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5f0>
   b7ab2:	fb05 f304 	mul.w	r3, r5, r4
   b7ab6:	9305      	str	r3, [sp, #20]
   b7ab8:	2301      	movs	r3, #1
   b7aba:	9302      	str	r3, [sp, #8]
   b7abc:	2300      	movs	r3, #0
   b7abe:	461e      	mov	r6, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   b7ac0:	461f      	mov	r7, r3
   b7ac2:	45b8      	cmp	r8, r7
   b7ac4:	dd3a      	ble.n	b7b3c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x628>
   b7ac6:	9a03      	ldr	r2, [sp, #12]
   b7ac8:	9902      	ldr	r1, [sp, #8]
   b7aca:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
   b7ace:	9a01      	ldr	r2, [sp, #4]
   b7ad0:	eb03 0902 	add.w	r9, r3, r2
   b7ad4:	fb01 2204 	mla	r2, r1, r4, r2
   b7ad8:	9204      	str	r2, [sp, #16]
    for (int inner = 0; inner < inner_size; ++inner) {
   b7ada:	2200      	movs	r2, #0
   b7adc:	4294      	cmp	r4, r2
   b7ade:	dd25      	ble.n	b7b2c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x618>
   b7ae0:	9904      	ldr	r1, [sp, #16]
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   b7ae2:	f919 ab01 	ldrsb.w	sl, [r9], #1
   b7ae6:	eb02 0c01 	add.w	ip, r2, r1
      T2 min_max_index = 0;
   b7aea:	2000      	movs	r0, #0
      for (int i = 1; i < axis_size; ++i) {
   b7aec:	2101      	movs	r1, #1
   b7aee:	428d      	cmp	r5, r1
   b7af0:	dd18      	ble.n	b7b24 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x610>
    return x < y;
   b7af2:	f99c b000 	ldrsb.w	fp, [ip]
        if (cmp(curr_value, min_max_value)) {
   b7af6:	45d3      	cmp	fp, sl
   b7af8:	bfbc      	itt	lt
   b7afa:	4608      	movlt	r0, r1
   b7afc:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   b7afe:	3101      	adds	r1, #1
   b7b00:	44a4      	add	ip, r4
   b7b02:	e7f4      	b.n	b7aee <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5da>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   b7b04:	4639      	mov	r1, r7
   b7b06:	a81a      	add	r0, sp, #104	; 0x68
   b7b08:	f7fe fc66 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7b0c:	1e79      	subs	r1, r7, #1
   b7b0e:	4681      	mov	r9, r0
   b7b10:	a81f      	add	r0, sp, #124	; 0x7c
   b7b12:	f7fe fc61 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b7b16:	4581      	cmp	r9, r0
   b7b18:	f47f ad34 	bne.w	b7584 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x70>
    inner_size *= input1_shape.Dims(i);
   b7b1c:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   b7b20:	3701      	adds	r7, #1
   b7b22:	e7c4      	b.n	b7aae <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x59a>
      output_data[outer * inner_size + inner] = min_max_index;
   b7b24:	f84e 0b04 	str.w	r0, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   b7b28:	3201      	adds	r2, #1
   b7b2a:	e7d7      	b.n	b7adc <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5c8>
  for (int outer = 0; outer < outer_size; ++outer) {
   b7b2c:	9a05      	ldr	r2, [sp, #20]
   b7b2e:	4413      	add	r3, r2
   b7b30:	9a02      	ldr	r2, [sp, #8]
   b7b32:	442a      	add	r2, r5
   b7b34:	3701      	adds	r7, #1
   b7b36:	4426      	add	r6, r4
   b7b38:	9202      	str	r2, [sp, #8]
   b7b3a:	e7c2      	b.n	b7ac2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x5ae>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   b7b3c:	a81f      	add	r0, sp, #124	; 0x7c
   b7b3e:	f7fe fc40 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b7b42:	a81a      	add	r0, sp, #104	; 0x68
   b7b44:	e60f      	b.n	b7766 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x252>
          context->ReportError(context,
   b7b46:	696c      	ldr	r4, [r5, #20]
   b7b48:	f7fd f81c 	bl	b4b84 <TfLiteTypeGetName>
   b7b4c:	4905      	ldr	r1, [pc, #20]	; (b7b64 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x650>)
   b7b4e:	4602      	mov	r2, r0
    context->ReportError(context, "Only int32 are supported currently, got %s.",
   b7b50:	4628      	mov	r0, r5
   b7b52:	47a0      	blx	r4
    return kTfLiteError;
   b7b54:	2001      	movs	r0, #1
   b7b56:	e609      	b.n	b776c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x258>
    context->ReportError(context, "Only int32 are supported currently, got %s.",
   b7b58:	696c      	ldr	r4, [r5, #20]
   b7b5a:	f7fd f813 	bl	b4b84 <TfLiteTypeGetName>
   b7b5e:	4902      	ldr	r1, [pc, #8]	; (b7b68 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x654>)
   b7b60:	4602      	mov	r2, r0
   b7b62:	e7f5      	b.n	b7b50 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x63c>
   b7b64:	000c8271 	.word	0x000c8271
   b7b68:	000c82af 	.word	0x000c82af

000b7b6c <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ArgMinEval(TfLiteContext* context, TfLiteNode* node) {
  return Eval(context, node, false);
   b7b6c:	2200      	movs	r2, #0
   b7b6e:	f7ff bcd1 	b.w	b7514 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000b7b72 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus ArgMaxEval(TfLiteContext* context, TfLiteNode* node) {
  return Eval(context, node, true);
   b7b72:	2201      	movs	r2, #1
   b7b74:	f7ff bcce 	b.w	b7514 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000b7b78 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:

TfLiteRegistration* Register_ARG_MAX() {
  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,
                                 arg_min_max::ArgMaxEval};
  return &r;
}
   b7b78:	4800      	ldr	r0, [pc, #0]	; (b7b7c <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x4>)
   b7b7a:	4770      	bx	lr
   b7b7c:	2003c0d0 	.word	0x2003c0d0

000b7b80 <_ZN6tflite3ops5micro16Register_ARG_MINEv>:

TfLiteRegistration* Register_ARG_MIN() {
  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,
                                 arg_min_max::ArgMinEval};
  return &r;
}
   b7b80:	4800      	ldr	r0, [pc, #0]	; (b7b84 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x4>)
   b7b82:	4770      	bx	lr
   b7b84:	2003c0f0 	.word	0x2003c0f0

000b7b88 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 4);
   b7b88:	2904      	cmp	r1, #4
                                   int dim_count) {
   b7b8a:	b570      	push	{r4, r5, r6, lr}
   b7b8c:	4604      	mov	r4, r0
   b7b8e:	460d      	mov	r5, r1
  TFLITE_CHECK_LE(dim_count, 4);
   b7b90:	dd01      	ble.n	b7b96 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xe>
   b7b92:	f00c fe83 	bl	c489c <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   b7b96:	f990 2000 	ldrsb.w	r2, [r0]
   b7b9a:	428a      	cmp	r2, r1
   b7b9c:	dcf9      	bgt.n	b7b92 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   b7b9e:	f990 300a 	ldrsb.w	r3, [r0, #10]
   b7ba2:	429a      	cmp	r2, r3
   b7ba4:	d1f5      	bne.n	b7b92 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   b7ba6:	f990 3014 	ldrsb.w	r3, [r0, #20]
   b7baa:	4293      	cmp	r3, r2
   b7bac:	d1f1      	bne.n	b7b92 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>

  const int pad_count = dim_count - p->start_indices_count;
   b7bae:	1ace      	subs	r6, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   b7bb0:	eb00 0245 	add.w	r2, r0, r5, lsl #1
   b7bb4:	1e59      	subs	r1, r3, #1
   b7bb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b7bba:	2900      	cmp	r1, #0
   b7bbc:	da11      	bge.n	b7be2 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
    p->start_indices[i] = 0;
   b7bbe:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   b7bc2:	0052      	lsls	r2, r2, #1
   b7bc4:	2100      	movs	r1, #0
   b7bc6:	1ca0      	adds	r0, r4, #2
   b7bc8:	f00f f834 	bl	c6c34 <memset>
   b7bcc:	f104 020c 	add.w	r2, r4, #12
  for (int i = 0; i < pad_count; ++i) {
   b7bd0:	2300      	movs	r3, #0
    p->stop_indices[i] = 1;
   b7bd2:	2101      	movs	r1, #1
  for (int i = 0; i < pad_count; ++i) {
   b7bd4:	42b3      	cmp	r3, r6
   b7bd6:	da10      	bge.n	b7bfa <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x72>
    p->stop_indices[i] = 1;
   b7bd8:	f822 1b02 	strh.w	r1, [r2], #2
  for (int i = 0; i < pad_count; ++i) {
   b7bdc:	3301      	adds	r3, #1
    p->strides[i] = 1;
   b7bde:	8111      	strh	r1, [r2, #8]
  for (int i = 0; i < pad_count; ++i) {
   b7be0:	e7f8      	b.n	b7bd4 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4c>
    p->strides[i + pad_count] = p->strides[i];
   b7be2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
   b7be6:	8290      	strh	r0, [r2, #20]
    p->start_indices[i + pad_count] = p->start_indices[i];
   b7be8:	f933 0902 	ldrsh.w	r0, [r3], #-2
   b7bec:	f822 0902 	strh.w	r0, [r2], #-2
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   b7bf0:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
   b7bf4:	8190      	strh	r0, [r2, #12]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   b7bf6:	3901      	subs	r1, #1
   b7bf8:	e7df      	b.n	b7bba <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x32>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   b7bfa:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   b7bfe:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
  p->shrink_axis_mask <<= pad_count;
   b7c02:	40b3      	lsls	r3, r6
   b7c04:	84e3      	strh	r3, [r4, #38]	; 0x26
  p->ellipsis_mask <<= pad_count;
   b7c06:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
   b7c0a:	40b3      	lsls	r3, r6
   b7c0c:	8423      	strh	r3, [r4, #32]
  p->new_axis_mask <<= pad_count;
   b7c0e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
   b7c12:	40b3      	lsls	r3, r6
   b7c14:	84a3      	strh	r3, [r4, #36]	; 0x24
  p->end_mask <<= pad_count;
   b7c16:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
   b7c1a:	fa03 f206 	lsl.w	r2, r3, r6
  p->begin_mask |= (1 << pad_count) - 1;
   b7c1e:	2301      	movs	r3, #1
   b7c20:	40b3      	lsls	r3, r6
   b7c22:	3b01      	subs	r3, #1
   b7c24:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   b7c26:	fa01 f606 	lsl.w	r6, r1, r6
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   b7c2a:	b26d      	sxtb	r5, r5
  p->begin_mask |= (1 << pad_count) - 1;
   b7c2c:	431e      	orrs	r6, r3
  p->end_mask |= (1 << pad_count) - 1;
   b7c2e:	4313      	orrs	r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   b7c30:	83e6      	strh	r6, [r4, #30]
  p->end_mask |= (1 << pad_count) - 1;
   b7c32:	8463      	strh	r3, [r4, #34]	; 0x22
  p->start_indices_count = dim_count;
   b7c34:	7025      	strb	r5, [r4, #0]
  p->stop_indices_count = dim_count;
   b7c36:	72a5      	strb	r5, [r4, #10]
  p->strides_count = dim_count;
   b7c38:	7525      	strb	r5, [r4, #20]
}
   b7c3a:	bd70      	pop	{r4, r5, r6, pc}

000b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   b7c3c:	b510      	push	{r4, lr}
   b7c3e:	4603      	mov	r3, r0
   b7c40:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  // Begin with the specified index.
  int start = start_indices[axis];
   b7c42:	eb03 0142 	add.w	r1, r3, r2, lsl #1

  // begin_mask override
  if (begin_mask & 1 << axis) {
   b7c46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
  int start = start_indices[axis];
   b7c4a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  if (begin_mask & 1 << axis) {
   b7c4e:	4113      	asrs	r3, r2
   b7c50:	07db      	lsls	r3, r3, #31
   b7c52:	d507      	bpl.n	b7c64 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x28>
    if (strides[axis] > 0) {
   b7c54:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   b7c58:	2b00      	cmp	r3, #0
   b7c5a:	bfcc      	ite	gt
   b7c5c:	f04f 4400 	movgt.w	r4, #2147483648	; 0x80000000
   b7c60:	f06f 4400 	mvnle.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  int axis_size = input_shape.Dims(axis);
   b7c64:	4611      	mov	r1, r2
   b7c66:	f7fe fbb7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (start < 0) {
   b7c6a:	2c00      	cmp	r4, #0
    start += axis_size;
   b7c6c:	bfb8      	it	lt
   b7c6e:	1824      	addlt	r4, r4, r0
  TFLITE_DCHECK(!(hi < lo));
   b7c70:	3801      	subs	r0, #1
   b7c72:	d501      	bpl.n	b7c78 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3c>
   b7c74:	f00c fe12 	bl	c489c <abort>
  if (hi < v) return hi;
   b7c78:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   b7c7a:	bfa8      	it	ge
   b7c7c:	ea24 70e4 	bicge.w	r0, r4, r4, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   b7c80:	bd10      	pop	{r4, pc}

000b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   b7c82:	b570      	push	{r4, r5, r6, lr}
   b7c84:	4605      	mov	r5, r0
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
   b7c86:	f105 0616 	add.w	r6, r5, #22

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
  int stop = stop_indices[axis];
   b7c8a:	eb05 0442 	add.w	r4, r5, r2, lsl #1
                       int start_for_axis) {
   b7c8e:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
   b7c90:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   b7c94:	f9b5 5026 	ldrsh.w	r5, [r5, #38]	; 0x26
  int stop = stop_indices[axis];
   b7c98:	f9b4 400c 	ldrsh.w	r4, [r4, #12]
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   b7c9c:	4115      	asrs	r5, r2

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   b7c9e:	07ed      	lsls	r5, r5, #31
    stop = start_for_axis + 1;
   b7ca0:	bf48      	it	mi
   b7ca2:	1c5c      	addmi	r4, r3, #1
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   b7ca4:	fa41 f302 	asr.w	r3, r1, r2
   b7ca8:	07d9      	lsls	r1, r3, #31
    if (strides[axis] > 0) {
   b7caa:	f936 5012 	ldrsh.w	r5, [r6, r2, lsl #1]
  if (end_mask & (1 << axis)) {
   b7cae:	d505      	bpl.n	b7cbc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3a>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
   b7cb0:	2d00      	cmp	r5, #0
   b7cb2:	bfd4      	ite	le
   b7cb4:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
   b7cb8:	f06f 4400 	mvngt.w	r4, #2147483648	; 0x80000000
      stop = std::numeric_limits<int>::lowest();
    }
  }

  // Handle negative indices
  const int axis_size = input_shape.Dims(axis);
   b7cbc:	4611      	mov	r1, r2
   b7cbe:	f7fe fb8b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (stop < 0) {
   b7cc2:	2c00      	cmp	r4, #0
    stop += axis_size;
   b7cc4:	bfb8      	it	lt
   b7cc6:	1824      	addlt	r4, r4, r0
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   b7cc8:	2d00      	cmp	r5, #0
   b7cca:	dd08      	ble.n	b7cde <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  TFLITE_DCHECK(!(hi < lo));
   b7ccc:	2800      	cmp	r0, #0
   b7cce:	da01      	bge.n	b7cd4 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x52>
   b7cd0:	f00c fde4 	bl	c489c <abort>
  if (hi < v) return hi;
   b7cd4:	4284      	cmp	r4, r0
   b7cd6:	dc01      	bgt.n	b7cdc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
  if (v < lo) return lo;
   b7cd8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   b7cdc:	bd70      	pop	{r4, r5, r6, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   b7cde:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   b7ce0:	1c43      	adds	r3, r0, #1
   b7ce2:	dbf5      	blt.n	b7cd0 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4e>
  if (hi < v) return hi;
   b7ce4:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   b7ce6:	bfa8      	it	ge
   b7ce8:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
  return stop;
   b7cec:	e7f6      	b.n	b7cdc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>

000b7cee <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
constexpr int kEndTensor = 2;
constexpr int kStridesTensor = 3;
constexpr int kOutputTensor = 0;

struct StridedSliceContext {
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   b7cee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7cf0:	6816      	ldr	r6, [r2, #0]
   b7cf2:	6889      	ldr	r1, [r1, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   b7cf4:	6954      	ldr	r4, [r2, #20]
   b7cf6:	68b7      	ldr	r7, [r6, #8]
   b7cf8:	6875      	ldr	r5, [r6, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7cfa:	6852      	ldr	r2, [r2, #4]
   b7cfc:	6004      	str	r4, [r0, #0]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b7cfe:	2438      	movs	r4, #56	; 0x38
   b7d00:	fb04 1707 	mla	r7, r4, r7, r1
   b7d04:	fb04 1505 	mla	r5, r4, r5, r1
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7d08:	6852      	ldr	r2, [r2, #4]
    input = GetInput(context, node, kInputTensor);
    begin = GetInput(context, node, kBeginTensor);
   b7d0a:	6087      	str	r7, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b7d0c:	68f7      	ldr	r7, [r6, #12]
   b7d0e:	6936      	ldr	r6, [r6, #16]
    input = GetInput(context, node, kInputTensor);
   b7d10:	6045      	str	r5, [r0, #4]
   b7d12:	fb04 1707 	mla	r7, r4, r7, r1
   b7d16:	fb04 1606 	mla	r6, r4, r6, r1
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b7d1a:	fb04 1102 	mla	r1, r4, r2, r1
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   b7d1e:	68aa      	ldr	r2, [r5, #8]
    end = GetInput(context, node, kEndTensor);
   b7d20:	60c7      	str	r7, [r0, #12]
    strides = GetInput(context, node, kStridesTensor);
    output = GetOutput(context, node, kOutputTensor);
    dims = NumDimensions(input);
   b7d22:	6812      	ldr	r2, [r2, #0]
    strides = GetInput(context, node, kStridesTensor);
   b7d24:	6106      	str	r6, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   b7d26:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   b7d28:	6182      	str	r2, [r0, #24]
  }
   b7d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d2c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
// This Op only supports 1-4D cases and since we use the reference 4D
// implementation, the 1-3D tensors are mapped to 4D.
const int kMaxDim = 4;

tflite::StridedSliceParams BuildStridedSliceParams(
    StridedSliceContext* op_context) {
   b7d2c:	b570      	push	{r4, r5, r6, lr}
  tflite::StridedSliceParams op_params;
  op_params.start_indices_count = op_context->dims;
   b7d2e:	698e      	ldr	r6, [r1, #24]
   b7d30:	b273      	sxtb	r3, r6
   b7d32:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   b7d34:	7283      	strb	r3, [r0, #10]
  op_params.strides_count = op_context->dims;
   b7d36:	7503      	strb	r3, [r0, #20]

  for (int i = 0; i < op_context->dims; ++i) {
   b7d38:	2200      	movs	r2, #0
   b7d3a:	4603      	mov	r3, r0
   b7d3c:	4296      	cmp	r6, r2
   b7d3e:	dd13      	ble.n	b7d68 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3c>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   b7d40:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7d42:	b104      	cbz	r4, b7d46 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1a>
   b7d44:	6864      	ldr	r4, [r4, #4]
   b7d46:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   b7d4a:	805c      	strh	r4, [r3, #2]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   b7d4c:	68cc      	ldr	r4, [r1, #12]
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   b7d4e:	0095      	lsls	r5, r2, #2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b7d50:	b104      	cbz	r4, b7d54 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x28>
   b7d52:	6864      	ldr	r4, [r4, #4]
   b7d54:	5964      	ldr	r4, [r4, r5]
   b7d56:	819c      	strh	r4, [r3, #12]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   b7d58:	690c      	ldr	r4, [r1, #16]
   b7d5a:	b104      	cbz	r4, b7d5e <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x32>
   b7d5c:	6864      	ldr	r4, [r4, #4]
   b7d5e:	5964      	ldr	r4, [r4, r5]
   b7d60:	82dc      	strh	r4, [r3, #22]
  for (int i = 0; i < op_context->dims; ++i) {
   b7d62:	3201      	adds	r2, #1
   b7d64:	3302      	adds	r3, #2
   b7d66:	e7e9      	b.n	b7d3c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x10>
  }

  op_params.begin_mask = op_context->params->begin_mask;
   b7d68:	680b      	ldr	r3, [r1, #0]
   b7d6a:	681a      	ldr	r2, [r3, #0]
  op_params.ellipsis_mask = 0;
  op_params.end_mask = op_context->params->end_mask;
   b7d6c:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   b7d6e:	83c2      	strh	r2, [r0, #30]
  op_params.new_axis_mask = 0;
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   b7d70:	691b      	ldr	r3, [r3, #16]
  op_params.end_mask = op_context->params->end_mask;
   b7d72:	8441      	strh	r1, [r0, #34]	; 0x22
  op_params.ellipsis_mask = 0;
   b7d74:	2200      	movs	r2, #0
   b7d76:	8402      	strh	r2, [r0, #32]
  op_params.new_axis_mask = 0;
   b7d78:	8482      	strh	r2, [r0, #36]	; 0x24
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   b7d7a:	84c3      	strh	r3, [r0, #38]	; 0x26
  return op_params;
}
   b7d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7d80 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
   b7d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d84:	460e      	mov	r6, r1
  using ::tflite::strided_slice::StartForAxis;
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
   b7d86:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
   b7d88:	b095      	sub	sp, #84	; 0x54
   b7d8a:	4604      	mov	r4, r0
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
   b7d8c:	a80a      	add	r0, sp, #40	; 0x28
  TfLiteIntArray* output_shape = op_context->output->dims;
   b7d8e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
   b7d92:	f7ff ffcb 	bl	b7d2c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
   b7d96:	6871      	ldr	r1, [r6, #4]
   b7d98:	a805      	add	r0, sp, #20
   b7d9a:	f7fe fdb6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7d9e:	2500      	movs	r5, #0
   b7da0:	f8d6 9018 	ldr.w	r9, [r6, #24]
  int shape_size = 0;
   b7da4:	462f      	mov	r7, r5
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7da6:	45a9      	cmp	r9, r5
   b7da8:	dd4d      	ble.n	b7e46 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
   b7daa:	6933      	ldr	r3, [r6, #16]
   b7dac:	b103      	cbz	r3, b7db0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
   b7dae:	685b      	ldr	r3, [r3, #4]
   b7db0:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
   b7db4:	f1bb 0f00 	cmp.w	fp, #0
   b7db8:	d10b      	bne.n	b7dd2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
   b7dba:	6963      	ldr	r3, [r4, #20]
   b7dbc:	4929      	ldr	r1, [pc, #164]	; (b7e64 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
   b7dbe:	4620      	mov	r0, r4
   b7dc0:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7dc2:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
   b7dc4:	a805      	add	r0, sp, #20
   b7dc6:	f7fe fafc 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
   b7dca:	4620      	mov	r0, r4
   b7dcc:	b015      	add	sp, #84	; 0x54
   b7dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   b7dd2:	462a      	mov	r2, r5
   b7dd4:	a905      	add	r1, sp, #20
   b7dd6:	a80a      	add	r0, sp, #40	; 0x28
   b7dd8:	f7ff ff30 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   b7ddc:	462a      	mov	r2, r5
   b7dde:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   b7de0:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   b7de2:	a905      	add	r1, sp, #20
   b7de4:	a80a      	add	r0, sp, #40	; 0x28
   b7de6:	f7ff ff4c 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
   b7dea:	6833      	ldr	r3, [r6, #0]
   b7dec:	691b      	ldr	r3, [r3, #16]
   b7dee:	412b      	asrs	r3, r5
    if (shrink_axis) {
   b7df0:	07db      	lsls	r3, r3, #31
   b7df2:	d426      	bmi.n	b7e42 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   b7df4:	eba0 000a 	sub.w	r0, r0, sl
   b7df8:	ee07 0a90 	vmov	s15, r0
   b7dfc:	ee07 ba10 	vmov	s14, fp
   b7e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7e04:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
  { return __builtin_ceilf(__x); }
   b7e08:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7e0c:	f00d faa2 	bl	c5354 <ceilf>
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   b7e10:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   b7e14:	6852      	ldr	r2, [r2, #4]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   b7e16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7e1a:	ee17 3a90 	vmov	r3, s15
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
   b7e1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   b7e22:	429a      	cmp	r2, r3
   b7e24:	d00c      	beq.n	b7e40 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
   b7e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7e2a:	4b0f      	ldr	r3, [pc, #60]	; (b7e68 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
   b7e2c:	9301      	str	r3, [sp, #4]
   b7e2e:	4b0f      	ldr	r3, [pc, #60]	; (b7e6c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
   b7e30:	9300      	str	r3, [sp, #0]
   b7e32:	6965      	ldr	r5, [r4, #20]
   b7e34:	2373      	movs	r3, #115	; 0x73
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7e36:	4a0e      	ldr	r2, [pc, #56]	; (b7e70 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
   b7e38:	490e      	ldr	r1, [pc, #56]	; (b7e74 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
   b7e3a:	4620      	mov	r0, r4
   b7e3c:	47a8      	blx	r5
   b7e3e:	e7c0      	b.n	b7dc2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
   b7e40:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
   b7e42:	3501      	adds	r5, #1
   b7e44:	e7af      	b.n	b7da6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   b7e46:	f8d8 3000 	ldr.w	r3, [r8]
   b7e4a:	42bb      	cmp	r3, r7
   b7e4c:	d008      	beq.n	b7e60 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
   b7e4e:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b7e52:	4b09      	ldr	r3, [pc, #36]	; (b7e78 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
   b7e54:	9301      	str	r3, [sp, #4]
   b7e56:	4b09      	ldr	r3, [pc, #36]	; (b7e7c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
   b7e58:	9300      	str	r3, [sp, #0]
   b7e5a:	6965      	ldr	r5, [r4, #20]
   b7e5c:	2377      	movs	r3, #119	; 0x77
   b7e5e:	e7ea      	b.n	b7e36 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
   b7e60:	2400      	movs	r4, #0
   b7e62:	e7af      	b.n	b7dc4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
   b7e64:	000c82db 	.word	0x000c82db
   b7e68:	000c83e9 	.word	0x000c83e9
   b7e6c:	000c83f3 	.word	0x000c83f3
   b7e70:	000c8372 	.word	0x000c8372
   b7e74:	000c70fc 	.word	0x000c70fc
   b7e78:	000c8412 	.word	0x000c8412
   b7e7c:	000c841d 	.word	0x000c841d

000b7e80 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b7e80:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b7e82:	680b      	ldr	r3, [r1, #0]
   b7e84:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   b7e86:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b7e88:	b08c      	sub	sp, #48	; 0x30
   b7e8a:	4605      	mov	r5, r0
   b7e8c:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   b7e8e:	d00e      	beq.n	b7eae <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   b7e90:	2204      	movs	r2, #4
   b7e92:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b7e96:	4b15      	ldr	r3, [pc, #84]	; (b7eec <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
   b7e98:	9301      	str	r3, [sp, #4]
   b7e9a:	4b15      	ldr	r3, [pc, #84]	; (b7ef0 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   b7e9c:	9300      	str	r3, [sp, #0]
   b7e9e:	6944      	ldr	r4, [r0, #20]
   b7ea0:	237c      	movs	r3, #124	; 0x7c
   b7ea2:	4a14      	ldr	r2, [pc, #80]	; (b7ef4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   b7ea4:	4914      	ldr	r1, [pc, #80]	; (b7ef8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   b7ea6:	47a0      	blx	r4
   b7ea8:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
   b7eaa:	b00c      	add	sp, #48	; 0x30
   b7eac:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b7eae:	684b      	ldr	r3, [r1, #4]
   b7eb0:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b7eb2:	2c01      	cmp	r4, #1
   b7eb4:	d009      	beq.n	b7eca <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   b7eb6:	2601      	movs	r6, #1
   b7eb8:	4b10      	ldr	r3, [pc, #64]	; (b7efc <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   b7eba:	9301      	str	r3, [sp, #4]
   b7ebc:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b7ec0:	4b0f      	ldr	r3, [pc, #60]	; (b7f00 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   b7ec2:	9300      	str	r3, [sp, #0]
   b7ec4:	6944      	ldr	r4, [r0, #20]
   b7ec6:	237d      	movs	r3, #125	; 0x7d
   b7ec8:	e7eb      	b.n	b7ea2 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
   b7eca:	4601      	mov	r1, r0
   b7ecc:	a805      	add	r0, sp, #20
   b7ece:	f7ff ff0e 	bl	b7cee <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
   b7ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7ed4:	2b04      	cmp	r3, #4
   b7ed6:	dd04      	ble.n	b7ee2 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   b7ed8:	696b      	ldr	r3, [r5, #20]
   b7eda:	490a      	ldr	r1, [pc, #40]	; (b7f04 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   b7edc:	4628      	mov	r0, r5
   b7ede:	4798      	blx	r3
   b7ee0:	e7e2      	b.n	b7ea8 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
   b7ee2:	a905      	add	r1, sp, #20
   b7ee4:	4628      	mov	r0, r5
   b7ee6:	f7ff ff4b 	bl	b7d80 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
   b7eea:	e7de      	b.n	b7eaa <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   b7eec:	000c84e4 	.word	0x000c84e4
   b7ef0:	000c8430 	.word	0x000c8430
   b7ef4:	000c8372 	.word	0x000c8372
   b7ef8:	000c70fc 	.word	0x000c70fc
   b7efc:	000c8bee 	.word	0x000c8bee
   b7f00:	000c8440 	.word	0x000c8440
   b7f04:	000c8451 	.word	0x000c8451

000b7f08 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
TfLiteRegistration* Register_STRIDED_SLICE() {
  static TfLiteRegistration r = {
      nullptr, nullptr, strided_slice::Prepare,
      strided_slice::Eval<strided_slice::kReference>};
  return &r;
}
   b7f08:	4800      	ldr	r0, [pc, #0]	; (b7f0c <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x4>)
   b7f0a:	4770      	bx	lr
   b7f0c:	2003c110 	.word	0x2003c110

000b7f10 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b7f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f14:	b09f      	sub	sp, #124	; 0x7c
   b7f16:	460e      	mov	r6, r1
   b7f18:	9207      	str	r2, [sp, #28]
   b7f1a:	461d      	mov	r5, r3
                         const RuntimeShape& unextended_input_shape,
                         const T* input_data,
                         const RuntimeShape& unextended_output_shape,
                         T* output_data) {
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   b7f1c:	4604      	mov	r4, r0
   b7f1e:	aa14      	add	r2, sp, #80	; 0x50
   b7f20:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b7f24:	6820      	ldr	r0, [r4, #0]
   b7f26:	6861      	ldr	r1, [r4, #4]
   b7f28:	4613      	mov	r3, r2
   b7f2a:	c303      	stmia	r3!, {r0, r1}
   b7f2c:	3408      	adds	r4, #8
   b7f2e:	42bc      	cmp	r4, r7
   b7f30:	461a      	mov	r2, r3
   b7f32:	d1f7      	bne.n	b7f24 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b7f34:	6833      	ldr	r3, [r6, #0]
   b7f36:	2b04      	cmp	r3, #4
   b7f38:	dd01      	ble.n	b7f3e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b7f3a:	f00c fcaf 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b7f3e:	682b      	ldr	r3, [r5, #0]
   b7f40:	2b04      	cmp	r3, #4
   b7f42:	dcfa      	bgt.n	b7f3a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
    return RuntimeShape(new_shape_size, shape, 1);
   b7f44:	4632      	mov	r2, r6
   b7f46:	2301      	movs	r3, #1
   b7f48:	2104      	movs	r1, #4
   b7f4a:	a80a      	add	r0, sp, #40	; 0x28
   b7f4c:	f7fe fa7e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b7f50:	2301      	movs	r3, #1
   b7f52:	462a      	mov	r2, r5
   b7f54:	2104      	movs	r1, #4
   b7f56:	a80f      	add	r0, sp, #60	; 0x3c
   b7f58:	f7fe fa78 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  // Reverse and pad to 4 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 4D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b7f5c:	2104      	movs	r1, #4
   b7f5e:	a814      	add	r0, sp, #80	; 0x50
   b7f60:	f7ff fe12 	bl	b7b88 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b7f64:	2200      	movs	r2, #0
   b7f66:	a90a      	add	r1, sp, #40	; 0x28
   b7f68:	a814      	add	r0, sp, #80	; 0x50
   b7f6a:	f7ff fe67 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_b =
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7f6e:	2200      	movs	r2, #0
   b7f70:	4603      	mov	r3, r0
   b7f72:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b7f74:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7f76:	a814      	add	r0, sp, #80	; 0x50
   b7f78:	f7ff fe83 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7f7c:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b7f7e:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7f80:	a90a      	add	r1, sp, #40	; 0x28
   b7f82:	a814      	add	r0, sp, #80	; 0x50
   b7f84:	f7ff fe5a 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_h =
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f88:	2201      	movs	r2, #1
   b7f8a:	4603      	mov	r3, r0
   b7f8c:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b7f8e:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f90:	a814      	add	r0, sp, #80	; 0x50
   b7f92:	f7ff fe76 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7f96:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b7f98:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7f9a:	a90a      	add	r1, sp, #40	; 0x28
   b7f9c:	a814      	add	r0, sp, #80	; 0x50
   b7f9e:	f7ff fe4d 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_w =
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7fa2:	2202      	movs	r2, #2
   b7fa4:	4603      	mov	r3, r0
   b7fa6:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b7fa8:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7faa:	a814      	add	r0, sp, #80	; 0x50
   b7fac:	f7ff fe69 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7fb0:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b7fb2:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7fb4:	a90a      	add	r1, sp, #40	; 0x28
   b7fb6:	a814      	add	r0, sp, #80	; 0x50
   b7fb8:	f7ff fe40 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_d =
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7fbc:	2203      	movs	r2, #3
   b7fbe:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b7fc0:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7fc2:	a90a      	add	r1, sp, #40	; 0x28
   b7fc4:	a814      	add	r0, sp, #80	; 0x50
   b7fc6:	f7ff fe5c 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int in_b = start_b;
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b7fca:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b7fce:	9302      	str	r3, [sp, #8]
       in_b += params_copy.strides[0]) {
    for (int in_h = start_h;
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
         in_h += params_copy.strides[1]) {
      for (int in_w = start_w;
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b7fd0:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b7fd4:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
           in_w += params_copy.strides[2]) {
        for (int in_d = start_d; !strided_slice::LoopCondition(
                 in_d, stop_d, params_copy.strides[3]);
   b7fd8:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b7fdc:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b7fde:	4681      	mov	r9, r0

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   b7fe0:	9b02      	ldr	r3, [sp, #8]
   b7fe2:	2b00      	cmp	r3, #0
   b7fe4:	9b04      	ldr	r3, [sp, #16]
   b7fe6:	dd07      	ble.n	b7ff8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b7fe8:	429c      	cmp	r4, r3
   b7fea:	bfb4      	ite	lt
   b7fec:	2300      	movlt	r3, #0
   b7fee:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b7ff0:	2b00      	cmp	r3, #0
   b7ff2:	d14c      	bne.n	b808e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17e>
   b7ff4:	4632      	mov	r2, r6
   b7ff6:	e03c      	b.n	b8072 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x162>
   b7ff8:	429c      	cmp	r4, r3
   b7ffa:	bfcc      	ite	gt
   b7ffc:	2300      	movgt	r3, #0
   b7ffe:	2301      	movle	r3, #1
   b8000:	e7f6      	b.n	b7ff0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b8002:	429a      	cmp	r2, r3
   b8004:	bfcc      	ite	gt
   b8006:	2300      	movgt	r3, #0
   b8008:	2301      	movle	r3, #1
   b800a:	e03a      	b.n	b8082 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x172>
   b800c:	428b      	cmp	r3, r1
   b800e:	bfcc      	ite	gt
   b8010:	2100      	movgt	r1, #0
   b8012:	2101      	movle	r1, #1
   b8014:	e028      	b.n	b8068 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x158>
   b8016:	454d      	cmp	r5, r9
   b8018:	bfcc      	ite	gt
   b801a:	2100      	movgt	r1, #0
   b801c:	2101      	movle	r1, #1
   b801e:	e018      	b.n	b8052 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x142>
             in_d += params_copy.strides[3]) {
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b8020:	9500      	str	r5, [sp, #0]
   b8022:	4621      	mov	r1, r4
   b8024:	a80a      	add	r0, sp, #40	; 0x28
   b8026:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b802a:	f7fe fa3c 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b802e:	9b07      	ldr	r3, [sp, #28]
   b8030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b8034:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b8036:	6801      	ldr	r1, [r0, #0]
   b8038:	f843 1b04 	str.w	r1, [r3], #4
   b803c:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b803e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b8042:	445d      	add	r5, fp
   b8044:	f1bb 0f00 	cmp.w	fp, #0
   b8048:	dde5      	ble.n	b8016 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b804a:	454d      	cmp	r5, r9
   b804c:	bfb4      	ite	lt
   b804e:	2100      	movlt	r1, #0
   b8050:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b8052:	2900      	cmp	r1, #0
   b8054:	d0e4      	beq.n	b8020 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b8056:	4453      	add	r3, sl
   b8058:	f1ba 0f00 	cmp.w	sl, #0
   b805c:	9906      	ldr	r1, [sp, #24]
   b805e:	ddd5      	ble.n	b800c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b8060:	428b      	cmp	r3, r1
   b8062:	bfb4      	ite	lt
   b8064:	2100      	movlt	r1, #0
   b8066:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b8068:	b909      	cbnz	r1, b806e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b806a:	4645      	mov	r5, r8
   b806c:	e7ea      	b.n	b8044 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
         in_h += params_copy.strides[1]) {
   b806e:	9b03      	ldr	r3, [sp, #12]
   b8070:	441a      	add	r2, r3
   b8072:	9b03      	ldr	r3, [sp, #12]
   b8074:	2b00      	cmp	r3, #0
   b8076:	9b05      	ldr	r3, [sp, #20]
   b8078:	ddc3      	ble.n	b8002 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b807a:	429a      	cmp	r2, r3
   b807c:	bfb4      	ite	lt
   b807e:	2300      	movlt	r3, #0
   b8080:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b8082:	b90b      	cbnz	r3, b8088 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x178>
   b8084:	463b      	mov	r3, r7
   b8086:	e7e7      	b.n	b8058 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x148>
       in_b += params_copy.strides[0]) {
   b8088:	9b02      	ldr	r3, [sp, #8]
   b808a:	441c      	add	r4, r3
  for (int in_b = start_b;
   b808c:	e7a8      	b.n	b7fe0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b808e:	a80f      	add	r0, sp, #60	; 0x3c
   b8090:	f7fe f997 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b8094:	a80a      	add	r0, sp, #40	; 0x28
   b8096:	f7fe f994 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   b809a:	b01f      	add	sp, #124	; 0x7c
   b809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b80a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b80a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80a4:	b09f      	sub	sp, #124	; 0x7c
   b80a6:	460e      	mov	r6, r1
   b80a8:	9207      	str	r2, [sp, #28]
   b80aa:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   b80ac:	4604      	mov	r4, r0
   b80ae:	aa14      	add	r2, sp, #80	; 0x50
   b80b0:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b80b4:	6820      	ldr	r0, [r4, #0]
   b80b6:	6861      	ldr	r1, [r4, #4]
   b80b8:	4613      	mov	r3, r2
   b80ba:	c303      	stmia	r3!, {r0, r1}
   b80bc:	3408      	adds	r4, #8
   b80be:	42bc      	cmp	r4, r7
   b80c0:	461a      	mov	r2, r3
   b80c2:	d1f7      	bne.n	b80b4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b80c4:	6833      	ldr	r3, [r6, #0]
   b80c6:	2b04      	cmp	r3, #4
   b80c8:	dd01      	ble.n	b80ce <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b80ca:	f00c fbe7 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b80ce:	682b      	ldr	r3, [r5, #0]
   b80d0:	2b04      	cmp	r3, #4
   b80d2:	dcfa      	bgt.n	b80ca <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
   b80d4:	4632      	mov	r2, r6
   b80d6:	2301      	movs	r3, #1
   b80d8:	2104      	movs	r1, #4
   b80da:	a80a      	add	r0, sp, #40	; 0x28
   b80dc:	f7fe f9b6 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b80e0:	2301      	movs	r3, #1
   b80e2:	462a      	mov	r2, r5
   b80e4:	2104      	movs	r1, #4
   b80e6:	a80f      	add	r0, sp, #60	; 0x3c
   b80e8:	f7fe f9b0 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b80ec:	2104      	movs	r1, #4
   b80ee:	a814      	add	r0, sp, #80	; 0x50
   b80f0:	f7ff fd4a 	bl	b7b88 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b80f4:	2200      	movs	r2, #0
   b80f6:	a90a      	add	r1, sp, #40	; 0x28
   b80f8:	a814      	add	r0, sp, #80	; 0x50
   b80fa:	f7ff fd9f 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b80fe:	2200      	movs	r2, #0
   b8100:	4603      	mov	r3, r0
   b8102:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8104:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b8106:	a814      	add	r0, sp, #80	; 0x50
   b8108:	f7ff fdbb 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b810c:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b810e:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b8110:	a90a      	add	r1, sp, #40	; 0x28
   b8112:	a814      	add	r0, sp, #80	; 0x50
   b8114:	f7ff fd92 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8118:	2201      	movs	r2, #1
   b811a:	4603      	mov	r3, r0
   b811c:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b811e:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8120:	a814      	add	r0, sp, #80	; 0x50
   b8122:	f7ff fdae 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b8126:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b8128:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b812a:	a90a      	add	r1, sp, #40	; 0x28
   b812c:	a814      	add	r0, sp, #80	; 0x50
   b812e:	f7ff fd85 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b8132:	2202      	movs	r2, #2
   b8134:	4603      	mov	r3, r0
   b8136:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b8138:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b813a:	a814      	add	r0, sp, #80	; 0x50
   b813c:	f7ff fda1 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b8140:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b8142:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b8144:	a90a      	add	r1, sp, #40	; 0x28
   b8146:	a814      	add	r0, sp, #80	; 0x50
   b8148:	f7ff fd78 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b814c:	2203      	movs	r2, #3
   b814e:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b8150:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b8152:	a90a      	add	r1, sp, #40	; 0x28
   b8154:	a814      	add	r0, sp, #80	; 0x50
   b8156:	f7ff fd94 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b815a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b815e:	9302      	str	r3, [sp, #8]
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b8160:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b8164:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
                 in_d, stop_d, params_copy.strides[3]);
   b8168:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b816c:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b816e:	4681      	mov	r9, r0
   b8170:	9b02      	ldr	r3, [sp, #8]
   b8172:	2b00      	cmp	r3, #0
   b8174:	9b04      	ldr	r3, [sp, #16]
   b8176:	dd07      	ble.n	b8188 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b8178:	429c      	cmp	r4, r3
   b817a:	bfb4      	ite	lt
   b817c:	2300      	movlt	r3, #0
   b817e:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b8180:	2b00      	cmp	r3, #0
   b8182:	d14a      	bne.n	b821a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17a>
   b8184:	4632      	mov	r2, r6
   b8186:	e03a      	b.n	b81fe <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
   b8188:	429c      	cmp	r4, r3
   b818a:	bfcc      	ite	gt
   b818c:	2300      	movgt	r3, #0
   b818e:	2301      	movle	r3, #1
   b8190:	e7f6      	b.n	b8180 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b8192:	429a      	cmp	r2, r3
   b8194:	bfcc      	ite	gt
   b8196:	2300      	movgt	r3, #0
   b8198:	2301      	movle	r3, #1
   b819a:	e038      	b.n	b820e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x16e>
   b819c:	428b      	cmp	r3, r1
   b819e:	bfcc      	ite	gt
   b81a0:	2100      	movgt	r1, #0
   b81a2:	2101      	movle	r1, #1
   b81a4:	e026      	b.n	b81f4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x154>
   b81a6:	454d      	cmp	r5, r9
   b81a8:	bfcc      	ite	gt
   b81aa:	2100      	movgt	r1, #0
   b81ac:	2101      	movle	r1, #1
   b81ae:	e016      	b.n	b81de <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b81b0:	9500      	str	r5, [sp, #0]
   b81b2:	4621      	mov	r1, r4
   b81b4:	a80a      	add	r0, sp, #40	; 0x28
   b81b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b81ba:	f7fe f974 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b81be:	9b07      	ldr	r3, [sp, #28]
   b81c0:	5c19      	ldrb	r1, [r3, r0]
   b81c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b81c4:	f803 1b01 	strb.w	r1, [r3], #1
   b81c8:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b81ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b81ce:	445d      	add	r5, fp
   b81d0:	f1bb 0f00 	cmp.w	fp, #0
   b81d4:	dde7      	ble.n	b81a6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b81d6:	454d      	cmp	r5, r9
   b81d8:	bfb4      	ite	lt
   b81da:	2100      	movlt	r1, #0
   b81dc:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b81de:	2900      	cmp	r1, #0
   b81e0:	d0e6      	beq.n	b81b0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b81e2:	4453      	add	r3, sl
   b81e4:	f1ba 0f00 	cmp.w	sl, #0
   b81e8:	9906      	ldr	r1, [sp, #24]
   b81ea:	ddd7      	ble.n	b819c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b81ec:	428b      	cmp	r3, r1
   b81ee:	bfb4      	ite	lt
   b81f0:	2100      	movlt	r1, #0
   b81f2:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b81f4:	b909      	cbnz	r1, b81fa <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15a>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b81f6:	4645      	mov	r5, r8
   b81f8:	e7ea      	b.n	b81d0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
         in_h += params_copy.strides[1]) {
   b81fa:	9b03      	ldr	r3, [sp, #12]
   b81fc:	441a      	add	r2, r3
   b81fe:	9b03      	ldr	r3, [sp, #12]
   b8200:	2b00      	cmp	r3, #0
   b8202:	9b05      	ldr	r3, [sp, #20]
   b8204:	ddc5      	ble.n	b8192 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b8206:	429a      	cmp	r2, r3
   b8208:	bfb4      	ite	lt
   b820a:	2300      	movlt	r3, #0
   b820c:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b820e:	b90b      	cbnz	r3, b8214 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x174>
   b8210:	463b      	mov	r3, r7
   b8212:	e7e7      	b.n	b81e4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x144>
       in_b += params_copy.strides[0]) {
   b8214:	9b02      	ldr	r3, [sp, #8]
   b8216:	441c      	add	r4, r3
  for (int in_b = start_b;
   b8218:	e7aa      	b.n	b8170 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b821a:	a80f      	add	r0, sp, #60	; 0x3c
   b821c:	f7fe f8d1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b8220:	a80a      	add	r0, sp, #40	; 0x28
   b8222:	f7fe f8ce 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b8226:	b01f      	add	sp, #124	; 0x7c
   b8228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b822c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   b822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8230:	b09f      	sub	sp, #124	; 0x7c
   b8232:	460e      	mov	r6, r1
   b8234:	9207      	str	r2, [sp, #28]
   b8236:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   b8238:	4604      	mov	r4, r0
   b823a:	aa14      	add	r2, sp, #80	; 0x50
   b823c:	f100 0728 	add.w	r7, r0, #40	; 0x28
   b8240:	6820      	ldr	r0, [r4, #0]
   b8242:	6861      	ldr	r1, [r4, #4]
   b8244:	4613      	mov	r3, r2
   b8246:	c303      	stmia	r3!, {r0, r1}
   b8248:	3408      	adds	r4, #8
   b824a:	42bc      	cmp	r4, r7
   b824c:	461a      	mov	r2, r3
   b824e:	d1f7      	bne.n	b8240 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   b8250:	6833      	ldr	r3, [r6, #0]
   b8252:	2b04      	cmp	r3, #4
   b8254:	dd01      	ble.n	b825a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
   b8256:	f00c fb21 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   b825a:	682b      	ldr	r3, [r5, #0]
   b825c:	2b04      	cmp	r3, #4
   b825e:	dcfa      	bgt.n	b8256 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2a>
   b8260:	4632      	mov	r2, r6
   b8262:	2301      	movs	r3, #1
   b8264:	2104      	movs	r1, #4
   b8266:	a80a      	add	r0, sp, #40	; 0x28
   b8268:	f7fe f8f0 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b826c:	2301      	movs	r3, #1
   b826e:	462a      	mov	r2, r5
   b8270:	2104      	movs	r1, #4
   b8272:	a80f      	add	r0, sp, #60	; 0x3c
   b8274:	f7fe f8ea 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 4);
   b8278:	2104      	movs	r1, #4
   b827a:	a814      	add	r0, sp, #80	; 0x50
   b827c:	f7ff fc84 	bl	b7b88 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8280:	2200      	movs	r2, #0
   b8282:	a90a      	add	r1, sp, #40	; 0x28
   b8284:	a814      	add	r0, sp, #80	; 0x50
   b8286:	f7ff fcd9 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b828a:	2200      	movs	r2, #0
   b828c:	4603      	mov	r3, r0
   b828e:	a90a      	add	r1, sp, #40	; 0x28
  const int start_b = strided_slice::StartForAxis(params_copy, input_shape, 0);
   b8290:	4604      	mov	r4, r0
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b8292:	a814      	add	r0, sp, #80	; 0x50
   b8294:	f7ff fcf5 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b8298:	2201      	movs	r2, #1
      strided_slice::StopForAxis(params_copy, input_shape, 0, start_b);
   b829a:	9004      	str	r0, [sp, #16]
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b829c:	a90a      	add	r1, sp, #40	; 0x28
   b829e:	a814      	add	r0, sp, #80	; 0x50
   b82a0:	f7ff fccc 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b82a4:	2201      	movs	r2, #1
   b82a6:	4603      	mov	r3, r0
   b82a8:	a90a      	add	r1, sp, #40	; 0x28
  const int start_h = strided_slice::StartForAxis(params_copy, input_shape, 1);
   b82aa:	4606      	mov	r6, r0
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b82ac:	a814      	add	r0, sp, #80	; 0x50
   b82ae:	f7ff fce8 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b82b2:	2202      	movs	r2, #2
      strided_slice::StopForAxis(params_copy, input_shape, 1, start_h);
   b82b4:	9005      	str	r0, [sp, #20]
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b82b6:	a90a      	add	r1, sp, #40	; 0x28
   b82b8:	a814      	add	r0, sp, #80	; 0x50
   b82ba:	f7ff fcbf 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b82be:	2202      	movs	r2, #2
   b82c0:	4603      	mov	r3, r0
   b82c2:	a90a      	add	r1, sp, #40	; 0x28
  const int start_w = strided_slice::StartForAxis(params_copy, input_shape, 2);
   b82c4:	4607      	mov	r7, r0
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b82c6:	a814      	add	r0, sp, #80	; 0x50
   b82c8:	f7ff fcdb 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b82cc:	2203      	movs	r2, #3
      strided_slice::StopForAxis(params_copy, input_shape, 2, start_w);
   b82ce:	9006      	str	r0, [sp, #24]
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b82d0:	a90a      	add	r1, sp, #40	; 0x28
   b82d2:	a814      	add	r0, sp, #80	; 0x50
   b82d4:	f7ff fcb2 	bl	b7c3c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b82d8:	2203      	movs	r2, #3
   b82da:	4603      	mov	r3, r0
  const int start_d = strided_slice::StartForAxis(params_copy, input_shape, 3);
   b82dc:	4680      	mov	r8, r0
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b82de:	a90a      	add	r1, sp, #40	; 0x28
   b82e0:	a814      	add	r0, sp, #80	; 0x50
   b82e2:	f7ff fcce 	bl	b7c82 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b82e6:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   b82ea:	9302      	str	r3, [sp, #8]
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b82ec:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b82f0:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
                 in_d, stop_d, params_copy.strides[3]);
   b82f4:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b82f8:	9303      	str	r3, [sp, #12]
      strided_slice::StopForAxis(params_copy, input_shape, 3, start_d);
   b82fa:	4681      	mov	r9, r0
   b82fc:	9b02      	ldr	r3, [sp, #8]
   b82fe:	2b00      	cmp	r3, #0
   b8300:	9b04      	ldr	r3, [sp, #16]
   b8302:	dd07      	ble.n	b8314 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
   b8304:	429c      	cmp	r4, r3
   b8306:	bfb4      	ite	lt
   b8308:	2300      	movlt	r3, #0
   b830a:	2301      	movge	r3, #1
       !strided_slice::LoopCondition(in_b, stop_b, params_copy.strides[0]);
   b830c:	2b00      	cmp	r3, #0
   b830e:	d14a      	bne.n	b83a6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x17a>
   b8310:	4632      	mov	r2, r6
   b8312:	e03a      	b.n	b838a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
   b8314:	429c      	cmp	r4, r3
   b8316:	bfcc      	ite	gt
   b8318:	2300      	movgt	r3, #0
   b831a:	2301      	movle	r3, #1
   b831c:	e7f6      	b.n	b830c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe0>
   b831e:	429a      	cmp	r2, r3
   b8320:	bfcc      	ite	gt
   b8322:	2300      	movgt	r3, #0
   b8324:	2301      	movle	r3, #1
   b8326:	e038      	b.n	b839a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x16e>
   b8328:	428b      	cmp	r3, r1
   b832a:	bfcc      	ite	gt
   b832c:	2100      	movgt	r1, #0
   b832e:	2101      	movle	r1, #1
   b8330:	e026      	b.n	b8380 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x154>
   b8332:	454d      	cmp	r5, r9
   b8334:	bfcc      	ite	gt
   b8336:	2100      	movgt	r1, #0
   b8338:	2101      	movle	r1, #1
   b833a:	e016      	b.n	b836a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
          *out_ptr++ = input_data[Offset(input_shape, in_b, in_h, in_w, in_d)];
   b833c:	9500      	str	r5, [sp, #0]
   b833e:	4621      	mov	r1, r4
   b8340:	a80a      	add	r0, sp, #40	; 0x28
   b8342:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8346:	f7fe f8ae 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b834a:	9b07      	ldr	r3, [sp, #28]
   b834c:	5619      	ldrsb	r1, [r3, r0]
   b834e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b8350:	f803 1b01 	strb.w	r1, [r3], #1
   b8354:	9328      	str	r3, [sp, #160]	; 0xa0
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b8356:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
             in_d += params_copy.strides[3]) {
   b835a:	445d      	add	r5, fp
   b835c:	f1bb 0f00 	cmp.w	fp, #0
   b8360:	dde7      	ble.n	b8332 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
   b8362:	454d      	cmp	r5, r9
   b8364:	bfb4      	ite	lt
   b8366:	2100      	movlt	r1, #0
   b8368:	2101      	movge	r1, #1
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b836a:	2900      	cmp	r1, #0
   b836c:	d0e6      	beq.n	b833c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
           in_w += params_copy.strides[2]) {
   b836e:	4453      	add	r3, sl
   b8370:	f1ba 0f00 	cmp.w	sl, #0
   b8374:	9906      	ldr	r1, [sp, #24]
   b8376:	ddd7      	ble.n	b8328 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
   b8378:	428b      	cmp	r3, r1
   b837a:	bfb4      	ite	lt
   b837c:	2100      	movlt	r1, #0
   b837e:	2101      	movge	r1, #1
           !strided_slice::LoopCondition(in_w, stop_w, params_copy.strides[2]);
   b8380:	b909      	cbnz	r1, b8386 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15a>
        for (int in_d = start_d; !strided_slice::LoopCondition(
   b8382:	4645      	mov	r5, r8
   b8384:	e7ea      	b.n	b835c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
         in_h += params_copy.strides[1]) {
   b8386:	9b03      	ldr	r3, [sp, #12]
   b8388:	441a      	add	r2, r3
   b838a:	9b03      	ldr	r3, [sp, #12]
   b838c:	2b00      	cmp	r3, #0
   b838e:	9b05      	ldr	r3, [sp, #20]
   b8390:	ddc5      	ble.n	b831e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
   b8392:	429a      	cmp	r2, r3
   b8394:	bfb4      	ite	lt
   b8396:	2300      	movlt	r3, #0
   b8398:	2301      	movge	r3, #1
         !strided_slice::LoopCondition(in_h, stop_h, params_copy.strides[1]);
   b839a:	b90b      	cbnz	r3, b83a0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x174>
   b839c:	463b      	mov	r3, r7
   b839e:	e7e7      	b.n	b8370 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x144>
       in_b += params_copy.strides[0]) {
   b83a0:	9b02      	ldr	r3, [sp, #8]
   b83a2:	441c      	add	r4, r3
  for (int in_b = start_b;
   b83a4:	e7aa      	b.n	b82fc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
  const RuntimeShape output_shape =
   b83a6:	a80f      	add	r0, sp, #60	; 0x3c
   b83a8:	f7fe f80b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   b83ac:	a80a      	add	r0, sp, #40	; 0x28
   b83ae:	f7fe f808 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b83b2:	b01f      	add	sp, #124	; 0x7c
   b83b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b83b8 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b83b8:	b510      	push	{r4, lr}
   b83ba:	b09e      	sub	sp, #120	; 0x78
   b83bc:	460a      	mov	r2, r1
   b83be:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
   b83c0:	4601      	mov	r1, r0
   b83c2:	a80d      	add	r0, sp, #52	; 0x34
   b83c4:	f7ff fc93 	bl	b7cee <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
   b83c8:	a90d      	add	r1, sp, #52	; 0x34
   b83ca:	a814      	add	r0, sp, #80	; 0x50
   b83cc:	f7ff fcae 	bl	b7d2c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
   b83d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   b83d2:	780a      	ldrb	r2, [r1, #0]
   b83d4:	2a03      	cmp	r2, #3
   b83d6:	d020      	beq.n	b841a <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
   b83d8:	2a09      	cmp	r2, #9
   b83da:	d033      	beq.n	b8444 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   b83dc:	2a01      	cmp	r2, #1
   b83de:	d146      	bne.n	b846e <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb6>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
   b83e0:	a803      	add	r0, sp, #12
   b83e2:	f7fe fa92 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   b83e8:	b104      	cbz	r4, b83ec <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
   b83ea:	6864      	ldr	r4, [r4, #4]
   b83ec:	9912      	ldr	r1, [sp, #72]	; 0x48
   b83ee:	a808      	add	r0, sp, #32
   b83f0:	f7fe fa8b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b83f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b83f6:	b103      	cbz	r3, b83fa <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
   b83f8:	685b      	ldr	r3, [r3, #4]
   b83fa:	9300      	str	r3, [sp, #0]
   b83fc:	4622      	mov	r2, r4
   b83fe:	ab08      	add	r3, sp, #32
   b8400:	a903      	add	r1, sp, #12
   b8402:	a814      	add	r0, sp, #80	; 0x50
   b8404:	f7ff fd84 	bl	b7f10 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   b8408:	a808      	add	r0, sp, #32
   b840a:	f7fd ffda 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   b840e:	a803      	add	r0, sp, #12
   b8410:	f7fd ffd7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   b8414:	2000      	movs	r0, #0
}
   b8416:	b01e      	add	sp, #120	; 0x78
   b8418:	bd10      	pop	{r4, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   b841a:	a803      	add	r0, sp, #12
   b841c:	f7fe fa75 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8420:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b8422:	b104      	cbz	r4, b8426 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x6e>
   b8424:	6864      	ldr	r4, [r4, #4]
   b8426:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8428:	a808      	add	r0, sp, #32
   b842a:	f7fe fa6e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b842e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8430:	b103      	cbz	r3, b8434 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
   b8432:	685b      	ldr	r3, [r3, #4]
   b8434:	9300      	str	r3, [sp, #0]
   b8436:	4622      	mov	r2, r4
   b8438:	ab08      	add	r3, sp, #32
   b843a:	a903      	add	r1, sp, #12
   b843c:	a814      	add	r0, sp, #80	; 0x50
   b843e:	f7ff fe2f 	bl	b80a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   b8442:	e7e1      	b.n	b8408 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
   b8444:	a803      	add	r0, sp, #12
   b8446:	f7fe fa60 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b844a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b844c:	b104      	cbz	r4, b8450 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>
   b844e:	6864      	ldr	r4, [r4, #4]
   b8450:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8452:	a808      	add	r0, sp, #32
   b8454:	f7fe fa59 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8458:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b845a:	b103      	cbz	r3, b845e <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa6>
   b845c:	685b      	ldr	r3, [r3, #4]
   b845e:	9300      	str	r3, [sp, #0]
   b8460:	4622      	mov	r2, r4
   b8462:	ab08      	add	r3, sp, #32
   b8464:	a903      	add	r1, sp, #12
   b8466:	a814      	add	r0, sp, #80	; 0x50
   b8468:	f7ff fee0 	bl	b822c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   b846c:	e7cc      	b.n	b8408 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      context->ReportError(context,
   b846e:	4620      	mov	r0, r4
   b8470:	6963      	ldr	r3, [r4, #20]
   b8472:	4902      	ldr	r1, [pc, #8]	; (b847c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
   b8474:	4798      	blx	r3
      return kTfLiteError;
   b8476:	2001      	movs	r0, #1
   b8478:	e7cd      	b.n	b8416 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
   b847a:	bf00      	nop
   b847c:	000c84e6 	.word	0x000c84e6

000b8480 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8480:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b8482:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b8484:	683d      	ldr	r5, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8486:	2d01      	cmp	r5, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8488:	b085      	sub	sp, #20
   b848a:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b848c:	d00c      	beq.n	b84a8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   b848e:	2401      	movs	r4, #1
   b8490:	4b3b      	ldr	r3, [pc, #236]	; (b8580 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   b8492:	9301      	str	r3, [sp, #4]
   b8494:	e9cd 5402 	strd	r5, r4, [sp, #8]
   b8498:	4b3a      	ldr	r3, [pc, #232]	; (b8584 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   b849a:	9300      	str	r3, [sp, #0]
   b849c:	6945      	ldr	r5, [r0, #20]
   b849e:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   b84a0:	4a39      	ldr	r2, [pc, #228]	; (b8588 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b84a2:	493a      	ldr	r1, [pc, #232]	; (b858c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b84a4:	47a8      	blx	r5
   b84a6:	e00f      	b.n	b84c8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b84a8:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b84aa:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b84ac:	2c01      	cmp	r4, #1
   b84ae:	d00e      	beq.n	b84ce <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
   b84b0:	4b33      	ldr	r3, [pc, #204]	; (b8580 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   b84b2:	9301      	str	r3, [sp, #4]
   b84b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b84b8:	4b35      	ldr	r3, [pc, #212]	; (b8590 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   b84ba:	9300      	str	r3, [sp, #0]
   b84bc:	6944      	ldr	r4, [r0, #20]
   b84be:	2322      	movs	r3, #34	; 0x22
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   b84c0:	4a31      	ldr	r2, [pc, #196]	; (b8588 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b84c2:	4932      	ldr	r1, [pc, #200]	; (b858c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   b84c4:	47a0      	blx	r4
   b84c6:	462c      	mov	r4, r5
  }
  return kTfLiteOk;
}
   b84c8:	4620      	mov	r0, r4
   b84ca:	b005      	add	sp, #20
   b84cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b84ce:	6879      	ldr	r1, [r7, #4]
   b84d0:	6882      	ldr	r2, [r0, #8]
   b84d2:	2738      	movs	r7, #56	; 0x38
   b84d4:	4379      	muls	r1, r7
   b84d6:	eb02 0c01 	add.w	ip, r2, r1
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   b84da:	5c55      	ldrb	r5, [r2, r1]
   b84dc:	2d01      	cmp	r5, #1
   b84de:	d008      	beq.n	b84f2 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   b84e0:	4b2c      	ldr	r3, [pc, #176]	; (b8594 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
   b84e2:	9301      	str	r3, [sp, #4]
   b84e4:	e9cd 5402 	strd	r5, r4, [sp, #8]
   b84e8:	4b2b      	ldr	r3, [pc, #172]	; (b8598 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   b84ea:	9300      	str	r3, [sp, #0]
   b84ec:	6945      	ldr	r5, [r0, #20]
   b84ee:	2323      	movs	r3, #35	; 0x23
   b84f0:	e7d6      	b.n	b84a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b84f2:	685b      	ldr	r3, [r3, #4]
   b84f4:	437b      	muls	r3, r7
   b84f6:	18d1      	adds	r1, r2, r3
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   b84f8:	5cd4      	ldrb	r4, [r2, r3]
   b84fa:	2c01      	cmp	r4, #1
   b84fc:	d008      	beq.n	b8510 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   b84fe:	4b26      	ldr	r3, [pc, #152]	; (b8598 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b8506:	4b25      	ldr	r3, [pc, #148]	; (b859c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
   b8508:	9300      	str	r3, [sp, #0]
   b850a:	6944      	ldr	r4, [r0, #20]
   b850c:	2324      	movs	r3, #36	; 0x24
   b850e:	e7d7      	b.n	b84c0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   b8510:	698b      	ldr	r3, [r1, #24]
   b8512:	f8dc 2018 	ldr.w	r2, [ip, #24]
   b8516:	4293      	cmp	r3, r2
   b8518:	d008      	beq.n	b852c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
   b851a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b851e:	4b20      	ldr	r3, [pc, #128]	; (b85a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	4b20      	ldr	r3, [pc, #128]	; (b85a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   b8524:	9300      	str	r3, [sp, #0]
   b8526:	6945      	ldr	r5, [r0, #20]
   b8528:	2325      	movs	r3, #37	; 0x25
   b852a:	e7b9      	b.n	b84a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   b852c:	688f      	ldr	r7, [r1, #8]
   b852e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   b8532:	6839      	ldr	r1, [r7, #0]
   b8534:	6813      	ldr	r3, [r2, #0]
   b8536:	4299      	cmp	r1, r3
   b8538:	d008      	beq.n	b854c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   b853a:	e9cd 1302 	strd	r1, r3, [sp, #8]
   b853e:	4b1a      	ldr	r3, [pc, #104]	; (b85a8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	4b1a      	ldr	r3, [pc, #104]	; (b85ac <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   b8544:	9300      	str	r3, [sp, #0]
   b8546:	6945      	ldr	r5, [r0, #20]
   b8548:	2326      	movs	r3, #38	; 0x26
   b854a:	e7a9      	b.n	b84a0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
   b854c:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b854e:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   b8550:	1e58      	subs	r0, r3, #1
   b8552:	4281      	cmp	r1, r0
   b8554:	dd12      	ble.n	b857c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   b8556:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   b855a:	3301      	adds	r3, #1
   b855c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b8560:	42a8      	cmp	r0, r5
   b8562:	d0f5      	beq.n	b8550 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   b8564:	4b12      	ldr	r3, [pc, #72]	; (b85b0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   b8566:	9301      	str	r3, [sp, #4]
   b8568:	4b12      	ldr	r3, [pc, #72]	; (b85b4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   b856a:	9300      	str	r3, [sp, #0]
   b856c:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8570:	4a05      	ldr	r2, [pc, #20]	; (b8588 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   b8572:	6975      	ldr	r5, [r6, #20]
   b8574:	4905      	ldr	r1, [pc, #20]	; (b858c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   b8576:	2328      	movs	r3, #40	; 0x28
   b8578:	4630      	mov	r0, r6
   b857a:	e793      	b.n	b84a4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   b857c:	2400      	movs	r4, #0
   b857e:	e7a3      	b.n	b84c8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   b8580:	000c8bee 	.word	0x000c8bee
   b8584:	000c8430 	.word	0x000c8430
   b8588:	000c851a 	.word	0x000c851a
   b858c:	000c70fc 	.word	0x000c70fc
   b8590:	000c8440 	.word	0x000c8440
   b8594:	000c8bff 	.word	0x000c8bff
   b8598:	000c7192 	.word	0x000c7192
   b859c:	000c8588 	.word	0x000c8588
   b85a0:	000c8595 	.word	0x000c8595
   b85a4:	000c85a2 	.word	0x000c85a2
   b85a8:	000c85b0 	.word	0x000c85b0
   b85ac:	000c85c2 	.word	0x000c85c2
   b85b0:	000c85d5 	.word	0x000c85d5
   b85b4:	000c85ea 	.word	0x000c85ea

000b85b8 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b85b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b85bc:	680b      	ldr	r3, [r1, #0]
   b85be:	6884      	ldr	r4, [r0, #8]
   b85c0:	685d      	ldr	r5, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b85c2:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b85c4:	2338      	movs	r3, #56	; 0x38
   b85c6:	fb03 4505 	mla	r5, r3, r5, r4
   b85ca:	b08a      	sub	sp, #40	; 0x28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b85cc:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   b85ce:	4629      	mov	r1, r5
   b85d0:	4668      	mov	r0, sp
   b85d2:	fb03 4402 	mla	r4, r3, r2, r4
   b85d6:	f7fe f998 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b85da:	b105      	cbz	r5, b85de <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x26>
   b85dc:	686d      	ldr	r5, [r5, #4]
                      GetTensorShape(output), GetTensorData<float>(output));
   b85de:	4621      	mov	r1, r4
   b85e0:	a805      	add	r0, sp, #20
   b85e2:	f7fe f992 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b85e6:	b104      	cbz	r4, b85ea <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   b85e8:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   b85ea:	9f00      	ldr	r7, [sp, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b85ec:	9b05      	ldr	r3, [sp, #20]
   b85ee:	429f      	cmp	r7, r3
   b85f0:	d001      	beq.n	b85f6 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   b85f2:	f00c f953 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   b85f6:	2600      	movs	r6, #0
   b85f8:	42b7      	cmp	r7, r6
   b85fa:	dd0c      	ble.n	b8616 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b85fc:	4631      	mov	r1, r6
   b85fe:	4668      	mov	r0, sp
   b8600:	f7fd feea 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8604:	4631      	mov	r1, r6
   b8606:	4680      	mov	r8, r0
   b8608:	a805      	add	r0, sp, #20
   b860a:	f7fd fee5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b860e:	4580      	cmp	r8, r0
   b8610:	d1ef      	bne.n	b85f2 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  for (int i = 0; i < dims_count; ++i) {
   b8612:	3601      	adds	r6, #1
   b8614:	e7f0      	b.n	b85f8 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8616:	2f04      	cmp	r7, #4
   b8618:	bfcc      	ite	gt
   b861a:	9a01      	ldrgt	r2, [sp, #4]
   b861c:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   b861e:	2300      	movs	r3, #0
    int buffer_size = 1;
   b8620:	f04f 0801 	mov.w	r8, #1
    for (int i = 0; i < size_; i++) {
   b8624:	429f      	cmp	r7, r3
   b8626:	dc0a      	bgt.n	b863e <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x86>

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   b8628:	2600      	movs	r6, #0
   b862a:	4546      	cmp	r6, r8
   b862c:	da0d      	bge.n	b864a <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x92>
   b862e:	ecb5 0a01 	vldmia	r5!, {s0}
   b8632:	f00c fe8f 	bl	c5354 <ceilf>
   b8636:	3601      	adds	r6, #1
    output_data[i] = std::ceil(input_data[i]);
   b8638:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   b863c:	e7f5      	b.n	b862a <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      buffer_size *= dims_data[i];
   b863e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8642:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b8644:	fb01 f808 	mul.w	r8, r1, r8
    for (int i = 0; i < size_; i++) {
   b8648:	e7ec      	b.n	b8624 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
   b864a:	a805      	add	r0, sp, #20
   b864c:	f7fd feb9 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   b8650:	4668      	mov	r0, sp
   b8652:	f7fd feb6 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>

  return kTfLiteOk;
}
   b8656:	2000      	movs	r0, #0
   b8658:	b00a      	add	sp, #40	; 0x28
   b865a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b8660 <_ZN6tflite3ops5micro13Register_CEILEv>:

TfLiteRegistration* Register_CEIL() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, ceil::Prepare, ceil::Eval};
  return &r;
}
   b8660:	4800      	ldr	r0, [pc, #0]	; (b8664 <_ZN6tflite3ops5micro13Register_CEILEv+0x4>)
   b8662:	4770      	bx	lr
   b8664:	2003c130 	.word	0x2003c130

000b8668 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b8668:	2000      	movs	r0, #0
   b866a:	4770      	bx	lr

000b866c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8670:	684a      	ldr	r2, [r1, #4]
   b8672:	6885      	ldr	r5, [r0, #8]
  const TfLitePackParams* data =
   b8674:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8676:	b085      	sub	sp, #20
   b8678:	9001      	str	r0, [sp, #4]
   b867a:	6850      	ldr	r0, [r2, #4]
   b867c:	2238      	movs	r2, #56	; 0x38
   b867e:	4350      	muls	r0, r2
   b8680:	182a      	adds	r2, r5, r0
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (output->type) {
   b8682:	5c28      	ldrb	r0, [r5, r0]
   b8684:	1e46      	subs	r6, r0, #1
   b8686:	2e08      	cmp	r6, #8
   b8688:	f200 821a 	bhi.w	b8ac0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
   b868c:	e8df f016 	tbh	[pc, r6, lsl #1]
   b8690:	01460009 	.word	0x01460009
   b8694:	01af0076 	.word	0x01af0076
   b8698:	02180218 	.word	0x02180218
   b869c:	02180218 	.word	0x02180218
   b86a0:	00dd      	.short	0x00dd
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b86a2:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b86a4:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b86a6:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b86a8:	f8d6 e000 	ldr.w	lr, [r6]
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
   b86ac:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b86b0:	2738      	movs	r7, #56	; 0x38
   b86b2:	fb07 5500 	mla	r5, r7, r0, r5
   b86b6:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b86ba:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b86bc:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b86be:	bfb8      	it	lt
   b86c0:	4473      	addlt	r3, lr
   b86c2:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b86c4:	2000      	movs	r0, #0
  int outer_size = 1;
   b86c6:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b86c8:	4283      	cmp	r3, r0
   b86ca:	dd05      	ble.n	b86d8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    outer_size *= output_dims->data[i];
   b86cc:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b86d0:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b86d2:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b86d6:	e7f7      	b.n	b86c8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c>
  for (int i = axis + 1; i < dimensions; ++i) {
   b86d8:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b86da:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b86dc:	4586      	cmp	lr, r0
   b86de:	dc0c      	bgt.n	b86fa <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  for (int i = 0; i < input_dims->size; ++i) {
   b86e0:	4638      	mov	r0, r7
  int input_size = 1;
   b86e2:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b86e4:	f850 eb04 	ldr.w	lr, [r0], #4
   b86e8:	2700      	movs	r7, #0
   b86ea:	45be      	cmp	lr, r7
   b86ec:	dd0a      	ble.n	b8704 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
    input_size *= input_dims->data[i];
   b86ee:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b86f2:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b86f4:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b86f8:	e7f7      	b.n	b86ea <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    copy_size *= output_dims->data[i];
   b86fa:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b86fe:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b8700:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b8702:	e7eb      	b.n	b86dc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b8704:	fb03 f006 	mul.w	r0, r3, r6
   b8708:	4285      	cmp	r5, r0
   b870a:	d001      	beq.n	b8710 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   b870c:	f00c f8c6 	bl	c489c <abort>
   b8710:	6852      	ldr	r2, [r2, #4]
   b8712:	9202      	str	r2, [sp, #8]
   b8714:	2000      	movs	r0, #0
   b8716:	fb03 f209 	mul.w	r2, r3, r9
   b871a:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b871c:	4605      	mov	r5, r0
   b871e:	45a9      	cmp	r9, r5
   b8720:	dc03      	bgt.n	b872a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
      return PackImpl<float>(context, node, output, data->values_count,
   b8722:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   b8724:	b005      	add	sp, #20
   b8726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b872a:	680a      	ldr	r2, [r1, #0]
   b872c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b8730:	2438      	movs	r4, #56	; 0x38
   b8732:	6857      	ldr	r7, [r2, #4]
   b8734:	9a01      	ldr	r2, [sp, #4]
   b8736:	6892      	ldr	r2, [r2, #8]
   b8738:	fb04 2207 	mla	r2, r4, r7, r2
   b873c:	b102      	cbz	r2, b8740 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   b873e:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b8740:	2700      	movs	r7, #0
   b8742:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8744:	46be      	mov	lr, r7
   b8746:	4576      	cmp	r6, lr
   b8748:	dd15      	ble.n	b8776 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a>
   b874a:	9c02      	ldr	r4, [sp, #8]
   b874c:	eb02 0b87 	add.w	fp, r2, r7, lsl #2
   b8750:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8754:	f04f 0800 	mov.w	r8, #0
   b8758:	4543      	cmp	r3, r8
   b875a:	dd06      	ble.n	b876a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
   b875c:	ecfb 7a01 	vldmia	fp!, {s15}
   b8760:	f108 0801 	add.w	r8, r8, #1
   b8764:	ecea 7a01 	vstmia	sl!, {s15}
   b8768:	e7f6      	b.n	b8758 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>
    for (int k = 0; k < outer_size; ++k) {
   b876a:	9c03      	ldr	r4, [sp, #12]
   b876c:	f10e 0e01 	add.w	lr, lr, #1
   b8770:	441f      	add	r7, r3
   b8772:	44a4      	add	ip, r4
   b8774:	e7e7      	b.n	b8746 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  for (int i = 0; i < values_count; ++i) {
   b8776:	3501      	adds	r5, #1
   b8778:	4418      	add	r0, r3
   b877a:	e7d0      	b.n	b871e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b877c:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b877e:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8780:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8782:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b8786:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b878a:	2738      	movs	r7, #56	; 0x38
   b878c:	fb07 5500 	mla	r5, r7, r0, r5
   b8790:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8794:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8796:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b8798:	bfb8      	it	lt
   b879a:	4473      	addlt	r3, lr
   b879c:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b879e:	2000      	movs	r0, #0
  int outer_size = 1;
   b87a0:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b87a2:	4283      	cmp	r3, r0
   b87a4:	dd05      	ble.n	b87b2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
    outer_size *= output_dims->data[i];
   b87a6:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b87aa:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b87ac:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b87b0:	e7f7      	b.n	b87a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x136>
  for (int i = axis + 1; i < dimensions; ++i) {
   b87b2:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b87b4:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b87b6:	4586      	cmp	lr, r0
   b87b8:	dc0c      	bgt.n	b87d4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x168>
  for (int i = 0; i < input_dims->size; ++i) {
   b87ba:	4638      	mov	r0, r7
  int input_size = 1;
   b87bc:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b87be:	f850 eb04 	ldr.w	lr, [r0], #4
   b87c2:	2700      	movs	r7, #0
   b87c4:	45be      	cmp	lr, r7
   b87c6:	dd0a      	ble.n	b87de <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    input_size *= input_dims->data[i];
   b87c8:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b87cc:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b87ce:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b87d2:	e7f7      	b.n	b87c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x158>
    copy_size *= output_dims->data[i];
   b87d4:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b87d8:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b87da:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b87dc:	e7eb      	b.n	b87b6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b87de:	fb03 f006 	mul.w	r0, r3, r6
   b87e2:	4285      	cmp	r5, r0
   b87e4:	d192      	bne.n	b870c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b87e6:	6852      	ldr	r2, [r2, #4]
   b87e8:	9202      	str	r2, [sp, #8]
   b87ea:	2000      	movs	r0, #0
   b87ec:	fb03 f20b 	mul.w	r2, r3, fp
   b87f0:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b87f2:	4605      	mov	r5, r0
   b87f4:	45ab      	cmp	fp, r5
   b87f6:	dd94      	ble.n	b8722 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b87f8:	680a      	ldr	r2, [r1, #0]
   b87fa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b87fe:	2438      	movs	r4, #56	; 0x38
   b8800:	6857      	ldr	r7, [r2, #4]
   b8802:	9a01      	ldr	r2, [sp, #4]
   b8804:	6892      	ldr	r2, [r2, #8]
   b8806:	fb04 2207 	mla	r2, r4, r7, r2
   b880a:	b102      	cbz	r2, b880e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
   b880c:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b880e:	2700      	movs	r7, #0
   b8810:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8812:	46be      	mov	lr, r7
   b8814:	4576      	cmp	r6, lr
   b8816:	dd15      	ble.n	b8844 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
   b8818:	9c02      	ldr	r4, [sp, #8]
   b881a:	eb02 0a07 	add.w	sl, r2, r7
   b881e:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8822:	f04f 0800 	mov.w	r8, #0
   b8826:	4543      	cmp	r3, r8
   b8828:	dd06      	ble.n	b8838 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
   b882a:	f81a 4b01 	ldrb.w	r4, [sl], #1
   b882e:	f809 4b01 	strb.w	r4, [r9], #1
   b8832:	f108 0801 	add.w	r8, r8, #1
   b8836:	e7f6      	b.n	b8826 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    for (int k = 0; k < outer_size; ++k) {
   b8838:	9c03      	ldr	r4, [sp, #12]
   b883a:	f10e 0e01 	add.w	lr, lr, #1
   b883e:	441f      	add	r7, r3
   b8840:	44a4      	add	ip, r4
   b8842:	e7e7      	b.n	b8814 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
  for (int i = 0; i < values_count; ++i) {
   b8844:	3501      	adds	r5, #1
   b8846:	4418      	add	r0, r3
   b8848:	e7d4      	b.n	b87f4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b884a:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b884c:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b884e:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8850:	f8d6 e000 	ldr.w	lr, [r6]
                              data->axis);
   b8854:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b8858:	2738      	movs	r7, #56	; 0x38
   b885a:	fb07 5500 	mla	r5, r7, r0, r5
   b885e:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8862:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8864:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b8866:	bfb8      	it	lt
   b8868:	4473      	addlt	r3, lr
   b886a:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b886c:	2000      	movs	r0, #0
  int outer_size = 1;
   b886e:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8870:	4283      	cmp	r3, r0
   b8872:	dd05      	ble.n	b8880 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
    outer_size *= output_dims->data[i];
   b8874:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b8878:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b887a:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b887e:	e7f7      	b.n	b8870 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x204>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8880:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b8882:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b8884:	4586      	cmp	lr, r0
   b8886:	dc0c      	bgt.n	b88a2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
  for (int i = 0; i < input_dims->size; ++i) {
   b8888:	4638      	mov	r0, r7
  int input_size = 1;
   b888a:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b888c:	f850 eb04 	ldr.w	lr, [r0], #4
   b8890:	2700      	movs	r7, #0
   b8892:	45be      	cmp	lr, r7
   b8894:	dd0a      	ble.n	b88ac <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
    input_size *= input_dims->data[i];
   b8896:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b889a:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b889c:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b88a0:	e7f7      	b.n	b8892 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
    copy_size *= output_dims->data[i];
   b88a2:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b88a6:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b88a8:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b88aa:	e7eb      	b.n	b8884 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x218>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b88ac:	fb03 f006 	mul.w	r0, r3, r6
   b88b0:	4285      	cmp	r5, r0
   b88b2:	f47f af2b 	bne.w	b870c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b88b6:	6852      	ldr	r2, [r2, #4]
   b88b8:	9203      	str	r2, [sp, #12]
   b88ba:	2000      	movs	r0, #0
   b88bc:	fb03 f20b 	mul.w	r2, r3, fp
   b88c0:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
   b88c2:	4605      	mov	r5, r0
   b88c4:	45ab      	cmp	fp, r5
   b88c6:	f77f af2c 	ble.w	b8722 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b88ca:	680a      	ldr	r2, [r1, #0]
   b88cc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b88d0:	2438      	movs	r4, #56	; 0x38
   b88d2:	6857      	ldr	r7, [r2, #4]
   b88d4:	9a01      	ldr	r2, [sp, #4]
   b88d6:	6892      	ldr	r2, [r2, #8]
   b88d8:	fb04 2207 	mla	r2, r4, r7, r2
   b88dc:	b102      	cbz	r2, b88e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
   b88de:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b88e0:	2700      	movs	r7, #0
   b88e2:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b88e4:	46be      	mov	lr, r7
   b88e6:	4576      	cmp	r6, lr
   b88e8:	dd15      	ble.n	b8916 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
   b88ea:	9c03      	ldr	r4, [sp, #12]
   b88ec:	eb02 0a07 	add.w	sl, r2, r7
   b88f0:	eb04 090c 	add.w	r9, r4, ip
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b88f4:	f04f 0800 	mov.w	r8, #0
   b88f8:	4543      	cmp	r3, r8
   b88fa:	dd06      	ble.n	b890a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
   b88fc:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   b8900:	f809 4b01 	strb.w	r4, [r9], #1
   b8904:	f108 0801 	add.w	r8, r8, #1
   b8908:	e7f6      	b.n	b88f8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>
    for (int k = 0; k < outer_size; ++k) {
   b890a:	9c02      	ldr	r4, [sp, #8]
   b890c:	f10e 0e01 	add.w	lr, lr, #1
   b8910:	441f      	add	r7, r3
   b8912:	44a4      	add	ip, r4
   b8914:	e7e7      	b.n	b88e6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
  for (int i = 0; i < values_count; ++i) {
   b8916:	3501      	adds	r5, #1
   b8918:	4418      	add	r0, r3
   b891a:	e7d3      	b.n	b88c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b891c:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b891e:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b8920:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b8922:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b8926:	e9d3 b300 	ldrd	fp, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b892a:	2738      	movs	r7, #56	; 0x38
   b892c:	fb07 5500 	mla	r5, r7, r0, r5
   b8930:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8934:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8936:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b8938:	bfb8      	it	lt
   b893a:	4473      	addlt	r3, lr
   b893c:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b893e:	2000      	movs	r0, #0
  int outer_size = 1;
   b8940:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8942:	4283      	cmp	r3, r0
   b8944:	dd05      	ble.n	b8952 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
    outer_size *= output_dims->data[i];
   b8946:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b894a:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b894c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b8950:	e7f7      	b.n	b8942 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d6>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8952:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b8954:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b8956:	4586      	cmp	lr, r0
   b8958:	dc0c      	bgt.n	b8974 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
  for (int i = 0; i < input_dims->size; ++i) {
   b895a:	4638      	mov	r0, r7
  int input_size = 1;
   b895c:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b895e:	f850 eb04 	ldr.w	lr, [r0], #4
   b8962:	2700      	movs	r7, #0
   b8964:	45be      	cmp	lr, r7
   b8966:	dd0a      	ble.n	b897e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x312>
    input_size *= input_dims->data[i];
   b8968:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b896c:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b896e:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b8972:	e7f7      	b.n	b8964 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    copy_size *= output_dims->data[i];
   b8974:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b8978:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b897a:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b897c:	e7eb      	b.n	b8956 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b897e:	fb03 f006 	mul.w	r0, r3, r6
   b8982:	4285      	cmp	r5, r0
   b8984:	f47f aec2 	bne.w	b870c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b8988:	6852      	ldr	r2, [r2, #4]
   b898a:	9202      	str	r2, [sp, #8]
   b898c:	2000      	movs	r0, #0
   b898e:	fb03 f20b 	mul.w	r2, r3, fp
   b8992:	9203      	str	r2, [sp, #12]
  for (int i = 0; i < values_count; ++i) {
   b8994:	4605      	mov	r5, r0
   b8996:	45ab      	cmp	fp, r5
   b8998:	f77f aec3 	ble.w	b8722 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b899c:	680a      	ldr	r2, [r1, #0]
   b899e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b89a2:	2438      	movs	r4, #56	; 0x38
   b89a4:	6857      	ldr	r7, [r2, #4]
   b89a6:	9a01      	ldr	r2, [sp, #4]
   b89a8:	6892      	ldr	r2, [r2, #8]
   b89aa:	fb04 2207 	mla	r2, r4, r7, r2
   b89ae:	b102      	cbz	r2, b89b2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x346>
   b89b0:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b89b2:	2700      	movs	r7, #0
   b89b4:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b89b6:	46be      	mov	lr, r7
   b89b8:	4576      	cmp	r6, lr
   b89ba:	dd15      	ble.n	b89e8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
   b89bc:	9c02      	ldr	r4, [sp, #8]
   b89be:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
   b89c2:	eb04 098c 	add.w	r9, r4, ip, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b89c6:	f04f 0800 	mov.w	r8, #0
   b89ca:	4543      	cmp	r3, r8
   b89cc:	dd06      	ble.n	b89dc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
   b89ce:	f85a 4b04 	ldr.w	r4, [sl], #4
   b89d2:	f849 4b04 	str.w	r4, [r9], #4
   b89d6:	f108 0801 	add.w	r8, r8, #1
   b89da:	e7f6      	b.n	b89ca <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35e>
    for (int k = 0; k < outer_size; ++k) {
   b89dc:	9c03      	ldr	r4, [sp, #12]
   b89de:	f10e 0e01 	add.w	lr, lr, #1
   b89e2:	441f      	add	r7, r3
   b89e4:	44a4      	add	ip, r4
   b89e6:	e7e7      	b.n	b89b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x34c>
  for (int i = 0; i < values_count; ++i) {
   b89e8:	3501      	adds	r5, #1
   b89ea:	4418      	add	r0, r3
   b89ec:	e7d3      	b.n	b8996 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32a>
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b89ee:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   b89f0:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* input0 = &context->tensors[node->inputs->data[0]];
   b89f2:	6840      	ldr	r0, [r0, #4]
  const int dimensions = output->dims->size;
   b89f4:	f8d6 e000 	ldr.w	lr, [r6]
                               data->axis);
   b89f8:	e9d3 9300 	ldrd	r9, r3, [r3]
  const TfLiteIntArray* input_dims = input0->dims;
   b89fc:	2738      	movs	r7, #56	; 0x38
   b89fe:	fb07 5500 	mla	r5, r7, r0, r5
   b8a02:	f106 0c04 	add.w	ip, r6, #4
  if (axis < 0) {
   b8a06:	2b00      	cmp	r3, #0
  const TfLiteIntArray* input_dims = input0->dims;
   b8a08:	68af      	ldr	r7, [r5, #8]
    axis += dimensions;
   b8a0a:	bfb8      	it	lt
   b8a0c:	4473      	addlt	r3, lr
   b8a0e:	4665      	mov	r5, ip
  for (int i = 0; i < axis; ++i) {
   b8a10:	2000      	movs	r0, #0
  int outer_size = 1;
   b8a12:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   b8a14:	4283      	cmp	r3, r0
   b8a16:	dd05      	ble.n	b8a24 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
    outer_size *= output_dims->data[i];
   b8a18:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   b8a1c:	3001      	adds	r0, #1
    outer_size *= output_dims->data[i];
   b8a1e:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   b8a22:	e7f7      	b.n	b8a14 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a8>
  for (int i = axis + 1; i < dimensions; ++i) {
   b8a24:	1c58      	adds	r0, r3, #1
  int copy_size = 1;
   b8a26:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   b8a28:	4586      	cmp	lr, r0
   b8a2a:	dc0c      	bgt.n	b8a46 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3da>
  for (int i = 0; i < input_dims->size; ++i) {
   b8a2c:	4638      	mov	r0, r7
  int input_size = 1;
   b8a2e:	2501      	movs	r5, #1
  for (int i = 0; i < input_dims->size; ++i) {
   b8a30:	f850 eb04 	ldr.w	lr, [r0], #4
   b8a34:	2700      	movs	r7, #0
   b8a36:	45be      	cmp	lr, r7
   b8a38:	dd0a      	ble.n	b8a50 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    input_size *= input_dims->data[i];
   b8a3a:	f850 cb04 	ldr.w	ip, [r0], #4
  for (int i = 0; i < input_dims->size; ++i) {
   b8a3e:	3701      	adds	r7, #1
    input_size *= input_dims->data[i];
   b8a40:	fb0c f505 	mul.w	r5, ip, r5
  for (int i = 0; i < input_dims->size; ++i) {
   b8a44:	e7f7      	b.n	b8a36 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ca>
    copy_size *= output_dims->data[i];
   b8a46:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   b8a4a:	3001      	adds	r0, #1
    copy_size *= output_dims->data[i];
   b8a4c:	436b      	muls	r3, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   b8a4e:	e7eb      	b.n	b8a28 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   b8a50:	fb03 f006 	mul.w	r0, r3, r6
   b8a54:	4285      	cmp	r5, r0
   b8a56:	f47f ae59 	bne.w	b870c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   b8a5a:	6852      	ldr	r2, [r2, #4]
   b8a5c:	9203      	str	r2, [sp, #12]
   b8a5e:	2000      	movs	r0, #0
   b8a60:	fb03 f209 	mul.w	r2, r3, r9
   b8a64:	9202      	str	r2, [sp, #8]
  for (int i = 0; i < values_count; ++i) {
   b8a66:	4605      	mov	r5, r0
   b8a68:	45a9      	cmp	r9, r5
   b8a6a:	f77f ae5a 	ble.w	b8722 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    TfLiteTensor* t = &context->tensors[node->inputs->data[i]];
   b8a6e:	680a      	ldr	r2, [r1, #0]
   b8a70:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   b8a74:	2438      	movs	r4, #56	; 0x38
   b8a76:	6857      	ldr	r7, [r2, #4]
   b8a78:	9a01      	ldr	r2, [sp, #4]
   b8a7a:	6892      	ldr	r2, [r2, #8]
   b8a7c:	fb04 2207 	mla	r2, r4, r7, r2
   b8a80:	b102      	cbz	r2, b8a84 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x418>
   b8a82:	6852      	ldr	r2, [r2, #4]
  for (int i = 0; i < values_count; ++i) {
   b8a84:	2700      	movs	r7, #0
   b8a86:	4684      	mov	ip, r0
    for (int k = 0; k < outer_size; ++k) {
   b8a88:	46be      	mov	lr, r7
   b8a8a:	4576      	cmp	r6, lr
   b8a8c:	dd15      	ble.n	b8aba <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44e>
   b8a8e:	9c03      	ldr	r4, [sp, #12]
   b8a90:	eb02 0bc7 	add.w	fp, r2, r7, lsl #3
   b8a94:	eb04 0acc 	add.w	sl, r4, ip, lsl #3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   b8a98:	f04f 0800 	mov.w	r8, #0
   b8a9c:	4543      	cmp	r3, r8
   b8a9e:	dd06      	ble.n	b8aae <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
   b8aa0:	ecbb 7b02 	vldmia	fp!, {d7}
   b8aa4:	f108 0801 	add.w	r8, r8, #1
   b8aa8:	ecaa 7b02 	vstmia	sl!, {d7}
   b8aac:	e7f6      	b.n	b8a9c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x430>
    for (int k = 0; k < outer_size; ++k) {
   b8aae:	9c02      	ldr	r4, [sp, #8]
   b8ab0:	f10e 0e01 	add.w	lr, lr, #1
   b8ab4:	441f      	add	r7, r3
   b8ab6:	44a4      	add	ip, r4
   b8ab8:	e7e7      	b.n	b8a8a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41e>
  for (int i = 0; i < values_count; ++i) {
   b8aba:	3501      	adds	r5, #1
   b8abc:	4418      	add	r0, r3
   b8abe:	e7d3      	b.n	b8a68 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
      context->ReportError(context, "Type '%s' is not supported by pack.",
   b8ac0:	9b01      	ldr	r3, [sp, #4]
   b8ac2:	695d      	ldr	r5, [r3, #20]
   b8ac4:	f7fc f85e 	bl	b4b84 <TfLiteTypeGetName>
   b8ac8:	4902      	ldr	r1, [pc, #8]	; (b8ad4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x468>)
   b8aca:	4602      	mov	r2, r0
   b8acc:	9801      	ldr	r0, [sp, #4]
   b8ace:	47a8      	blx	r5
      return kTfLiteError;
   b8ad0:	2001      	movs	r0, #1
   b8ad2:	e627      	b.n	b8724 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   b8ad4:	000c8600 	.word	0x000c8600

000b8ad8 <_ZN6tflite3ops5micro13Register_PACKEv>:
}  // namespace pack

TfLiteRegistration* Register_PACK() {
  static TfLiteRegistration r = {nullptr, nullptr, pack::Prepare, pack::Eval};
  return &r;
}
   b8ad8:	4800      	ldr	r0, [pc, #0]	; (b8adc <_ZN6tflite3ops5micro13Register_PACKEv+0x4>)
   b8ada:	4770      	bx	lr
   b8adc:	2003c150 	.word	0x2003c150

000b8ae0 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b8ae4:	680a      	ldr	r2, [r1, #0]
   b8ae6:	6884      	ldr	r4, [r0, #8]
   b8ae8:	6852      	ldr	r2, [r2, #4]
   b8aea:	2638      	movs	r6, #56	; 0x38
   b8aec:	4372      	muls	r2, r6
   b8aee:	18a5      	adds	r5, r4, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
   b8af0:	5ca2      	ldrb	r2, [r4, r2]
   b8af2:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8af4:	b08a      	sub	sp, #40	; 0x28
  switch (input->type) {
   b8af6:	d148      	bne.n	b8b8a <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b8af8:	684b      	ldr	r3, [r1, #4]
   b8afa:	685b      	ldr	r3, [r3, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   b8afc:	4629      	mov	r1, r5
   b8afe:	fb06 4403 	mla	r4, r6, r3, r4
   b8b02:	4668      	mov	r0, sp
   b8b04:	f7fd ff01 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
   b8b08:	4621      	mov	r1, r4
   b8b0a:	a805      	add	r0, sp, #20
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b8b0c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   b8b10:	f7fd fefb 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8b14:	b104      	cbz	r4, b8b18 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   b8b16:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   b8b18:	9e00      	ldr	r6, [sp, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8b1a:	9b05      	ldr	r3, [sp, #20]
   b8b1c:	429e      	cmp	r6, r3
   b8b1e:	d001      	beq.n	b8b24 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   b8b20:	f00b febc 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   b8b24:	2500      	movs	r5, #0
   b8b26:	42ae      	cmp	r6, r5
   b8b28:	dd0c      	ble.n	b8b44 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b8b2a:	4629      	mov	r1, r5
   b8b2c:	4668      	mov	r0, sp
   b8b2e:	f7fd fc53 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8b32:	4629      	mov	r1, r5
   b8b34:	4607      	mov	r7, r0
   b8b36:	a805      	add	r0, sp, #20
   b8b38:	f7fd fc4e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8b3c:	4287      	cmp	r7, r0
   b8b3e:	d1ef      	bne.n	b8b20 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   b8b40:	3501      	adds	r5, #1
   b8b42:	e7f0      	b.n	b8b26 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8b44:	2e04      	cmp	r6, #4
   b8b46:	bfcc      	ite	gt
   b8b48:	9a01      	ldrgt	r2, [sp, #4]
   b8b4a:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   b8b4c:	2300      	movs	r3, #0
    int buffer_size = 1;
   b8b4e:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   b8b50:	429e      	cmp	r6, r3
   b8b52:	dc0b      	bgt.n	b8b6c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
   b8b54:	4643      	mov	r3, r8
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   b8b56:	2200      	movs	r2, #0
   b8b58:	428a      	cmp	r2, r1
   b8b5a:	da0c      	bge.n	b8b76 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
   b8b5c:	ecf3 7a01 	vldmia	r3!, {s15}
   b8b60:	eef1 7a67 	vneg.f32	s15, s15
   b8b64:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   b8b68:	3201      	adds	r2, #1
   b8b6a:	e7f5      	b.n	b8b58 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
   b8b6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8b70:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b8b72:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   b8b74:	e7ec      	b.n	b8b50 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   b8b76:	a805      	add	r0, sp, #20
   b8b78:	f7fd fc23 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   b8b7c:	4668      	mov	r0, sp
   b8b7e:	f7fd fc20 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      context->ReportError(
          context, "Neg only currently supports float32, got %d.", input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   b8b82:	2000      	movs	r0, #0
}
   b8b84:	b00a      	add	sp, #40	; 0x28
   b8b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      context->ReportError(
   b8b8a:	6943      	ldr	r3, [r0, #20]
   b8b8c:	4901      	ldr	r1, [pc, #4]	; (b8b94 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
   b8b8e:	4798      	blx	r3
      return kTfLiteError;
   b8b90:	2001      	movs	r0, #1
   b8b92:	e7f7      	b.n	b8b84 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   b8b94:	000c8624 	.word	0x000c8624

000b8b98 <_ZN6tflite3ops5micro12Register_NEGEv>:

TfLiteRegistration* Register_NEG() {
  static TfLiteRegistration r = {/*init=*/nullptr, /*free=*/nullptr,
                                 /*prepare=*/nullptr, neg::Eval};
  return &r;
}
   b8b98:	4800      	ldr	r0, [pc, #0]	; (b8b9c <_ZN6tflite3ops5micro12Register_NEGEv+0x4>)
   b8b9a:	4770      	bx	lr
   b8b9c:	2003c170 	.word	0x2003c170

000b8ba0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace tflite {
namespace ops {
namespace micro {
namespace dequantize {

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b8ba2:	680a      	ldr	r2, [r1, #0]
   b8ba4:	6816      	ldr	r6, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8ba6:	2e01      	cmp	r6, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b8ba8:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   b8baa:	d00e      	beq.n	b8bca <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   b8bac:	2401      	movs	r4, #1
   b8bae:	4b1f      	ldr	r3, [pc, #124]	; (b8c2c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   b8bb0:	9301      	str	r3, [sp, #4]
   b8bb2:	e9cd 6402 	strd	r6, r4, [sp, #8]
   b8bb6:	4b1e      	ldr	r3, [pc, #120]	; (b8c30 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   b8bb8:	9300      	str	r3, [sp, #0]
   b8bba:	6945      	ldr	r5, [r0, #20]
   b8bbc:	4a1d      	ldr	r2, [pc, #116]	; (b8c34 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8bbe:	491e      	ldr	r1, [pc, #120]	; (b8c38 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
   b8bc0:	231d      	movs	r3, #29
   b8bc2:	47a8      	blx	r5
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];

  TF_LITE_ENSURE(context,
                 input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
   b8bc4:	2001      	movs	r0, #1

  return kTfLiteOk;
}
   b8bc6:	b004      	add	sp, #16
   b8bc8:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b8bca:	684b      	ldr	r3, [r1, #4]
   b8bcc:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b8bce:	2c01      	cmp	r4, #1
   b8bd0:	d00b      	beq.n	b8bea <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   b8bd2:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b8bd6:	4b15      	ldr	r3, [pc, #84]	; (b8c2c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	4b18      	ldr	r3, [pc, #96]	; (b8c3c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
   b8bdc:	9300      	str	r3, [sp, #0]
   b8bde:	6944      	ldr	r4, [r0, #20]
   b8be0:	4a14      	ldr	r2, [pc, #80]	; (b8c34 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8be2:	4915      	ldr	r1, [pc, #84]	; (b8c38 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
   b8be4:	231e      	movs	r3, #30
   b8be6:	47a0      	blx	r4
   b8be8:	e7ec      	b.n	b8bc4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8bea:	6852      	ldr	r2, [r2, #4]
   b8bec:	6881      	ldr	r1, [r0, #8]
  TF_LITE_ENSURE(context,
   b8bee:	2638      	movs	r6, #56	; 0x38
   b8bf0:	4372      	muls	r2, r6
   b8bf2:	5c8a      	ldrb	r2, [r1, r2]
   b8bf4:	2a03      	cmp	r2, #3
   b8bf6:	d009      	beq.n	b8c0c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   b8bf8:	2a09      	cmp	r2, #9
   b8bfa:	d007      	beq.n	b8c0c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   b8bfc:	4b10      	ldr	r3, [pc, #64]	; (b8c40 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
   b8bfe:	9300      	str	r3, [sp, #0]
   b8c00:	6945      	ldr	r5, [r0, #20]
   b8c02:	4a0c      	ldr	r2, [pc, #48]	; (b8c34 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8c04:	490f      	ldr	r1, [pc, #60]	; (b8c44 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
   b8c06:	2324      	movs	r3, #36	; 0x24
   b8c08:	47a8      	blx	r5
   b8c0a:	e7db      	b.n	b8bc4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8c0c:	685b      	ldr	r3, [r3, #4]
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
   b8c0e:	4373      	muls	r3, r6
   b8c10:	5ccb      	ldrb	r3, [r1, r3]
   b8c12:	2b01      	cmp	r3, #1
   b8c14:	d008      	beq.n	b8c28 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x88>
   b8c16:	4b0c      	ldr	r3, [pc, #48]	; (b8c48 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
   b8c18:	9300      	str	r3, [sp, #0]
   b8c1a:	696c      	ldr	r4, [r5, #20]
   b8c1c:	4a05      	ldr	r2, [pc, #20]	; (b8c34 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   b8c1e:	4909      	ldr	r1, [pc, #36]	; (b8c44 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
   b8c20:	2326      	movs	r3, #38	; 0x26
   b8c22:	4628      	mov	r0, r5
   b8c24:	47a0      	blx	r4
   b8c26:	e7cd      	b.n	b8bc4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   b8c28:	2000      	movs	r0, #0
   b8c2a:	e7cc      	b.n	b8bc6 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   b8c2c:	000c8bee 	.word	0x000c8bee
   b8c30:	000c8430 	.word	0x000c8430
   b8c34:	000c8651 	.word	0x000c8651
   b8c38:	000c70fc 	.word	0x000c70fc
   b8c3c:	000c8440 	.word	0x000c8440
   b8c40:	000c86c5 	.word	0x000c86c5
   b8c44:	000c7067 	.word	0x000c7067
   b8c48:	000c86ff 	.word	0x000c86ff

000b8c4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   b8c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  inline int32 DimensionsCount() const { return size_; }
   b8c50:	6806      	ldr	r6, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8c52:	680b      	ldr	r3, [r1, #0]
   b8c54:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   b8c56:	4604      	mov	r4, r0
   b8c58:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   b8c5a:	d001      	beq.n	b8c60 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   b8c5c:	f00b fe1e 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   b8c60:	2500      	movs	r5, #0
   b8c62:	42b5      	cmp	r5, r6
   b8c64:	da0c      	bge.n	b8c80 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b8c66:	4629      	mov	r1, r5
   b8c68:	4620      	mov	r0, r4
   b8c6a:	f7fd fbb5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8c6e:	4629      	mov	r1, r5
   b8c70:	4680      	mov	r8, r0
   b8c72:	4638      	mov	r0, r7
   b8c74:	f7fd fbb0 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8c78:	4580      	cmp	r8, r0
   b8c7a:	d1ef      	bne.n	b8c5c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   b8c7c:	3501      	adds	r5, #1
   b8c7e:	e7f0      	b.n	b8c62 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8c80:	2e04      	cmp	r6, #4
   b8c82:	bfcc      	ite	gt
   b8c84:	6864      	ldrgt	r4, [r4, #4]
   b8c86:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   b8c88:	2300      	movs	r3, #0
    int buffer_size = 1;
   b8c8a:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   b8c8c:	429e      	cmp	r6, r3
   b8c8e:	dd04      	ble.n	b8c9a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   b8c90:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8c94:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   b8c96:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   b8c98:	e7f8      	b.n	b8c8c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   b8c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b8ca0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8ca4:	680b      	ldr	r3, [r1, #0]
   b8ca6:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b8caa:	685f      	ldr	r7, [r3, #4]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8cac:	684a      	ldr	r2, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   b8cae:	2338      	movs	r3, #56	; 0x38
   b8cb0:	435f      	muls	r7, r3
   b8cb2:	eb0a 0507 	add.w	r5, sl, r7
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8cb6:	6854      	ldr	r4, [r2, #4]

  tflite::DequantizationParams op_params;
  op_params.zero_point = input->params.zero_point;
   b8cb8:	f8d5 b010 	ldr.w	fp, [r5, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b8cbc:	b08b      	sub	sp, #44	; 0x2c
   b8cbe:	4606      	mov	r6, r0
  op_params.scale = input->params.scale;
   b8cc0:	68e8      	ldr	r0, [r5, #12]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   b8cc2:	fb03 a404 	mla	r4, r3, r4, sl
  op_params.scale = input->params.scale;
   b8cc6:	f7fb fb0f 	bl	b42e8 <__aeabi_f2d>
   b8cca:	4680      	mov	r8, r0
  switch (input->type) {
   b8ccc:	f81a 0007 	ldrb.w	r0, [sl, r7]
   b8cd0:	2803      	cmp	r0, #3
  op_params.scale = input->params.scale;
   b8cd2:	4689      	mov	r9, r1
  switch (input->type) {
   b8cd4:	d00c      	beq.n	b8cf0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   b8cd6:	2809      	cmp	r0, #9
   b8cd8:	d02c      	beq.n	b8d34 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x94>
      reference_ops::Dequantize(
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<float>(output));
      break;
    default:
      context->ReportError(context, "Type %s (%d) not supported.",
   b8cda:	6974      	ldr	r4, [r6, #20]
   b8cdc:	f7fb ff52 	bl	b4b84 <TfLiteTypeGetName>
   b8ce0:	f81a 3007 	ldrb.w	r3, [sl, r7]
   b8ce4:	4929      	ldr	r1, [pc, #164]	; (b8d8c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xec>)
   b8ce6:	4602      	mov	r2, r0
   b8ce8:	4630      	mov	r0, r6
   b8cea:	47a0      	blx	r4
                           TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   b8cec:	2001      	movs	r0, #1
   b8cee:	e04a      	b.n	b8d86 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b8cf0:	4629      	mov	r1, r5
   b8cf2:	4668      	mov	r0, sp
   b8cf4:	f7fd fe09 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   b8cf8:	4621      	mov	r1, r4
   b8cfa:	a805      	add	r0, sp, #20
   b8cfc:	686f      	ldr	r7, [r5, #4]
   b8cfe:	f7fd fe04 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8d02:	b104      	cbz	r4, b8d06 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x66>
   b8d04:	6864      	ldr	r4, [r4, #4]
inline void Dequantize(const tflite::DequantizationParams& op_params,
                       const RuntimeShape& input_shape, const T* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8d06:	a905      	add	r1, sp, #20
   b8d08:	4668      	mov	r0, sp
   b8d0a:	f7ff ff9f 	bl	b8c4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   b8d0e:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8d10:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   b8d12:	42ae      	cmp	r6, r5
   b8d14:	dd30      	ble.n	b8d78 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
    const int32 val = input_data[i];
   b8d16:	5d78      	ldrb	r0, [r7, r5]
    const float result = static_cast<float>(scale * (val - zero_point));
   b8d18:	eba0 000b 	sub.w	r0, r0, fp
   b8d1c:	f7fb fad2 	bl	b42c4 <__aeabi_i2d>
   b8d20:	4642      	mov	r2, r8
   b8d22:	464b      	mov	r3, r9
   b8d24:	f7fb fb38 	bl	b4398 <__aeabi_dmul>
   b8d28:	f7fb fe18 	bl	b495c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
   b8d2c:	3501      	adds	r5, #1
    const float result = static_cast<float>(scale * (val - zero_point));
   b8d2e:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   b8d32:	e7ee      	b.n	b8d12 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x72>
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b8d34:	4629      	mov	r1, r5
   b8d36:	4668      	mov	r0, sp
   b8d38:	f7fd fde7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   b8d3c:	4621      	mov	r1, r4
   b8d3e:	a805      	add	r0, sp, #20
   b8d40:	686f      	ldr	r7, [r5, #4]
   b8d42:	f7fd fde2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b8d46:	b104      	cbz	r4, b8d4a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
   b8d48:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8d4a:	a905      	add	r1, sp, #20
   b8d4c:	4668      	mov	r0, sp
   b8d4e:	f7ff ff7d 	bl	b8c4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   b8d52:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   b8d54:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   b8d56:	42ae      	cmp	r6, r5
   b8d58:	dd0e      	ble.n	b8d78 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
    const int32 val = input_data[i];
   b8d5a:	5778      	ldrsb	r0, [r7, r5]
    const float result = static_cast<float>(scale * (val - zero_point));
   b8d5c:	eba0 000b 	sub.w	r0, r0, fp
   b8d60:	f7fb fab0 	bl	b42c4 <__aeabi_i2d>
   b8d64:	4642      	mov	r2, r8
   b8d66:	464b      	mov	r3, r9
   b8d68:	f7fb fb16 	bl	b4398 <__aeabi_dmul>
   b8d6c:	f7fb fdf6 	bl	b495c <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
   b8d70:	3501      	adds	r5, #1
    const float result = static_cast<float>(scale * (val - zero_point));
   b8d72:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   b8d76:	e7ee      	b.n	b8d56 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb6>
   b8d78:	a805      	add	r0, sp, #20
   b8d7a:	f7fd fb22 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b8d7e:	4668      	mov	r0, sp
   b8d80:	f7fd fb1f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  }

  return kTfLiteOk;
   b8d84:	2000      	movs	r0, #0
}
   b8d86:	b00b      	add	sp, #44	; 0x2c
   b8d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d8c:	000c871e 	.word	0x000c871e

000b8d90 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:

TfLiteRegistration* Register_DEQUANTIZE() {
  static TfLiteRegistration r = {nullptr, nullptr, dequantize::Prepare,
                                 dequantize::Eval};
  return &r;
}
   b8d90:	4800      	ldr	r0, [pc, #0]	; (b8d94 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x4>)
   b8d92:	4770      	bx	lr
   b8d94:	2003c190 	.word	0x2003c190

000b8d98 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b8d98:	2000      	movs	r0, #0
   b8d9a:	4770      	bx	lr

000b8d9c <_ZN6tflite3ops5micro7pooling4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b8d9c:	4770      	bx	lr

000b8d9e <_ZN6tflite3ops5micro7pooling7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b8d9e:	2000      	movs	r0, #0
   b8da0:	4770      	bx	lr

000b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   b8da2:	b570      	push	{r4, r5, r6, lr}
   b8da4:	4615      	mov	r5, r2
   b8da6:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   b8da8:	f7fd fb16 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8dac:	4631      	mov	r1, r6
   b8dae:	4604      	mov	r4, r0
   b8db0:	4628      	mov	r0, r5
   b8db2:	f7fd fb11 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8db6:	4284      	cmp	r4, r0
   b8db8:	d001      	beq.n	b8dbe <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   b8dba:	f00b fd6f 	bl	c489c <abort>
}
   b8dbe:	bd70      	pop	{r4, r5, r6, pc}

000b8dc0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
   b8dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dc4:	ed2d 8b04 	vpush	{d8-d9}
   b8dc8:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8dca:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
   b8dcc:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8dce:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
   b8dd0:	4604      	mov	r4, r0
   b8dd2:	460e      	mov	r6, r1
   b8dd4:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8dd6:	d001      	beq.n	b8ddc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   b8dd8:	f00b fd60 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b8ddc:	683b      	ldr	r3, [r7, #0]
   b8dde:	2b04      	cmp	r3, #4
   b8de0:	d1fa      	bne.n	b8dd8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8de2:	2300      	movs	r3, #0
   b8de4:	4619      	mov	r1, r3
   b8de6:	463a      	mov	r2, r7
   b8de8:	4630      	mov	r0, r6
   b8dea:	f7ff ffda 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8dee:	2303      	movs	r3, #3
   b8df0:	4619      	mov	r1, r3
   b8df2:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8df4:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8df6:	4630      	mov	r0, r6
   b8df8:	f7ff ffd3 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b8dfc:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8dfe:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
   b8e00:	4630      	mov	r0, r6
   b8e02:	f7fd fae9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b8e06:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b8e08:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
   b8e0a:	4630      	mov	r0, r6
   b8e0c:	f7fd fae4 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b8e10:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b8e12:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   b8e14:	4638      	mov	r0, r7
   b8e16:	f7fd fadf 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b8e1a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b8e1c:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   b8e1e:	4638      	mov	r0, r7
   b8e20:	f7fd fada 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b8e24:	68e3      	ldr	r3, [r4, #12]
   b8e26:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   b8e28:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b8e2a:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   b8e2c:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   b8e2e:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   b8e32:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
   b8e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8e38:	459b      	cmp	fp, r3
   b8e3a:	f280 8093 	bge.w	b8f64 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
   b8e3e:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8e42:	f8cd a00c 	str.w	sl, [sp, #12]
   b8e46:	9b03      	ldr	r3, [sp, #12]
   b8e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8e4a:	4293      	cmp	r3, r2
   b8e4c:	f280 8087 	bge.w	b8f5e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19e>
   b8e50:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8e54:	f8cd 9010 	str.w	r9, [sp, #16]
   b8e58:	9b04      	ldr	r3, [sp, #16]
   b8e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8e5c:	4293      	cmp	r3, r2
   b8e5e:	da78      	bge.n	b8f52 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   b8e60:	2300      	movs	r3, #0
   b8e62:	9302      	str	r3, [sp, #8]
   b8e64:	9b02      	ldr	r3, [sp, #8]
   b8e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8e68:	4293      	cmp	r3, r2
   b8e6a:	da6c      	bge.n	b8f46 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x186>
              (out_x * stride_width) - params.padding_values.width;
   b8e6c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   b8e70:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          float filter_count = 0;
   b8e74:	ed9f 8a3e 	vldr	s16, [pc, #248]	; b8f70 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
          const int in_x_origin =
   b8e78:	eba9 0308 	sub.w	r3, r9, r8
   b8e7c:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
   b8e7e:	ebaa 0305 	sub.w	r3, sl, r5
   b8e82:	9307      	str	r3, [sp, #28]
          const int filter_x_start = std::max(0, -in_x_origin);
   b8e84:	eba8 0309 	sub.w	r3, r8, r9
   b8e88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
              std::min(params.filter_width, input_width - in_x_origin);
   b8e8c:	9a06      	ldr	r2, [sp, #24]
   b8e8e:	9305      	str	r3, [sp, #20]
   b8e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8e92:	1a9a      	subs	r2, r3, r2
   b8e94:	69a3      	ldr	r3, [r4, #24]
   b8e96:	429a      	cmp	r2, r3
   b8e98:	bfa8      	it	ge
   b8e9a:	461a      	movge	r2, r3
   b8e9c:	9211      	str	r2, [sp, #68]	; 0x44
              std::min(params.filter_height, input_height - in_y_origin);
   b8e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ea0:	9a07      	ldr	r2, [sp, #28]
   b8ea2:	1a9a      	subs	r2, r3, r2
   b8ea4:	6963      	ldr	r3, [r4, #20]
   b8ea6:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b8ea8:	eba5 050a 	sub.w	r5, r5, sl
   b8eac:	bfa8      	it	ge
   b8eae:	461a      	movge	r2, r3
   b8eb0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b8eb4:	9208      	str	r2, [sp, #32]
          float total = 0.f;
   b8eb6:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b8eba:	9b08      	ldr	r3, [sp, #32]
   b8ebc:	42ab      	cmp	r3, r5
   b8ebe:	dd1e      	ble.n	b8efe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ec0:	9b07      	ldr	r3, [sp, #28]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ec2:	f8dd 8014 	ldr.w	r8, [sp, #20]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ec6:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b8eca:	4598      	cmp	r8, r3
   b8ecc:	da15      	bge.n	b8efa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ece:	9b02      	ldr	r3, [sp, #8]
   b8ed0:	9300      	str	r3, [sp, #0]
   b8ed2:	9b06      	ldr	r3, [sp, #24]
   b8ed4:	9213      	str	r2, [sp, #76]	; 0x4c
   b8ed6:	4443      	add	r3, r8
   b8ed8:	4659      	mov	r1, fp
   b8eda:	4630      	mov	r0, r6
   b8edc:	f7fd fae3 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b8ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b8ee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
   b8ee8:	edd0 7a00 	vldr	s15, [r0]
              filter_count++;
   b8eec:	ee38 8a09 	vadd.f32	s16, s16, s18
              total +=
   b8ef0:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b8ef4:	f108 0801 	add.w	r8, r8, #1
   b8ef8:	e7e6      	b.n	b8ec8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b8efa:	3501      	adds	r5, #1
   b8efc:	e7dd      	b.n	b8eba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfa>
            }
          }
          const float average = total / filter_count;
   b8efe:	ee88 7a88 	vdiv.f32	s14, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8f02:	9b02      	ldr	r3, [sp, #8]
   b8f04:	9300      	str	r3, [sp, #0]
   b8f06:	4659      	mov	r1, fp
   b8f08:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   b8f0c:	4638      	mov	r0, r7
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   b8f0e:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
   b8f12:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
      return __a;
   b8f16:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b8f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8f1e:	bfd8      	it	le
   b8f20:	eeb0 8a47 	vmovle.f32	s16, s14
	return __b;
   b8f24:	eef4 7a48 	vcmp.f32	s15, s16
   b8f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8f2c:	bf48      	it	mi
   b8f2e:	eeb0 8a67 	vmovmi.f32	s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8f32:	f7fd fab8 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b8f36:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b8f38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   b8f3c:	9b02      	ldr	r3, [sp, #8]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b8f3e:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   b8f42:	3301      	adds	r3, #1
   b8f44:	e78d      	b.n	b8e62 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8f46:	9b04      	ldr	r3, [sp, #16]
   b8f48:	3301      	adds	r3, #1
   b8f4a:	9304      	str	r3, [sp, #16]
   b8f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b8f4e:	4499      	add	r9, r3
   b8f50:	e782      	b.n	b8e58 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8f52:	9b03      	ldr	r3, [sp, #12]
   b8f54:	3301      	adds	r3, #1
   b8f56:	9303      	str	r3, [sp, #12]
   b8f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b8f5a:	449a      	add	sl, r3
   b8f5c:	e773      	b.n	b8e46 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b8f5e:	f10b 0b01 	add.w	fp, fp, #1
   b8f62:	e768      	b.n	b8e36 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
   b8f64:	b015      	add	sp, #84	; 0x54
   b8f66:	ecbd 8b04 	vpop	{d8-d9}
   b8f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f6e:	bf00      	nop
   b8f70:	00000000 	.word	0x00000000

000b8f74 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   b8f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f78:	b097      	sub	sp, #92	; 0x5c
   b8f7a:	4698      	mov	r8, r3
   b8f7c:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b8f7e:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b8f82:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   b8f84:	4604      	mov	r4, r0
   b8f86:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b8f88:	dd01      	ble.n	b8f8e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   b8f8a:	f00b fc87 	bl	c489c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8f8e:	680b      	ldr	r3, [r1, #0]
   b8f90:	2b04      	cmp	r3, #4
   b8f92:	d1fa      	bne.n	b8f8a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b8f94:	f8d8 3000 	ldr.w	r3, [r8]
   b8f98:	2b04      	cmp	r3, #4
   b8f9a:	d1f6      	bne.n	b8f8a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8f9c:	2300      	movs	r3, #0
   b8f9e:	4619      	mov	r1, r3
   b8fa0:	4642      	mov	r2, r8
   b8fa2:	4638      	mov	r0, r7
   b8fa4:	f7ff fefd 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8fa8:	2303      	movs	r3, #3
   b8faa:	4619      	mov	r1, r3
   b8fac:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8fae:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8fb0:	4638      	mov	r0, r7
   b8fb2:	f7ff fef6 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b8fb6:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b8fb8:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   b8fba:	4638      	mov	r0, r7
   b8fbc:	f7fd fa0c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b8fc0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b8fc2:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   b8fc4:	4638      	mov	r0, r7
   b8fc6:	f7fd fa07 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b8fca:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b8fcc:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   b8fce:	4640      	mov	r0, r8
   b8fd0:	f7fd fa02 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b8fd4:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b8fd6:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   b8fd8:	4640      	mov	r0, r8
   b8fda:	f7fd f9fd 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b8fde:	68e3      	ldr	r3, [r4, #12]
   b8fe0:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   b8fe2:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b8fe4:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   b8fe6:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   b8fe8:	2100      	movs	r1, #0
   b8fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8fec:	4299      	cmp	r1, r3
   b8fee:	f280 8090 	bge.w	b9112 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19e>
   b8ff2:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8ff6:	f8cd b010 	str.w	fp, [sp, #16]
   b8ffa:	9b04      	ldr	r3, [sp, #16]
   b8ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b8ffe:	4293      	cmp	r3, r2
   b9000:	f280 8085 	bge.w	b910e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   b9004:	2300      	movs	r3, #0
   b9006:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9008:	9305      	str	r3, [sp, #20]
   b900a:	9b05      	ldr	r3, [sp, #20]
   b900c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b900e:	4293      	cmp	r3, r2
   b9010:	da77      	bge.n	b9102 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
   b9012:	2300      	movs	r3, #0
   b9014:	9302      	str	r3, [sp, #8]
   b9016:	9b02      	ldr	r3, [sp, #8]
   b9018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b901a:	4293      	cmp	r3, r2
   b901c:	da69      	bge.n	b90f2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b901e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_x_origin =
   b9022:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b9024:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
          const int in_x_origin =
   b9028:	eba3 0309 	sub.w	r3, r3, r9
   b902c:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   b902e:	ebab 0306 	sub.w	r3, fp, r6
   b9032:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b9034:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b9036:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b9038:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   b903c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b903e:	1a9a      	subs	r2, r3, r2
   b9040:	69a3      	ldr	r3, [r4, #24]
   b9042:	429a      	cmp	r2, r3
   b9044:	bfa8      	it	ge
   b9046:	461a      	movge	r2, r3
   b9048:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b904a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b904c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b904e:	1a9a      	subs	r2, r3, r2
   b9050:	6963      	ldr	r3, [r4, #20]
   b9052:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b9054:	eba6 060b 	sub.w	r6, r6, fp
   b9058:	bfa8      	it	ge
   b905a:	461a      	movge	r2, r3
          int32 acc = 0;
   b905c:	2500      	movs	r5, #0
   b905e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   b9062:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b9066:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   b9068:	46aa      	mov	sl, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b906a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b906c:	429e      	cmp	r6, r3
   b906e:	da24      	bge.n	b90ba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x146>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9070:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9072:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9076:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9078:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   b907c:	4283      	cmp	r3, r0
   b907e:	da12      	bge.n	b90a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9080:	9b02      	ldr	r3, [sp, #8]
   b9082:	9806      	ldr	r0, [sp, #24]
   b9084:	9300      	str	r3, [sp, #0]
   b9086:	9b08      	ldr	r3, [sp, #32]
   b9088:	4403      	add	r3, r0
   b908a:	4638      	mov	r0, r7
   b908c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   b9090:	f7fd fa09 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   b9094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9096:	5c1b      	ldrb	r3, [r3, r0]
   b9098:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b909a:	9b06      	ldr	r3, [sp, #24]
   b909c:	3301      	adds	r3, #1
   b909e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   b90a2:	9306      	str	r3, [sp, #24]
   b90a4:	e7e8      	b.n	b9078 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   b90a6:	9b07      	ldr	r3, [sp, #28]
   b90a8:	9a07      	ldr	r2, [sp, #28]
   b90aa:	eba3 0309 	sub.w	r3, r3, r9
   b90ae:	454a      	cmp	r2, r9
   b90b0:	bfb8      	it	lt
   b90b2:	2300      	movlt	r3, #0
   b90b4:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b90b6:	3601      	adds	r6, #1
   b90b8:	e7d7      	b.n	b906a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b90ba:	9b02      	ldr	r3, [sp, #8]
   b90bc:	9300      	str	r3, [sp, #0]
   b90be:	4640      	mov	r0, r8
   b90c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b90c4:	9106      	str	r1, [sp, #24]
          acc = (acc + filter_count / 2) / filter_count;
   b90c6:	eb05 056a 	add.w	r5, r5, sl, asr #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b90ca:	f7fd f9ec 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc = (acc + filter_count / 2) / filter_count;
   b90ce:	fbb5 fafa 	udiv	sl, r5, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b90d2:	69e5      	ldr	r5, [r4, #28]
   b90d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   b90d6:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b90d8:	45aa      	cmp	sl, r5
   b90da:	bfb8      	it	lt
   b90dc:	46aa      	movlt	sl, r5
   b90de:	6a25      	ldr	r5, [r4, #32]
   b90e0:	45aa      	cmp	sl, r5
   b90e2:	bfa8      	it	ge
   b90e4:	46aa      	movge	sl, r5
   b90e6:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b90ea:	9b02      	ldr	r3, [sp, #8]
   b90ec:	3301      	adds	r3, #1
   b90ee:	9302      	str	r3, [sp, #8]
   b90f0:	e791      	b.n	b9016 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b90f2:	9b05      	ldr	r3, [sp, #20]
   b90f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b90f6:	3301      	adds	r3, #1
   b90f8:	9305      	str	r3, [sp, #20]
   b90fa:	9b03      	ldr	r3, [sp, #12]
   b90fc:	4413      	add	r3, r2
   b90fe:	9303      	str	r3, [sp, #12]
   b9100:	e783      	b.n	b900a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9102:	9b04      	ldr	r3, [sp, #16]
   b9104:	3301      	adds	r3, #1
   b9106:	9304      	str	r3, [sp, #16]
   b9108:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b910a:	449b      	add	fp, r3
   b910c:	e775      	b.n	b8ffa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b910e:	3101      	adds	r1, #1
   b9110:	e76b      	b.n	b8fea <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   b9112:	b017      	add	sp, #92	; 0x5c
   b9114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9118 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   b9118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b911c:	ed2d 8b02 	vpush	{d8}
   b9120:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b9122:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   b9124:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b9126:	2b04      	cmp	r3, #4
                    float* output_data) {
   b9128:	4604      	mov	r4, r0
   b912a:	460e      	mov	r6, r1
   b912c:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b912e:	d001      	beq.n	b9134 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   b9130:	f00b fbb4 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b9134:	683b      	ldr	r3, [r7, #0]
   b9136:	2b04      	cmp	r3, #4
   b9138:	d1fa      	bne.n	b9130 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b913a:	2300      	movs	r3, #0
   b913c:	4619      	mov	r1, r3
   b913e:	463a      	mov	r2, r7
   b9140:	4630      	mov	r0, r6
   b9142:	f7ff fe2e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9146:	2303      	movs	r3, #3
   b9148:	4619      	mov	r1, r3
   b914a:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b914c:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b914e:	4630      	mov	r0, r6
   b9150:	f7ff fe27 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b9154:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9156:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   b9158:	4630      	mov	r0, r6
   b915a:	f7fd f93d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b915e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b9160:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   b9162:	4630      	mov	r0, r6
   b9164:	f7fd f938 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b9168:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b916a:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   b916c:	4638      	mov	r0, r7
   b916e:	f7fd f933 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b9172:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b9174:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   b9176:	4638      	mov	r0, r7
   b9178:	f7fd f92e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b917c:	68e3      	ldr	r3, [r4, #12]
   b917e:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   b9180:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b9182:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   b9184:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   b9186:	2100      	movs	r1, #0
   b9188:	9b08      	ldr	r3, [sp, #32]
   b918a:	4299      	cmp	r1, r3
   b918c:	f280 8099 	bge.w	b92c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1aa>
   b9190:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9194:	46da      	mov	sl, fp
   b9196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9198:	459a      	cmp	sl, r3
   b919a:	f280 8090 	bge.w	b92be <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a6>
   b919e:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b91a2:	f8cd 900c 	str.w	r9, [sp, #12]
   b91a6:	9b03      	ldr	r3, [sp, #12]
   b91a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b91aa:	4293      	cmp	r3, r2
   b91ac:	f280 8082 	bge.w	b92b4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
        for (int channel = 0; channel < depth; ++channel) {
   b91b0:	2300      	movs	r3, #0
   b91b2:	9302      	str	r3, [sp, #8]
   b91b4:	9b02      	ldr	r3, [sp, #8]
   b91b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b91b8:	4293      	cmp	r3, r2
   b91ba:	da75      	bge.n	b92a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x190>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b91bc:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b91c0:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   b91c4:	eba9 0308 	sub.w	r3, r9, r8
   b91c8:	9305      	str	r3, [sp, #20]
          const int in_y_origin =
   b91ca:	ebab 0305 	sub.w	r3, fp, r5
   b91ce:	9306      	str	r3, [sp, #24]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b91d0:	eba8 0309 	sub.w	r3, r8, r9
   b91d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b91d8:	9a05      	ldr	r2, [sp, #20]
   b91da:	9304      	str	r3, [sp, #16]
   b91dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b91de:	1a9a      	subs	r2, r3, r2
   b91e0:	69a3      	ldr	r3, [r4, #24]
   b91e2:	429a      	cmp	r2, r3
   b91e4:	bfa8      	it	ge
   b91e6:	461a      	movge	r2, r3
   b91e8:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b91ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b91ec:	9a06      	ldr	r2, [sp, #24]
   b91ee:	1a9a      	subs	r2, r3, r2
   b91f0:	6963      	ldr	r3, [r4, #20]
   b91f2:	429a      	cmp	r2, r3
   b91f4:	bfa8      	it	ge
   b91f6:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b91f8:	eba5 050b 	sub.w	r5, r5, fp
          float max = std::numeric_limits<float>::lowest();
   b91fc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   b9200:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   b9204:	9207      	str	r2, [sp, #28]
   b9206:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9208:	9b07      	ldr	r3, [sp, #28]
   b920a:	429d      	cmp	r5, r3
   b920c:	da26      	bge.n	b925c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b920e:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9210:	f8dd 8010 	ldr.w	r8, [sp, #16]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b9214:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (__a < __b)
   b9218:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   b921c:	4598      	cmp	r8, r3
   b921e:	da1b      	bge.n	b9258 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b9220:	9b02      	ldr	r3, [sp, #8]
   b9222:	9300      	str	r3, [sp, #0]
   b9224:	9b05      	ldr	r3, [sp, #20]
   b9226:	4630      	mov	r0, r6
   b9228:	4443      	add	r3, r8
   b922a:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   b922e:	f7fd f93a 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9232:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b9234:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9238:	edd0 7a00 	vldr	s15, [r0]
   b923c:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   b9240:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   b9242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   b9246:	bfd8      	it	le
   b9248:	4618      	movle	r0, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b924a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              max = std::max(
   b924e:	6803      	ldr	r3, [r0, #0]
   b9250:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9252:	f108 0801 	add.w	r8, r8, #1
   b9256:	e7de      	b.n	b9216 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b9258:	3501      	adds	r5, #1
   b925a:	e7d5      	b.n	b9208 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   b925c:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
   b9260:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
   b9264:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9268:	9b02      	ldr	r3, [sp, #8]
   b926a:	9300      	str	r3, [sp, #0]
   b926c:	eeb4 7ac8 	vcmpe.f32	s14, s16
   b9270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9274:	bf58      	it	pl
   b9276:	eeb0 8a47 	vmovpl.f32	s16, s14
	return __b;
   b927a:	eef4 7a48 	vcmp.f32	s15, s16
   b927e:	9b03      	ldr	r3, [sp, #12]
   b9280:	9104      	str	r1, [sp, #16]
   b9282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9286:	4652      	mov	r2, sl
   b9288:	4638      	mov	r0, r7
   b928a:	bf48      	it	mi
   b928c:	eeb0 8a67 	vmovmi.f32	s16, s15
   b9290:	f7fd f909 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9294:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int channel = 0; channel < depth; ++channel) {
   b9296:	9904      	ldr	r1, [sp, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9298:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   b929c:	9b02      	ldr	r3, [sp, #8]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b929e:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   b92a2:	3301      	adds	r3, #1
   b92a4:	9302      	str	r3, [sp, #8]
   b92a6:	e785      	b.n	b91b4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b92a8:	9b03      	ldr	r3, [sp, #12]
   b92aa:	3301      	adds	r3, #1
   b92ac:	9303      	str	r3, [sp, #12]
   b92ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b92b0:	4499      	add	r9, r3
   b92b2:	e778      	b.n	b91a6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b92b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b92b6:	f10a 0a01 	add.w	sl, sl, #1
   b92ba:	449b      	add	fp, r3
   b92bc:	e76b      	b.n	b9196 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
   b92be:	3101      	adds	r1, #1
   b92c0:	e762      	b.n	b9188 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
        }
      }
    }
  }
}
   b92c2:	b017      	add	sp, #92	; 0x5c
   b92c4:	ecbd 8b02 	vpop	{d8}
   b92c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b92cc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   b92cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b92d0:	b099      	sub	sp, #100	; 0x64
   b92d2:	461f      	mov	r7, r3
   b92d4:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b92d6:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b92da:	429a      	cmp	r2, r3
                    uint8* output_data) {
   b92dc:	4604      	mov	r4, r0
   b92de:	460e      	mov	r6, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b92e0:	dd01      	ble.n	b92e6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   b92e2:	f00b fadb 	bl	c489c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   b92e6:	2a00      	cmp	r2, #0
   b92e8:	dbfb      	blt.n	b92e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   b92ea:	2bff      	cmp	r3, #255	; 0xff
   b92ec:	dcf9      	bgt.n	b92e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b92ee:	680b      	ldr	r3, [r1, #0]
   b92f0:	2b04      	cmp	r3, #4
   b92f2:	d1f6      	bne.n	b92e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b92f4:	683b      	ldr	r3, [r7, #0]
   b92f6:	2b04      	cmp	r3, #4
   b92f8:	d1f3      	bne.n	b92e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b92fa:	2300      	movs	r3, #0
   b92fc:	4619      	mov	r1, r3
   b92fe:	463a      	mov	r2, r7
   b9300:	4630      	mov	r0, r6
   b9302:	f7ff fd4e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9306:	2303      	movs	r3, #3
   b9308:	4619      	mov	r1, r3
   b930a:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b930c:	900c      	str	r0, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b930e:	4630      	mov	r0, r6
   b9310:	f7ff fd47 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b9314:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b9316:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_height = input_shape.Dims(1);
   b9318:	4630      	mov	r0, r6
   b931a:	f7fd f85d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b931e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b9320:	900e      	str	r0, [sp, #56]	; 0x38
  const int input_width = input_shape.Dims(2);
   b9322:	4630      	mov	r0, r6
   b9324:	f7fd f858 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b9328:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b932a:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
   b932c:	4638      	mov	r0, r7
   b932e:	f7fd f853 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b9332:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b9334:	9011      	str	r0, [sp, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
   b9336:	4638      	mov	r0, r7
   b9338:	f7fd f84e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b933c:	68e3      	ldr	r3, [r4, #12]
   b933e:	9313      	str	r3, [sp, #76]	; 0x4c
  const int stride_width = params.stride_width;
   b9340:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   b9342:	9012      	str	r0, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   b9344:	9314      	str	r3, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   b9346:	f04f 0b00 	mov.w	fp, #0
   b934a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b934c:	459b      	cmp	fp, r3
   b934e:	f280 808d 	bge.w	b946c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a0>
   b9352:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9356:	46d1      	mov	r9, sl
   b9358:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b935a:	4599      	cmp	r9, r3
   b935c:	f280 8083 	bge.w	b9466 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   b9360:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9364:	f8cd 8010 	str.w	r8, [sp, #16]
   b9368:	9b04      	ldr	r3, [sp, #16]
   b936a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b936c:	4293      	cmp	r3, r2
   b936e:	da75      	bge.n	b945c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
        for (int channel = 0; channel < depth; ++channel) {
   b9370:	2300      	movs	r3, #0
   b9372:	9303      	str	r3, [sp, #12]
   b9374:	9b03      	ldr	r3, [sp, #12]
   b9376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9378:	4293      	cmp	r3, r2
   b937a:	da69      	bge.n	b9450 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x184>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b937c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b9380:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   b9384:	eba8 0203 	sub.w	r2, r8, r3
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b9388:	eba3 0308 	sub.w	r3, r3, r8
          const int in_x_origin =
   b938c:	9207      	str	r2, [sp, #28]
          const int in_y_origin =
   b938e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9392:	ebaa 0205 	sub.w	r2, sl, r5
   b9396:	9208      	str	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b9398:	9306      	str	r3, [sp, #24]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b939a:	9a07      	ldr	r2, [sp, #28]
   b939c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b939e:	1a9a      	subs	r2, r3, r2
   b93a0:	69a3      	ldr	r3, [r4, #24]
   b93a2:	429a      	cmp	r2, r3
   b93a4:	bfa8      	it	ge
   b93a6:	461a      	movge	r2, r3
   b93a8:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b93aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b93ac:	9a08      	ldr	r2, [sp, #32]
   b93ae:	1a9a      	subs	r2, r3, r2
   b93b0:	6963      	ldr	r3, [r4, #20]
   b93b2:	429a      	cmp	r2, r3
   b93b4:	bfa8      	it	ge
   b93b6:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b93b8:	eba5 050a 	sub.w	r5, r5, sl
          uint8 max = 0;
   b93bc:	2300      	movs	r3, #0
   b93be:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b93c2:	9210      	str	r2, [sp, #64]	; 0x40
   b93c4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b93c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b93ca:	429d      	cmp	r5, r3
   b93cc:	da28      	bge.n	b9420 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x154>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b93ce:	9b06      	ldr	r3, [sp, #24]
   b93d0:	9305      	str	r3, [sp, #20]
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b93d2:	9b08      	ldr	r3, [sp, #32]
   b93d4:	18ea      	adds	r2, r5, r3
      if (__a < __b)
   b93d6:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b93da:	9905      	ldr	r1, [sp, #20]
   b93dc:	9309      	str	r3, [sp, #36]	; 0x24
   b93de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b93e0:	428b      	cmp	r3, r1
   b93e2:	dd1b      	ble.n	b941c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x150>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   b93e4:	9b03      	ldr	r3, [sp, #12]
   b93e6:	9300      	str	r3, [sp, #0]
   b93e8:	460b      	mov	r3, r1
   b93ea:	9907      	ldr	r1, [sp, #28]
   b93ec:	9215      	str	r2, [sp, #84]	; 0x54
   b93ee:	440b      	add	r3, r1
   b93f0:	4630      	mov	r0, r6
   b93f2:	4659      	mov	r1, fp
   b93f4:	f7fd f857 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b93f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b93fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b93fc:	4403      	add	r3, r0
   b93fe:	5c10      	ldrb	r0, [r2, r0]
   b9400:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b9402:	4290      	cmp	r0, r2
      return __a;
   b9404:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
   b9408:	bf98      	it	ls
   b940a:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b940c:	9a15      	ldr	r2, [sp, #84]	; 0x54
              max = std::max(
   b940e:	781b      	ldrb	r3, [r3, #0]
   b9410:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9414:	9b05      	ldr	r3, [sp, #20]
   b9416:	3301      	adds	r3, #1
   b9418:	9305      	str	r3, [sp, #20]
   b941a:	e7dc      	b.n	b93d6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x10a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b941c:	3501      	adds	r5, #1
   b941e:	e7d3      	b.n	b93c8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfc>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   b9420:	7f25      	ldrb	r5, [r4, #28]
   b9422:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   b9426:	429d      	cmp	r5, r3
   b9428:	bf38      	it	cc
   b942a:	461d      	movcc	r5, r3
   b942c:	f894 3020 	ldrb.w	r3, [r4, #32]
   b9430:	429d      	cmp	r5, r3
   b9432:	bf28      	it	cs
   b9434:	461d      	movcs	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b9436:	9b03      	ldr	r3, [sp, #12]
   b9438:	9300      	str	r3, [sp, #0]
   b943a:	464a      	mov	r2, r9
   b943c:	9b04      	ldr	r3, [sp, #16]
   b943e:	4659      	mov	r1, fp
   b9440:	4638      	mov	r0, r7
   b9442:	f7fd f830 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b9446:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b9448:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b944a:	9b03      	ldr	r3, [sp, #12]
   b944c:	3301      	adds	r3, #1
   b944e:	e790      	b.n	b9372 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9450:	9b04      	ldr	r3, [sp, #16]
   b9452:	3301      	adds	r3, #1
   b9454:	9304      	str	r3, [sp, #16]
   b9456:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9458:	4498      	add	r8, r3
   b945a:	e785      	b.n	b9368 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b945c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b945e:	f109 0901 	add.w	r9, r9, #1
   b9462:	449a      	add	sl, r3
   b9464:	e778      	b.n	b9358 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8c>
  for (int batch = 0; batch < batches; ++batch) {
   b9466:	f10b 0b01 	add.w	fp, fp, #1
   b946a:	e76e      	b.n	b934a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   b946c:	b019      	add	sp, #100	; 0x64
   b946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9472 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   b9472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9476:	b097      	sub	sp, #92	; 0x5c
   b9478:	4698      	mov	r8, r3
   b947a:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b947c:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   b9480:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   b9482:	4605      	mov	r5, r0
   b9484:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   b9486:	dd01      	ble.n	b948c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   b9488:	f00b fa08 	bl	c489c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b948c:	680b      	ldr	r3, [r1, #0]
   b948e:	2b04      	cmp	r3, #4
   b9490:	d1fa      	bne.n	b9488 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b9492:	f8d8 3000 	ldr.w	r3, [r8]
   b9496:	2b04      	cmp	r3, #4
   b9498:	d1f6      	bne.n	b9488 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b949a:	2300      	movs	r3, #0
   b949c:	4619      	mov	r1, r3
   b949e:	4642      	mov	r2, r8
   b94a0:	4638      	mov	r0, r7
   b94a2:	f7ff fc7e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b94a6:	2303      	movs	r3, #3
   b94a8:	4619      	mov	r1, r3
   b94aa:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b94ac:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b94ae:	4638      	mov	r0, r7
   b94b0:	f7ff fc77 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b94b4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   b94b6:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   b94b8:	4638      	mov	r0, r7
   b94ba:	f7fc ff8d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b94be:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b94c0:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   b94c2:	4638      	mov	r0, r7
   b94c4:	f7fc ff88 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b94c8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   b94ca:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   b94cc:	4640      	mov	r0, r8
   b94ce:	f7fc ff83 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b94d2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b94d4:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   b94d6:	4640      	mov	r0, r8
   b94d8:	f7fc ff7e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   b94dc:	68eb      	ldr	r3, [r5, #12]
   b94de:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   b94e0:	692b      	ldr	r3, [r5, #16]
  const int output_width = output_shape.Dims(2);
   b94e2:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   b94e4:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   b94e6:	2100      	movs	r1, #0
   b94e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b94ea:	4299      	cmp	r1, r3
   b94ec:	f280 809b 	bge.w	b9626 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1b4>
   b94f0:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b94f4:	f8cd b010 	str.w	fp, [sp, #16]
   b94f8:	9b04      	ldr	r3, [sp, #16]
   b94fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b94fc:	4293      	cmp	r3, r2
   b94fe:	f280 8090 	bge.w	b9622 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1b0>
   b9502:	2300      	movs	r3, #0
   b9504:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9506:	9305      	str	r3, [sp, #20]
   b9508:	9b05      	ldr	r3, [sp, #20]
   b950a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b950c:	4293      	cmp	r3, r2
   b950e:	f280 8082 	bge.w	b9616 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a4>
        for (int channel = 0; channel < depth; ++channel) {
   b9512:	2300      	movs	r3, #0
   b9514:	9302      	str	r3, [sp, #8]
   b9516:	9b02      	ldr	r3, [sp, #8]
   b9518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b951a:	4293      	cmp	r3, r2
   b951c:	da73      	bge.n	b9606 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   b951e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
          const int in_x_origin =
   b9522:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   b9524:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
          const int in_x_origin =
   b9528:	eba3 0309 	sub.w	r3, r3, r9
   b952c:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   b952e:	ebab 0306 	sub.w	r3, fp, r6
   b9532:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   b9534:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   b9536:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   b9538:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   b953c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b953e:	1a9a      	subs	r2, r3, r2
   b9540:	69ab      	ldr	r3, [r5, #24]
   b9542:	429a      	cmp	r2, r3
   b9544:	bfa8      	it	ge
   b9546:	461a      	movge	r2, r3
   b9548:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   b954a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b954c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b954e:	1a9a      	subs	r2, r3, r2
   b9550:	696b      	ldr	r3, [r5, #20]
   b9552:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   b9554:	eba6 060b 	sub.w	r6, r6, fp
   b9558:	bfa8      	it	ge
   b955a:	461a      	movge	r2, r3
          int32 acc = 0;
   b955c:	2400      	movs	r4, #0
   b955e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   b9562:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   b9566:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   b9568:	46a2      	mov	sl, r4
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b956a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b956c:	429e      	cmp	r6, r3
   b956e:	da24      	bge.n	b95ba <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x148>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9570:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9572:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9576:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b9578:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   b957c:	4283      	cmp	r3, r0
   b957e:	da12      	bge.n	b95a6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   b9580:	9b02      	ldr	r3, [sp, #8]
   b9582:	9806      	ldr	r0, [sp, #24]
   b9584:	9300      	str	r3, [sp, #0]
   b9586:	9b08      	ldr	r3, [sp, #32]
   b9588:	4403      	add	r3, r0
   b958a:	4638      	mov	r0, r7
   b958c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   b9590:	f7fc ff89 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   b9594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9596:	561b      	ldrsb	r3, [r3, r0]
   b9598:	441c      	add	r4, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   b959a:	9b06      	ldr	r3, [sp, #24]
   b959c:	3301      	adds	r3, #1
   b959e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   b95a2:	9306      	str	r3, [sp, #24]
   b95a4:	e7e8      	b.n	b9578 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   b95a6:	9b07      	ldr	r3, [sp, #28]
   b95a8:	9a07      	ldr	r2, [sp, #28]
   b95aa:	eba3 0309 	sub.w	r3, r3, r9
   b95ae:	454a      	cmp	r2, r9
   b95b0:	bfb8      	it	lt
   b95b2:	2300      	movlt	r3, #0
   b95b4:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   b95b6:	3601      	adds	r6, #1
   b95b8:	e7d7      	b.n	b956a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf8>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b95ba:	2c00      	cmp	r4, #0
                        : (acc - filter_count / 2) / filter_count;
   b95bc:	bfdc      	itt	le
   b95be:	eb0a 73da 	addle.w	r3, sl, sl, lsr #31
   b95c2:	eba4 0463 	suble.w	r4, r4, r3, asr #1
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b95c6:	9b02      	ldr	r3, [sp, #8]
   b95c8:	9300      	str	r3, [sp, #0]
   b95ca:	4640      	mov	r0, r8
   b95cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b95d0:	bfd4      	ite	le
   b95d2:	fb94 fafa 	sdivle	sl, r4, sl
   b95d6:	eb04 046a 	addgt.w	r4, r4, sl, asr #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b95da:	9106      	str	r1, [sp, #24]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   b95dc:	bfc8      	it	gt
   b95de:	fbb4 fafa 	udivgt	sl, r4, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b95e2:	f7fc ff60 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   b95e6:	69ec      	ldr	r4, [r5, #28]
   b95e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   b95ea:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   b95ec:	45a2      	cmp	sl, r4
   b95ee:	bfb8      	it	lt
   b95f0:	46a2      	movlt	sl, r4
   b95f2:	6a2c      	ldr	r4, [r5, #32]
   b95f4:	45a2      	cmp	sl, r4
   b95f6:	bfa8      	it	ge
   b95f8:	46a2      	movge	sl, r4
   b95fa:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   b95fe:	9b02      	ldr	r3, [sp, #8]
   b9600:	3301      	adds	r3, #1
   b9602:	9302      	str	r3, [sp, #8]
   b9604:	e787      	b.n	b9516 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b9606:	9b05      	ldr	r3, [sp, #20]
   b9608:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b960a:	3301      	adds	r3, #1
   b960c:	9305      	str	r3, [sp, #20]
   b960e:	9b03      	ldr	r3, [sp, #12]
   b9610:	4413      	add	r3, r2
   b9612:	9303      	str	r3, [sp, #12]
   b9614:	e778      	b.n	b9508 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b9616:	9b04      	ldr	r3, [sp, #16]
   b9618:	3301      	adds	r3, #1
   b961a:	9304      	str	r3, [sp, #16]
   b961c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b961e:	449b      	add	fp, r3
   b9620:	e76a      	b.n	b94f8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   b9622:	3101      	adds	r1, #1
   b9624:	e760      	b.n	b94e8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   b9626:	b017      	add	sp, #92	; 0x5c
   b9628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
   b962c:	2801      	cmp	r0, #1
   b962e:	d003      	beq.n	b9638 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   b9630:	2802      	cmp	r0, #2
   b9632:	d006      	beq.n	b9642 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   b9634:	2000      	movs	r0, #0
   b9636:	4770      	bx	lr
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
   b9638:	4419      	add	r1, r3
   b963a:	3901      	subs	r1, #1
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
   b963c:	fb91 f0f3 	sdiv	r0, r1, r3
    default:
      return 0;
  }
}
   b9640:	4770      	bx	lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b9642:	1e50      	subs	r0, r2, #1
   b9644:	9a00      	ldr	r2, [sp, #0]
   b9646:	4350      	muls	r0, r2
      return (image_size + stride - effective_filter_size) / stride;
   b9648:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b964a:	3001      	adds	r0, #1
      return (image_size + stride - effective_filter_size) / stride;
   b964c:	1a09      	subs	r1, r1, r0
   b964e:	e7f5      	b.n	b963c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

000b9650 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b9650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return t->dims->data[dim];
   b9654:	e9d1 9302 	ldrd	r9, r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   b9658:	e9d0 5403 	ldrd	r5, r4, [r0, #12]
      params->stride_height, params->stride_width,
   b965c:	e9d0 8a01 	ldrd	r8, sl, [r0, #4]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b9660:	b085      	sub	sp, #20
      params->filter_width, params->padding, &out_height, &out_width);
   b9662:	f890 b000 	ldrb.w	fp, [r0]
   b9666:	9302      	str	r3, [sp, #8]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b9668:	2701      	movs	r7, #1
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   b966a:	4616      	mov	r6, r2
   b966c:	9902      	ldr	r1, [sp, #8]
   b966e:	9700      	str	r7, [sp, #0]
   b9670:	4643      	mov	r3, r8
   b9672:	462a      	mov	r2, r5
   b9674:	4658      	mov	r0, fp
   b9676:	f7ff ffd9 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b967a:	9700      	str	r7, [sp, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b967c:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b967e:	4653      	mov	r3, sl
   b9680:	4622      	mov	r2, r4
   b9682:	4649      	mov	r1, r9
   b9684:	4658      	mov	r0, fp
   b9686:	f7ff ffd1 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b968a:	9b03      	ldr	r3, [sp, #12]
   b968c:	1e5f      	subs	r7, r3, #1
  int total_padding =
   b968e:	9b02      	ldr	r3, [sp, #8]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b9690:	3801      	subs	r0, #1
   b9692:	fb08 5507 	mla	r5, r8, r7, r5
   b9696:	fb0a 4a00 	mla	sl, sl, r0, r4
  int total_padding =
   b969a:	1aed      	subs	r5, r5, r3
   b969c:	ebaa 0909 	sub.w	r9, sl, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   b96a0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   b96a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   b96a8:	106b      	asrs	r3, r5, #1
      params->filter_width, params->padding, &out_height, &out_width);
   b96aa:	6033      	str	r3, [r6, #0]
  *offset = total_padding % 2;
   b96ac:	f005 0501 	and.w	r5, r5, #1
  return total_padding / 2;
   b96b0:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   b96b4:	f009 0401 	and.w	r4, r9, #1
}
   b96b8:	2000      	movs	r0, #0
      params->filter_width, params->padding, &out_height, &out_width);
   b96ba:	6073      	str	r3, [r6, #4]
   b96bc:	60b5      	str	r5, [r6, #8]
   b96be:	60f4      	str	r4, [r6, #12]
}
   b96c0:	b005      	add	sp, #20
   b96c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b96c8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   b96c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b96cc:	680b      	ldr	r3, [r1, #0]
   b96ce:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b96d2:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   b96d4:	694d      	ldr	r5, [r1, #20]
   b96d6:	2438      	movs	r4, #56	; 0x38
   b96d8:	fb04 f903 	mul.w	r9, r4, r3
   b96dc:	eb0a 0809 	add.w	r8, sl, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b96e0:	684b      	ldr	r3, [r1, #4]
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b96e2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   b96e6:	f8d3 b004 	ldr.w	fp, [r3, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   b96ea:	b0a1      	sub	sp, #132	; 0x84
   b96ec:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b96ee:	aa07      	add	r2, sp, #28
   b96f0:	4628      	mov	r0, r5
   b96f2:	f7ff ffad 	bl	b9650 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>
   b96f6:	4606      	mov	r6, r0
   b96f8:	b970      	cbnz	r0, b9718 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x50>

  switch (input->type) {
   b96fa:	f81a 0009 	ldrb.w	r0, [sl, r9]
   b96fe:	2801      	cmp	r0, #1
   b9700:	fb04 a40b 	mla	r4, r4, fp, sl
   b9704:	d00a      	beq.n	b971c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
   b9706:	2803      	cmp	r0, #3
   b9708:	d054      	beq.n	b97b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
      break;
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, &data, input, output);
      break;
    default:
      context->ReportError(context, "Type %s not currently supported.",
   b970a:	697c      	ldr	r4, [r7, #20]
   b970c:	f7fb fa3a 	bl	b4b84 <TfLiteTypeGetName>
   b9710:	493f      	ldr	r1, [pc, #252]	; (b9810 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   b9712:	4602      	mov	r2, r0
   b9714:	4638      	mov	r0, r7
   b9716:	47a0      	blx	r4
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b9718:	2601      	movs	r6, #1
   b971a:	e03f      	b.n	b979c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  CalculateActivationRange(params->activation, &activation_min,
   b971c:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
   b971e:	2b01      	cmp	r3, #1
   b9720:	d040      	beq.n	b97a4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xdc>
  } else if (activation == kTfLiteActRelu6) {
   b9722:	2b03      	cmp	r3, #3
   b9724:	d043      	beq.n	b97ae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
    *activation_max = std::numeric_limits<T>::max();
   b9726:	ed9f 7a3b 	vldr	s14, [pc, #236]	; b9814 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>
   b972a:	eddf 6a3b 	vldr	s13, [pc, #236]	; b9818 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
   b972e:	2b02      	cmp	r3, #2
   b9730:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b9734:	bf18      	it	ne
   b9736:	eef0 7a47 	vmovne.f32	s15, s14
   b973a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b973e:	bf18      	it	ne
   b9740:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.stride_height = params->stride_height;
   b9744:	68ab      	ldr	r3, [r5, #8]
   b9746:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9748:	686b      	ldr	r3, [r5, #4]
   b974a:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b974c:	692b      	ldr	r3, [r5, #16]
   b974e:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b9750:	68eb      	ldr	r3, [r5, #12]
   b9752:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b9754:	9b08      	ldr	r3, [sp, #32]
   b9756:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b975a:	4641      	mov	r1, r8
  op_params.padding_values.width = data->padding.width;
   b975c:	9b07      	ldr	r3, [sp, #28]
   b975e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9762:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.float_activation_min = activation_min;
   b9764:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  op_params.float_activation_max = activation_max;
   b9768:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b976c:	f7fd f8cd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9770:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b9774:	9203      	str	r2, [sp, #12]
                         GetTensorData<float>(input), GetTensorShape(output),
   b9776:	4621      	mov	r1, r4
   b9778:	a810      	add	r0, sp, #64	; 0x40
   b977a:	f7fd f8c6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b977e:	9a03      	ldr	r2, [sp, #12]
   b9780:	b104      	cbz	r4, b9784 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   b9782:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9784:	9400      	str	r4, [sp, #0]
   b9786:	ab10      	add	r3, sp, #64	; 0x40
   b9788:	a90b      	add	r1, sp, #44	; 0x2c
   b978a:	a815      	add	r0, sp, #84	; 0x54
   b978c:	f7ff fcc4 	bl	b9118 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
   b9790:	a810      	add	r0, sp, #64	; 0x40
   b9792:	f7fc fe16 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9796:	a80b      	add	r0, sp, #44	; 0x2c
   b9798:	f7fc fe13 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                           TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   b979c:	4630      	mov	r0, r6
   b979e:	b021      	add	sp, #132	; 0x84
   b97a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   b97a4:	eddf 7a1b 	vldr	s15, [pc, #108]	; b9814 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>
    *activation_min = 0;
   b97a8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; b981c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
   b97ac:	e7ca      	b.n	b9744 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
    *activation_max = 6;
   b97ae:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b97b2:	e7f9      	b.n	b97a8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe0>
  CalculateActivationRangeUint8(params->activation, output, &activation_min,
   b97b4:	aa05      	add	r2, sp, #20
   b97b6:	7d28      	ldrb	r0, [r5, #20]
   b97b8:	ab06      	add	r3, sp, #24
   b97ba:	4621      	mov	r1, r4
   b97bc:	f7fb fc1e 	bl	b4ffc <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b97c0:	68ab      	ldr	r3, [r5, #8]
   b97c2:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b97c4:	686b      	ldr	r3, [r5, #4]
   b97c6:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b97c8:	692b      	ldr	r3, [r5, #16]
   b97ca:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b97cc:	68eb      	ldr	r3, [r5, #12]
   b97ce:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b97d0:	9b08      	ldr	r3, [sp, #32]
   b97d2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b97d6:	9b07      	ldr	r3, [sp, #28]
   b97d8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b97dc:	9b05      	ldr	r3, [sp, #20]
   b97de:	931c      	str	r3, [sp, #112]	; 0x70
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b97e0:	4641      	mov	r1, r8
  op_params.quantized_activation_max = activation_max;
   b97e2:	9b06      	ldr	r3, [sp, #24]
   b97e4:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b97e6:	a80b      	add	r0, sp, #44	; 0x2c
   b97e8:	f7fd f88f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b97ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b97f0:	9203      	str	r2, [sp, #12]
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
   b97f2:	4621      	mov	r1, r4
   b97f4:	a810      	add	r0, sp, #64	; 0x40
   b97f6:	f7fd f888 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b97fa:	9a03      	ldr	r2, [sp, #12]
   b97fc:	b104      	cbz	r4, b9800 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x138>
   b97fe:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   b9800:	9400      	str	r4, [sp, #0]
   b9802:	ab10      	add	r3, sp, #64	; 0x40
   b9804:	a90b      	add	r1, sp, #44	; 0x2c
   b9806:	a815      	add	r0, sp, #84	; 0x54
   b9808:	f7ff fd60 	bl	b92cc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   b980c:	e7c0      	b.n	b9790 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
   b980e:	bf00      	nop
   b9810:	000c873a 	.word	0x000c873a
   b9814:	7f7fffff 	.word	0x7f7fffff
   b9818:	ff7fffff 	.word	0xff7fffff
   b981c:	00000000 	.word	0x00000000

000b9820 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   b9820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   b9824:	680b      	ldr	r3, [r1, #0]
   b9826:	f8d0 a008 	ldr.w	sl, [r0, #8]
   b982a:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   b982c:	694d      	ldr	r5, [r1, #20]
   b982e:	2438      	movs	r4, #56	; 0x38
   b9830:	fb04 f903 	mul.w	r9, r4, r3
   b9834:	eb0a 0609 	add.w	r6, sl, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   b9838:	684b      	ldr	r3, [r1, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b983a:	68b1      	ldr	r1, [r6, #8]
   b983c:	f8d3 b004 	ldr.w	fp, [r3, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   b9840:	b0a1      	sub	sp, #132	; 0x84
   b9842:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b9844:	aa07      	add	r2, sp, #28
   b9846:	4628      	mov	r0, r5
   b9848:	f7ff ff02 	bl	b9650 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.constprop.0.isra.0>
   b984c:	4607      	mov	r7, r0
   b984e:	2800      	cmp	r0, #0
   b9850:	f040 80b6 	bne.w	b99c0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
  switch (input->type) {
   b9854:	f81a 0009 	ldrb.w	r0, [sl, r9]
   b9858:	2803      	cmp	r0, #3
   b985a:	fb04 a40b 	mla	r4, r4, fp, sl
   b985e:	d04f      	beq.n	b9900 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe0>
   b9860:	2809      	cmp	r0, #9
   b9862:	d079      	beq.n	b9958 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x138>
   b9864:	2801      	cmp	r0, #1
   b9866:	f040 80a3 	bne.w	b99b0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x190>
  CalculateActivationRange(params->activation, &activation_min,
   b986a:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
   b986c:	2b01      	cmp	r3, #1
   b986e:	d03f      	beq.n	b98f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>
  } else if (activation == kTfLiteActRelu6) {
   b9870:	2b03      	cmp	r3, #3
   b9872:	d042      	beq.n	b98fa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xda>
    *activation_max = std::numeric_limits<T>::max();
   b9874:	ed9f 7a53 	vldr	s14, [pc, #332]	; b99c4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   b9878:	eddf 6a53 	vldr	s13, [pc, #332]	; b99c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
   b987c:	2b02      	cmp	r3, #2
   b987e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b9882:	bf18      	it	ne
   b9884:	eef0 7a47 	vmovne.f32	s15, s14
   b9888:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   b988c:	bf18      	it	ne
   b988e:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.stride_height = params->stride_height;
   b9892:	68ab      	ldr	r3, [r5, #8]
   b9894:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9896:	686b      	ldr	r3, [r5, #4]
   b9898:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b989a:	692b      	ldr	r3, [r5, #16]
   b989c:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b989e:	68eb      	ldr	r3, [r5, #12]
   b98a0:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b98a2:	9b08      	ldr	r3, [sp, #32]
   b98a4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b98a8:	4631      	mov	r1, r6
  op_params.padding_values.width = data->padding.width;
   b98aa:	9b07      	ldr	r3, [sp, #28]
   b98ac:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b98b0:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.float_activation_min = activation_min;
   b98b2:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  op_params.float_activation_max = activation_max;
   b98b6:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b98ba:	f7fd f826 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b98be:	6872      	ldr	r2, [r6, #4]
   b98c0:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<float>(output));
   b98c2:	4621      	mov	r1, r4
   b98c4:	a810      	add	r0, sp, #64	; 0x40
   b98c6:	f7fd f820 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b98ca:	9a03      	ldr	r2, [sp, #12]
   b98cc:	b104      	cbz	r4, b98d0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>
   b98ce:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   b98d0:	9400      	str	r4, [sp, #0]
   b98d2:	ab10      	add	r3, sp, #64	; 0x40
   b98d4:	a90b      	add	r1, sp, #44	; 0x2c
   b98d6:	a815      	add	r0, sp, #84	; 0x54
   b98d8:	f7ff fa72 	bl	b8dc0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<int8_t>(output));
   b98dc:	a810      	add	r0, sp, #64	; 0x40
   b98de:	f7fc fd70 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b98e2:	a80b      	add	r0, sp, #44	; 0x2c
   b98e4:	f7fc fd6d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b98e8:	4638      	mov	r0, r7
   b98ea:	b021      	add	sp, #132	; 0x84
   b98ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   b98f0:	eddf 7a34 	vldr	s15, [pc, #208]	; b99c4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    *activation_min = 0;
   b98f4:	ed9f 7a35 	vldr	s14, [pc, #212]	; b99cc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   b98f8:	e7cb      	b.n	b9892 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
    *activation_max = 6;
   b98fa:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   b98fe:	e7f9      	b.n	b98f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  CalculateActivationRangeUint8(params->activation, output, &activation_min,
   b9900:	aa05      	add	r2, sp, #20
   b9902:	7d28      	ldrb	r0, [r5, #20]
   b9904:	ab06      	add	r3, sp, #24
   b9906:	4621      	mov	r1, r4
   b9908:	f7fb fb78 	bl	b4ffc <_ZN6tflite29CalculateActivationRangeUint8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b990c:	68ab      	ldr	r3, [r5, #8]
   b990e:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9910:	686b      	ldr	r3, [r5, #4]
   b9912:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b9914:	692b      	ldr	r3, [r5, #16]
   b9916:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b9918:	68eb      	ldr	r3, [r5, #12]
   b991a:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b991c:	9b08      	ldr	r3, [sp, #32]
   b991e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b9922:	9b07      	ldr	r3, [sp, #28]
   b9924:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b9928:	9b05      	ldr	r3, [sp, #20]
   b992a:	931c      	str	r3, [sp, #112]	; 0x70
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b992c:	4631      	mov	r1, r6
  op_params.quantized_activation_max = activation_max;
   b992e:	9b06      	ldr	r3, [sp, #24]
   b9930:	931d      	str	r3, [sp, #116]	; 0x74
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   b9932:	a80b      	add	r0, sp, #44	; 0x2c
   b9934:	f7fc ffe9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9938:	6872      	ldr	r2, [r6, #4]
   b993a:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   b993c:	4621      	mov	r1, r4
   b993e:	a810      	add	r0, sp, #64	; 0x40
   b9940:	f7fc ffe3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b9944:	9a03      	ldr	r2, [sp, #12]
   b9946:	b104      	cbz	r4, b994a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x12a>
   b9948:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   b994a:	9400      	str	r4, [sp, #0]
   b994c:	ab10      	add	r3, sp, #64	; 0x40
   b994e:	a90b      	add	r1, sp, #44	; 0x2c
   b9950:	a815      	add	r0, sp, #84	; 0x54
   b9952:	f7ff fb0f 	bl	b8f74 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   b9956:	e7c1      	b.n	b98dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  CalculateActivationRangeInt8(params->activation, output, &activation_min,
   b9958:	aa05      	add	r2, sp, #20
   b995a:	7d28      	ldrb	r0, [r5, #20]
   b995c:	ab06      	add	r3, sp, #24
   b995e:	4621      	mov	r1, r4
   b9960:	f7fb fc50 	bl	b5204 <_ZN6tflite28CalculateActivationRangeInt8E21TfLiteFusedActivationP12TfLiteTensorPlS3_>
  op_params.stride_height = params->stride_height;
   b9964:	68ab      	ldr	r3, [r5, #8]
   b9966:	9318      	str	r3, [sp, #96]	; 0x60
  op_params.stride_width = params->stride_width;
   b9968:	686b      	ldr	r3, [r5, #4]
   b996a:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.filter_height = params->filter_height;
   b996c:	692b      	ldr	r3, [r5, #16]
   b996e:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_width = params->filter_width;
   b9970:	68eb      	ldr	r3, [r5, #12]
   b9972:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.padding_values.height = data->padding.height;
   b9974:	9b08      	ldr	r3, [sp, #32]
   b9976:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
  op_params.padding_values.width = data->padding.width;
   b997a:	9b07      	ldr	r3, [sp, #28]
   b997c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  op_params.quantized_activation_min = activation_min;
   b9980:	9b05      	ldr	r3, [sp, #20]
   b9982:	931c      	str	r3, [sp, #112]	; 0x70
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b9984:	4631      	mov	r1, r6
  op_params.quantized_activation_max = activation_max;
   b9986:	9b06      	ldr	r3, [sp, #24]
   b9988:	931d      	str	r3, [sp, #116]	; 0x74
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   b998a:	a80b      	add	r0, sp, #44	; 0x2c
   b998c:	f7fc ffbd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9990:	6872      	ldr	r2, [r6, #4]
   b9992:	9203      	str	r2, [sp, #12]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   b9994:	4621      	mov	r1, r4
   b9996:	a810      	add	r0, sp, #64	; 0x40
   b9998:	f7fc ffb7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b999c:	9a03      	ldr	r2, [sp, #12]
   b999e:	b104      	cbz	r4, b99a2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x182>
   b99a0:	6864      	ldr	r4, [r4, #4]
  reference_integer_ops::AveragePool(
   b99a2:	9400      	str	r4, [sp, #0]
   b99a4:	ab10      	add	r3, sp, #64	; 0x40
   b99a6:	a90b      	add	r1, sp, #44	; 0x2c
   b99a8:	a815      	add	r0, sp, #84	; 0x54
   b99aa:	f7ff fd62 	bl	b9472 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   b99ae:	e795      	b.n	b98dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xbc>
      context->ReportError(context, "Input type %s is not currently supported",
   b99b0:	f8d8 4014 	ldr.w	r4, [r8, #20]
   b99b4:	f7fb f8e6 	bl	b4b84 <TfLiteTypeGetName>
   b99b8:	4905      	ldr	r1, [pc, #20]	; (b99d0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b0>)
   b99ba:	4602      	mov	r2, r0
   b99bc:	4640      	mov	r0, r8
   b99be:	47a0      	blx	r4
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   b99c0:	2701      	movs	r7, #1
   b99c2:	e791      	b.n	b98e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xc8>
   b99c4:	7f7fffff 	.word	0x7f7fffff
   b99c8:	ff7fffff 	.word	0xff7fffff
   b99cc:	00000000 	.word	0x00000000
   b99d0:	000c875b 	.word	0x000c875b

000b99d4 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
      pooling::Free,
      pooling::Prepare,
      pooling::AverageEval,
  };
  return &r;
}
   b99d4:	4800      	ldr	r0, [pc, #0]	; (b99d8 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x4>)
   b99d6:	4770      	bx	lr
   b99d8:	2003c1d0 	.word	0x2003c1d0

000b99dc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:

TfLiteRegistration* Register_MAX_POOL_2D() {
  static TfLiteRegistration r = {pooling::Init, pooling::Free, pooling::Prepare,
                                 pooling::MaxEval};
  return &r;
}
   b99dc:	4800      	ldr	r0, [pc, #0]	; (b99e0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x4>)
   b99de:	4770      	bx	lr
   b99e0:	2003c1b0 	.word	0x2003c1b0

000b99e4 <_ZN6tflite3ops5micro11activations4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   b99e4:	2000      	movs	r0, #0
   b99e6:	4770      	bx	lr

000b99e8 <_ZN6tflite3ops5micro11activations4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   b99e8:	4770      	bx	lr

000b99ea <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   b99ea:	2000      	movs	r0, #0
   b99ec:	4770      	bx	lr
	...

000b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b99f0:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   b99f2:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b99f4:	d119      	bne.n	b9a2a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3a>
   b99f6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   b99fa:	425c      	negs	r4, r3
   b99fc:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   b99fe:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b9a02:	2b00      	cmp	r3, #0
   b9a04:	4a0b      	ldr	r2, [pc, #44]	; (b9a34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x44>)
   b9a06:	bfa8      	it	ge
   b9a08:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b9a0c:	b97c      	cbnz	r4, b9a2e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b9a0e:	1811      	adds	r1, r2, r0
   b9a10:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
   b9a14:	2800      	cmp	r0, #0
   b9a16:	da04      	bge.n	b9a22 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x32>
   b9a18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b9a1c:	18c9      	adds	r1, r1, r3
   b9a1e:	f140 0000 	adc.w	r0, r0, #0
   b9a22:	0fc9      	lsrs	r1, r1, #31
   b9a24:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
   b9a28:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b9a2a:	2400      	movs	r4, #0
   b9a2c:	e7e7      	b.n	b99fe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe>
   b9a2e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b9a32:	e7f9      	b.n	b9a28 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x38>
   b9a34:	c0000001 	.word	0xc0000001

000b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b9a38:	460b      	mov	r3, r1
    if (dimensions_count > kMaxSmallSize) {
   b9a3a:	2b04      	cmp	r3, #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   b9a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9a3e:	4604      	mov	r4, r0
   b9a40:	4611      	mov	r1, r2
    size_ = dimensions_count;
   b9a42:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32[dimensions_count];
   b9a44:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   b9a48:	dc06      	bgt.n	b9a58 <_ZN6tflite12RuntimeShapeC1EiPKl+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9a4a:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   b9a4c:	462a      	mov	r2, r5
   b9a4e:	f00d f8c9 	bl	c6be4 <memcpy>
  }
   b9a52:	4620      	mov	r0, r4
   b9a54:	b003      	add	sp, #12
   b9a56:	bd30      	pop	{r4, r5, pc}
   b9a58:	9201      	str	r2, [sp, #4]
      dims_pointer_ = new int32[dimensions_count];
   b9a5a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   b9a5e:	4293      	cmp	r3, r2
   b9a60:	bfb4      	ite	lt
   b9a62:	4628      	movlt	r0, r5
   b9a64:	f04f 30ff 	movge.w	r0, #4294967295
   b9a68:	f7fb f84b 	bl	b4b02 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9a6c:	6823      	ldr	r3, [r4, #0]
   b9a6e:	9901      	ldr	r1, [sp, #4]
      dims_pointer_ = new int32[dimensions_count];
   b9a70:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9a72:	2b04      	cmp	r3, #4
   b9a74:	dcea      	bgt.n	b9a4c <_ZN6tflite12RuntimeShapeC1EiPKl+0x14>
   b9a76:	e7e8      	b.n	b9a4a <_ZN6tflite12RuntimeShapeC1EiPKl+0x12>

000b9a78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   b9a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32 DimensionsCount() const { return size_; }
   b9a7c:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   b9a7e:	4604      	mov	r4, r0
   b9a80:	460d      	mov	r5, r1
   b9a82:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   b9a84:	2600      	movs	r6, #0
   b9a86:	42be      	cmp	r6, r7
   b9a88:	da10      	bge.n	b9aac <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   b9a8a:	42ae      	cmp	r6, r5
   b9a8c:	d00c      	beq.n	b9aa8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b9a8e:	4631      	mov	r1, r6
   b9a90:	4620      	mov	r0, r4
   b9a92:	f7fc fca1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9a96:	4631      	mov	r1, r6
   b9a98:	4681      	mov	r9, r0
   b9a9a:	4640      	mov	r0, r8
   b9a9c:	f7fc fc9c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9aa0:	4581      	cmp	r9, r0
   b9aa2:	d001      	beq.n	b9aa8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   b9aa4:	f00a fefa 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   b9aa8:	3601      	adds	r6, #1
   b9aaa:	e7ec      	b.n	b9a86 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   b9aac:	2d00      	cmp	r5, #0
   b9aae:	dbf9      	blt.n	b9aa4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   b9ab0:	42bd      	cmp	r5, r7
   b9ab2:	daf7      	bge.n	b9aa4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9ab4:	2f04      	cmp	r7, #4
   b9ab6:	bfcc      	ite	gt
   b9ab8:	6864      	ldrgt	r4, [r4, #4]
   b9aba:	3404      	addle	r4, #4
  int flat_size = 1;
   b9abc:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   b9abe:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9ac0:	429d      	cmp	r5, r3
   b9ac2:	bf18      	it	ne
   b9ac4:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   b9ac8:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9acc:	bf08      	it	eq
   b9ace:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   b9ad0:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9ad2:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   b9ad6:	dcf3      	bgt.n	b9ac0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   b9ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9adc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   b9adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ae0:	ed2d 8b02 	vpush	{d8}
   b9ae4:	b089      	sub	sp, #36	; 0x24
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9ae6:	680d      	ldr	r5, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
   b9ae8:	9001      	str	r0, [sp, #4]
   b9aea:	460e      	mov	r6, r1
   b9aec:	4614      	mov	r4, r2
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   b9aee:	1e69      	subs	r1, r5, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9af0:	461a      	mov	r2, r3
   b9af2:	4630      	mov	r0, r6
                    const RuntimeShape& output_shape, float* output_data) {
   b9af4:	4698      	mov	r8, r3
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b9af6:	9102      	str	r1, [sp, #8]
   b9af8:	f7ff ffbe 	bl	b9a78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   b9afc:	9902      	ldr	r1, [sp, #8]
   b9afe:	9004      	str	r0, [sp, #16]
   b9b00:	4630      	mov	r0, r6
   b9b02:	f7fc fc69 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9b06:	9902      	ldr	r1, [sp, #8]
   b9b08:	4605      	mov	r5, r0
   b9b0a:	4640      	mov	r0, r8
   b9b0c:	f7fc fc64 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   b9b10:	4285      	cmp	r5, r0
   b9b12:	d120      	bne.n	b9b56 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7a>
   b9b14:	00ab      	lsls	r3, r5, #2
   b9b16:	f04f 0800 	mov.w	r8, #0

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   b9b1a:	ed9f 8a3f 	vldr	s16, [pc, #252]	; b9c18 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
   b9b1e:	9305      	str	r3, [sp, #20]
  for (int i = 0; i < outer_size; ++i) {
   b9b20:	4647      	mov	r7, r8
   b9b22:	9b04      	ldr	r3, [sp, #16]
   b9b24:	429f      	cmp	r7, r3
   b9b26:	da72      	bge.n	b9c0e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x132>
    float max = std::numeric_limits<float>::lowest();
   b9b28:	ed8d 8a07 	vstr	s16, [sp, #28]
   b9b2c:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
   b9b2e:	2200      	movs	r2, #0
   b9b30:	42aa      	cmp	r2, r5
   b9b32:	da12      	bge.n	b9b5a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
      max = std::max(max, input_data[i * depth + c]);
   b9b34:	460b      	mov	r3, r1
      if (__a < __b)
   b9b36:	ed93 7a00 	vldr	s14, [r3]
   b9b3a:	eddd 7a07 	vldr	s15, [sp, #28]
   b9b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b9b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   b9b46:	a807      	add	r0, sp, #28
   b9b48:	bfd8      	it	le
   b9b4a:	4603      	movle	r3, r0
   b9b4c:	3104      	adds	r1, #4
   b9b4e:	681b      	ldr	r3, [r3, #0]
   b9b50:	9307      	str	r3, [sp, #28]
    for (int c = 0; c < depth; ++c) {
   b9b52:	3201      	adds	r2, #1
   b9b54:	e7ec      	b.n	b9b30 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x54>
   b9b56:	f00a fea1 	bl	c489c <abort>
   b9b5a:	46a2      	mov	sl, r4
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
   b9b5c:	f04f 0900 	mov.w	r9, #0
    float sum = 0.f;
   b9b60:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
   b9b62:	45a9      	cmp	r9, r5
   b9b64:	db2c      	blt.n	b9bc0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
   b9b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9b68:	46a3      	mov	fp, r4
   b9b6a:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   b9b6e:	f04f 0900 	mov.w	r9, #0
   b9b72:	45a9      	cmp	r9, r5
   b9b74:	da46      	bge.n	b9c04 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x128>
      output_data[i * depth + c] =
          std::exp((input_data[i * depth + c] - max) * params.beta) / sum;
   b9b76:	ecbb 7a01 	vldmia	fp!, {s14}
   b9b7a:	eddd 7a07 	vldr	s15, [sp, #28]
   b9b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (int c = 0; c < depth; ++c) {
   b9b82:	f109 0901 	add.w	r9, r9, #1
          std::exp((input_data[i * depth + c] - max) * params.beta) / sum;
   b9b86:	ee17 0a90 	vmov	r0, s15
   b9b8a:	f7fa fbad 	bl	b42e8 <__aeabi_f2d>
   b9b8e:	9b01      	ldr	r3, [sp, #4]
   b9b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b94:	f7fa fc00 	bl	b4398 <__aeabi_dmul>
   b9b98:	ec41 0b10 	vmov	d0, r0, r1
   b9b9c:	f00b fd58 	bl	c5650 <exp>
   b9ba0:	4630      	mov	r0, r6
   b9ba2:	ed8d 0b02 	vstr	d0, [sp, #8]
   b9ba6:	f7fa fb9f 	bl	b42e8 <__aeabi_f2d>
   b9baa:	4602      	mov	r2, r0
   b9bac:	460b      	mov	r3, r1
   b9bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b9bb2:	f7fa fd1b 	bl	b45ec <__aeabi_ddiv>
   b9bb6:	f7fa fed1 	bl	b495c <__aeabi_d2f>
   b9bba:	f84a 0b04 	str.w	r0, [sl], #4
    for (int c = 0; c < depth; ++c) {
   b9bbe:	e7d8      	b.n	b9b72 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x96>
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
   b9bc0:	ecba 7a01 	vldmia	sl!, {s14}
   b9bc4:	eddd 7a07 	vldr	s15, [sp, #28]
   b9bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
    for (int c = 0; c < depth; ++c) {
   b9bcc:	f109 0901 	add.w	r9, r9, #1
      sum += std::exp((input_data[i * depth + c] - max) * params.beta);
   b9bd0:	ee17 0a90 	vmov	r0, s15
   b9bd4:	f7fa fb88 	bl	b42e8 <__aeabi_f2d>
   b9bd8:	9b01      	ldr	r3, [sp, #4]
   b9bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bde:	f7fa fbdb 	bl	b4398 <__aeabi_dmul>
   b9be2:	ec41 0b10 	vmov	d0, r0, r1
   b9be6:	f00b fd33 	bl	c5650 <exp>
   b9bea:	4630      	mov	r0, r6
   b9bec:	ed8d 0b02 	vstr	d0, [sp, #8]
   b9bf0:	f7fa fb7a 	bl	b42e8 <__aeabi_f2d>
   b9bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9bf8:	f7fa fa18 	bl	b402c <__adddf3>
   b9bfc:	f7fa feae 	bl	b495c <__aeabi_d2f>
   b9c00:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
   b9c02:	e7ae      	b.n	b9b62 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int i = 0; i < outer_size; ++i) {
   b9c04:	9b05      	ldr	r3, [sp, #20]
   b9c06:	3701      	adds	r7, #1
   b9c08:	441c      	add	r4, r3
   b9c0a:	44a8      	add	r8, r5
   b9c0c:	e789      	b.n	b9b22 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x46>
    }
  }
}
   b9c0e:	b009      	add	sp, #36	; 0x24
   b9c10:	ecbd 8b02 	vpop	{d8}
   b9c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c18:	ff7fffff 	.word	0xff7fffff

000b9c1c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>:
  }
}

// Performs softmax along the input of size (input_size * batch_size).
inline void Softmax(const float* in, const int input_size, const int batch_size,
                    const float beta, float* out) {
   b9c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c20:	ed2d 8b04 	vpush	{d8-d9}
   b9c24:	4604      	mov	r4, r0
   b9c26:	b083      	sub	sp, #12
   b9c28:	460e      	mov	r6, r1
   b9c2a:	4690      	mov	r8, r2
   b9c2c:	eef0 8a40 	vmov.f32	s17, s0
   b9c30:	461d      	mov	r5, r3
    for (int i = 0; i < input_size; i++) {
      out[i] *= reciprocal_sum_exp;
    }

    // Advance in and out pointers for the next batch.
    in += input_size;
   b9c32:	ea4f 0b81 	mov.w	fp, r1, lsl #2
  for (int b = 0; b < batch_size; b++) {
   b9c36:	2700      	movs	r7, #0
    float reciprocal_sum_exp = 1.f / exp_sum;
   b9c38:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int b = 0; b < batch_size; b++) {
   b9c3c:	4547      	cmp	r7, r8
   b9c3e:	da3d      	bge.n	b9cbc <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0xa0>
    float max_coeff = in[0];
   b9c40:	ed94 8a00 	vldr	s16, [r4]
    for (int i = 1; i < input_size; i++) {
   b9c44:	4622      	mov	r2, r4
   b9c46:	1d21      	adds	r1, r4, #4
   b9c48:	2301      	movs	r3, #1
   b9c4a:	42b3      	cmp	r3, r6
   b9c4c:	db1a      	blt.n	b9c84 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x68>
    float exp_sum = 0.0;
   b9c4e:	ed9f 9a1e 	vldr	s18, [pc, #120]	; b9cc8 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0xac>
   b9c52:	46a9      	mov	r9, r5
    for (int i = 1; i < input_size; i++) {
   b9c54:	462b      	mov	r3, r5
    for (int i = 0; i < input_size; i++) {
   b9c56:	f04f 0a00 	mov.w	sl, #0
   b9c5a:	45b2      	cmp	sl, r6
   b9c5c:	9301      	str	r3, [sp, #4]
   b9c5e:	da1c      	bge.n	b9c9a <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x7e>
      out[i] = std::exp((in[i] - max_coeff) * beta);
   b9c60:	ecb2 0a01 	vldmia	r2!, {s0}
   b9c64:	ee30 0a48 	vsub.f32	s0, s0, s16
   b9c68:	9200      	str	r2, [sp, #0]
  { return __builtin_expf(__x); }
   b9c6a:	ee20 0a28 	vmul.f32	s0, s0, s17
   b9c6e:	f00b fd41 	bl	c56f4 <expf>
   b9c72:	9b01      	ldr	r3, [sp, #4]
    for (int i = 0; i < input_size; i++) {
   b9c74:	9a00      	ldr	r2, [sp, #0]
      out[i] = std::exp((in[i] - max_coeff) * beta);
   b9c76:	eca3 0a01 	vstmia	r3!, {s0}
      exp_sum += out[i];
   b9c7a:	ee39 9a00 	vadd.f32	s18, s18, s0
    for (int i = 0; i < input_size; i++) {
   b9c7e:	f10a 0a01 	add.w	sl, sl, #1
   b9c82:	e7ea      	b.n	b9c5a <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x3e>
      if (in[i] > max_coeff) max_coeff = in[i];
   b9c84:	ecf1 7a01 	vldmia	r1!, {s15}
   b9c88:	eef4 7a48 	vcmp.f32	s15, s16
   b9c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9c90:	bfc8      	it	gt
   b9c92:	eeb0 8a67 	vmovgt.f32	s16, s15
    for (int i = 1; i < input_size; i++) {
   b9c96:	3301      	adds	r3, #1
   b9c98:	e7d7      	b.n	b9c4a <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x2e>
    float reciprocal_sum_exp = 1.f / exp_sum;
   b9c9a:	ee89 7a89 	vdiv.f32	s14, s19, s18
    for (int i = 0; i < input_size; i++) {
   b9c9e:	2300      	movs	r3, #0
   b9ca0:	42b3      	cmp	r3, r6
   b9ca2:	da07      	bge.n	b9cb4 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x98>
   b9ca4:	3301      	adds	r3, #1
      out[i] *= reciprocal_sum_exp;
   b9ca6:	edd9 7a00 	vldr	s15, [r9]
   b9caa:	ee67 7a87 	vmul.f32	s15, s15, s14
   b9cae:	ece9 7a01 	vstmia	r9!, {s15}
    for (int i = 0; i < input_size; i++) {
   b9cb2:	e7f5      	b.n	b9ca0 <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x84>
    in += input_size;
   b9cb4:	445c      	add	r4, fp
    out += input_size;
   b9cb6:	445d      	add	r5, fp
  for (int b = 0; b < batch_size; b++) {
   b9cb8:	3701      	adds	r7, #1
   b9cba:	e7bf      	b.n	b9c3c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf+0x20>
  }
}
   b9cbc:	b003      	add	sp, #12
   b9cbe:	ecbd 8b04 	vpop	{d8-d9}
   b9cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9cc6:	bf00      	nop
   b9cc8:	00000000 	.word	0x00000000

000b9ccc <_ZN6tflite3ops5micro11activations14Softmax1DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:

// Takes a 1D tensor and performs softmax along it.
void Softmax1DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9ccc:	b510      	push	{r4, lr}
  const int input_size = input->dims->data[0];
   b9cce:	6884      	ldr	r4, [r0, #8]
  tflite::reference_ops::Softmax(input->data.f, input_size, 1, params->beta,
   b9cd0:	684b      	ldr	r3, [r1, #4]
   b9cd2:	ed92 0a00 	vldr	s0, [r2]
   b9cd6:	6861      	ldr	r1, [r4, #4]
   b9cd8:	6840      	ldr	r0, [r0, #4]
   b9cda:	2201      	movs	r2, #1
   b9cdc:	f7ff ff9e 	bl	b9c1c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>
                                 output->data.f);
}
   b9ce0:	bd10      	pop	{r4, pc}

000b9ce2 <_ZN6tflite3ops5micro11activations14Softmax2DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:

// Takes a 2D tensor and perform softmax along the last dimension.
void Softmax2DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9ce2:	b510      	push	{r4, lr}
  const int batch_size = input->dims->data[0];
   b9ce4:	6884      	ldr	r4, [r0, #8]
  const int input_size = input->dims->data[1];
  tflite::reference_ops::Softmax(input->data.f, input_size, batch_size,
   b9ce6:	684b      	ldr	r3, [r1, #4]
   b9ce8:	ed92 0a00 	vldr	s0, [r2]
   b9cec:	6840      	ldr	r0, [r0, #4]
   b9cee:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   b9cf2:	f7ff ff93 	bl	b9c1c <_ZN6tflite13reference_ops7SoftmaxEPKfiifPf>
                                 params->beta, output->data.f);
}
   b9cf6:	bd10      	pop	{r4, pc}

000b9cf8 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>:
                                 GetTensorData<uint8_t>(output));
}

// Takes a 4D tensor and perform softmax along the forth dimension.
void Softmax4DFloat(const TfLiteTensor* input, TfLiteTensor* output,
                    TfLiteSoftmaxParams* params) {
   b9cf8:	b530      	push	{r4, r5, lr}
   b9cfa:	4604      	mov	r4, r0
   b9cfc:	b097      	sub	sp, #92	; 0x5c
  SoftmaxParams op_params;
  op_params.beta = params->beta;
   b9cfe:	6810      	ldr	r0, [r2, #0]
                    TfLiteSoftmaxParams* params) {
   b9d00:	460d      	mov	r5, r1
  op_params.beta = params->beta;
   b9d02:	f7fa faf1 	bl	b42e8 <__aeabi_f2d>
   b9d06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  if (tensor == nullptr) {
   b9d0a:	b98c      	cbnz	r4, b9d30 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x38>
  RuntimeShape() : size_(0) {}
   b9d0c:	9402      	str	r4, [sp, #8]
   b9d0e:	b9bd      	cbnz	r5, b9d40 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x48>
   b9d10:	9507      	str	r5, [sp, #28]
  tflite::reference_ops::Softmax(
   b9d12:	ab07      	add	r3, sp, #28
   b9d14:	4622      	mov	r2, r4
   b9d16:	a902      	add	r1, sp, #8
   b9d18:	a80c      	add	r0, sp, #48	; 0x30
   b9d1a:	9500      	str	r5, [sp, #0]
   b9d1c:	f7ff fede 	bl	b9adc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(output), GetTensorData<float>(output));
   b9d20:	a807      	add	r0, sp, #28
   b9d22:	f7fc fb4e 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   b9d26:	a802      	add	r0, sp, #8
   b9d28:	f7fc fb4b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b9d2c:	b017      	add	sp, #92	; 0x5c
   b9d2e:	bd30      	pop	{r4, r5, pc}
  TfLiteIntArray* dims = tensor->dims;
   b9d30:	68a3      	ldr	r3, [r4, #8]
  return RuntimeShape(dims_size, dims_data);
   b9d32:	a802      	add	r0, sp, #8
   b9d34:	6819      	ldr	r1, [r3, #0]
   b9d36:	1d1a      	adds	r2, r3, #4
   b9d38:	f7ff fe7e 	bl	b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9d3c:	6864      	ldr	r4, [r4, #4]
   b9d3e:	e7e6      	b.n	b9d0e <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x16>
  TfLiteIntArray* dims = tensor->dims;
   b9d40:	68ab      	ldr	r3, [r5, #8]
  return RuntimeShape(dims_size, dims_data);
   b9d42:	a807      	add	r0, sp, #28
   b9d44:	6819      	ldr	r1, [r3, #0]
   b9d46:	1d1a      	adds	r2, r3, #4
   b9d48:	f7ff fe76 	bl	b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b9d4c:	686d      	ldr	r5, [r5, #4]
   b9d4e:	e7e0      	b.n	b9d12 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams+0x1a>

000b9d50 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
TfLiteRegistration* Register_SOFTMAX() {
  static TfLiteRegistration r = {activations::Init, activations::Free,
                                 activations::SoftmaxPrepare,
                                 activations::SoftmaxEval};
  return &r;
}
   b9d50:	4800      	ldr	r0, [pc, #0]	; (b9d54 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x4>)
   b9d52:	4770      	bx	lr
   b9d54:	2003c1f0 	.word	0x2003c1f0

000b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
  assert(exponent >= 0);
   b9d58:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   b9d5a:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   b9d5c:	da06      	bge.n	b9d6c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x14>
   b9d5e:	4b0d      	ldr	r3, [pc, #52]	; (b9d94 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x3c>)
   b9d60:	4a0d      	ldr	r2, [pc, #52]	; (b9d98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
   b9d62:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   b9d66:	480d      	ldr	r0, [pc, #52]	; (b9d9c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x44>)
   b9d68:	f00a fda8 	bl	c48bc <__assert_func>
   b9d6c:	291f      	cmp	r1, #31
   b9d6e:	dd04      	ble.n	b9d7a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x22>
   b9d70:	4b0b      	ldr	r3, [pc, #44]	; (b9da0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x48>)
   b9d72:	4a09      	ldr	r2, [pc, #36]	; (b9d98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
   b9d74:	f240 1167 	movw	r1, #359	; 0x167
   b9d78:	e7f5      	b.n	b9d66 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b9d7a:	2301      	movs	r3, #1
   b9d7c:	408b      	lsls	r3, r1
   b9d7e:	3b01      	subs	r3, #1
  return a & b;
   b9d80:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   b9d84:	105b      	asrs	r3, r3, #1
  return a + b;
   b9d86:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   b9d8a:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   b9d8c:	429a      	cmp	r2, r3
   b9d8e:	bfc8      	it	gt
   b9d90:	3001      	addgt	r0, #1
   b9d92:	bd08      	pop	{r3, pc}
   b9d94:	000c813a 	.word	0x000c813a
   b9d98:	000c8148 	.word	0x000c8148
   b9d9c:	000c81a2 	.word	0x000c81a2
   b9da0:	000c8209 	.word	0x000c8209

000b9da4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   b9da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  std::int64_t sum = a64 + b64;
   b9da6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  std::int64_t a64 = a;
   b9daa:	17c5      	asrs	r5, r0, #31
  std::int64_t sum = a64 + b64;
   b9dac:	18c0      	adds	r0, r0, r3
   b9dae:	f145 0500 	adc.w	r5, r5, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
   b9db2:	f1b5 3fff 	cmp.w	r5, #4294967295
   b9db6:	bf08      	it	eq
   b9db8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   b9dbc:	bf0b      	itete	eq
   b9dbe:	4603      	moveq	r3, r0
   b9dc0:	2301      	movne	r3, #1
   b9dc2:	462a      	moveq	r2, r5
   b9dc4:	2200      	movne	r2, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   b9dc6:	18c0      	adds	r0, r0, r3
   b9dc8:	eb45 0502 	adc.w	r5, r5, r2
   b9dcc:	0feb      	lsrs	r3, r5, #31
   b9dce:	1818      	adds	r0, r3, r0
   b9dd0:	f145 0500 	adc.w	r5, r5, #0
   b9dd4:	0840      	lsrs	r0, r0, #1
   b9dd6:	ea40 75c5 	orr.w	r5, r0, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9dda:	4936      	ldr	r1, [pc, #216]	; (b9eb4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x110>)
   b9ddc:	4628      	mov	r0, r5
   b9dde:	f7ff fe07 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a + b;
   b9de2:	2603      	movs	r6, #3
   b9de4:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9de8:	4621      	mov	r1, r4
   b9dea:	4628      	mov	r0, r5
   b9dec:	f7ff fe00 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
   b9df0:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   b9df4:	4620      	mov	r0, r4
   b9df6:	f7ff fdfb 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   b9dfa:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b9dfe:	da45      	bge.n	b9e8c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xe8>
   b9e00:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   b9e04:	f04f 31ff 	mov.w	r1, #4294967295
   b9e08:	f04f 0700 	mov.w	r7, #0
   b9e0c:	bfc8      	it	gt
   b9e0e:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   b9e10:	17c2      	asrs	r2, r0, #31
   b9e12:	0092      	lsls	r2, r2, #2
   b9e14:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   b9e18:	0080      	lsls	r0, r0, #2
             ? min
   b9e1a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   b9e1e:	f172 33ff 	sbcs.w	r3, r2, #4294967295
   b9e22:	db37      	blt.n	b9e94 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xf0>
             : wide_shifted > max ? max
   b9e24:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   b9e28:	f172 0300 	sbcs.w	r3, r2, #0
   b9e2c:	da35      	bge.n	b9e9a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xf6>
  return a & b;
   b9e2e:	ea20 0307 	bic.w	r3, r0, r7
   b9e32:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  return a ^ b;
   b9e36:	407b      	eors	r3, r7
  return a & b;
   b9e38:	ea23 0301 	bic.w	r3, r3, r1
   b9e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   b9e40:	404b      	eors	r3, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   b9e42:	3e01      	subs	r6, #1
  return a + b;
   b9e44:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
   b9e46:	d1cf      	bne.n	b9de8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x44>
  return a ? BitNot(zero) : zero;
   b9e48:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   b9e4c:	da28      	bge.n	b9ea0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xfc>
   b9e4e:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   b9e52:	f04f 30ff 	mov.w	r0, #4294967295
   b9e56:	4633      	mov	r3, r6
   b9e58:	bfc8      	it	gt
   b9e5a:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   b9e5c:	17e2      	asrs	r2, r4, #31
   b9e5e:	1924      	adds	r4, r4, r4
   b9e60:	4152      	adcs	r2, r2
             ? min
   b9e62:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   b9e66:	f172 31ff 	sbcs.w	r1, r2, #4294967295
   b9e6a:	db1d      	blt.n	b9ea8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x104>
             : wide_shifted > max ? max
   b9e6c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   b9e70:	f172 0200 	sbcs.w	r2, r2, #0
   b9e74:	da1b      	bge.n	b9eae <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x10a>
  return a & b;
   b9e76:	ea24 0403 	bic.w	r4, r4, r3
   b9e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  return a ^ b;
   b9e7e:	405c      	eors	r4, r3
  return a & b;
   b9e80:	ea24 0400 	bic.w	r4, r4, r0
   b9e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   b9e88:	4060      	eors	r0, r4
   b9e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   b9e8c:	f04f 37ff 	mov.w	r7, #4294967295
   b9e90:	2100      	movs	r1, #0
   b9e92:	e7bd      	b.n	b9e10 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x6c>
             ? min
   b9e94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   b9e98:	e7c9      	b.n	b9e2e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x8a>
             : wide_shifted > max ? max
   b9e9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b9e9e:	e7c6      	b.n	b9e2e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x8a>
  return a ? BitNot(zero) : zero;
   b9ea0:	f04f 33ff 	mov.w	r3, #4294967295
   b9ea4:	4630      	mov	r0, r6
   b9ea6:	e7d9      	b.n	b9e5c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xb8>
             ? min
   b9ea8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   b9eac:	e7e3      	b.n	b9e76 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd2>
             : wide_shifted > max ? max
   b9eae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   b9eb2:	e7e0      	b.n	b9e76 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd2>
   b9eb4:	c3c3c3c4 	.word	0xc3c3c3c4

000b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   b9eb8:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   b9eba:	2100      	movs	r1, #0
   b9ebc:	f7ff ff4c 	bl	b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
}
   b9ec0:	bd08      	pop	{r3, pc}

000b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   b9ec2:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   b9ec4:	f7ff fd94 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
}
   b9ec8:	bd08      	pop	{r3, pc}
	...

000b9ecc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   b9ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ed0:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   b9ed2:	4814      	ldr	r0, [pc, #80]	; (b9f24 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
   b9ed4:	f7ff fff0 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9ed8:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   b9eda:	4813      	ldr	r0, [pc, #76]	; (b9f28 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   b9edc:	f7ff ffec 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
  return a + b;
   b9ee0:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   b9ee4:	4680      	mov	r8, r0
  F x2 = x * x;
   b9ee6:	4621      	mov	r1, r4
   b9ee8:	4620      	mov	r0, r4
   b9eea:	f7ff ffea 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   b9eee:	4621      	mov	r1, r4
  F x2 = x * x;
   b9ef0:	4605      	mov	r5, r0
  F x3 = x2 * x;
   b9ef2:	f7ff ffe6 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   b9ef6:	4629      	mov	r1, r5
  F x3 = x2 * x;
   b9ef8:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   b9efa:	4628      	mov	r0, r5
   b9efc:	f7ff ffe1 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   b9f00:	2102      	movs	r1, #2
   b9f02:	f7ff ff29 	bl	b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   b9f06:	4641      	mov	r1, r8
   b9f08:	4438      	add	r0, r7
   b9f0a:	f7ff ffda 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   b9f0e:	2101      	movs	r1, #1
   b9f10:	4428      	add	r0, r5
   b9f12:	f7ff ff21 	bl	b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return AddSaturatingIf16Bit(
   b9f16:	1821      	adds	r1, r4, r0
   b9f18:	4630      	mov	r0, r6
   b9f1a:	f7ff ffd2 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   b9f1e:	4430      	add	r0, r6
   b9f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9f24:	70f5a894 	.word	0x70f5a894
   b9f28:	2aaaaaab 	.word	0x2aaaaaab

000b9f2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   b9f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   b9f30:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   b9f34:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   b9f36:	0160      	lsls	r0, r4, #5
   b9f38:	f7ff ffc8 	bl	b9ecc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
   b9f3c:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   b9f3e:	4842      	ldr	r0, [pc, #264]	; (ba048 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   b9f40:	f7ff ffba 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f44:	4601      	mov	r1, r0
   b9f46:	4630      	mov	r0, r6
  return a - b;
   b9f48:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   b9f4a:	f7ff ffba 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f4e:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   b9f52:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   b9f56:	f10b 3bff 	add.w	fp, fp, #4294967295
   b9f5a:	ea00 0909 	and.w	r9, r0, r9
   b9f5e:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   b9f62:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   b9f66:	4839      	ldr	r0, [pc, #228]	; (ba04c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   b9f68:	f7ff ffa6 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f6c:	4601      	mov	r1, r0
   b9f6e:	4650      	mov	r0, sl
   b9f70:	f7ff ffa7 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f74:	f3c4 6940 	ubfx	r9, r4, #25, #1
   b9f78:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   b9f7c:	f109 39ff 	add.w	r9, r9, #4294967295
   b9f80:	ea00 0008 	and.w	r0, r0, r8
   b9f84:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   b9f88:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   b9f8c:	4830      	ldr	r0, [pc, #192]	; (ba050 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   b9f8e:	f7ff ff93 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9f92:	4601      	mov	r1, r0
   b9f94:	4648      	mov	r0, r9
   b9f96:	f7ff ff94 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9f9a:	f3c4 6780 	ubfx	r7, r4, #26, #1
   b9f9e:	427e      	negs	r6, r7
  return a & b;
   b9fa0:	3f01      	subs	r7, #1
   b9fa2:	4030      	ands	r0, r6
   b9fa4:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   b9fa8:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   b9faa:	482a      	ldr	r0, [pc, #168]	; (ba054 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   b9fac:	f7ff ff84 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9fb0:	4601      	mov	r1, r0
   b9fb2:	4638      	mov	r0, r7
   b9fb4:	f7ff ff85 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9fb8:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   b9fbc:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   b9fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
   b9fc4:	ea00 000a 	and.w	r0, r0, sl
   b9fc8:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   b9fcc:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   b9fd0:	4821      	ldr	r0, [pc, #132]	; (ba058 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   b9fd2:	f7ff ff71 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9fd6:	4601      	mov	r1, r0
   b9fd8:	4658      	mov	r0, fp
   b9fda:	f7ff ff72 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   b9fde:	f3c4 7900 	ubfx	r9, r4, #28, #1
   b9fe2:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   b9fe6:	f109 39ff 	add.w	r9, r9, #4294967295
   b9fea:	ea00 0008 	and.w	r0, r0, r8
   b9fee:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   b9ff2:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   b9ff6:	4819      	ldr	r0, [pc, #100]	; (ba05c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   b9ff8:	f7ff ff5e 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   b9ffc:	4601      	mov	r1, r0
   b9ffe:	4648      	mov	r0, r9
   ba000:	f7ff ff5f 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   ba004:	f3c4 7740 	ubfx	r7, r4, #29, #1
   ba008:	427e      	negs	r6, r7
  return a & b;
   ba00a:	3f01      	subs	r7, #1
   ba00c:	4030      	ands	r0, r6
   ba00e:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   ba012:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   ba014:	20f2      	movs	r0, #242	; 0xf2
   ba016:	f7ff ff4f 	bl	b9eb8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
   ba01a:	4601      	mov	r1, r0
   ba01c:	4638      	mov	r0, r7
   ba01e:	f7ff ff50 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   ba022:	f3c4 7480 	ubfx	r4, r4, #30, #1
   ba026:	4263      	negs	r3, r4
  return a & b;
   ba028:	4018      	ands	r0, r3
   ba02a:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
   ba02c:	fab5 f385 	clz	r3, r5
  return a & b;
   ba030:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   ba032:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   ba034:	4044      	eors	r4, r0
  return a & b;
   ba036:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   ba038:	425b      	negs	r3, r3
  return a & b;
   ba03a:	4020      	ands	r0, r4
   ba03c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   ba040:	4058      	eors	r0, r3
   ba042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba046:	bf00      	nop
   ba048:	63afbe7b 	.word	0x63afbe7b
   ba04c:	4da2cbf2 	.word	0x4da2cbf2
   ba050:	2f16ac6c 	.word	0x2f16ac6c
   ba054:	1152aaa4 	.word	0x1152aaa4
   ba058:	02582ab7 	.word	0x02582ab7
   ba05c:	000afe11 	.word	0x000afe11

000ba060 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>:
                    const RuntimeShape& output_shape, uint8* output_data) {
   ba060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba064:	461d      	mov	r5, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   ba066:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
                    const RuntimeShape& output_shape, uint8* output_data) {
   ba06a:	b08b      	sub	sp, #44	; 0x2c
   ba06c:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   ba06e:	6809      	ldr	r1, [r1, #0]
                    const RuntimeShape& output_shape, uint8* output_data) {
   ba070:	9203      	str	r2, [sp, #12]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   ba072:	3901      	subs	r1, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   ba074:	462a      	mov	r2, r5
  const int32 input_beta_left_shift = params.input_left_shift;
   ba076:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   ba078:	6983      	ldr	r3, [r0, #24]
   ba07a:	9301      	str	r3, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   ba07c:	4620      	mov	r0, r4
   ba07e:	9104      	str	r1, [sp, #16]
   ba080:	f7ff fcfa 	bl	b9a78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   ba084:	9904      	ldr	r1, [sp, #16]
   ba086:	9002      	str	r0, [sp, #8]
   ba088:	4620      	mov	r0, r4
   ba08a:	f7fc f9a5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   ba08e:	9904      	ldr	r1, [sp, #16]
   ba090:	4604      	mov	r4, r0
   ba092:	4628      	mov	r0, r5
   ba094:	f7fc f9a0 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   ba098:	4284      	cmp	r4, r0
   ba09a:	d11c      	bne.n	ba0d6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
   ba09c:	2500      	movs	r5, #0
  for (int i = 0; i < outer_size; ++i) {
   ba09e:	46a8      	mov	r8, r5
    uint8 max_in_row = 0;
   ba0a0:	46a9      	mov	r9, r5
  for (int i = 0; i < outer_size; ++i) {
   ba0a2:	9b02      	ldr	r3, [sp, #8]
   ba0a4:	4598      	cmp	r8, r3
   ba0a6:	da78      	bge.n	ba19a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x13a>
    uint8 max_in_row = 0;
   ba0a8:	9b03      	ldr	r3, [sp, #12]
   ba0aa:	f88d 901b 	strb.w	r9, [sp, #27]
    for (int c = 0; c < depth; ++c) {
   ba0ae:	195e      	adds	r6, r3, r5
    uint8 max_in_row = 0;
   ba0b0:	4631      	mov	r1, r6
    for (int c = 0; c < depth; ++c) {
   ba0b2:	2200      	movs	r2, #0
   ba0b4:	42a2      	cmp	r2, r4
   ba0b6:	da10      	bge.n	ba0da <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7a>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   ba0b8:	460b      	mov	r3, r1
      if (__a < __b)
   ba0ba:	f89d 001b 	ldrb.w	r0, [sp, #27]
   ba0be:	781f      	ldrb	r7, [r3, #0]
   ba0c0:	4287      	cmp	r7, r0
      return __a;
   ba0c2:	f10d 001b 	add.w	r0, sp, #27
   ba0c6:	bf98      	it	ls
   ba0c8:	4603      	movls	r3, r0
   ba0ca:	3101      	adds	r1, #1
   ba0cc:	781b      	ldrb	r3, [r3, #0]
   ba0ce:	f88d 301b 	strb.w	r3, [sp, #27]
    for (int c = 0; c < depth; ++c) {
   ba0d2:	3201      	adds	r2, #1
   ba0d4:	e7ee      	b.n	ba0b4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x54>
   ba0d6:	f00a fbe1 	bl	c489c <abort>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   ba0da:	f04f 0a00 	mov.w	sl, #0
   ba0de:	4633      	mov	r3, r6
    for (int c = 0; c < depth; ++c) {
   ba0e0:	4657      	mov	r7, sl
   ba0e2:	42a7      	cmp	r7, r4
   ba0e4:	da16      	bge.n	ba114 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb4>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   ba0e6:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba0ea:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   ba0ee:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   ba0f0:	9a01      	ldr	r2, [sp, #4]
   ba0f2:	4282      	cmp	r2, r0
   ba0f4:	dc0c      	bgt.n	ba110 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
   ba0f6:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   ba0f8:	9b00      	ldr	r3, [sp, #0]
   ba0fa:	4659      	mov	r1, fp
   ba0fc:	4098      	lsls	r0, r3
   ba0fe:	f7ff fc77 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
                                        exp_on_negative_values(scaled_diff_f8));
   ba102:	f7ff ff13 	bl	b9f2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   ba106:	210c      	movs	r1, #12
   ba108:	f7ff fe26 	bl	b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return a + b;
   ba10c:	9b04      	ldr	r3, [sp, #16]
   ba10e:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
   ba110:	3701      	adds	r7, #1
   ba112:	e7e6      	b.n	ba0e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x82>
  return integer_input ? __builtin_clz(integer_input)
   ba114:	faba f78a 	clz	r7, sl
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   ba118:	fa0a f007 	lsl.w	r0, sl, r7
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   ba11c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   ba120:	f7ff fe40 	bl	b9da4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
   ba124:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba126:	4682      	mov	sl, r0
    for (int c = 0; c < depth; ++c) {
   ba128:	442b      	add	r3, r5
   ba12a:	2200      	movs	r2, #0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   ba12c:	f1c7 0723 	rsb	r7, r7, #35	; 0x23
    for (int c = 0; c < depth; ++c) {
   ba130:	42a2      	cmp	r2, r4
   ba132:	da2e      	bge.n	ba192 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   ba134:	f89d 101b 	ldrb.w	r1, [sp, #27]
   ba138:	f816 0b01 	ldrb.w	r0, [r6], #1
      int32 input_diff =
   ba13c:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   ba13e:	9901      	ldr	r1, [sp, #4]
   ba140:	4281      	cmp	r1, r0
   ba142:	dc23      	bgt.n	ba18c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12c>
   ba144:	e9cd 2304 	strd	r2, r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   ba148:	9b00      	ldr	r3, [sp, #0]
   ba14a:	4659      	mov	r1, fp
   ba14c:	4098      	lsls	r0, r3
   ba14e:	f7ff fc4f 	bl	b99f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   ba152:	f7ff feeb 	bl	b9f2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   ba156:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(), num_bits_over_unit + 31 - 8);
   ba158:	4650      	mov	r0, sl
   ba15a:	f7ff feb2 	bl	b9ec2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   ba15e:	4639      	mov	r1, r7
   ba160:	f7ff fdfa 	bl	b9d58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
            std::max(std::min(unsat_output, static_cast<int32>(255)),
   ba164:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   ba166:	4298      	cmp	r0, r3
	return __b;
   ba168:	bfcc      	ite	gt
   ba16a:	a908      	addgt	r1, sp, #32
      return __a;
   ba16c:	a907      	addle	r1, sp, #28
   ba16e:	9308      	str	r3, [sp, #32]
            (shifted_scale * exp_in_0).raw(), num_bits_over_unit + 31 - 8);
   ba170:	9007      	str	r0, [sp, #28]
      if (__a < __b)
   ba172:	6808      	ldr	r0, [r1, #0]
                     static_cast<int32>(0)));
   ba174:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   ba178:	2800      	cmp	r0, #0
      if (__b < __a)
   ba17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	return __b;
   ba17e:	bfb8      	it	lt
   ba180:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<uint8>(
   ba182:	6809      	ldr	r1, [r1, #0]
   ba184:	7019      	strb	r1, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   ba186:	3201      	adds	r2, #1
   ba188:	3301      	adds	r3, #1
   ba18a:	e7d1      	b.n	ba130 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xd0>
        output_data[i * depth + c] = 0;
   ba18c:	f883 9000 	strb.w	r9, [r3]
   ba190:	e7f9      	b.n	ba186 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x126>
  for (int i = 0; i < outer_size; ++i) {
   ba192:	f108 0801 	add.w	r8, r8, #1
   ba196:	4425      	add	r5, r4
   ba198:	e783      	b.n	ba0a2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x42>
}
   ba19a:	b00b      	add	sp, #44	; 0x2c
   ba19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba1a0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba1a4:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba1a8:	680b      	ldr	r3, [r1, #0]
   ba1aa:	f8d0 8008 	ldr.w	r8, [r0, #8]
   ba1ae:	685a      	ldr	r2, [r3, #4]
  auto* params = reinterpret_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   ba1b0:	694f      	ldr	r7, [r1, #20]
   ba1b2:	2338      	movs	r3, #56	; 0x38
   ba1b4:	fb03 f902 	mul.w	r9, r3, r2
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   ba1b8:	684a      	ldr	r2, [r1, #4]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba1ba:	b09d      	sub	sp, #116	; 0x74
   ba1bc:	6854      	ldr	r4, [r2, #4]
  OpData local_data_object;
   ba1be:	2210      	movs	r2, #16
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   ba1c0:	4605      	mov	r5, r0
  OpData local_data_object;
   ba1c2:	2100      	movs	r1, #0
   ba1c4:	eb0d 0002 	add.w	r0, sp, r2
   ba1c8:	fb03 8404 	mla	r4, r3, r4, r8
   ba1cc:	f00c fd32 	bl	c6c34 <memset>
  if (input->type == kTfLiteUInt8) {
   ba1d0:	f818 3009 	ldrb.w	r3, [r8, r9]
   ba1d4:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba1d6:	eb08 0609 	add.w	r6, r8, r9
   ba1da:	d143      	bne.n	ba264 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   ba1dc:	6923      	ldr	r3, [r4, #16]
   ba1de:	b17b      	cbz	r3, ba200 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>
   ba1e0:	2200      	movs	r2, #0
   ba1e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   ba1e6:	4b63      	ldr	r3, [pc, #396]	; (ba374 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
   ba1e8:	9301      	str	r3, [sp, #4]
   ba1ea:	4b63      	ldr	r3, [pc, #396]	; (ba378 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
   ba1ec:	9300      	str	r3, [sp, #0]
   ba1ee:	696c      	ldr	r4, [r5, #20]
   ba1f0:	4a62      	ldr	r2, [pc, #392]	; (ba37c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
   ba1f2:	4963      	ldr	r1, [pc, #396]	; (ba380 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
   ba1f4:	232c      	movs	r3, #44	; 0x2c
   ba1f6:	4628      	mov	r0, r5
   ba1f8:	47a0      	blx	r4
      return kTfLiteError;
   ba1fa:	f04f 0801 	mov.w	r8, #1
   ba1fe:	e05d      	b.n	ba2bc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11c>
    TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   ba200:	ed94 7a03 	vldr	s14, [r4, #12]
   ba204:	eddf 7a5f 	vldr	s15, [pc, #380]	; ba384 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   ba208:	eeb4 7a67 	vcmp.f32	s14, s15
   ba20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba210:	d008      	beq.n	ba224 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x84>
   ba212:	4b5d      	ldr	r3, [pc, #372]	; (ba388 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
   ba214:	9300      	str	r3, [sp, #0]
   ba216:	696c      	ldr	r4, [r5, #20]
   ba218:	4a58      	ldr	r2, [pc, #352]	; (ba37c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
   ba21a:	495c      	ldr	r1, [pc, #368]	; (ba38c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
   ba21c:	232d      	movs	r3, #45	; 0x2d
   ba21e:	4628      	mov	r0, r5
   ba220:	47a0      	blx	r4
   ba222:	e7ea      	b.n	ba1fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
    tflite::PreprocessSoftmaxScaling(
   ba224:	68f0      	ldr	r0, [r6, #12]
   ba226:	f7fa f85f 	bl	b42e8 <__aeabi_f2d>
   ba22a:	ec41 0b18 	vmov	d8, r0, r1
   ba22e:	6838      	ldr	r0, [r7, #0]
   ba230:	f7fa f85a 	bl	b42e8 <__aeabi_f2d>
   ba234:	eeb0 1a48 	vmov.f32	s2, s16
   ba238:	eef0 1a68 	vmov.f32	s3, s17
   ba23c:	ec41 0b10 	vmov	d0, r0, r1
   ba240:	aa05      	add	r2, sp, #20
   ba242:	a904      	add	r1, sp, #16
   ba244:	2005      	movs	r0, #5
   ba246:	f7fb f877 	bl	b5338 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
    data->diff_min = -1.0 * tflite::CalculateInputRadius(
   ba24a:	221f      	movs	r2, #31
   ba24c:	9905      	ldr	r1, [sp, #20]
   ba24e:	2005      	movs	r0, #5
   ba250:	f7fb f8ae 	bl	b53b0 <_ZN6tflite20CalculateInputRadiusEiii>
   ba254:	f7fa f836 	bl	b42c4 <__aeabi_i2d>
   ba258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba25c:	4619      	mov	r1, r3
   ba25e:	f7fa fb35 	bl	b48cc <__aeabi_d2iz>
   ba262:	9007      	str	r0, [sp, #28]
  switch (input->type) {
   ba264:	f818 8009 	ldrb.w	r8, [r8, r9]
   ba268:	f1b8 0f01 	cmp.w	r8, #1
   ba26c:	d006      	beq.n	ba27c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xdc>
   ba26e:	f1b8 0f03 	cmp.w	r8, #3
   ba272:	d029      	beq.n	ba2c8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x128>
      context->ReportError(
   ba274:	696b      	ldr	r3, [r5, #20]
   ba276:	4946      	ldr	r1, [pc, #280]	; (ba390 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f0>)
   ba278:	4642      	mov	r2, r8
   ba27a:	e077      	b.n	ba36c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1cc>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   ba27c:	68b3      	ldr	r3, [r6, #8]
   ba27e:	681a      	ldr	r2, [r3, #0]
      if (NumDimensions(input) == 1) {
   ba280:	2a01      	cmp	r2, #1
   ba282:	d107      	bne.n	ba294 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf4>
        Softmax1DFloat(input, output, params);
   ba284:	463a      	mov	r2, r7
   ba286:	4621      	mov	r1, r4
   ba288:	4630      	mov	r0, r6
   ba28a:	f7ff fd1f 	bl	b9ccc <_ZN6tflite3ops5micro11activations14Softmax1DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba28e:	f04f 0800 	mov.w	r8, #0
}
   ba292:	e013      	b.n	ba2bc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11c>
      if (NumDimensions(input) == 2) {
   ba294:	2a02      	cmp	r2, #2
   ba296:	d105      	bne.n	ba2a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x104>
        Softmax2DFloat(input, output, params);
   ba298:	463a      	mov	r2, r7
   ba29a:	4621      	mov	r1, r4
   ba29c:	4630      	mov	r0, r6
   ba29e:	f7ff fd20 	bl	b9ce2 <_ZN6tflite3ops5micro11activations14Softmax2DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba2a2:	e7f4      	b.n	ba28e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      if (NumDimensions(input) == 4) {
   ba2a4:	2a04      	cmp	r2, #4
   ba2a6:	d105      	bne.n	ba2b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
        Softmax4DFloat(input, output, params);
   ba2a8:	463a      	mov	r2, r7
   ba2aa:	4621      	mov	r1, r4
   ba2ac:	4630      	mov	r0, r6
   ba2ae:	f7ff fd23 	bl	b9cf8 <_ZN6tflite3ops5micro11activations14Softmax4DFloatEPK12TfLiteTensorPS3_P19TfLiteSoftmaxParams>
        return kTfLiteOk;
   ba2b2:	e7ec      	b.n	ba28e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      context->ReportError(
   ba2b4:	696b      	ldr	r3, [r5, #20]
   ba2b6:	4937      	ldr	r1, [pc, #220]	; (ba394 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>)
   ba2b8:	4628      	mov	r0, r5
   ba2ba:	4798      	blx	r3
}
   ba2bc:	4640      	mov	r0, r8
   ba2be:	b01d      	add	sp, #116	; 0x74
   ba2c0:	ecbd 8b02 	vpop	{d8}
   ba2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba2c8:	68b3      	ldr	r3, [r6, #8]
   ba2ca:	681a      	ldr	r2, [r3, #0]
      if (NumDimensions(input) == 1) {
   ba2cc:	2a01      	cmp	r2, #1
   ba2ce:	d11c      	bne.n	ba30a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16a>
  const int input_size = input->dims->data[0];
   ba2d0:	685b      	ldr	r3, [r3, #4]
  const int32_t shape_data[4] = {1, 1, 1, input_size};
   ba2d2:	e9cd 2208 	strd	r2, r2, [sp, #32]
   ba2d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RuntimeShape shape(4, shape_data);
   ba2da:	aa08      	add	r2, sp, #32
   ba2dc:	2104      	movs	r1, #4
   ba2de:	a80d      	add	r0, sp, #52	; 0x34
   ba2e0:	f7ff fbaa 	bl	b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>
  op_params.input_multiplier = data->input_multiplier;
   ba2e4:	9b04      	ldr	r3, [sp, #16]
   ba2e6:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.input_left_shift = data->input_left_shift;
   ba2e8:	9b05      	ldr	r3, [sp, #20]
   ba2ea:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.diff_min = data->diff_min;
   ba2ec:	9b07      	ldr	r3, [sp, #28]
   ba2ee:	9318      	str	r3, [sp, #96]	; 0x60
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba2f0:	6872      	ldr	r2, [r6, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba2f2:	b104      	cbz	r4, ba2f6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x156>
   ba2f4:	6864      	ldr	r4, [r4, #4]
  tflite::reference_ops::Softmax(op_params, shape,
   ba2f6:	9400      	str	r4, [sp, #0]
   ba2f8:	ab0d      	add	r3, sp, #52	; 0x34
   ba2fa:	a812      	add	r0, sp, #72	; 0x48
   ba2fc:	4619      	mov	r1, r3
   ba2fe:	f7ff feaf 	bl	ba060 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>
  RuntimeShape shape(4, shape_data);
   ba302:	a80d      	add	r0, sp, #52	; 0x34
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   ba304:	f7fc f85d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   ba308:	e7c1      	b.n	ba28e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      if (NumDimensions(input) == 2) {
   ba30a:	2a02      	cmp	r2, #2
   ba30c:	d107      	bne.n	ba31e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x17e>
  const int input_size = input->dims->data[1];
   ba30e:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
  const int32_t shape_data[4] = {batch_size, 1, 1, input_size};
   ba312:	2301      	movs	r3, #1
   ba314:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   ba318:	9108      	str	r1, [sp, #32]
   ba31a:	920b      	str	r2, [sp, #44]	; 0x2c
   ba31c:	e7dd      	b.n	ba2da <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x13a>
      if (NumDimensions(input) == 4) {
   ba31e:	2a04      	cmp	r2, #4
   ba320:	d122      	bne.n	ba368 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c8>
  op_params.input_multiplier = data->input_multiplier;
   ba322:	9b04      	ldr	r3, [sp, #16]
   ba324:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.input_left_shift = data->input_left_shift;
   ba326:	9b05      	ldr	r3, [sp, #20]
   ba328:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.diff_min = data->diff_min;
   ba32a:	9b07      	ldr	r3, [sp, #28]
   ba32c:	9318      	str	r3, [sp, #96]	; 0x60
  TfLiteIntArray* dims = tensor->dims;
   ba32e:	68b3      	ldr	r3, [r6, #8]
  return RuntimeShape(dims_size, dims_data);
   ba330:	a808      	add	r0, sp, #32
   ba332:	6819      	ldr	r1, [r3, #0]
   ba334:	1d1a      	adds	r2, r3, #4
   ba336:	f7ff fb7f 	bl	b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba33a:	6875      	ldr	r5, [r6, #4]
  if (tensor == nullptr) {
   ba33c:	b964      	cbnz	r4, ba358 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  RuntimeShape() : size_(0) {}
   ba33e:	940d      	str	r4, [sp, #52]	; 0x34
  tflite::reference_ops::Softmax(
   ba340:	ab0d      	add	r3, sp, #52	; 0x34
   ba342:	462a      	mov	r2, r5
   ba344:	a908      	add	r1, sp, #32
   ba346:	a812      	add	r0, sp, #72	; 0x48
   ba348:	9400      	str	r4, [sp, #0]
   ba34a:	f7ff fe89 	bl	ba060 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph>
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   ba34e:	a80d      	add	r0, sp, #52	; 0x34
   ba350:	f7fc f837 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   ba354:	a808      	add	r0, sp, #32
   ba356:	e7d5      	b.n	ba304 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x164>
  TfLiteIntArray* dims = tensor->dims;
   ba358:	68a3      	ldr	r3, [r4, #8]
  return RuntimeShape(dims_size, dims_data);
   ba35a:	a80d      	add	r0, sp, #52	; 0x34
   ba35c:	6819      	ldr	r1, [r3, #0]
   ba35e:	1d1a      	adds	r2, r3, #4
   ba360:	f7ff fb6a 	bl	b9a38 <_ZN6tflite12RuntimeShapeC1EiPKl>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba364:	6864      	ldr	r4, [r4, #4]
   ba366:	e7eb      	b.n	ba340 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
      context->ReportError(
   ba368:	696b      	ldr	r3, [r5, #20]
   ba36a:	490b      	ldr	r1, [pc, #44]	; (ba398 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>)
      context->ReportError(
   ba36c:	4628      	mov	r0, r5
   ba36e:	4798      	blx	r3
   ba370:	e743      	b.n	ba1fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
   ba372:	bf00      	nop
   ba374:	000c7095 	.word	0x000c7095
   ba378:	000c87f5 	.word	0x000c87f5
   ba37c:	000c8784 	.word	0x000c8784
   ba380:	000c70fc 	.word	0x000c70fc
   ba384:	3b800000 	.word	0x3b800000
   ba388:	000c880f 	.word	0x000c880f
   ba38c:	000c7067 	.word	0x000c7067
   ba390:	000c889f 	.word	0x000c889f
   ba394:	000c8831 	.word	0x000c8831
   ba398:	000c886a 	.word	0x000c886a

000ba39c <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   ba39c:	2000      	movs	r0, #0
   ba39e:	4770      	bx	lr

000ba3a0 <_ZN6tflite3ops5micro4conv4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   ba3a0:	4770      	bx	lr

000ba3a2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   ba3a2:	2000      	movs	r0, #0
   ba3a4:	4770      	bx	lr

000ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
  inline int FlatSize() const {
   ba3a6:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   ba3a8:	6801      	ldr	r1, [r0, #0]
   ba3aa:	2904      	cmp	r1, #4
   ba3ac:	bfcc      	ite	gt
   ba3ae:	6843      	ldrgt	r3, [r0, #4]
   ba3b0:	1d03      	addle	r3, r0, #4
    for (int i = 0; i < size_; i++) {
   ba3b2:	2200      	movs	r2, #0
    int buffer_size = 1;
   ba3b4:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   ba3b6:	428a      	cmp	r2, r1
   ba3b8:	da04      	bge.n	ba3c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   ba3ba:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   ba3be:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   ba3c0:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   ba3c2:	e7f8      	b.n	ba3b6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   ba3c4:	bd10      	pop	{r4, pc}
	...

000ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           int shift) {
   ba3c8:	b538      	push	{r3, r4, r5, lr}
  int left_shift = shift > 0 ? shift : 0;
   ba3ca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   ba3ce:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   ba3d0:	fa00 f303 	lsl.w	r3, r0, r3
  int right_shift = shift > 0 ? 0 : -shift;
   ba3d4:	bfd4      	ite	le
   ba3d6:	4254      	negle	r4, r2
   ba3d8:	2400      	movgt	r4, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba3da:	428b      	cmp	r3, r1
   ba3dc:	d121      	bne.n	ba422 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5a>
   ba3de:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
   ba3e2:	4255      	negs	r5, r2
   ba3e4:	4155      	adcs	r5, r2
  std::int64_t ab_64 = a_64 * b_64;
   ba3e6:	fb83 3201 	smull	r3, r2, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   ba3ea:	2a00      	cmp	r2, #0
   ba3ec:	4816      	ldr	r0, [pc, #88]	; (ba448 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x80>)
   ba3ee:	bfa8      	it	ge
   ba3f0:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   ba3f4:	b9bd      	cbnz	r5, ba426 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   ba3f6:	18c1      	adds	r1, r0, r3
   ba3f8:	eb42 73e0 	adc.w	r3, r2, r0, asr #31
   ba3fc:	2b00      	cmp	r3, #0
   ba3fe:	da04      	bge.n	ba40a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x42>
   ba400:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   ba404:	1889      	adds	r1, r1, r2
   ba406:	f143 0300 	adc.w	r3, r3, #0
   ba40a:	0fc9      	lsrs	r1, r1, #31
   ba40c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  assert(exponent <= 31);
   ba410:	2c1f      	cmp	r4, #31
   ba412:	dd0b      	ble.n	ba42c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x64>
   ba414:	4b0d      	ldr	r3, [pc, #52]	; (ba44c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x84>)
   ba416:	4a0e      	ldr	r2, [pc, #56]	; (ba450 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x88>)
   ba418:	480e      	ldr	r0, [pc, #56]	; (ba454 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x8c>)
   ba41a:	f240 1167 	movw	r1, #359	; 0x167
   ba41e:	f00a fa4d 	bl	c48bc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba422:	2500      	movs	r5, #0
   ba424:	e7df      	b.n	ba3e6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x1e>
   ba426:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ba42a:	e7f1      	b.n	ba410 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x48>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   ba42c:	2301      	movs	r3, #1
   ba42e:	40a3      	lsls	r3, r4
   ba430:	3b01      	subs	r3, #1
  return a & b;
   ba432:	ea03 0201 	and.w	r2, r3, r1
  return a >> offset;
   ba436:	105b      	asrs	r3, r3, #1
  return a + b;
   ba438:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   ba43c:	fa41 f004 	asr.w	r0, r1, r4
}
   ba440:	429a      	cmp	r2, r3
   ba442:	bfc8      	it	gt
   ba444:	3001      	addgt	r0, #1
   ba446:	bd38      	pop	{r3, r4, r5, pc}
   ba448:	c0000001 	.word	0xc0000001
   ba44c:	000c8209 	.word	0x000c8209
   ba450:	000c8148 	.word	0x000c8148
   ba454:	000c81a2 	.word	0x000c81a2

000ba458 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   ba458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba45c:	b09f      	sub	sp, #124	; 0x7c
   ba45e:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   ba460:	6943      	ldr	r3, [r0, #20]
   ba462:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   ba464:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   ba468:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
   ba46a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   ba46e:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   ba470:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   ba474:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   ba476:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   ba47a:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
   ba47c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   ba480:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
   ba482:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   ba486:	9310      	str	r3, [sp, #64]	; 0x40
  const int32 output_offset = params.output_offset;
   ba488:	69c3      	ldr	r3, [r0, #28]
   ba48a:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 output_activation_min = std::numeric_limits<int8_t>::min();
  const int32 output_activation_max = std::numeric_limits<int8_t>::max();

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba48c:	f8d8 3000 	ldr.w	r3, [r8]
    int8* output_data) {
   ba490:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   ba492:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba494:	2b04      	cmp	r3, #4
    int8* output_data) {
   ba496:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba49a:	d001      	beq.n	ba4a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
   ba49c:	f00a f9fe 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba4a0:	6833      	ldr	r3, [r6, #0]
   ba4a2:	2b04      	cmp	r3, #4
   ba4a4:	d1fa      	bne.n	ba49c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba4a6:	683b      	ldr	r3, [r7, #0]
   ba4a8:	2b04      	cmp	r3, #4
   ba4aa:	d1f7      	bne.n	ba49c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba4ac:	2300      	movs	r3, #0
   ba4ae:	4619      	mov	r1, r3
   ba4b0:	463a      	mov	r2, r7
   ba4b2:	4640      	mov	r0, r8
   ba4b4:	f7fe fc75 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba4b8:	2303      	movs	r3, #3
   ba4ba:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba4bc:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba4be:	4632      	mov	r2, r6
   ba4c0:	4640      	mov	r0, r8
   ba4c2:	f7fe fc6e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba4c6:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba4c8:	9015      	str	r0, [sp, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba4ca:	463a      	mov	r2, r7
   ba4cc:	2100      	movs	r1, #0
   ba4ce:	4630      	mov	r0, r6
   ba4d0:	f7fe fc67 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   ba4d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba4d6:	900a      	str	r0, [sp, #40]	; 0x28
  if (bias_data) {
   ba4d8:	b12b      	cbz	r3, ba4e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba4da:	982b      	ldr	r0, [sp, #172]	; 0xac
   ba4dc:	f7ff ff63 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4e2:	4298      	cmp	r0, r3
   ba4e4:	d1da      	bne.n	ba49c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   ba4e6:	2101      	movs	r1, #1
   ba4e8:	4640      	mov	r0, r8
   ba4ea:	f7fb ff75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   ba4ee:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   ba4f0:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
   ba4f2:	4640      	mov	r0, r8
   ba4f4:	f7fb ff70 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   ba4f8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   ba4fa:	9017      	str	r0, [sp, #92]	; 0x5c
  const int filter_height = filter_shape.Dims(1);
   ba4fc:	4630      	mov	r0, r6
   ba4fe:	f7fb ff6b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   ba502:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   ba504:	9018      	str	r0, [sp, #96]	; 0x60
  const int filter_width = filter_shape.Dims(2);
   ba506:	4630      	mov	r0, r6
   ba508:	f7fb ff66 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   ba50c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   ba50e:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_height = output_shape.Dims(1);
   ba510:	4638      	mov	r0, r7
   ba512:	f7fb ff61 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   ba516:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   ba518:	901a      	str	r0, [sp, #104]	; 0x68
  const int output_width = output_shape.Dims(2);
   ba51a:	4638      	mov	r0, r7
   ba51c:	f7fb ff5c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   ba520:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   ba524:	901b      	str	r0, [sp, #108]	; 0x6c
  for (int batch = 0; batch < batches; ++batch) {
   ba526:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba528:	459b      	cmp	fp, r3
   ba52a:	f280 8099 	bge.w	ba660 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   ba52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba530:	425b      	negs	r3, r3
   ba532:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba534:	2300      	movs	r3, #0
   ba536:	9304      	str	r3, [sp, #16]
   ba538:	9b04      	ldr	r3, [sp, #16]
   ba53a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba53c:	4293      	cmp	r3, r2
   ba53e:	f280 808c 	bge.w	ba65a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
   ba542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba544:	425b      	negs	r3, r3
   ba546:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba548:	2300      	movs	r3, #0
   ba54a:	9305      	str	r3, [sp, #20]
   ba54c:	9b05      	ldr	r3, [sp, #20]
   ba54e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   ba550:	4293      	cmp	r3, r2
   ba552:	da7a      	bge.n	ba64a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f2>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba554:	2400      	movs	r4, #0
   ba556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba558:	429c      	cmp	r4, r3
   ba55a:	da6e      	bge.n	ba63a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e2>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   ba55c:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba55e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba562:	9506      	str	r5, [sp, #24]
   ba564:	9b06      	ldr	r3, [sp, #24]
   ba566:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba568:	4293      	cmp	r3, r2
   ba56a:	da42      	bge.n	ba5f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba56c:	2300      	movs	r3, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba56e:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba572:	9307      	str	r3, [sp, #28]
   ba574:	9b07      	ldr	r3, [sp, #28]
   ba576:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba578:	4293      	cmp	r3, r2
   ba57a:	da34      	bge.n	ba5e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba57c:	2300      	movs	r3, #0
   ba57e:	9303      	str	r3, [sp, #12]
   ba580:	9b03      	ldr	r3, [sp, #12]
   ba582:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba584:	4293      	cmp	r3, r2
   ba586:	da28      	bge.n	ba5da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x182>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   ba588:	f1ba 0f00 	cmp.w	sl, #0
   ba58c:	db22      	blt.n	ba5d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba58e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba590:	4553      	cmp	r3, sl
   ba592:	dd1f      	ble.n	ba5d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba594:	f1b9 0f00 	cmp.w	r9, #0
   ba598:	db1c      	blt.n	ba5d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
   ba59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba59c:	454b      	cmp	r3, r9
   ba59e:	dd19      	ble.n	ba5d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba5a0:	9b03      	ldr	r3, [sp, #12]
   ba5a2:	9300      	str	r3, [sp, #0]
   ba5a4:	464a      	mov	r2, r9
   ba5a6:	4653      	mov	r3, sl
   ba5a8:	4659      	mov	r1, fp
   ba5aa:	4640      	mov	r0, r8
   ba5ac:	f7fb ff7b 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba5b0:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba5b2:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba5b4:	9300      	str	r3, [sp, #0]
   ba5b6:	4621      	mov	r1, r4
   ba5b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   ba5bc:	4630      	mov	r0, r6
   ba5be:	f7fb ff72 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   ba5c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ba5c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   ba5c6:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   ba5c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba5ca:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   ba5cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   ba5ce:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   ba5d0:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba5d4:	9b03      	ldr	r3, [sp, #12]
   ba5d6:	3301      	adds	r3, #1
   ba5d8:	e7d1      	b.n	ba57e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba5da:	9b07      	ldr	r3, [sp, #28]
   ba5dc:	3301      	adds	r3, #1
   ba5de:	9307      	str	r3, [sp, #28]
   ba5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba5e2:	449a      	add	sl, r3
   ba5e4:	e7c6      	b.n	ba574 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba5e6:	9b06      	ldr	r3, [sp, #24]
   ba5e8:	3301      	adds	r3, #1
   ba5ea:	9306      	str	r3, [sp, #24]
   ba5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   ba5ee:	4499      	add	r9, r3
   ba5f0:	e7b8      	b.n	ba564 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
                }
              }
            }
          }

          if (bias_data) {
   ba5f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   ba5f4:	b113      	cbz	r3, ba5fc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a4>
            acc += bias_data[out_channel];
   ba5f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   ba5fa:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   ba5fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   ba5fe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   ba602:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   ba604:	4628      	mov	r0, r5
   ba606:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   ba60a:	f7ff fedd 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = MultiplyByQuantizedMultiplier(
   ba612:	4605      	mov	r5, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba614:	9400      	str	r4, [sp, #0]
   ba616:	4659      	mov	r1, fp
   ba618:	4638      	mov	r0, r7
   ba61a:	f7fb ff44 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc += output_offset;
   ba61e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba620:	441d      	add	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba622:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   ba626:	429d      	cmp	r5, r3
   ba628:	bfb8      	it	lt
   ba62a:	461d      	movlt	r5, r3
   ba62c:	2d7f      	cmp	r5, #127	; 0x7f
   ba62e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   ba630:	bfa8      	it	ge
   ba632:	257f      	movge	r5, #127	; 0x7f
   ba634:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba636:	3401      	adds	r4, #1
   ba638:	e78d      	b.n	ba556 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba63a:	9b05      	ldr	r3, [sp, #20]
   ba63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba63e:	3301      	adds	r3, #1
   ba640:	9305      	str	r3, [sp, #20]
   ba642:	9b08      	ldr	r3, [sp, #32]
   ba644:	4413      	add	r3, r2
   ba646:	9308      	str	r3, [sp, #32]
   ba648:	e780      	b.n	ba54c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba64a:	9b04      	ldr	r3, [sp, #16]
   ba64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   ba64e:	3301      	adds	r3, #1
   ba650:	9304      	str	r3, [sp, #16]
   ba652:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba654:	4413      	add	r3, r2
   ba656:	9309      	str	r3, [sp, #36]	; 0x24
   ba658:	e76e      	b.n	ba538 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
  for (int batch = 0; batch < batches; ++batch) {
   ba65a:	f10b 0b01 	add.w	fp, fp, #1
   ba65e:	e762      	b.n	ba526 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xce>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   ba660:	b01f      	add	sp, #124	; 0x7c
   ba662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000ba668 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:
                             OpData* data) {
   ba668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba66c:	4698      	mov	r8, r3
  bool has_bias = node->inputs->size == 3;
   ba66e:	680b      	ldr	r3, [r1, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba670:	681b      	ldr	r3, [r3, #0]
                             OpData* data) {
   ba672:	b08d      	sub	sp, #52	; 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba674:	3b02      	subs	r3, #2
   ba676:	2b01      	cmp	r3, #1
                             OpData* data) {
   ba678:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   ba67a:	4606      	mov	r6, r0
   ba67c:	460f      	mov	r7, r1
   ba67e:	4615      	mov	r5, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba680:	d90a      	bls.n	ba698 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x30>
   ba682:	4b4e      	ldr	r3, [pc, #312]	; (ba7bc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
   ba684:	9300      	str	r3, [sp, #0]
   ba686:	6944      	ldr	r4, [r0, #20]
   ba688:	4a4d      	ldr	r2, [pc, #308]	; (ba7c0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   ba68a:	494e      	ldr	r1, [pc, #312]	; (ba7c4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x15c>)
   ba68c:	234f      	movs	r3, #79	; 0x4f
   ba68e:	47a0      	blx	r4
   ba690:	2001      	movs	r0, #1
}
   ba692:	b00d      	add	sp, #52	; 0x34
   ba694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   ba698:	684b      	ldr	r3, [r1, #4]
   ba69a:	681b      	ldr	r3, [r3, #0]
   ba69c:	2b01      	cmp	r3, #1
   ba69e:	d00c      	beq.n	ba6ba <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x52>
   ba6a0:	2401      	movs	r4, #1
   ba6a2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba6a6:	4b48      	ldr	r3, [pc, #288]	; (ba7c8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x160>)
   ba6a8:	9301      	str	r3, [sp, #4]
   ba6aa:	4b48      	ldr	r3, [pc, #288]	; (ba7cc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x164>)
   ba6ac:	9300      	str	r3, [sp, #0]
   ba6ae:	6945      	ldr	r5, [r0, #20]
   ba6b0:	4a43      	ldr	r2, [pc, #268]	; (ba7c0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   ba6b2:	4947      	ldr	r1, [pc, #284]	; (ba7d0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x168>)
   ba6b4:	2350      	movs	r3, #80	; 0x50
   ba6b6:	47a8      	blx	r5
   ba6b8:	e7ea      	b.n	ba690 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x28>
      width, filter_height, filter_width, padding, &out_height, &out_width);
   ba6ba:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]
  auto padding = params->padding;
   ba6be:	f892 b000 	ldrb.w	fp, [r2]
      width, filter_height, filter_width, padding, &out_height, &out_width);
   ba6c2:	6913      	ldr	r3, [r2, #16]
   ba6c4:	9309      	str	r3, [sp, #36]	; 0x24
   ba6c6:	68d3      	ldr	r3, [r2, #12]
   ba6c8:	930a      	str	r3, [sp, #40]	; 0x28
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   ba6ca:	4641      	mov	r1, r8
   ba6cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba6ce:	9300      	str	r3, [sp, #0]
   ba6d0:	4658      	mov	r0, fp
   ba6d2:	464b      	mov	r3, r9
   ba6d4:	f7fe ffaa 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   ba6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   ba6dc:	900b      	str	r0, [sp, #44]	; 0x2c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   ba6de:	9300      	str	r3, [sp, #0]
   ba6e0:	9916      	ldr	r1, [sp, #88]	; 0x58
   ba6e2:	4653      	mov	r3, sl
   ba6e4:	4658      	mov	r0, fp
   ba6e6:	f7fe ffa1 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba6ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   ba6ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   ba6ee:	3b01      	subs	r3, #1
   ba6f0:	4353      	muls	r3, r2
   ba6f2:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba6f4:	3801      	subs	r0, #1
   ba6f6:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
   ba6fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int total_padding =
   ba6fe:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba704:	3b01      	subs	r3, #1
   ba706:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   ba70a:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   ba70c:	1e50      	subs	r0, r2, #1
   ba70e:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
   ba712:	eba9 0808 	sub.w	r8, r9, r8
  total_padding = total_padding > 0 ? total_padding : 0;
   ba716:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   ba71a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
   ba71e:	ea4f 0368 	mov.w	r3, r8, asr #1
   ba722:	6023      	str	r3, [r4, #0]
   ba724:	ea4f 036a 	mov.w	r3, sl, asr #1
   ba728:	6063      	str	r3, [r4, #4]
  *offset = total_padding % 2;
   ba72a:	f008 0301 	and.w	r3, r8, #1
   ba72e:	60a3      	str	r3, [r4, #8]
   ba730:	f00a 0301 	and.w	r3, sl, #1
   ba734:	60e3      	str	r3, [r4, #12]
  if (data_type != kTfLiteFloat32) {
   ba736:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   ba73a:	2b01      	cmp	r3, #1
   ba73c:	d03c      	beq.n	ba7b8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba73e:	f8d7 c000 	ldr.w	ip, [r7]
   ba742:	68b0      	ldr	r0, [r6, #8]
   ba744:	f8dc 1004 	ldr.w	r1, [ip, #4]
   ba748:	f8dc 2008 	ldr.w	r2, [ip, #8]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   ba74c:	f8dc c00c 	ldr.w	ip, [ip, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba750:	2338      	movs	r3, #56	; 0x38
  if (use_tensor) {
   ba752:	f1bc 3fff 	cmp.w	ip, #4294967295
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba756:	fb03 0101 	mla	r1, r3, r1, r0
   ba75a:	fb03 0202 	mla	r2, r3, r2, r0
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   ba75e:	bf18      	it	ne
   ba760:	fb03 030c 	mlane	r3, r3, ip, r0
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   ba764:	f504 7c8c 	add.w	ip, r4, #280	; 0x118
   ba768:	f8cd c01c 	str.w	ip, [sp, #28]
   ba76c:	f104 0c18 	add.w	ip, r4, #24
   ba770:	f8cd c018 	str.w	ip, [sp, #24]
   ba774:	f504 7c07 	add.w	ip, r4, #540	; 0x21c
   ba778:	f8cd c014 	str.w	ip, [sp, #20]
   ba77c:	f504 7c06 	add.w	ip, r4, #536	; 0x218
   ba780:	f8cd c010 	str.w	ip, [sp, #16]
   ba784:	f104 0c14 	add.w	ip, r4, #20
   ba788:	f104 0410 	add.w	r4, r4, #16
   ba78c:	9402      	str	r4, [sp, #8]
   ba78e:	f105 0514 	add.w	r5, r5, #20
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   ba792:	687c      	ldr	r4, [r7, #4]
   ba794:	9501      	str	r5, [sp, #4]
   ba796:	f8cd c00c 	str.w	ip, [sp, #12]
   ba79a:	6864      	ldr	r4, [r4, #4]
   ba79c:	f04f 0538 	mov.w	r5, #56	; 0x38
   ba7a0:	fb05 0004 	mla	r0, r5, r4, r0
  return nullptr;
   ba7a4:	bf08      	it	eq
   ba7a6:	2300      	moveq	r3, #0
   ba7a8:	9000      	str	r0, [sp, #0]
   ba7aa:	4630      	mov	r0, r6
   ba7ac:	f7fa fc32 	bl	b5014 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   ba7b0:	3800      	subs	r0, #0
   ba7b2:	bf18      	it	ne
   ba7b4:	2001      	movne	r0, #1
   ba7b6:	e76c      	b.n	ba692 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2a>
  return kTfLiteOk;
   ba7b8:	2000      	movs	r0, #0
   ba7ba:	e76a      	b.n	ba692 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2a>
   ba7bc:	000c8943 	.word	0x000c8943
   ba7c0:	000c88d5 	.word	0x000c88d5
   ba7c4:	000c7067 	.word	0x000c7067
   ba7c8:	000c8bee 	.word	0x000c8bee
   ba7cc:	000c8967 	.word	0x000c8967
   ba7d0:	000c70fc 	.word	0x000c70fc

000ba7d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, OpData* data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   ba7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba7d8:	ed2d 8b02 	vpush	{d8}
   ba7dc:	b0bb      	sub	sp, #236	; 0xec
   ba7de:	e9dd 6546 	ldrd	r6, r5, [sp, #280]	; 0x118
   ba7e2:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
  const int32_t input_offset = -input->params.zero_point;
   ba7e4:	6931      	ldr	r1, [r6, #16]
   ba7e6:	910b      	str	r1, [sp, #44]	; 0x2c
  const int32_t filter_offset = -filter->params.zero_point;
   ba7e8:	6929      	ldr	r1, [r5, #16]
   ba7ea:	910c      	str	r1, [sp, #48]	; 0x30
  const int32_t output_offset = output->params.zero_point;
   ba7ec:	6921      	ldr	r1, [r4, #16]
   ba7ee:	9113      	str	r1, [sp, #76]	; 0x4c

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
   ba7f0:	f9b3 1000 	ldrsh.w	r1, [r3]
   ba7f4:	910d      	str	r1, [sp, #52]	; 0x34
  op_params.padding_values.height = data->padding.height;
   ba7f6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   ba7fa:	910e      	str	r1, [sp, #56]	; 0x38
  op_params.stride_width = params->stride_width;
   ba7fc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
   ba800:	910f      	str	r1, [sp, #60]	; 0x3c
  op_params.stride_height = params->stride_height;
   ba802:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
   ba806:	9110      	str	r1, [sp, #64]	; 0x40
  op_params.dilation_width_factor = params->dilation_width_factor;
   ba808:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   ba80c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   ba810:	9212      	str	r2, [sp, #72]	; 0x48
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
   ba812:	691a      	ldr	r2, [r3, #16]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   ba814:	9f48      	ldr	r7, [sp, #288]	; 0x120
  op_params.dilation_width_factor = params->dilation_width_factor;
   ba816:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.output_multiplier = data->output_multiplier;
   ba818:	ee08 2a10 	vmov	s16, r2
  op_params.output_shift = -data->output_shift;
   ba81c:	695a      	ldr	r2, [r3, #20]
   ba81e:	4252      	negs	r2, r2
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  reference_ops::Conv(op_params, GetTensorShape(input),
   ba820:	4631      	mov	r1, r6
   ba822:	a821      	add	r0, sp, #132	; 0x84
  op_params.output_shift = -data->output_shift;
   ba824:	ee08 2a90 	vmov	s17, r2
  op_params.quantized_activation_min = data->output_activation_min;
   ba828:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  op_params.quantized_activation_max = data->output_activation_max;
   ba82c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
  op_params.quantized_activation_min = data->output_activation_min;
   ba830:	9208      	str	r2, [sp, #32]
  op_params.quantized_activation_max = data->output_activation_max;
   ba832:	9309      	str	r3, [sp, #36]	; 0x24
  reference_ops::Conv(op_params, GetTensorShape(input),
   ba834:	f7fc f869 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   ba838:	6873      	ldr	r3, [r6, #4]
   ba83a:	9316      	str	r3, [sp, #88]	; 0x58
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   ba83c:	4629      	mov	r1, r5
   ba83e:	a826      	add	r0, sp, #152	; 0x98
   ba840:	f7fc f863 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   ba844:	686b      	ldr	r3, [r5, #4]
   ba846:	9315      	str	r3, [sp, #84]	; 0x54
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   ba848:	4639      	mov	r1, r7
   ba84a:	a82b      	add	r0, sp, #172	; 0xac
   ba84c:	f7fc f85d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   ba850:	b107      	cbz	r7, ba854 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x80>
   ba852:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   ba854:	4621      	mov	r1, r4
   ba856:	a830      	add	r0, sp, #192	; 0xc0
   ba858:	f7fc f857 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba85c:	6863      	ldr	r3, [r4, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   ba85e:	9949      	ldr	r1, [sp, #292]	; 0x124
   ba860:	9314      	str	r3, [sp, #80]	; 0x50
   ba862:	a835      	add	r0, sp, #212	; 0xd4
   ba864:	f7fc f851 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   ba868:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   ba86c:	4293      	cmp	r3, r2
   ba86e:	dd01      	ble.n	ba874 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa0>
   ba870:	f00a f814 	bl	c489c <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba874:	9b21      	ldr	r3, [sp, #132]	; 0x84
   ba876:	2b04      	cmp	r3, #4
   ba878:	d1fa      	bne.n	ba870 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba87a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   ba87c:	2b04      	cmp	r3, #4
   ba87e:	d1f7      	bne.n	ba870 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba880:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   ba882:	2b04      	cmp	r3, #4
   ba884:	d1f4      	bne.n	ba870 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba886:	2300      	movs	r3, #0
   ba888:	4619      	mov	r1, r3
   ba88a:	aa30      	add	r2, sp, #192	; 0xc0
   ba88c:	a821      	add	r0, sp, #132	; 0x84
   ba88e:	f7fe fa88 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba892:	2303      	movs	r3, #3
   ba894:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba896:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba898:	aa26      	add	r2, sp, #152	; 0x98
   ba89a:	a821      	add	r0, sp, #132	; 0x84
   ba89c:	f7fe fa81 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba8a0:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba8a2:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba8a4:	aa30      	add	r2, sp, #192	; 0xc0
   ba8a6:	2100      	movs	r1, #0
   ba8a8:	a826      	add	r0, sp, #152	; 0x98
   ba8aa:	f7fe fa7a 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   ba8ae:	900a      	str	r0, [sp, #40]	; 0x28
  if (bias_data) {
   ba8b0:	b12f      	cbz	r7, ba8be <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xea>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba8b2:	a82b      	add	r0, sp, #172	; 0xac
   ba8b4:	f7ff fd77 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba8ba:	4283      	cmp	r3, r0
   ba8bc:	d1d8      	bne.n	ba870 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x9c>
  }
  const int input_height = input_shape.Dims(1);
   ba8be:	2101      	movs	r1, #1
   ba8c0:	a821      	add	r0, sp, #132	; 0x84
   ba8c2:	f7fb fd89 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   ba8c6:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   ba8c8:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   ba8ca:	a821      	add	r0, sp, #132	; 0x84
   ba8cc:	f7fb fd84 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   ba8d0:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   ba8d2:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   ba8d4:	a826      	add	r0, sp, #152	; 0x98
   ba8d6:	f7fb fd7f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   ba8da:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   ba8dc:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   ba8de:	a826      	add	r0, sp, #152	; 0x98
   ba8e0:	f7fb fd7a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   ba8e4:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   ba8e6:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   ba8e8:	a830      	add	r0, sp, #192	; 0xc0
   ba8ea:	f7fb fd75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   ba8ee:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   ba8f0:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   ba8f2:	a830      	add	r0, sp, #192	; 0xc0
   ba8f4:	f7fb fd70 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   ba8f8:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   ba8fc:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   ba8fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba900:	455b      	cmp	r3, fp
   ba902:	f340 8091 	ble.w	baa28 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x254>
   ba906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   ba908:	425b      	negs	r3, r3
   ba90a:	9306      	str	r3, [sp, #24]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba90c:	2300      	movs	r3, #0
   ba90e:	9304      	str	r3, [sp, #16]
   ba910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   ba912:	9a04      	ldr	r2, [sp, #16]
   ba914:	4293      	cmp	r3, r2
   ba916:	f340 8084 	ble.w	baa22 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x24e>
   ba91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba91c:	425b      	negs	r3, r3
   ba91e:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba920:	2300      	movs	r3, #0
   ba922:	9305      	str	r3, [sp, #20]
   ba924:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   ba926:	9a05      	ldr	r2, [sp, #20]
   ba928:	4293      	cmp	r3, r2
   ba92a:	dd72      	ble.n	baa12 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x23e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba92c:	2400      	movs	r4, #0
   ba92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba930:	42a3      	cmp	r3, r4
   ba932:	dd66      	ble.n	baa02 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x22e>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   ba934:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba936:	9e06      	ldr	r6, [sp, #24]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba938:	46a9      	mov	r9, r5
   ba93a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba93c:	454b      	cmp	r3, r9
   ba93e:	dd3f      	ble.n	ba9c0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1ec>
   ba940:	f8dd 801c 	ldr.w	r8, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba944:	f04f 0a00 	mov.w	sl, #0
   ba948:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   ba94a:	4553      	cmp	r3, sl
   ba94c:	dd33      	ble.n	ba9b6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e2>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba94e:	2300      	movs	r3, #0
   ba950:	9303      	str	r3, [sp, #12]
   ba952:	9a03      	ldr	r2, [sp, #12]
   ba954:	9b18      	ldr	r3, [sp, #96]	; 0x60
   ba956:	4293      	cmp	r3, r2
   ba958:	dd28      	ble.n	ba9ac <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d8>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   ba95a:	f1b8 0f00 	cmp.w	r8, #0
   ba95e:	db22      	blt.n	ba9a6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba960:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   ba962:	4543      	cmp	r3, r8
   ba964:	dd1f      	ble.n	ba9a6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba966:	2e00      	cmp	r6, #0
   ba968:	db1d      	blt.n	ba9a6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
   ba96a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba96c:	42b3      	cmp	r3, r6
   ba96e:	dd1a      	ble.n	ba9a6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba970:	9200      	str	r2, [sp, #0]
   ba972:	4643      	mov	r3, r8
   ba974:	4632      	mov	r2, r6
   ba976:	4659      	mov	r1, fp
   ba978:	a821      	add	r0, sp, #132	; 0x84
   ba97a:	f7fb fd94 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba97e:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   ba980:	901f      	str	r0, [sp, #124]	; 0x7c
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   ba982:	9300      	str	r3, [sp, #0]
   ba984:	464a      	mov	r2, r9
   ba986:	4653      	mov	r3, sl
   ba988:	4621      	mov	r1, r4
   ba98a:	a826      	add	r0, sp, #152	; 0x98
   ba98c:	f7fb fd8b 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   ba990:	9b15      	ldr	r3, [sp, #84]	; 0x54
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                                         filter_x, in_channel)];
   ba994:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   ba996:	991f      	ldr	r1, [sp, #124]	; 0x7c
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba998:	1a9b      	subs	r3, r3, r2
                                                      in_x, in_channel)];
   ba99a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   ba99c:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   ba99e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   ba9a0:	1a52      	subs	r2, r2, r1
                  acc +=
   ba9a2:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba9a6:	9b03      	ldr	r3, [sp, #12]
   ba9a8:	3301      	adds	r3, #1
   ba9aa:	e7d1      	b.n	ba950 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x17c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ba9ae:	f10a 0a01 	add.w	sl, sl, #1
   ba9b2:	4498      	add	r8, r3
   ba9b4:	e7c8      	b.n	ba948 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x174>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba9b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ba9b8:	f109 0901 	add.w	r9, r9, #1
   ba9bc:	441e      	add	r6, r3
   ba9be:	e7bc      	b.n	ba93a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x166>
                }
              }
            }
          }
          if (bias_data) {
   ba9c0:	b117      	cbz	r7, ba9c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1f4>
            acc += bias_data[out_channel];
   ba9c2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   ba9c6:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   ba9c8:	ee18 2a90 	vmov	r2, s17
   ba9cc:	ee18 1a10 	vmov	r1, s16
   ba9d0:	4628      	mov	r0, r5
   ba9d2:	f7ff fcf9 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                              output_shift);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   ba9da:	4605      	mov	r5, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba9dc:	9400      	str	r4, [sp, #0]
   ba9de:	4659      	mov	r1, fp
   ba9e0:	a830      	add	r0, sp, #192	; 0xc0
   ba9e2:	f7fb fd60 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          acc += output_offset;
   ba9e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba9e8:	441d      	add	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba9ea:	9b08      	ldr	r3, [sp, #32]
   ba9ec:	429d      	cmp	r5, r3
   ba9ee:	bfb8      	it	lt
   ba9f0:	461d      	movlt	r5, r3
   ba9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba9f4:	429d      	cmp	r5, r3
   ba9f6:	bfa8      	it	ge
   ba9f8:	461d      	movge	r5, r3
   ba9fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba9fc:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba9fe:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   baa00:	e795      	b.n	ba92e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x15a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   baa02:	9b05      	ldr	r3, [sp, #20]
   baa04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   baa06:	3301      	adds	r3, #1
   baa08:	9305      	str	r3, [sp, #20]
   baa0a:	9b07      	ldr	r3, [sp, #28]
   baa0c:	4413      	add	r3, r2
   baa0e:	9307      	str	r3, [sp, #28]
   baa10:	e788      	b.n	ba924 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x150>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   baa12:	9b04      	ldr	r3, [sp, #16]
   baa14:	9a10      	ldr	r2, [sp, #64]	; 0x40
   baa16:	3301      	adds	r3, #1
   baa18:	9304      	str	r3, [sp, #16]
   baa1a:	9b06      	ldr	r3, [sp, #24]
   baa1c:	4413      	add	r3, r2
   baa1e:	9306      	str	r3, [sp, #24]
   baa20:	e776      	b.n	ba910 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   baa22:	f10b 0b01 	add.w	fp, fp, #1
   baa26:	e76a      	b.n	ba8fe <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x12a>
   baa28:	a835      	add	r0, sp, #212	; 0xd4
   baa2a:	f7fb fcca 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   baa2e:	a830      	add	r0, sp, #192	; 0xc0
   baa30:	f7fb fcc7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   baa34:	a82b      	add	r0, sp, #172	; 0xac
   baa36:	f7fb fcc4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   baa3a:	a826      	add	r0, sp, #152	; 0x98
   baa3c:	f7fb fcc1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   baa40:	a821      	add	r0, sp, #132	; 0x84
   baa42:	f7fb fcbe 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
   baa46:	b03b      	add	sp, #236	; 0xec
   baa48:	ecbd 8b02 	vpop	{d8}
   baa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baa50 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, OpData* data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
   baa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa54:	b0ad      	sub	sp, #180	; 0xb4
   baa56:	e9dd 7536 	ldrd	r7, r5, [sp, #216]	; 0xd8
   baa5a:	e9dd 6b38 	ldrd	r6, fp, [sp, #224]	; 0xe0
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
   baa5e:	6939      	ldr	r1, [r7, #16]
   baa60:	4249      	negs	r1, r1
   baa62:	9123      	str	r1, [sp, #140]	; 0x8c
  op_params.output_offset = output->params.zero_point;
   baa64:	f8db 1010 	ldr.w	r1, [fp, #16]
   baa68:	9125      	str	r1, [sp, #148]	; 0x94
  op_params.stride_height = params->stride_height;
   baa6a:	6891      	ldr	r1, [r2, #8]
   baa6c:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
  op_params.stride_width = params->stride_width;
   baa70:	6851      	ldr	r1, [r2, #4]
   baa72:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
   baa76:	469a      	mov	sl, r3
  op_params.dilation_height_factor = params->dilation_height_factor;
   baa78:	6911      	ldr	r1, [r2, #16]
  op_params.dilation_width_factor = params->dilation_width_factor;
   baa7a:	68d2      	ldr	r2, [r2, #12]
   baa7c:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
  op_params.padding_values.height = data->padding.height;
   baa80:	685a      	ldr	r2, [r3, #4]
  op_params.dilation_height_factor = params->dilation_height_factor;
   baa82:	f8ad 1088 	strh.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.height = data->padding.height;
   baa86:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c

  reference_integer_ops::ConvPerChannel(
      op_params, data->per_channel_output_multiplier,
      data->per_channel_output_shift, GetTensorShape(input),
   baa8a:	4639      	mov	r1, r7
  op_params.padding_values.width = data->padding.width;
   baa8c:	f85a 2b18 	ldr.w	r2, [sl], #24
   baa90:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
      data->per_channel_output_shift, GetTensorShape(input),
   baa94:	a80a      	add	r0, sp, #40	; 0x28
   baa96:	f503 748c 	add.w	r4, r3, #280	; 0x118
   baa9a:	f7fb ff36 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   baa9e:	687b      	ldr	r3, [r7, #4]
   baaa0:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorData<int8>(input), GetTensorShape(filter),
   baaa2:	af0f      	add	r7, sp, #60	; 0x3c
   baaa4:	4629      	mov	r1, r5
   baaa6:	4638      	mov	r0, r7
   baaa8:	f7fb ff2f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baaac:	b105      	cbz	r5, baab0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x60>
   baaae:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   baab0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   baab4:	4631      	mov	r1, r6
   baab6:	4640      	mov	r0, r8
   baab8:	f7fb ff27 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   baabc:	b106      	cbz	r6, baac0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x70>
   baabe:	6876      	ldr	r6, [r6, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   baac0:	f10d 0964 	add.w	r9, sp, #100	; 0x64
   baac4:	4659      	mov	r1, fp
   baac6:	4648      	mov	r0, r9
   baac8:	f7fb ff1f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   baacc:	f8db 3004 	ldr.w	r3, [fp, #4]
   baad0:	e9cd 9305 	strd	r9, r3, [sp, #20]
   baad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baad6:	9300      	str	r3, [sp, #0]
   baad8:	4622      	mov	r2, r4
   baada:	ab0a      	add	r3, sp, #40	; 0x28
   baadc:	4651      	mov	r1, sl
   baade:	a81e      	add	r0, sp, #120	; 0x78
   baae0:	e9cd 8603 	strd	r8, r6, [sp, #12]
   baae4:	e9cd 7501 	strd	r7, r5, [sp, #4]
   baae8:	f7ff fcb6 	bl	ba458 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   baaec:	4648      	mov	r0, r9
   baaee:	f7fb fc68 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   baaf2:	4640      	mov	r0, r8
   baaf4:	f7fb fc65 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   baaf8:	4638      	mov	r0, r7
   baafa:	f7fb fc62 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   baafe:	a80a      	add	r0, sp, #40	; 0x28
   bab00:	f7fb fc5f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
   bab04:	b02d      	add	sp, #180	; 0xb4
   bab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000bab0c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, OpData* data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   bab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab10:	ed2d 8b04 	vpush	{d8-d9}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
   bab14:	7d11      	ldrb	r1, [r2, #20]
  if (activation == kTfLiteActRelu) {
   bab16:	2901      	cmp	r1, #1
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   bab18:	b0b1      	sub	sp, #196	; 0xc4
   bab1a:	d04b      	beq.n	babb4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa8>
  } else if (activation == kTfLiteActRelu6) {
   bab1c:	2903      	cmp	r1, #3
   bab1e:	d04e      	beq.n	babbe <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xb2>
    *activation_max = std::numeric_limits<T>::max();
   bab20:	eddf 7a9f 	vldr	s15, [pc, #636]	; bada0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x294>
   bab24:	2902      	cmp	r1, #2
   bab26:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   bab2a:	bf18      	it	ne
   bab2c:	eeb0 9a67 	vmovne.f32	s18, s15
   bab30:	eddf 7a9c 	vldr	s15, [pc, #624]	; bada4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x298>
   bab34:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
   bab38:	bf18      	it	ne
   bab3a:	eef0 8a67 	vmovne.f32	s17, s15
                           &output_activation_max);

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
   bab3e:	f9b3 1000 	ldrsh.w	r1, [r3]
  op_params.padding_values.height = data->padding.height;
   bab42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   bab46:	9308      	str	r3, [sp, #32]
  op_params.stride_width = params->stride_width;
   bab48:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   bab4c:	9309      	str	r3, [sp, #36]	; 0x24
  op_params.stride_height = params->stride_height;
   bab4e:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
   bab52:	930a      	str	r3, [sp, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
   bab54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  op_params.padding_values.width = data->padding.width;
   bab58:	9107      	str	r1, [sp, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
   bab5a:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
   bab5c:	993e      	ldr	r1, [sp, #248]	; 0xf8
  op_params.dilation_height_factor = params->dilation_height_factor;
   bab5e:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
   bab62:	930c      	str	r3, [sp, #48]	; 0x30
  reference_ops::Conv(op_params, GetTensorShape(input),
   bab64:	a817      	add	r0, sp, #92	; 0x5c
   bab66:	f7fb fed0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bab6a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   bab6c:	b10b      	cbz	r3, bab72 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x66>
   bab6e:	685b      	ldr	r3, [r3, #4]
   bab70:	933e      	str	r3, [sp, #248]	; 0xf8
                      GetTensorData<float>(input), GetTensorShape(filter),
   bab72:	993f      	ldr	r1, [sp, #252]	; 0xfc
   bab74:	a81c      	add	r0, sp, #112	; 0x70
   bab76:	f7fb fec8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bab7a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bab7c:	b10b      	cbz	r3, bab82 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x76>
   bab7e:	685b      	ldr	r3, [r3, #4]
   bab80:	933f      	str	r3, [sp, #252]	; 0xfc
                      GetTensorData<float>(filter), GetTensorShape(bias),
   bab82:	9940      	ldr	r1, [sp, #256]	; 0x100
   bab84:	a821      	add	r0, sp, #132	; 0x84
   bab86:	f7fb fec0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bab8a:	9b40      	ldr	r3, [sp, #256]	; 0x100
   bab8c:	b10b      	cbz	r3, bab92 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x86>
   bab8e:	685b      	ldr	r3, [r3, #4]
   bab90:	9340      	str	r3, [sp, #256]	; 0x100
                      GetTensorData<float>(bias), GetTensorShape(output),
   bab92:	9943      	ldr	r1, [sp, #268]	; 0x10c
   bab94:	a826      	add	r0, sp, #152	; 0x98
   bab96:	f7fb feb8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bab9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bab9c:	b10b      	cbz	r3, baba2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x96>
   bab9e:	685b      	ldr	r3, [r3, #4]
   baba0:	9343      	str	r3, [sp, #268]	; 0x10c
                      GetTensorData<float>(output), GetTensorShape(im2col),
   baba2:	9941      	ldr	r1, [sp, #260]	; 0x104
   baba4:	a82b      	add	r0, sp, #172	; 0xac
   baba6:	f7fb feb0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   babaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babac:	2b04      	cmp	r3, #4
   babae:	d009      	beq.n	babc4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xb8>
   babb0:	f009 fe74 	bl	c489c <abort>
    *activation_max = std::numeric_limits<T>::max();
   babb4:	ed9f 9a7a 	vldr	s18, [pc, #488]	; bada0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x294>
    *activation_min = 0;
   babb8:	eddf 8a7b 	vldr	s17, [pc, #492]	; bada8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
   babbc:	e7bf      	b.n	bab3e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32>
    *activation_max = 6;
   babbe:	eeb1 9a08 	vmov.f32	s18, #24	; 0x40c00000  6.0
   babc2:	e7f9      	b.n	babb8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xac>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   babc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   babc6:	2b04      	cmp	r3, #4
   babc8:	d1f2      	bne.n	babb0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   babca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   babcc:	2b04      	cmp	r3, #4
   babce:	d1ef      	bne.n	babb0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   babd0:	2300      	movs	r3, #0
   babd2:	4619      	mov	r1, r3
   babd4:	aa26      	add	r2, sp, #152	; 0x98
   babd6:	a817      	add	r0, sp, #92	; 0x5c
   babd8:	f7fe f8e3 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   babdc:	2303      	movs	r3, #3
   babde:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   babe0:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   babe2:	aa1c      	add	r2, sp, #112	; 0x70
   babe4:	a817      	add	r0, sp, #92	; 0x5c
   babe6:	f7fe f8dc 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   babea:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   babec:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   babee:	aa26      	add	r2, sp, #152	; 0x98
   babf0:	2100      	movs	r1, #0
   babf2:	a81c      	add	r0, sp, #112	; 0x70
   babf4:	f7fe f8d5 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   babf8:	9b40      	ldr	r3, [sp, #256]	; 0x100
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   babfa:	9006      	str	r0, [sp, #24]
  if (bias_data) {
   babfc:	b12b      	cbz	r3, bac0a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xfe>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   babfe:	a821      	add	r0, sp, #132	; 0x84
   bac00:	f7ff fbd1 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   bac04:	9b06      	ldr	r3, [sp, #24]
   bac06:	4283      	cmp	r3, r0
   bac08:	d1d2      	bne.n	babb0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa4>
  const int input_height = input_shape.Dims(1);
   bac0a:	2101      	movs	r1, #1
   bac0c:	a817      	add	r0, sp, #92	; 0x5c
   bac0e:	f7fb fbe3 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   bac12:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   bac14:	900f      	str	r0, [sp, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
   bac16:	a817      	add	r0, sp, #92	; 0x5c
   bac18:	f7fb fbde 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   bac1c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   bac1e:	9010      	str	r0, [sp, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
   bac20:	a81c      	add	r0, sp, #112	; 0x70
   bac22:	f7fb fbd9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   bac26:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   bac28:	9011      	str	r0, [sp, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
   bac2a:	a81c      	add	r0, sp, #112	; 0x70
   bac2c:	f7fb fbd4 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   bac30:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   bac32:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
   bac34:	a826      	add	r0, sp, #152	; 0x98
   bac36:	f7fb fbcf 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   bac3a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   bac3c:	9013      	str	r0, [sp, #76]	; 0x4c
  const int output_width = output_shape.Dims(2);
   bac3e:	a826      	add	r0, sp, #152	; 0x98
   bac40:	f7fb fbca 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   bac44:	2500      	movs	r5, #0
  const int output_width = output_shape.Dims(2);
   bac46:	9014      	str	r0, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   bac48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bac4a:	42ab      	cmp	r3, r5
   bac4c:	f340 8094 	ble.w	bad78 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x26c>
   bac50:	9b08      	ldr	r3, [sp, #32]
   bac52:	425b      	negs	r3, r3
   bac54:	9304      	str	r3, [sp, #16]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   bac56:	f04f 0800 	mov.w	r8, #0
   bac5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bac5c:	4543      	cmp	r3, r8
   bac5e:	f340 8089 	ble.w	bad74 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x268>
   bac62:	9b07      	ldr	r3, [sp, #28]
   bac64:	425b      	negs	r3, r3
   bac66:	9305      	str	r3, [sp, #20]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   bac68:	f04f 0900 	mov.w	r9, #0
   bac6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bac6e:	454b      	cmp	r3, r9
   bac70:	dd79      	ble.n	bad66 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x25a>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   bac72:	2400      	movs	r4, #0
   bac74:	9b06      	ldr	r3, [sp, #24]
   bac76:	42a3      	cmp	r3, r4
   bac78:	dd6e      	ble.n	bad58 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x24c>
   bac7a:	9e04      	ldr	r6, [sp, #16]
          float total = 0.f;
   bac7c:	eddf 9a4a 	vldr	s19, [pc, #296]	; bada8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   bac80:	f04f 0a00 	mov.w	sl, #0
   bac84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bac86:	4553      	cmp	r3, sl
   bac88:	dd3f      	ble.n	bad0a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1fe>
   bac8a:	9f05      	ldr	r7, [sp, #20]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   bac8c:	f04f 0b00 	mov.w	fp, #0
   bac90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bac92:	455b      	cmp	r3, fp
   bac94:	dd34      	ble.n	bad00 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1f4>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   bac96:	2300      	movs	r3, #0
   bac98:	9303      	str	r3, [sp, #12]
   bac9a:	9a03      	ldr	r2, [sp, #12]
   bac9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bac9e:	4293      	cmp	r3, r2
   baca0:	dd29      	ble.n	bacf6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1ea>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   baca2:	2f00      	cmp	r7, #0
   baca4:	db24      	blt.n	bacf0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   baca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   baca8:	42bb      	cmp	r3, r7
   bacaa:	dd21      	ble.n	bacf0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   bacac:	2e00      	cmp	r6, #0
   bacae:	db1f      	blt.n	bacf0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
   bacb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bacb2:	42b3      	cmp	r3, r6
   bacb4:	dd1c      	ble.n	bacf0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e4>
                  float input_value = input_data[Offset(
   bacb6:	9200      	str	r2, [sp, #0]
   bacb8:	463b      	mov	r3, r7
   bacba:	4632      	mov	r2, r6
   bacbc:	4629      	mov	r1, r5
   bacbe:	a817      	add	r0, sp, #92	; 0x5c
   bacc0:	f7fb fbf1 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   bacc4:	9b03      	ldr	r3, [sp, #12]
                  float input_value = input_data[Offset(
   bacc6:	9015      	str	r0, [sp, #84]	; 0x54
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   bacc8:	9300      	str	r3, [sp, #0]
   bacca:	4652      	mov	r2, sl
   baccc:	465b      	mov	r3, fp
   bacce:	4621      	mov	r1, r4
   bacd0:	a81c      	add	r0, sp, #112	; 0x70
   bacd2:	f7fb fbe8 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
   bacd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bacd8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   bacda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
   bacde:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
                  total += (input_value * filter_value);
   bace0:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
   bace4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   bace8:	edd0 7a00 	vldr	s15, [r0]
   bacec:	eee7 9a27 	vfma.f32	s19, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   bacf0:	9b03      	ldr	r3, [sp, #12]
   bacf2:	3301      	adds	r3, #1
   bacf4:	e7d0      	b.n	bac98 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x18c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   bacf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bacf8:	f10b 0b01 	add.w	fp, fp, #1
   bacfc:	441f      	add	r7, r3
   bacfe:	e7c7      	b.n	bac90 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x184>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   bad00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bad02:	f10a 0a01 	add.w	sl, sl, #1
   bad06:	441e      	add	r6, r3
   bad08:	e7bc      	b.n	bac84 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x178>
          if (bias_data) {
   bad0a:	9b40      	ldr	r3, [sp, #256]	; 0x100
   bad0c:	b30b      	cbz	r3, bad52 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x246>
            bias_value = bias_data[out_channel];
   bad0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   bad12:	ed93 8a00 	vldr	s16, [r3]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   bad16:	9400      	str	r4, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
   bad18:	ee38 8a29 	vadd.f32	s16, s16, s19
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   bad1c:	464b      	mov	r3, r9
   bad1e:	eeb4 8a68 	vcmp.f32	s16, s17
   bad22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad26:	bf48      	it	mi
   bad28:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   bad2c:	eeb4 8a49 	vcmp.f32	s16, s18
   bad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad34:	4642      	mov	r2, r8
   bad36:	4629      	mov	r1, r5
   bad38:	a826      	add	r0, sp, #152	; 0x98
   bad3a:	bfc8      	it	gt
   bad3c:	eeb0 8a49 	vmovgt.f32	s16, s18
   bad40:	f7fb fbb1 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bad44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bad46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bad4a:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   bad4e:	3401      	adds	r4, #1
   bad50:	e790      	b.n	bac74 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x168>
          float bias_value = 0.0f;
   bad52:	ed9f 8a15 	vldr	s16, [pc, #84]	; bada8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x29c>
   bad56:	e7de      	b.n	bad16 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x20a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   bad58:	9b05      	ldr	r3, [sp, #20]
   bad5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   bad5c:	4413      	add	r3, r2
   bad5e:	f109 0901 	add.w	r9, r9, #1
   bad62:	9305      	str	r3, [sp, #20]
   bad64:	e782      	b.n	bac6c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   bad66:	9b04      	ldr	r3, [sp, #16]
   bad68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bad6a:	4413      	add	r3, r2
   bad6c:	f108 0801 	add.w	r8, r8, #1
   bad70:	9304      	str	r3, [sp, #16]
   bad72:	e772      	b.n	bac5a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
   bad74:	3501      	adds	r5, #1
   bad76:	e767      	b.n	bac48 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x13c>
   bad78:	a82b      	add	r0, sp, #172	; 0xac
   bad7a:	f7fb fb22 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
   bad7e:	a826      	add	r0, sp, #152	; 0x98
   bad80:	f7fb fb1f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
   bad84:	a821      	add	r0, sp, #132	; 0x84
   bad86:	f7fb fb1c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
   bad8a:	a81c      	add	r0, sp, #112	; 0x70
   bad8c:	f7fb fb19 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   bad90:	a817      	add	r0, sp, #92	; 0x5c
   bad92:	f7fb fb16 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
   bad96:	b031      	add	sp, #196	; 0xc4
   bad98:	ecbd 8b04 	vpop	{d8-d9}
   bad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bada0:	7f7fffff 	.word	0x7f7fffff
   bada4:	ff7fffff 	.word	0xff7fffff
   bada8:	00000000 	.word	0x00000000

000badac <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   badac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badb0:	680a      	ldr	r2, [r1, #0]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   badb2:	6887      	ldr	r7, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badb4:	6896      	ldr	r6, [r2, #8]
   badb6:	4605      	mov	r5, r0
   badb8:	6850      	ldr	r0, [r2, #4]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   badba:	68d2      	ldr	r2, [r2, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badbc:	2338      	movs	r3, #56	; 0x38
   badbe:	fb03 f800 	mul.w	r8, r3, r0
  if (use_tensor) {
   badc2:	1c50      	adds	r0, r2, #1
  int filter_height = filter->dims->data[1];
  int output_width = output->dims->data[2];
  int output_height = output->dims->data[1];

  OpData data;
  if (input->type != kTfLiteFloat32) {
   badc4:	f817 0008 	ldrb.w	r0, [r7, r8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   badc8:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badcc:	fb03 7606 	mla	r6, r3, r6, r7
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badd0:	bf14      	ite	ne
   badd2:	fb03 7302 	mlane	r3, r3, r2, r7
  return nullptr;
   badd6:	2300      	moveq	r3, #0
  if (input->type != kTfLiteFloat32) {
   badd8:	2801      	cmp	r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   badda:	eb07 0b08 	add.w	fp, r7, r8
  return nullptr;
   badde:	9309      	str	r3, [sp, #36]	; 0x24
   bade0:	d028      	beq.n	bae34 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   bade2:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
   bade6:	2c01      	cmp	r4, #1
   bade8:	d00e      	beq.n	bae08 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x5c>
   badea:	4b42      	ldr	r3, [pc, #264]	; (baef4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x148>)
   badec:	9301      	str	r3, [sp, #4]
   badee:	2601      	movs	r6, #1
   badf0:	4b41      	ldr	r3, [pc, #260]	; (baef8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x14c>)
   badf2:	9300      	str	r3, [sp, #0]
   badf4:	e9cd 4602 	strd	r4, r6, [sp, #8]
   badf8:	4a40      	ldr	r2, [pc, #256]	; (baefc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
   badfa:	696c      	ldr	r4, [r5, #20]
   badfc:	4940      	ldr	r1, [pc, #256]	; (baf00 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x154>)
   badfe:	23dc      	movs	r3, #220	; 0xdc
   bae00:	4628      	mov	r0, r5
   bae02:	47a0      	blx	r4
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(
   bae04:	2401      	movs	r4, #1
   bae06:	e009      	b.n	bae1c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    const auto* affine_quantization =
   bae08:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   bae0a:	b963      	cbnz	r3, bae26 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   bae0c:	4b3d      	ldr	r3, [pc, #244]	; (baf04 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x158>)
   bae0e:	696e      	ldr	r6, [r5, #20]
   bae10:	9300      	str	r3, [sp, #0]
   bae12:	23e2      	movs	r3, #226	; 0xe2
    TF_LITE_ENSURE(context, affine_quantization->scale);
   bae14:	4a39      	ldr	r2, [pc, #228]	; (baefc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x150>)
   bae16:	493c      	ldr	r1, [pc, #240]	; (baf08 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x15c>)
   bae18:	4628      	mov	r0, r5
   bae1a:	47b0      	blx	r6
      context->ReportError(context, "Type %s (%d) not supported.",
                           TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   bae1c:	4620      	mov	r0, r4
   bae1e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   bae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   bae26:	681b      	ldr	r3, [r3, #0]
   bae28:	b923      	cbnz	r3, bae34 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
   bae2a:	4b38      	ldr	r3, [pc, #224]	; (baf0c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x160>)
   bae2c:	9300      	str	r3, [sp, #0]
   bae2e:	696e      	ldr	r6, [r5, #20]
   bae30:	23e3      	movs	r3, #227	; 0xe3
   bae32:	e7ef      	b.n	bae14 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bae34:	684b      	ldr	r3, [r1, #4]
  int filter_width = filter->dims->data[2];
   bae36:	68b4      	ldr	r4, [r6, #8]
   bae38:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
   bae3a:	694a      	ldr	r2, [r1, #20]
   bae3c:	f04f 0938 	mov.w	r9, #56	; 0x38
   bae40:	fb09 7903 	mla	r9, r9, r3, r7
  TF_LITE_ENSURE_STATUS(CalculateOpData(
   bae44:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  int input_width = input->dims->data[2];
   bae48:	f8db 3008 	ldr.w	r3, [fp, #8]
  int output_width = output->dims->data[2];
   bae4c:	f8d9 c008 	ldr.w	ip, [r9, #8]
  TF_LITE_ENSURE_STATUS(CalculateOpData(
   bae50:	e9cd 0a05 	strd	r0, sl, [sp, #20]
   bae54:	f8dc 0008 	ldr.w	r0, [ip, #8]
   bae58:	9004      	str	r0, [sp, #16]
   bae5a:	f8dc 000c 	ldr.w	r0, [ip, #12]
   bae5e:	9003      	str	r0, [sp, #12]
   bae60:	68a0      	ldr	r0, [r4, #8]
   bae62:	9002      	str	r0, [sp, #8]
   bae64:	68e0      	ldr	r0, [r4, #12]
   bae66:	9001      	str	r0, [sp, #4]
   bae68:	6898      	ldr	r0, [r3, #8]
   bae6a:	9000      	str	r0, [sp, #0]
   bae6c:	68db      	ldr	r3, [r3, #12]
   bae6e:	4628      	mov	r0, r5
   bae70:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
   bae74:	f7ff fbf8 	bl	ba668 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
   bae78:	4604      	mov	r4, r0
   bae7a:	2800      	cmp	r0, #0
   bae7c:	d1c2      	bne.n	bae04 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x58>
  switch (input->type) {  // Already know in/out types are same.
   bae7e:	f817 0008 	ldrb.w	r0, [r7, r8]
   bae82:	2803      	cmp	r0, #3
   bae84:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   bae88:	d01c      	beq.n	baec4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x118>
   bae8a:	2809      	cmp	r0, #9
   bae8c:	d00e      	beq.n	baeac <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   bae8e:	2801      	cmp	r0, #1
   bae90:	d125      	bne.n	baede <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x132>
      EvalFloat(context, node, params, &data, input, filter, bias, nullptr,
   bae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bae94:	9403      	str	r4, [sp, #12]
   bae96:	e9cd 6301 	strd	r6, r3, [sp, #4]
   bae9a:	e9cd 4904 	strd	r4, r9, [sp, #16]
   bae9e:	f8cd b000 	str.w	fp, [sp]
   baea2:	4653      	mov	r3, sl
   baea4:	4628      	mov	r0, r5
   baea6:	f7ff fe31 	bl	bab0c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
      break;
   baeaa:	e7b7      	b.n	bae1c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      EvalQuantizedPerChannel(context, node, params, &data, input, filter, bias,
   baeac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baeae:	f8cd b000 	str.w	fp, [sp]
   baeb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   baeb6:	e9cd 9403 	strd	r9, r4, [sp, #12]
   baeba:	4653      	mov	r3, sl
   baebc:	4628      	mov	r0, r5
   baebe:	f7ff fdc7 	bl	baa50 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>
      break;
   baec2:	e7ab      	b.n	bae1c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      EvalQuantized(context, node, params, &data, input, filter, bias, nullptr,
   baec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baec6:	9403      	str	r4, [sp, #12]
   baec8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   baecc:	e9cd 4904 	strd	r4, r9, [sp, #16]
   baed0:	f8cd b000 	str.w	fp, [sp]
   baed4:	4653      	mov	r3, sl
   baed6:	4628      	mov	r0, r5
   baed8:	f7ff fc7c 	bl	ba7d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
      break;
   baedc:	e79e      	b.n	bae1c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      context->ReportError(context, "Type %s (%d) not supported.",
   baede:	696c      	ldr	r4, [r5, #20]
   baee0:	f7f9 fe50 	bl	b4b84 <TfLiteTypeGetName>
   baee4:	f817 3008 	ldrb.w	r3, [r7, r8]
   baee8:	4909      	ldr	r1, [pc, #36]	; (baf10 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x164>)
   baeea:	4602      	mov	r2, r0
   baeec:	4628      	mov	r0, r5
   baeee:	47a0      	blx	r4
      return kTfLiteError;
   baef0:	e788      	b.n	bae04 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x58>
   baef2:	bf00      	nop
   baef4:	000c7116 	.word	0x000c7116
   baef8:	000c7149 	.word	0x000c7149
   baefc:	000c88d5 	.word	0x000c88d5
   baf00:	000c70fc 	.word	0x000c70fc
   baf04:	000c7163 	.word	0x000c7163
   baf08:	000c7067 	.word	0x000c7067
   baf0c:	000c7177 	.word	0x000c7177
   baf10:	000c871e 	.word	0x000c871e

000baf14 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

TfLiteRegistration* Register_CONV_2D() {
  static TfLiteRegistration r = {conv::Init, conv::Free, conv::Prepare,
                                 conv::Eval};
  return &r;
}
   baf14:	4800      	ldr	r0, [pc, #0]	; (baf18 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x4>)
   baf16:	4770      	bx	lr
   baf18:	2003c210 	.word	0x2003c210

000baf1c <_ZN6tflite3ops5micro5split7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace micro {
namespace split {

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   baf1c:	2000      	movs	r0, #0
   baf1e:	4770      	bx	lr

000baf20 <_ZN6tflite3ops5micro14Register_SPLITEv>:
}  // namespace split

TfLiteRegistration* Register_SPLIT() {
  static TfLiteRegistration r = {nullptr, nullptr, split::Prepare, split::Eval};
  return &r;
}
   baf20:	4800      	ldr	r0, [pc, #0]	; (baf24 <_ZN6tflite3ops5micro14Register_SPLITEv+0x4>)
   baf22:	4770      	bx	lr
   baf24:	2003c230 	.word	0x2003c230

000baf28 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   baf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   baf2c:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   baf2e:	6896      	ldr	r6, [r2, #8]
   baf30:	6825      	ldr	r5, [r4, #0]
  const int split_dimensions = input_dims->size;
   baf32:	f8d6 e000 	ldr.w	lr, [r6]
   baf36:	9500      	str	r5, [sp, #0]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   baf38:	6865      	ldr	r5, [r4, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   baf3a:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   baf3c:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   baf3e:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   baf40:	f04f 0738 	mov.w	r7, #56	; 0x38
   baf44:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   baf48:	bfb8      	it	lt
   baf4a:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, split_dimensions);
   baf4c:	4573      	cmp	r3, lr
  const TfLiteIntArray* output_dims = output0->dims;
   baf4e:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   baf50:	db01      	blt.n	baf56 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   baf52:	f009 fca3 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   baf56:	6825      	ldr	r5, [r4, #0]
   baf58:	4575      	cmp	r5, lr
   baf5a:	d1fa      	bne.n	baf52 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   baf5c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   baf60:	9f00      	ldr	r7, [sp, #0]
   baf62:	6865      	ldr	r5, [r4, #4]
   baf64:	437d      	muls	r5, r7
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   baf66:	eb06 0783 	add.w	r7, r6, r3, lsl #2
   baf6a:	687f      	ldr	r7, [r7, #4]
   baf6c:	42bd      	cmp	r5, r7
   baf6e:	d1f0      	bne.n	baf52 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   baf70:	f106 0c04 	add.w	ip, r6, #4
  for (int i = 0; i < axis; ++i) {
   baf74:	f04f 0800 	mov.w	r8, #0
   baf78:	46e3      	mov	fp, ip
  int64_t outer_size = 1;
   baf7a:	2501      	movs	r5, #1
   baf7c:	4646      	mov	r6, r8
  for (int i = 0; i < axis; ++i) {
   baf7e:	4598      	cmp	r8, r3
   baf80:	da0c      	bge.n	baf9c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   baf82:	f85b ab04 	ldr.w	sl, [fp], #4
   baf86:	ea4f 77ea 	mov.w	r7, sl, asr #31
   baf8a:	436f      	muls	r7, r5
   baf8c:	fb0a 7706 	mla	r7, sl, r6, r7
   baf90:	fba5 560a 	umull	r5, r6, r5, sl
   baf94:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   baf96:	f108 0801 	add.w	r8, r8, #1
   baf9a:	e7f0      	b.n	baf7e <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   baf9c:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   baf9e:	2701      	movs	r7, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bafa0:	4573      	cmp	r3, lr
   bafa2:	d005      	beq.n	bafb0 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x88>
    base_inner_size *= input_dims->data[i];
   bafa4:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bafa8:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bafaa:	fba7 7801 	umull	r7, r8, r7, r1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bafae:	e7f7      	b.n	bafa0 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x78>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bafb0:	2300      	movs	r3, #0
   bafb2:	f8d2 8004 	ldr.w	r8, [r2, #4]
   bafb6:	469e      	mov	lr, r3
  for (int k = 0; k < outer_size; ++k) {
   bafb8:	42ab      	cmp	r3, r5
   bafba:	eb7e 0206 	sbcs.w	r2, lr, r6
   bafbe:	da2e      	bge.n	bb01e <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
    for (int i = 0; i < output_count; ++i) {
   bafc0:	f04f 0c00 	mov.w	ip, #0
   bafc4:	9a00      	ldr	r2, [sp, #0]
   bafc6:	4594      	cmp	ip, r2
   bafc8:	da25      	bge.n	bb016 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bafca:	9a01      	ldr	r2, [sp, #4]
   bafcc:	6881      	ldr	r1, [r0, #8]
   bafce:	6852      	ldr	r2, [r2, #4]
   bafd0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   bafd4:	f04f 0938 	mov.w	r9, #56	; 0x38
   bafd8:	6852      	ldr	r2, [r2, #4]
   bafda:	fb09 1a02 	mla	sl, r9, r2, r1
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bafde:	f1ba 0f00 	cmp.w	sl, #0
   bafe2:	d001      	beq.n	bafe8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
   bafe4:	f8da a004 	ldr.w	sl, [sl, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bafe8:	6862      	ldr	r2, [r4, #4]
   bafea:	437a      	muls	r2, r7
      T* output_ptr = output_data + k * copy_size;
   bafec:	fb02 fb03 	mul.w	fp, r2, r3
   baff0:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
   baff4:	46c1      	mov	r9, r8
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   baff6:	f04f 0b00 	mov.w	fp, #0
   baffa:	4593      	cmp	fp, r2
   baffc:	da06      	bge.n	bb00c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   baffe:	ecf9 7a01 	vldmia	r9!, {s15}
   bb002:	f10b 0b01 	add.w	fp, fp, #1
   bb006:	ecea 7a01 	vstmia	sl!, {s15}
   bb00a:	e7f6      	b.n	baffa <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd2>
      input_ptr += copy_size;
   bb00c:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   bb010:	f10c 0c01 	add.w	ip, ip, #1
   bb014:	e7d6      	b.n	bafc4 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9c>
  for (int k = 0; k < outer_size; ++k) {
   bb016:	3301      	adds	r3, #1
   bb018:	f14e 0e00 	adc.w	lr, lr, #0
   bb01c:	e7cc      	b.n	bafb8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x90>
}
   bb01e:	2000      	movs	r0, #0
   bb020:	b003      	add	sp, #12
   bb022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb026 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb02a:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb02c:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb02e:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb030:	f8d6 8000 	ldr.w	r8, [r6]
   bb034:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb038:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb03a:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb03c:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb03e:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb042:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb046:	bfb8      	it	lt
   bb048:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb04a:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bb04c:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb04e:	db01      	blt.n	bb054 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb050:	f009 fc24 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb054:	6825      	ldr	r5, [r4, #0]
   bb056:	4545      	cmp	r5, r8
   bb058:	d1fa      	bne.n	bb050 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb05a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb05e:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb062:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb064:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb066:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb06a:	42bd      	cmp	r5, r7
   bb06c:	d1f0      	bne.n	bb050 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb06e:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb072:	f04f 0c00 	mov.w	ip, #0
   bb076:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   bb078:	2501      	movs	r5, #1
   bb07a:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   bb07c:	459c      	cmp	ip, r3
   bb07e:	da0c      	bge.n	bb09a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb080:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb084:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb088:	436f      	muls	r7, r5
   bb08a:	fb09 7706 	mla	r7, r9, r6, r7
   bb08e:	fba5 5609 	umull	r5, r6, r5, r9
   bb092:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb094:	f10c 0c01 	add.w	ip, ip, #1
   bb098:	e7f0      	b.n	bb07c <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb09a:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb09c:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb0a0:	4543      	cmp	r3, r8
   bb0a2:	d005      	beq.n	bb0b0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb0a4:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb0a8:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb0aa:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb0ae:	e7f7      	b.n	bb0a0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb0b0:	2300      	movs	r3, #0
   bb0b2:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb0b6:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb0b8:	42ab      	cmp	r3, r5
   bb0ba:	eb78 0206 	sbcs.w	r2, r8, r6
   bb0be:	da28      	bge.n	bb112 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xec>
    for (int i = 0; i < output_count; ++i) {
   bb0c0:	f04f 0e00 	mov.w	lr, #0
   bb0c4:	45de      	cmp	lr, fp
   bb0c6:	da20      	bge.n	bb10a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb0c8:	9a01      	ldr	r2, [sp, #4]
   bb0ca:	6852      	ldr	r2, [r2, #4]
   bb0cc:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb0d0:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb0d4:	6857      	ldr	r7, [r2, #4]
   bb0d6:	6882      	ldr	r2, [r0, #8]
   bb0d8:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb0dc:	b102      	cbz	r2, bb0e0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb0de:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb0e0:	6867      	ldr	r7, [r4, #4]
   bb0e2:	fb0c f707 	mul.w	r7, ip, r7
   bb0e6:	fb07 2203 	mla	r2, r7, r3, r2
   bb0ea:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb0ec:	f04f 0a00 	mov.w	sl, #0
   bb0f0:	45ba      	cmp	sl, r7
   bb0f2:	da06      	bge.n	bb102 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xdc>
   bb0f4:	f819 200a 	ldrb.w	r2, [r9, sl]
   bb0f8:	f801 2b01 	strb.w	r2, [r1], #1
   bb0fc:	f10a 0a01 	add.w	sl, sl, #1
   bb100:	e7f6      	b.n	bb0f0 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xca>
      input_ptr += copy_size;
   bb102:	44b9      	add	r9, r7
    for (int i = 0; i < output_count; ++i) {
   bb104:	f10e 0e01 	add.w	lr, lr, #1
   bb108:	e7dc      	b.n	bb0c4 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb10a:	3301      	adds	r3, #1
   bb10c:	f148 0800 	adc.w	r8, r8, #0
   bb110:	e7d2      	b.n	bb0b8 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb112:	2000      	movs	r0, #0
   bb114:	b003      	add	sp, #12
   bb116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb11a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb11a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb11e:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb120:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb122:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb124:	f8d6 8000 	ldr.w	r8, [r6]
   bb128:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb12c:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb12e:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb130:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb132:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb136:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb13a:	bfb8      	it	lt
   bb13c:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb13e:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bb140:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb142:	db01      	blt.n	bb148 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb144:	f009 fbaa 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb148:	6825      	ldr	r5, [r4, #0]
   bb14a:	4545      	cmp	r5, r8
   bb14c:	d1fa      	bne.n	bb144 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb14e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb152:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb156:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb158:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb15a:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb15e:	42bd      	cmp	r5, r7
   bb160:	d1f0      	bne.n	bb144 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb162:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb166:	f04f 0c00 	mov.w	ip, #0
   bb16a:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   bb16c:	2501      	movs	r5, #1
   bb16e:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   bb170:	459c      	cmp	ip, r3
   bb172:	da0c      	bge.n	bb18e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb174:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb178:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb17c:	436f      	muls	r7, r5
   bb17e:	fb09 7706 	mla	r7, r9, r6, r7
   bb182:	fba5 5609 	umull	r5, r6, r5, r9
   bb186:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb188:	f10c 0c01 	add.w	ip, ip, #1
   bb18c:	e7f0      	b.n	bb170 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb18e:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb190:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb194:	4543      	cmp	r3, r8
   bb196:	d005      	beq.n	bb1a4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb198:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb19c:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb19e:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb1a2:	e7f7      	b.n	bb194 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb1a4:	2300      	movs	r3, #0
   bb1a6:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb1aa:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb1ac:	42ab      	cmp	r3, r5
   bb1ae:	eb78 0206 	sbcs.w	r2, r8, r6
   bb1b2:	da28      	bge.n	bb206 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xec>
    for (int i = 0; i < output_count; ++i) {
   bb1b4:	f04f 0e00 	mov.w	lr, #0
   bb1b8:	45de      	cmp	lr, fp
   bb1ba:	da20      	bge.n	bb1fe <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb1bc:	9a01      	ldr	r2, [sp, #4]
   bb1be:	6852      	ldr	r2, [r2, #4]
   bb1c0:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb1c4:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb1c8:	6857      	ldr	r7, [r2, #4]
   bb1ca:	6882      	ldr	r2, [r0, #8]
   bb1cc:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb1d0:	b102      	cbz	r2, bb1d4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb1d2:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb1d4:	6867      	ldr	r7, [r4, #4]
   bb1d6:	fb0c f707 	mul.w	r7, ip, r7
   bb1da:	fb07 2203 	mla	r2, r7, r3, r2
   bb1de:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb1e0:	f04f 0a00 	mov.w	sl, #0
   bb1e4:	45ba      	cmp	sl, r7
   bb1e6:	da06      	bge.n	bb1f6 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xdc>
   bb1e8:	f919 200a 	ldrsb.w	r2, [r9, sl]
   bb1ec:	f801 2b01 	strb.w	r2, [r1], #1
   bb1f0:	f10a 0a01 	add.w	sl, sl, #1
   bb1f4:	e7f6      	b.n	bb1e4 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xca>
      input_ptr += copy_size;
   bb1f6:	44b9      	add	r9, r7
    for (int i = 0; i < output_count; ++i) {
   bb1f8:	f10e 0e01 	add.w	lr, lr, #1
   bb1fc:	e7dc      	b.n	bb1b8 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb1fe:	3301      	adds	r3, #1
   bb200:	f148 0800 	adc.w	r8, r8, #0
   bb204:	e7d2      	b.n	bb1ac <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb206:	2000      	movs	r0, #0
   bb208:	b003      	add	sp, #12
   bb20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb20e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb212:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb214:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb216:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb218:	f8d6 8000 	ldr.w	r8, [r6]
   bb21c:	f8d4 b000 	ldr.w	fp, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb220:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb222:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb224:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb226:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb22a:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb22e:	bfb8      	it	lt
   bb230:	4443      	addlt	r3, r8
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb232:	4543      	cmp	r3, r8
  const TfLiteIntArray* output_dims = output0->dims;
   bb234:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb236:	db01      	blt.n	bb23c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb238:	f009 fb30 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb23c:	6825      	ldr	r5, [r4, #0]
   bb23e:	4545      	cmp	r5, r8
   bb240:	d1fa      	bne.n	bb238 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb242:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb246:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb24a:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb24c:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb24e:	fb05 f50b 	mul.w	r5, r5, fp
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb252:	42bd      	cmp	r5, r7
   bb254:	d1f0      	bne.n	bb238 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb256:	f106 0e04 	add.w	lr, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb25a:	f04f 0c00 	mov.w	ip, #0
   bb25e:	46f2      	mov	sl, lr
  int64_t outer_size = 1;
   bb260:	2501      	movs	r5, #1
   bb262:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   bb264:	459c      	cmp	ip, r3
   bb266:	da0c      	bge.n	bb282 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb268:	f85a 9b04 	ldr.w	r9, [sl], #4
   bb26c:	ea4f 77e9 	mov.w	r7, r9, asr #31
   bb270:	436f      	muls	r7, r5
   bb272:	fb09 7706 	mla	r7, r9, r6, r7
   bb276:	fba5 5609 	umull	r5, r6, r5, r9
   bb27a:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb27c:	f10c 0c01 	add.w	ip, ip, #1
   bb280:	e7f0      	b.n	bb264 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb282:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb284:	f04f 0c01 	mov.w	ip, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb288:	4543      	cmp	r3, r8
   bb28a:	d005      	beq.n	bb298 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
    base_inner_size *= input_dims->data[i];
   bb28c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb290:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb292:	fbac c707 	umull	ip, r7, ip, r7
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb296:	e7f7      	b.n	bb288 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb298:	2300      	movs	r3, #0
   bb29a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   bb29e:	4698      	mov	r8, r3
  for (int k = 0; k < outer_size; ++k) {
   bb2a0:	42ab      	cmp	r3, r5
   bb2a2:	eb78 0206 	sbcs.w	r2, r8, r6
   bb2a6:	da2b      	bge.n	bb300 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   bb2a8:	f04f 0e00 	mov.w	lr, #0
   bb2ac:	45de      	cmp	lr, fp
   bb2ae:	da23      	bge.n	bb2f8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb2b0:	9a01      	ldr	r2, [sp, #4]
   bb2b2:	6852      	ldr	r2, [r2, #4]
   bb2b4:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   bb2b8:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb2bc:	6857      	ldr	r7, [r2, #4]
   bb2be:	6882      	ldr	r2, [r0, #8]
   bb2c0:	fb0a 2207 	mla	r2, sl, r7, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb2c4:	b102      	cbz	r2, bb2c8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xba>
   bb2c6:	6852      	ldr	r2, [r2, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb2c8:	6867      	ldr	r7, [r4, #4]
   bb2ca:	fb0c f707 	mul.w	r7, ip, r7
      T* output_ptr = output_data + k * copy_size;
   bb2ce:	fb07 fa03 	mul.w	sl, r7, r3
   bb2d2:	eb02 024a 	add.w	r2, r2, sl, lsl #1
   bb2d6:	4611      	mov	r1, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb2d8:	f04f 0a00 	mov.w	sl, #0
   bb2dc:	45ba      	cmp	sl, r7
   bb2de:	da06      	bge.n	bb2ee <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe0>
   bb2e0:	f939 201a 	ldrsh.w	r2, [r9, sl, lsl #1]
   bb2e4:	f821 2b02 	strh.w	r2, [r1], #2
   bb2e8:	f10a 0a01 	add.w	sl, sl, #1
   bb2ec:	e7f6      	b.n	bb2dc <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
      input_ptr += copy_size;
   bb2ee:	eb09 0947 	add.w	r9, r9, r7, lsl #1
    for (int i = 0; i < output_count; ++i) {
   bb2f2:	f10e 0e01 	add.w	lr, lr, #1
   bb2f6:	e7d9      	b.n	bb2ac <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
  for (int k = 0; k < outer_size; ++k) {
   bb2f8:	3301      	adds	r3, #1
   bb2fa:	f148 0800 	adc.w	r8, r8, #0
   bb2fe:	e7cf      	b.n	bb2a0 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x92>
}
   bb300:	2000      	movs	r0, #0
   bb302:	b003      	add	sp, #12
   bb304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb308 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb30c:	684c      	ldr	r4, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   bb30e:	6896      	ldr	r6, [r2, #8]
  const TfLiteTensor* output0 = &context->tensors[node->outputs->data[0]];
   bb310:	6865      	ldr	r5, [r4, #4]
  const int split_dimensions = input_dims->size;
   bb312:	f8d6 e000 	ldr.w	lr, [r6]
   bb316:	f8d4 9000 	ldr.w	r9, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   bb31a:	6884      	ldr	r4, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   bb31c:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb31e:	2b00      	cmp	r3, #0
  const TfLiteIntArray* output_dims = output0->dims;
   bb320:	f04f 0738 	mov.w	r7, #56	; 0x38
   bb324:	fb07 4405 	mla	r4, r7, r5, r4
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   bb328:	bfb8      	it	lt
   bb32a:	4473      	addlt	r3, lr
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb32c:	4573      	cmp	r3, lr
  const TfLiteIntArray* output_dims = output0->dims;
   bb32e:	68a4      	ldr	r4, [r4, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   bb330:	db01      	blt.n	bb336 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
   bb332:	f009 fab3 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   bb336:	6825      	ldr	r5, [r4, #0]
   bb338:	4575      	cmp	r5, lr
   bb33a:	d1fa      	bne.n	bb332 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb33c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb340:	eb06 0783 	add.w	r7, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   bb344:	6865      	ldr	r5, [r4, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb346:	687f      	ldr	r7, [r7, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   bb348:	fb05 f509 	mul.w	r5, r5, r9
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   bb34c:	42bd      	cmp	r5, r7
   bb34e:	d1f0      	bne.n	bb332 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   bb350:	f106 0c04 	add.w	ip, r6, #4
  for (int i = 0; i < axis; ++i) {
   bb354:	f04f 0800 	mov.w	r8, #0
   bb358:	46e3      	mov	fp, ip
  int64_t outer_size = 1;
   bb35a:	2501      	movs	r5, #1
   bb35c:	4646      	mov	r6, r8
  for (int i = 0; i < axis; ++i) {
   bb35e:	4598      	cmp	r8, r3
   bb360:	da0c      	bge.n	bb37c <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   bb362:	f85b ab04 	ldr.w	sl, [fp], #4
   bb366:	ea4f 77ea 	mov.w	r7, sl, asr #31
   bb36a:	436f      	muls	r7, r5
   bb36c:	fb0a 7706 	mla	r7, sl, r6, r7
   bb370:	fba5 560a 	umull	r5, r6, r5, sl
   bb374:	443e      	add	r6, r7
  for (int i = 0; i < axis; ++i) {
   bb376:	f108 0801 	add.w	r8, r8, #1
   bb37a:	e7f0      	b.n	bb35e <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb37c:	3301      	adds	r3, #1
  int64_t base_inner_size = 1;
   bb37e:	2701      	movs	r7, #1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb380:	4573      	cmp	r3, lr
   bb382:	d005      	beq.n	bb390 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x88>
    base_inner_size *= input_dims->data[i];
   bb384:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb388:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   bb38a:	fba7 7801 	umull	r7, r8, r7, r1
  for (int i = axis + 1; i < split_dimensions; ++i) {
   bb38e:	e7f7      	b.n	bb380 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x78>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb390:	2300      	movs	r3, #0
   bb392:	f8d2 8004 	ldr.w	r8, [r2, #4]
   bb396:	469e      	mov	lr, r3
  for (int k = 0; k < outer_size; ++k) {
   bb398:	42ab      	cmp	r3, r5
   bb39a:	eb7e 0206 	sbcs.w	r2, lr, r6
   bb39e:	da2c      	bge.n	bb3fa <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   bb3a0:	f04f 0c00 	mov.w	ip, #0
   bb3a4:	45cc      	cmp	ip, r9
   bb3a6:	da24      	bge.n	bb3f2 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      TfLiteTensor* t = &context->tensors[node->outputs->data[i]];
   bb3a8:	9a01      	ldr	r2, [sp, #4]
   bb3aa:	6881      	ldr	r1, [r0, #8]
   bb3ac:	6852      	ldr	r2, [r2, #4]
   bb3ae:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   bb3b2:	f04f 0a38 	mov.w	sl, #56	; 0x38
   bb3b6:	6852      	ldr	r2, [r2, #4]
   bb3b8:	fb0a 1a02 	mla	sl, sl, r2, r1
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb3bc:	f1ba 0f00 	cmp.w	sl, #0
   bb3c0:	d001      	beq.n	bb3c6 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xbe>
   bb3c2:	f8da a004 	ldr.w	sl, [sl, #4]
      const int copy_size = output_dims->data[axis] * base_inner_size;
   bb3c6:	6862      	ldr	r2, [r4, #4]
   bb3c8:	437a      	muls	r2, r7
      T* output_ptr = output_data + k * copy_size;
   bb3ca:	fb02 fb03 	mul.w	fp, r2, r3
   bb3ce:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   bb3d2:	f04f 0b00 	mov.w	fp, #0
   bb3d6:	4593      	cmp	fp, r2
   bb3d8:	da06      	bge.n	bb3e8 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe0>
   bb3da:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
   bb3de:	f84a 1b04 	str.w	r1, [sl], #4
   bb3e2:	f10b 0b01 	add.w	fp, fp, #1
   bb3e6:	e7f6      	b.n	bb3d6 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
      input_ptr += copy_size;
   bb3e8:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   bb3ec:	f10c 0c01 	add.w	ip, ip, #1
   bb3f0:	e7d8      	b.n	bb3a4 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9c>
  for (int k = 0; k < outer_size; ++k) {
   bb3f2:	3301      	adds	r3, #1
   bb3f4:	f14e 0e00 	adc.w	lr, lr, #0
   bb3f8:	e7ce      	b.n	bb398 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x90>
}
   bb3fa:	2000      	movs	r0, #0
   bb3fc:	b003      	add	sp, #12
   bb3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000bb404 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bb404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb406:	680e      	ldr	r6, [r1, #0]
   bb408:	f8d0 c008 	ldr.w	ip, [r0, #8]
   bb40c:	6873      	ldr	r3, [r6, #4]
   bb40e:	2238      	movs	r2, #56	; 0x38
   bb410:	fb02 c303 	mla	r3, r2, r3, ip
   bb414:	4605      	mov	r5, r0
  return tensor->allocation_type == kTfLiteMmapRo;
   bb416:	7d1c      	ldrb	r4, [r3, #20]
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
   bb418:	2c01      	cmp	r4, #1
   bb41a:	d006      	beq.n	bb42a <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x26>
   bb41c:	6943      	ldr	r3, [r0, #20]
   bb41e:	4927      	ldr	r1, [pc, #156]	; (bb4bc <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
   bb420:	4798      	blx	r3
   bb422:	2401      	movs	r4, #1
}
   bb424:	4620      	mov	r0, r4
   bb426:	b003      	add	sp, #12
   bb428:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb42a:	68b6      	ldr	r6, [r6, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
   bb42c:	685b      	ldr	r3, [r3, #4]
   bb42e:	4356      	muls	r6, r2
   bb430:	eb0c 0206 	add.w	r2, ip, r6
   bb434:	681b      	ldr	r3, [r3, #0]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   bb436:	6897      	ldr	r7, [r2, #8]
  if (axis_value < 0) {
   bb438:	2b00      	cmp	r3, #0
   bb43a:	683f      	ldr	r7, [r7, #0]
   bb43c:	da09      	bge.n	bb452 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
  TF_LITE_ENSURE(context, axis_value >= 0);
   bb43e:	19db      	adds	r3, r3, r7
   bb440:	d507      	bpl.n	bb452 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
   bb442:	4b1f      	ldr	r3, [pc, #124]	; (bb4c0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   bb444:	9300      	str	r3, [sp, #0]
   bb446:	6945      	ldr	r5, [r0, #20]
   bb448:	4a1e      	ldr	r2, [pc, #120]	; (bb4c4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   bb44a:	491f      	ldr	r1, [pc, #124]	; (bb4c8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   bb44c:	2357      	movs	r3, #87	; 0x57
   bb44e:	47a8      	blx	r5
   bb450:	e7e8      	b.n	bb424 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
   bb452:	429f      	cmp	r7, r3
   bb454:	dc08      	bgt.n	bb468 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x64>
   bb456:	4b1d      	ldr	r3, [pc, #116]	; (bb4cc <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   bb458:	9300      	str	r3, [sp, #0]
   bb45a:	696e      	ldr	r6, [r5, #20]
   bb45c:	4a19      	ldr	r2, [pc, #100]	; (bb4c4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   bb45e:	491a      	ldr	r1, [pc, #104]	; (bb4c8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   bb460:	2358      	movs	r3, #88	; 0x58
   bb462:	4628      	mov	r0, r5
   bb464:	47b0      	blx	r6
   bb466:	e7dd      	b.n	bb424 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  switch (input->type) {
   bb468:	f81c 0006 	ldrb.w	r0, [ip, r6]
   bb46c:	1e46      	subs	r6, r0, #1
   bb46e:	2e08      	cmp	r6, #8
   bb470:	d81b      	bhi.n	bb4aa <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
   bb472:	e8df f006 	tbb	[pc, r6]
   bb476:	1605      	.short	0x1605
   bb478:	1a1a1a0a 	.word	0x1a1a1a0a
   bb47c:	1a12      	.short	0x1a12
   bb47e:	0e          	.byte	0x0e
   bb47f:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
   bb480:	4628      	mov	r0, r5
   bb482:	f7ff fd51 	bl	baf28 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
   bb486:	4604      	mov	r4, r0
   bb488:	e7cc      	b.n	bb424 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
   bb48a:	4628      	mov	r0, r5
   bb48c:	f7ff fdcb 	bl	bb026 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb490:	e7f9      	b.n	bb486 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int8_t>(context, node, input, axis_value);
   bb492:	4628      	mov	r0, r5
   bb494:	f7ff fe41 	bl	bb11a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb498:	e7f5      	b.n	bb486 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int16_t>(context, node, input, axis_value);
   bb49a:	4628      	mov	r0, r5
   bb49c:	f7ff feb7 	bl	bb20e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb4a0:	e7f1      	b.n	bb486 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      return SplitImpl<int32_t>(context, node, input, axis_value);
   bb4a2:	4628      	mov	r0, r5
   bb4a4:	f7ff ff30 	bl	bb308 <_ZN6tflite3ops5micro5split9SplitImplIlEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   bb4a8:	e7ed      	b.n	bb486 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x82>
      context->ReportError(context, "Type %s currently not supported.",
   bb4aa:	696e      	ldr	r6, [r5, #20]
   bb4ac:	f7f9 fb6a 	bl	b4b84 <TfLiteTypeGetName>
   bb4b0:	4907      	ldr	r1, [pc, #28]	; (bb4d0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   bb4b2:	4602      	mov	r2, r0
   bb4b4:	4628      	mov	r0, r5
   bb4b6:	47b0      	blx	r6
      return kTfLiteError;
   bb4b8:	e7b4      	b.n	bb424 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x20>
   bb4ba:	bf00      	nop
   bb4bc:	000c897b 	.word	0x000c897b
   bb4c0:	000c8a80 	.word	0x000c8a80
   bb4c4:	000c8a11 	.word	0x000c8a11
   bb4c8:	000c7067 	.word	0x000c7067
   bb4cc:	000c8a90 	.word	0x000c8a90
   bb4d0:	000c8ab2 	.word	0x000c8ab2

000bb4d4 <_ZN6tflite3ops5micro14Register_EQUALEv>:

TfLiteRegistration* Register_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::EqualEval};
  return &r;
}
   bb4d4:	4800      	ldr	r0, [pc, #0]	; (bb4d8 <_ZN6tflite3ops5micro14Register_EQUALEv+0x4>)
   bb4d6:	4770      	bx	lr
   bb4d8:	2003c270 	.word	0x2003c270

000bb4dc <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:

TfLiteRegistration* Register_NOT_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::NotEqualEval};
  return &r;
}
   bb4dc:	4800      	ldr	r0, [pc, #0]	; (bb4e0 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x4>)
   bb4de:	4770      	bx	lr
   bb4e0:	2003c2b0 	.word	0x2003c2b0

000bb4e4 <_ZN6tflite3ops5micro16Register_GREATEREv>:

TfLiteRegistration* Register_GREATER() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::GreaterEval};
  return &r;
}
   bb4e4:	4800      	ldr	r0, [pc, #0]	; (bb4e8 <_ZN6tflite3ops5micro16Register_GREATEREv+0x4>)
   bb4e6:	4770      	bx	lr
   bb4e8:	2003c290 	.word	0x2003c290

000bb4ec <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:

TfLiteRegistration* Register_GREATER_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::GreaterEqualEval};
  return &r;
}
   bb4ec:	4800      	ldr	r0, [pc, #0]	; (bb4f0 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x4>)
   bb4ee:	4770      	bx	lr
   bb4f0:	2003c2f0 	.word	0x2003c2f0

000bb4f4 <_ZN6tflite3ops5micro13Register_LESSEv>:

TfLiteRegistration* Register_LESS() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::LessEval};
  return &r;
}
   bb4f4:	4800      	ldr	r0, [pc, #0]	; (bb4f8 <_ZN6tflite3ops5micro13Register_LESSEv+0x4>)
   bb4f6:	4770      	bx	lr
   bb4f8:	2003c250 	.word	0x2003c250

000bb4fc <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:

TfLiteRegistration* Register_LESS_EQUAL() {
  static TfLiteRegistration r = {nullptr, nullptr, nullptr,
                                 comparisons::LessEqualEval};
  return &r;
}
   bb4fc:	4800      	ldr	r0, [pc, #0]	; (bb500 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x4>)
   bb4fe:	4770      	bx	lr
   bb500:	2003c2d0 	.word	0x2003c2d0

000bb504 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
                                          input2_shape, input2_data,
                                          output_shape, output_data);
}

template <typename T, ComparisonFn<int32> F>
inline void BroadcastComparison4DSlowWithScaling(
   bb504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb508:	ed2d 8b04 	vpush	{d8-d9}
   bb50c:	461e      	mov	r6, r3
    const ComparisonParams& op_params,
    const RuntimeShape& unextended_input1_shape, const T* input1_data,
    const RuntimeShape& unextended_input2_shape, const T* input2_data,
    const RuntimeShape& unextended_output_shape, bool* output_data) {
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb50e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bb510:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb512:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bb514:	9204      	str	r2, [sp, #16]
   bb516:	4604      	mov	r4, r0
   bb518:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bb51a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb51c:	dd01      	ble.n	bb522 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bb51e:	f009 f9bd 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb522:	6833      	ldr	r3, [r6, #0]
   bb524:	2b04      	cmp	r3, #4
   bb526:	dcfa      	bgt.n	bb51e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb528:	6813      	ldr	r3, [r2, #0]
   bb52a:	2b04      	cmp	r3, #4
   bb52c:	dcf7      	bgt.n	bb51e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
    return RuntimeShape(new_shape_size, shape, 1);
   bb52e:	2301      	movs	r3, #1
   bb530:	2104      	movs	r1, #4
   bb532:	a807      	add	r0, sp, #28
   bb534:	f7fa ff8a 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb538:	ab14      	add	r3, sp, #80	; 0x50
   bb53a:	aa0c      	add	r2, sp, #48	; 0x30
   bb53c:	4631      	mov	r1, r6
   bb53e:	4628      	mov	r0, r5
   bb540:	f7fb fa8c 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      unextended_input2_shape, &desc1, &desc2);

  int left_shift = op_params.left_shift;
  int32 input1_offset = op_params.input1_offset;
   bb544:	e9d4 a300 	ldrd	sl, r3, [r4]
   bb548:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb54a:	68a3      	ldr	r3, [r4, #8]
  int input1_shift = op_params.input1_shift;
  int32 input2_offset = op_params.input2_offset;
  int32 input2_multiplier = op_params.input2_multiplier;
  int input2_shift = op_params.input2_shift;
   bb54c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb550:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bb554:	68e3      	ldr	r3, [r4, #12]
   bb556:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bb55a:	6923      	ldr	r3, [r4, #16]
   bb55c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bb55e:	6963      	ldr	r3, [r4, #20]
   bb560:	ee09 3a10 	vmov	s18, r3

  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb564:	2400      	movs	r4, #0
   bb566:	2100      	movs	r1, #0
   bb568:	a807      	add	r0, sp, #28
   bb56a:	f7fa ff35 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb56e:	42a0      	cmp	r0, r4
   bb570:	dd5c      	ble.n	bb62c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb572:	2500      	movs	r5, #0
   bb574:	af07      	add	r7, sp, #28
   bb576:	2101      	movs	r1, #1
   bb578:	4638      	mov	r0, r7
   bb57a:	f7fa ff2d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb57e:	42a8      	cmp	r0, r5
   bb580:	dd52      	ble.n	bb628 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb582:	2600      	movs	r6, #0
   bb584:	2102      	movs	r1, #2
   bb586:	4638      	mov	r0, r7
   bb588:	f7fa ff26 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb58c:	42b0      	cmp	r0, r6
   bb58e:	dd49      	ble.n	bb624 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb590:	f04f 0800 	mov.w	r8, #0
   bb594:	2103      	movs	r1, #3
   bb596:	4638      	mov	r0, r7
   bb598:	f7fa ff1e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb59c:	4540      	cmp	r0, r8
   bb59e:	dd3f      	ble.n	bb620 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
          const int32 input1_val =
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bb5a0:	f8cd 8000 	str.w	r8, [sp]
   bb5a4:	4633      	mov	r3, r6
   bb5a6:	462a      	mov	r2, r5
   bb5a8:	4621      	mov	r1, r4
   bb5aa:	a80c      	add	r0, sp, #48	; 0x30
   bb5ac:	f7fb f824 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb5b0:	9b04      	ldr	r3, [sp, #16]
   bb5b2:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bb5b6:	9b02      	ldr	r3, [sp, #8]
          const int32 input2_val =
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb5b8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bb5bc:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb5be:	462a      	mov	r2, r5
   bb5c0:	4633      	mov	r3, r6
   bb5c2:	4621      	mov	r1, r4
   bb5c4:	a814      	add	r0, sp, #80	; 0x50
   bb5c6:	f7fb f817 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb5ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bb5cc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb5ce:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bb5d0:	4413      	add	r3, r2
          const int32 shifted_input1_val = input1_val * (1 << left_shift);
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb5d2:	fa03 f30a 	lsl.w	r3, r3, sl
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb5d6:	ee18 2a90 	vmov	r2, s17
   bb5da:	ee18 1a10 	vmov	r1, s16
   bb5de:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb5e2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb5e4:	f7fa ffbe 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, input1_multiplier, input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb5e8:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb5ea:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb5ec:	ee19 1a10 	vmov	r1, s18
   bb5f0:	465a      	mov	r2, fp
   bb5f2:	4618      	mov	r0, r3
   bb5f4:	f7fa ffb6 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bb5f8:	eba9 0300 	sub.w	r3, r9, r0
   bb5fc:	f1d3 0900 	rsbs	r9, r3, #0
   bb600:	eb49 0903 	adc.w	r9, r9, r3
                  shifted_input2_val, input2_multiplier, input2_shift);
          output_data[Offset(output_shape, b, y, x, c)] =
   bb604:	f8cd 8000 	str.w	r8, [sp]
   bb608:	4633      	mov	r3, r6
   bb60a:	462a      	mov	r2, r5
   bb60c:	4621      	mov	r1, r4
   bb60e:	4638      	mov	r0, r7
   bb610:	f7fa ff49 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bb614:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb616:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb61a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb61e:	e7b9      	b.n	bb594 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb620:	3601      	adds	r6, #1
   bb622:	e7af      	b.n	bb584 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb624:	3501      	adds	r5, #1
   bb626:	e7a5      	b.n	bb574 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb628:	3401      	adds	r4, #1
   bb62a:	e79c      	b.n	bb566 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bb62c:	a807      	add	r0, sp, #28
   bb62e:	f7fa fec8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
              F(scaled_input1_val, scaled_input2_val);
        }
      }
    }
  }
}
   bb632:	b01d      	add	sp, #116	; 0x74
   bb634:	ecbd 8b04 	vpop	{d8-d9}
   bb638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb63c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bb63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb640:	ed2d 8b04 	vpush	{d8-d9}
   bb644:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb646:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bb648:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb64a:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bb64c:	9204      	str	r2, [sp, #16]
   bb64e:	4604      	mov	r4, r0
   bb650:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bb652:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb654:	dd01      	ble.n	bb65a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bb656:	f009 f921 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb65a:	6833      	ldr	r3, [r6, #0]
   bb65c:	2b04      	cmp	r3, #4
   bb65e:	dcfa      	bgt.n	bb656 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb660:	6813      	ldr	r3, [r2, #0]
   bb662:	2b04      	cmp	r3, #4
   bb664:	dcf7      	bgt.n	bb656 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bb666:	2301      	movs	r3, #1
   bb668:	2104      	movs	r1, #4
   bb66a:	a807      	add	r0, sp, #28
   bb66c:	f7fa feee 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb670:	ab14      	add	r3, sp, #80	; 0x50
   bb672:	aa0c      	add	r2, sp, #48	; 0x30
   bb674:	4631      	mov	r1, r6
   bb676:	4628      	mov	r0, r5
   bb678:	f7fb f9f0 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bb67c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bb680:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb682:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bb684:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bb688:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bb68c:	68e3      	ldr	r3, [r4, #12]
   bb68e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bb692:	6923      	ldr	r3, [r4, #16]
   bb694:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bb696:	6963      	ldr	r3, [r4, #20]
   bb698:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb69c:	2400      	movs	r4, #0
   bb69e:	2100      	movs	r1, #0
   bb6a0:	a807      	add	r0, sp, #28
   bb6a2:	f7fa fe99 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb6a6:	42a0      	cmp	r0, r4
   bb6a8:	dd5c      	ble.n	bb764 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb6aa:	2500      	movs	r5, #0
   bb6ac:	af07      	add	r7, sp, #28
   bb6ae:	2101      	movs	r1, #1
   bb6b0:	4638      	mov	r0, r7
   bb6b2:	f7fa fe91 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb6b6:	42a8      	cmp	r0, r5
   bb6b8:	dd52      	ble.n	bb760 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb6ba:	2600      	movs	r6, #0
   bb6bc:	2102      	movs	r1, #2
   bb6be:	4638      	mov	r0, r7
   bb6c0:	f7fa fe8a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb6c4:	42b0      	cmp	r0, r6
   bb6c6:	dd49      	ble.n	bb75c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb6c8:	f04f 0800 	mov.w	r8, #0
   bb6cc:	2103      	movs	r1, #3
   bb6ce:	4638      	mov	r0, r7
   bb6d0:	f7fa fe82 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb6d4:	4540      	cmp	r0, r8
   bb6d6:	dd3f      	ble.n	bb758 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bb6d8:	f8cd 8000 	str.w	r8, [sp]
   bb6dc:	4633      	mov	r3, r6
   bb6de:	462a      	mov	r2, r5
   bb6e0:	4621      	mov	r1, r4
   bb6e2:	a80c      	add	r0, sp, #48	; 0x30
   bb6e4:	f7fa ff88 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb6e8:	9b04      	ldr	r3, [sp, #16]
   bb6ea:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bb6ee:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb6f0:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bb6f4:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb6f6:	462a      	mov	r2, r5
   bb6f8:	4633      	mov	r3, r6
   bb6fa:	4621      	mov	r1, r4
   bb6fc:	a814      	add	r0, sp, #80	; 0x50
   bb6fe:	f7fa ff7b 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bb702:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bb704:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bb706:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bb708:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb70a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb70e:	ee18 2a90 	vmov	r2, s17
   bb712:	ee18 1a10 	vmov	r1, s16
   bb716:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bb71a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb71c:	f7fa ff22 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb720:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb722:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb724:	ee19 1a10 	vmov	r1, s18
   bb728:	465a      	mov	r2, fp
   bb72a:	4618      	mov	r0, r3
   bb72c:	f7fa ff1a 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bb730:	eba9 0300 	sub.w	r3, r9, r0
   bb734:	f1d3 0900 	rsbs	r9, r3, #0
   bb738:	eb49 0903 	adc.w	r9, r9, r3
          output_data[Offset(output_shape, b, y, x, c)] =
   bb73c:	f8cd 8000 	str.w	r8, [sp]
   bb740:	4633      	mov	r3, r6
   bb742:	462a      	mov	r2, r5
   bb744:	4621      	mov	r1, r4
   bb746:	4638      	mov	r0, r7
   bb748:	f7fa fead 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bb74c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb74e:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb752:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb756:	e7b9      	b.n	bb6cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb758:	3601      	adds	r6, #1
   bb75a:	e7af      	b.n	bb6bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb75c:	3501      	adds	r5, #1
   bb75e:	e7a5      	b.n	bb6ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb760:	3401      	adds	r4, #1
   bb762:	e79c      	b.n	bb69e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bb764:	a807      	add	r0, sp, #28
   bb766:	f7fa fe2c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bb76a:	b01d      	add	sp, #116	; 0x74
   bb76c:	ecbd 8b04 	vpop	{d8-d9}
   bb770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb774 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   bb774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb778:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb77c:	680a      	ldr	r2, [r1, #0]
   bb77e:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bb782:	6895      	ldr	r5, [r2, #8]
   bb784:	4680      	mov	r8, r0
   bb786:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb788:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb78a:	2338      	movs	r3, #56	; 0x38
   bb78c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb790:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bb792:	fb03 a505 	mla	r5, r3, r5, sl
   bb796:	eb0a 0609 	add.w	r6, sl, r9
   bb79a:	b0df      	sub	sp, #380	; 0x17c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bb79c:	4629      	mov	r1, r5
   bb79e:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bb7a0:	fb03 a404 	mla	r4, r3, r4, sl
   bb7a4:	f7f9 fd3a 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bb7a8:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bb7ac:	f080 0001 	eor.w	r0, r0, #1
   bb7b0:	1e53      	subs	r3, r2, #1
   bb7b2:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bb7b4:	2b08      	cmp	r3, #8
   bb7b6:	f200 8424 	bhi.w	bc002 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88e>
   bb7ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb7be:	00be      	.short	0x00be
   bb7c0:	02fc017b 	.word	0x02fc017b
   bb7c4:	04220233 	.word	0x04220233
   bb7c8:	04220009 	.word	0x04220009
   bb7cc:	03920422 	.word	0x03920422
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   bb7d0:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bb7d4:	4631      	mov	r1, r6
   bb7d6:	2f00      	cmp	r7, #0
   bb7d8:	f000 8087 	beq.w	bb8ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bb7dc:	a80d      	add	r0, sp, #52	; 0x34
   bb7de:	f7fb f894 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb7e2:	6873      	ldr	r3, [r6, #4]
   bb7e4:	9305      	str	r3, [sp, #20]
   bb7e6:	4629      	mov	r1, r5
   bb7e8:	a812      	add	r0, sp, #72	; 0x48
   bb7ea:	f7fb f88e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb7ee:	b105      	cbz	r5, bb7f2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bb7f0:	686d      	ldr	r5, [r5, #4]
   bb7f2:	4621      	mov	r1, r4
   bb7f4:	a817      	add	r0, sp, #92	; 0x5c
   bb7f6:	f7fb f888 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb7fa:	b104      	cbz	r4, bb7fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bb7fc:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb800:	2b04      	cmp	r3, #4
   bb802:	dd01      	ble.n	bb808 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bb804:	f009 f84a 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb808:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb80a:	2b04      	cmp	r3, #4
   bb80c:	dcfa      	bgt.n	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb80e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb810:	2b04      	cmp	r3, #4
   bb812:	dcf7      	bgt.n	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bb814:	2301      	movs	r3, #1
   bb816:	aa17      	add	r2, sp, #92	; 0x5c
   bb818:	2104      	movs	r1, #4
   bb81a:	a849      	add	r0, sp, #292	; 0x124
   bb81c:	f7fa fe16 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb820:	ab56      	add	r3, sp, #344	; 0x158
   bb822:	4642      	mov	r2, r8
   bb824:	a912      	add	r1, sp, #72	; 0x48
   bb826:	a80d      	add	r0, sp, #52	; 0x34
   bb828:	f7fb f918 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb82c:	2600      	movs	r6, #0
   bb82e:	2100      	movs	r1, #0
   bb830:	a849      	add	r0, sp, #292	; 0x124
   bb832:	f7fa fdd1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb836:	42b0      	cmp	r0, r6
   bb838:	dd45      	ble.n	bb8c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x152>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb83a:	2700      	movs	r7, #0
   bb83c:	2101      	movs	r1, #1
   bb83e:	a849      	add	r0, sp, #292	; 0x124
   bb840:	f7fa fdca 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb844:	42b8      	cmp	r0, r7
   bb846:	dd3c      	ble.n	bb8c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x14e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb848:	f04f 0b00 	mov.w	fp, #0
   bb84c:	2102      	movs	r1, #2
   bb84e:	a849      	add	r0, sp, #292	; 0x124
   bb850:	f7fa fdc2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb854:	4558      	cmp	r0, fp
   bb856:	dd32      	ble.n	bb8be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x14a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb858:	f04f 0900 	mov.w	r9, #0
   bb85c:	2103      	movs	r1, #3
   bb85e:	a849      	add	r0, sp, #292	; 0x124
   bb860:	f7fa fdba 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb864:	4548      	cmp	r0, r9
   bb866:	dd27      	ble.n	bb8b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb868:	f8cd 9000 	str.w	r9, [sp]
   bb86c:	465b      	mov	r3, fp
   bb86e:	463a      	mov	r2, r7
   bb870:	4631      	mov	r1, r6
   bb872:	4640      	mov	r0, r8
   bb874:	f7fa fec0 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb878:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb87c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb87e:	465b      	mov	r3, fp
   bb880:	463a      	mov	r2, r7
   bb882:	4631      	mov	r1, r6
   bb884:	a856      	add	r0, sp, #344	; 0x158
   bb886:	f7fa feb7 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs == rhs;
   bb88a:	9b05      	ldr	r3, [sp, #20]
   bb88c:	5c2a      	ldrb	r2, [r5, r0]
   bb88e:	f813 a00a 	ldrb.w	sl, [r3, sl]
          output_data[Offset(output_shape, b, y, x, c)] =
   bb892:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bb896:	ebaa 0c02 	sub.w	ip, sl, r2
   bb89a:	f1dc 0a00 	rsbs	sl, ip, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bb89e:	465b      	mov	r3, fp
   bb8a0:	463a      	mov	r2, r7
   bb8a2:	4631      	mov	r1, r6
   bb8a4:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bb8a6:	eb4a 0a0c 	adc.w	sl, sl, ip
          output_data[Offset(output_shape, b, y, x, c)] =
   bb8aa:	f7fa fdfc 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb8ae:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bb8b2:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb8b6:	e7d1      	b.n	bb85c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb8b8:	f10b 0b01 	add.w	fp, fp, #1
   bb8bc:	e7c6      	b.n	bb84c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb8be:	3701      	adds	r7, #1
   bb8c0:	e7bc      	b.n	bb83c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb8c2:	3601      	adds	r6, #1
   bb8c4:	e7b3      	b.n	bb82e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bb8c6:	a849      	add	r0, sp, #292	; 0x124
   bb8c8:	f7fa fd7b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bb8cc:	a817      	add	r0, sp, #92	; 0x5c
   bb8ce:	f7fa fd78 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bb8d2:	a812      	add	r0, sp, #72	; 0x48
   bb8d4:	f7fa fd75 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bb8d8:	a80d      	add	r0, sp, #52	; 0x34
TF_LITE_QUANTIZE_COMPARISON(Equal);
   bb8da:	f7fa fd72 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bb8de:	2000      	movs	r0, #0
}
   bb8e0:	b05f      	add	sp, #380	; 0x17c
   bb8e2:	ecbd 8b02 	vpop	{d8}
   bb8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   bb8ea:	a849      	add	r0, sp, #292	; 0x124
   bb8ec:	f7fb f80d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb8f0:	4629      	mov	r1, r5
   bb8f2:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb8f4:	6876      	ldr	r6, [r6, #4]
   bb8f6:	f7fb f808 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb8fa:	b105      	cbz	r5, bb8fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x18a>
   bb8fc:	686d      	ldr	r5, [r5, #4]
   bb8fe:	4621      	mov	r1, r4
   bb900:	a856      	add	r0, sp, #344	; 0x158
   bb902:	f7fb f802 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb906:	b104      	cbz	r4, bb90a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x196>
   bb908:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bb90a:	aa56      	add	r2, sp, #344	; 0x158
   bb90c:	4641      	mov	r1, r8
   bb90e:	a849      	add	r0, sp, #292	; 0x124
   bb910:	f7fa fdeb 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bb914:	2300      	movs	r3, #0
  const int64_t flatsize =
   bb916:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bb91a:	461a      	mov	r2, r3
   bb91c:	4283      	cmp	r3, r0
   bb91e:	eb72 010c 	sbcs.w	r1, r2, ip
   bb922:	f280 8177 	bge.w	bbc14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
  return lhs == rhs;
   bb926:	5cf1      	ldrb	r1, [r6, r3]
   bb928:	5cef      	ldrb	r7, [r5, r3]
   bb92a:	1bcf      	subs	r7, r1, r7
   bb92c:	4279      	negs	r1, r7
   bb92e:	4179      	adcs	r1, r7
   bb930:	54e1      	strb	r1, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bb932:	3301      	adds	r3, #1
   bb934:	f142 0200 	adc.w	r2, r2, #0
   bb938:	e7f0      	b.n	bb91c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
   bb93a:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bb93e:	4631      	mov	r1, r6
   bb940:	2f00      	cmp	r7, #0
   bb942:	f000 8089 	beq.w	bba58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
   bb946:	a81c      	add	r0, sp, #112	; 0x70
   bb948:	f7fa ffdf 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bb94c:	6873      	ldr	r3, [r6, #4]
   bb94e:	9305      	str	r3, [sp, #20]
   bb950:	4629      	mov	r1, r5
   bb952:	a821      	add	r0, sp, #132	; 0x84
   bb954:	f7fa ffd9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bb958:	b105      	cbz	r5, bb95c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   bb95a:	686d      	ldr	r5, [r5, #4]
   bb95c:	4621      	mov	r1, r4
   bb95e:	a826      	add	r0, sp, #152	; 0x98
   bb960:	f7fa ffd3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb964:	b104      	cbz	r4, bb968 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
   bb966:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bb968:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   bb96a:	2b04      	cmp	r3, #4
   bb96c:	f73f af4a 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bb970:	9b21      	ldr	r3, [sp, #132]	; 0x84
   bb972:	2b04      	cmp	r3, #4
   bb974:	f73f af46 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bb978:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bb97a:	2b04      	cmp	r3, #4
   bb97c:	f73f af42 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bb980:	2301      	movs	r3, #1
   bb982:	aa26      	add	r2, sp, #152	; 0x98
   bb984:	2104      	movs	r1, #4
   bb986:	a849      	add	r0, sp, #292	; 0x124
   bb988:	f7fa fd60 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bb98c:	ab56      	add	r3, sp, #344	; 0x158
   bb98e:	4642      	mov	r2, r8
   bb990:	a921      	add	r1, sp, #132	; 0x84
   bb992:	a81c      	add	r0, sp, #112	; 0x70
   bb994:	f7fb f862 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bb998:	2600      	movs	r6, #0
   bb99a:	2100      	movs	r1, #0
   bb99c:	a849      	add	r0, sp, #292	; 0x124
   bb99e:	f7fa fd1b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb9a2:	42b0      	cmp	r0, r6
   bb9a4:	dd4d      	ble.n	bba42 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bb9a6:	2700      	movs	r7, #0
   bb9a8:	2101      	movs	r1, #1
   bb9aa:	a849      	add	r0, sp, #292	; 0x124
   bb9ac:	f7fa fd14 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb9b0:	42b8      	cmp	r0, r7
   bb9b2:	dd44      	ble.n	bba3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ca>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bb9b4:	f04f 0b00 	mov.w	fp, #0
   bb9b8:	2102      	movs	r1, #2
   bb9ba:	a849      	add	r0, sp, #292	; 0x124
   bb9bc:	f7fa fd0c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb9c0:	4558      	cmp	r0, fp
   bb9c2:	dd3a      	ble.n	bba3a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bb9c4:	f04f 0900 	mov.w	r9, #0
   bb9c8:	2103      	movs	r1, #3
   bb9ca:	a849      	add	r0, sp, #292	; 0x124
   bb9cc:	f7fa fd04 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb9d0:	4548      	cmp	r0, r9
   bb9d2:	dd2f      	ble.n	bba34 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2c0>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb9d4:	f8cd 9000 	str.w	r9, [sp]
   bb9d8:	465b      	mov	r3, fp
   bb9da:	463a      	mov	r2, r7
   bb9dc:	4631      	mov	r1, r6
   bb9de:	4640      	mov	r0, r8
   bb9e0:	f7fa fe0a 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb9e4:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb9e8:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bb9ea:	465b      	mov	r3, fp
   bb9ec:	463a      	mov	r2, r7
   bb9ee:	4631      	mov	r1, r6
   bb9f0:	a856      	add	r0, sp, #344	; 0x158
   bb9f2:	f7fa fe01 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb9f6:	9b05      	ldr	r3, [sp, #20]
   bb9f8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bb9fc:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs == rhs;
   bba00:	ed9a 7a00 	vldr	s14, [sl]
   bba04:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bba08:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bba0c:	eeb4 7a67 	vcmp.f32	s14, s15
   bba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bba14:	465b      	mov	r3, fp
   bba16:	463a      	mov	r2, r7
   bba18:	4631      	mov	r1, r6
   bba1a:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bba1c:	bf0c      	ite	eq
   bba1e:	f04f 0a01 	moveq.w	sl, #1
   bba22:	f04f 0a00 	movne.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bba26:	f7fa fd3e 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bba2a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bba2e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bba32:	e7c9      	b.n	bb9c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x254>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bba34:	f10b 0b01 	add.w	fp, fp, #1
   bba38:	e7be      	b.n	bb9b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x244>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bba3a:	3701      	adds	r7, #1
   bba3c:	e7b4      	b.n	bb9a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x234>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bba3e:	3601      	adds	r6, #1
   bba40:	e7ab      	b.n	bb99a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x226>
  const RuntimeShape output_shape =
   bba42:	a849      	add	r0, sp, #292	; 0x124
   bba44:	f7fa fcbd 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bba48:	a826      	add	r0, sp, #152	; 0x98
   bba4a:	f7fa fcba 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bba4e:	a821      	add	r0, sp, #132	; 0x84
   bba50:	f7fa fcb7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bba54:	a81c      	add	r0, sp, #112	; 0x70
   bba56:	e740      	b.n	bb8da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bba58:	a849      	add	r0, sp, #292	; 0x124
   bba5a:	f7fa ff56 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bba5e:	4629      	mov	r1, r5
   bba60:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bba62:	6876      	ldr	r6, [r6, #4]
   bba64:	f7fa ff51 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bba68:	b105      	cbz	r5, bba6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
   bba6a:	686d      	ldr	r5, [r5, #4]
   bba6c:	4621      	mov	r1, r4
   bba6e:	a856      	add	r0, sp, #344	; 0x158
   bba70:	f7fa ff4b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bba74:	b104      	cbz	r4, bba78 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x304>
   bba76:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bba78:	aa56      	add	r2, sp, #344	; 0x158
   bba7a:	4641      	mov	r1, r8
   bba7c:	a849      	add	r0, sp, #292	; 0x124
   bba7e:	f7fa fd34 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bba82:	2300      	movs	r3, #0
  const int64_t flatsize =
   bba84:	17c7      	asrs	r7, r0, #31
   bba86:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bba88:	4619      	mov	r1, r3
   bba8a:	4283      	cmp	r3, r0
   bba8c:	eb71 0607 	sbcs.w	r6, r1, r7
   bba90:	f280 80c0 	bge.w	bbc14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bba94:	ecb2 7a01 	vldmia	r2!, {s14}
   bba98:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs == rhs;
   bba9c:	eeb4 7a67 	vcmp.f32	s14, s15
   bbaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbaa4:	bf0c      	ite	eq
   bbaa6:	2601      	moveq	r6, #1
   bbaa8:	2600      	movne	r6, #0
   bbaaa:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbaac:	3301      	adds	r3, #1
   bbaae:	f141 0100 	adc.w	r1, r1, #0
   bbab2:	e7ea      	b.n	bba8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x316>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
   bbab4:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbab8:	4631      	mov	r1, r6
   bbaba:	2f00      	cmp	r7, #0
   bbabc:	f000 8081 	beq.w	bbbc2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   bbac0:	a82b      	add	r0, sp, #172	; 0xac
   bbac2:	f7fa ff22 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbac6:	6873      	ldr	r3, [r6, #4]
   bbac8:	9305      	str	r3, [sp, #20]
   bbaca:	4629      	mov	r1, r5
   bbacc:	a830      	add	r0, sp, #192	; 0xc0
   bbace:	f7fa ff1c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbad2:	b105      	cbz	r5, bbad6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x362>
   bbad4:	686d      	ldr	r5, [r5, #4]
   bbad6:	4621      	mov	r1, r4
   bbad8:	a835      	add	r0, sp, #212	; 0xd4
   bbada:	f7fa ff16 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbade:	b104      	cbz	r4, bbae2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x36e>
   bbae0:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbae2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   bbae4:	2b04      	cmp	r3, #4
   bbae6:	f73f ae8d 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bbaea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bbaec:	2b04      	cmp	r3, #4
   bbaee:	f73f ae89 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bbaf2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bbaf4:	2b04      	cmp	r3, #4
   bbaf6:	f73f ae85 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bbafa:	2301      	movs	r3, #1
   bbafc:	aa35      	add	r2, sp, #212	; 0xd4
   bbafe:	2104      	movs	r1, #4
   bbb00:	a849      	add	r0, sp, #292	; 0x124
   bbb02:	f7fa fca3 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bbb06:	ab56      	add	r3, sp, #344	; 0x158
   bbb08:	4642      	mov	r2, r8
   bbb0a:	a930      	add	r1, sp, #192	; 0xc0
   bbb0c:	a82b      	add	r0, sp, #172	; 0xac
   bbb0e:	f7fa ffa5 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbb12:	2600      	movs	r6, #0
   bbb14:	2100      	movs	r1, #0
   bbb16:	a849      	add	r0, sp, #292	; 0x124
   bbb18:	f7fa fc5e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbb1c:	42b0      	cmp	r0, r6
   bbb1e:	dd45      	ble.n	bbbac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x438>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbb20:	2700      	movs	r7, #0
   bbb22:	2101      	movs	r1, #1
   bbb24:	a849      	add	r0, sp, #292	; 0x124
   bbb26:	f7fa fc57 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbb2a:	42b8      	cmp	r0, r7
   bbb2c:	dd3c      	ble.n	bbba8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x434>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbb2e:	f04f 0b00 	mov.w	fp, #0
   bbb32:	2102      	movs	r1, #2
   bbb34:	a849      	add	r0, sp, #292	; 0x124
   bbb36:	f7fa fc4f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbb3a:	4558      	cmp	r0, fp
   bbb3c:	dd32      	ble.n	bbba4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x430>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbb3e:	f04f 0900 	mov.w	r9, #0
   bbb42:	2103      	movs	r1, #3
   bbb44:	a849      	add	r0, sp, #292	; 0x124
   bbb46:	f7fa fc47 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbb4a:	4548      	cmp	r0, r9
   bbb4c:	dd27      	ble.n	bbb9e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x42a>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbb4e:	f8cd 9000 	str.w	r9, [sp]
   bbb52:	465b      	mov	r3, fp
   bbb54:	463a      	mov	r2, r7
   bbb56:	4631      	mov	r1, r6
   bbb58:	4640      	mov	r0, r8
   bbb5a:	f7fa fd4d 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbb5e:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbb62:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbb64:	465b      	mov	r3, fp
   bbb66:	463a      	mov	r2, r7
   bbb68:	4631      	mov	r1, r6
   bbb6a:	a856      	add	r0, sp, #344	; 0x158
   bbb6c:	f7fa fd44 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs == rhs;
   bbb70:	9b05      	ldr	r3, [sp, #20]
   bbb72:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bbb76:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bbb7a:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bbb7e:	1a88      	subs	r0, r1, r2
   bbb80:	f1d0 0a00 	rsbs	sl, r0, #0
   bbb84:	eb4a 0a00 	adc.w	sl, sl, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbb88:	465b      	mov	r3, fp
   bbb8a:	463a      	mov	r2, r7
   bbb8c:	4631      	mov	r1, r6
   bbb8e:	a849      	add	r0, sp, #292	; 0x124
   bbb90:	f7fa fc89 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbb94:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bbb98:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbb9c:	e7d1      	b.n	bbb42 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ce>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbb9e:	f10b 0b01 	add.w	fp, fp, #1
   bbba2:	e7c6      	b.n	bbb32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3be>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbba4:	3701      	adds	r7, #1
   bbba6:	e7bc      	b.n	bbb22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbba8:	3601      	adds	r6, #1
   bbbaa:	e7b3      	b.n	bbb14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  const RuntimeShape output_shape =
   bbbac:	a849      	add	r0, sp, #292	; 0x124
   bbbae:	f7fa fc08 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbbb2:	a835      	add	r0, sp, #212	; 0xd4
   bbbb4:	f7fa fc05 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbbb8:	a830      	add	r0, sp, #192	; 0xc0
   bbbba:	f7fa fc02 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbbbe:	a82b      	add	r0, sp, #172	; 0xac
   bbbc0:	e68b      	b.n	bb8da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbbc2:	a849      	add	r0, sp, #292	; 0x124
   bbbc4:	f7fa fea1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbbc8:	4629      	mov	r1, r5
   bbbca:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbbcc:	6876      	ldr	r6, [r6, #4]
   bbbce:	f7fa fe9c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbbd2:	b105      	cbz	r5, bbbd6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x462>
   bbbd4:	686d      	ldr	r5, [r5, #4]
   bbbd6:	4621      	mov	r1, r4
   bbbd8:	a856      	add	r0, sp, #344	; 0x158
   bbbda:	f7fa fe96 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbbde:	b104      	cbz	r4, bbbe2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x46e>
   bbbe0:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbbe2:	aa56      	add	r2, sp, #344	; 0x158
   bbbe4:	4641      	mov	r1, r8
   bbbe6:	a849      	add	r0, sp, #292	; 0x124
   bbbe8:	f7fa fc7f 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bbbec:	2300      	movs	r3, #0
  const int64_t flatsize =
   bbbee:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbbf2:	461f      	mov	r7, r3
   bbbf4:	4283      	cmp	r3, r0
   bbbf6:	eb77 020c 	sbcs.w	r2, r7, ip
   bbbfa:	da0b      	bge.n	bbc14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a0>
  return lhs == rhs;
   bbbfc:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bbc00:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bbc04:	1a51      	subs	r1, r2, r1
   bbc06:	424a      	negs	r2, r1
   bbc08:	414a      	adcs	r2, r1
   bbc0a:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbc0c:	3301      	adds	r3, #1
   bbc0e:	f147 0700 	adc.w	r7, r7, #0
   bbc12:	e7ef      	b.n	bbbf4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x480>
   bbc14:	a856      	add	r0, sp, #344	; 0x158
   bbc16:	f7fa fbd4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbc1a:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
   bbc1c:	f7fa fbd1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbc20:	a849      	add	r0, sp, #292	; 0x124
   bbc22:	e65a      	b.n	bb8da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbc24:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbc28:	4631      	mov	r1, r6
   bbc2a:	2f00      	cmp	r7, #0
   bbc2c:	f000 808c 	beq.w	bbd48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5d4>
   bbc30:	a83a      	add	r0, sp, #232	; 0xe8
   bbc32:	f7fa fe6a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbc36:	4629      	mov	r1, r5
   bbc38:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbc3a:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bbc3e:	f7fa fe64 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbc42:	b105      	cbz	r5, bbc46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4d2>
   bbc44:	686d      	ldr	r5, [r5, #4]
   bbc46:	4621      	mov	r1, r4
   bbc48:	a844      	add	r0, sp, #272	; 0x110
   bbc4a:	f7fa fe5e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbc4e:	b104      	cbz	r4, bbc52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4de>
   bbc50:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bbc52:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbc54:	2b04      	cmp	r3, #4
   bbc56:	f73f add5 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bbc5a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbc5c:	2b04      	cmp	r3, #4
   bbc5e:	f73f add1 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bbc62:	9b44      	ldr	r3, [sp, #272]	; 0x110
   bbc64:	2b04      	cmp	r3, #4
   bbc66:	f73f adcd 	bgt.w	bb804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bbc6a:	2301      	movs	r3, #1
   bbc6c:	aa44      	add	r2, sp, #272	; 0x110
   bbc6e:	2104      	movs	r1, #4
   bbc70:	a849      	add	r0, sp, #292	; 0x124
   bbc72:	f7fa fbeb 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bbc76:	ab56      	add	r3, sp, #344	; 0x158
   bbc78:	4642      	mov	r2, r8
   bbc7a:	a93f      	add	r1, sp, #252	; 0xfc
   bbc7c:	a83a      	add	r0, sp, #232	; 0xe8
   bbc7e:	f7fa feed 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbc82:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbc86:	2700      	movs	r7, #0
   bbc88:	2100      	movs	r1, #0
   bbc8a:	a849      	add	r0, sp, #292	; 0x124
   bbc8c:	f7fa fba4 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbc90:	42b8      	cmp	r0, r7
   bbc92:	dd4e      	ble.n	bbd32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5be>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbc94:	f04f 0800 	mov.w	r8, #0
   bbc98:	2101      	movs	r1, #1
   bbc9a:	a849      	add	r0, sp, #292	; 0x124
   bbc9c:	f7fa fb9c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbca0:	4540      	cmp	r0, r8
   bbca2:	dd44      	ble.n	bbd2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5ba>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbca4:	2600      	movs	r6, #0
   bbca6:	2102      	movs	r1, #2
   bbca8:	a849      	add	r0, sp, #292	; 0x124
   bbcaa:	f7fa fb95 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbcae:	42b0      	cmp	r0, r6
   bbcb0:	dd3a      	ble.n	bbd28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5b4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbcb2:	f04f 0900 	mov.w	r9, #0
   bbcb6:	2103      	movs	r1, #3
   bbcb8:	a849      	add	r0, sp, #292	; 0x124
   bbcba:	f7fa fb8d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bbcbe:	4548      	cmp	r0, r9
   bbcc0:	dd30      	ble.n	bbd24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5b0>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbcc2:	f8cd 9000 	str.w	r9, [sp]
   bbcc6:	4633      	mov	r3, r6
   bbcc8:	4642      	mov	r2, r8
   bbcca:	4639      	mov	r1, r7
   bbccc:	ee18 0a10 	vmov	r0, s16
   bbcd0:	f7fa fc92 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbcd4:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbcd8:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bbcda:	4633      	mov	r3, r6
   bbcdc:	4642      	mov	r2, r8
   bbcde:	4639      	mov	r1, r7
   bbce0:	a856      	add	r0, sp, #344	; 0x158
   bbce2:	f7fa fc89 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bbce6:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bbcea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs == rhs;
   bbcee:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bbcf2:	6849      	ldr	r1, [r1, #4]
   bbcf4:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bbcf8:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bbcfa:	f8cd 9000 	str.w	r9, [sp]
  return lhs == rhs;
   bbcfe:	4291      	cmp	r1, r2
   bbd00:	bf08      	it	eq
   bbd02:	4283      	cmpeq	r3, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbd04:	4633      	mov	r3, r6
   bbd06:	4642      	mov	r2, r8
   bbd08:	4639      	mov	r1, r7
   bbd0a:	a849      	add	r0, sp, #292	; 0x124
  return lhs == rhs;
   bbd0c:	bf0c      	ite	eq
   bbd0e:	f04f 0a01 	moveq.w	sl, #1
   bbd12:	f04f 0a00 	movne.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bbd16:	f7fa fbc6 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbd1a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bbd1e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bbd22:	e7c8      	b.n	bbcb6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x542>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bbd24:	3601      	adds	r6, #1
   bbd26:	e7be      	b.n	bbca6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x532>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bbd28:	f108 0801 	add.w	r8, r8, #1
   bbd2c:	e7b4      	b.n	bbc98 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x524>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bbd2e:	3701      	adds	r7, #1
   bbd30:	e7aa      	b.n	bbc88 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x514>
  const RuntimeShape output_shape =
   bbd32:	a849      	add	r0, sp, #292	; 0x124
   bbd34:	f7fa fb45 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbd38:	a844      	add	r0, sp, #272	; 0x110
   bbd3a:	f7fa fb42 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbd3e:	a83f      	add	r0, sp, #252	; 0xfc
   bbd40:	f7fa fb3f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbd44:	a83a      	add	r0, sp, #232	; 0xe8
   bbd46:	e5c8      	b.n	bb8da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbd48:	a849      	add	r0, sp, #292	; 0x124
   bbd4a:	f7fa fdde 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbd4e:	4629      	mov	r1, r5
   bbd50:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbd52:	6877      	ldr	r7, [r6, #4]
   bbd54:	f7fa fdd9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbd58:	b105      	cbz	r5, bbd5c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5e8>
   bbd5a:	686d      	ldr	r5, [r5, #4]
   bbd5c:	4621      	mov	r1, r4
   bbd5e:	a856      	add	r0, sp, #344	; 0x158
   bbd60:	f7fa fdd3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbd64:	b104      	cbz	r4, bbd68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x5f4>
   bbd66:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbd68:	4641      	mov	r1, r8
   bbd6a:	aa56      	add	r2, sp, #344	; 0x158
   bbd6c:	a849      	add	r0, sp, #292	; 0x124
   bbd6e:	f7fa fbbc 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bbd72:	2300      	movs	r3, #0
  const int64_t flatsize =
   bbd74:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bbd78:	f1a7 0c08 	sub.w	ip, r7, #8
   bbd7c:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bbd7e:	4698      	mov	r8, r3
   bbd80:	4283      	cmp	r3, r0
   bbd82:	eb78 020e 	sbcs.w	r2, r8, lr
   bbd86:	da11      	bge.n	bbdac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x638>
  return lhs == rhs;
   bbd88:	f855 6f08 	ldr.w	r6, [r5, #8]!
   bbd8c:	f85c 7f08 	ldr.w	r7, [ip, #8]!
   bbd90:	686a      	ldr	r2, [r5, #4]
   bbd92:	f8dc 1004 	ldr.w	r1, [ip, #4]
   bbd96:	4291      	cmp	r1, r2
   bbd98:	bf08      	it	eq
   bbd9a:	42b7      	cmpeq	r7, r6
   bbd9c:	bf0c      	ite	eq
   bbd9e:	2601      	moveq	r6, #1
   bbda0:	2600      	movne	r6, #0
   bbda2:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbda4:	3301      	adds	r3, #1
   bbda6:	f148 0800 	adc.w	r8, r8, #0
   bbdaa:	e7e9      	b.n	bbd80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x60c>
   bbdac:	a856      	add	r0, sp, #344	; 0x158
   bbdae:	f7fa fb08 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbdb2:	a84e      	add	r0, sp, #312	; 0x138
   bbdb4:	e732      	b.n	bbc1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4a8>
TF_LITE_QUANTIZE_COMPARISON(Equal);
   bbdb6:	6933      	ldr	r3, [r6, #16]
   bbdb8:	68f0      	ldr	r0, [r6, #12]
   bbdba:	f1c3 0900 	rsb	r9, r3, #0
   bbdbe:	692b      	ldr	r3, [r5, #16]
   bbdc0:	f1c3 0800 	rsb	r8, r3, #0
   bbdc4:	f7f8 fa90 	bl	b42e8 <__aeabi_f2d>
   bbdc8:	ec41 0b10 	vmov	d0, r0, r1
   bbdcc:	a935      	add	r1, sp, #212	; 0xd4
   bbdce:	a830      	add	r0, sp, #192	; 0xc0
   bbdd0:	f7f9 fa8c 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbdd4:	68e8      	ldr	r0, [r5, #12]
   bbdd6:	f7f8 fa87 	bl	b42e8 <__aeabi_f2d>
   bbdda:	ec41 0b10 	vmov	d0, r0, r1
   bbdde:	a93f      	add	r1, sp, #252	; 0xfc
   bbde0:	a83a      	add	r0, sp, #232	; 0xe8
   bbde2:	f7f9 fa83 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbde6:	2308      	movs	r3, #8
   bbde8:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bbdec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bbdee:	9358      	str	r3, [sp, #352]	; 0x160
   bbdf0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bbdf2:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bbdf6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbdf8:	935b      	str	r3, [sp, #364]	; 0x16c
   bbdfa:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbdfc:	935c      	str	r3, [sp, #368]	; 0x170
   bbdfe:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbe02:	4631      	mov	r1, r6
   bbe04:	a844      	add	r0, sp, #272	; 0x110
   bbe06:	b1ff      	cbz	r7, bbe48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6d4>
   bbe08:	f7fa fd7f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbe0c:	6872      	ldr	r2, [r6, #4]
   bbe0e:	9205      	str	r2, [sp, #20]
   bbe10:	4629      	mov	r1, r5
   bbe12:	a849      	add	r0, sp, #292	; 0x124
   bbe14:	f7fa fd79 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbe18:	4621      	mov	r1, r4
   bbe1a:	4640      	mov	r0, r8
   bbe1c:	686d      	ldr	r5, [r5, #4]
   bbe1e:	f7fa fd74 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbe22:	9a05      	ldr	r2, [sp, #20]
   bbe24:	b104      	cbz	r4, bbe28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6b4>
   bbe26:	6864      	ldr	r4, [r4, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
   bbe28:	9500      	str	r5, [sp, #0]
   bbe2a:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bbe2e:	ab49      	add	r3, sp, #292	; 0x124
   bbe30:	a944      	add	r1, sp, #272	; 0x110
   bbe32:	a856      	add	r0, sp, #344	; 0x158
   bbe34:	f7ff fb66 	bl	bb504 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bbe38:	4640      	mov	r0, r8
   bbe3a:	f7fa fac2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbe3e:	a849      	add	r0, sp, #292	; 0x124
   bbe40:	f7fa fabf 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bbe44:	a844      	add	r0, sp, #272	; 0x110
   bbe46:	e548      	b.n	bb8da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x166>
   bbe48:	f7fa fd5f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbe4c:	6873      	ldr	r3, [r6, #4]
   bbe4e:	9305      	str	r3, [sp, #20]
   bbe50:	4629      	mov	r1, r5
   bbe52:	a849      	add	r0, sp, #292	; 0x124
   bbe54:	f7fa fd59 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbe58:	686b      	ldr	r3, [r5, #4]
   bbe5a:	9306      	str	r3, [sp, #24]
   bbe5c:	4621      	mov	r1, r4
   bbe5e:	4640      	mov	r0, r8
   bbe60:	f7fa fd53 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbe64:	b104      	cbz	r4, bbe68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6f4>
   bbe66:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bbe68:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bbe6c:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bbe6e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bbe70:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bbe72:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbe76:	aa4e      	add	r2, sp, #312	; 0x138
   bbe78:	a949      	add	r1, sp, #292	; 0x124
   bbe7a:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bbe7c:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbe80:	f7fa fb33 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bbe84:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bbe88:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe8a:	2500      	movs	r5, #0
  const int64_t flatsize =
   bbe8c:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbe8e:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bbe90:	462b      	mov	r3, r5
   bbe92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bbe94:	930b      	str	r3, [sp, #44]	; 0x2c
   bbe96:	4545      	cmp	r5, r8
   bbe98:	eb73 0202 	sbcs.w	r2, r3, r2
   bbe9c:	f280 80af 	bge.w	bbffe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88a>
    const int32 input2_val = input2_offset + input2_data[i];
   bbea0:	9b06      	ldr	r3, [sp, #24]
   bbea2:	5d5f      	ldrb	r7, [r3, r5]
   bbea4:	9b08      	ldr	r3, [sp, #32]
   bbea6:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bbea8:	9b05      	ldr	r3, [sp, #20]
   bbeaa:	5d58      	ldrb	r0, [r3, r5]
   bbeac:	9b07      	ldr	r3, [sp, #28]
   bbeae:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbeb0:	465a      	mov	r2, fp
   bbeb2:	4651      	mov	r1, sl
   bbeb4:	fa00 f009 	lsl.w	r0, r0, r9
   bbeb8:	f7fa fb54 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bbebc:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbec0:	ee18 2a10 	vmov	r2, s16
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbec4:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbec6:	4631      	mov	r1, r6
   bbec8:	4638      	mov	r0, r7
   bbeca:	f7fa fb4b 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bbece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbed0:	1a1a      	subs	r2, r3, r0
   bbed2:	4250      	negs	r0, r2
   bbed4:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   bbed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs == rhs;
   bbed8:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbeda:	3501      	adds	r5, #1
   bbedc:	f143 0300 	adc.w	r3, r3, #0
   bbee0:	e7d7      	b.n	bbe92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x71e>
   bbee2:	6933      	ldr	r3, [r6, #16]
   bbee4:	68f0      	ldr	r0, [r6, #12]
   bbee6:	f1c3 0900 	rsb	r9, r3, #0
   bbeea:	692b      	ldr	r3, [r5, #16]
   bbeec:	f1c3 0800 	rsb	r8, r3, #0
   bbef0:	f7f8 f9fa 	bl	b42e8 <__aeabi_f2d>
   bbef4:	ec41 0b10 	vmov	d0, r0, r1
   bbef8:	a935      	add	r1, sp, #212	; 0xd4
   bbefa:	a830      	add	r0, sp, #192	; 0xc0
   bbefc:	f7f9 f9f6 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbf00:	68e8      	ldr	r0, [r5, #12]
   bbf02:	f7f8 f9f1 	bl	b42e8 <__aeabi_f2d>
   bbf06:	ec41 0b10 	vmov	d0, r0, r1
   bbf0a:	a93f      	add	r1, sp, #252	; 0xfc
   bbf0c:	a83a      	add	r0, sp, #232	; 0xe8
   bbf0e:	f7f9 f9ed 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bbf12:	2308      	movs	r3, #8
   bbf14:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bbf18:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bbf1a:	9358      	str	r3, [sp, #352]	; 0x160
   bbf1c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bbf1e:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bbf22:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bbf24:	935b      	str	r3, [sp, #364]	; 0x16c
   bbf26:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bbf28:	935c      	str	r3, [sp, #368]	; 0x170
   bbf2a:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bbf2e:	4631      	mov	r1, r6
   bbf30:	a844      	add	r0, sp, #272	; 0x110
   bbf32:	b1c7      	cbz	r7, bbf66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7f2>
   bbf34:	f7fa fce9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbf38:	6872      	ldr	r2, [r6, #4]
   bbf3a:	9205      	str	r2, [sp, #20]
   bbf3c:	4629      	mov	r1, r5
   bbf3e:	a849      	add	r0, sp, #292	; 0x124
   bbf40:	f7fa fce3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbf44:	4621      	mov	r1, r4
   bbf46:	4640      	mov	r0, r8
   bbf48:	686d      	ldr	r5, [r5, #4]
   bbf4a:	f7fa fcde 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbf4e:	9a05      	ldr	r2, [sp, #20]
   bbf50:	b104      	cbz	r4, bbf54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
   bbf52:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Equal);
   bbf54:	9500      	str	r5, [sp, #0]
   bbf56:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bbf5a:	ab49      	add	r3, sp, #292	; 0x124
   bbf5c:	a944      	add	r1, sp, #272	; 0x110
   bbf5e:	a856      	add	r0, sp, #344	; 0x158
   bbf60:	f7ff fb6c 	bl	bb63c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bbf64:	e768      	b.n	bbe38 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6c4>
   bbf66:	f7fa fcd0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bbf6a:	6873      	ldr	r3, [r6, #4]
   bbf6c:	9305      	str	r3, [sp, #20]
   bbf6e:	4629      	mov	r1, r5
   bbf70:	a849      	add	r0, sp, #292	; 0x124
   bbf72:	f7fa fcca 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bbf76:	686b      	ldr	r3, [r5, #4]
   bbf78:	9306      	str	r3, [sp, #24]
   bbf7a:	4621      	mov	r1, r4
   bbf7c:	4640      	mov	r0, r8
   bbf7e:	f7fa fcc4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bbf82:	b104      	cbz	r4, bbf86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x812>
   bbf84:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bbf86:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bbf8a:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bbf8c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bbf8e:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bbf90:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbf94:	aa4e      	add	r2, sp, #312	; 0x138
   bbf96:	a949      	add	r1, sp, #292	; 0x124
   bbf98:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bbf9a:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbf9e:	f7fa faa4 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bbfa2:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bbfa6:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bbfa8:	2500      	movs	r5, #0
  const int64_t flatsize =
   bbfaa:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bbfac:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bbfae:	462b      	mov	r3, r5
   bbfb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bbfb2:	930b      	str	r3, [sp, #44]	; 0x2c
   bbfb4:	4545      	cmp	r5, r8
   bbfb6:	eb73 0202 	sbcs.w	r2, r3, r2
   bbfba:	da20      	bge.n	bbffe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x88a>
    const int32 input2_val = input2_offset + input2_data[i];
   bbfbc:	9b06      	ldr	r3, [sp, #24]
   bbfbe:	575f      	ldrsb	r7, [r3, r5]
   bbfc0:	9b08      	ldr	r3, [sp, #32]
   bbfc2:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bbfc4:	9b05      	ldr	r3, [sp, #20]
   bbfc6:	5758      	ldrsb	r0, [r3, r5]
   bbfc8:	9b07      	ldr	r3, [sp, #28]
   bbfca:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbfcc:	465a      	mov	r2, fp
   bbfce:	4651      	mov	r1, sl
   bbfd0:	fa00 f009 	lsl.w	r0, r0, r9
   bbfd4:	f7fa fac6 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bbfd8:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbfdc:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bbfde:	ee18 2a10 	vmov	r2, s16
   bbfe2:	4631      	mov	r1, r6
   bbfe4:	4638      	mov	r0, r7
   bbfe6:	f7fa fabd 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs == rhs;
   bbfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbfec:	1a1b      	subs	r3, r3, r0
   bbfee:	4258      	negs	r0, r3
   bbff0:	4158      	adcs	r0, r3
  for (int64_t i = 0; i < flatsize; ++i) {
   bbff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs == rhs;
   bbff4:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bbff6:	3501      	adds	r5, #1
   bbff8:	f143 0300 	adc.w	r3, r3, #0
   bbffc:	e7d8      	b.n	bbfb0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x83c>
   bbffe:	a84e      	add	r0, sp, #312	; 0x138
   bc000:	e71b      	b.n	bbe3a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x6c6>
      context->ReportError(
   bc002:	4640      	mov	r0, r8
   bc004:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bc008:	4901      	ldr	r1, [pc, #4]	; (bc010 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x89c>)
   bc00a:	4798      	blx	r3
      return kTfLiteError;
   bc00c:	2001      	movs	r0, #1
   bc00e:	e467      	b.n	bb8e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   bc010:	000c8ad3 	.word	0x000c8ad3

000bc014 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bc014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc018:	ed2d 8b04 	vpush	{d8-d9}
   bc01c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc01e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bc020:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc022:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bc024:	9204      	str	r2, [sp, #16]
   bc026:	4604      	mov	r4, r0
   bc028:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bc02a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc02c:	dd01      	ble.n	bc032 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bc02e:	f008 fc35 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc032:	6833      	ldr	r3, [r6, #0]
   bc034:	2b04      	cmp	r3, #4
   bc036:	dcfa      	bgt.n	bc02e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc038:	6813      	ldr	r3, [r2, #0]
   bc03a:	2b04      	cmp	r3, #4
   bc03c:	dcf7      	bgt.n	bc02e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bc03e:	2301      	movs	r3, #1
   bc040:	2104      	movs	r1, #4
   bc042:	a807      	add	r0, sp, #28
   bc044:	f7fa fa02 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc048:	ab14      	add	r3, sp, #80	; 0x50
   bc04a:	aa0c      	add	r2, sp, #48	; 0x30
   bc04c:	4631      	mov	r1, r6
   bc04e:	4628      	mov	r0, r5
   bc050:	f7fa fd04 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bc054:	e9d4 a300 	ldrd	sl, r3, [r4]
   bc058:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc05a:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bc05c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc060:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bc064:	68e3      	ldr	r3, [r4, #12]
   bc066:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bc06a:	6923      	ldr	r3, [r4, #16]
   bc06c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bc06e:	6963      	ldr	r3, [r4, #20]
   bc070:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc074:	2400      	movs	r4, #0
   bc076:	2100      	movs	r1, #0
   bc078:	a807      	add	r0, sp, #28
   bc07a:	f7fa f9ad 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc07e:	42a0      	cmp	r0, r4
   bc080:	dd5b      	ble.n	bc13a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x126>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc082:	2500      	movs	r5, #0
   bc084:	af07      	add	r7, sp, #28
   bc086:	2101      	movs	r1, #1
   bc088:	4638      	mov	r0, r7
   bc08a:	f7fa f9a5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc08e:	42a8      	cmp	r0, r5
   bc090:	dd51      	ble.n	bc136 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x122>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc092:	2600      	movs	r6, #0
   bc094:	2102      	movs	r1, #2
   bc096:	4638      	mov	r0, r7
   bc098:	f7fa f99e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc09c:	42b0      	cmp	r0, r6
   bc09e:	dd48      	ble.n	bc132 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11e>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc0a0:	f04f 0800 	mov.w	r8, #0
   bc0a4:	2103      	movs	r1, #3
   bc0a6:	4638      	mov	r0, r7
   bc0a8:	f7fa f996 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc0ac:	4540      	cmp	r0, r8
   bc0ae:	dd3e      	ble.n	bc12e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11a>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bc0b0:	f8cd 8000 	str.w	r8, [sp]
   bc0b4:	4633      	mov	r3, r6
   bc0b6:	462a      	mov	r2, r5
   bc0b8:	4621      	mov	r1, r4
   bc0ba:	a80c      	add	r0, sp, #48	; 0x30
   bc0bc:	f7fa fa9c 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc0c0:	9b04      	ldr	r3, [sp, #16]
   bc0c2:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bc0c6:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc0c8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bc0cc:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc0ce:	462a      	mov	r2, r5
   bc0d0:	4633      	mov	r3, r6
   bc0d2:	4621      	mov	r1, r4
   bc0d4:	a814      	add	r0, sp, #80	; 0x50
   bc0d6:	f7fa fa8f 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc0da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bc0dc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc0de:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bc0e0:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc0e2:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc0e6:	ee18 2a90 	vmov	r2, s17
   bc0ea:	ee18 1a10 	vmov	r1, s16
   bc0ee:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc0f2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc0f4:	f7fa fa36 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc0f8:	9b05      	ldr	r3, [sp, #20]
   bc0fa:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc0fe:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc100:	465a      	mov	r2, fp
   bc102:	4618      	mov	r0, r3
   bc104:	f7fa fa2e 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bc108:	f8cd 8000 	str.w	r8, [sp]
  return lhs != rhs;
   bc10c:	ebb9 0900 	subs.w	r9, r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc110:	4633      	mov	r3, r6
   bc112:	462a      	mov	r2, r5
   bc114:	4621      	mov	r1, r4
   bc116:	4638      	mov	r0, r7
  return lhs != rhs;
   bc118:	bf18      	it	ne
   bc11a:	f04f 0901 	movne.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc11e:	f7fa f9c2 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bc122:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc124:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc128:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc12c:	e7ba      	b.n	bc0a4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc12e:	3601      	adds	r6, #1
   bc130:	e7b0      	b.n	bc094 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc132:	3501      	adds	r5, #1
   bc134:	e7a6      	b.n	bc084 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc136:	3401      	adds	r4, #1
   bc138:	e79d      	b.n	bc076 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bc13a:	a807      	add	r0, sp, #28
   bc13c:	f7fa f941 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bc140:	b01d      	add	sp, #116	; 0x74
   bc142:	ecbd 8b04 	vpop	{d8-d9}
   bc146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc14a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bc14a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc14e:	ed2d 8b04 	vpush	{d8-d9}
   bc152:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc154:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bc156:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc158:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bc15a:	9204      	str	r2, [sp, #16]
   bc15c:	4604      	mov	r4, r0
   bc15e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bc160:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc162:	dd01      	ble.n	bc168 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bc164:	f008 fb9a 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc168:	6833      	ldr	r3, [r6, #0]
   bc16a:	2b04      	cmp	r3, #4
   bc16c:	dcfa      	bgt.n	bc164 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc16e:	6813      	ldr	r3, [r2, #0]
   bc170:	2b04      	cmp	r3, #4
   bc172:	dcf7      	bgt.n	bc164 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bc174:	2301      	movs	r3, #1
   bc176:	2104      	movs	r1, #4
   bc178:	a807      	add	r0, sp, #28
   bc17a:	f7fa f967 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc17e:	ab14      	add	r3, sp, #80	; 0x50
   bc180:	aa0c      	add	r2, sp, #48	; 0x30
   bc182:	4631      	mov	r1, r6
   bc184:	4628      	mov	r0, r5
   bc186:	f7fa fc69 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bc18a:	e9d4 a300 	ldrd	sl, r3, [r4]
   bc18e:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc190:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bc192:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bc196:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bc19a:	68e3      	ldr	r3, [r4, #12]
   bc19c:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bc1a0:	6923      	ldr	r3, [r4, #16]
   bc1a2:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bc1a4:	6963      	ldr	r3, [r4, #20]
   bc1a6:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc1aa:	2400      	movs	r4, #0
   bc1ac:	2100      	movs	r1, #0
   bc1ae:	a807      	add	r0, sp, #28
   bc1b0:	f7fa f912 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc1b4:	42a0      	cmp	r0, r4
   bc1b6:	dd5b      	ble.n	bc270 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x126>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc1b8:	2500      	movs	r5, #0
   bc1ba:	af07      	add	r7, sp, #28
   bc1bc:	2101      	movs	r1, #1
   bc1be:	4638      	mov	r0, r7
   bc1c0:	f7fa f90a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc1c4:	42a8      	cmp	r0, r5
   bc1c6:	dd51      	ble.n	bc26c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x122>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc1c8:	2600      	movs	r6, #0
   bc1ca:	2102      	movs	r1, #2
   bc1cc:	4638      	mov	r0, r7
   bc1ce:	f7fa f903 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc1d2:	42b0      	cmp	r0, r6
   bc1d4:	dd48      	ble.n	bc268 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11e>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc1d6:	f04f 0800 	mov.w	r8, #0
   bc1da:	2103      	movs	r1, #3
   bc1dc:	4638      	mov	r0, r7
   bc1de:	f7fa f8fb 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc1e2:	4540      	cmp	r0, r8
   bc1e4:	dd3e      	ble.n	bc264 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11a>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bc1e6:	f8cd 8000 	str.w	r8, [sp]
   bc1ea:	4633      	mov	r3, r6
   bc1ec:	462a      	mov	r2, r5
   bc1ee:	4621      	mov	r1, r4
   bc1f0:	a80c      	add	r0, sp, #48	; 0x30
   bc1f2:	f7fa fa01 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc1f6:	9b04      	ldr	r3, [sp, #16]
   bc1f8:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bc1fc:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc1fe:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bc202:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc204:	462a      	mov	r2, r5
   bc206:	4633      	mov	r3, r6
   bc208:	4621      	mov	r1, r4
   bc20a:	a814      	add	r0, sp, #80	; 0x50
   bc20c:	f7fa f9f4 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bc210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bc212:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bc214:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bc216:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc218:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc21c:	ee18 2a90 	vmov	r2, s17
   bc220:	ee18 1a10 	vmov	r1, s16
   bc224:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc228:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc22a:	f7fa f99b 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc22e:	9b05      	ldr	r3, [sp, #20]
   bc230:	ee19 1a10 	vmov	r1, s18
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc234:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc236:	465a      	mov	r2, fp
   bc238:	4618      	mov	r0, r3
   bc23a:	f7fa f993 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bc23e:	f8cd 8000 	str.w	r8, [sp]
  return lhs != rhs;
   bc242:	ebb9 0900 	subs.w	r9, r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc246:	4633      	mov	r3, r6
   bc248:	462a      	mov	r2, r5
   bc24a:	4621      	mov	r1, r4
   bc24c:	4638      	mov	r0, r7
  return lhs != rhs;
   bc24e:	bf18      	it	ne
   bc250:	f04f 0901 	movne.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc254:	f7fa f927 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bc258:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc25a:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc25e:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc262:	e7ba      	b.n	bc1da <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc264:	3601      	adds	r6, #1
   bc266:	e7b0      	b.n	bc1ca <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc268:	3501      	adds	r5, #1
   bc26a:	e7a6      	b.n	bc1ba <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc26c:	3401      	adds	r4, #1
   bc26e:	e79d      	b.n	bc1ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bc270:	a807      	add	r0, sp, #28
   bc272:	f7fa f8a6 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bc276:	b01d      	add	sp, #116	; 0x74
   bc278:	ecbd 8b04 	vpop	{d8-d9}
   bc27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc280 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   bc280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc284:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc288:	680a      	ldr	r2, [r1, #0]
   bc28a:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bc28e:	6895      	ldr	r5, [r2, #8]
   bc290:	4680      	mov	r8, r0
   bc292:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc294:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc296:	2338      	movs	r3, #56	; 0x38
   bc298:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc29c:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bc29e:	fb03 a505 	mla	r5, r3, r5, sl
   bc2a2:	eb0a 0609 	add.w	r6, sl, r9
   bc2a6:	b0df      	sub	sp, #380	; 0x17c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bc2a8:	4629      	mov	r1, r5
   bc2aa:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bc2ac:	fb03 a404 	mla	r4, r3, r4, sl
   bc2b0:	f7f8 ffb4 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bc2b4:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bc2b8:	f080 0001 	eor.w	r0, r0, #1
   bc2bc:	1e53      	subs	r3, r2, #1
   bc2be:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bc2c0:	2b08      	cmp	r3, #8
   bc2c2:	f200 841e 	bhi.w	bcb02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x882>
   bc2c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   bc2ca:	00b8      	.short	0x00b8
   bc2cc:	02f60175 	.word	0x02f60175
   bc2d0:	041c022d 	.word	0x041c022d
   bc2d4:	041c0009 	.word	0x041c0009
   bc2d8:	038c041c 	.word	0x038c041c
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   bc2dc:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc2e0:	4631      	mov	r1, r6
   bc2e2:	2f00      	cmp	r7, #0
   bc2e4:	f000 8083 	beq.w	bc3ee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x16e>
   bc2e8:	a80d      	add	r0, sp, #52	; 0x34
   bc2ea:	f7fa fb0e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc2ee:	6873      	ldr	r3, [r6, #4]
   bc2f0:	9305      	str	r3, [sp, #20]
   bc2f2:	4629      	mov	r1, r5
   bc2f4:	a812      	add	r0, sp, #72	; 0x48
   bc2f6:	f7fa fb08 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc2fa:	b105      	cbz	r5, bc2fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bc2fc:	686d      	ldr	r5, [r5, #4]
   bc2fe:	4621      	mov	r1, r4
   bc300:	a817      	add	r0, sp, #92	; 0x5c
   bc302:	f7fa fb02 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc306:	b104      	cbz	r4, bc30a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bc308:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc30c:	2b04      	cmp	r3, #4
   bc30e:	dd01      	ble.n	bc314 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bc310:	f008 fac4 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc314:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bc316:	2b04      	cmp	r3, #4
   bc318:	dcfa      	bgt.n	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc31a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc31c:	2b04      	cmp	r3, #4
   bc31e:	dcf7      	bgt.n	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc320:	2301      	movs	r3, #1
   bc322:	aa17      	add	r2, sp, #92	; 0x5c
   bc324:	2104      	movs	r1, #4
   bc326:	a849      	add	r0, sp, #292	; 0x124
   bc328:	f7fa f890 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc32c:	ab56      	add	r3, sp, #344	; 0x158
   bc32e:	4642      	mov	r2, r8
   bc330:	a912      	add	r1, sp, #72	; 0x48
   bc332:	a80d      	add	r0, sp, #52	; 0x34
   bc334:	f7fa fb92 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc338:	2600      	movs	r6, #0
   bc33a:	2100      	movs	r1, #0
   bc33c:	a849      	add	r0, sp, #292	; 0x124
   bc33e:	f7fa f84b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc342:	42b0      	cmp	r0, r6
   bc344:	dd41      	ble.n	bc3ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x14a>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc346:	2700      	movs	r7, #0
   bc348:	2101      	movs	r1, #1
   bc34a:	a849      	add	r0, sp, #292	; 0x124
   bc34c:	f7fa f844 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc350:	42b8      	cmp	r0, r7
   bc352:	dd38      	ble.n	bc3c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x146>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc354:	f04f 0b00 	mov.w	fp, #0
   bc358:	2102      	movs	r1, #2
   bc35a:	a849      	add	r0, sp, #292	; 0x124
   bc35c:	f7fa f83c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc360:	4558      	cmp	r0, fp
   bc362:	dd2e      	ble.n	bc3c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x142>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc364:	f04f 0900 	mov.w	r9, #0
   bc368:	2103      	movs	r1, #3
   bc36a:	a849      	add	r0, sp, #292	; 0x124
   bc36c:	f7fa f834 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc370:	4548      	cmp	r0, r9
   bc372:	dd23      	ble.n	bc3bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x13c>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc374:	f8cd 9000 	str.w	r9, [sp]
   bc378:	465b      	mov	r3, fp
   bc37a:	463a      	mov	r2, r7
   bc37c:	4631      	mov	r1, r6
   bc37e:	4640      	mov	r0, r8
   bc380:	f7fa f93a 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc384:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc388:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc38a:	465b      	mov	r3, fp
   bc38c:	463a      	mov	r2, r7
   bc38e:	4631      	mov	r1, r6
   bc390:	a856      	add	r0, sp, #344	; 0x158
   bc392:	f7fa f931 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs != rhs;
   bc396:	9b05      	ldr	r3, [sp, #20]
   bc398:	5c2a      	ldrb	r2, [r5, r0]
   bc39a:	f813 a00a 	ldrb.w	sl, [r3, sl]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc39e:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc3a2:	ea8a 0a02 	eor.w	sl, sl, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bc3a6:	465b      	mov	r3, fp
   bc3a8:	463a      	mov	r2, r7
   bc3aa:	4631      	mov	r1, r6
   bc3ac:	a849      	add	r0, sp, #292	; 0x124
   bc3ae:	f7fa f87a 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc3b2:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc3b6:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc3ba:	e7d5      	b.n	bc368 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc3bc:	f10b 0b01 	add.w	fp, fp, #1
   bc3c0:	e7ca      	b.n	bc358 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc3c2:	3701      	adds	r7, #1
   bc3c4:	e7c0      	b.n	bc348 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc3c6:	3601      	adds	r6, #1
   bc3c8:	e7b7      	b.n	bc33a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bc3ca:	a849      	add	r0, sp, #292	; 0x124
   bc3cc:	f7f9 fff9 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc3d0:	a817      	add	r0, sp, #92	; 0x5c
   bc3d2:	f7f9 fff6 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc3d6:	a812      	add	r0, sp, #72	; 0x48
   bc3d8:	f7f9 fff3 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc3dc:	a80d      	add	r0, sp, #52	; 0x34
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   bc3de:	f7f9 fff0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bc3e2:	2000      	movs	r0, #0
}
   bc3e4:	b05f      	add	sp, #380	; 0x17c
   bc3e6:	ecbd 8b02 	vpop	{d8}
   bc3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   bc3ee:	a849      	add	r0, sp, #292	; 0x124
   bc3f0:	f7fa fa8b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc3f4:	4629      	mov	r1, r5
   bc3f6:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc3f8:	6876      	ldr	r6, [r6, #4]
   bc3fa:	f7fa fa86 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc3fe:	b105      	cbz	r5, bc402 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x182>
   bc400:	686d      	ldr	r5, [r5, #4]
   bc402:	4621      	mov	r1, r4
   bc404:	a856      	add	r0, sp, #344	; 0x158
   bc406:	f7fa fa80 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc40a:	b104      	cbz	r4, bc40e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x18e>
   bc40c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc40e:	aa56      	add	r2, sp, #344	; 0x158
   bc410:	4641      	mov	r1, r8
   bc412:	a849      	add	r0, sp, #292	; 0x124
   bc414:	f7fa f869 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc418:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc41a:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc41e:	461a      	mov	r2, r3
   bc420:	4283      	cmp	r3, r0
   bc422:	eb72 010c 	sbcs.w	r1, r2, ip
   bc426:	f280 8175 	bge.w	bc714 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
  return lhs != rhs;
   bc42a:	5cf1      	ldrb	r1, [r6, r3]
   bc42c:	5cef      	ldrb	r7, [r5, r3]
   bc42e:	4079      	eors	r1, r7
    output_data[i] = F(input1_data[i], input2_data[i]);
   bc430:	54e1      	strb	r1, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc432:	3301      	adds	r3, #1
   bc434:	f142 0200 	adc.w	r2, r2, #0
   bc438:	e7f2      	b.n	bc420 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a0>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
   bc43a:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc43e:	4631      	mov	r1, r6
   bc440:	2f00      	cmp	r7, #0
   bc442:	f000 8089 	beq.w	bc558 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
   bc446:	a81c      	add	r0, sp, #112	; 0x70
   bc448:	f7fa fa5f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc44c:	6873      	ldr	r3, [r6, #4]
   bc44e:	9305      	str	r3, [sp, #20]
   bc450:	4629      	mov	r1, r5
   bc452:	a821      	add	r0, sp, #132	; 0x84
   bc454:	f7fa fa59 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc458:	b105      	cbz	r5, bc45c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   bc45a:	686d      	ldr	r5, [r5, #4]
   bc45c:	4621      	mov	r1, r4
   bc45e:	a826      	add	r0, sp, #152	; 0x98
   bc460:	f7fa fa53 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc464:	b104      	cbz	r4, bc468 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   bc466:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc468:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   bc46a:	2b04      	cmp	r3, #4
   bc46c:	f73f af50 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc470:	9b21      	ldr	r3, [sp, #132]	; 0x84
   bc472:	2b04      	cmp	r3, #4
   bc474:	f73f af4c 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc478:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bc47a:	2b04      	cmp	r3, #4
   bc47c:	f73f af48 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc480:	2301      	movs	r3, #1
   bc482:	aa26      	add	r2, sp, #152	; 0x98
   bc484:	2104      	movs	r1, #4
   bc486:	a849      	add	r0, sp, #292	; 0x124
   bc488:	f7f9 ffe0 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc48c:	ab56      	add	r3, sp, #344	; 0x158
   bc48e:	4642      	mov	r2, r8
   bc490:	a921      	add	r1, sp, #132	; 0x84
   bc492:	a81c      	add	r0, sp, #112	; 0x70
   bc494:	f7fa fae2 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc498:	2600      	movs	r6, #0
   bc49a:	2100      	movs	r1, #0
   bc49c:	a849      	add	r0, sp, #292	; 0x124
   bc49e:	f7f9 ff9b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc4a2:	42b0      	cmp	r0, r6
   bc4a4:	dd4d      	ble.n	bc542 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2c2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc4a6:	2700      	movs	r7, #0
   bc4a8:	2101      	movs	r1, #1
   bc4aa:	a849      	add	r0, sp, #292	; 0x124
   bc4ac:	f7f9 ff94 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc4b0:	42b8      	cmp	r0, r7
   bc4b2:	dd44      	ble.n	bc53e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2be>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc4b4:	f04f 0b00 	mov.w	fp, #0
   bc4b8:	2102      	movs	r1, #2
   bc4ba:	a849      	add	r0, sp, #292	; 0x124
   bc4bc:	f7f9 ff8c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc4c0:	4558      	cmp	r0, fp
   bc4c2:	dd3a      	ble.n	bc53a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc4c4:	f04f 0900 	mov.w	r9, #0
   bc4c8:	2103      	movs	r1, #3
   bc4ca:	a849      	add	r0, sp, #292	; 0x124
   bc4cc:	f7f9 ff84 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc4d0:	4548      	cmp	r0, r9
   bc4d2:	dd2f      	ble.n	bc534 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2b4>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc4d4:	f8cd 9000 	str.w	r9, [sp]
   bc4d8:	465b      	mov	r3, fp
   bc4da:	463a      	mov	r2, r7
   bc4dc:	4631      	mov	r1, r6
   bc4de:	4640      	mov	r0, r8
   bc4e0:	f7fa f88a 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc4e4:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc4e8:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc4ea:	465b      	mov	r3, fp
   bc4ec:	463a      	mov	r2, r7
   bc4ee:	4631      	mov	r1, r6
   bc4f0:	a856      	add	r0, sp, #344	; 0x158
   bc4f2:	f7fa f881 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc4f6:	9b05      	ldr	r3, [sp, #20]
   bc4f8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bc4fc:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs != rhs;
   bc500:	ed9a 7a00 	vldr	s14, [sl]
   bc504:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc508:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc50c:	eeb4 7a67 	vcmp.f32	s14, s15
   bc510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bc514:	465b      	mov	r3, fp
   bc516:	463a      	mov	r2, r7
   bc518:	4631      	mov	r1, r6
   bc51a:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc51c:	bf14      	ite	ne
   bc51e:	f04f 0a01 	movne.w	sl, #1
   bc522:	f04f 0a00 	moveq.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc526:	f7f9 ffbe 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc52a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc52e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc532:	e7c9      	b.n	bc4c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x248>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc534:	f10b 0b01 	add.w	fp, fp, #1
   bc538:	e7be      	b.n	bc4b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x238>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc53a:	3701      	adds	r7, #1
   bc53c:	e7b4      	b.n	bc4a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x228>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc53e:	3601      	adds	r6, #1
   bc540:	e7ab      	b.n	bc49a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x21a>
  const RuntimeShape output_shape =
   bc542:	a849      	add	r0, sp, #292	; 0x124
   bc544:	f7f9 ff3d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc548:	a826      	add	r0, sp, #152	; 0x98
   bc54a:	f7f9 ff3a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc54e:	a821      	add	r0, sp, #132	; 0x84
   bc550:	f7f9 ff37 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc554:	a81c      	add	r0, sp, #112	; 0x70
   bc556:	e742      	b.n	bc3de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc558:	a849      	add	r0, sp, #292	; 0x124
   bc55a:	f7fa f9d6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc55e:	4629      	mov	r1, r5
   bc560:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc562:	6876      	ldr	r6, [r6, #4]
   bc564:	f7fa f9d1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc568:	b105      	cbz	r5, bc56c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
   bc56a:	686d      	ldr	r5, [r5, #4]
   bc56c:	4621      	mov	r1, r4
   bc56e:	a856      	add	r0, sp, #344	; 0x158
   bc570:	f7fa f9cb 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc574:	b104      	cbz	r4, bc578 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
   bc576:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc578:	aa56      	add	r2, sp, #344	; 0x158
   bc57a:	4641      	mov	r1, r8
   bc57c:	a849      	add	r0, sp, #292	; 0x124
   bc57e:	f7f9 ffb4 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc582:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc584:	17c7      	asrs	r7, r0, #31
   bc586:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bc588:	4619      	mov	r1, r3
   bc58a:	4283      	cmp	r3, r0
   bc58c:	eb71 0607 	sbcs.w	r6, r1, r7
   bc590:	f280 80c0 	bge.w	bc714 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bc594:	ecb2 7a01 	vldmia	r2!, {s14}
   bc598:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs != rhs;
   bc59c:	eeb4 7a67 	vcmp.f32	s14, s15
   bc5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc5a4:	bf14      	ite	ne
   bc5a6:	2601      	movne	r6, #1
   bc5a8:	2600      	moveq	r6, #0
   bc5aa:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc5ac:	3301      	adds	r3, #1
   bc5ae:	f141 0100 	adc.w	r1, r1, #0
   bc5b2:	e7ea      	b.n	bc58a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x30a>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
   bc5b4:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc5b8:	4631      	mov	r1, r6
   bc5ba:	2f00      	cmp	r7, #0
   bc5bc:	f000 8081 	beq.w	bc6c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x442>
   bc5c0:	a82b      	add	r0, sp, #172	; 0xac
   bc5c2:	f7fa f9a2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc5c6:	6873      	ldr	r3, [r6, #4]
   bc5c8:	9305      	str	r3, [sp, #20]
   bc5ca:	4629      	mov	r1, r5
   bc5cc:	a830      	add	r0, sp, #192	; 0xc0
   bc5ce:	f7fa f99c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc5d2:	b105      	cbz	r5, bc5d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x356>
   bc5d4:	686d      	ldr	r5, [r5, #4]
   bc5d6:	4621      	mov	r1, r4
   bc5d8:	a835      	add	r0, sp, #212	; 0xd4
   bc5da:	f7fa f996 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc5de:	b104      	cbz	r4, bc5e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x362>
   bc5e0:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc5e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   bc5e4:	2b04      	cmp	r3, #4
   bc5e6:	f73f ae93 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc5ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bc5ec:	2b04      	cmp	r3, #4
   bc5ee:	f73f ae8f 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc5f2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bc5f4:	2b04      	cmp	r3, #4
   bc5f6:	f73f ae8b 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc5fa:	2301      	movs	r3, #1
   bc5fc:	aa35      	add	r2, sp, #212	; 0xd4
   bc5fe:	2104      	movs	r1, #4
   bc600:	a849      	add	r0, sp, #292	; 0x124
   bc602:	f7f9 ff23 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc606:	ab56      	add	r3, sp, #344	; 0x158
   bc608:	4642      	mov	r2, r8
   bc60a:	a930      	add	r1, sp, #192	; 0xc0
   bc60c:	a82b      	add	r0, sp, #172	; 0xac
   bc60e:	f7fa fa25 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc612:	2600      	movs	r6, #0
   bc614:	2100      	movs	r1, #0
   bc616:	a849      	add	r0, sp, #292	; 0x124
   bc618:	f7f9 fede 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc61c:	42b0      	cmp	r0, r6
   bc61e:	dd45      	ble.n	bc6ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x42c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc620:	2700      	movs	r7, #0
   bc622:	2101      	movs	r1, #1
   bc624:	a849      	add	r0, sp, #292	; 0x124
   bc626:	f7f9 fed7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc62a:	42b8      	cmp	r0, r7
   bc62c:	dd3c      	ble.n	bc6a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc62e:	f04f 0b00 	mov.w	fp, #0
   bc632:	2102      	movs	r1, #2
   bc634:	a849      	add	r0, sp, #292	; 0x124
   bc636:	f7f9 fecf 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc63a:	4558      	cmp	r0, fp
   bc63c:	dd32      	ble.n	bc6a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x424>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc63e:	f04f 0900 	mov.w	r9, #0
   bc642:	2103      	movs	r1, #3
   bc644:	a849      	add	r0, sp, #292	; 0x124
   bc646:	f7f9 fec7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc64a:	4548      	cmp	r0, r9
   bc64c:	dd27      	ble.n	bc69e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x41e>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc64e:	f8cd 9000 	str.w	r9, [sp]
   bc652:	465b      	mov	r3, fp
   bc654:	463a      	mov	r2, r7
   bc656:	4631      	mov	r1, r6
   bc658:	4640      	mov	r0, r8
   bc65a:	f7f9 ffcd 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc65e:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc662:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc664:	465b      	mov	r3, fp
   bc666:	463a      	mov	r2, r7
   bc668:	4631      	mov	r1, r6
   bc66a:	a856      	add	r0, sp, #344	; 0x158
   bc66c:	f7f9 ffc4 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs != rhs;
   bc670:	9b05      	ldr	r3, [sp, #20]
   bc672:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bc676:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc67a:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc67e:	ebb1 0a02 	subs.w	sl, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bc682:	465b      	mov	r3, fp
   bc684:	463a      	mov	r2, r7
   bc686:	4631      	mov	r1, r6
   bc688:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc68a:	bf18      	it	ne
   bc68c:	f04f 0a01 	movne.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc690:	f7f9 ff09 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc694:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc698:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc69c:	e7d1      	b.n	bc642 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3c2>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc69e:	f10b 0b01 	add.w	fp, fp, #1
   bc6a2:	e7c6      	b.n	bc632 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3b2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc6a4:	3701      	adds	r7, #1
   bc6a6:	e7bc      	b.n	bc622 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc6a8:	3601      	adds	r6, #1
   bc6aa:	e7b3      	b.n	bc614 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x394>
  const RuntimeShape output_shape =
   bc6ac:	a849      	add	r0, sp, #292	; 0x124
   bc6ae:	f7f9 fe88 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc6b2:	a835      	add	r0, sp, #212	; 0xd4
   bc6b4:	f7f9 fe85 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc6b8:	a830      	add	r0, sp, #192	; 0xc0
   bc6ba:	f7f9 fe82 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc6be:	a82b      	add	r0, sp, #172	; 0xac
   bc6c0:	e68d      	b.n	bc3de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc6c2:	a849      	add	r0, sp, #292	; 0x124
   bc6c4:	f7fa f921 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc6c8:	4629      	mov	r1, r5
   bc6ca:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc6cc:	6876      	ldr	r6, [r6, #4]
   bc6ce:	f7fa f91c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc6d2:	b105      	cbz	r5, bc6d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
   bc6d4:	686d      	ldr	r5, [r5, #4]
   bc6d6:	4621      	mov	r1, r4
   bc6d8:	a856      	add	r0, sp, #344	; 0x158
   bc6da:	f7fa f916 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc6de:	b104      	cbz	r4, bc6e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x462>
   bc6e0:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc6e2:	aa56      	add	r2, sp, #344	; 0x158
   bc6e4:	4641      	mov	r1, r8
   bc6e6:	a849      	add	r0, sp, #292	; 0x124
   bc6e8:	f7f9 feff 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc6ec:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc6ee:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc6f2:	461f      	mov	r7, r3
   bc6f4:	4283      	cmp	r3, r0
   bc6f6:	eb77 020c 	sbcs.w	r2, r7, ip
   bc6fa:	da0b      	bge.n	bc714 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x494>
  return lhs != rhs;
   bc6fc:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bc700:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bc704:	1a52      	subs	r2, r2, r1
   bc706:	bf18      	it	ne
   bc708:	2201      	movne	r2, #1
   bc70a:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc70c:	3301      	adds	r3, #1
   bc70e:	f147 0700 	adc.w	r7, r7, #0
   bc712:	e7ef      	b.n	bc6f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x474>
   bc714:	a856      	add	r0, sp, #344	; 0x158
   bc716:	f7f9 fe54 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc71a:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
   bc71c:	f7f9 fe51 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc720:	a849      	add	r0, sp, #292	; 0x124
   bc722:	e65c      	b.n	bc3de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc724:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc728:	4631      	mov	r1, r6
   bc72a:	2f00      	cmp	r7, #0
   bc72c:	f000 808c 	beq.w	bc848 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c8>
   bc730:	a83a      	add	r0, sp, #232	; 0xe8
   bc732:	f7fa f8ea 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc736:	4629      	mov	r1, r5
   bc738:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc73a:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bc73e:	f7fa f8e4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc742:	b105      	cbz	r5, bc746 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4c6>
   bc744:	686d      	ldr	r5, [r5, #4]
   bc746:	4621      	mov	r1, r4
   bc748:	a844      	add	r0, sp, #272	; 0x110
   bc74a:	f7fa f8de 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc74e:	b104      	cbz	r4, bc752 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d2>
   bc750:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bc752:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bc754:	2b04      	cmp	r3, #4
   bc756:	f73f addb 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bc75a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bc75c:	2b04      	cmp	r3, #4
   bc75e:	f73f add7 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bc762:	9b44      	ldr	r3, [sp, #272]	; 0x110
   bc764:	2b04      	cmp	r3, #4
   bc766:	f73f add3 	bgt.w	bc310 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bc76a:	2301      	movs	r3, #1
   bc76c:	aa44      	add	r2, sp, #272	; 0x110
   bc76e:	2104      	movs	r1, #4
   bc770:	a849      	add	r0, sp, #292	; 0x124
   bc772:	f7f9 fe6b 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bc776:	ab56      	add	r3, sp, #344	; 0x158
   bc778:	4642      	mov	r2, r8
   bc77a:	a93f      	add	r1, sp, #252	; 0xfc
   bc77c:	a83a      	add	r0, sp, #232	; 0xe8
   bc77e:	f7fa f96d 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc782:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc786:	2700      	movs	r7, #0
   bc788:	2100      	movs	r1, #0
   bc78a:	a849      	add	r0, sp, #292	; 0x124
   bc78c:	f7f9 fe24 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc790:	42b8      	cmp	r0, r7
   bc792:	dd4e      	ble.n	bc832 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5b2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc794:	f04f 0800 	mov.w	r8, #0
   bc798:	2101      	movs	r1, #1
   bc79a:	a849      	add	r0, sp, #292	; 0x124
   bc79c:	f7f9 fe1c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc7a0:	4540      	cmp	r0, r8
   bc7a2:	dd44      	ble.n	bc82e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5ae>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc7a4:	2600      	movs	r6, #0
   bc7a6:	2102      	movs	r1, #2
   bc7a8:	a849      	add	r0, sp, #292	; 0x124
   bc7aa:	f7f9 fe15 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc7ae:	42b0      	cmp	r0, r6
   bc7b0:	dd3a      	ble.n	bc828 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5a8>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc7b2:	f04f 0900 	mov.w	r9, #0
   bc7b6:	2103      	movs	r1, #3
   bc7b8:	a849      	add	r0, sp, #292	; 0x124
   bc7ba:	f7f9 fe0d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bc7be:	4548      	cmp	r0, r9
   bc7c0:	dd30      	ble.n	bc824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5a4>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc7c2:	f8cd 9000 	str.w	r9, [sp]
   bc7c6:	4633      	mov	r3, r6
   bc7c8:	4642      	mov	r2, r8
   bc7ca:	4639      	mov	r1, r7
   bc7cc:	ee18 0a10 	vmov	r0, s16
   bc7d0:	f7f9 ff12 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc7d4:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc7d8:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bc7da:	4633      	mov	r3, r6
   bc7dc:	4642      	mov	r2, r8
   bc7de:	4639      	mov	r1, r7
   bc7e0:	a856      	add	r0, sp, #344	; 0x158
   bc7e2:	f7f9 ff09 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bc7e6:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bc7ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs != rhs;
   bc7ee:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bc7f2:	6849      	ldr	r1, [r1, #4]
   bc7f4:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bc7f8:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bc7fa:	f8cd 9000 	str.w	r9, [sp]
  return lhs != rhs;
   bc7fe:	4291      	cmp	r1, r2
   bc800:	bf08      	it	eq
   bc802:	4283      	cmpeq	r3, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc804:	4633      	mov	r3, r6
   bc806:	4642      	mov	r2, r8
   bc808:	4639      	mov	r1, r7
   bc80a:	a849      	add	r0, sp, #292	; 0x124
  return lhs != rhs;
   bc80c:	bf14      	ite	ne
   bc80e:	f04f 0a01 	movne.w	sl, #1
   bc812:	f04f 0a00 	moveq.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bc816:	f7f9 fe46 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc81a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bc81e:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bc822:	e7c8      	b.n	bc7b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x536>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bc824:	3601      	adds	r6, #1
   bc826:	e7be      	b.n	bc7a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x526>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bc828:	f108 0801 	add.w	r8, r8, #1
   bc82c:	e7b4      	b.n	bc798 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x518>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bc82e:	3701      	adds	r7, #1
   bc830:	e7aa      	b.n	bc788 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x508>
  const RuntimeShape output_shape =
   bc832:	a849      	add	r0, sp, #292	; 0x124
   bc834:	f7f9 fdc5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc838:	a844      	add	r0, sp, #272	; 0x110
   bc83a:	f7f9 fdc2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc83e:	a83f      	add	r0, sp, #252	; 0xfc
   bc840:	f7f9 fdbf 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc844:	a83a      	add	r0, sp, #232	; 0xe8
   bc846:	e5ca      	b.n	bc3de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc848:	a849      	add	r0, sp, #292	; 0x124
   bc84a:	f7fa f85e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc84e:	4629      	mov	r1, r5
   bc850:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc852:	6877      	ldr	r7, [r6, #4]
   bc854:	f7fa f859 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc858:	b105      	cbz	r5, bc85c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5dc>
   bc85a:	686d      	ldr	r5, [r5, #4]
   bc85c:	4621      	mov	r1, r4
   bc85e:	a856      	add	r0, sp, #344	; 0x158
   bc860:	f7fa f853 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc864:	b104      	cbz	r4, bc868 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x5e8>
   bc866:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc868:	4641      	mov	r1, r8
   bc86a:	aa56      	add	r2, sp, #344	; 0x158
   bc86c:	a849      	add	r0, sp, #292	; 0x124
   bc86e:	f7f9 fe3c 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bc872:	2300      	movs	r3, #0
  const int64_t flatsize =
   bc874:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   bc878:	f1a7 0e08 	sub.w	lr, r7, #8
   bc87c:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bc87e:	4698      	mov	r8, r3
   bc880:	4283      	cmp	r3, r0
   bc882:	eb78 020c 	sbcs.w	r2, r8, ip
   bc886:	da11      	bge.n	bc8ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x62c>
  return lhs != rhs;
   bc888:	f85e 6f08 	ldr.w	r6, [lr, #8]!
   bc88c:	f855 7f08 	ldr.w	r7, [r5, #8]!
   bc890:	f8de 1004 	ldr.w	r1, [lr, #4]
   bc894:	686a      	ldr	r2, [r5, #4]
   bc896:	4291      	cmp	r1, r2
   bc898:	bf08      	it	eq
   bc89a:	42be      	cmpeq	r6, r7
   bc89c:	bf14      	ite	ne
   bc89e:	2601      	movne	r6, #1
   bc8a0:	2600      	moveq	r6, #0
   bc8a2:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc8a4:	3301      	adds	r3, #1
   bc8a6:	f148 0800 	adc.w	r8, r8, #0
   bc8aa:	e7e9      	b.n	bc880 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x600>
   bc8ac:	a856      	add	r0, sp, #344	; 0x158
   bc8ae:	f7f9 fd88 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc8b2:	a84e      	add	r0, sp, #312	; 0x138
   bc8b4:	e732      	b.n	bc71c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x49c>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   bc8b6:	6933      	ldr	r3, [r6, #16]
   bc8b8:	68f0      	ldr	r0, [r6, #12]
   bc8ba:	f1c3 0900 	rsb	r9, r3, #0
   bc8be:	692b      	ldr	r3, [r5, #16]
   bc8c0:	f1c3 0800 	rsb	r8, r3, #0
   bc8c4:	f7f7 fd10 	bl	b42e8 <__aeabi_f2d>
   bc8c8:	ec41 0b10 	vmov	d0, r0, r1
   bc8cc:	a935      	add	r1, sp, #212	; 0xd4
   bc8ce:	a830      	add	r0, sp, #192	; 0xc0
   bc8d0:	f7f8 fd0c 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc8d4:	68e8      	ldr	r0, [r5, #12]
   bc8d6:	f7f7 fd07 	bl	b42e8 <__aeabi_f2d>
   bc8da:	ec41 0b10 	vmov	d0, r0, r1
   bc8de:	a93f      	add	r1, sp, #252	; 0xfc
   bc8e0:	a83a      	add	r0, sp, #232	; 0xe8
   bc8e2:	f7f8 fd03 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bc8e6:	2308      	movs	r3, #8
   bc8e8:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bc8ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bc8ee:	9358      	str	r3, [sp, #352]	; 0x160
   bc8f0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bc8f2:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bc8f6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bc8f8:	935b      	str	r3, [sp, #364]	; 0x16c
   bc8fa:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bc8fc:	935c      	str	r3, [sp, #368]	; 0x170
   bc8fe:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bc902:	4631      	mov	r1, r6
   bc904:	a844      	add	r0, sp, #272	; 0x110
   bc906:	b1ff      	cbz	r7, bc948 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6c8>
   bc908:	f7f9 ffff 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc90c:	6872      	ldr	r2, [r6, #4]
   bc90e:	9205      	str	r2, [sp, #20]
   bc910:	4629      	mov	r1, r5
   bc912:	a849      	add	r0, sp, #292	; 0x124
   bc914:	f7f9 fff9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc918:	4621      	mov	r1, r4
   bc91a:	4640      	mov	r0, r8
   bc91c:	686d      	ldr	r5, [r5, #4]
   bc91e:	f7f9 fff4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc922:	9a05      	ldr	r2, [sp, #20]
   bc924:	b104      	cbz	r4, bc928 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
   bc926:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(NotEqual);
   bc928:	9500      	str	r5, [sp, #0]
   bc92a:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bc92e:	ab49      	add	r3, sp, #292	; 0x124
   bc930:	a944      	add	r1, sp, #272	; 0x110
   bc932:	a856      	add	r0, sp, #344	; 0x158
   bc934:	f7ff fb6e 	bl	bc014 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bc938:	4640      	mov	r0, r8
   bc93a:	f7f9 fd42 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc93e:	a849      	add	r0, sp, #292	; 0x124
   bc940:	f7f9 fd3f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bc944:	a844      	add	r0, sp, #272	; 0x110
   bc946:	e54a      	b.n	bc3de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   bc948:	f7f9 ffdf 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bc94c:	6873      	ldr	r3, [r6, #4]
   bc94e:	9305      	str	r3, [sp, #20]
   bc950:	4629      	mov	r1, r5
   bc952:	a849      	add	r0, sp, #292	; 0x124
   bc954:	f7f9 ffd9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bc958:	686b      	ldr	r3, [r5, #4]
   bc95a:	9306      	str	r3, [sp, #24]
   bc95c:	4621      	mov	r1, r4
   bc95e:	4640      	mov	r0, r8
   bc960:	f7f9 ffd3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bc964:	b104      	cbz	r4, bc968 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e8>
   bc966:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bc968:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bc96c:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bc96e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bc970:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bc972:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc976:	aa4e      	add	r2, sp, #312	; 0x138
   bc978:	a949      	add	r1, sp, #292	; 0x124
   bc97a:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bc97c:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc980:	f7f9 fdb3 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bc984:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bc988:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bc98a:	2500      	movs	r5, #0
  const int64_t flatsize =
   bc98c:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bc98e:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bc990:	462b      	mov	r3, r5
   bc992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc994:	930b      	str	r3, [sp, #44]	; 0x2c
   bc996:	4545      	cmp	r5, r8
   bc998:	eb73 0202 	sbcs.w	r2, r3, r2
   bc99c:	f280 80af 	bge.w	bcafe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    const int32 input2_val = input2_offset + input2_data[i];
   bc9a0:	9b06      	ldr	r3, [sp, #24]
   bc9a2:	5d5f      	ldrb	r7, [r3, r5]
   bc9a4:	9b08      	ldr	r3, [sp, #32]
   bc9a6:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bc9a8:	9b05      	ldr	r3, [sp, #20]
   bc9aa:	5d58      	ldrb	r0, [r3, r5]
   bc9ac:	9b07      	ldr	r3, [sp, #28]
   bc9ae:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc9b0:	465a      	mov	r2, fp
   bc9b2:	4651      	mov	r1, sl
   bc9b4:	fa00 f009 	lsl.w	r0, r0, r9
   bc9b8:	f7f9 fdd4 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bc9bc:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc9c0:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bc9c2:	ee18 2a10 	vmov	r2, s16
   bc9c6:	4631      	mov	r1, r6
   bc9c8:	4638      	mov	r0, r7
   bc9ca:	f7f9 fdcb 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs != rhs;
   bc9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc9d0:	1a18      	subs	r0, r3, r0
   bc9d2:	bf18      	it	ne
   bc9d4:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bc9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs != rhs;
   bc9d8:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bc9da:	3501      	adds	r5, #1
   bc9dc:	f143 0300 	adc.w	r3, r3, #0
   bc9e0:	e7d7      	b.n	bc992 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x712>
   bc9e2:	6933      	ldr	r3, [r6, #16]
   bc9e4:	68f0      	ldr	r0, [r6, #12]
   bc9e6:	f1c3 0900 	rsb	r9, r3, #0
   bc9ea:	692b      	ldr	r3, [r5, #16]
   bc9ec:	f1c3 0800 	rsb	r8, r3, #0
   bc9f0:	f7f7 fc7a 	bl	b42e8 <__aeabi_f2d>
   bc9f4:	ec41 0b10 	vmov	d0, r0, r1
   bc9f8:	a935      	add	r1, sp, #212	; 0xd4
   bc9fa:	a830      	add	r0, sp, #192	; 0xc0
   bc9fc:	f7f8 fc76 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bca00:	68e8      	ldr	r0, [r5, #12]
   bca02:	f7f7 fc71 	bl	b42e8 <__aeabi_f2d>
   bca06:	ec41 0b10 	vmov	d0, r0, r1
   bca0a:	a93f      	add	r1, sp, #252	; 0xfc
   bca0c:	a83a      	add	r0, sp, #232	; 0xe8
   bca0e:	f7f8 fc6d 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bca12:	2308      	movs	r3, #8
   bca14:	e9cd 3956 	strd	r3, r9, [sp, #344]	; 0x158
   bca18:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bca1a:	9358      	str	r3, [sp, #352]	; 0x160
   bca1c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   bca1e:	e9cd 3859 	strd	r3, r8, [sp, #356]	; 0x164
   bca22:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   bca24:	935b      	str	r3, [sp, #364]	; 0x16c
   bca26:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   bca28:	935c      	str	r3, [sp, #368]	; 0x170
   bca2a:	f50d 789c 	add.w	r8, sp, #312	; 0x138
   bca2e:	4631      	mov	r1, r6
   bca30:	a844      	add	r0, sp, #272	; 0x110
   bca32:	b1c7      	cbz	r7, bca66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e6>
   bca34:	f7f9 ff69 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bca38:	6872      	ldr	r2, [r6, #4]
   bca3a:	9205      	str	r2, [sp, #20]
   bca3c:	4629      	mov	r1, r5
   bca3e:	a849      	add	r0, sp, #292	; 0x124
   bca40:	f7f9 ff63 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bca44:	4621      	mov	r1, r4
   bca46:	4640      	mov	r0, r8
   bca48:	686d      	ldr	r5, [r5, #4]
   bca4a:	f7f9 ff5e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bca4e:	9a05      	ldr	r2, [sp, #20]
   bca50:	b104      	cbz	r4, bca54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
   bca52:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(NotEqual);
   bca54:	9500      	str	r5, [sp, #0]
   bca56:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bca5a:	ab49      	add	r3, sp, #292	; 0x124
   bca5c:	a944      	add	r1, sp, #272	; 0x110
   bca5e:	a856      	add	r0, sp, #344	; 0x158
   bca60:	f7ff fb73 	bl	bc14a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bca64:	e768      	b.n	bc938 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b8>
   bca66:	f7f9 ff50 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bca6a:	6873      	ldr	r3, [r6, #4]
   bca6c:	9305      	str	r3, [sp, #20]
   bca6e:	4629      	mov	r1, r5
   bca70:	a849      	add	r0, sp, #292	; 0x124
   bca72:	f7f9 ff4a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bca76:	686b      	ldr	r3, [r5, #4]
   bca78:	9306      	str	r3, [sp, #24]
   bca7a:	4621      	mov	r1, r4
   bca7c:	4640      	mov	r0, r8
   bca7e:	f7f9 ff44 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bca82:	b104      	cbz	r4, bca86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x806>
   bca84:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bca86:	e9dd 9356 	ldrd	r9, r3, [sp, #344]	; 0x158
   bca8a:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bca8c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   bca8e:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bca90:	e9dd 635b 	ldrd	r6, r3, [sp, #364]	; 0x16c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bca94:	aa4e      	add	r2, sp, #312	; 0x138
   bca96:	a949      	add	r1, sp, #292	; 0x124
   bca98:	a844      	add	r0, sp, #272	; 0x110
  int input2_shift = op_params.input2_shift;
   bca9a:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bca9e:	f7f9 fd24 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bcaa2:	e9dd ab58 	ldrd	sl, fp, [sp, #352]	; 0x160
  const int64_t flatsize =
   bcaa6:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bcaa8:	2500      	movs	r5, #0
  const int64_t flatsize =
   bcaaa:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bcaac:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bcaae:	462b      	mov	r3, r5
   bcab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bcab2:	930b      	str	r3, [sp, #44]	; 0x2c
   bcab4:	4545      	cmp	r5, r8
   bcab6:	eb73 0202 	sbcs.w	r2, r3, r2
   bcaba:	da20      	bge.n	bcafe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    const int32 input2_val = input2_offset + input2_data[i];
   bcabc:	9b06      	ldr	r3, [sp, #24]
   bcabe:	575f      	ldrsb	r7, [r3, r5]
   bcac0:	9b08      	ldr	r3, [sp, #32]
   bcac2:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bcac4:	9b05      	ldr	r3, [sp, #20]
   bcac6:	5758      	ldrsb	r0, [r3, r5]
   bcac8:	9b07      	ldr	r3, [sp, #28]
   bcaca:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcacc:	465a      	mov	r2, fp
   bcace:	4651      	mov	r1, sl
   bcad0:	fa00 f009 	lsl.w	r0, r0, r9
   bcad4:	f7f9 fd46 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcad8:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcadc:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcade:	ee18 2a10 	vmov	r2, s16
   bcae2:	4631      	mov	r1, r6
   bcae4:	4638      	mov	r0, r7
   bcae6:	f7f9 fd3d 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs != rhs;
   bcaea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcaec:	1a18      	subs	r0, r3, r0
   bcaee:	bf18      	it	ne
   bcaf0:	2001      	movne	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bcaf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs != rhs;
   bcaf4:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bcaf6:	3501      	adds	r5, #1
   bcaf8:	f143 0300 	adc.w	r3, r3, #0
   bcafc:	e7d8      	b.n	bcab0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x830>
   bcafe:	a84e      	add	r0, sp, #312	; 0x138
   bcb00:	e71b      	b.n	bc93a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x6ba>
      context->ReportError(
   bcb02:	4640      	mov	r0, r8
   bcb04:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bcb08:	4901      	ldr	r1, [pc, #4]	; (bcb10 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x890>)
   bcb0a:	4798      	blx	r3
      return kTfLiteError;
   bcb0c:	2001      	movs	r0, #1
   bcb0e:	e469      	b.n	bc3e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x164>
   bcb10:	000c8ad3 	.word	0x000c8ad3

000bcb14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bcb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb18:	ed2d 8b04 	vpush	{d8-d9}
   bcb1c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcb1e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bcb20:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcb22:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bcb24:	9204      	str	r2, [sp, #16]
   bcb26:	4604      	mov	r4, r0
   bcb28:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bcb2a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcb2c:	dd01      	ble.n	bcb32 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bcb2e:	f007 feb5 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcb32:	6833      	ldr	r3, [r6, #0]
   bcb34:	2b04      	cmp	r3, #4
   bcb36:	dcfa      	bgt.n	bcb2e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcb38:	6813      	ldr	r3, [r2, #0]
   bcb3a:	2b04      	cmp	r3, #4
   bcb3c:	dcf7      	bgt.n	bcb2e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bcb3e:	2301      	movs	r3, #1
   bcb40:	2104      	movs	r1, #4
   bcb42:	a807      	add	r0, sp, #28
   bcb44:	f7f9 fc82 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcb48:	ab14      	add	r3, sp, #80	; 0x50
   bcb4a:	aa0c      	add	r2, sp, #48	; 0x30
   bcb4c:	4631      	mov	r1, r6
   bcb4e:	4628      	mov	r0, r5
   bcb50:	f7f9 ff84 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bcb54:	e9d4 a300 	ldrd	sl, r3, [r4]
   bcb58:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcb5a:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bcb5c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcb60:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bcb64:	68e3      	ldr	r3, [r4, #12]
   bcb66:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bcb6a:	6923      	ldr	r3, [r4, #16]
   bcb6c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bcb6e:	6963      	ldr	r3, [r4, #20]
   bcb70:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcb74:	2400      	movs	r4, #0
   bcb76:	2100      	movs	r1, #0
   bcb78:	a807      	add	r0, sp, #28
   bcb7a:	f7f9 fc2d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb7e:	42a0      	cmp	r0, r4
   bcb80:	dd5c      	ble.n	bcc3c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcb82:	2500      	movs	r5, #0
   bcb84:	af07      	add	r7, sp, #28
   bcb86:	2101      	movs	r1, #1
   bcb88:	4638      	mov	r0, r7
   bcb8a:	f7f9 fc25 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb8e:	42a8      	cmp	r0, r5
   bcb90:	dd52      	ble.n	bcc38 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcb92:	2600      	movs	r6, #0
   bcb94:	2102      	movs	r1, #2
   bcb96:	4638      	mov	r0, r7
   bcb98:	f7f9 fc1e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcb9c:	42b0      	cmp	r0, r6
   bcb9e:	dd49      	ble.n	bcc34 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcba0:	f04f 0800 	mov.w	r8, #0
   bcba4:	2103      	movs	r1, #3
   bcba6:	4638      	mov	r0, r7
   bcba8:	f7f9 fc16 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcbac:	4540      	cmp	r0, r8
   bcbae:	dd3f      	ble.n	bcc30 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bcbb0:	f8cd 8000 	str.w	r8, [sp]
   bcbb4:	4633      	mov	r3, r6
   bcbb6:	462a      	mov	r2, r5
   bcbb8:	4621      	mov	r1, r4
   bcbba:	a80c      	add	r0, sp, #48	; 0x30
   bcbbc:	f7f9 fd1c 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcbc0:	9b04      	ldr	r3, [sp, #16]
   bcbc2:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bcbc6:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcbc8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bcbcc:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcbce:	462a      	mov	r2, r5
   bcbd0:	4633      	mov	r3, r6
   bcbd2:	4621      	mov	r1, r4
   bcbd4:	a814      	add	r0, sp, #80	; 0x50
   bcbd6:	f7f9 fd0f 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcbda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bcbdc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcbde:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bcbe0:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcbe2:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcbe6:	ee18 2a90 	vmov	r2, s17
   bcbea:	ee18 1a10 	vmov	r1, s16
   bcbee:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcbf2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcbf4:	f7f9 fcb6 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcbf8:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcbfa:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcbfc:	ee19 1a10 	vmov	r1, s18
   bcc00:	465a      	mov	r2, fp
   bcc02:	4618      	mov	r0, r3
   bcc04:	f7f9 fcae 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bcc08:	f8cd 8000 	str.w	r8, [sp]
  return lhs > rhs;
   bcc0c:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bcc0e:	4633      	mov	r3, r6
   bcc10:	462a      	mov	r2, r5
   bcc12:	4621      	mov	r1, r4
   bcc14:	4638      	mov	r0, r7
  return lhs > rhs;
   bcc16:	bfd4      	ite	le
   bcc18:	f04f 0900 	movle.w	r9, #0
   bcc1c:	f04f 0901 	movgt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcc20:	f7f9 fc41 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bcc24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcc26:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcc2a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcc2e:	e7b9      	b.n	bcba4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcc30:	3601      	adds	r6, #1
   bcc32:	e7af      	b.n	bcb94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcc34:	3501      	adds	r5, #1
   bcc36:	e7a5      	b.n	bcb84 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcc38:	3401      	adds	r4, #1
   bcc3a:	e79c      	b.n	bcb76 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bcc3c:	a807      	add	r0, sp, #28
   bcc3e:	f7f9 fbc0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bcc42:	b01d      	add	sp, #116	; 0x74
   bcc44:	ecbd 8b04 	vpop	{d8-d9}
   bcc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcc4c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bcc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc50:	ed2d 8b04 	vpush	{d8-d9}
   bcc54:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcc56:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bcc58:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcc5a:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bcc5c:	9204      	str	r2, [sp, #16]
   bcc5e:	4604      	mov	r4, r0
   bcc60:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bcc62:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcc64:	dd01      	ble.n	bcc6a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bcc66:	f007 fe19 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcc6a:	6833      	ldr	r3, [r6, #0]
   bcc6c:	2b04      	cmp	r3, #4
   bcc6e:	dcfa      	bgt.n	bcc66 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcc70:	6813      	ldr	r3, [r2, #0]
   bcc72:	2b04      	cmp	r3, #4
   bcc74:	dcf7      	bgt.n	bcc66 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bcc76:	2301      	movs	r3, #1
   bcc78:	2104      	movs	r1, #4
   bcc7a:	a807      	add	r0, sp, #28
   bcc7c:	f7f9 fbe6 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcc80:	ab14      	add	r3, sp, #80	; 0x50
   bcc82:	aa0c      	add	r2, sp, #48	; 0x30
   bcc84:	4631      	mov	r1, r6
   bcc86:	4628      	mov	r0, r5
   bcc88:	f7f9 fee8 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bcc8c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bcc90:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcc92:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bcc94:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bcc98:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bcc9c:	68e3      	ldr	r3, [r4, #12]
   bcc9e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bcca2:	6923      	ldr	r3, [r4, #16]
   bcca4:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bcca6:	6963      	ldr	r3, [r4, #20]
   bcca8:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bccac:	2400      	movs	r4, #0
   bccae:	2100      	movs	r1, #0
   bccb0:	a807      	add	r0, sp, #28
   bccb2:	f7f9 fb91 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bccb6:	42a0      	cmp	r0, r4
   bccb8:	dd5c      	ble.n	bcd74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bccba:	2500      	movs	r5, #0
   bccbc:	af07      	add	r7, sp, #28
   bccbe:	2101      	movs	r1, #1
   bccc0:	4638      	mov	r0, r7
   bccc2:	f7f9 fb89 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bccc6:	42a8      	cmp	r0, r5
   bccc8:	dd52      	ble.n	bcd70 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bccca:	2600      	movs	r6, #0
   bcccc:	2102      	movs	r1, #2
   bccce:	4638      	mov	r0, r7
   bccd0:	f7f9 fb82 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bccd4:	42b0      	cmp	r0, r6
   bccd6:	dd49      	ble.n	bcd6c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bccd8:	f04f 0800 	mov.w	r8, #0
   bccdc:	2103      	movs	r1, #3
   bccde:	4638      	mov	r0, r7
   bcce0:	f7f9 fb7a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcce4:	4540      	cmp	r0, r8
   bcce6:	dd3f      	ble.n	bcd68 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bcce8:	f8cd 8000 	str.w	r8, [sp]
   bccec:	4633      	mov	r3, r6
   bccee:	462a      	mov	r2, r5
   bccf0:	4621      	mov	r1, r4
   bccf2:	a80c      	add	r0, sp, #48	; 0x30
   bccf4:	f7f9 fc80 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bccf8:	9b04      	ldr	r3, [sp, #16]
   bccfa:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bccfe:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcd00:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bcd04:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcd06:	462a      	mov	r2, r5
   bcd08:	4633      	mov	r3, r6
   bcd0a:	4621      	mov	r1, r4
   bcd0c:	a814      	add	r0, sp, #80	; 0x50
   bcd0e:	f7f9 fc73 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bcd12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bcd14:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bcd16:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bcd18:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcd1a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcd1e:	ee18 2a90 	vmov	r2, s17
   bcd22:	ee18 1a10 	vmov	r1, s16
   bcd26:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bcd2a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcd2c:	f7f9 fc1a 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcd30:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcd32:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bcd34:	ee19 1a10 	vmov	r1, s18
   bcd38:	465a      	mov	r2, fp
   bcd3a:	4618      	mov	r0, r3
   bcd3c:	f7f9 fc12 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bcd40:	f8cd 8000 	str.w	r8, [sp]
  return lhs > rhs;
   bcd44:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bcd46:	4633      	mov	r3, r6
   bcd48:	462a      	mov	r2, r5
   bcd4a:	4621      	mov	r1, r4
   bcd4c:	4638      	mov	r0, r7
  return lhs > rhs;
   bcd4e:	bfd4      	ite	le
   bcd50:	f04f 0900 	movle.w	r9, #0
   bcd54:	f04f 0901 	movgt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcd58:	f7f9 fba5 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bcd5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcd5e:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bcd62:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcd66:	e7b9      	b.n	bccdc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcd68:	3601      	adds	r6, #1
   bcd6a:	e7af      	b.n	bcccc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcd6c:	3501      	adds	r5, #1
   bcd6e:	e7a5      	b.n	bccbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcd70:	3401      	adds	r4, #1
   bcd72:	e79c      	b.n	bccae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bcd74:	a807      	add	r0, sp, #28
   bcd76:	f7f9 fb24 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bcd7a:	b01d      	add	sp, #116	; 0x74
   bcd7c:	ecbd 8b04 	vpop	{d8-d9}
   bcd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   bcd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd88:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcd8c:	680a      	ldr	r2, [r1, #0]
   bcd8e:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bcd92:	6895      	ldr	r5, [r2, #8]
   bcd94:	4680      	mov	r8, r0
   bcd96:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcd98:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcd9a:	2338      	movs	r3, #56	; 0x38
   bcd9c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcda0:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bcda2:	fb03 a505 	mla	r5, r3, r5, sl
   bcda6:	eb0a 0609 	add.w	r6, sl, r9
   bcdaa:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bcdac:	4629      	mov	r1, r5
   bcdae:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bcdb0:	fb03 a404 	mla	r4, r3, r4, sl
   bcdb4:	f7f8 fa32 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bcdb8:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bcdbc:	f080 0001 	eor.w	r0, r0, #1
   bcdc0:	1e53      	subs	r3, r2, #1
   bcdc2:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bcdc4:	2b08      	cmp	r3, #8
   bcdc6:	f200 8377 	bhi.w	bd4b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x734>
   bcdca:	e8df f013 	tbh	[pc, r3, lsl #1]
   bcdce:	0009      	.short	0x0009
   bcdd0:	024d00cc 	.word	0x024d00cc
   bcdd4:	03750186 	.word	0x03750186
   bcdd8:	03750375 	.word	0x03750375
   bcddc:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   bcde0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bcde4:	4631      	mov	r1, r6
   bcde6:	2f00      	cmp	r7, #0
   bcde8:	f000 808f 	beq.w	bcf0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x186>
   bcdec:	a80c      	add	r0, sp, #48	; 0x30
   bcdee:	f7f9 fd8c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bcdf2:	6873      	ldr	r3, [r6, #4]
   bcdf4:	9305      	str	r3, [sp, #20]
   bcdf6:	4629      	mov	r1, r5
   bcdf8:	a811      	add	r0, sp, #68	; 0x44
   bcdfa:	f7f9 fd86 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcdfe:	b105      	cbz	r5, bce02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bce00:	686d      	ldr	r5, [r5, #4]
   bce02:	4621      	mov	r1, r4
   bce04:	a816      	add	r0, sp, #88	; 0x58
   bce06:	f7f9 fd80 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bce0a:	b104      	cbz	r4, bce0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bce0c:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bce0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bce10:	2b04      	cmp	r3, #4
   bce12:	dd01      	ble.n	bce18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bce14:	f007 fd42 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bce18:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bce1a:	2b04      	cmp	r3, #4
   bce1c:	dcfa      	bgt.n	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bce1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bce20:	2b04      	cmp	r3, #4
   bce22:	dcf7      	bgt.n	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bce24:	2301      	movs	r3, #1
   bce26:	aa16      	add	r2, sp, #88	; 0x58
   bce28:	2104      	movs	r1, #4
   bce2a:	a839      	add	r0, sp, #228	; 0xe4
   bce2c:	f7f9 fb0e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bce30:	ab46      	add	r3, sp, #280	; 0x118
   bce32:	4642      	mov	r2, r8
   bce34:	a911      	add	r1, sp, #68	; 0x44
   bce36:	a80c      	add	r0, sp, #48	; 0x30
   bce38:	f7f9 fe10 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bce3c:	2600      	movs	r6, #0
   bce3e:	2100      	movs	r1, #0
   bce40:	a839      	add	r0, sp, #228	; 0xe4
   bce42:	f7f9 fac9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bce46:	42b0      	cmp	r0, r6
   bce48:	dd4d      	ble.n	bcee6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bce4a:	2700      	movs	r7, #0
   bce4c:	2101      	movs	r1, #1
   bce4e:	a839      	add	r0, sp, #228	; 0xe4
   bce50:	f7f9 fac2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bce54:	42b8      	cmp	r0, r7
   bce56:	dd44      	ble.n	bcee2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bce58:	f04f 0b00 	mov.w	fp, #0
   bce5c:	2102      	movs	r1, #2
   bce5e:	a839      	add	r0, sp, #228	; 0xe4
   bce60:	f7f9 faba 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bce64:	4558      	cmp	r0, fp
   bce66:	dd3a      	ble.n	bcede <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bce68:	f04f 0900 	mov.w	r9, #0
   bce6c:	2103      	movs	r1, #3
   bce6e:	a839      	add	r0, sp, #228	; 0xe4
   bce70:	f7f9 fab2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bce74:	4548      	cmp	r0, r9
   bce76:	dd2f      	ble.n	bced8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bce78:	f8cd 9000 	str.w	r9, [sp]
   bce7c:	465b      	mov	r3, fp
   bce7e:	463a      	mov	r2, r7
   bce80:	4631      	mov	r1, r6
   bce82:	4640      	mov	r0, r8
   bce84:	f7f9 fbb8 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bce88:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bce8c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bce8e:	465b      	mov	r3, fp
   bce90:	463a      	mov	r2, r7
   bce92:	4631      	mov	r1, r6
   bce94:	a846      	add	r0, sp, #280	; 0x118
   bce96:	f7f9 fbaf 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bce9a:	9b05      	ldr	r3, [sp, #20]
   bce9c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bcea0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs > rhs;
   bcea4:	ed9a 7a00 	vldr	s14, [sl]
   bcea8:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bceac:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bceb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bceb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bceb8:	465b      	mov	r3, fp
   bceba:	463a      	mov	r2, r7
   bcebc:	4631      	mov	r1, r6
   bcebe:	a839      	add	r0, sp, #228	; 0xe4
  return lhs > rhs;
   bcec0:	bfcc      	ite	gt
   bcec2:	f04f 0a01 	movgt.w	sl, #1
   bcec6:	f04f 0a00 	movle.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bceca:	f7f9 faec 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcece:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bced2:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bced6:	e7c9      	b.n	bce6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bced8:	f10b 0b01 	add.w	fp, fp, #1
   bcedc:	e7be      	b.n	bce5c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcede:	3701      	adds	r7, #1
   bcee0:	e7b4      	b.n	bce4c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcee2:	3601      	adds	r6, #1
   bcee4:	e7ab      	b.n	bce3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bcee6:	a839      	add	r0, sp, #228	; 0xe4
   bcee8:	f7f9 fa6b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bceec:	a816      	add	r0, sp, #88	; 0x58
   bceee:	f7f9 fa68 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bcef2:	a811      	add	r0, sp, #68	; 0x44
   bcef4:	f7f9 fa65 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bcef8:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(Greater);
   bcefa:	f7f9 fa62 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bcefe:	2000      	movs	r0, #0
}
   bcf00:	b04f      	add	sp, #316	; 0x13c
   bcf02:	ecbd 8b02 	vpop	{d8}
   bcf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   bcf0a:	a839      	add	r0, sp, #228	; 0xe4
   bcf0c:	f7f9 fcfd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcf10:	4629      	mov	r1, r5
   bcf12:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bcf14:	6876      	ldr	r6, [r6, #4]
   bcf16:	f7f9 fcf8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcf1a:	b105      	cbz	r5, bcf1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bcf1c:	686d      	ldr	r5, [r5, #4]
   bcf1e:	4621      	mov	r1, r4
   bcf20:	a846      	add	r0, sp, #280	; 0x118
   bcf22:	f7f9 fcf2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bcf26:	b104      	cbz	r4, bcf2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bcf28:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bcf2a:	aa46      	add	r2, sp, #280	; 0x118
   bcf2c:	4641      	mov	r1, r8
   bcf2e:	a839      	add	r0, sp, #228	; 0xe4
   bcf30:	f7f9 fadb 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bcf34:	2300      	movs	r3, #0
  const int64_t flatsize =
   bcf36:	17c7      	asrs	r7, r0, #31
   bcf38:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bcf3a:	4619      	mov	r1, r3
   bcf3c:	4283      	cmp	r3, r0
   bcf3e:	eb71 0607 	sbcs.w	r6, r1, r7
   bcf42:	f280 80c2 	bge.w	bd0ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bcf46:	ecb2 7a01 	vldmia	r2!, {s14}
   bcf4a:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs > rhs;
   bcf4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bcf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bcf56:	bfcc      	ite	gt
   bcf58:	2601      	movgt	r6, #1
   bcf5a:	2600      	movle	r6, #0
   bcf5c:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bcf5e:	3301      	adds	r3, #1
   bcf60:	f141 0100 	adc.w	r1, r1, #0
   bcf64:	e7ea      	b.n	bcf3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
   bcf66:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bcf6a:	4631      	mov	r1, r6
   bcf6c:	2f00      	cmp	r7, #0
   bcf6e:	f000 8082 	beq.w	bd076 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bcf72:	a81b      	add	r0, sp, #108	; 0x6c
   bcf74:	f7f9 fcc9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bcf78:	6873      	ldr	r3, [r6, #4]
   bcf7a:	9305      	str	r3, [sp, #20]
   bcf7c:	4629      	mov	r1, r5
   bcf7e:	a820      	add	r0, sp, #128	; 0x80
   bcf80:	f7f9 fcc3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bcf84:	b105      	cbz	r5, bcf88 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x204>
   bcf86:	686d      	ldr	r5, [r5, #4]
   bcf88:	4621      	mov	r1, r4
   bcf8a:	a825      	add	r0, sp, #148	; 0x94
   bcf8c:	f7f9 fcbd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bcf90:	b104      	cbz	r4, bcf94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x210>
   bcf92:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bcf94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bcf96:	2b04      	cmp	r3, #4
   bcf98:	f73f af3c 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bcf9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bcf9e:	2b04      	cmp	r3, #4
   bcfa0:	f73f af38 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bcfa4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bcfa6:	2b04      	cmp	r3, #4
   bcfa8:	f73f af34 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bcfac:	2301      	movs	r3, #1
   bcfae:	aa25      	add	r2, sp, #148	; 0x94
   bcfb0:	2104      	movs	r1, #4
   bcfb2:	a839      	add	r0, sp, #228	; 0xe4
   bcfb4:	f7f9 fa4a 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bcfb8:	ab46      	add	r3, sp, #280	; 0x118
   bcfba:	4642      	mov	r2, r8
   bcfbc:	a920      	add	r1, sp, #128	; 0x80
   bcfbe:	a81b      	add	r0, sp, #108	; 0x6c
   bcfc0:	f7f9 fd4c 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bcfc4:	2600      	movs	r6, #0
   bcfc6:	2100      	movs	r1, #0
   bcfc8:	a839      	add	r0, sp, #228	; 0xe4
   bcfca:	f7f9 fa05 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcfce:	42b0      	cmp	r0, r6
   bcfd0:	dd46      	ble.n	bd060 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bcfd2:	2700      	movs	r7, #0
   bcfd4:	2101      	movs	r1, #1
   bcfd6:	a839      	add	r0, sp, #228	; 0xe4
   bcfd8:	f7f9 f9fe 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcfdc:	42b8      	cmp	r0, r7
   bcfde:	dd3d      	ble.n	bd05c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bcfe0:	f04f 0b00 	mov.w	fp, #0
   bcfe4:	2102      	movs	r1, #2
   bcfe6:	a839      	add	r0, sp, #228	; 0xe4
   bcfe8:	f7f9 f9f6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcfec:	4558      	cmp	r0, fp
   bcfee:	dd33      	ble.n	bd058 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bcff0:	f04f 0900 	mov.w	r9, #0
   bcff4:	2103      	movs	r1, #3
   bcff6:	a839      	add	r0, sp, #228	; 0xe4
   bcff8:	f7f9 f9ee 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bcffc:	4548      	cmp	r0, r9
   bcffe:	dd28      	ble.n	bd052 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd000:	f8cd 9000 	str.w	r9, [sp]
   bd004:	465b      	mov	r3, fp
   bd006:	463a      	mov	r2, r7
   bd008:	4631      	mov	r1, r6
   bd00a:	4640      	mov	r0, r8
   bd00c:	f7f9 faf4 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd010:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd014:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd016:	465b      	mov	r3, fp
   bd018:	463a      	mov	r2, r7
   bd01a:	4631      	mov	r1, r6
   bd01c:	a846      	add	r0, sp, #280	; 0x118
   bd01e:	f7f9 faeb 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs > rhs;
   bd022:	9b05      	ldr	r3, [sp, #20]
   bd024:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bd028:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd02c:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bd030:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bd032:	465b      	mov	r3, fp
   bd034:	463a      	mov	r2, r7
   bd036:	4631      	mov	r1, r6
   bd038:	a839      	add	r0, sp, #228	; 0xe4
  return lhs > rhs;
   bd03a:	bfd4      	ite	le
   bd03c:	f04f 0a00 	movle.w	sl, #0
   bd040:	f04f 0a01 	movgt.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd044:	f7f9 fa2f 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd048:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd04c:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd050:	e7d0      	b.n	bcff4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd052:	f10b 0b01 	add.w	fp, fp, #1
   bd056:	e7c5      	b.n	bcfe4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd058:	3701      	adds	r7, #1
   bd05a:	e7bb      	b.n	bcfd4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd05c:	3601      	adds	r6, #1
   bd05e:	e7b2      	b.n	bcfc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bd060:	a839      	add	r0, sp, #228	; 0xe4
   bd062:	f7f9 f9ae 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd066:	a825      	add	r0, sp, #148	; 0x94
   bd068:	f7f9 f9ab 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd06c:	a820      	add	r0, sp, #128	; 0x80
   bd06e:	f7f9 f9a8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd072:	a81b      	add	r0, sp, #108	; 0x6c
   bd074:	e741      	b.n	bcefa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd076:	a839      	add	r0, sp, #228	; 0xe4
   bd078:	f7f9 fc47 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd07c:	4629      	mov	r1, r5
   bd07e:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd080:	6876      	ldr	r6, [r6, #4]
   bd082:	f7f9 fc42 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd086:	b105      	cbz	r5, bd08a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bd088:	686d      	ldr	r5, [r5, #4]
   bd08a:	4621      	mov	r1, r4
   bd08c:	a846      	add	r0, sp, #280	; 0x118
   bd08e:	f7f9 fc3c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd092:	b104      	cbz	r4, bd096 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bd094:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd096:	aa46      	add	r2, sp, #280	; 0x118
   bd098:	4641      	mov	r1, r8
   bd09a:	a839      	add	r0, sp, #228	; 0xe4
   bd09c:	f7f9 fa25 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd0a0:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd0a2:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd0a6:	461f      	mov	r7, r3
   bd0a8:	4283      	cmp	r3, r0
   bd0aa:	eb77 020c 	sbcs.w	r2, r7, ip
   bd0ae:	da0c      	bge.n	bd0ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs > rhs;
   bd0b0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bd0b4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bd0b8:	428a      	cmp	r2, r1
   bd0ba:	bfd4      	ite	le
   bd0bc:	2200      	movle	r2, #0
   bd0be:	2201      	movgt	r2, #1
   bd0c0:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd0c2:	3301      	adds	r3, #1
   bd0c4:	f147 0700 	adc.w	r7, r7, #0
   bd0c8:	e7ee      	b.n	bd0a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bd0ca:	a846      	add	r0, sp, #280	; 0x118
   bd0cc:	f7f9 f979 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd0d0:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
   bd0d2:	f7f9 f976 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd0d6:	a839      	add	r0, sp, #228	; 0xe4
   bd0d8:	e70f      	b.n	bcefa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd0da:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd0de:	4631      	mov	r1, r6
   bd0e0:	2f00      	cmp	r7, #0
   bd0e2:	f000 808c 	beq.w	bd1fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bd0e6:	a82a      	add	r0, sp, #168	; 0xa8
   bd0e8:	f7f9 fc0f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd0ec:	4629      	mov	r1, r5
   bd0ee:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd0f0:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bd0f4:	f7f9 fc09 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd0f8:	b105      	cbz	r5, bd0fc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x378>
   bd0fa:	686d      	ldr	r5, [r5, #4]
   bd0fc:	4621      	mov	r1, r4
   bd0fe:	a834      	add	r0, sp, #208	; 0xd0
   bd100:	f7f9 fc03 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd104:	b104      	cbz	r4, bd108 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bd106:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd108:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd10a:	2b04      	cmp	r3, #4
   bd10c:	f73f ae82 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd110:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd112:	2b04      	cmp	r3, #4
   bd114:	f73f ae7e 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd118:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bd11a:	2b04      	cmp	r3, #4
   bd11c:	f73f ae7a 	bgt.w	bce14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd120:	2301      	movs	r3, #1
   bd122:	aa34      	add	r2, sp, #208	; 0xd0
   bd124:	2104      	movs	r1, #4
   bd126:	a839      	add	r0, sp, #228	; 0xe4
   bd128:	f7f9 f990 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd12c:	ab46      	add	r3, sp, #280	; 0x118
   bd12e:	4642      	mov	r2, r8
   bd130:	a92f      	add	r1, sp, #188	; 0xbc
   bd132:	a82a      	add	r0, sp, #168	; 0xa8
   bd134:	f7f9 fc92 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd138:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd13c:	2700      	movs	r7, #0
   bd13e:	2100      	movs	r1, #0
   bd140:	a839      	add	r0, sp, #228	; 0xe4
   bd142:	f7f9 f949 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd146:	42b8      	cmp	r0, r7
   bd148:	dd4e      	ble.n	bd1e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd14a:	f04f 0800 	mov.w	r8, #0
   bd14e:	2101      	movs	r1, #1
   bd150:	a839      	add	r0, sp, #228	; 0xe4
   bd152:	f7f9 f941 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd156:	4540      	cmp	r0, r8
   bd158:	dd44      	ble.n	bd1e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd15a:	2600      	movs	r6, #0
   bd15c:	2102      	movs	r1, #2
   bd15e:	a839      	add	r0, sp, #228	; 0xe4
   bd160:	f7f9 f93a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd164:	42b0      	cmp	r0, r6
   bd166:	dd3a      	ble.n	bd1de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd168:	f04f 0900 	mov.w	r9, #0
   bd16c:	2103      	movs	r1, #3
   bd16e:	a839      	add	r0, sp, #228	; 0xe4
   bd170:	f7f9 f932 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd174:	4548      	cmp	r0, r9
   bd176:	dd30      	ble.n	bd1da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd178:	f8cd 9000 	str.w	r9, [sp]
   bd17c:	4633      	mov	r3, r6
   bd17e:	4642      	mov	r2, r8
   bd180:	4639      	mov	r1, r7
   bd182:	ee18 0a10 	vmov	r0, s16
   bd186:	f7f9 fa37 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd18a:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd18e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd190:	4633      	mov	r3, r6
   bd192:	4642      	mov	r2, r8
   bd194:	4639      	mov	r1, r7
   bd196:	a846      	add	r0, sp, #280	; 0x118
   bd198:	f7f9 fa2e 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd19c:	eb0b 02ca 	add.w	r2, fp, sl, lsl #3
   bd1a0:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
  return lhs > rhs;
   bd1a4:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bd1a8:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bd1ac:	6852      	ldr	r2, [r2, #4]
   bd1ae:	6849      	ldr	r1, [r1, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd1b0:	f8cd 9000 	str.w	r9, [sp]
  return lhs > rhs;
   bd1b4:	4298      	cmp	r0, r3
   bd1b6:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bd1ba:	a839      	add	r0, sp, #228	; 0xe4
   bd1bc:	4633      	mov	r3, r6
   bd1be:	4642      	mov	r2, r8
   bd1c0:	4639      	mov	r1, r7
  return lhs > rhs;
   bd1c2:	bfb4      	ite	lt
   bd1c4:	f04f 0a01 	movlt.w	sl, #1
   bd1c8:	f04f 0a00 	movge.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd1cc:	f7f9 f96b 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd1d0:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd1d4:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd1d8:	e7c8      	b.n	bd16c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd1da:	3601      	adds	r6, #1
   bd1dc:	e7be      	b.n	bd15c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd1de:	f108 0801 	add.w	r8, r8, #1
   bd1e2:	e7b4      	b.n	bd14e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd1e4:	3701      	adds	r7, #1
   bd1e6:	e7aa      	b.n	bd13e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bd1e8:	a839      	add	r0, sp, #228	; 0xe4
   bd1ea:	f7f9 f8ea 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd1ee:	a834      	add	r0, sp, #208	; 0xd0
   bd1f0:	f7f9 f8e7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd1f4:	a82f      	add	r0, sp, #188	; 0xbc
   bd1f6:	f7f9 f8e4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd1fa:	a82a      	add	r0, sp, #168	; 0xa8
   bd1fc:	e67d      	b.n	bcefa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd1fe:	a839      	add	r0, sp, #228	; 0xe4
   bd200:	f7f9 fb83 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd204:	4629      	mov	r1, r5
   bd206:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd208:	6877      	ldr	r7, [r6, #4]
   bd20a:	f7f9 fb7e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd20e:	b105      	cbz	r5, bd212 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   bd210:	686d      	ldr	r5, [r5, #4]
   bd212:	4621      	mov	r1, r4
   bd214:	a846      	add	r0, sp, #280	; 0x118
   bd216:	f7f9 fb78 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd21a:	b104      	cbz	r4, bd21e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   bd21c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd21e:	aa46      	add	r2, sp, #280	; 0x118
   bd220:	4641      	mov	r1, r8
   bd222:	a839      	add	r0, sp, #228	; 0xe4
   bd224:	f7f9 f961 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd228:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd22a:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bd22e:	f1a7 0208 	sub.w	r2, r7, #8
   bd232:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bd234:	4619      	mov	r1, r3
   bd236:	4283      	cmp	r3, r0
   bd238:	eb71 060e 	sbcs.w	r6, r1, lr
   bd23c:	da0f      	bge.n	bd25e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs > rhs;
   bd23e:	f852 6f08 	ldr.w	r6, [r2, #8]!
   bd242:	f855 7f08 	ldr.w	r7, [r5, #8]!
   bd246:	42b7      	cmp	r7, r6
   bd248:	686e      	ldr	r6, [r5, #4]
   bd24a:	6857      	ldr	r7, [r2, #4]
   bd24c:	41be      	sbcs	r6, r7
   bd24e:	bfb4      	ite	lt
   bd250:	2601      	movlt	r6, #1
   bd252:	2600      	movge	r6, #0
   bd254:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd256:	3301      	adds	r3, #1
   bd258:	f141 0100 	adc.w	r1, r1, #0
   bd25c:	e7eb      	b.n	bd236 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bd25e:	a846      	add	r0, sp, #280	; 0x118
   bd260:	f7f9 f8af 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd264:	a83e      	add	r0, sp, #248	; 0xf8
   bd266:	e734      	b.n	bd0d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(Greater);
   bd268:	6933      	ldr	r3, [r6, #16]
   bd26a:	68f0      	ldr	r0, [r6, #12]
   bd26c:	f1c3 0900 	rsb	r9, r3, #0
   bd270:	692b      	ldr	r3, [r5, #16]
   bd272:	f1c3 0800 	rsb	r8, r3, #0
   bd276:	f7f7 f837 	bl	b42e8 <__aeabi_f2d>
   bd27a:	ec41 0b10 	vmov	d0, r0, r1
   bd27e:	a925      	add	r1, sp, #148	; 0x94
   bd280:	a820      	add	r0, sp, #128	; 0x80
   bd282:	f7f8 f833 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd286:	68e8      	ldr	r0, [r5, #12]
   bd288:	f7f7 f82e 	bl	b42e8 <__aeabi_f2d>
   bd28c:	ec41 0b10 	vmov	d0, r0, r1
   bd290:	a92f      	add	r1, sp, #188	; 0xbc
   bd292:	a82a      	add	r0, sp, #168	; 0xa8
   bd294:	f7f8 f82a 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd298:	2308      	movs	r3, #8
   bd29a:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bd29e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd2a0:	9348      	str	r3, [sp, #288]	; 0x120
   bd2a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd2a4:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bd2a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd2aa:	934b      	str	r3, [sp, #300]	; 0x12c
   bd2ac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd2ae:	934c      	str	r3, [sp, #304]	; 0x130
   bd2b0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd2b4:	4631      	mov	r1, r6
   bd2b6:	a834      	add	r0, sp, #208	; 0xd0
   bd2b8:	b1ff      	cbz	r7, bd2fa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x576>
   bd2ba:	f7f9 fb26 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd2be:	6872      	ldr	r2, [r6, #4]
   bd2c0:	9205      	str	r2, [sp, #20]
   bd2c2:	4629      	mov	r1, r5
   bd2c4:	a839      	add	r0, sp, #228	; 0xe4
   bd2c6:	f7f9 fb20 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd2ca:	4621      	mov	r1, r4
   bd2cc:	4640      	mov	r0, r8
   bd2ce:	686d      	ldr	r5, [r5, #4]
   bd2d0:	f7f9 fb1b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd2d4:	9a05      	ldr	r2, [sp, #20]
   bd2d6:	b104      	cbz	r4, bd2da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bd2d8:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Greater);
   bd2da:	9500      	str	r5, [sp, #0]
   bd2dc:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bd2e0:	ab39      	add	r3, sp, #228	; 0xe4
   bd2e2:	a934      	add	r1, sp, #208	; 0xd0
   bd2e4:	a846      	add	r0, sp, #280	; 0x118
   bd2e6:	f7ff fc15 	bl	bcb14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bd2ea:	4640      	mov	r0, r8
   bd2ec:	f7f9 f869 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd2f0:	a839      	add	r0, sp, #228	; 0xe4
   bd2f2:	f7f9 f866 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd2f6:	a834      	add	r0, sp, #208	; 0xd0
   bd2f8:	e5ff      	b.n	bcefa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bd2fa:	f7f9 fb06 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd2fe:	6873      	ldr	r3, [r6, #4]
   bd300:	9305      	str	r3, [sp, #20]
   bd302:	4629      	mov	r1, r5
   bd304:	a839      	add	r0, sp, #228	; 0xe4
   bd306:	f7f9 fb00 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd30a:	686b      	ldr	r3, [r5, #4]
   bd30c:	9306      	str	r3, [sp, #24]
   bd30e:	4621      	mov	r1, r4
   bd310:	4640      	mov	r0, r8
   bd312:	f7f9 fafa 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd316:	b104      	cbz	r4, bd31a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x596>
   bd318:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bd31a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bd31e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bd320:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bd322:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bd324:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd328:	aa3e      	add	r2, sp, #248	; 0xf8
   bd32a:	a939      	add	r1, sp, #228	; 0xe4
   bd32c:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bd32e:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd332:	f7f9 f8da 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bd336:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bd33a:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd33c:	2500      	movs	r5, #0
  const int64_t flatsize =
   bd33e:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd340:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bd342:	462b      	mov	r3, r5
   bd344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bd346:	930b      	str	r3, [sp, #44]	; 0x2c
   bd348:	4545      	cmp	r5, r8
   bd34a:	eb73 0202 	sbcs.w	r2, r3, r2
   bd34e:	f280 80b1 	bge.w	bd4b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bd352:	9b06      	ldr	r3, [sp, #24]
   bd354:	5d5f      	ldrb	r7, [r3, r5]
   bd356:	9b08      	ldr	r3, [sp, #32]
   bd358:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bd35a:	9b05      	ldr	r3, [sp, #20]
   bd35c:	5d58      	ldrb	r0, [r3, r5]
   bd35e:	9b07      	ldr	r3, [sp, #28]
   bd360:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd362:	465a      	mov	r2, fp
   bd364:	4651      	mov	r1, sl
   bd366:	fa00 f009 	lsl.w	r0, r0, r9
   bd36a:	f7f9 f8fb 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd36e:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd372:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd374:	ee18 2a10 	vmov	r2, s16
   bd378:	4631      	mov	r1, r6
   bd37a:	4638      	mov	r0, r7
   bd37c:	f7f9 f8f2 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs > rhs;
   bd380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd382:	4283      	cmp	r3, r0
   bd384:	bfd4      	ite	le
   bd386:	2000      	movle	r0, #0
   bd388:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bd38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs > rhs;
   bd38c:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd38e:	3501      	adds	r5, #1
   bd390:	f143 0300 	adc.w	r3, r3, #0
   bd394:	e7d6      	b.n	bd344 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bd396:	6933      	ldr	r3, [r6, #16]
   bd398:	68f0      	ldr	r0, [r6, #12]
   bd39a:	f1c3 0900 	rsb	r9, r3, #0
   bd39e:	692b      	ldr	r3, [r5, #16]
   bd3a0:	f1c3 0800 	rsb	r8, r3, #0
   bd3a4:	f7f6 ffa0 	bl	b42e8 <__aeabi_f2d>
   bd3a8:	ec41 0b10 	vmov	d0, r0, r1
   bd3ac:	a925      	add	r1, sp, #148	; 0x94
   bd3ae:	a820      	add	r0, sp, #128	; 0x80
   bd3b0:	f7f7 ff9c 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd3b4:	68e8      	ldr	r0, [r5, #12]
   bd3b6:	f7f6 ff97 	bl	b42e8 <__aeabi_f2d>
   bd3ba:	ec41 0b10 	vmov	d0, r0, r1
   bd3be:	a92f      	add	r1, sp, #188	; 0xbc
   bd3c0:	a82a      	add	r0, sp, #168	; 0xa8
   bd3c2:	f7f7 ff93 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bd3c6:	2308      	movs	r3, #8
   bd3c8:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bd3cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd3ce:	9348      	str	r3, [sp, #288]	; 0x120
   bd3d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd3d2:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bd3d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bd3d8:	934b      	str	r3, [sp, #300]	; 0x12c
   bd3da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bd3dc:	934c      	str	r3, [sp, #304]	; 0x130
   bd3de:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd3e2:	4631      	mov	r1, r6
   bd3e4:	a834      	add	r0, sp, #208	; 0xd0
   bd3e6:	b1c7      	cbz	r7, bd41a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bd3e8:	f7f9 fa8f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd3ec:	6872      	ldr	r2, [r6, #4]
   bd3ee:	9205      	str	r2, [sp, #20]
   bd3f0:	4629      	mov	r1, r5
   bd3f2:	a839      	add	r0, sp, #228	; 0xe4
   bd3f4:	f7f9 fa89 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd3f8:	4621      	mov	r1, r4
   bd3fa:	4640      	mov	r0, r8
   bd3fc:	686d      	ldr	r5, [r5, #4]
   bd3fe:	f7f9 fa84 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd402:	9a05      	ldr	r2, [sp, #20]
   bd404:	b104      	cbz	r4, bd408 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bd406:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Greater);
   bd408:	9500      	str	r5, [sp, #0]
   bd40a:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bd40e:	ab39      	add	r3, sp, #228	; 0xe4
   bd410:	a934      	add	r1, sp, #208	; 0xd0
   bd412:	a846      	add	r0, sp, #280	; 0x118
   bd414:	f7ff fc1a 	bl	bcc4c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bd418:	e767      	b.n	bd2ea <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bd41a:	f7f9 fa76 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd41e:	6873      	ldr	r3, [r6, #4]
   bd420:	9305      	str	r3, [sp, #20]
   bd422:	4629      	mov	r1, r5
   bd424:	a839      	add	r0, sp, #228	; 0xe4
   bd426:	f7f9 fa70 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd42a:	686b      	ldr	r3, [r5, #4]
   bd42c:	9306      	str	r3, [sp, #24]
   bd42e:	4621      	mov	r1, r4
   bd430:	4640      	mov	r0, r8
   bd432:	f7f9 fa6a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd436:	b104      	cbz	r4, bd43a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bd438:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bd43a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bd43e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bd440:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bd442:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bd444:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd448:	aa3e      	add	r2, sp, #248	; 0xf8
   bd44a:	a939      	add	r1, sp, #228	; 0xe4
   bd44c:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bd44e:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd452:	f7f9 f84a 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bd456:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bd45a:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bd45c:	2500      	movs	r5, #0
  const int64_t flatsize =
   bd45e:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd460:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bd462:	462b      	mov	r3, r5
   bd464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bd466:	930b      	str	r3, [sp, #44]	; 0x2c
   bd468:	4545      	cmp	r5, r8
   bd46a:	eb73 0202 	sbcs.w	r2, r3, r2
   bd46e:	da21      	bge.n	bd4b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bd470:	9b06      	ldr	r3, [sp, #24]
   bd472:	575f      	ldrsb	r7, [r3, r5]
   bd474:	9b08      	ldr	r3, [sp, #32]
   bd476:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bd478:	9b05      	ldr	r3, [sp, #20]
   bd47a:	5758      	ldrsb	r0, [r3, r5]
   bd47c:	9b07      	ldr	r3, [sp, #28]
   bd47e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd480:	465a      	mov	r2, fp
   bd482:	4651      	mov	r1, sl
   bd484:	fa00 f009 	lsl.w	r0, r0, r9
   bd488:	f7f9 f86c 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd48c:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd490:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd492:	ee18 2a10 	vmov	r2, s16
   bd496:	4631      	mov	r1, r6
   bd498:	4638      	mov	r0, r7
   bd49a:	f7f9 f863 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs > rhs;
   bd49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd4a0:	4283      	cmp	r3, r0
   bd4a2:	bfd4      	ite	le
   bd4a4:	2000      	movle	r0, #0
   bd4a6:	2001      	movgt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bd4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs > rhs;
   bd4aa:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd4ac:	3501      	adds	r5, #1
   bd4ae:	f143 0300 	adc.w	r3, r3, #0
   bd4b2:	e7d7      	b.n	bd464 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bd4b4:	a83e      	add	r0, sp, #248	; 0xf8
   bd4b6:	e719      	b.n	bd2ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bd4b8:	4640      	mov	r0, r8
   bd4ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bd4be:	4902      	ldr	r1, [pc, #8]	; (bd4c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bd4c0:	4798      	blx	r3
      return kTfLiteError;
   bd4c2:	2001      	movs	r0, #1
   bd4c4:	e51c      	b.n	bcf00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bd4c6:	bf00      	nop
   bd4c8:	000c8b0b 	.word	0x000c8b0b

000bd4cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bd4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd4d0:	ed2d 8b04 	vpush	{d8-d9}
   bd4d4:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd4d6:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bd4d8:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd4da:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bd4dc:	9204      	str	r2, [sp, #16]
   bd4de:	4604      	mov	r4, r0
   bd4e0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bd4e2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd4e4:	dd01      	ble.n	bd4ea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bd4e6:	f007 f9d9 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd4ea:	6833      	ldr	r3, [r6, #0]
   bd4ec:	2b04      	cmp	r3, #4
   bd4ee:	dcfa      	bgt.n	bd4e6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd4f0:	6813      	ldr	r3, [r2, #0]
   bd4f2:	2b04      	cmp	r3, #4
   bd4f4:	dcf7      	bgt.n	bd4e6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bd4f6:	2301      	movs	r3, #1
   bd4f8:	2104      	movs	r1, #4
   bd4fa:	a807      	add	r0, sp, #28
   bd4fc:	f7f8 ffa6 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd500:	ab14      	add	r3, sp, #80	; 0x50
   bd502:	aa0c      	add	r2, sp, #48	; 0x30
   bd504:	4631      	mov	r1, r6
   bd506:	4628      	mov	r0, r5
   bd508:	f7f9 faa8 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bd50c:	e9d4 a300 	ldrd	sl, r3, [r4]
   bd510:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd512:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bd514:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd518:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bd51c:	68e3      	ldr	r3, [r4, #12]
   bd51e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bd522:	6923      	ldr	r3, [r4, #16]
   bd524:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bd526:	6963      	ldr	r3, [r4, #20]
   bd528:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd52c:	2400      	movs	r4, #0
   bd52e:	2100      	movs	r1, #0
   bd530:	a807      	add	r0, sp, #28
   bd532:	f7f8 ff51 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd536:	42a0      	cmp	r0, r4
   bd538:	dd5c      	ble.n	bd5f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd53a:	2500      	movs	r5, #0
   bd53c:	af07      	add	r7, sp, #28
   bd53e:	2101      	movs	r1, #1
   bd540:	4638      	mov	r0, r7
   bd542:	f7f8 ff49 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd546:	42a8      	cmp	r0, r5
   bd548:	dd52      	ble.n	bd5f0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd54a:	2600      	movs	r6, #0
   bd54c:	2102      	movs	r1, #2
   bd54e:	4638      	mov	r0, r7
   bd550:	f7f8 ff42 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd554:	42b0      	cmp	r0, r6
   bd556:	dd49      	ble.n	bd5ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd558:	f04f 0800 	mov.w	r8, #0
   bd55c:	2103      	movs	r1, #3
   bd55e:	4638      	mov	r0, r7
   bd560:	f7f8 ff3a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd564:	4540      	cmp	r0, r8
   bd566:	dd3f      	ble.n	bd5e8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bd568:	f8cd 8000 	str.w	r8, [sp]
   bd56c:	4633      	mov	r3, r6
   bd56e:	462a      	mov	r2, r5
   bd570:	4621      	mov	r1, r4
   bd572:	a80c      	add	r0, sp, #48	; 0x30
   bd574:	f7f9 f840 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd578:	9b04      	ldr	r3, [sp, #16]
   bd57a:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bd57e:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd580:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bd584:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd586:	462a      	mov	r2, r5
   bd588:	4633      	mov	r3, r6
   bd58a:	4621      	mov	r1, r4
   bd58c:	a814      	add	r0, sp, #80	; 0x50
   bd58e:	f7f9 f833 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd592:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bd594:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd596:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bd598:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd59a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd59e:	ee18 2a90 	vmov	r2, s17
   bd5a2:	ee18 1a10 	vmov	r1, s16
   bd5a6:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd5aa:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd5ac:	f7f8 ffda 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd5b0:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd5b2:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd5b4:	ee19 1a10 	vmov	r1, s18
   bd5b8:	465a      	mov	r2, fp
   bd5ba:	4618      	mov	r0, r3
   bd5bc:	f7f8 ffd2 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bd5c0:	f8cd 8000 	str.w	r8, [sp]
  return lhs >= rhs;
   bd5c4:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd5c6:	4633      	mov	r3, r6
   bd5c8:	462a      	mov	r2, r5
   bd5ca:	4621      	mov	r1, r4
   bd5cc:	4638      	mov	r0, r7
  return lhs >= rhs;
   bd5ce:	bfb4      	ite	lt
   bd5d0:	f04f 0900 	movlt.w	r9, #0
   bd5d4:	f04f 0901 	movge.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd5d8:	f7f8 ff65 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bd5dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd5de:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd5e2:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd5e6:	e7b9      	b.n	bd55c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd5e8:	3601      	adds	r6, #1
   bd5ea:	e7af      	b.n	bd54c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd5ec:	3501      	adds	r5, #1
   bd5ee:	e7a5      	b.n	bd53c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd5f0:	3401      	adds	r4, #1
   bd5f2:	e79c      	b.n	bd52e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bd5f4:	a807      	add	r0, sp, #28
   bd5f6:	f7f8 fee4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bd5fa:	b01d      	add	sp, #116	; 0x74
   bd5fc:	ecbd 8b04 	vpop	{d8-d9}
   bd600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd604 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bd604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd608:	ed2d 8b04 	vpush	{d8-d9}
   bd60c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd60e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bd610:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd612:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bd614:	9204      	str	r2, [sp, #16]
   bd616:	4604      	mov	r4, r0
   bd618:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bd61a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd61c:	dd01      	ble.n	bd622 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bd61e:	f007 f93d 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd622:	6833      	ldr	r3, [r6, #0]
   bd624:	2b04      	cmp	r3, #4
   bd626:	dcfa      	bgt.n	bd61e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd628:	6813      	ldr	r3, [r2, #0]
   bd62a:	2b04      	cmp	r3, #4
   bd62c:	dcf7      	bgt.n	bd61e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bd62e:	2301      	movs	r3, #1
   bd630:	2104      	movs	r1, #4
   bd632:	a807      	add	r0, sp, #28
   bd634:	f7f8 ff0a 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd638:	ab14      	add	r3, sp, #80	; 0x50
   bd63a:	aa0c      	add	r2, sp, #48	; 0x30
   bd63c:	4631      	mov	r1, r6
   bd63e:	4628      	mov	r0, r5
   bd640:	f7f9 fa0c 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bd644:	e9d4 a300 	ldrd	sl, r3, [r4]
   bd648:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd64a:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bd64c:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bd650:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bd654:	68e3      	ldr	r3, [r4, #12]
   bd656:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bd65a:	6923      	ldr	r3, [r4, #16]
   bd65c:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bd65e:	6963      	ldr	r3, [r4, #20]
   bd660:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd664:	2400      	movs	r4, #0
   bd666:	2100      	movs	r1, #0
   bd668:	a807      	add	r0, sp, #28
   bd66a:	f7f8 feb5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd66e:	42a0      	cmp	r0, r4
   bd670:	dd5c      	ble.n	bd72c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd672:	2500      	movs	r5, #0
   bd674:	af07      	add	r7, sp, #28
   bd676:	2101      	movs	r1, #1
   bd678:	4638      	mov	r0, r7
   bd67a:	f7f8 fead 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd67e:	42a8      	cmp	r0, r5
   bd680:	dd52      	ble.n	bd728 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd682:	2600      	movs	r6, #0
   bd684:	2102      	movs	r1, #2
   bd686:	4638      	mov	r0, r7
   bd688:	f7f8 fea6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd68c:	42b0      	cmp	r0, r6
   bd68e:	dd49      	ble.n	bd724 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd690:	f04f 0800 	mov.w	r8, #0
   bd694:	2103      	movs	r1, #3
   bd696:	4638      	mov	r0, r7
   bd698:	f7f8 fe9e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd69c:	4540      	cmp	r0, r8
   bd69e:	dd3f      	ble.n	bd720 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bd6a0:	f8cd 8000 	str.w	r8, [sp]
   bd6a4:	4633      	mov	r3, r6
   bd6a6:	462a      	mov	r2, r5
   bd6a8:	4621      	mov	r1, r4
   bd6aa:	a80c      	add	r0, sp, #48	; 0x30
   bd6ac:	f7f8 ffa4 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd6b0:	9b04      	ldr	r3, [sp, #16]
   bd6b2:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bd6b6:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd6b8:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bd6bc:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd6be:	462a      	mov	r2, r5
   bd6c0:	4633      	mov	r3, r6
   bd6c2:	4621      	mov	r1, r4
   bd6c4:	a814      	add	r0, sp, #80	; 0x50
   bd6c6:	f7f8 ff97 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bd6ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bd6cc:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bd6ce:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bd6d0:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd6d2:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd6d6:	ee18 2a90 	vmov	r2, s17
   bd6da:	ee18 1a10 	vmov	r1, s16
   bd6de:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bd6e2:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd6e4:	f7f8 ff3e 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd6e8:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd6ea:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bd6ec:	ee19 1a10 	vmov	r1, s18
   bd6f0:	465a      	mov	r2, fp
   bd6f2:	4618      	mov	r0, r3
   bd6f4:	f7f8 ff36 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bd6f8:	f8cd 8000 	str.w	r8, [sp]
  return lhs >= rhs;
   bd6fc:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd6fe:	4633      	mov	r3, r6
   bd700:	462a      	mov	r2, r5
   bd702:	4621      	mov	r1, r4
   bd704:	4638      	mov	r0, r7
  return lhs >= rhs;
   bd706:	bfb4      	ite	lt
   bd708:	f04f 0900 	movlt.w	r9, #0
   bd70c:	f04f 0901 	movge.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd710:	f7f8 fec9 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bd714:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd716:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd71a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd71e:	e7b9      	b.n	bd694 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd720:	3601      	adds	r6, #1
   bd722:	e7af      	b.n	bd684 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd724:	3501      	adds	r5, #1
   bd726:	e7a5      	b.n	bd674 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd728:	3401      	adds	r4, #1
   bd72a:	e79c      	b.n	bd666 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bd72c:	a807      	add	r0, sp, #28
   bd72e:	f7f8 fe48 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bd732:	b01d      	add	sp, #116	; 0x74
   bd734:	ecbd 8b04 	vpop	{d8-d9}
   bd738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd73c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   bd73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd740:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd744:	680a      	ldr	r2, [r1, #0]
   bd746:	f8d0 a008 	ldr.w	sl, [r0, #8]
   bd74a:	6895      	ldr	r5, [r2, #8]
   bd74c:	4680      	mov	r8, r0
   bd74e:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd750:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd752:	2338      	movs	r3, #56	; 0x38
   bd754:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd758:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bd75a:	fb03 a505 	mla	r5, r3, r5, sl
   bd75e:	eb0a 0609 	add.w	r6, sl, r9
   bd762:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bd764:	4629      	mov	r1, r5
   bd766:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bd768:	fb03 a404 	mla	r4, r3, r4, sl
   bd76c:	f7f7 fd56 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   bd770:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bd774:	f080 0001 	eor.w	r0, r0, #1
   bd778:	1e53      	subs	r3, r2, #1
   bd77a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   bd77c:	2b08      	cmp	r3, #8
   bd77e:	f200 8377 	bhi.w	bde70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x734>
   bd782:	e8df f013 	tbh	[pc, r3, lsl #1]
   bd786:	0009      	.short	0x0009
   bd788:	024d00cc 	.word	0x024d00cc
   bd78c:	03750186 	.word	0x03750186
   bd790:	03750375 	.word	0x03750375
   bd794:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   bd798:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd79c:	4631      	mov	r1, r6
   bd79e:	2f00      	cmp	r7, #0
   bd7a0:	f000 808f 	beq.w	bd8c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x186>
   bd7a4:	a80c      	add	r0, sp, #48	; 0x30
   bd7a6:	f7f9 f8b0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd7aa:	6873      	ldr	r3, [r6, #4]
   bd7ac:	9305      	str	r3, [sp, #20]
   bd7ae:	4629      	mov	r1, r5
   bd7b0:	a811      	add	r0, sp, #68	; 0x44
   bd7b2:	f7f9 f8aa 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd7b6:	b105      	cbz	r5, bd7ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   bd7b8:	686d      	ldr	r5, [r5, #4]
   bd7ba:	4621      	mov	r1, r4
   bd7bc:	a816      	add	r0, sp, #88	; 0x58
   bd7be:	f7f9 f8a4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd7c2:	b104      	cbz	r4, bd7c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   bd7c4:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bd7c8:	2b04      	cmp	r3, #4
   bd7ca:	dd01      	ble.n	bd7d0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   bd7cc:	f007 f866 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bd7d2:	2b04      	cmp	r3, #4
   bd7d4:	dcfa      	bgt.n	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd7d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bd7d8:	2b04      	cmp	r3, #4
   bd7da:	dcf7      	bgt.n	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd7dc:	2301      	movs	r3, #1
   bd7de:	aa16      	add	r2, sp, #88	; 0x58
   bd7e0:	2104      	movs	r1, #4
   bd7e2:	a839      	add	r0, sp, #228	; 0xe4
   bd7e4:	f7f8 fe32 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd7e8:	ab46      	add	r3, sp, #280	; 0x118
   bd7ea:	4642      	mov	r2, r8
   bd7ec:	a911      	add	r1, sp, #68	; 0x44
   bd7ee:	a80c      	add	r0, sp, #48	; 0x30
   bd7f0:	f7f9 f934 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd7f4:	2600      	movs	r6, #0
   bd7f6:	2100      	movs	r1, #0
   bd7f8:	a839      	add	r0, sp, #228	; 0xe4
   bd7fa:	f7f8 fded 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd7fe:	42b0      	cmp	r0, r6
   bd800:	dd4d      	ble.n	bd89e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd802:	2700      	movs	r7, #0
   bd804:	2101      	movs	r1, #1
   bd806:	a839      	add	r0, sp, #228	; 0xe4
   bd808:	f7f8 fde6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd80c:	42b8      	cmp	r0, r7
   bd80e:	dd44      	ble.n	bd89a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd810:	f04f 0b00 	mov.w	fp, #0
   bd814:	2102      	movs	r1, #2
   bd816:	a839      	add	r0, sp, #228	; 0xe4
   bd818:	f7f8 fdde 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd81c:	4558      	cmp	r0, fp
   bd81e:	dd3a      	ble.n	bd896 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd820:	f04f 0900 	mov.w	r9, #0
   bd824:	2103      	movs	r1, #3
   bd826:	a839      	add	r0, sp, #228	; 0xe4
   bd828:	f7f8 fdd6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd82c:	4548      	cmp	r0, r9
   bd82e:	dd2f      	ble.n	bd890 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd830:	f8cd 9000 	str.w	r9, [sp]
   bd834:	465b      	mov	r3, fp
   bd836:	463a      	mov	r2, r7
   bd838:	4631      	mov	r1, r6
   bd83a:	4640      	mov	r0, r8
   bd83c:	f7f8 fedc 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd840:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd844:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd846:	465b      	mov	r3, fp
   bd848:	463a      	mov	r2, r7
   bd84a:	4631      	mov	r1, r6
   bd84c:	a846      	add	r0, sp, #280	; 0x118
   bd84e:	f7f8 fed3 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd852:	9b05      	ldr	r3, [sp, #20]
   bd854:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bd858:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs >= rhs;
   bd85c:	ed9a 7a00 	vldr	s14, [sl]
   bd860:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd864:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bd868:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bd86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bd870:	465b      	mov	r3, fp
   bd872:	463a      	mov	r2, r7
   bd874:	4631      	mov	r1, r6
   bd876:	a839      	add	r0, sp, #228	; 0xe4
  return lhs >= rhs;
   bd878:	bfac      	ite	ge
   bd87a:	f04f 0a01 	movge.w	sl, #1
   bd87e:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bd882:	f7f8 fe10 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd886:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd88a:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd88e:	e7c9      	b.n	bd824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd890:	f10b 0b01 	add.w	fp, fp, #1
   bd894:	e7be      	b.n	bd814 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd896:	3701      	adds	r7, #1
   bd898:	e7b4      	b.n	bd804 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd89a:	3601      	adds	r6, #1
   bd89c:	e7ab      	b.n	bd7f6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bd89e:	a839      	add	r0, sp, #228	; 0xe4
   bd8a0:	f7f8 fd8f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd8a4:	a816      	add	r0, sp, #88	; 0x58
   bd8a6:	f7f8 fd8c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd8aa:	a811      	add	r0, sp, #68	; 0x44
   bd8ac:	f7f8 fd89 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bd8b0:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   bd8b2:	f7f8 fd86 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bd8b6:	2000      	movs	r0, #0
}
   bd8b8:	b04f      	add	sp, #316	; 0x13c
   bd8ba:	ecbd 8b02 	vpop	{d8}
   bd8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   bd8c2:	a839      	add	r0, sp, #228	; 0xe4
   bd8c4:	f7f9 f821 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd8c8:	4629      	mov	r1, r5
   bd8ca:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd8cc:	6876      	ldr	r6, [r6, #4]
   bd8ce:	f7f9 f81c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd8d2:	b105      	cbz	r5, bd8d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bd8d4:	686d      	ldr	r5, [r5, #4]
   bd8d6:	4621      	mov	r1, r4
   bd8d8:	a846      	add	r0, sp, #280	; 0x118
   bd8da:	f7f9 f816 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd8de:	b104      	cbz	r4, bd8e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bd8e0:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bd8e2:	aa46      	add	r2, sp, #280	; 0x118
   bd8e4:	4641      	mov	r1, r8
   bd8e6:	a839      	add	r0, sp, #228	; 0xe4
   bd8e8:	f7f8 fdff 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bd8ec:	2300      	movs	r3, #0
  const int64_t flatsize =
   bd8ee:	17c7      	asrs	r7, r0, #31
   bd8f0:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bd8f2:	4619      	mov	r1, r3
   bd8f4:	4283      	cmp	r3, r0
   bd8f6:	eb71 0607 	sbcs.w	r6, r1, r7
   bd8fa:	f280 80c2 	bge.w	bda82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bd8fe:	ecb2 7a01 	vldmia	r2!, {s14}
   bd902:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs >= rhs;
   bd906:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bd90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd90e:	bfac      	ite	ge
   bd910:	2601      	movge	r6, #1
   bd912:	2600      	movlt	r6, #0
   bd914:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bd916:	3301      	adds	r3, #1
   bd918:	f141 0100 	adc.w	r1, r1, #0
   bd91c:	e7ea      	b.n	bd8f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
   bd91e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bd922:	4631      	mov	r1, r6
   bd924:	2f00      	cmp	r7, #0
   bd926:	f000 8082 	beq.w	bda2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bd92a:	a81b      	add	r0, sp, #108	; 0x6c
   bd92c:	f7f8 ffed 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bd930:	6873      	ldr	r3, [r6, #4]
   bd932:	9305      	str	r3, [sp, #20]
   bd934:	4629      	mov	r1, r5
   bd936:	a820      	add	r0, sp, #128	; 0x80
   bd938:	f7f8 ffe7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bd93c:	b105      	cbz	r5, bd940 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   bd93e:	686d      	ldr	r5, [r5, #4]
   bd940:	4621      	mov	r1, r4
   bd942:	a825      	add	r0, sp, #148	; 0x94
   bd944:	f7f8 ffe1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bd948:	b104      	cbz	r4, bd94c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x210>
   bd94a:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bd94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bd94e:	2b04      	cmp	r3, #4
   bd950:	f73f af3c 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bd954:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bd956:	2b04      	cmp	r3, #4
   bd958:	f73f af38 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bd95c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bd95e:	2b04      	cmp	r3, #4
   bd960:	f73f af34 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bd964:	2301      	movs	r3, #1
   bd966:	aa25      	add	r2, sp, #148	; 0x94
   bd968:	2104      	movs	r1, #4
   bd96a:	a839      	add	r0, sp, #228	; 0xe4
   bd96c:	f7f8 fd6e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bd970:	ab46      	add	r3, sp, #280	; 0x118
   bd972:	4642      	mov	r2, r8
   bd974:	a920      	add	r1, sp, #128	; 0x80
   bd976:	a81b      	add	r0, sp, #108	; 0x6c
   bd978:	f7f9 f870 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bd97c:	2600      	movs	r6, #0
   bd97e:	2100      	movs	r1, #0
   bd980:	a839      	add	r0, sp, #228	; 0xe4
   bd982:	f7f8 fd29 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd986:	42b0      	cmp	r0, r6
   bd988:	dd46      	ble.n	bda18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bd98a:	2700      	movs	r7, #0
   bd98c:	2101      	movs	r1, #1
   bd98e:	a839      	add	r0, sp, #228	; 0xe4
   bd990:	f7f8 fd22 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd994:	42b8      	cmp	r0, r7
   bd996:	dd3d      	ble.n	bda14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bd998:	f04f 0b00 	mov.w	fp, #0
   bd99c:	2102      	movs	r1, #2
   bd99e:	a839      	add	r0, sp, #228	; 0xe4
   bd9a0:	f7f8 fd1a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd9a4:	4558      	cmp	r0, fp
   bd9a6:	dd33      	ble.n	bda10 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bd9a8:	f04f 0900 	mov.w	r9, #0
   bd9ac:	2103      	movs	r1, #3
   bd9ae:	a839      	add	r0, sp, #228	; 0xe4
   bd9b0:	f7f8 fd12 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bd9b4:	4548      	cmp	r0, r9
   bd9b6:	dd28      	ble.n	bda0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd9b8:	f8cd 9000 	str.w	r9, [sp]
   bd9bc:	465b      	mov	r3, fp
   bd9be:	463a      	mov	r2, r7
   bd9c0:	4631      	mov	r1, r6
   bd9c2:	4640      	mov	r0, r8
   bd9c4:	f7f8 fe18 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd9c8:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bd9cc:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bd9ce:	465b      	mov	r3, fp
   bd9d0:	463a      	mov	r2, r7
   bd9d2:	4631      	mov	r1, r6
   bd9d4:	a846      	add	r0, sp, #280	; 0x118
   bd9d6:	f7f8 fe0f 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs >= rhs;
   bd9da:	9b05      	ldr	r3, [sp, #20]
   bd9dc:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bd9e0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bd9e4:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bd9e8:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bd9ea:	465b      	mov	r3, fp
   bd9ec:	463a      	mov	r2, r7
   bd9ee:	4631      	mov	r1, r6
   bd9f0:	a839      	add	r0, sp, #228	; 0xe4
  return lhs >= rhs;
   bd9f2:	bfb4      	ite	lt
   bd9f4:	f04f 0a00 	movlt.w	sl, #0
   bd9f8:	f04f 0a01 	movge.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bd9fc:	f7f8 fd53 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bda00:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bda04:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bda08:	e7d0      	b.n	bd9ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bda0a:	f10b 0b01 	add.w	fp, fp, #1
   bda0e:	e7c5      	b.n	bd99c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bda10:	3701      	adds	r7, #1
   bda12:	e7bb      	b.n	bd98c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bda14:	3601      	adds	r6, #1
   bda16:	e7b2      	b.n	bd97e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bda18:	a839      	add	r0, sp, #228	; 0xe4
   bda1a:	f7f8 fcd2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bda1e:	a825      	add	r0, sp, #148	; 0x94
   bda20:	f7f8 fccf 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bda24:	a820      	add	r0, sp, #128	; 0x80
   bda26:	f7f8 fccc 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bda2a:	a81b      	add	r0, sp, #108	; 0x6c
   bda2c:	e741      	b.n	bd8b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bda2e:	a839      	add	r0, sp, #228	; 0xe4
   bda30:	f7f8 ff6b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bda34:	4629      	mov	r1, r5
   bda36:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bda38:	6876      	ldr	r6, [r6, #4]
   bda3a:	f7f8 ff66 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bda3e:	b105      	cbz	r5, bda42 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bda40:	686d      	ldr	r5, [r5, #4]
   bda42:	4621      	mov	r1, r4
   bda44:	a846      	add	r0, sp, #280	; 0x118
   bda46:	f7f8 ff60 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bda4a:	b104      	cbz	r4, bda4e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bda4c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bda4e:	aa46      	add	r2, sp, #280	; 0x118
   bda50:	4641      	mov	r1, r8
   bda52:	a839      	add	r0, sp, #228	; 0xe4
   bda54:	f7f8 fd49 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bda58:	2300      	movs	r3, #0
  const int64_t flatsize =
   bda5a:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bda5e:	461f      	mov	r7, r3
   bda60:	4283      	cmp	r3, r0
   bda62:	eb77 020c 	sbcs.w	r2, r7, ip
   bda66:	da0c      	bge.n	bda82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs >= rhs;
   bda68:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   bda6c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bda70:	428a      	cmp	r2, r1
   bda72:	bfb4      	ite	lt
   bda74:	2200      	movlt	r2, #0
   bda76:	2201      	movge	r2, #1
   bda78:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bda7a:	3301      	adds	r3, #1
   bda7c:	f147 0700 	adc.w	r7, r7, #0
   bda80:	e7ee      	b.n	bda60 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bda82:	a846      	add	r0, sp, #280	; 0x118
   bda84:	f7f8 fc9d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bda88:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
   bda8a:	f7f8 fc9a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bda8e:	a839      	add	r0, sp, #228	; 0xe4
   bda90:	e70f      	b.n	bd8b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bda92:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bda96:	4631      	mov	r1, r6
   bda98:	2f00      	cmp	r7, #0
   bda9a:	f000 808c 	beq.w	bdbb6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bda9e:	a82a      	add	r0, sp, #168	; 0xa8
   bdaa0:	f7f8 ff33 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdaa4:	4629      	mov	r1, r5
   bdaa6:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdaa8:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bdaac:	f7f8 ff2d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdab0:	b105      	cbz	r5, bdab4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x378>
   bdab2:	686d      	ldr	r5, [r5, #4]
   bdab4:	4621      	mov	r1, r4
   bdab6:	a834      	add	r0, sp, #208	; 0xd0
   bdab8:	f7f8 ff27 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdabc:	b104      	cbz	r4, bdac0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bdabe:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdac0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bdac2:	2b04      	cmp	r3, #4
   bdac4:	f73f ae82 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bdac8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bdaca:	2b04      	cmp	r3, #4
   bdacc:	f73f ae7e 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bdad0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bdad2:	2b04      	cmp	r3, #4
   bdad4:	f73f ae7a 	bgt.w	bd7cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bdad8:	2301      	movs	r3, #1
   bdada:	aa34      	add	r2, sp, #208	; 0xd0
   bdadc:	2104      	movs	r1, #4
   bdade:	a839      	add	r0, sp, #228	; 0xe4
   bdae0:	f7f8 fcb4 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bdae4:	ab46      	add	r3, sp, #280	; 0x118
   bdae6:	4642      	mov	r2, r8
   bdae8:	a92f      	add	r1, sp, #188	; 0xbc
   bdaea:	a82a      	add	r0, sp, #168	; 0xa8
   bdaec:	f7f8 ffb6 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdaf0:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdaf4:	2700      	movs	r7, #0
   bdaf6:	2100      	movs	r1, #0
   bdaf8:	a839      	add	r0, sp, #228	; 0xe4
   bdafa:	f7f8 fc6d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdafe:	42b8      	cmp	r0, r7
   bdb00:	dd4e      	ble.n	bdba0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdb02:	f04f 0800 	mov.w	r8, #0
   bdb06:	2101      	movs	r1, #1
   bdb08:	a839      	add	r0, sp, #228	; 0xe4
   bdb0a:	f7f8 fc65 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdb0e:	4540      	cmp	r0, r8
   bdb10:	dd44      	ble.n	bdb9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdb12:	2600      	movs	r6, #0
   bdb14:	2102      	movs	r1, #2
   bdb16:	a839      	add	r0, sp, #228	; 0xe4
   bdb18:	f7f8 fc5e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdb1c:	42b0      	cmp	r0, r6
   bdb1e:	dd3a      	ble.n	bdb96 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdb20:	f04f 0900 	mov.w	r9, #0
   bdb24:	2103      	movs	r1, #3
   bdb26:	a839      	add	r0, sp, #228	; 0xe4
   bdb28:	f7f8 fc56 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdb2c:	4548      	cmp	r0, r9
   bdb2e:	dd30      	ble.n	bdb92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdb30:	f8cd 9000 	str.w	r9, [sp]
   bdb34:	4633      	mov	r3, r6
   bdb36:	4642      	mov	r2, r8
   bdb38:	4639      	mov	r1, r7
   bdb3a:	ee18 0a10 	vmov	r0, s16
   bdb3e:	f7f8 fd5b 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bdb42:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdb46:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bdb48:	4633      	mov	r3, r6
   bdb4a:	4642      	mov	r2, r8
   bdb4c:	4639      	mov	r1, r7
   bdb4e:	a846      	add	r0, sp, #280	; 0x118
   bdb50:	f7f8 fd52 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bdb54:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   bdb58:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs >= rhs;
   bdb5c:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   bdb60:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   bdb64:	6849      	ldr	r1, [r1, #4]
   bdb66:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb68:	f8cd 9000 	str.w	r9, [sp]
  return lhs >= rhs;
   bdb6c:	4283      	cmp	r3, r0
   bdb6e:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb72:	a839      	add	r0, sp, #228	; 0xe4
   bdb74:	4633      	mov	r3, r6
   bdb76:	4642      	mov	r2, r8
   bdb78:	4639      	mov	r1, r7
  return lhs >= rhs;
   bdb7a:	bfac      	ite	ge
   bdb7c:	f04f 0a01 	movge.w	sl, #1
   bdb80:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb84:	f7f8 fc8f 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdb88:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdb8c:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdb90:	e7c8      	b.n	bdb24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdb92:	3601      	adds	r6, #1
   bdb94:	e7be      	b.n	bdb14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdb96:	f108 0801 	add.w	r8, r8, #1
   bdb9a:	e7b4      	b.n	bdb06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdb9c:	3701      	adds	r7, #1
   bdb9e:	e7aa      	b.n	bdaf6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bdba0:	a839      	add	r0, sp, #228	; 0xe4
   bdba2:	f7f8 fc0e 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdba6:	a834      	add	r0, sp, #208	; 0xd0
   bdba8:	f7f8 fc0b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdbac:	a82f      	add	r0, sp, #188	; 0xbc
   bdbae:	f7f8 fc08 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdbb2:	a82a      	add	r0, sp, #168	; 0xa8
   bdbb4:	e67d      	b.n	bd8b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bdbb6:	a839      	add	r0, sp, #228	; 0xe4
   bdbb8:	f7f8 fea7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdbbc:	4629      	mov	r1, r5
   bdbbe:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdbc0:	6877      	ldr	r7, [r6, #4]
   bdbc2:	f7f8 fea2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdbc6:	b105      	cbz	r5, bdbca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   bdbc8:	686d      	ldr	r5, [r5, #4]
   bdbca:	4621      	mov	r1, r4
   bdbcc:	a846      	add	r0, sp, #280	; 0x118
   bdbce:	f7f8 fe9c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdbd2:	b104      	cbz	r4, bdbd6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   bdbd4:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdbd6:	aa46      	add	r2, sp, #280	; 0x118
   bdbd8:	4641      	mov	r1, r8
   bdbda:	a839      	add	r0, sp, #228	; 0xe4
   bdbdc:	f7f8 fc85 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bdbe0:	2300      	movs	r3, #0
  const int64_t flatsize =
   bdbe2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bdbe6:	f1a7 0208 	sub.w	r2, r7, #8
   bdbea:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bdbec:	4619      	mov	r1, r3
   bdbee:	4283      	cmp	r3, r0
   bdbf0:	eb71 060e 	sbcs.w	r6, r1, lr
   bdbf4:	da0f      	bge.n	bdc16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs >= rhs;
   bdbf6:	f852 7f08 	ldr.w	r7, [r2, #8]!
   bdbfa:	f855 6f08 	ldr.w	r6, [r5, #8]!
   bdbfe:	42b7      	cmp	r7, r6
   bdc00:	6856      	ldr	r6, [r2, #4]
   bdc02:	686f      	ldr	r7, [r5, #4]
   bdc04:	41be      	sbcs	r6, r7
   bdc06:	bfac      	ite	ge
   bdc08:	2601      	movge	r6, #1
   bdc0a:	2600      	movlt	r6, #0
   bdc0c:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bdc0e:	3301      	adds	r3, #1
   bdc10:	f141 0100 	adc.w	r1, r1, #0
   bdc14:	e7eb      	b.n	bdbee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bdc16:	a846      	add	r0, sp, #280	; 0x118
   bdc18:	f7f8 fbd3 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdc1c:	a83e      	add	r0, sp, #248	; 0xf8
   bdc1e:	e734      	b.n	bda8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   bdc20:	6933      	ldr	r3, [r6, #16]
   bdc22:	68f0      	ldr	r0, [r6, #12]
   bdc24:	f1c3 0900 	rsb	r9, r3, #0
   bdc28:	692b      	ldr	r3, [r5, #16]
   bdc2a:	f1c3 0800 	rsb	r8, r3, #0
   bdc2e:	f7f6 fb5b 	bl	b42e8 <__aeabi_f2d>
   bdc32:	ec41 0b10 	vmov	d0, r0, r1
   bdc36:	a925      	add	r1, sp, #148	; 0x94
   bdc38:	a820      	add	r0, sp, #128	; 0x80
   bdc3a:	f7f7 fb57 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdc3e:	68e8      	ldr	r0, [r5, #12]
   bdc40:	f7f6 fb52 	bl	b42e8 <__aeabi_f2d>
   bdc44:	ec41 0b10 	vmov	d0, r0, r1
   bdc48:	a92f      	add	r1, sp, #188	; 0xbc
   bdc4a:	a82a      	add	r0, sp, #168	; 0xa8
   bdc4c:	f7f7 fb4e 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdc50:	2308      	movs	r3, #8
   bdc52:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bdc56:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bdc58:	9348      	str	r3, [sp, #288]	; 0x120
   bdc5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bdc5c:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bdc60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bdc62:	934b      	str	r3, [sp, #300]	; 0x12c
   bdc64:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bdc66:	934c      	str	r3, [sp, #304]	; 0x130
   bdc68:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bdc6c:	4631      	mov	r1, r6
   bdc6e:	a834      	add	r0, sp, #208	; 0xd0
   bdc70:	b1ff      	cbz	r7, bdcb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x576>
   bdc72:	f7f8 fe4a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdc76:	6872      	ldr	r2, [r6, #4]
   bdc78:	9205      	str	r2, [sp, #20]
   bdc7a:	4629      	mov	r1, r5
   bdc7c:	a839      	add	r0, sp, #228	; 0xe4
   bdc7e:	f7f8 fe44 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdc82:	4621      	mov	r1, r4
   bdc84:	4640      	mov	r0, r8
   bdc86:	686d      	ldr	r5, [r5, #4]
   bdc88:	f7f8 fe3f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdc8c:	9a05      	ldr	r2, [sp, #20]
   bdc8e:	b104      	cbz	r4, bdc92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bdc90:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   bdc92:	9500      	str	r5, [sp, #0]
   bdc94:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bdc98:	ab39      	add	r3, sp, #228	; 0xe4
   bdc9a:	a934      	add	r1, sp, #208	; 0xd0
   bdc9c:	a846      	add	r0, sp, #280	; 0x118
   bdc9e:	f7ff fc15 	bl	bd4cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bdca2:	4640      	mov	r0, r8
   bdca4:	f7f8 fb8d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdca8:	a839      	add	r0, sp, #228	; 0xe4
   bdcaa:	f7f8 fb8a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bdcae:	a834      	add	r0, sp, #208	; 0xd0
   bdcb0:	e5ff      	b.n	bd8b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bdcb2:	f7f8 fe2a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdcb6:	6873      	ldr	r3, [r6, #4]
   bdcb8:	9305      	str	r3, [sp, #20]
   bdcba:	4629      	mov	r1, r5
   bdcbc:	a839      	add	r0, sp, #228	; 0xe4
   bdcbe:	f7f8 fe24 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdcc2:	686b      	ldr	r3, [r5, #4]
   bdcc4:	9306      	str	r3, [sp, #24]
   bdcc6:	4621      	mov	r1, r4
   bdcc8:	4640      	mov	r0, r8
   bdcca:	f7f8 fe1e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bdcce:	b104      	cbz	r4, bdcd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x596>
   bdcd0:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bdcd2:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bdcd6:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bdcd8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bdcda:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bdcdc:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdce0:	aa3e      	add	r2, sp, #248	; 0xf8
   bdce2:	a939      	add	r1, sp, #228	; 0xe4
   bdce4:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bdce6:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdcea:	f7f8 fbfe 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bdcee:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bdcf2:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bdcf4:	2500      	movs	r5, #0
  const int64_t flatsize =
   bdcf6:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bdcf8:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bdcfa:	462b      	mov	r3, r5
   bdcfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bdcfe:	930b      	str	r3, [sp, #44]	; 0x2c
   bdd00:	4545      	cmp	r5, r8
   bdd02:	eb73 0202 	sbcs.w	r2, r3, r2
   bdd06:	f280 80b1 	bge.w	bde6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bdd0a:	9b06      	ldr	r3, [sp, #24]
   bdd0c:	5d5f      	ldrb	r7, [r3, r5]
   bdd0e:	9b08      	ldr	r3, [sp, #32]
   bdd10:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bdd12:	9b05      	ldr	r3, [sp, #20]
   bdd14:	5d58      	ldrb	r0, [r3, r5]
   bdd16:	9b07      	ldr	r3, [sp, #28]
   bdd18:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdd1a:	465a      	mov	r2, fp
   bdd1c:	4651      	mov	r1, sl
   bdd1e:	fa00 f009 	lsl.w	r0, r0, r9
   bdd22:	f7f8 fc1f 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bdd26:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdd2a:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdd2c:	ee18 2a10 	vmov	r2, s16
   bdd30:	4631      	mov	r1, r6
   bdd32:	4638      	mov	r0, r7
   bdd34:	f7f8 fc16 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs >= rhs;
   bdd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bdd3a:	4283      	cmp	r3, r0
   bdd3c:	bfb4      	ite	lt
   bdd3e:	2000      	movlt	r0, #0
   bdd40:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bdd42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs >= rhs;
   bdd44:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bdd46:	3501      	adds	r5, #1
   bdd48:	f143 0300 	adc.w	r3, r3, #0
   bdd4c:	e7d6      	b.n	bdcfc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bdd4e:	6933      	ldr	r3, [r6, #16]
   bdd50:	68f0      	ldr	r0, [r6, #12]
   bdd52:	f1c3 0900 	rsb	r9, r3, #0
   bdd56:	692b      	ldr	r3, [r5, #16]
   bdd58:	f1c3 0800 	rsb	r8, r3, #0
   bdd5c:	f7f6 fac4 	bl	b42e8 <__aeabi_f2d>
   bdd60:	ec41 0b10 	vmov	d0, r0, r1
   bdd64:	a925      	add	r1, sp, #148	; 0x94
   bdd66:	a820      	add	r0, sp, #128	; 0x80
   bdd68:	f7f7 fac0 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdd6c:	68e8      	ldr	r0, [r5, #12]
   bdd6e:	f7f6 fabb 	bl	b42e8 <__aeabi_f2d>
   bdd72:	ec41 0b10 	vmov	d0, r0, r1
   bdd76:	a92f      	add	r1, sp, #188	; 0xbc
   bdd78:	a82a      	add	r0, sp, #168	; 0xa8
   bdd7a:	f7f7 fab7 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bdd7e:	2308      	movs	r3, #8
   bdd80:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bdd84:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bdd86:	9348      	str	r3, [sp, #288]	; 0x120
   bdd88:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bdd8a:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bdd8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bdd90:	934b      	str	r3, [sp, #300]	; 0x12c
   bdd92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bdd94:	934c      	str	r3, [sp, #304]	; 0x130
   bdd96:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bdd9a:	4631      	mov	r1, r6
   bdd9c:	a834      	add	r0, sp, #208	; 0xd0
   bdd9e:	b1c7      	cbz	r7, bddd2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bdda0:	f7f8 fdb3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bdda4:	6872      	ldr	r2, [r6, #4]
   bdda6:	9205      	str	r2, [sp, #20]
   bdda8:	4629      	mov	r1, r5
   bddaa:	a839      	add	r0, sp, #228	; 0xe4
   bddac:	f7f8 fdad 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bddb0:	4621      	mov	r1, r4
   bddb2:	4640      	mov	r0, r8
   bddb4:	686d      	ldr	r5, [r5, #4]
   bddb6:	f7f8 fda8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bddba:	9a05      	ldr	r2, [sp, #20]
   bddbc:	b104      	cbz	r4, bddc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bddbe:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   bddc0:	9500      	str	r5, [sp, #0]
   bddc2:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bddc6:	ab39      	add	r3, sp, #228	; 0xe4
   bddc8:	a934      	add	r1, sp, #208	; 0xd0
   bddca:	a846      	add	r0, sp, #280	; 0x118
   bddcc:	f7ff fc1a 	bl	bd604 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bddd0:	e767      	b.n	bdca2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bddd2:	f7f8 fd9a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bddd6:	6873      	ldr	r3, [r6, #4]
   bddd8:	9305      	str	r3, [sp, #20]
   bddda:	4629      	mov	r1, r5
   bdddc:	a839      	add	r0, sp, #228	; 0xe4
   bddde:	f7f8 fd94 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bdde2:	686b      	ldr	r3, [r5, #4]
   bdde4:	9306      	str	r3, [sp, #24]
   bdde6:	4621      	mov	r1, r4
   bdde8:	4640      	mov	r0, r8
   bddea:	f7f8 fd8e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bddee:	b104      	cbz	r4, bddf2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bddf0:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bddf2:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bddf6:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bddf8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bddfa:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bddfc:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bde00:	aa3e      	add	r2, sp, #248	; 0xf8
   bde02:	a939      	add	r1, sp, #228	; 0xe4
   bde04:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bde06:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bde0a:	f7f8 fb6e 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bde0e:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bde12:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bde14:	2500      	movs	r5, #0
  const int64_t flatsize =
   bde16:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bde18:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bde1a:	462b      	mov	r3, r5
   bde1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bde1e:	930b      	str	r3, [sp, #44]	; 0x2c
   bde20:	4545      	cmp	r5, r8
   bde22:	eb73 0202 	sbcs.w	r2, r3, r2
   bde26:	da21      	bge.n	bde6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bde28:	9b06      	ldr	r3, [sp, #24]
   bde2a:	575f      	ldrsb	r7, [r3, r5]
   bde2c:	9b08      	ldr	r3, [sp, #32]
   bde2e:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bde30:	9b05      	ldr	r3, [sp, #20]
   bde32:	5758      	ldrsb	r0, [r3, r5]
   bde34:	9b07      	ldr	r3, [sp, #28]
   bde36:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bde38:	465a      	mov	r2, fp
   bde3a:	4651      	mov	r1, sl
   bde3c:	fa00 f009 	lsl.w	r0, r0, r9
   bde40:	f7f8 fb90 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bde44:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bde48:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bde4a:	ee18 2a10 	vmov	r2, s16
   bde4e:	4631      	mov	r1, r6
   bde50:	4638      	mov	r0, r7
   bde52:	f7f8 fb87 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs >= rhs;
   bde56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bde58:	4283      	cmp	r3, r0
   bde5a:	bfb4      	ite	lt
   bde5c:	2000      	movlt	r0, #0
   bde5e:	2001      	movge	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bde60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs >= rhs;
   bde62:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bde64:	3501      	adds	r5, #1
   bde66:	f143 0300 	adc.w	r3, r3, #0
   bde6a:	e7d7      	b.n	bde1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bde6c:	a83e      	add	r0, sp, #248	; 0xf8
   bde6e:	e719      	b.n	bdca4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bde70:	4640      	mov	r0, r8
   bde72:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bde76:	4902      	ldr	r1, [pc, #8]	; (bde80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bde78:	4798      	blx	r3
      return kTfLiteError;
   bde7a:	2001      	movs	r0, #1
   bde7c:	e51c      	b.n	bd8b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bde7e:	bf00      	nop
   bde80:	000c8b0b 	.word	0x000c8b0b

000bde84 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bde84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bde88:	ed2d 8b04 	vpush	{d8-d9}
   bde8c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde8e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bde90:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde92:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bde94:	9204      	str	r2, [sp, #16]
   bde96:	4604      	mov	r4, r0
   bde98:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bde9a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bde9c:	dd01      	ble.n	bdea2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bde9e:	f006 fcfd 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bdea2:	6833      	ldr	r3, [r6, #0]
   bdea4:	2b04      	cmp	r3, #4
   bdea6:	dcfa      	bgt.n	bde9e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bdea8:	6813      	ldr	r3, [r2, #0]
   bdeaa:	2b04      	cmp	r3, #4
   bdeac:	dcf7      	bgt.n	bde9e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bdeae:	2301      	movs	r3, #1
   bdeb0:	2104      	movs	r1, #4
   bdeb2:	a807      	add	r0, sp, #28
   bdeb4:	f7f8 faca 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bdeb8:	ab14      	add	r3, sp, #80	; 0x50
   bdeba:	aa0c      	add	r2, sp, #48	; 0x30
   bdebc:	4631      	mov	r1, r6
   bdebe:	4628      	mov	r0, r5
   bdec0:	f7f8 fdcc 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bdec4:	e9d4 a300 	ldrd	sl, r3, [r4]
   bdec8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   bdeca:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   bdecc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   bded0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   bded4:	68e3      	ldr	r3, [r4, #12]
   bded6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   bdeda:	6923      	ldr	r3, [r4, #16]
   bdedc:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   bdede:	6963      	ldr	r3, [r4, #20]
   bdee0:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdee4:	2400      	movs	r4, #0
   bdee6:	2100      	movs	r1, #0
   bdee8:	a807      	add	r0, sp, #28
   bdeea:	f7f8 fa75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdeee:	42a0      	cmp	r0, r4
   bdef0:	dd5c      	ble.n	bdfac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdef2:	2500      	movs	r5, #0
   bdef4:	af07      	add	r7, sp, #28
   bdef6:	2101      	movs	r1, #1
   bdef8:	4638      	mov	r0, r7
   bdefa:	f7f8 fa6d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdefe:	42a8      	cmp	r0, r5
   bdf00:	dd52      	ble.n	bdfa8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdf02:	2600      	movs	r6, #0
   bdf04:	2102      	movs	r1, #2
   bdf06:	4638      	mov	r0, r7
   bdf08:	f7f8 fa66 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdf0c:	42b0      	cmp	r0, r6
   bdf0e:	dd49      	ble.n	bdfa4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdf10:	f04f 0800 	mov.w	r8, #0
   bdf14:	2103      	movs	r1, #3
   bdf16:	4638      	mov	r0, r7
   bdf18:	f7f8 fa5e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bdf1c:	4540      	cmp	r0, r8
   bdf1e:	dd3f      	ble.n	bdfa0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bdf20:	f8cd 8000 	str.w	r8, [sp]
   bdf24:	4633      	mov	r3, r6
   bdf26:	462a      	mov	r2, r5
   bdf28:	4621      	mov	r1, r4
   bdf2a:	a80c      	add	r0, sp, #48	; 0x30
   bdf2c:	f7f8 fb64 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bdf30:	9b04      	ldr	r3, [sp, #16]
   bdf32:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   bdf36:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdf38:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bdf3c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdf3e:	462a      	mov	r2, r5
   bdf40:	4633      	mov	r3, r6
   bdf42:	4621      	mov	r1, r4
   bdf44:	a814      	add	r0, sp, #80	; 0x50
   bdf46:	f7f8 fb57 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bdf4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bdf4c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bdf4e:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   bdf50:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bdf52:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdf56:	ee18 2a90 	vmov	r2, s17
   bdf5a:	ee18 1a10 	vmov	r1, s16
   bdf5e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bdf62:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdf64:	f7f8 fafe 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdf68:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdf6a:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bdf6c:	ee19 1a10 	vmov	r1, s18
   bdf70:	465a      	mov	r2, fp
   bdf72:	4618      	mov	r0, r3
   bdf74:	f7f8 faf6 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf78:	f8cd 8000 	str.w	r8, [sp]
  return lhs < rhs;
   bdf7c:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf7e:	4633      	mov	r3, r6
   bdf80:	462a      	mov	r2, r5
   bdf82:	4621      	mov	r1, r4
   bdf84:	4638      	mov	r0, r7
  return lhs < rhs;
   bdf86:	bfac      	ite	ge
   bdf88:	f04f 0900 	movge.w	r9, #0
   bdf8c:	f04f 0901 	movlt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf90:	f7f8 fa89 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bdf94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdf96:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bdf9a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bdf9e:	e7b9      	b.n	bdf14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bdfa0:	3601      	adds	r6, #1
   bdfa2:	e7af      	b.n	bdf04 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bdfa4:	3501      	adds	r5, #1
   bdfa6:	e7a5      	b.n	bdef4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bdfa8:	3401      	adds	r4, #1
   bdfaa:	e79c      	b.n	bdee6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bdfac:	a807      	add	r0, sp, #28
   bdfae:	f7f8 fa08 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bdfb2:	b01d      	add	sp, #116	; 0x74
   bdfb4:	ecbd 8b04 	vpop	{d8-d9}
   bdfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdfbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   bdfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfc0:	ed2d 8b04 	vpush	{d8-d9}
   bdfc4:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdfc6:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   bdfc8:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdfca:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   bdfcc:	9204      	str	r2, [sp, #16]
   bdfce:	4604      	mov	r4, r0
   bdfd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   bdfd2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bdfd4:	dd01      	ble.n	bdfda <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   bdfd6:	f006 fc61 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bdfda:	6833      	ldr	r3, [r6, #0]
   bdfdc:	2b04      	cmp	r3, #4
   bdfde:	dcfa      	bgt.n	bdfd6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bdfe0:	6813      	ldr	r3, [r2, #0]
   bdfe2:	2b04      	cmp	r3, #4
   bdfe4:	dcf7      	bgt.n	bdfd6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   bdfe6:	2301      	movs	r3, #1
   bdfe8:	2104      	movs	r1, #4
   bdfea:	a807      	add	r0, sp, #28
   bdfec:	f7f8 fa2e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bdff0:	ab14      	add	r3, sp, #80	; 0x50
   bdff2:	aa0c      	add	r2, sp, #48	; 0x30
   bdff4:	4631      	mov	r1, r6
   bdff6:	4628      	mov	r0, r5
   bdff8:	f7f8 fd30 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   bdffc:	e9d4 a300 	ldrd	sl, r3, [r4]
   be000:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   be002:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   be004:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   be008:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   be00c:	68e3      	ldr	r3, [r4, #12]
   be00e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   be012:	6923      	ldr	r3, [r4, #16]
   be014:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   be016:	6963      	ldr	r3, [r4, #20]
   be018:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be01c:	2400      	movs	r4, #0
   be01e:	2100      	movs	r1, #0
   be020:	a807      	add	r0, sp, #28
   be022:	f7f8 f9d9 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be026:	42a0      	cmp	r0, r4
   be028:	dd5c      	ble.n	be0e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be02a:	2500      	movs	r5, #0
   be02c:	af07      	add	r7, sp, #28
   be02e:	2101      	movs	r1, #1
   be030:	4638      	mov	r0, r7
   be032:	f7f8 f9d1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be036:	42a8      	cmp	r0, r5
   be038:	dd52      	ble.n	be0e0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be03a:	2600      	movs	r6, #0
   be03c:	2102      	movs	r1, #2
   be03e:	4638      	mov	r0, r7
   be040:	f7f8 f9ca 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be044:	42b0      	cmp	r0, r6
   be046:	dd49      	ble.n	be0dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be048:	f04f 0800 	mov.w	r8, #0
   be04c:	2103      	movs	r1, #3
   be04e:	4638      	mov	r0, r7
   be050:	f7f8 f9c2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be054:	4540      	cmp	r0, r8
   be056:	dd3f      	ble.n	be0d8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   be058:	f8cd 8000 	str.w	r8, [sp]
   be05c:	4633      	mov	r3, r6
   be05e:	462a      	mov	r2, r5
   be060:	4621      	mov	r1, r4
   be062:	a80c      	add	r0, sp, #48	; 0x30
   be064:	f7f8 fac8 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be068:	9b04      	ldr	r3, [sp, #16]
   be06a:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   be06e:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be070:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   be074:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be076:	462a      	mov	r2, r5
   be078:	4633      	mov	r3, r6
   be07a:	4621      	mov	r1, r4
   be07c:	a814      	add	r0, sp, #80	; 0x50
   be07e:	f7f8 fabb 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be082:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   be084:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be086:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   be088:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be08a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be08e:	ee18 2a90 	vmov	r2, s17
   be092:	ee18 1a10 	vmov	r1, s16
   be096:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be09a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be09c:	f7f8 fa62 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be0a0:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be0a2:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be0a4:	ee19 1a10 	vmov	r1, s18
   be0a8:	465a      	mov	r2, fp
   be0aa:	4618      	mov	r0, r3
   be0ac:	f7f8 fa5a 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   be0b0:	f8cd 8000 	str.w	r8, [sp]
  return lhs < rhs;
   be0b4:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   be0b6:	4633      	mov	r3, r6
   be0b8:	462a      	mov	r2, r5
   be0ba:	4621      	mov	r1, r4
   be0bc:	4638      	mov	r0, r7
  return lhs < rhs;
   be0be:	bfac      	ite	ge
   be0c0:	f04f 0900 	movge.w	r9, #0
   be0c4:	f04f 0901 	movlt.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be0c8:	f7f8 f9ed 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   be0cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be0ce:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be0d2:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be0d6:	e7b9      	b.n	be04c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be0d8:	3601      	adds	r6, #1
   be0da:	e7af      	b.n	be03c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be0dc:	3501      	adds	r5, #1
   be0de:	e7a5      	b.n	be02c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be0e0:	3401      	adds	r4, #1
   be0e2:	e79c      	b.n	be01e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   be0e4:	a807      	add	r0, sp, #28
   be0e6:	f7f8 f96c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   be0ea:	b01d      	add	sp, #116	; 0x74
   be0ec:	ecbd 8b04 	vpop	{d8-d9}
   be0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be0f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   be0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be0f8:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be0fc:	680a      	ldr	r2, [r1, #0]
   be0fe:	f8d0 a008 	ldr.w	sl, [r0, #8]
   be102:	6895      	ldr	r5, [r2, #8]
   be104:	4680      	mov	r8, r0
   be106:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be108:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be10a:	2338      	movs	r3, #56	; 0x38
   be10c:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be110:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   be112:	fb03 a505 	mla	r5, r3, r5, sl
   be116:	eb0a 0609 	add.w	r6, sl, r9
   be11a:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   be11c:	4629      	mov	r1, r5
   be11e:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   be120:	fb03 a404 	mla	r4, r3, r4, sl
   be124:	f7f7 f87a 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   be128:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   be12c:	f080 0001 	eor.w	r0, r0, #1
   be130:	1e53      	subs	r3, r2, #1
   be132:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   be134:	2b08      	cmp	r3, #8
   be136:	f200 8377 	bhi.w	be828 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x734>
   be13a:	e8df f013 	tbh	[pc, r3, lsl #1]
   be13e:	0009      	.short	0x0009
   be140:	024d00cc 	.word	0x024d00cc
   be144:	03750186 	.word	0x03750186
   be148:	03750375 	.word	0x03750375
   be14c:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   be150:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be154:	4631      	mov	r1, r6
   be156:	2f00      	cmp	r7, #0
   be158:	f000 808f 	beq.w	be27a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x186>
   be15c:	a80c      	add	r0, sp, #48	; 0x30
   be15e:	f7f8 fbd4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be162:	6873      	ldr	r3, [r6, #4]
   be164:	9305      	str	r3, [sp, #20]
   be166:	4629      	mov	r1, r5
   be168:	a811      	add	r0, sp, #68	; 0x44
   be16a:	f7f8 fbce 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be16e:	b105      	cbz	r5, be172 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   be170:	686d      	ldr	r5, [r5, #4]
   be172:	4621      	mov	r1, r4
   be174:	a816      	add	r0, sp, #88	; 0x58
   be176:	f7f8 fbc8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be17a:	b104      	cbz	r4, be17e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   be17c:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be180:	2b04      	cmp	r3, #4
   be182:	dd01      	ble.n	be188 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x94>
   be184:	f006 fb8a 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be188:	9b11      	ldr	r3, [sp, #68]	; 0x44
   be18a:	2b04      	cmp	r3, #4
   be18c:	dcfa      	bgt.n	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be18e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   be190:	2b04      	cmp	r3, #4
   be192:	dcf7      	bgt.n	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be194:	2301      	movs	r3, #1
   be196:	aa16      	add	r2, sp, #88	; 0x58
   be198:	2104      	movs	r1, #4
   be19a:	a839      	add	r0, sp, #228	; 0xe4
   be19c:	f7f8 f956 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be1a0:	ab46      	add	r3, sp, #280	; 0x118
   be1a2:	4642      	mov	r2, r8
   be1a4:	a911      	add	r1, sp, #68	; 0x44
   be1a6:	a80c      	add	r0, sp, #48	; 0x30
   be1a8:	f7f8 fc58 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be1ac:	2600      	movs	r6, #0
   be1ae:	2100      	movs	r1, #0
   be1b0:	a839      	add	r0, sp, #228	; 0xe4
   be1b2:	f7f8 f911 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be1b6:	42b0      	cmp	r0, r6
   be1b8:	dd4d      	ble.n	be256 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be1ba:	2700      	movs	r7, #0
   be1bc:	2101      	movs	r1, #1
   be1be:	a839      	add	r0, sp, #228	; 0xe4
   be1c0:	f7f8 f90a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be1c4:	42b8      	cmp	r0, r7
   be1c6:	dd44      	ble.n	be252 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be1c8:	f04f 0b00 	mov.w	fp, #0
   be1cc:	2102      	movs	r1, #2
   be1ce:	a839      	add	r0, sp, #228	; 0xe4
   be1d0:	f7f8 f902 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be1d4:	4558      	cmp	r0, fp
   be1d6:	dd3a      	ble.n	be24e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be1d8:	f04f 0900 	mov.w	r9, #0
   be1dc:	2103      	movs	r1, #3
   be1de:	a839      	add	r0, sp, #228	; 0xe4
   be1e0:	f7f8 f8fa 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be1e4:	4548      	cmp	r0, r9
   be1e6:	dd2f      	ble.n	be248 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be1e8:	f8cd 9000 	str.w	r9, [sp]
   be1ec:	465b      	mov	r3, fp
   be1ee:	463a      	mov	r2, r7
   be1f0:	4631      	mov	r1, r6
   be1f2:	4640      	mov	r0, r8
   be1f4:	f7f8 fa00 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be1f8:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be1fc:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be1fe:	465b      	mov	r3, fp
   be200:	463a      	mov	r2, r7
   be202:	4631      	mov	r1, r6
   be204:	a846      	add	r0, sp, #280	; 0x118
   be206:	f7f8 f9f7 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be20a:	9b05      	ldr	r3, [sp, #20]
   be20c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   be210:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs < rhs;
   be214:	ed9a 7a00 	vldr	s14, [sl]
   be218:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   be21c:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be220:	eeb4 7ae7 	vcmpe.f32	s14, s15
   be224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   be228:	465b      	mov	r3, fp
   be22a:	463a      	mov	r2, r7
   be22c:	4631      	mov	r1, r6
   be22e:	a839      	add	r0, sp, #228	; 0xe4
  return lhs < rhs;
   be230:	bf4c      	ite	mi
   be232:	f04f 0a01 	movmi.w	sl, #1
   be236:	f04f 0a00 	movpl.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   be23a:	f7f8 f934 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be23e:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be242:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be246:	e7c9      	b.n	be1dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be248:	f10b 0b01 	add.w	fp, fp, #1
   be24c:	e7be      	b.n	be1cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be24e:	3701      	adds	r7, #1
   be250:	e7b4      	b.n	be1bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be252:	3601      	adds	r6, #1
   be254:	e7ab      	b.n	be1ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   be256:	a839      	add	r0, sp, #228	; 0xe4
   be258:	f7f8 f8b3 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be25c:	a816      	add	r0, sp, #88	; 0x58
   be25e:	f7f8 f8b0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be262:	a811      	add	r0, sp, #68	; 0x44
   be264:	f7f8 f8ad 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be268:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(Less);
   be26a:	f7f8 f8aa 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   be26e:	2000      	movs	r0, #0
}
   be270:	b04f      	add	sp, #316	; 0x13c
   be272:	ecbd 8b02 	vpop	{d8}
   be276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   be27a:	a839      	add	r0, sp, #228	; 0xe4
   be27c:	f7f8 fb45 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be280:	4629      	mov	r1, r5
   be282:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be284:	6876      	ldr	r6, [r6, #4]
   be286:	f7f8 fb40 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be28a:	b105      	cbz	r5, be28e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   be28c:	686d      	ldr	r5, [r5, #4]
   be28e:	4621      	mov	r1, r4
   be290:	a846      	add	r0, sp, #280	; 0x118
   be292:	f7f8 fb3a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be296:	b104      	cbz	r4, be29a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   be298:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be29a:	aa46      	add	r2, sp, #280	; 0x118
   be29c:	4641      	mov	r1, r8
   be29e:	a839      	add	r0, sp, #228	; 0xe4
   be2a0:	f7f8 f923 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be2a4:	2300      	movs	r3, #0
  const int64_t flatsize =
   be2a6:	17c7      	asrs	r7, r0, #31
   be2a8:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   be2aa:	4619      	mov	r1, r3
   be2ac:	4283      	cmp	r3, r0
   be2ae:	eb71 0607 	sbcs.w	r6, r1, r7
   be2b2:	f280 80c2 	bge.w	be43a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   be2b6:	ecb2 7a01 	vldmia	r2!, {s14}
   be2ba:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs < rhs;
   be2be:	eeb4 7ae7 	vcmpe.f32	s14, s15
   be2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   be2c6:	bf4c      	ite	mi
   be2c8:	2601      	movmi	r6, #1
   be2ca:	2600      	movpl	r6, #0
   be2cc:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be2ce:	3301      	adds	r3, #1
   be2d0:	f141 0100 	adc.w	r1, r1, #0
   be2d4:	e7ea      	b.n	be2ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
   be2d6:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be2da:	4631      	mov	r1, r6
   be2dc:	2f00      	cmp	r7, #0
   be2de:	f000 8082 	beq.w	be3e6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   be2e2:	a81b      	add	r0, sp, #108	; 0x6c
   be2e4:	f7f8 fb11 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be2e8:	6873      	ldr	r3, [r6, #4]
   be2ea:	9305      	str	r3, [sp, #20]
   be2ec:	4629      	mov	r1, r5
   be2ee:	a820      	add	r0, sp, #128	; 0x80
   be2f0:	f7f8 fb0b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be2f4:	b105      	cbz	r5, be2f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x204>
   be2f6:	686d      	ldr	r5, [r5, #4]
   be2f8:	4621      	mov	r1, r4
   be2fa:	a825      	add	r0, sp, #148	; 0x94
   be2fc:	f7f8 fb05 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be300:	b104      	cbz	r4, be304 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x210>
   be302:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be306:	2b04      	cmp	r3, #4
   be308:	f73f af3c 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be30c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be30e:	2b04      	cmp	r3, #4
   be310:	f73f af38 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be314:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be316:	2b04      	cmp	r3, #4
   be318:	f73f af34 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be31c:	2301      	movs	r3, #1
   be31e:	aa25      	add	r2, sp, #148	; 0x94
   be320:	2104      	movs	r1, #4
   be322:	a839      	add	r0, sp, #228	; 0xe4
   be324:	f7f8 f892 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be328:	ab46      	add	r3, sp, #280	; 0x118
   be32a:	4642      	mov	r2, r8
   be32c:	a920      	add	r1, sp, #128	; 0x80
   be32e:	a81b      	add	r0, sp, #108	; 0x6c
   be330:	f7f8 fb94 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be334:	2600      	movs	r6, #0
   be336:	2100      	movs	r1, #0
   be338:	a839      	add	r0, sp, #228	; 0xe4
   be33a:	f7f8 f84d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be33e:	42b0      	cmp	r0, r6
   be340:	dd46      	ble.n	be3d0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be342:	2700      	movs	r7, #0
   be344:	2101      	movs	r1, #1
   be346:	a839      	add	r0, sp, #228	; 0xe4
   be348:	f7f8 f846 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be34c:	42b8      	cmp	r0, r7
   be34e:	dd3d      	ble.n	be3cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be350:	f04f 0b00 	mov.w	fp, #0
   be354:	2102      	movs	r1, #2
   be356:	a839      	add	r0, sp, #228	; 0xe4
   be358:	f7f8 f83e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be35c:	4558      	cmp	r0, fp
   be35e:	dd33      	ble.n	be3c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be360:	f04f 0900 	mov.w	r9, #0
   be364:	2103      	movs	r1, #3
   be366:	a839      	add	r0, sp, #228	; 0xe4
   be368:	f7f8 f836 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be36c:	4548      	cmp	r0, r9
   be36e:	dd28      	ble.n	be3c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be370:	f8cd 9000 	str.w	r9, [sp]
   be374:	465b      	mov	r3, fp
   be376:	463a      	mov	r2, r7
   be378:	4631      	mov	r1, r6
   be37a:	4640      	mov	r0, r8
   be37c:	f7f8 f93c 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be380:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be384:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be386:	465b      	mov	r3, fp
   be388:	463a      	mov	r2, r7
   be38a:	4631      	mov	r1, r6
   be38c:	a846      	add	r0, sp, #280	; 0x118
   be38e:	f7f8 f933 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs < rhs;
   be392:	9b05      	ldr	r3, [sp, #20]
   be394:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   be398:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   be39c:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be3a0:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   be3a2:	465b      	mov	r3, fp
   be3a4:	463a      	mov	r2, r7
   be3a6:	4631      	mov	r1, r6
   be3a8:	a839      	add	r0, sp, #228	; 0xe4
  return lhs < rhs;
   be3aa:	bfac      	ite	ge
   be3ac:	f04f 0a00 	movge.w	sl, #0
   be3b0:	f04f 0a01 	movlt.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be3b4:	f7f8 f877 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be3b8:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be3bc:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be3c0:	e7d0      	b.n	be364 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be3c2:	f10b 0b01 	add.w	fp, fp, #1
   be3c6:	e7c5      	b.n	be354 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be3c8:	3701      	adds	r7, #1
   be3ca:	e7bb      	b.n	be344 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be3cc:	3601      	adds	r6, #1
   be3ce:	e7b2      	b.n	be336 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   be3d0:	a839      	add	r0, sp, #228	; 0xe4
   be3d2:	f7f7 fff6 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be3d6:	a825      	add	r0, sp, #148	; 0x94
   be3d8:	f7f7 fff3 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be3dc:	a820      	add	r0, sp, #128	; 0x80
   be3de:	f7f7 fff0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be3e2:	a81b      	add	r0, sp, #108	; 0x6c
   be3e4:	e741      	b.n	be26a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be3e6:	a839      	add	r0, sp, #228	; 0xe4
   be3e8:	f7f8 fa8f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be3ec:	4629      	mov	r1, r5
   be3ee:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be3f0:	6876      	ldr	r6, [r6, #4]
   be3f2:	f7f8 fa8a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be3f6:	b105      	cbz	r5, be3fa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x306>
   be3f8:	686d      	ldr	r5, [r5, #4]
   be3fa:	4621      	mov	r1, r4
   be3fc:	a846      	add	r0, sp, #280	; 0x118
   be3fe:	f7f8 fa84 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be402:	b104      	cbz	r4, be406 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x312>
   be404:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be406:	aa46      	add	r2, sp, #280	; 0x118
   be408:	4641      	mov	r1, r8
   be40a:	a839      	add	r0, sp, #228	; 0xe4
   be40c:	f7f8 f86d 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be410:	2300      	movs	r3, #0
  const int64_t flatsize =
   be412:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be416:	461f      	mov	r7, r3
   be418:	4283      	cmp	r3, r0
   be41a:	eb77 020c 	sbcs.w	r2, r7, ip
   be41e:	da0c      	bge.n	be43a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs < rhs;
   be420:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   be424:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   be428:	428a      	cmp	r2, r1
   be42a:	bfac      	ite	ge
   be42c:	2200      	movge	r2, #0
   be42e:	2201      	movlt	r2, #1
   be430:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be432:	3301      	adds	r3, #1
   be434:	f147 0700 	adc.w	r7, r7, #0
   be438:	e7ee      	b.n	be418 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x324>
   be43a:	a846      	add	r0, sp, #280	; 0x118
   be43c:	f7f7 ffc1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be440:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
   be442:	f7f7 ffbe 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be446:	a839      	add	r0, sp, #228	; 0xe4
   be448:	e70f      	b.n	be26a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be44a:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be44e:	4631      	mov	r1, r6
   be450:	2f00      	cmp	r7, #0
   be452:	f000 808c 	beq.w	be56e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   be456:	a82a      	add	r0, sp, #168	; 0xa8
   be458:	f7f8 fa57 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be45c:	4629      	mov	r1, r5
   be45e:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be460:	f8d6 b004 	ldr.w	fp, [r6, #4]
   be464:	f7f8 fa51 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be468:	b105      	cbz	r5, be46c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x378>
   be46a:	686d      	ldr	r5, [r5, #4]
   be46c:	4621      	mov	r1, r4
   be46e:	a834      	add	r0, sp, #208	; 0xd0
   be470:	f7f8 fa4b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be474:	b104      	cbz	r4, be478 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x384>
   be476:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be478:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be47a:	2b04      	cmp	r3, #4
   be47c:	f73f ae82 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be480:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be482:	2b04      	cmp	r3, #4
   be484:	f73f ae7e 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be488:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   be48a:	2b04      	cmp	r3, #4
   be48c:	f73f ae7a 	bgt.w	be184 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x90>
   be490:	2301      	movs	r3, #1
   be492:	aa34      	add	r2, sp, #208	; 0xd0
   be494:	2104      	movs	r1, #4
   be496:	a839      	add	r0, sp, #228	; 0xe4
   be498:	f7f7 ffd8 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be49c:	ab46      	add	r3, sp, #280	; 0x118
   be49e:	4642      	mov	r2, r8
   be4a0:	a92f      	add	r1, sp, #188	; 0xbc
   be4a2:	a82a      	add	r0, sp, #168	; 0xa8
   be4a4:	f7f8 fada 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be4a8:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be4ac:	2700      	movs	r7, #0
   be4ae:	2100      	movs	r1, #0
   be4b0:	a839      	add	r0, sp, #228	; 0xe4
   be4b2:	f7f7 ff91 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be4b6:	42b8      	cmp	r0, r7
   be4b8:	dd4e      	ble.n	be558 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be4ba:	f04f 0800 	mov.w	r8, #0
   be4be:	2101      	movs	r1, #1
   be4c0:	a839      	add	r0, sp, #228	; 0xe4
   be4c2:	f7f7 ff89 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be4c6:	4540      	cmp	r0, r8
   be4c8:	dd44      	ble.n	be554 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be4ca:	2600      	movs	r6, #0
   be4cc:	2102      	movs	r1, #2
   be4ce:	a839      	add	r0, sp, #228	; 0xe4
   be4d0:	f7f7 ff82 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be4d4:	42b0      	cmp	r0, r6
   be4d6:	dd3a      	ble.n	be54e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be4d8:	f04f 0900 	mov.w	r9, #0
   be4dc:	2103      	movs	r1, #3
   be4de:	a839      	add	r0, sp, #228	; 0xe4
   be4e0:	f7f7 ff7a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be4e4:	4548      	cmp	r0, r9
   be4e6:	dd30      	ble.n	be54a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be4e8:	f8cd 9000 	str.w	r9, [sp]
   be4ec:	4633      	mov	r3, r6
   be4ee:	4642      	mov	r2, r8
   be4f0:	4639      	mov	r1, r7
   be4f2:	ee18 0a10 	vmov	r0, s16
   be4f6:	f7f8 f87f 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be4fa:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be4fe:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   be500:	4633      	mov	r3, r6
   be502:	4642      	mov	r2, r8
   be504:	4639      	mov	r1, r7
   be506:	a846      	add	r0, sp, #280	; 0x118
   be508:	f7f8 f876 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   be50c:	eb0b 01ca 	add.w	r1, fp, sl, lsl #3
   be510:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
  return lhs < rhs;
   be514:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   be518:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   be51c:	6849      	ldr	r1, [r1, #4]
   be51e:	6852      	ldr	r2, [r2, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   be520:	f8cd 9000 	str.w	r9, [sp]
  return lhs < rhs;
   be524:	4283      	cmp	r3, r0
   be526:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   be52a:	a839      	add	r0, sp, #228	; 0xe4
   be52c:	4633      	mov	r3, r6
   be52e:	4642      	mov	r2, r8
   be530:	4639      	mov	r1, r7
  return lhs < rhs;
   be532:	bfb4      	ite	lt
   be534:	f04f 0a01 	movlt.w	sl, #1
   be538:	f04f 0a00 	movge.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   be53c:	f7f7 ffb3 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be540:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be544:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be548:	e7c8      	b.n	be4dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be54a:	3601      	adds	r6, #1
   be54c:	e7be      	b.n	be4cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be54e:	f108 0801 	add.w	r8, r8, #1
   be552:	e7b4      	b.n	be4be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be554:	3701      	adds	r7, #1
   be556:	e7aa      	b.n	be4ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   be558:	a839      	add	r0, sp, #228	; 0xe4
   be55a:	f7f7 ff32 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be55e:	a834      	add	r0, sp, #208	; 0xd0
   be560:	f7f7 ff2f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be564:	a82f      	add	r0, sp, #188	; 0xbc
   be566:	f7f7 ff2c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be56a:	a82a      	add	r0, sp, #168	; 0xa8
   be56c:	e67d      	b.n	be26a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be56e:	a839      	add	r0, sp, #228	; 0xe4
   be570:	f7f8 f9cb 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be574:	4629      	mov	r1, r5
   be576:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be578:	6877      	ldr	r7, [r6, #4]
   be57a:	f7f8 f9c6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be57e:	b105      	cbz	r5, be582 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   be580:	686d      	ldr	r5, [r5, #4]
   be582:	4621      	mov	r1, r4
   be584:	a846      	add	r0, sp, #280	; 0x118
   be586:	f7f8 f9c0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be58a:	b104      	cbz	r4, be58e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   be58c:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be58e:	aa46      	add	r2, sp, #280	; 0x118
   be590:	4641      	mov	r1, r8
   be592:	a839      	add	r0, sp, #228	; 0xe4
   be594:	f7f7 ffa9 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   be598:	2300      	movs	r3, #0
  const int64_t flatsize =
   be59a:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   be59e:	f1a7 0208 	sub.w	r2, r7, #8
   be5a2:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   be5a4:	4619      	mov	r1, r3
   be5a6:	4283      	cmp	r3, r0
   be5a8:	eb71 060e 	sbcs.w	r6, r1, lr
   be5ac:	da0f      	bge.n	be5ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs < rhs;
   be5ae:	f852 7f08 	ldr.w	r7, [r2, #8]!
   be5b2:	f855 6f08 	ldr.w	r6, [r5, #8]!
   be5b6:	42b7      	cmp	r7, r6
   be5b8:	6856      	ldr	r6, [r2, #4]
   be5ba:	686f      	ldr	r7, [r5, #4]
   be5bc:	41be      	sbcs	r6, r7
   be5be:	bfb4      	ite	lt
   be5c0:	2601      	movlt	r6, #1
   be5c2:	2600      	movge	r6, #0
   be5c4:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   be5c6:	3301      	adds	r3, #1
   be5c8:	f141 0100 	adc.w	r1, r1, #0
   be5cc:	e7eb      	b.n	be5a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   be5ce:	a846      	add	r0, sp, #280	; 0x118
   be5d0:	f7f7 fef7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be5d4:	a83e      	add	r0, sp, #248	; 0xf8
   be5d6:	e734      	b.n	be442 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(Less);
   be5d8:	6933      	ldr	r3, [r6, #16]
   be5da:	68f0      	ldr	r0, [r6, #12]
   be5dc:	f1c3 0900 	rsb	r9, r3, #0
   be5e0:	692b      	ldr	r3, [r5, #16]
   be5e2:	f1c3 0800 	rsb	r8, r3, #0
   be5e6:	f7f5 fe7f 	bl	b42e8 <__aeabi_f2d>
   be5ea:	ec41 0b10 	vmov	d0, r0, r1
   be5ee:	a925      	add	r1, sp, #148	; 0x94
   be5f0:	a820      	add	r0, sp, #128	; 0x80
   be5f2:	f7f6 fe7b 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be5f6:	68e8      	ldr	r0, [r5, #12]
   be5f8:	f7f5 fe76 	bl	b42e8 <__aeabi_f2d>
   be5fc:	ec41 0b10 	vmov	d0, r0, r1
   be600:	a92f      	add	r1, sp, #188	; 0xbc
   be602:	a82a      	add	r0, sp, #168	; 0xa8
   be604:	f7f6 fe72 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be608:	2308      	movs	r3, #8
   be60a:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   be60e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be610:	9348      	str	r3, [sp, #288]	; 0x120
   be612:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be614:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   be618:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be61a:	934b      	str	r3, [sp, #300]	; 0x12c
   be61c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be61e:	934c      	str	r3, [sp, #304]	; 0x130
   be620:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be624:	4631      	mov	r1, r6
   be626:	a834      	add	r0, sp, #208	; 0xd0
   be628:	b1ff      	cbz	r7, be66a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x576>
   be62a:	f7f8 f96e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be62e:	6872      	ldr	r2, [r6, #4]
   be630:	9205      	str	r2, [sp, #20]
   be632:	4629      	mov	r1, r5
   be634:	a839      	add	r0, sp, #228	; 0xe4
   be636:	f7f8 f968 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be63a:	4621      	mov	r1, r4
   be63c:	4640      	mov	r0, r8
   be63e:	686d      	ldr	r5, [r5, #4]
   be640:	f7f8 f963 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be644:	9a05      	ldr	r2, [sp, #20]
   be646:	b104      	cbz	r4, be64a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x556>
   be648:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Less);
   be64a:	9500      	str	r5, [sp, #0]
   be64c:	e9cd 8401 	strd	r8, r4, [sp, #4]
   be650:	ab39      	add	r3, sp, #228	; 0xe4
   be652:	a934      	add	r1, sp, #208	; 0xd0
   be654:	a846      	add	r0, sp, #280	; 0x118
   be656:	f7ff fc15 	bl	bde84 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   be65a:	4640      	mov	r0, r8
   be65c:	f7f7 feb1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be660:	a839      	add	r0, sp, #228	; 0xe4
   be662:	f7f7 feae 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   be666:	a834      	add	r0, sp, #208	; 0xd0
   be668:	e5ff      	b.n	be26a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x176>
   be66a:	f7f8 f94e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be66e:	6873      	ldr	r3, [r6, #4]
   be670:	9305      	str	r3, [sp, #20]
   be672:	4629      	mov	r1, r5
   be674:	a839      	add	r0, sp, #228	; 0xe4
   be676:	f7f8 f948 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be67a:	686b      	ldr	r3, [r5, #4]
   be67c:	9306      	str	r3, [sp, #24]
   be67e:	4621      	mov	r1, r4
   be680:	4640      	mov	r0, r8
   be682:	f7f8 f942 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be686:	b104      	cbz	r4, be68a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x596>
   be688:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   be68a:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   be68e:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   be690:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   be692:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   be694:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be698:	aa3e      	add	r2, sp, #248	; 0xf8
   be69a:	a939      	add	r1, sp, #228	; 0xe4
   be69c:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   be69e:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be6a2:	f7f7 ff22 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   be6a6:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   be6aa:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be6ac:	2500      	movs	r5, #0
  const int64_t flatsize =
   be6ae:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be6b0:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   be6b2:	462b      	mov	r3, r5
   be6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   be6b6:	930b      	str	r3, [sp, #44]	; 0x2c
   be6b8:	4545      	cmp	r5, r8
   be6ba:	eb73 0202 	sbcs.w	r2, r3, r2
   be6be:	f280 80b1 	bge.w	be824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   be6c2:	9b06      	ldr	r3, [sp, #24]
   be6c4:	5d5f      	ldrb	r7, [r3, r5]
   be6c6:	9b08      	ldr	r3, [sp, #32]
   be6c8:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   be6ca:	9b05      	ldr	r3, [sp, #20]
   be6cc:	5d58      	ldrb	r0, [r3, r5]
   be6ce:	9b07      	ldr	r3, [sp, #28]
   be6d0:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be6d2:	465a      	mov	r2, fp
   be6d4:	4651      	mov	r1, sl
   be6d6:	fa00 f009 	lsl.w	r0, r0, r9
   be6da:	f7f7 ff43 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be6de:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be6e2:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be6e4:	ee18 2a10 	vmov	r2, s16
   be6e8:	4631      	mov	r1, r6
   be6ea:	4638      	mov	r0, r7
   be6ec:	f7f7 ff3a 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs < rhs;
   be6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be6f2:	4283      	cmp	r3, r0
   be6f4:	bfac      	ite	ge
   be6f6:	2000      	movge	r0, #0
   be6f8:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   be6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs < rhs;
   be6fc:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   be6fe:	3501      	adds	r5, #1
   be700:	f143 0300 	adc.w	r3, r3, #0
   be704:	e7d6      	b.n	be6b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   be706:	6933      	ldr	r3, [r6, #16]
   be708:	68f0      	ldr	r0, [r6, #12]
   be70a:	f1c3 0900 	rsb	r9, r3, #0
   be70e:	692b      	ldr	r3, [r5, #16]
   be710:	f1c3 0800 	rsb	r8, r3, #0
   be714:	f7f5 fde8 	bl	b42e8 <__aeabi_f2d>
   be718:	ec41 0b10 	vmov	d0, r0, r1
   be71c:	a925      	add	r1, sp, #148	; 0x94
   be71e:	a820      	add	r0, sp, #128	; 0x80
   be720:	f7f6 fde4 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be724:	68e8      	ldr	r0, [r5, #12]
   be726:	f7f5 fddf 	bl	b42e8 <__aeabi_f2d>
   be72a:	ec41 0b10 	vmov	d0, r0, r1
   be72e:	a92f      	add	r1, sp, #188	; 0xbc
   be730:	a82a      	add	r0, sp, #168	; 0xa8
   be732:	f7f6 fddb 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   be736:	2308      	movs	r3, #8
   be738:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   be73c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   be73e:	9348      	str	r3, [sp, #288]	; 0x120
   be740:	9b25      	ldr	r3, [sp, #148]	; 0x94
   be742:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   be746:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   be748:	934b      	str	r3, [sp, #300]	; 0x12c
   be74a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   be74c:	934c      	str	r3, [sp, #304]	; 0x130
   be74e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   be752:	4631      	mov	r1, r6
   be754:	a834      	add	r0, sp, #208	; 0xd0
   be756:	b1c7      	cbz	r7, be78a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x696>
   be758:	f7f8 f8d7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be75c:	6872      	ldr	r2, [r6, #4]
   be75e:	9205      	str	r2, [sp, #20]
   be760:	4629      	mov	r1, r5
   be762:	a839      	add	r0, sp, #228	; 0xe4
   be764:	f7f8 f8d1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be768:	4621      	mov	r1, r4
   be76a:	4640      	mov	r0, r8
   be76c:	686d      	ldr	r5, [r5, #4]
   be76e:	f7f8 f8cc 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be772:	9a05      	ldr	r2, [sp, #20]
   be774:	b104      	cbz	r4, be778 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x684>
   be776:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(Less);
   be778:	9500      	str	r5, [sp, #0]
   be77a:	e9cd 8401 	strd	r8, r4, [sp, #4]
   be77e:	ab39      	add	r3, sp, #228	; 0xe4
   be780:	a934      	add	r1, sp, #208	; 0xd0
   be782:	a846      	add	r0, sp, #280	; 0x118
   be784:	f7ff fc1a 	bl	bdfbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   be788:	e767      	b.n	be65a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x566>
   be78a:	f7f8 f8be 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   be78e:	6873      	ldr	r3, [r6, #4]
   be790:	9305      	str	r3, [sp, #20]
   be792:	4629      	mov	r1, r5
   be794:	a839      	add	r0, sp, #228	; 0xe4
   be796:	f7f8 f8b8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   be79a:	686b      	ldr	r3, [r5, #4]
   be79c:	9306      	str	r3, [sp, #24]
   be79e:	4621      	mov	r1, r4
   be7a0:	4640      	mov	r0, r8
   be7a2:	f7f8 f8b2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   be7a6:	b104      	cbz	r4, be7aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   be7a8:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   be7aa:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   be7ae:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   be7b0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   be7b2:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   be7b4:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be7b8:	aa3e      	add	r2, sp, #248	; 0xf8
   be7ba:	a939      	add	r1, sp, #228	; 0xe4
   be7bc:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   be7be:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be7c2:	f7f7 fe92 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   be7c6:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   be7ca:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   be7cc:	2500      	movs	r5, #0
  const int64_t flatsize =
   be7ce:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   be7d0:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   be7d2:	462b      	mov	r3, r5
   be7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   be7d6:	930b      	str	r3, [sp, #44]	; 0x2c
   be7d8:	4545      	cmp	r5, r8
   be7da:	eb73 0202 	sbcs.w	r2, r3, r2
   be7de:	da21      	bge.n	be824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   be7e0:	9b06      	ldr	r3, [sp, #24]
   be7e2:	575f      	ldrsb	r7, [r3, r5]
   be7e4:	9b08      	ldr	r3, [sp, #32]
   be7e6:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   be7e8:	9b05      	ldr	r3, [sp, #20]
   be7ea:	5758      	ldrsb	r0, [r3, r5]
   be7ec:	9b07      	ldr	r3, [sp, #28]
   be7ee:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be7f0:	465a      	mov	r2, fp
   be7f2:	4651      	mov	r1, sl
   be7f4:	fa00 f009 	lsl.w	r0, r0, r9
   be7f8:	f7f7 feb4 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be7fc:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be800:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be802:	ee18 2a10 	vmov	r2, s16
   be806:	4631      	mov	r1, r6
   be808:	4638      	mov	r0, r7
   be80a:	f7f7 feab 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs < rhs;
   be80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be810:	4283      	cmp	r3, r0
   be812:	bfac      	ite	ge
   be814:	2000      	movge	r0, #0
   be816:	2001      	movlt	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   be818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs < rhs;
   be81a:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   be81c:	3501      	adds	r5, #1
   be81e:	f143 0300 	adc.w	r3, r3, #0
   be822:	e7d7      	b.n	be7d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   be824:	a83e      	add	r0, sp, #248	; 0xf8
   be826:	e719      	b.n	be65c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   be828:	4640      	mov	r0, r8
   be82a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   be82e:	4902      	ldr	r1, [pc, #8]	; (be838 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   be830:	4798      	blx	r3
      return kTfLiteError;
   be832:	2001      	movs	r0, #1
   be834:	e51c      	b.n	be270 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   be836:	bf00      	nop
   be838:	000c8b0b 	.word	0x000c8b0b

000be83c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   be83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be840:	ed2d 8b04 	vpush	{d8-d9}
   be844:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be846:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   be848:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be84a:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   be84c:	9204      	str	r2, [sp, #16]
   be84e:	4604      	mov	r4, r0
   be850:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   be852:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be854:	dd01      	ble.n	be85a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   be856:	f006 f821 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be85a:	6833      	ldr	r3, [r6, #0]
   be85c:	2b04      	cmp	r3, #4
   be85e:	dcfa      	bgt.n	be856 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be860:	6813      	ldr	r3, [r2, #0]
   be862:	2b04      	cmp	r3, #4
   be864:	dcf7      	bgt.n	be856 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   be866:	2301      	movs	r3, #1
   be868:	2104      	movs	r1, #4
   be86a:	a807      	add	r0, sp, #28
   be86c:	f7f7 fdee 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be870:	ab14      	add	r3, sp, #80	; 0x50
   be872:	aa0c      	add	r2, sp, #48	; 0x30
   be874:	4631      	mov	r1, r6
   be876:	4628      	mov	r0, r5
   be878:	f7f8 f8f0 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   be87c:	e9d4 a300 	ldrd	sl, r3, [r4]
   be880:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   be882:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   be884:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   be888:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   be88c:	68e3      	ldr	r3, [r4, #12]
   be88e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   be892:	6923      	ldr	r3, [r4, #16]
   be894:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   be896:	6963      	ldr	r3, [r4, #20]
   be898:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be89c:	2400      	movs	r4, #0
   be89e:	2100      	movs	r1, #0
   be8a0:	a807      	add	r0, sp, #28
   be8a2:	f7f7 fd99 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be8a6:	42a0      	cmp	r0, r4
   be8a8:	dd5c      	ble.n	be964 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be8aa:	2500      	movs	r5, #0
   be8ac:	af07      	add	r7, sp, #28
   be8ae:	2101      	movs	r1, #1
   be8b0:	4638      	mov	r0, r7
   be8b2:	f7f7 fd91 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be8b6:	42a8      	cmp	r0, r5
   be8b8:	dd52      	ble.n	be960 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be8ba:	2600      	movs	r6, #0
   be8bc:	2102      	movs	r1, #2
   be8be:	4638      	mov	r0, r7
   be8c0:	f7f7 fd8a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be8c4:	42b0      	cmp	r0, r6
   be8c6:	dd49      	ble.n	be95c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be8c8:	f04f 0800 	mov.w	r8, #0
   be8cc:	2103      	movs	r1, #3
   be8ce:	4638      	mov	r0, r7
   be8d0:	f7f7 fd82 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be8d4:	4540      	cmp	r0, r8
   be8d6:	dd3f      	ble.n	be958 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   be8d8:	f8cd 8000 	str.w	r8, [sp]
   be8dc:	4633      	mov	r3, r6
   be8de:	462a      	mov	r2, r5
   be8e0:	4621      	mov	r1, r4
   be8e2:	a80c      	add	r0, sp, #48	; 0x30
   be8e4:	f7f7 fe88 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be8e8:	9b04      	ldr	r3, [sp, #16]
   be8ea:	f813 9000 	ldrb.w	r9, [r3, r0]
          const int32 input1_val =
   be8ee:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be8f0:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   be8f4:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be8f6:	462a      	mov	r2, r5
   be8f8:	4633      	mov	r3, r6
   be8fa:	4621      	mov	r1, r4
   be8fc:	a814      	add	r0, sp, #80	; 0x50
   be8fe:	f7f7 fe7b 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   be902:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   be904:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   be906:	5c1b      	ldrb	r3, [r3, r0]
          const int32 input2_val =
   be908:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be90a:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be90e:	ee18 2a90 	vmov	r2, s17
   be912:	ee18 1a10 	vmov	r1, s16
   be916:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   be91a:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be91c:	f7f7 fe22 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be920:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be922:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   be924:	ee19 1a10 	vmov	r1, s18
   be928:	465a      	mov	r2, fp
   be92a:	4618      	mov	r0, r3
   be92c:	f7f7 fe1a 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   be930:	f8cd 8000 	str.w	r8, [sp]
  return lhs <= rhs;
   be934:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   be936:	4633      	mov	r3, r6
   be938:	462a      	mov	r2, r5
   be93a:	4621      	mov	r1, r4
   be93c:	4638      	mov	r0, r7
  return lhs <= rhs;
   be93e:	bfcc      	ite	gt
   be940:	f04f 0900 	movgt.w	r9, #0
   be944:	f04f 0901 	movle.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be948:	f7f7 fdad 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   be94c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be94e:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   be952:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   be956:	e7b9      	b.n	be8cc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be958:	3601      	adds	r6, #1
   be95a:	e7af      	b.n	be8bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be95c:	3501      	adds	r5, #1
   be95e:	e7a5      	b.n	be8ac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be960:	3401      	adds	r4, #1
   be962:	e79c      	b.n	be89e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   be964:	a807      	add	r0, sp, #28
   be966:	f7f7 fd2c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   be96a:	b01d      	add	sp, #116	; 0x74
   be96c:	ecbd 8b04 	vpop	{d8-d9}
   be970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be974 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   be974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be978:	ed2d 8b04 	vpush	{d8-d9}
   be97c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be97e:	680b      	ldr	r3, [r1, #0]
inline void BroadcastComparison4DSlowWithScaling(
   be980:	b09d      	sub	sp, #116	; 0x74
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be982:	2b04      	cmp	r3, #4
inline void BroadcastComparison4DSlowWithScaling(
   be984:	9204      	str	r2, [sp, #16]
   be986:	4604      	mov	r4, r0
   be988:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   be98a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   be98c:	dd01      	ble.n	be992 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1e>
   be98e:	f005 ff85 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   be992:	6833      	ldr	r3, [r6, #0]
   be994:	2b04      	cmp	r3, #4
   be996:	dcfa      	bgt.n	be98e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   be998:	6813      	ldr	r3, [r2, #0]
   be99a:	2b04      	cmp	r3, #4
   be99c:	dcf7      	bgt.n	be98e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x1a>
   be99e:	2301      	movs	r3, #1
   be9a0:	2104      	movs	r1, #4
   be9a2:	a807      	add	r0, sp, #28
   be9a4:	f7f7 fd52 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   be9a8:	ab14      	add	r3, sp, #80	; 0x50
   be9aa:	aa0c      	add	r2, sp, #48	; 0x30
   be9ac:	4631      	mov	r1, r6
   be9ae:	4628      	mov	r0, r5
   be9b0:	f7f8 f854 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32 input1_offset = op_params.input1_offset;
   be9b4:	e9d4 a300 	ldrd	sl, r3, [r4]
   be9b8:	9302      	str	r3, [sp, #8]
  int32 input1_multiplier = op_params.input1_multiplier;
   be9ba:	68a3      	ldr	r3, [r4, #8]
  int input2_shift = op_params.input2_shift;
   be9bc:	f8d4 b018 	ldr.w	fp, [r4, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   be9c0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   be9c4:	68e3      	ldr	r3, [r4, #12]
   be9c6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   be9ca:	6923      	ldr	r3, [r4, #16]
   be9cc:	9303      	str	r3, [sp, #12]
  int32 input2_multiplier = op_params.input2_multiplier;
   be9ce:	6963      	ldr	r3, [r4, #20]
   be9d0:	ee09 3a10 	vmov	s18, r3
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   be9d4:	2400      	movs	r4, #0
   be9d6:	2100      	movs	r1, #0
   be9d8:	a807      	add	r0, sp, #28
   be9da:	f7f7 fcfd 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be9de:	42a0      	cmp	r0, r4
   be9e0:	dd5c      	ble.n	bea9c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x128>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   be9e2:	2500      	movs	r5, #0
   be9e4:	af07      	add	r7, sp, #28
   be9e6:	2101      	movs	r1, #1
   be9e8:	4638      	mov	r0, r7
   be9ea:	f7f7 fcf5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be9ee:	42a8      	cmp	r0, r5
   be9f0:	dd52      	ble.n	bea98 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x124>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   be9f2:	2600      	movs	r6, #0
   be9f4:	2102      	movs	r1, #2
   be9f6:	4638      	mov	r0, r7
   be9f8:	f7f7 fcee 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   be9fc:	42b0      	cmp	r0, r6
   be9fe:	dd49      	ble.n	bea94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x120>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bea00:	f04f 0800 	mov.w	r8, #0
   bea04:	2103      	movs	r1, #3
   bea06:	4638      	mov	r0, r7
   bea08:	f7f7 fce6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bea0c:	4540      	cmp	r0, r8
   bea0e:	dd3f      	ble.n	bea90 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x11c>
              input1_offset + input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   bea10:	f8cd 8000 	str.w	r8, [sp]
   bea14:	4633      	mov	r3, r6
   bea16:	462a      	mov	r2, r5
   bea18:	4621      	mov	r1, r4
   bea1a:	a80c      	add	r0, sp, #48	; 0x30
   bea1c:	f7f7 fdec 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bea20:	9b04      	ldr	r3, [sp, #16]
   bea22:	f913 9000 	ldrsb.w	r9, [r3, r0]
          const int32 input1_val =
   bea26:	9b02      	ldr	r3, [sp, #8]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bea28:	f8cd 8000 	str.w	r8, [sp]
          const int32 input1_val =
   bea2c:	4499      	add	r9, r3
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bea2e:	462a      	mov	r2, r5
   bea30:	4633      	mov	r3, r6
   bea32:	4621      	mov	r1, r4
   bea34:	a814      	add	r0, sp, #80	; 0x50
   bea36:	f7f7 fddf 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bea3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          const int32 input2_val =
   bea3c:	9a03      	ldr	r2, [sp, #12]
              input2_offset + input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   bea3e:	561b      	ldrsb	r3, [r3, r0]
          const int32 input2_val =
   bea40:	4413      	add	r3, r2
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bea42:	fa03 f30a 	lsl.w	r3, r3, sl
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bea46:	ee18 2a90 	vmov	r2, s17
   bea4a:	ee18 1a10 	vmov	r1, s16
   bea4e:	fa09 f00a 	lsl.w	r0, r9, sl
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bea52:	9305      	str	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bea54:	f7f7 fd86 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bea58:	9b05      	ldr	r3, [sp, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bea5a:	4681      	mov	r9, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bea5c:	ee19 1a10 	vmov	r1, s18
   bea60:	465a      	mov	r2, fp
   bea62:	4618      	mov	r0, r3
   bea64:	f7f7 fd7e 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(output_shape, b, y, x, c)] =
   bea68:	f8cd 8000 	str.w	r8, [sp]
  return lhs <= rhs;
   bea6c:	4581      	cmp	r9, r0
          output_data[Offset(output_shape, b, y, x, c)] =
   bea6e:	4633      	mov	r3, r6
   bea70:	462a      	mov	r2, r5
   bea72:	4621      	mov	r1, r4
   bea74:	4638      	mov	r0, r7
  return lhs <= rhs;
   bea76:	bfcc      	ite	gt
   bea78:	f04f 0900 	movgt.w	r9, #0
   bea7c:	f04f 0901 	movle.w	r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bea80:	f7f7 fd11 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bea84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bea86:	f108 0801 	add.w	r8, r8, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bea8a:	f803 9000 	strb.w	r9, [r3, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bea8e:	e7b9      	b.n	bea04 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bea90:	3601      	adds	r6, #1
   bea92:	e7af      	b.n	be9f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x80>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bea94:	3501      	adds	r5, #1
   bea96:	e7a5      	b.n	be9e4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x70>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bea98:	3401      	adds	r4, #1
   bea9a:	e79c      	b.n	be9d6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x62>
  const RuntimeShape output_shape =
   bea9c:	a807      	add	r0, sp, #28
   bea9e:	f7f7 fc90 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   beaa2:	b01d      	add	sp, #116	; 0x74
   beaa4:	ecbd 8b04 	vpop	{d8-d9}
   beaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000beaac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   beaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beab0:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   beab4:	680a      	ldr	r2, [r1, #0]
   beab6:	f8d0 a008 	ldr.w	sl, [r0, #8]
   beaba:	6895      	ldr	r5, [r2, #8]
   beabc:	4680      	mov	r8, r0
   beabe:	6850      	ldr	r0, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   beac0:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   beac2:	2338      	movs	r3, #56	; 0x38
   beac4:	fb03 f900 	mul.w	r9, r3, r0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   beac8:	6854      	ldr	r4, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   beaca:	fb03 a505 	mla	r5, r3, r5, sl
   beace:	eb0a 0609 	add.w	r6, sl, r9
   bead2:	b0cf      	sub	sp, #316	; 0x13c
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   bead4:	4629      	mov	r1, r5
   bead6:	4630      	mov	r0, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bead8:	fb03 a404 	mla	r4, r3, r4, sl
   beadc:	f7f6 fb9e 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  switch (input1->type) {
   beae0:	f81a 2009 	ldrb.w	r2, [sl, r9]
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   beae4:	f080 0001 	eor.w	r0, r0, #1
   beae8:	1e53      	subs	r3, r2, #1
   beaea:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   beaec:	2b08      	cmp	r3, #8
   beaee:	f200 8377 	bhi.w	bf1e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x734>
   beaf2:	e8df f013 	tbh	[pc, r3, lsl #1]
   beaf6:	0009      	.short	0x0009
   beaf8:	024d00cc 	.word	0x024d00cc
   beafc:	03750186 	.word	0x03750186
   beb00:	03750375 	.word	0x03750375
   beb04:	02e40375 	.word	0x02e40375
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   beb08:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   beb0c:	4631      	mov	r1, r6
   beb0e:	2f00      	cmp	r7, #0
   beb10:	f000 808f 	beq.w	bec32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x186>
   beb14:	a80c      	add	r0, sp, #48	; 0x30
   beb16:	f7f7 fef8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   beb1a:	6873      	ldr	r3, [r6, #4]
   beb1c:	9305      	str	r3, [sp, #20]
   beb1e:	4629      	mov	r1, r5
   beb20:	a811      	add	r0, sp, #68	; 0x44
   beb22:	f7f7 fef2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beb26:	b105      	cbz	r5, beb2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x7e>
   beb28:	686d      	ldr	r5, [r5, #4]
   beb2a:	4621      	mov	r1, r4
   beb2c:	a816      	add	r0, sp, #88	; 0x58
   beb2e:	f7f7 feec 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   beb32:	b104      	cbz	r4, beb36 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   beb34:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   beb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   beb38:	2b04      	cmp	r3, #4
   beb3a:	dd01      	ble.n	beb40 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x94>
   beb3c:	f005 feae 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   beb40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   beb42:	2b04      	cmp	r3, #4
   beb44:	dcfa      	bgt.n	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   beb46:	9b16      	ldr	r3, [sp, #88]	; 0x58
   beb48:	2b04      	cmp	r3, #4
   beb4a:	dcf7      	bgt.n	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   beb4c:	2301      	movs	r3, #1
   beb4e:	aa16      	add	r2, sp, #88	; 0x58
   beb50:	2104      	movs	r1, #4
   beb52:	a839      	add	r0, sp, #228	; 0xe4
   beb54:	f7f7 fc7a 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   beb58:	ab46      	add	r3, sp, #280	; 0x118
   beb5a:	4642      	mov	r2, r8
   beb5c:	a911      	add	r1, sp, #68	; 0x44
   beb5e:	a80c      	add	r0, sp, #48	; 0x30
   beb60:	f7f7 ff7c 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   beb64:	2600      	movs	r6, #0
   beb66:	2100      	movs	r1, #0
   beb68:	a839      	add	r0, sp, #228	; 0xe4
   beb6a:	f7f7 fc35 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb6e:	42b0      	cmp	r0, r6
   beb70:	dd4d      	ble.n	bec0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x162>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   beb72:	2700      	movs	r7, #0
   beb74:	2101      	movs	r1, #1
   beb76:	a839      	add	r0, sp, #228	; 0xe4
   beb78:	f7f7 fc2e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb7c:	42b8      	cmp	r0, r7
   beb7e:	dd44      	ble.n	bec0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   beb80:	f04f 0b00 	mov.w	fp, #0
   beb84:	2102      	movs	r1, #2
   beb86:	a839      	add	r0, sp, #228	; 0xe4
   beb88:	f7f7 fc26 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb8c:	4558      	cmp	r0, fp
   beb8e:	dd3a      	ble.n	bec06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   beb90:	f04f 0900 	mov.w	r9, #0
   beb94:	2103      	movs	r1, #3
   beb96:	a839      	add	r0, sp, #228	; 0xe4
   beb98:	f7f7 fc1e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   beb9c:	4548      	cmp	r0, r9
   beb9e:	dd2f      	ble.n	bec00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x154>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beba0:	f8cd 9000 	str.w	r9, [sp]
   beba4:	465b      	mov	r3, fp
   beba6:	463a      	mov	r2, r7
   beba8:	4631      	mov	r1, r6
   bebaa:	4640      	mov	r0, r8
   bebac:	f7f7 fd24 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bebb0:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bebb4:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bebb6:	465b      	mov	r3, fp
   bebb8:	463a      	mov	r2, r7
   bebba:	4631      	mov	r1, r6
   bebbc:	a846      	add	r0, sp, #280	; 0x118
   bebbe:	f7f7 fd1b 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bebc2:	9b05      	ldr	r3, [sp, #20]
   bebc4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   bebc8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  return lhs <= rhs;
   bebcc:	ed9a 7a00 	vldr	s14, [sl]
   bebd0:	edd0 7a00 	vldr	s15, [r0]
          output_data[Offset(output_shape, b, y, x, c)] =
   bebd4:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   bebd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bebdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(output_shape, b, y, x, c)] =
   bebe0:	465b      	mov	r3, fp
   bebe2:	463a      	mov	r2, r7
   bebe4:	4631      	mov	r1, r6
   bebe6:	a839      	add	r0, sp, #228	; 0xe4
  return lhs <= rhs;
   bebe8:	bf94      	ite	ls
   bebea:	f04f 0a01 	movls.w	sl, #1
   bebee:	f04f 0a00 	movhi.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   bebf2:	f7f7 fc58 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bebf6:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bebfa:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bebfe:	e7c9      	b.n	beb94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bec00:	f10b 0b01 	add.w	fp, fp, #1
   bec04:	e7be      	b.n	beb84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bec06:	3701      	adds	r7, #1
   bec08:	e7b4      	b.n	beb74 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xc8>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bec0a:	3601      	adds	r6, #1
   bec0c:	e7ab      	b.n	beb66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xba>
  const RuntimeShape output_shape =
   bec0e:	a839      	add	r0, sp, #228	; 0xe4
   bec10:	f7f7 fbd7 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bec14:	a816      	add	r0, sp, #88	; 0x58
   bec16:	f7f7 fbd4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bec1a:	a811      	add	r0, sp, #68	; 0x44
   bec1c:	f7f7 fbd1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bec20:	a80c      	add	r0, sp, #48	; 0x30
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   bec22:	f7f7 fbce 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bec26:	2000      	movs	r0, #0
}
   bec28:	b04f      	add	sp, #316	; 0x13c
   bec2a:	ecbd 8b02 	vpop	{d8}
   bec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   bec32:	a839      	add	r0, sp, #228	; 0xe4
   bec34:	f7f7 fe69 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bec38:	4629      	mov	r1, r5
   bec3a:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bec3c:	6876      	ldr	r6, [r6, #4]
   bec3e:	f7f7 fe64 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bec42:	b105      	cbz	r5, bec46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x19a>
   bec44:	686d      	ldr	r5, [r5, #4]
   bec46:	4621      	mov	r1, r4
   bec48:	a846      	add	r0, sp, #280	; 0x118
   bec4a:	f7f7 fe5e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bec4e:	b104      	cbz	r4, bec52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
   bec50:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bec52:	aa46      	add	r2, sp, #280	; 0x118
   bec54:	4641      	mov	r1, r8
   bec56:	a839      	add	r0, sp, #228	; 0xe4
   bec58:	f7f7 fc47 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bec5c:	2300      	movs	r3, #0
  const int64_t flatsize =
   bec5e:	17c7      	asrs	r7, r0, #31
   bec60:	4632      	mov	r2, r6
  for (int64_t i = 0; i < flatsize; ++i) {
   bec62:	4619      	mov	r1, r3
   bec64:	4283      	cmp	r3, r0
   bec66:	eb71 0607 	sbcs.w	r6, r1, r7
   bec6a:	f280 80c2 	bge.w	bedf2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
    output_data[i] = F(input1_data[i], input2_data[i]);
   bec6e:	ecb2 7a01 	vldmia	r2!, {s14}
   bec72:	ecf5 7a01 	vldmia	r5!, {s15}
  return lhs <= rhs;
   bec76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bec7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bec7e:	bf94      	ite	ls
   bec80:	2601      	movls	r6, #1
   bec82:	2600      	movhi	r6, #0
   bec84:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bec86:	3301      	adds	r3, #1
   bec88:	f141 0100 	adc.w	r1, r1, #0
   bec8c:	e7ea      	b.n	bec64 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
   bec8e:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bec92:	4631      	mov	r1, r6
   bec94:	2f00      	cmp	r7, #0
   bec96:	f000 8082 	beq.w	bed9e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
   bec9a:	a81b      	add	r0, sp, #108	; 0x6c
   bec9c:	f7f7 fe35 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   beca0:	6873      	ldr	r3, [r6, #4]
   beca2:	9305      	str	r3, [sp, #20]
   beca4:	4629      	mov	r1, r5
   beca6:	a820      	add	r0, sp, #128	; 0x80
   beca8:	f7f7 fe2f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   becac:	b105      	cbz	r5, becb0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   becae:	686d      	ldr	r5, [r5, #4]
   becb0:	4621      	mov	r1, r4
   becb2:	a825      	add	r0, sp, #148	; 0x94
   becb4:	f7f7 fe29 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   becb8:	b104      	cbz	r4, becbc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x210>
   becba:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   becbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   becbe:	2b04      	cmp	r3, #4
   becc0:	f73f af3c 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   becc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   becc6:	2b04      	cmp	r3, #4
   becc8:	f73f af38 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   beccc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   becce:	2b04      	cmp	r3, #4
   becd0:	f73f af34 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   becd4:	2301      	movs	r3, #1
   becd6:	aa25      	add	r2, sp, #148	; 0x94
   becd8:	2104      	movs	r1, #4
   becda:	a839      	add	r0, sp, #228	; 0xe4
   becdc:	f7f7 fbb6 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bece0:	ab46      	add	r3, sp, #280	; 0x118
   bece2:	4642      	mov	r2, r8
   bece4:	a920      	add	r1, sp, #128	; 0x80
   bece6:	a81b      	add	r0, sp, #108	; 0x6c
   bece8:	f7f7 feb8 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   becec:	2600      	movs	r6, #0
   becee:	2100      	movs	r1, #0
   becf0:	a839      	add	r0, sp, #228	; 0xe4
   becf2:	f7f7 fb71 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   becf6:	42b0      	cmp	r0, r6
   becf8:	dd46      	ble.n	bed88 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   becfa:	2700      	movs	r7, #0
   becfc:	2101      	movs	r1, #1
   becfe:	a839      	add	r0, sp, #228	; 0xe4
   bed00:	f7f7 fb6a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bed04:	42b8      	cmp	r0, r7
   bed06:	dd3d      	ble.n	bed84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bed08:	f04f 0b00 	mov.w	fp, #0
   bed0c:	2102      	movs	r1, #2
   bed0e:	a839      	add	r0, sp, #228	; 0xe4
   bed10:	f7f7 fb62 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bed14:	4558      	cmp	r0, fp
   bed16:	dd33      	ble.n	bed80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bed18:	f04f 0900 	mov.w	r9, #0
   bed1c:	2103      	movs	r1, #3
   bed1e:	a839      	add	r0, sp, #228	; 0xe4
   bed20:	f7f7 fb5a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bed24:	4548      	cmp	r0, r9
   bed26:	dd28      	ble.n	bed7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bed28:	f8cd 9000 	str.w	r9, [sp]
   bed2c:	465b      	mov	r3, fp
   bed2e:	463a      	mov	r2, r7
   bed30:	4631      	mov	r1, r6
   bed32:	4640      	mov	r0, r8
   bed34:	f7f7 fc60 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bed38:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bed3c:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   bed3e:	465b      	mov	r3, fp
   bed40:	463a      	mov	r2, r7
   bed42:	4631      	mov	r1, r6
   bed44:	a846      	add	r0, sp, #280	; 0x118
   bed46:	f7f7 fc57 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  return lhs <= rhs;
   bed4a:	9b05      	ldr	r3, [sp, #20]
   bed4c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   bed50:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
          output_data[Offset(output_shape, b, y, x, c)] =
   bed54:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   bed58:	4291      	cmp	r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   bed5a:	465b      	mov	r3, fp
   bed5c:	463a      	mov	r2, r7
   bed5e:	4631      	mov	r1, r6
   bed60:	a839      	add	r0, sp, #228	; 0xe4
  return lhs <= rhs;
   bed62:	bfcc      	ite	gt
   bed64:	f04f 0a00 	movgt.w	sl, #0
   bed68:	f04f 0a01 	movle.w	sl, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bed6c:	f7f7 fb9b 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bed70:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   bed74:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bed78:	e7d0      	b.n	bed1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x270>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bed7a:	f10b 0b01 	add.w	fp, fp, #1
   bed7e:	e7c5      	b.n	bed0c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x260>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bed80:	3701      	adds	r7, #1
   bed82:	e7bb      	b.n	becfc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x250>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bed84:	3601      	adds	r6, #1
   bed86:	e7b2      	b.n	becee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x242>
  const RuntimeShape output_shape =
   bed88:	a839      	add	r0, sp, #228	; 0xe4
   bed8a:	f7f7 fb1a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bed8e:	a825      	add	r0, sp, #148	; 0x94
   bed90:	f7f7 fb17 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bed94:	a820      	add	r0, sp, #128	; 0x80
   bed96:	f7f7 fb14 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bed9a:	a81b      	add	r0, sp, #108	; 0x6c
   bed9c:	e741      	b.n	bec22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bed9e:	a839      	add	r0, sp, #228	; 0xe4
   beda0:	f7f7 fdb3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beda4:	4629      	mov	r1, r5
   beda6:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   beda8:	6876      	ldr	r6, [r6, #4]
   bedaa:	f7f7 fdae 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bedae:	b105      	cbz	r5, bedb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   bedb0:	686d      	ldr	r5, [r5, #4]
   bedb2:	4621      	mov	r1, r4
   bedb4:	a846      	add	r0, sp, #280	; 0x118
   bedb6:	f7f7 fda8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bedba:	b104      	cbz	r4, bedbe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x312>
   bedbc:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bedbe:	aa46      	add	r2, sp, #280	; 0x118
   bedc0:	4641      	mov	r1, r8
   bedc2:	a839      	add	r0, sp, #228	; 0xe4
   bedc4:	f7f7 fb91 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bedc8:	2300      	movs	r3, #0
  const int64_t flatsize =
   bedca:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bedce:	461f      	mov	r7, r3
   bedd0:	4283      	cmp	r3, r0
   bedd2:	eb77 020c 	sbcs.w	r2, r7, ip
   bedd6:	da0c      	bge.n	bedf2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x346>
  return lhs <= rhs;
   bedd8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   beddc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   bede0:	428a      	cmp	r2, r1
   bede2:	bfcc      	ite	gt
   bede4:	2200      	movgt	r2, #0
   bede6:	2201      	movle	r2, #1
   bede8:	54e2      	strb	r2, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bedea:	3301      	adds	r3, #1
   bedec:	f147 0700 	adc.w	r7, r7, #0
   bedf0:	e7ee      	b.n	bedd0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x324>
   bedf2:	a846      	add	r0, sp, #280	; 0x118
   bedf4:	f7f7 fae5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bedf8:	4640      	mov	r0, r8
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
   bedfa:	f7f7 fae2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bedfe:	a839      	add	r0, sp, #228	; 0xe4
   bee00:	e70f      	b.n	bec22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bee02:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bee06:	4631      	mov	r1, r6
   bee08:	2f00      	cmp	r7, #0
   bee0a:	f000 808c 	beq.w	bef26 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x47a>
   bee0e:	a82a      	add	r0, sp, #168	; 0xa8
   bee10:	f7f7 fd7b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bee14:	4629      	mov	r1, r5
   bee16:	a82f      	add	r0, sp, #188	; 0xbc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bee18:	f8d6 b004 	ldr.w	fp, [r6, #4]
   bee1c:	f7f7 fd75 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bee20:	b105      	cbz	r5, bee24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x378>
   bee22:	686d      	ldr	r5, [r5, #4]
   bee24:	4621      	mov	r1, r4
   bee26:	a834      	add	r0, sp, #208	; 0xd0
   bee28:	f7f7 fd6f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bee2c:	b104      	cbz	r4, bee30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   bee2e:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bee30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bee32:	2b04      	cmp	r3, #4
   bee34:	f73f ae82 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bee38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bee3a:	2b04      	cmp	r3, #4
   bee3c:	f73f ae7e 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bee40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   bee42:	2b04      	cmp	r3, #4
   bee44:	f73f ae7a 	bgt.w	beb3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x90>
   bee48:	2301      	movs	r3, #1
   bee4a:	aa34      	add	r2, sp, #208	; 0xd0
   bee4c:	2104      	movs	r1, #4
   bee4e:	a839      	add	r0, sp, #228	; 0xe4
   bee50:	f7f7 fafc 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bee54:	ab46      	add	r3, sp, #280	; 0x118
   bee56:	4642      	mov	r2, r8
   bee58:	a92f      	add	r1, sp, #188	; 0xbc
   bee5a:	a82a      	add	r0, sp, #168	; 0xa8
   bee5c:	f7f7 fdfe 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bee60:	ee08 8a10 	vmov	s16, r8
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bee64:	2700      	movs	r7, #0
   bee66:	2100      	movs	r1, #0
   bee68:	a839      	add	r0, sp, #228	; 0xe4
   bee6a:	f7f7 fab5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee6e:	42b8      	cmp	r0, r7
   bee70:	dd4e      	ble.n	bef10 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x464>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bee72:	f04f 0800 	mov.w	r8, #0
   bee76:	2101      	movs	r1, #1
   bee78:	a839      	add	r0, sp, #228	; 0xe4
   bee7a:	f7f7 faad 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee7e:	4540      	cmp	r0, r8
   bee80:	dd44      	ble.n	bef0c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x460>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bee82:	2600      	movs	r6, #0
   bee84:	2102      	movs	r1, #2
   bee86:	a839      	add	r0, sp, #228	; 0xe4
   bee88:	f7f7 faa6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee8c:	42b0      	cmp	r0, r6
   bee8e:	dd3a      	ble.n	bef06 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x45a>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bee90:	f04f 0900 	mov.w	r9, #0
   bee94:	2103      	movs	r1, #3
   bee96:	a839      	add	r0, sp, #228	; 0xe4
   bee98:	f7f7 fa9e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bee9c:	4548      	cmp	r0, r9
   bee9e:	dd30      	ble.n	bef02 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x456>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beea0:	f8cd 9000 	str.w	r9, [sp]
   beea4:	4633      	mov	r3, r6
   beea6:	4642      	mov	r2, r8
   beea8:	4639      	mov	r1, r7
   beeaa:	ee18 0a10 	vmov	r0, s16
   beeae:	f7f7 fba3 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   beeb2:	f8cd 9000 	str.w	r9, [sp]
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beeb6:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, b, y, x, c)]);
   beeb8:	4633      	mov	r3, r6
   beeba:	4642      	mov	r2, r8
   beebc:	4639      	mov	r1, r7
   beebe:	a846      	add	r0, sp, #280	; 0x118
   beec0:	f7f7 fb9a 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              F(input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   beec4:	eb0b 02ca 	add.w	r2, fp, sl, lsl #3
   beec8:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
  return lhs <= rhs;
   beecc:	f85b 303a 	ldr.w	r3, [fp, sl, lsl #3]
   beed0:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
   beed4:	6852      	ldr	r2, [r2, #4]
   beed6:	6849      	ldr	r1, [r1, #4]
          output_data[Offset(output_shape, b, y, x, c)] =
   beed8:	f8cd 9000 	str.w	r9, [sp]
  return lhs <= rhs;
   beedc:	4298      	cmp	r0, r3
   beede:	eb71 0302 	sbcs.w	r3, r1, r2
          output_data[Offset(output_shape, b, y, x, c)] =
   beee2:	a839      	add	r0, sp, #228	; 0xe4
   beee4:	4633      	mov	r3, r6
   beee6:	4642      	mov	r2, r8
   beee8:	4639      	mov	r1, r7
  return lhs <= rhs;
   beeea:	bfac      	ite	ge
   beeec:	f04f 0a01 	movge.w	sl, #1
   beef0:	f04f 0a00 	movlt.w	sl, #0
          output_data[Offset(output_shape, b, y, x, c)] =
   beef4:	f7f7 fad7 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   beef8:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   beefc:	f804 a000 	strb.w	sl, [r4, r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bef00:	e7c8      	b.n	bee94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bef02:	3601      	adds	r6, #1
   bef04:	e7be      	b.n	bee84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bef06:	f108 0801 	add.w	r8, r8, #1
   bef0a:	e7b4      	b.n	bee76 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bef0c:	3701      	adds	r7, #1
   bef0e:	e7aa      	b.n	bee66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  const RuntimeShape output_shape =
   bef10:	a839      	add	r0, sp, #228	; 0xe4
   bef12:	f7f7 fa56 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bef16:	a834      	add	r0, sp, #208	; 0xd0
   bef18:	f7f7 fa53 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bef1c:	a82f      	add	r0, sp, #188	; 0xbc
   bef1e:	f7f7 fa50 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bef22:	a82a      	add	r0, sp, #168	; 0xa8
   bef24:	e67d      	b.n	bec22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bef26:	a839      	add	r0, sp, #228	; 0xe4
   bef28:	f7f7 fcef 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bef2c:	4629      	mov	r1, r5
   bef2e:	4640      	mov	r0, r8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bef30:	6877      	ldr	r7, [r6, #4]
   bef32:	f7f7 fcea 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bef36:	b105      	cbz	r5, bef3a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x48e>
   bef38:	686d      	ldr	r5, [r5, #4]
   bef3a:	4621      	mov	r1, r4
   bef3c:	a846      	add	r0, sp, #280	; 0x118
   bef3e:	f7f7 fce4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bef42:	b104      	cbz	r4, bef46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x49a>
   bef44:	6864      	ldr	r4, [r4, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bef46:	aa46      	add	r2, sp, #280	; 0x118
   bef48:	4641      	mov	r1, r8
   bef4a:	a839      	add	r0, sp, #228	; 0xe4
   bef4c:	f7f7 facd 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   bef50:	2300      	movs	r3, #0
  const int64_t flatsize =
   bef52:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   bef56:	f1a7 0208 	sub.w	r2, r7, #8
   bef5a:	3d08      	subs	r5, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   bef5c:	4619      	mov	r1, r3
   bef5e:	4283      	cmp	r3, r0
   bef60:	eb71 060e 	sbcs.w	r6, r1, lr
   bef64:	da0f      	bge.n	bef86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
  return lhs <= rhs;
   bef66:	f852 6f08 	ldr.w	r6, [r2, #8]!
   bef6a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   bef6e:	42b7      	cmp	r7, r6
   bef70:	686e      	ldr	r6, [r5, #4]
   bef72:	6857      	ldr	r7, [r2, #4]
   bef74:	41be      	sbcs	r6, r7
   bef76:	bfac      	ite	ge
   bef78:	2601      	movge	r6, #1
   bef7a:	2600      	movlt	r6, #0
   bef7c:	54e6      	strb	r6, [r4, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   bef7e:	3301      	adds	r3, #1
   bef80:	f141 0100 	adc.w	r1, r1, #0
   bef84:	e7eb      	b.n	bef5e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
   bef86:	a846      	add	r0, sp, #280	; 0x118
   bef88:	f7f7 fa1b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bef8c:	a83e      	add	r0, sp, #248	; 0xf8
   bef8e:	e734      	b.n	bedfa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x34e>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   bef90:	6933      	ldr	r3, [r6, #16]
   bef92:	68f0      	ldr	r0, [r6, #12]
   bef94:	f1c3 0900 	rsb	r9, r3, #0
   bef98:	692b      	ldr	r3, [r5, #16]
   bef9a:	f1c3 0800 	rsb	r8, r3, #0
   bef9e:	f7f5 f9a3 	bl	b42e8 <__aeabi_f2d>
   befa2:	ec41 0b10 	vmov	d0, r0, r1
   befa6:	a925      	add	r1, sp, #148	; 0x94
   befa8:	a820      	add	r0, sp, #128	; 0x80
   befaa:	f7f6 f99f 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   befae:	68e8      	ldr	r0, [r5, #12]
   befb0:	f7f5 f99a 	bl	b42e8 <__aeabi_f2d>
   befb4:	ec41 0b10 	vmov	d0, r0, r1
   befb8:	a92f      	add	r1, sp, #188	; 0xbc
   befba:	a82a      	add	r0, sp, #168	; 0xa8
   befbc:	f7f6 f996 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   befc0:	2308      	movs	r3, #8
   befc2:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   befc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   befc8:	9348      	str	r3, [sp, #288]	; 0x120
   befca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   befcc:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   befd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   befd2:	934b      	str	r3, [sp, #300]	; 0x12c
   befd4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   befd6:	934c      	str	r3, [sp, #304]	; 0x130
   befd8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   befdc:	4631      	mov	r1, r6
   befde:	a834      	add	r0, sp, #208	; 0xd0
   befe0:	b1ff      	cbz	r7, bf022 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x576>
   befe2:	f7f7 fc92 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   befe6:	6872      	ldr	r2, [r6, #4]
   befe8:	9205      	str	r2, [sp, #20]
   befea:	4629      	mov	r1, r5
   befec:	a839      	add	r0, sp, #228	; 0xe4
   befee:	f7f7 fc8c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   beff2:	4621      	mov	r1, r4
   beff4:	4640      	mov	r0, r8
   beff6:	686d      	ldr	r5, [r5, #4]
   beff8:	f7f7 fc87 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   beffc:	9a05      	ldr	r2, [sp, #20]
   beffe:	b104      	cbz	r4, bf002 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x556>
   bf000:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(LessEqual);
   bf002:	9500      	str	r5, [sp, #0]
   bf004:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bf008:	ab39      	add	r3, sp, #228	; 0xe4
   bf00a:	a934      	add	r1, sp, #208	; 0xd0
   bf00c:	a846      	add	r0, sp, #280	; 0x118
   bf00e:	f7ff fc15 	bl	be83c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bf012:	4640      	mov	r0, r8
   bf014:	f7f7 f9d5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bf018:	a839      	add	r0, sp, #228	; 0xe4
   bf01a:	f7f7 f9d2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   bf01e:	a834      	add	r0, sp, #208	; 0xd0
   bf020:	e5ff      	b.n	bec22 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x176>
   bf022:	f7f7 fc72 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf026:	6873      	ldr	r3, [r6, #4]
   bf028:	9305      	str	r3, [sp, #20]
   bf02a:	4629      	mov	r1, r5
   bf02c:	a839      	add	r0, sp, #228	; 0xe4
   bf02e:	f7f7 fc6c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf032:	686b      	ldr	r3, [r5, #4]
   bf034:	9306      	str	r3, [sp, #24]
   bf036:	4621      	mov	r1, r4
   bf038:	4640      	mov	r0, r8
   bf03a:	f7f7 fc66 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf03e:	b104      	cbz	r4, bf042 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x596>
   bf040:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bf042:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bf046:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bf048:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bf04a:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bf04c:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf050:	aa3e      	add	r2, sp, #248	; 0xf8
   bf052:	a939      	add	r1, sp, #228	; 0xe4
   bf054:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bf056:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf05a:	f7f7 fa46 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bf05e:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bf062:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bf064:	2500      	movs	r5, #0
  const int64_t flatsize =
   bf066:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf068:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bf06a:	462b      	mov	r3, r5
   bf06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bf06e:	930b      	str	r3, [sp, #44]	; 0x2c
   bf070:	4545      	cmp	r5, r8
   bf072:	eb73 0202 	sbcs.w	r2, r3, r2
   bf076:	f280 80b1 	bge.w	bf1dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bf07a:	9b06      	ldr	r3, [sp, #24]
   bf07c:	5d5f      	ldrb	r7, [r3, r5]
   bf07e:	9b08      	ldr	r3, [sp, #32]
   bf080:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bf082:	9b05      	ldr	r3, [sp, #20]
   bf084:	5d58      	ldrb	r0, [r3, r5]
   bf086:	9b07      	ldr	r3, [sp, #28]
   bf088:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf08a:	465a      	mov	r2, fp
   bf08c:	4651      	mov	r1, sl
   bf08e:	fa00 f009 	lsl.w	r0, r0, r9
   bf092:	f7f7 fa67 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bf096:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf09a:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf09c:	ee18 2a10 	vmov	r2, s16
   bf0a0:	4631      	mov	r1, r6
   bf0a2:	4638      	mov	r0, r7
   bf0a4:	f7f7 fa5e 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs <= rhs;
   bf0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf0aa:	4283      	cmp	r3, r0
   bf0ac:	bfcc      	ite	gt
   bf0ae:	2000      	movgt	r0, #0
   bf0b0:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bf0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs <= rhs;
   bf0b4:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bf0b6:	3501      	adds	r5, #1
   bf0b8:	f143 0300 	adc.w	r3, r3, #0
   bf0bc:	e7d6      	b.n	bf06c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x5c0>
   bf0be:	6933      	ldr	r3, [r6, #16]
   bf0c0:	68f0      	ldr	r0, [r6, #12]
   bf0c2:	f1c3 0900 	rsb	r9, r3, #0
   bf0c6:	692b      	ldr	r3, [r5, #16]
   bf0c8:	f1c3 0800 	rsb	r8, r3, #0
   bf0cc:	f7f5 f90c 	bl	b42e8 <__aeabi_f2d>
   bf0d0:	ec41 0b10 	vmov	d0, r0, r1
   bf0d4:	a925      	add	r1, sp, #148	; 0x94
   bf0d6:	a820      	add	r0, sp, #128	; 0x80
   bf0d8:	f7f6 f908 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bf0dc:	68e8      	ldr	r0, [r5, #12]
   bf0de:	f7f5 f903 	bl	b42e8 <__aeabi_f2d>
   bf0e2:	ec41 0b10 	vmov	d0, r0, r1
   bf0e6:	a92f      	add	r1, sp, #188	; 0xbc
   bf0e8:	a82a      	add	r0, sp, #168	; 0xa8
   bf0ea:	f7f6 f8ff 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
   bf0ee:	2308      	movs	r3, #8
   bf0f0:	e9cd 3946 	strd	r3, r9, [sp, #280]	; 0x118
   bf0f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bf0f6:	9348      	str	r3, [sp, #288]	; 0x120
   bf0f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bf0fa:	e9cd 3849 	strd	r3, r8, [sp, #292]	; 0x124
   bf0fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bf100:	934b      	str	r3, [sp, #300]	; 0x12c
   bf102:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   bf104:	934c      	str	r3, [sp, #304]	; 0x130
   bf106:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   bf10a:	4631      	mov	r1, r6
   bf10c:	a834      	add	r0, sp, #208	; 0xd0
   bf10e:	b1c7      	cbz	r7, bf142 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x696>
   bf110:	f7f7 fbfb 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf114:	6872      	ldr	r2, [r6, #4]
   bf116:	9205      	str	r2, [sp, #20]
   bf118:	4629      	mov	r1, r5
   bf11a:	a839      	add	r0, sp, #228	; 0xe4
   bf11c:	f7f7 fbf5 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf120:	4621      	mov	r1, r4
   bf122:	4640      	mov	r0, r8
   bf124:	686d      	ldr	r5, [r5, #4]
   bf126:	f7f7 fbf0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf12a:	9a05      	ldr	r2, [sp, #20]
   bf12c:	b104      	cbz	r4, bf130 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x684>
   bf12e:	6864      	ldr	r4, [r4, #4]
TFLITE_COMPARISON_OP(LessEqual);
   bf130:	9500      	str	r5, [sp, #0]
   bf132:	e9cd 8401 	strd	r8, r4, [sp, #4]
   bf136:	ab39      	add	r3, sp, #228	; 0xe4
   bf138:	a934      	add	r1, sp, #208	; 0xd0
   bf13a:	a846      	add	r0, sp, #280	; 0x118
   bf13c:	f7ff fc1a 	bl	be974 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIlEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   bf140:	e767      	b.n	bf012 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
   bf142:	f7f7 fbe2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf146:	6873      	ldr	r3, [r6, #4]
   bf148:	9305      	str	r3, [sp, #20]
   bf14a:	4629      	mov	r1, r5
   bf14c:	a839      	add	r0, sp, #228	; 0xe4
   bf14e:	f7f7 fbdc 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf152:	686b      	ldr	r3, [r5, #4]
   bf154:	9306      	str	r3, [sp, #24]
   bf156:	4621      	mov	r1, r4
   bf158:	4640      	mov	r0, r8
   bf15a:	f7f7 fbd6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf15e:	b104      	cbz	r4, bf162 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x6b6>
   bf160:	6864      	ldr	r4, [r4, #4]
  int32 input1_offset = op_params.input1_offset;
   bf162:	e9dd 9346 	ldrd	r9, r3, [sp, #280]	; 0x118
   bf166:	9307      	str	r3, [sp, #28]
  int32 input2_offset = op_params.input2_offset;
   bf168:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bf16a:	9308      	str	r3, [sp, #32]
  int input2_shift = op_params.input2_shift;
   bf16c:	e9dd 634b 	ldrd	r6, r3, [sp, #300]	; 0x12c
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf170:	aa3e      	add	r2, sp, #248	; 0xf8
   bf172:	a939      	add	r1, sp, #228	; 0xe4
   bf174:	a834      	add	r0, sp, #208	; 0xd0
  int input2_shift = op_params.input2_shift;
   bf176:	ee08 3a10 	vmov	s16, r3
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf17a:	f7f7 f9b6 	bl	b64ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  int input1_shift = op_params.input1_shift;
   bf17e:	e9dd ab48 	ldrd	sl, fp, [sp, #288]	; 0x120
  const int64_t flatsize =
   bf182:	17c3      	asrs	r3, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   bf184:	2500      	movs	r5, #0
  const int64_t flatsize =
   bf186:	930a      	str	r3, [sp, #40]	; 0x28
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   bf188:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   bf18a:	462b      	mov	r3, r5
   bf18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bf18e:	930b      	str	r3, [sp, #44]	; 0x2c
   bf190:	4545      	cmp	r5, r8
   bf192:	eb73 0202 	sbcs.w	r2, r3, r2
   bf196:	da21      	bge.n	bf1dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x730>
    const int32 input2_val = input2_offset + input2_data[i];
   bf198:	9b06      	ldr	r3, [sp, #24]
   bf19a:	575f      	ldrsb	r7, [r3, r5]
   bf19c:	9b08      	ldr	r3, [sp, #32]
   bf19e:	441f      	add	r7, r3
    const int32 input1_val = input1_offset + input1_data[i];
   bf1a0:	9b05      	ldr	r3, [sp, #20]
   bf1a2:	5758      	ldrsb	r0, [r3, r5]
   bf1a4:	9b07      	ldr	r3, [sp, #28]
   bf1a6:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf1a8:	465a      	mov	r2, fp
   bf1aa:	4651      	mov	r1, sl
   bf1ac:	fa00 f009 	lsl.w	r0, r0, r9
   bf1b0:	f7f7 f9d8 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   bf1b4:	fa07 f709 	lsl.w	r7, r7, r9
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf1b8:	9009      	str	r0, [sp, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bf1ba:	ee18 2a10 	vmov	r2, s16
   bf1be:	4631      	mov	r1, r6
   bf1c0:	4638      	mov	r0, r7
   bf1c2:	f7f7 f9cf 	bl	b6564 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  return lhs <= rhs;
   bf1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf1c8:	4283      	cmp	r3, r0
   bf1ca:	bfcc      	ite	gt
   bf1cc:	2000      	movgt	r0, #0
   bf1ce:	2001      	movle	r0, #1
  for (int64_t i = 0; i < flatsize; ++i) {
   bf1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return lhs <= rhs;
   bf1d2:	5560      	strb	r0, [r4, r5]
  for (int64_t i = 0; i < flatsize; ++i) {
   bf1d4:	3501      	adds	r5, #1
   bf1d6:	f143 0300 	adc.w	r3, r3, #0
   bf1da:	e7d7      	b.n	bf18c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x6e0>
   bf1dc:	a83e      	add	r0, sp, #248	; 0xf8
   bf1de:	e719      	b.n	bf014 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x568>
      context->ReportError(context,
   bf1e0:	4640      	mov	r0, r8
   bf1e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bf1e6:	4902      	ldr	r1, [pc, #8]	; (bf1f0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x744>)
   bf1e8:	4798      	blx	r3
      return kTfLiteError;
   bf1ea:	2001      	movs	r0, #1
   bf1ec:	e51c      	b.n	bec28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
   bf1ee:	bf00      	nop
   bf1f0:	000c8b0b 	.word	0x000c8b0b

000bf1f4 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
  }

  return kTfLiteOk;
}

bool LogicalOr(bool x, bool y) { return x || y; }
   bf1f4:	2800      	cmp	r0, #0
   bf1f6:	bf08      	it	eq
   bf1f8:	4608      	moveq	r0, r1
   bf1fa:	4770      	bx	lr

000bf1fc <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:

TfLiteStatus LogicalOrEval(TfLiteContext* context, TfLiteNode* node) {
  return LogicalImpl(context, node, LogicalOr);
}

bool LogicalAnd(bool x, bool y) { return x && y; }
   bf1fc:	2800      	cmp	r0, #0
   bf1fe:	bf14      	ite	ne
   bf200:	4608      	movne	r0, r1
   bf202:	2000      	moveq	r0, #0
   bf204:	4770      	bx	lr
	...

000bf208 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
  // Init, Free, Prepare, Eval are satisfying the Interface required by
  // TfLiteRegistration.
  static TfLiteRegistration r = {/* init */ nullptr, /* free */ nullptr,
                                 /* prepare */ nullptr, logical::LogicalOrEval};
  return &r;
}
   bf208:	4800      	ldr	r0, [pc, #0]	; (bf20c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x4>)
   bf20a:	4770      	bx	lr
   bf20c:	2003c310 	.word	0x2003c310

000bf210 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:
  // TfLiteRegistration.
  static TfLiteRegistration r = {/* init */ nullptr, /* free */ nullptr,
                                 /* prepare */ nullptr,
                                 logical::LogicalAndEval};
  return &r;
}
   bf210:	4800      	ldr	r0, [pc, #0]	; (bf214 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x4>)
   bf212:	4770      	bx	lr
   bf214:	2003c330 	.word	0x2003c330

000bf218 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   bf218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf21c:	4699      	mov	r9, r3
  inline int32 DimensionsCount() const { return size_; }
   bf21e:	6807      	ldr	r7, [r0, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   bf220:	6813      	ldr	r3, [r2, #0]
   bf222:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   bf224:	429f      	cmp	r7, r3
   bf226:	4604      	mov	r4, r0
   bf228:	4688      	mov	r8, r1
   bf22a:	4616      	mov	r6, r2
   bf22c:	d001      	beq.n	bf232 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   bf22e:	f005 fb35 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   bf232:	f04f 0a00 	mov.w	sl, #0
   bf236:	4557      	cmp	r7, sl
   bf238:	dd0d      	ble.n	bf256 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   bf23a:	4651      	mov	r1, sl
   bf23c:	4620      	mov	r0, r4
   bf23e:	f7f7 f8cb 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf242:	4651      	mov	r1, sl
   bf244:	4683      	mov	fp, r0
   bf246:	4630      	mov	r0, r6
   bf248:	f7f7 f8c6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf24c:	4583      	cmp	fp, r0
   bf24e:	d1ee      	bne.n	bf22e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf250:	f10a 0a01 	add.w	sl, sl, #1
   bf254:	e7ef      	b.n	bf236 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   bf256:	682b      	ldr	r3, [r5, #0]
   bf258:	429f      	cmp	r7, r3
   bf25a:	d1e8      	bne.n	bf22e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf25c:	f04f 0a00 	mov.w	sl, #0
   bf260:	4557      	cmp	r7, sl
   bf262:	dd0d      	ble.n	bf280 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   bf264:	4651      	mov	r1, sl
   bf266:	4620      	mov	r0, r4
   bf268:	f7f7 f8b6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf26c:	4651      	mov	r1, sl
   bf26e:	4606      	mov	r6, r0
   bf270:	4628      	mov	r0, r5
   bf272:	f7f7 f8b1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf276:	4286      	cmp	r6, r0
   bf278:	d1d9      	bne.n	bf22e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   bf27a:	f10a 0a01 	add.w	sl, sl, #1
   bf27e:	e7ef      	b.n	bf260 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   bf280:	2f04      	cmp	r7, #4
   bf282:	bfcc      	ite	gt
   bf284:	6864      	ldrgt	r4, [r4, #4]
   bf286:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   bf288:	2300      	movs	r3, #0
    int buffer_size = 1;
   bf28a:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
   bf28e:	429f      	cmp	r7, r3
   bf290:	dd05      	ble.n	bf29e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   bf292:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   bf296:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   bf298:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   bf29c:	e7f7      	b.n	bf28e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   bf29e:	2400      	movs	r4, #0
   bf2a0:	4554      	cmp	r4, sl
   bf2a2:	da09      	bge.n	bf2b8 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   bf2a4:	f819 1004 	ldrb.w	r1, [r9, r4]
   bf2a8:	f818 0004 	ldrb.w	r0, [r8, r4]
   bf2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf2ae:	4798      	blx	r3
   bf2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf2b2:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   bf2b4:	3401      	adds	r4, #1
   bf2b6:	e7f3      	b.n	bf2a0 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   bf2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf2bc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   bf2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf2c0:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf2c2:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   bf2c4:	b0a5      	sub	sp, #148	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf2c6:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   bf2c8:	4614      	mov	r4, r2
   bf2ca:	4605      	mov	r5, r0
   bf2cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   bf2ce:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf2d0:	dd01      	ble.n	bf2d6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   bf2d2:	f005 fae3 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bf2d6:	6823      	ldr	r3, [r4, #0]
   bf2d8:	2b04      	cmp	r3, #4
   bf2da:	dcfa      	bgt.n	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bf2dc:	6813      	ldr	r3, [r2, #0]
   bf2de:	2b04      	cmp	r3, #4
   bf2e0:	dcf7      	bgt.n	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   bf2e2:	2301      	movs	r3, #1
   bf2e4:	2104      	movs	r1, #4
   bf2e6:	a805      	add	r0, sp, #20
   bf2e8:	f7f7 f8b0 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   bf2ec:	462a      	mov	r2, r5
   bf2ee:	2301      	movs	r3, #1
   bf2f0:	2104      	movs	r1, #4
   bf2f2:	a80a      	add	r0, sp, #40	; 0x28
   bf2f4:	f7f7 f8aa 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   bf2f8:	4622      	mov	r2, r4
   bf2fa:	2301      	movs	r3, #1
   bf2fc:	2104      	movs	r1, #4
   bf2fe:	a80f      	add	r0, sp, #60	; 0x3c
   bf300:	f7f7 f8a4 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int desc1_stride = 1;
   bf304:	2501      	movs	r5, #1
   bf306:	f10d 0b5c 	add.w	fp, sp, #92	; 0x5c
   bf30a:	ae1f      	add	r6, sp, #124	; 0x7c
  int desc0_stride = 1;
   bf30c:	462f      	mov	r7, r5
  for (int i = N - 1; i >= 0; --i) {
   bf30e:	2403      	movs	r4, #3
    desc0_out->extents[i] = extended_input0_shape.Dims(i);
   bf310:	4621      	mov	r1, r4
   bf312:	a80a      	add	r0, sp, #40	; 0x28
   bf314:	f7f7 f860 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf318:	f84b 0904 	str.w	r0, [fp], #-4
    desc0_stride *= extended_input0_shape.Dims(i);
   bf31c:	4621      	mov	r1, r4
    desc0_out->strides[i] = desc0_stride;
   bf31e:	f8cb 7014 	str.w	r7, [fp, #20]
    desc0_stride *= extended_input0_shape.Dims(i);
   bf322:	a80a      	add	r0, sp, #40	; 0x28
   bf324:	f7f7 f858 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   bf328:	4621      	mov	r1, r4
    desc0_stride *= extended_input0_shape.Dims(i);
   bf32a:	4347      	muls	r7, r0
    desc1_out->extents[i] = extended_input1_shape.Dims(i);
   bf32c:	a80f      	add	r0, sp, #60	; 0x3c
   bf32e:	f7f7 f853 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf332:	f846 0904 	str.w	r0, [r6], #-4
    desc1_stride *= extended_input1_shape.Dims(i);
   bf336:	4621      	mov	r1, r4
    desc1_out->strides[i] = desc1_stride;
   bf338:	6175      	str	r5, [r6, #20]
    desc1_stride *= extended_input1_shape.Dims(i);
   bf33a:	a80f      	add	r0, sp, #60	; 0x3c
   bf33c:	f7f7 f84c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   bf340:	3c01      	subs	r4, #1
    desc1_stride *= extended_input1_shape.Dims(i);
   bf342:	fb00 f505 	mul.w	r5, r0, r5
  for (int i = N - 1; i >= 0; --i) {
   bf346:	d2e3      	bcs.n	bf310 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x54>
  for (int i = 0; i < N; ++i) {
   bf348:	2400      	movs	r4, #0
   bf34a:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   bf34e:	ae14      	add	r6, sp, #80	; 0x50
   bf350:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   bf352:	4621      	mov	r1, r4
   bf354:	a80a      	add	r0, sp, #40	; 0x28
   bf356:	f7f7 f83f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   bf35a:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   bf35c:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   bf35e:	a80f      	add	r0, sp, #60	; 0x3c
   bf360:	f7f7 f83a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   bf364:	4285      	cmp	r5, r0
   bf366:	d003      	beq.n	bf370 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xb4>
      if (extent0 == 1) {
   bf368:	2d01      	cmp	r5, #1
   bf36a:	d160      	bne.n	bf42e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x172>
        desc0_out->strides[i] = 0;
   bf36c:	6137      	str	r7, [r6, #16]
        desc0_out->extents[i] = extent1;
   bf36e:	6030      	str	r0, [r6, #0]
  for (int i = 0; i < N; ++i) {
   bf370:	3401      	adds	r4, #1
   bf372:	2c04      	cmp	r4, #4
   bf374:	f108 0804 	add.w	r8, r8, #4
   bf378:	f106 0604 	add.w	r6, r6, #4
   bf37c:	d1e9      	bne.n	bf352 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x96>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   bf37e:	a80f      	add	r0, sp, #60	; 0x3c
   bf380:	f7f7 f81f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   bf384:	a80a      	add	r0, sp, #40	; 0x28
   bf386:	f7f7 f81c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf38a:	2500      	movs	r5, #0
   bf38c:	2100      	movs	r1, #0
   bf38e:	a805      	add	r0, sp, #20
   bf390:	f7f7 f822 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf394:	42a8      	cmp	r0, r5
   bf396:	dd59      	ble.n	bf44c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x190>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf398:	2700      	movs	r7, #0
   bf39a:	f10d 0814 	add.w	r8, sp, #20
   bf39e:	2101      	movs	r1, #1
   bf3a0:	4640      	mov	r0, r8
   bf3a2:	f7f7 f819 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf3a6:	42b8      	cmp	r0, r7
   bf3a8:	dd4e      	ble.n	bf448 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x18c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf3aa:	f04f 0900 	mov.w	r9, #0
   bf3ae:	2102      	movs	r1, #2
   bf3b0:	4640      	mov	r0, r8
   bf3b2:	f7f7 f811 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf3b6:	4548      	cmp	r0, r9
   bf3b8:	dd44      	ble.n	bf444 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x188>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf3ba:	2600      	movs	r6, #0
   bf3bc:	2103      	movs	r1, #3
   bf3be:	4640      	mov	r0, r8
   bf3c0:	f7f7 f80a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf3c4:	42b0      	cmp	r0, r6
   bf3c6:	dd3a      	ble.n	bf43e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x182>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   bf3c8:	9905      	ldr	r1, [sp, #20]
   bf3ca:	2904      	cmp	r1, #4
   bf3cc:	d181      	bne.n	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   bf3ce:	9906      	ldr	r1, [sp, #24]
   bf3d0:	428d      	cmp	r5, r1
   bf3d2:	f6bf af7e 	bge.w	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   bf3d6:	9c07      	ldr	r4, [sp, #28]
   bf3d8:	42a7      	cmp	r7, r4
   bf3da:	f6bf af7a 	bge.w	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   bf3de:	9b08      	ldr	r3, [sp, #32]
   bf3e0:	4599      	cmp	r9, r3
   bf3e2:	f6bf af76 	bge.w	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   bf3e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   bf3e8:	4286      	cmp	r6, r0
   bf3ea:	f6bf af72 	bge.w	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   bf3ee:	fb04 7405 	mla	r4, r4, r5, r7
   bf3f2:	fb03 9404 	mla	r4, r3, r4, r9
   bf3f6:	fb00 6404 	mla	r4, r0, r4, r6
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf3fa:	9600      	str	r6, [sp, #0]
   bf3fc:	464b      	mov	r3, r9
   bf3fe:	463a      	mov	r2, r7
   bf400:	4629      	mov	r1, r5
   bf402:	a814      	add	r0, sp, #80	; 0x50
   bf404:	f7f7 f8f8 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf408:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bf40a:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bf40c:	464b      	mov	r3, r9
   bf40e:	463a      	mov	r2, r7
   bf410:	4629      	mov	r1, r5
   bf412:	a81c      	add	r0, sp, #112	; 0x70
   bf414:	f7f7 f8f0 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   bf418:	9b03      	ldr	r3, [sp, #12]
   bf41a:	f81a 1000 	ldrb.w	r1, [sl, r0]
   bf41e:	f813 000b 	ldrb.w	r0, [r3, fp]
   bf422:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   bf424:	4798      	blx	r3
   bf426:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf428:	3601      	adds	r6, #1
          output_data[out_idx] = func(in1_val, in2_val);
   bf42a:	5518      	strb	r0, [r3, r4]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bf42c:	e7c6      	b.n	bf3bc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x100>
        TFLITE_DCHECK_EQ(extent1, 1);
   bf42e:	2801      	cmp	r0, #1
   bf430:	f47f af4f 	bne.w	bf2d2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   bf434:	f8c8 7010 	str.w	r7, [r8, #16]
        desc1_out->extents[i] = extent0;
   bf438:	f8c8 5000 	str.w	r5, [r8]
   bf43c:	e798      	b.n	bf370 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xb4>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf43e:	f109 0901 	add.w	r9, r9, #1
   bf442:	e7b4      	b.n	bf3ae <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xf2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf444:	3701      	adds	r7, #1
   bf446:	e7a8      	b.n	bf39a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xde>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf448:	3501      	adds	r5, #1
   bf44a:	e79f      	b.n	bf38c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
  const RuntimeShape output_shape =
   bf44c:	a805      	add	r0, sp, #20
   bf44e:	f7f6 ffb8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bf452:	b025      	add	sp, #148	; 0x94
   bf454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf458 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>:
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf458:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf45a:	680b      	ldr	r3, [r1, #0]
   bf45c:	685d      	ldr	r5, [r3, #4]
   bf45e:	689e      	ldr	r6, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf460:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf462:	2438      	movs	r4, #56	; 0x38
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf464:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf466:	fb04 0505 	mla	r5, r4, r5, r0
   bf46a:	fb04 0606 	mla	r6, r4, r6, r0
  if (HaveSameShapes(input1, input2)) {
   bf46e:	4631      	mov	r1, r6
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf470:	fb04 0403 	mla	r4, r4, r3, r0
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf474:	b095      	sub	sp, #84	; 0x54
  if (HaveSameShapes(input1, input2)) {
   bf476:	4628      	mov	r0, r5
TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,
   bf478:	4617      	mov	r7, r2
  if (HaveSameShapes(input1, input2)) {
   bf47a:	f7f5 fecf 	bl	b521c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf47e:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   bf480:	b330      	cbz	r0, bf4d0 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf482:	a80f      	add	r0, sp, #60	; 0x3c
   bf484:	f7f7 fa41 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf488:	b105      	cbz	r5, bf48c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x34>
   bf48a:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf48c:	4631      	mov	r1, r6
   bf48e:	a80a      	add	r0, sp, #40	; 0x28
   bf490:	f7f7 fa3b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf494:	b106      	cbz	r6, bf498 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x40>
   bf496:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf498:	4621      	mov	r1, r4
   bf49a:	a805      	add	r0, sp, #20
   bf49c:	f7f7 fa35 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf4a0:	b104      	cbz	r4, bf4a4 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x4c>
   bf4a2:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   bf4a4:	ab05      	add	r3, sp, #20
   bf4a6:	9300      	str	r3, [sp, #0]
   bf4a8:	e9cd 4701 	strd	r4, r7, [sp, #4]
   bf4ac:	4633      	mov	r3, r6
   bf4ae:	aa0a      	add	r2, sp, #40	; 0x28
   bf4b0:	4629      	mov	r1, r5
   bf4b2:	a80f      	add	r0, sp, #60	; 0x3c
   bf4b4:	f7ff feb0 	bl	bf218 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf4b8:	a805      	add	r0, sp, #20
   bf4ba:	f7f6 ff82 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf4be:	a80a      	add	r0, sp, #40	; 0x28
   bf4c0:	f7f6 ff7f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf4c4:	a80f      	add	r0, sp, #60	; 0x3c
   bf4c6:	f7f6 ff7c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bf4ca:	2000      	movs	r0, #0
   bf4cc:	b015      	add	sp, #84	; 0x54
   bf4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   bf4d0:	a80f      	add	r0, sp, #60	; 0x3c
   bf4d2:	f7f7 fa1a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bf4d6:	b105      	cbz	r5, bf4da <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x82>
   bf4d8:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   bf4da:	4631      	mov	r1, r6
   bf4dc:	a80a      	add	r0, sp, #40	; 0x28
   bf4de:	f7f7 fa14 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf4e2:	b106      	cbz	r6, bf4e6 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x8e>
   bf4e4:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   bf4e6:	4621      	mov	r1, r4
   bf4e8:	a805      	add	r0, sp, #20
   bf4ea:	f7f7 fa0e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bf4ee:	b104      	cbz	r4, bf4f2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x9a>
   bf4f0:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   bf4f2:	ab05      	add	r3, sp, #20
   bf4f4:	9300      	str	r3, [sp, #0]
   bf4f6:	e9cd 4701 	strd	r4, r7, [sp, #4]
   bf4fa:	4633      	mov	r3, r6
   bf4fc:	aa0a      	add	r2, sp, #40	; 0x28
   bf4fe:	4629      	mov	r1, r5
   bf500:	a80f      	add	r0, sp, #60	; 0x3c
   bf502:	f7ff fedb 	bl	bf2bc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   bf506:	e7d7      	b.n	bf4b8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0+0x60>

000bf508 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
   bf508:	4a01      	ldr	r2, [pc, #4]	; (bf510 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   bf50a:	6880      	ldr	r0, [r0, #8]
   bf50c:	f7ff bfa4 	b.w	bf458 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>
   bf510:	000bf1fd 	.word	0x000bf1fd

000bf514 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
   bf514:	4a01      	ldr	r2, [pc, #4]	; (bf51c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   bf516:	6880      	ldr	r0, [r0, #8]
   bf518:	f7ff bf9e 	b.w	bf458 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE.isra.0>
   bf51c:	000bf1f5 	.word	0x000bf1f5

000bf520 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
namespace micro {
namespace quantize {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   bf520:	2000      	movs	r0, #0
   bf522:	4770      	bx	lr

000bf524 <_ZN6tflite3ops5micro8quantize4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   bf524:	4770      	bx	lr
	...

000bf528 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf528:	b5f0      	push	{r4, r5, r6, r7, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   bf52a:	680f      	ldr	r7, [r1, #0]
   bf52c:	683c      	ldr	r4, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bf52e:	2c01      	cmp	r4, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf530:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bf532:	d00d      	beq.n	bf550 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   bf534:	2501      	movs	r5, #1
   bf536:	4a31      	ldr	r2, [pc, #196]	; (bf5fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   bf538:	9201      	str	r2, [sp, #4]
   bf53a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   bf53e:	4a30      	ldr	r2, [pc, #192]	; (bf600 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
   bf540:	9200      	str	r2, [sp, #0]
   bf542:	6944      	ldr	r4, [r0, #20]
   bf544:	2322      	movs	r3, #34	; 0x22
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];

  // TODO(b/128934713): Add support for fixed-point per-channel quantization.
  // Currently this only support affine per-layer quantization.
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   bf546:	4a2f      	ldr	r2, [pc, #188]	; (bf604 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf548:	492f      	ldr	r1, [pc, #188]	; (bf608 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   bf54a:	47a0      	blx	r4
   bf54c:	462c      	mov	r4, r5
   bf54e:	e00e      	b.n	bf56e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   bf550:	684a      	ldr	r2, [r1, #4]
   bf552:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bf554:	2d01      	cmp	r5, #1
   bf556:	d00d      	beq.n	bf574 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   bf558:	4a28      	ldr	r2, [pc, #160]	; (bf5fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   bf55a:	9201      	str	r2, [sp, #4]
   bf55c:	e9cd 5402 	strd	r5, r4, [sp, #8]
   bf560:	4a2a      	ldr	r2, [pc, #168]	; (bf60c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
   bf562:	9200      	str	r2, [sp, #0]
   bf564:	6945      	ldr	r5, [r0, #20]
   bf566:	4a27      	ldr	r2, [pc, #156]	; (bf604 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf568:	4927      	ldr	r1, [pc, #156]	; (bf608 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   bf56a:	2323      	movs	r3, #35	; 0x23
   bf56c:	47a8      	blx	r5
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32);
  TF_LITE_ENSURE(context,
                 output->type == kTfLiteUInt8 || output->type == kTfLiteInt8);

  return kTfLiteOk;
}
   bf56e:	4620      	mov	r0, r4
   bf570:	b005      	add	sp, #20
   bf572:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf574:	6852      	ldr	r2, [r2, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf576:	6881      	ldr	r1, [r0, #8]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf578:	2638      	movs	r6, #56	; 0x38
   bf57a:	4372      	muls	r2, r6
   bf57c:	eb01 0c02 	add.w	ip, r1, r2
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   bf580:	f89c 4030 	ldrb.w	r4, [ip, #48]	; 0x30
   bf584:	2c01      	cmp	r4, #1
   bf586:	d008      	beq.n	bf59a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   bf588:	4a21      	ldr	r2, [pc, #132]	; (bf610 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   bf58a:	9201      	str	r2, [sp, #4]
   bf58c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   bf590:	4a20      	ldr	r2, [pc, #128]	; (bf614 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   bf592:	9200      	str	r2, [sp, #0]
   bf594:	6944      	ldr	r4, [r0, #20]
   bf596:	232a      	movs	r3, #42	; 0x2a
   bf598:	e7d5      	b.n	bf546 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  const auto* affine_quantization =
   bf59a:	f8dc 5034 	ldr.w	r5, [ip, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   bf59e:	b93d      	cbnz	r5, bf5b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x88>
   bf5a0:	4a1d      	ldr	r2, [pc, #116]	; (bf618 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
   bf5a2:	9200      	str	r2, [sp, #0]
   bf5a4:	6945      	ldr	r5, [r0, #20]
   bf5a6:	232e      	movs	r3, #46	; 0x2e
  TF_LITE_ENSURE(context,
   bf5a8:	4a16      	ldr	r2, [pc, #88]	; (bf604 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
   bf5aa:	491c      	ldr	r1, [pc, #112]	; (bf61c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   bf5ac:	47a8      	blx	r5
   bf5ae:	e7de      	b.n	bf56e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   bf5b0:	682d      	ldr	r5, [r5, #0]
   bf5b2:	b925      	cbnz	r5, bf5be <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
   bf5b4:	4a1a      	ldr	r2, [pc, #104]	; (bf620 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   bf5b6:	9200      	str	r2, [sp, #0]
   bf5b8:	6945      	ldr	r5, [r0, #20]
   bf5ba:	232f      	movs	r3, #47	; 0x2f
   bf5bc:	e7f4      	b.n	bf5a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
   bf5be:	682d      	ldr	r5, [r5, #0]
   bf5c0:	2d01      	cmp	r5, #1
   bf5c2:	d004      	beq.n	bf5ce <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
   bf5c4:	4a17      	ldr	r2, [pc, #92]	; (bf624 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   bf5c6:	9200      	str	r2, [sp, #0]
   bf5c8:	6945      	ldr	r5, [r0, #20]
   bf5ca:	2330      	movs	r3, #48	; 0x30
   bf5cc:	e7ec      	b.n	bf5a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf5ce:	687d      	ldr	r5, [r7, #4]
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32);
   bf5d0:	4375      	muls	r5, r6
   bf5d2:	5d4d      	ldrb	r5, [r1, r5]
   bf5d4:	2d01      	cmp	r5, #1
   bf5d6:	d004      	beq.n	bf5e2 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xba>
   bf5d8:	4a13      	ldr	r2, [pc, #76]	; (bf628 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   bf5da:	9200      	str	r2, [sp, #0]
   bf5dc:	6945      	ldr	r5, [r0, #20]
   bf5de:	2332      	movs	r3, #50	; 0x32
   bf5e0:	e7e2      	b.n	bf5a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  TF_LITE_ENSURE(context,
   bf5e2:	5c8a      	ldrb	r2, [r1, r2]
   bf5e4:	2a03      	cmp	r2, #3
   bf5e6:	d006      	beq.n	bf5f6 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
   bf5e8:	2a09      	cmp	r2, #9
   bf5ea:	d004      	beq.n	bf5f6 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
   bf5ec:	4a0f      	ldr	r2, [pc, #60]	; (bf62c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   bf5ee:	9200      	str	r2, [sp, #0]
   bf5f0:	6945      	ldr	r5, [r0, #20]
   bf5f2:	2333      	movs	r3, #51	; 0x33
   bf5f4:	e7d8      	b.n	bf5a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return kTfLiteOk;
   bf5f6:	2400      	movs	r4, #0
   bf5f8:	e7b9      	b.n	bf56e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
   bf5fa:	bf00      	nop
   bf5fc:	000c8bee 	.word	0x000c8bee
   bf600:	000c8430 	.word	0x000c8430
   bf604:	000c8b3e 	.word	0x000c8b3e
   bf608:	000c70fc 	.word	0x000c70fc
   bf60c:	000c8440 	.word	0x000c8440
   bf610:	000c7116 	.word	0x000c7116
   bf614:	000c8bb0 	.word	0x000c8bb0
   bf618:	000c7163 	.word	0x000c7163
   bf61c:	000c7067 	.word	0x000c7067
   bf620:	000c7177 	.word	0x000c7177
   bf624:	000c8bca 	.word	0x000c8bca
   bf628:	000c8bf0 	.word	0x000c8bf0
   bf62c:	000c8c0e 	.word	0x000c8c0e

000bf630 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf634:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf636:	6849      	ldr	r1, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf638:	f8d0 b008 	ldr.w	fp, [r0, #8]
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf63c:	6849      	ldr	r1, [r1, #4]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf63e:	685b      	ldr	r3, [r3, #4]
   bf640:	2238      	movs	r2, #56	; 0x38
  TfLiteTensor* output = &context->tensors[node->outputs->data[0]];
   bf642:	fb02 fa01 	mul.w	sl, r2, r1
   bf646:	eb0b 050a 	add.w	r5, fp, sl
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf64a:	b08d      	sub	sp, #52	; 0x34
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf64c:	4353      	muls	r3, r2
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf64e:	4680      	mov	r8, r0

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = output->params.scale;
   bf650:	68e8      	ldr	r0, [r5, #12]
  TfLiteTensor* input = &context->tensors[node->inputs->data[0]];
   bf652:	9301      	str	r3, [sp, #4]
   bf654:	eb0b 0403 	add.w	r4, fp, r3
  op_params.scale = output->params.scale;
   bf658:	f7f4 fe46 	bl	b42e8 <__aeabi_f2d>
  switch (output->type) {
   bf65c:	f81b 200a 	ldrb.w	r2, [fp, sl]
  op_params.zero_point = output->params.zero_point;
   bf660:	f8d5 9010 	ldr.w	r9, [r5, #16]
  switch (output->type) {
   bf664:	2a03      	cmp	r2, #3
  op_params.scale = output->params.scale;
   bf666:	4606      	mov	r6, r0
   bf668:	460f      	mov	r7, r1
  switch (output->type) {
   bf66a:	d033      	beq.n	bf6d4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   bf66c:	2a09      	cmp	r2, #9
   bf66e:	9b01      	ldr	r3, [sp, #4]
   bf670:	d166      	bne.n	bf740 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    case kTfLiteInt8:
      reference_ops::AffineQuantize(
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf672:	4621      	mov	r1, r4
   bf674:	a802      	add	r0, sp, #8
   bf676:	f7f7 f948 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf67a:	b104      	cbz	r4, bf67e <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
   bf67c:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   bf67e:	4629      	mov	r1, r5
   bf680:	a807      	add	r0, sp, #28
   bf682:	f7f7 f942 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const RuntimeShape& input_shape,
                           const float* input_data,
                           const RuntimeShape& output_shape, T* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = static_cast<double>(op_params.scale);
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   bf686:	a907      	add	r1, sp, #28
   bf688:	a802      	add	r0, sp, #8
   bf68a:	f7f9 fadf 	bl	b8c4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   bf68e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   bf692:	4680      	mov	r8, r0
  static constexpr int32 min_val = std::numeric_limits<T>::min();
  static constexpr int32 max_val = std::numeric_limits<T>::max();

  for (int i = 0; i < flat_size; i++) {
   bf694:	2500      	movs	r5, #0
    const float val = input_data[i];
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
   bf696:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   bf69a:	45a8      	cmp	r8, r5
   bf69c:	dd46      	ble.n	bf72c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
   bf69e:	f854 0b04 	ldr.w	r0, [r4], #4
   bf6a2:	f7f4 fe21 	bl	b42e8 <__aeabi_f2d>
   bf6a6:	4632      	mov	r2, r6
   bf6a8:	463b      	mov	r3, r7
   bf6aa:	f7f4 ff9f 	bl	b45ec <__aeabi_ddiv>
   bf6ae:	ec41 0b10 	vmov	d0, r0, r1
   bf6b2:	f005 fdff 	bl	c52b4 <round>
   bf6b6:	ec51 0b10 	vmov	r0, r1, d0
   bf6ba:	f7f5 f907 	bl	b48cc <__aeabi_d2iz>
   bf6be:	4448      	add	r0, r9
    output_data[i] = clamped;
   bf6c0:	287f      	cmp	r0, #127	; 0x7f
   bf6c2:	bfa8      	it	ge
   bf6c4:	207f      	movge	r0, #127	; 0x7f
   bf6c6:	4558      	cmp	r0, fp
   bf6c8:	bfb8      	it	lt
   bf6ca:	4658      	movlt	r0, fp
   bf6cc:	f80a 0005 	strb.w	r0, [sl, r5]
  for (int i = 0; i < flat_size; i++) {
   bf6d0:	3501      	adds	r5, #1
   bf6d2:	e7e2      	b.n	bf69a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      break;
    case kTfLiteUInt8:
      reference_ops::AffineQuantize(
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf6d4:	4621      	mov	r1, r4
   bf6d6:	a802      	add	r0, sp, #8
   bf6d8:	f7f7 f917 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bf6dc:	b104      	cbz	r4, bf6e0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   bf6de:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   bf6e0:	4629      	mov	r1, r5
   bf6e2:	a807      	add	r0, sp, #28
   bf6e4:	f7f7 f911 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   bf6e8:	a907      	add	r1, sp, #28
   bf6ea:	a802      	add	r0, sp, #8
   bf6ec:	f7f9 faae 	bl	b8c4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   bf6f0:	f8d5 a004 	ldr.w	sl, [r5, #4]
   bf6f4:	4680      	mov	r8, r0
  for (int i = 0; i < flat_size; i++) {
   bf6f6:	2500      	movs	r5, #0
   bf6f8:	45a8      	cmp	r8, r5
   bf6fa:	dd17      	ble.n	bf72c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
    int32 unclamped = static_cast<int32>(TfLiteRound(val / scale)) + zero_point;
   bf6fc:	f854 0b04 	ldr.w	r0, [r4], #4
   bf700:	f7f4 fdf2 	bl	b42e8 <__aeabi_f2d>
   bf704:	463b      	mov	r3, r7
   bf706:	4632      	mov	r2, r6
   bf708:	f7f4 ff70 	bl	b45ec <__aeabi_ddiv>
   bf70c:	ec41 0b10 	vmov	d0, r0, r1
   bf710:	f005 fdd0 	bl	c52b4 <round>
   bf714:	ec51 0b10 	vmov	r0, r1, d0
   bf718:	f7f5 f8d8 	bl	b48cc <__aeabi_d2iz>
   bf71c:	eb00 0309 	add.w	r3, r0, r9
    output_data[i] = clamped;
   bf720:	f383 0308 	usat	r3, #8, r3
   bf724:	f80a 3005 	strb.w	r3, [sl, r5]
  for (int i = 0; i < flat_size; i++) {
   bf728:	3501      	adds	r5, #1
   bf72a:	e7e5      	b.n	bf6f8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
   bf72c:	a807      	add	r0, sp, #28
   bf72e:	f7f6 fe48 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<float>(input),
   bf732:	a802      	add	r0, sp, #8
   bf734:	f7f6 fe45 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      context->ReportError(context, "Output type %s (%d) not supported",
                           TfLiteTypeGetName(input->type), output->type);
      return kTfLiteError;
  }

  return kTfLiteOk;
   bf738:	2000      	movs	r0, #0
}
   bf73a:	b00d      	add	sp, #52	; 0x34
   bf73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      context->ReportError(context, "Output type %s (%d) not supported",
   bf740:	f81b 0003 	ldrb.w	r0, [fp, r3]
   bf744:	f8d8 4014 	ldr.w	r4, [r8, #20]
   bf748:	f7f5 fa1c 	bl	b4b84 <TfLiteTypeGetName>
   bf74c:	f81b 300a 	ldrb.w	r3, [fp, sl]
   bf750:	4902      	ldr	r1, [pc, #8]	; (bf75c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x12c>)
   bf752:	4602      	mov	r2, r0
   bf754:	4640      	mov	r0, r8
   bf756:	47a0      	blx	r4
      return kTfLiteError;
   bf758:	2001      	movs	r0, #1
   bf75a:	e7ee      	b.n	bf73a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
   bf75c:	000c8c4a 	.word	0x000c8c4a

000bf760 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
// quantized output, in int8 or uint8 format.
TfLiteRegistration* Register_QUANTIZE() {
  static TfLiteRegistration r = {quantize::Init, quantize::Free,
                                 quantize::Prepare, quantize::Eval};
  return &r;
}
   bf760:	4800      	ldr	r0, [pc, #0]	; (bf764 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x4>)
   bf762:	4770      	bx	lr
   bf764:	2003c350 	.word	0x2003c350

000bf768 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf768:	b530      	push	{r4, r5, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   bf76a:	680a      	ldr	r2, [r1, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   bf76c:	6812      	ldr	r2, [r2, #0]
   bf76e:	3a01      	subs	r2, #1
   bf770:	2a01      	cmp	r2, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bf772:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   bf774:	d909      	bls.n	bf78a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   bf776:	4a0e      	ldr	r2, [pc, #56]	; (bf7b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>)
   bf778:	9200      	str	r2, [sp, #0]
   bf77a:	6944      	ldr	r4, [r0, #20]
   bf77c:	4a0d      	ldr	r2, [pc, #52]	; (bf7b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>)
   bf77e:	490e      	ldr	r1, [pc, #56]	; (bf7b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x50>)
   bf780:	2347      	movs	r3, #71	; 0x47
   bf782:	47a0      	blx	r4
   bf784:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  return kTfLiteOk;
}
   bf786:	b005      	add	sp, #20
   bf788:	bd30      	pop	{r4, r5, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   bf78a:	684a      	ldr	r2, [r1, #4]
   bf78c:	6812      	ldr	r2, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bf78e:	2a01      	cmp	r2, #1
   bf790:	d00c      	beq.n	bf7ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x44>
   bf792:	2401      	movs	r4, #1
   bf794:	e9cd 2402 	strd	r2, r4, [sp, #8]
   bf798:	4a08      	ldr	r2, [pc, #32]	; (bf7bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x54>)
   bf79a:	9201      	str	r2, [sp, #4]
   bf79c:	4a08      	ldr	r2, [pc, #32]	; (bf7c0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x58>)
   bf79e:	9200      	str	r2, [sp, #0]
   bf7a0:	6945      	ldr	r5, [r0, #20]
   bf7a2:	4a04      	ldr	r2, [pc, #16]	; (bf7b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>)
   bf7a4:	4907      	ldr	r1, [pc, #28]	; (bf7c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x5c>)
   bf7a6:	2348      	movs	r3, #72	; 0x48
   bf7a8:	47a8      	blx	r5
   bf7aa:	e7eb      	b.n	bf784 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
  return kTfLiteOk;
   bf7ac:	2000      	movs	r0, #0
   bf7ae:	e7ea      	b.n	bf786 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   bf7b0:	000c8cdd 	.word	0x000c8cdd
   bf7b4:	000c8c6c 	.word	0x000c8c6c
   bf7b8:	000c7067 	.word	0x000c7067
   bf7bc:	000c8bee 	.word	0x000c8bee
   bf7c0:	000c8440 	.word	0x000c8440
   bf7c4:	000c70fc 	.word	0x000c70fc

000bf7c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   bf7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf7cc:	f8d1 c000 	ldr.w	ip, [r1]
   bf7d0:	6886      	ldr	r6, [r0, #8]
   bf7d2:	f8dc 7004 	ldr.w	r7, [ip, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf7d6:	6849      	ldr	r1, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf7d8:	2338      	movs	r3, #56	; 0x38
   bf7da:	435f      	muls	r7, r3
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf7dc:	684d      	ldr	r5, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf7de:	19f2      	adds	r2, r6, r7
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf7e0:	435d      	muls	r5, r3
  for (int i = 0; i < dims->size; ++i) {
   bf7e2:	6893      	ldr	r3, [r2, #8]
   bf7e4:	f853 8b04 	ldr.w	r8, [r3], #4
   bf7e8:	b085      	sub	sp, #20
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf7ea:	eb06 0e05 	add.w	lr, r6, r5
  for (int i = 0; i < dims->size; ++i) {
   bf7ee:	2200      	movs	r2, #0
  int64_t count = 1;
   bf7f0:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
   bf7f2:	4590      	cmp	r8, r2
   bf7f4:	dd05      	ble.n	bf802 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3a>
    count *= dims->data[i];
   bf7f6:	f853 4b04 	ldr.w	r4, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
   bf7fa:	3201      	adds	r2, #1
    count *= dims->data[i];
   bf7fc:	fba1 1404 	umull	r1, r4, r1, r4
  for (int i = 0; i < dims->size; ++i) {
   bf800:	e7f7      	b.n	bf7f2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf802:	f8dc 3000 	ldr.w	r3, [ip]
  TfLiteIntArray* output_shape = output->dims;
   bf806:	f8de 2008 	ldr.w	r2, [lr, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf80a:	2b01      	cmp	r3, #1
   bf80c:	d105      	bne.n	bf81a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   bf80e:	6813      	ldr	r3, [r2, #0]
   bf810:	2b01      	cmp	r3, #1
   bf812:	d102      	bne.n	bf81a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   bf814:	6853      	ldr	r3, [r2, #4]
   bf816:	b903      	cbnz	r3, bf81a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    output_shape->size = 0;
   bf818:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
   bf81a:	4696      	mov	lr, r2
   bf81c:	f04f 0c00 	mov.w	ip, #0
   bf820:	f85e 9b04 	ldr.w	r9, [lr], #4
  int stretch_dim = -1;
   bf824:	f04f 34ff 	mov.w	r4, #4294967295
  int num_output_elements = 1;
   bf828:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   bf82a:	45e1      	cmp	r9, ip
   bf82c:	dd1d      	ble.n	bf86a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
    int value = output_shape->data[i];
   bf82e:	f85e 8b04 	ldr.w	r8, [lr], #4
    if (value == -1) {
   bf832:	f1b8 3fff 	cmp.w	r8, #4294967295
   bf836:	d111      	bne.n	bf85c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x94>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   bf838:	f1b4 3fff 	cmp.w	r4, #4294967295
   bf83c:	d013      	beq.n	bf866 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
   bf83e:	4b1e      	ldr	r3, [pc, #120]	; (bf8b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf0>)
   bf840:	9301      	str	r3, [sp, #4]
   bf842:	e9cd 4802 	strd	r4, r8, [sp, #8]
   bf846:	4b1d      	ldr	r3, [pc, #116]	; (bf8bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>)
   bf848:	9300      	str	r3, [sp, #0]
   bf84a:	6944      	ldr	r4, [r0, #20]
   bf84c:	2336      	movs	r3, #54	; 0x36
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   bf84e:	4a1c      	ldr	r2, [pc, #112]	; (bf8c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>)
   bf850:	491c      	ldr	r1, [pc, #112]	; (bf8c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>)
   bf852:	47a0      	blx	r4
   bf854:	2001      	movs	r0, #1
}
   bf856:	b005      	add	sp, #20
   bf858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      num_output_elements *= value;
   bf85c:	fb08 f303 	mul.w	r3, r8, r3
  for (int i = 0; i < output_shape->size; ++i) {
   bf860:	f10c 0c01 	add.w	ip, ip, #1
   bf864:	e7e1      	b.n	bf82a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
   bf866:	4664      	mov	r4, ip
   bf868:	e7fa      	b.n	bf860 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x98>
  if (stretch_dim != -1) {
   bf86a:	f1b4 3fff 	cmp.w	r4, #4294967295
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   bf86e:	bf1e      	ittt	ne
   bf870:	eb02 0284 	addne.w	r2, r2, r4, lsl #2
   bf874:	fb91 fcf3 	sdivne	ip, r1, r3
   bf878:	f8c2 c004 	strne.w	ip, [r2, #4]
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   bf87c:	5df2      	ldrb	r2, [r6, r7]
   bf87e:	5d74      	ldrb	r4, [r6, r5]
    num_output_elements *= output_shape->data[stretch_dim];
   bf880:	bf18      	it	ne
   bf882:	fb0c f303 	mulne.w	r3, ip, r3
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   bf886:	42a2      	cmp	r2, r4
   bf888:	d008      	beq.n	bf89c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd4>
   bf88a:	4b0f      	ldr	r3, [pc, #60]	; (bf8c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x100>)
   bf88c:	9301      	str	r3, [sp, #4]
   bf88e:	e9cd 2402 	strd	r2, r4, [sp, #8]
   bf892:	4b0e      	ldr	r3, [pc, #56]	; (bf8cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>)
   bf894:	9300      	str	r3, [sp, #0]
   bf896:	6944      	ldr	r4, [r0, #20]
   bf898:	2341      	movs	r3, #65	; 0x41
   bf89a:	e7d8      	b.n	bf84e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x86>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   bf89c:	428b      	cmp	r3, r1
   bf89e:	d008      	beq.n	bf8b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
   bf8a0:	e9cd 1302 	strd	r1, r3, [sp, #8]
   bf8a4:	4b0a      	ldr	r3, [pc, #40]	; (bf8d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x108>)
   bf8a6:	9301      	str	r3, [sp, #4]
   bf8a8:	4b0a      	ldr	r3, [pc, #40]	; (bf8d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10c>)
   bf8aa:	9300      	str	r3, [sp, #0]
   bf8ac:	6944      	ldr	r4, [r0, #20]
   bf8ae:	2342      	movs	r3, #66	; 0x42
   bf8b0:	e7cd      	b.n	bf84e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
   bf8b2:	2000      	movs	r0, #0
   bf8b4:	e7cf      	b.n	bf856 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
   bf8b6:	bf00      	nop
   bf8b8:	000c8d0a 	.word	0x000c8d0a
   bf8bc:	000c8d0d 	.word	0x000c8d0d
   bf8c0:	000c8c6c 	.word	0x000c8c6c
   bf8c4:	000c70fc 	.word	0x000c70fc
   bf8c8:	000c8588 	.word	0x000c8588
   bf8cc:	000c7192 	.word	0x000c7192
   bf8d0:	000c8d19 	.word	0x000c8d19
   bf8d4:	000c8d2d 	.word	0x000c8d2d

000bf8d8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bf8d8:	b570      	push	{r4, r5, r6, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf8da:	680a      	ldr	r2, [r1, #0]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf8dc:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf8de:	6884      	ldr	r4, [r0, #8]
   bf8e0:	6855      	ldr	r5, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf8e2:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  if (ReshapeOutput(context, node) != kTfLiteOk) {
   bf8e4:	f7ff ff70 	bl	bf7c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   bf8e8:	b970      	cbnz	r0, bf908 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bf8ea:	2338      	movs	r3, #56	; 0x38
   bf8ec:	fb03 4205 	mla	r2, r3, r5, r4
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bf8f0:	fb03 4406 	mla	r4, r3, r6, r4
    return kTfLiteError;
  }

  for (int i = 0; i < input->bytes; ++i) {
   bf8f4:	4603      	mov	r3, r0
   bf8f6:	6991      	ldr	r1, [r2, #24]
   bf8f8:	4299      	cmp	r1, r3
   bf8fa:	d906      	bls.n	bf90a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    output->data.raw[i] = input->data.raw[i];
   bf8fc:	6851      	ldr	r1, [r2, #4]
   bf8fe:	5ccd      	ldrb	r5, [r1, r3]
   bf900:	6861      	ldr	r1, [r4, #4]
   bf902:	54cd      	strb	r5, [r1, r3]
  for (int i = 0; i < input->bytes; ++i) {
   bf904:	3301      	adds	r3, #1
   bf906:	e7f6      	b.n	bf8f6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
    return kTfLiteError;
   bf908:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
   bf90a:	bd70      	pop	{r4, r5, r6, pc}

000bf90c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

TfLiteRegistration* Register_RESHAPE() {
  static TfLiteRegistration r = {nullptr, nullptr, reshape::Prepare,
                                 reshape::Eval};
  return &r;
}
   bf90c:	4800      	ldr	r0, [pc, #0]	; (bf910 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x4>)
   bf90e:	4770      	bx	lr
   bf910:	2003c370 	.word	0x2003c370

000bf914 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
};

struct MaximumOp {
  template <typename data_type>
  static data_type op(data_type el1, data_type el2) {
    return el1 > el2 ? el1 : el2;
   bf914:	eeb4 0ae0 	vcmpe.f32	s0, s1
   bf918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   bf91c:	bfd8      	it	le
   bf91e:	eeb0 0a60 	vmovle.f32	s0, s1
   bf922:	4770      	bx	lr

000bf924 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   bf924:	4288      	cmp	r0, r1
   bf926:	bf38      	it	cc
   bf928:	4608      	movcc	r0, r1
   bf92a:	4770      	bx	lr

000bf92c <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   bf92c:	4288      	cmp	r0, r1
   bf92e:	bfb8      	it	lt
   bf930:	4608      	movlt	r0, r1
   bf932:	4770      	bx	lr

000bf934 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIlEET_S6_S6_>:
   bf934:	4288      	cmp	r0, r1
   bf936:	bfb8      	it	lt
   bf938:	4608      	movlt	r0, r1
   bf93a:	4770      	bx	lr

000bf93c <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   bf93c:	b530      	push	{r4, r5, lr}
    return el1 > el2 ? el1 : el2;
   bf93e:	4290      	cmp	r0, r2
   bf940:	460c      	mov	r4, r1
   bf942:	4199      	sbcs	r1, r3
   bf944:	4605      	mov	r5, r0
   bf946:	bfbc      	itt	lt
   bf948:	461c      	movlt	r4, r3
   bf94a:	4615      	movlt	r5, r2
  }
   bf94c:	4628      	mov	r0, r5
   bf94e:	4621      	mov	r1, r4
   bf950:	bd30      	pop	{r4, r5, pc}

000bf952 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
};

struct MinimumOp {
  template <typename data_type>
  static data_type op(data_type el1, data_type el2) {
    return el1 < el2 ? el1 : el2;
   bf952:	eeb4 0ae0 	vcmpe.f32	s0, s1
   bf956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   bf95a:	bf58      	it	pl
   bf95c:	eeb0 0a60 	vmovpl.f32	s0, s1
   bf960:	4770      	bx	lr

000bf962 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   bf962:	4288      	cmp	r0, r1
   bf964:	bf28      	it	cs
   bf966:	4608      	movcs	r0, r1
   bf968:	4770      	bx	lr

000bf96a <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   bf96a:	4288      	cmp	r0, r1
   bf96c:	bfa8      	it	ge
   bf96e:	4608      	movge	r0, r1
   bf970:	4770      	bx	lr

000bf972 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIlEET_S6_S6_>:
   bf972:	4288      	cmp	r0, r1
   bf974:	bfa8      	it	ge
   bf976:	4608      	movge	r0, r1
   bf978:	4770      	bx	lr

000bf97a <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   bf97a:	b530      	push	{r4, r5, lr}
    return el1 < el2 ? el1 : el2;
   bf97c:	4282      	cmp	r2, r0
   bf97e:	460c      	mov	r4, r1
   bf980:	eb73 0101 	sbcs.w	r1, r3, r1
   bf984:	4605      	mov	r5, r0
   bf986:	bfbc      	itt	lt
   bf988:	461c      	movlt	r4, r3
   bf98a:	4615      	movlt	r5, r2
  }
   bf98c:	4628      	mov	r0, r5
   bf98e:	4621      	mov	r1, r4
   bf990:	bd30      	pop	{r4, r5, pc}
	...

000bf994 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
      /* free */ nullptr,
      /* prepare */ nullptr,
      maximum_minimum::Eval<maximum_minimum::kReference,
                            maximum_minimum::MaximumOp>};
  return &r;
}
   bf994:	4800      	ldr	r0, [pc, #0]	; (bf998 <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x4>)
   bf996:	4770      	bx	lr
   bf998:	2003c390 	.word	0x2003c390

000bf99c <_ZN6tflite3ops5micro16Register_MINIMUMEv>:
      /* free */ nullptr,
      /* prepare */ nullptr,
      maximum_minimum::Eval<maximum_minimum::kReference,
                            maximum_minimum::MinimumOp>};
  return &r;
}
   bf99c:	4800      	ldr	r0, [pc, #0]	; (bf9a0 <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x4>)
   bf99e:	4770      	bx	lr
   bf9a0:	2003c3b0 	.word	0x2003c3b0

000bf9a4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:

namespace tflite {
namespace reference_ops {

template <typename T, typename Op>
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf9a8:	469b      	mov	fp, r3
                                   const T* input1_data,
                                   const RuntimeShape& unextended_input2_shape,
                                   const T* input2_data,
                                   const RuntimeShape& unextended_output_shape,
                                   T* output_data, Op op) {
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf9aa:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf9ac:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf9ae:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bf9b0:	4615      	mov	r5, r2
   bf9b2:	4604      	mov	r4, r0
   bf9b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bf9b6:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bf9b8:	dd01      	ble.n	bf9be <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bf9ba:	f004 ff6f 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bf9be:	682b      	ldr	r3, [r5, #0]
   bf9c0:	2b04      	cmp	r3, #4
   bf9c2:	dcfa      	bgt.n	bf9ba <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bf9c4:	6813      	ldr	r3, [r2, #0]
   bf9c6:	2b04      	cmp	r3, #4
   bf9c8:	dcf7      	bgt.n	bf9ba <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   bf9ca:	2301      	movs	r3, #1
   bf9cc:	2104      	movs	r1, #4
   bf9ce:	a805      	add	r0, sp, #20
   bf9d0:	f7f6 fd3c 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bf9d4:	4620      	mov	r0, r4
   bf9d6:	ab12      	add	r3, sp, #72	; 0x48
   bf9d8:	aa0a      	add	r2, sp, #40	; 0x28
   bf9da:	4629      	mov	r1, r5
   bf9dc:	f7f7 f83e 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      unextended_input2_shape, &desc1, &desc2);

  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bf9e0:	2400      	movs	r4, #0
   bf9e2:	2100      	movs	r1, #0
   bf9e4:	a805      	add	r0, sp, #20
   bf9e6:	f7f6 fcf7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf9ea:	42a0      	cmp	r0, r4
   bf9ec:	dd46      	ble.n	bfa7c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bf9ee:	2500      	movs	r5, #0
   bf9f0:	ae05      	add	r6, sp, #20
   bf9f2:	2101      	movs	r1, #1
   bf9f4:	4630      	mov	r0, r6
   bf9f6:	f7f6 fcef 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bf9fa:	42a8      	cmp	r0, r5
   bf9fc:	dd3c      	ble.n	bfa78 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd4>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bf9fe:	f04f 0a00 	mov.w	sl, #0
   bfa02:	2102      	movs	r1, #2
   bfa04:	4630      	mov	r0, r6
   bfa06:	f7f6 fce7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa0a:	4550      	cmp	r0, sl
   bfa0c:	dd32      	ble.n	bfa74 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfa0e:	2700      	movs	r7, #0
   bfa10:	2103      	movs	r1, #3
   bfa12:	4630      	mov	r0, r6
   bfa14:	f7f6 fce0 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfa18:	42b8      	cmp	r0, r7
   bfa1a:	dd28      	ble.n	bfa6e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xca>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfa1c:	9700      	str	r7, [sp, #0]
   bfa1e:	4653      	mov	r3, sl
   bfa20:	462a      	mov	r2, r5
   bfa22:	4621      	mov	r1, r4
   bfa24:	4630      	mov	r0, r6
   bfa26:	f7f6 fd3e 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfa2a:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfa2c:	4680      	mov	r8, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfa2e:	4653      	mov	r3, sl
   bfa30:	462a      	mov	r2, r5
   bfa32:	4621      	mov	r1, r4
   bfa34:	a80a      	add	r0, sp, #40	; 0x28
   bfa36:	f7f6 fddf 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfa3a:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfa3c:	4681      	mov	r9, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfa3e:	4653      	mov	r3, sl
   bfa40:	462a      	mov	r2, r5
   bfa42:	4621      	mov	r1, r4
   bfa44:	a812      	add	r0, sp, #72	; 0x48
   bfa46:	f7f6 fdd7 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
          auto in2_val = input2_data[in2_idx];
          output_data[out_idx] = op(in1_val, in2_val);
   bfa4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bfa4c:	eb03 0888 	add.w	r8, r3, r8, lsl #2
          auto in1_val = input1_data[in1_idx];
   bfa50:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   bfa52:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
          auto in1_val = input1_data[in1_idx];
   bfa56:	eb03 0989 	add.w	r9, r3, r9, lsl #2
          output_data[out_idx] = op(in1_val, in2_val);
   bfa5a:	edd0 0a00 	vldr	s1, [r0]
   bfa5e:	ed99 0a00 	vldr	s0, [r9]
   bfa62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfa64:	4798      	blx	r3
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfa66:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfa68:	ed88 0a00 	vstr	s0, [r8]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfa6c:	e7d0      	b.n	bfa10 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfa6e:	f10a 0a01 	add.w	sl, sl, #1
   bfa72:	e7c6      	b.n	bfa02 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfa74:	3501      	adds	r5, #1
   bfa76:	e7bb      	b.n	bf9f0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfa78:	3401      	adds	r4, #1
   bfa7a:	e7b2      	b.n	bf9e2 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfa7c:	a805      	add	r0, sp, #20
   bfa7e:	f7f6 fca0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   bfa82:	b01b      	add	sp, #108	; 0x6c
   bfa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfa88 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa8c:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa8e:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa90:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa92:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfa94:	4615      	mov	r5, r2
   bfa96:	4604      	mov	r4, r0
   bfa98:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfa9a:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfa9c:	dd01      	ble.n	bfaa2 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfa9e:	f004 fefd 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfaa2:	682b      	ldr	r3, [r5, #0]
   bfaa4:	2b04      	cmp	r3, #4
   bfaa6:	dcfa      	bgt.n	bfa9e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfaa8:	6813      	ldr	r3, [r2, #0]
   bfaaa:	2b04      	cmp	r3, #4
   bfaac:	dcf7      	bgt.n	bfa9e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfaae:	2301      	movs	r3, #1
   bfab0:	2104      	movs	r1, #4
   bfab2:	a805      	add	r0, sp, #20
   bfab4:	f7f6 fcca 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfab8:	4620      	mov	r0, r4
   bfaba:	ab12      	add	r3, sp, #72	; 0x48
   bfabc:	aa0a      	add	r2, sp, #40	; 0x28
   bfabe:	4629      	mov	r1, r5
   bfac0:	f7f6 ffcc 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfac4:	2400      	movs	r4, #0
   bfac6:	2100      	movs	r1, #0
   bfac8:	a805      	add	r0, sp, #20
   bfaca:	f7f6 fc85 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bface:	42a0      	cmp	r0, r4
   bfad0:	dd40      	ble.n	bfb54 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfad2:	2500      	movs	r5, #0
   bfad4:	ae05      	add	r6, sp, #20
   bfad6:	2101      	movs	r1, #1
   bfad8:	4630      	mov	r0, r6
   bfada:	f7f6 fc7d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfade:	42a8      	cmp	r0, r5
   bfae0:	dd36      	ble.n	bfb50 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfae2:	f04f 0800 	mov.w	r8, #0
   bfae6:	2102      	movs	r1, #2
   bfae8:	4630      	mov	r0, r6
   bfaea:	f7f6 fc75 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfaee:	4540      	cmp	r0, r8
   bfaf0:	dd2c      	ble.n	bfb4c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfaf2:	2700      	movs	r7, #0
   bfaf4:	2103      	movs	r1, #3
   bfaf6:	4630      	mov	r0, r6
   bfaf8:	f7f6 fc6e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfafc:	42b8      	cmp	r0, r7
   bfafe:	dd22      	ble.n	bfb46 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfb00:	9700      	str	r7, [sp, #0]
   bfb02:	4643      	mov	r3, r8
   bfb04:	462a      	mov	r2, r5
   bfb06:	4621      	mov	r1, r4
   bfb08:	4630      	mov	r0, r6
   bfb0a:	f7f6 fccc 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb0e:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfb10:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb12:	4643      	mov	r3, r8
   bfb14:	462a      	mov	r2, r5
   bfb16:	4621      	mov	r1, r4
   bfb18:	a80a      	add	r0, sp, #40	; 0x28
   bfb1a:	f7f6 fd6d 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfb1e:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfb20:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfb22:	4643      	mov	r3, r8
   bfb24:	462a      	mov	r2, r5
   bfb26:	4621      	mov	r1, r4
   bfb28:	a812      	add	r0, sp, #72	; 0x48
   bfb2a:	f7f6 fd65 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfb2e:	9b03      	ldr	r3, [sp, #12]
   bfb30:	f819 1000 	ldrb.w	r1, [r9, r0]
   bfb34:	f813 000b 	ldrb.w	r0, [r3, fp]
   bfb38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfb3a:	4798      	blx	r3
   bfb3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfb3e:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfb40:	f803 000a 	strb.w	r0, [r3, sl]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfb44:	e7d6      	b.n	bfaf4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfb46:	f108 0801 	add.w	r8, r8, #1
   bfb4a:	e7cc      	b.n	bfae6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfb4c:	3501      	adds	r5, #1
   bfb4e:	e7c1      	b.n	bfad4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfb50:	3401      	adds	r4, #1
   bfb52:	e7b8      	b.n	bfac6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfb54:	a805      	add	r0, sp, #20
   bfb56:	f7f6 fc34 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfb5a:	b01b      	add	sp, #108	; 0x6c
   bfb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfb60 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfb64:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfb66:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfb68:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfb6a:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfb6c:	4615      	mov	r5, r2
   bfb6e:	4604      	mov	r4, r0
   bfb70:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfb72:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfb74:	dd01      	ble.n	bfb7a <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfb76:	f004 fe91 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfb7a:	682b      	ldr	r3, [r5, #0]
   bfb7c:	2b04      	cmp	r3, #4
   bfb7e:	dcfa      	bgt.n	bfb76 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfb80:	6813      	ldr	r3, [r2, #0]
   bfb82:	2b04      	cmp	r3, #4
   bfb84:	dcf7      	bgt.n	bfb76 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfb86:	2301      	movs	r3, #1
   bfb88:	2104      	movs	r1, #4
   bfb8a:	a805      	add	r0, sp, #20
   bfb8c:	f7f6 fc5e 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfb90:	4620      	mov	r0, r4
   bfb92:	ab12      	add	r3, sp, #72	; 0x48
   bfb94:	aa0a      	add	r2, sp, #40	; 0x28
   bfb96:	4629      	mov	r1, r5
   bfb98:	f7f6 ff60 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfb9c:	2400      	movs	r4, #0
   bfb9e:	2100      	movs	r1, #0
   bfba0:	a805      	add	r0, sp, #20
   bfba2:	f7f6 fc19 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfba6:	42a0      	cmp	r0, r4
   bfba8:	dd40      	ble.n	bfc2c <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfbaa:	2500      	movs	r5, #0
   bfbac:	ae05      	add	r6, sp, #20
   bfbae:	2101      	movs	r1, #1
   bfbb0:	4630      	mov	r0, r6
   bfbb2:	f7f6 fc11 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfbb6:	42a8      	cmp	r0, r5
   bfbb8:	dd36      	ble.n	bfc28 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfbba:	f04f 0800 	mov.w	r8, #0
   bfbbe:	2102      	movs	r1, #2
   bfbc0:	4630      	mov	r0, r6
   bfbc2:	f7f6 fc09 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfbc6:	4540      	cmp	r0, r8
   bfbc8:	dd2c      	ble.n	bfc24 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfbca:	2700      	movs	r7, #0
   bfbcc:	2103      	movs	r1, #3
   bfbce:	4630      	mov	r0, r6
   bfbd0:	f7f6 fc02 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfbd4:	42b8      	cmp	r0, r7
   bfbd6:	dd22      	ble.n	bfc1e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfbd8:	9700      	str	r7, [sp, #0]
   bfbda:	4643      	mov	r3, r8
   bfbdc:	462a      	mov	r2, r5
   bfbde:	4621      	mov	r1, r4
   bfbe0:	4630      	mov	r0, r6
   bfbe2:	f7f6 fc60 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfbe6:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfbe8:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfbea:	4643      	mov	r3, r8
   bfbec:	462a      	mov	r2, r5
   bfbee:	4621      	mov	r1, r4
   bfbf0:	a80a      	add	r0, sp, #40	; 0x28
   bfbf2:	f7f6 fd01 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfbf6:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfbf8:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfbfa:	4643      	mov	r3, r8
   bfbfc:	462a      	mov	r2, r5
   bfbfe:	4621      	mov	r1, r4
   bfc00:	a812      	add	r0, sp, #72	; 0x48
   bfc02:	f7f6 fcf9 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfc06:	9b03      	ldr	r3, [sp, #12]
   bfc08:	f919 1000 	ldrsb.w	r1, [r9, r0]
   bfc0c:	f913 000b 	ldrsb.w	r0, [r3, fp]
   bfc10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfc12:	4798      	blx	r3
   bfc14:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfc16:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfc18:	f803 000a 	strb.w	r0, [r3, sl]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfc1c:	e7d6      	b.n	bfbcc <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfc1e:	f108 0801 	add.w	r8, r8, #1
   bfc22:	e7cc      	b.n	bfbbe <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfc24:	3501      	adds	r5, #1
   bfc26:	e7c1      	b.n	bfbac <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfc28:	3401      	adds	r4, #1
   bfc2a:	e7b8      	b.n	bfb9e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfc2c:	a805      	add	r0, sp, #20
   bfc2e:	f7f6 fbc8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfc32:	b01b      	add	sp, #108	; 0x6c
   bfc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfc38 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc3c:	4699      	mov	r9, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfc3e:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfc40:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfc42:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfc44:	4615      	mov	r5, r2
   bfc46:	4604      	mov	r4, r0
   bfc48:	9a24      	ldr	r2, [sp, #144]	; 0x90
   bfc4a:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfc4c:	dd01      	ble.n	bfc52 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfc4e:	f004 fe25 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfc52:	682b      	ldr	r3, [r5, #0]
   bfc54:	2b04      	cmp	r3, #4
   bfc56:	dcfa      	bgt.n	bfc4e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfc58:	6813      	ldr	r3, [r2, #0]
   bfc5a:	2b04      	cmp	r3, #4
   bfc5c:	dcf7      	bgt.n	bfc4e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x16>
   bfc5e:	2301      	movs	r3, #1
   bfc60:	2104      	movs	r1, #4
   bfc62:	a805      	add	r0, sp, #20
   bfc64:	f7f6 fbf2 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfc68:	4620      	mov	r0, r4
   bfc6a:	ab12      	add	r3, sp, #72	; 0x48
   bfc6c:	aa0a      	add	r2, sp, #40	; 0x28
   bfc6e:	4629      	mov	r1, r5
   bfc70:	f7f6 fef4 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfc74:	2400      	movs	r4, #0
   bfc76:	2100      	movs	r1, #0
   bfc78:	a805      	add	r0, sp, #20
   bfc7a:	f7f6 fbad 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc7e:	42a0      	cmp	r0, r4
   bfc80:	dd40      	ble.n	bfd04 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xcc>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfc82:	2500      	movs	r5, #0
   bfc84:	ae05      	add	r6, sp, #20
   bfc86:	2101      	movs	r1, #1
   bfc88:	4630      	mov	r0, r6
   bfc8a:	f7f6 fba5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc8e:	42a8      	cmp	r0, r5
   bfc90:	dd36      	ble.n	bfd00 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfc92:	f04f 0800 	mov.w	r8, #0
   bfc96:	2102      	movs	r1, #2
   bfc98:	4630      	mov	r0, r6
   bfc9a:	f7f6 fb9d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfc9e:	4540      	cmp	r0, r8
   bfca0:	dd2c      	ble.n	bfcfc <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfca2:	2700      	movs	r7, #0
   bfca4:	2103      	movs	r1, #3
   bfca6:	4630      	mov	r0, r6
   bfca8:	f7f6 fb96 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfcac:	42b8      	cmp	r0, r7
   bfcae:	dd22      	ble.n	bfcf6 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfcb0:	9700      	str	r7, [sp, #0]
   bfcb2:	4643      	mov	r3, r8
   bfcb4:	462a      	mov	r2, r5
   bfcb6:	4621      	mov	r1, r4
   bfcb8:	4630      	mov	r0, r6
   bfcba:	f7f6 fbf4 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfcbe:	9700      	str	r7, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfcc0:	4682      	mov	sl, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfcc2:	4643      	mov	r3, r8
   bfcc4:	462a      	mov	r2, r5
   bfcc6:	4621      	mov	r1, r4
   bfcc8:	a80a      	add	r0, sp, #40	; 0x28
   bfcca:	f7f6 fc95 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfcce:	9700      	str	r7, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfcd0:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfcd2:	4643      	mov	r3, r8
   bfcd4:	462a      	mov	r2, r5
   bfcd6:	4621      	mov	r1, r4
   bfcd8:	a812      	add	r0, sp, #72	; 0x48
   bfcda:	f7f6 fc8d 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfcde:	9b03      	ldr	r3, [sp, #12]
   bfce0:	f859 1020 	ldr.w	r1, [r9, r0, lsl #2]
   bfce4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   bfce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bfcea:	4798      	blx	r3
   bfcec:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfcee:	3701      	adds	r7, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfcf0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfcf4:	e7d6      	b.n	bfca4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x6c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfcf6:	f108 0801 	add.w	r8, r8, #1
   bfcfa:	e7cc      	b.n	bfc96 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5e>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfcfc:	3501      	adds	r5, #1
   bfcfe:	e7c1      	b.n	bfc84 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfd00:	3401      	adds	r4, #1
   bfd02:	e7b8      	b.n	bfc76 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x3e>
  const RuntimeShape output_shape =
   bfd04:	a805      	add	r0, sp, #20
   bfd06:	f7f6 fb5c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfd0a:	b01b      	add	sp, #108	; 0x6c
   bfd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfd10 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfd14:	ed2d 8b02 	vpush	{d8}
   bfd18:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfd1a:	6803      	ldr	r3, [r0, #0]
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfd1c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfd1e:	2b04      	cmp	r3, #4
void MaximumMinimumBroadcast4DSlow(const RuntimeShape& unextended_input1_shape,
   bfd20:	4615      	mov	r5, r2
   bfd22:	4604      	mov	r4, r0
   bfd24:	9a26      	ldr	r2, [sp, #152]	; 0x98
   bfd26:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   bfd28:	dd01      	ble.n	bfd2e <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1e>
   bfd2a:	f004 fdb7 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   bfd2e:	682b      	ldr	r3, [r5, #0]
   bfd30:	2b04      	cmp	r3, #4
   bfd32:	dcfa      	bgt.n	bfd2a <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   bfd34:	6813      	ldr	r3, [r2, #0]
   bfd36:	2b04      	cmp	r3, #4
   bfd38:	dcf7      	bgt.n	bfd2a <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x1a>
   bfd3a:	2301      	movs	r3, #1
   bfd3c:	2104      	movs	r1, #4
   bfd3e:	a805      	add	r0, sp, #20
   bfd40:	f7f6 fb84 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   bfd44:	4620      	mov	r0, r4
   bfd46:	ab12      	add	r3, sp, #72	; 0x48
   bfd48:	aa0a      	add	r2, sp, #40	; 0x28
   bfd4a:	4629      	mov	r1, r5
   bfd4c:	f7f6 fe86 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfd50:	2400      	movs	r4, #0
   bfd52:	2100      	movs	r1, #0
   bfd54:	a805      	add	r0, sp, #20
   bfd56:	f7f6 fb3f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfd5a:	42a0      	cmp	r0, r4
   bfd5c:	dd4e      	ble.n	bfdfc <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfd5e:	2500      	movs	r5, #0
   bfd60:	af05      	add	r7, sp, #20
   bfd62:	2101      	movs	r1, #1
   bfd64:	4638      	mov	r0, r7
   bfd66:	f7f6 fb37 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfd6a:	42a8      	cmp	r0, r5
   bfd6c:	dd44      	ble.n	bfdf8 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe8>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfd6e:	ee08 7a10 	vmov	s16, r7
   bfd72:	2600      	movs	r6, #0
   bfd74:	ee18 0a10 	vmov	r0, s16
   bfd78:	2102      	movs	r1, #2
   bfd7a:	f7f6 fb2d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfd7e:	42b0      	cmp	r0, r6
   bfd80:	dd38      	ble.n	bfdf4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfd82:	f04f 0800 	mov.w	r8, #0
   bfd86:	ee18 0a10 	vmov	r0, s16
   bfd8a:	2103      	movs	r1, #3
   bfd8c:	f7f6 fb24 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   bfd90:	4540      	cmp	r0, r8
   bfd92:	dd2d      	ble.n	bfdf0 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfd94:	f8cd 8000 	str.w	r8, [sp]
   bfd98:	4633      	mov	r3, r6
   bfd9a:	462a      	mov	r2, r5
   bfd9c:	4621      	mov	r1, r4
   bfd9e:	ee18 0a10 	vmov	r0, s16
   bfda2:	f7f6 fb80 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfda6:	f8cd 8000 	str.w	r8, [sp]
          auto out_idx = Offset(output_shape, b, y, x, c);
   bfdaa:	4681      	mov	r9, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfdac:	4633      	mov	r3, r6
   bfdae:	462a      	mov	r2, r5
   bfdb0:	4621      	mov	r1, r4
   bfdb2:	a80a      	add	r0, sp, #40	; 0x28
   bfdb4:	f7f6 fc20 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfdb8:	f8cd 8000 	str.w	r8, [sp]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   bfdbc:	4682      	mov	sl, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   bfdbe:	4633      	mov	r3, r6
   bfdc0:	462a      	mov	r2, r5
   bfdc2:	4621      	mov	r1, r4
   bfdc4:	a812      	add	r0, sp, #72	; 0x48
   bfdc6:	f7f6 fc17 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = op(in1_val, in2_val);
   bfdca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   bfdcc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   bfdce:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
          auto in1_val = input1_data[in1_idx];
   bfdd2:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   bfdd4:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
          auto in1_val = input1_data[in1_idx];
   bfdd8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
          output_data[out_idx] = op(in1_val, in2_val);
   bfddc:	e9d0 2300 	ldrd	r2, r3, [r0]
   bfde0:	e9da 0100 	ldrd	r0, r1, [sl]
   bfde4:	47b8      	blx	r7
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfde6:	f108 0801 	add.w	r8, r8, #1
          output_data[out_idx] = op(in1_val, in2_val);
   bfdea:	e9c9 0100 	strd	r0, r1, [r9]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   bfdee:	e7ca      	b.n	bfd86 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   bfdf0:	3601      	adds	r6, #1
   bfdf2:	e7bf      	b.n	bfd74 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x64>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   bfdf4:	3501      	adds	r5, #1
   bfdf6:	e7b3      	b.n	bfd60 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   bfdf8:	3401      	adds	r4, #1
   bfdfa:	e7aa      	b.n	bfd52 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x42>
  const RuntimeShape output_shape =
   bfdfc:	a805      	add	r0, sp, #20
   bfdfe:	f7f6 fae0 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bfe02:	b01b      	add	sp, #108	; 0x6c
   bfe04:	ecbd 8b02 	vpop	{d8}
   bfe08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfe0c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bfe0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bfe10:	680b      	ldr	r3, [r1, #0]
   bfe12:	f8d0 9008 	ldr.w	r9, [r0, #8]
   bfe16:	685c      	ldr	r4, [r3, #4]
   bfe18:	689d      	ldr	r5, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bfe1a:	684b      	ldr	r3, [r1, #4]
   bfe1c:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bfe1e:	f04f 0838 	mov.w	r8, #56	; 0x38
   bfe22:	fb08 9404 	mla	r4, r8, r4, r9
   bfe26:	fb08 9505 	mla	r5, r8, r5, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bfe2a:	fb08 f803 	mul.w	r8, r8, r3
   bfe2e:	4607      	mov	r7, r0
    switch (op_context.output->type) {
   bfe30:	f819 0008 	ldrb.w	r0, [r9, r8]
   bfe34:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bfe36:	b095      	sub	sp, #84	; 0x54
   bfe38:	eb09 0608 	add.w	r6, r9, r8
   bfe3c:	2b08      	cmp	r3, #8
   bfe3e:	f200 80a4 	bhi.w	bff8a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17e>
   bfe42:	e8df f003 	tbb	[pc, r3]
   bfe46:	6805      	.short	0x6805
   bfe48:	a2a2852e 	.word	0xa2a2852e
   bfe4c:	a2a2      	.short	0xa2a2
   bfe4e:	4b          	.byte	0x4b
   bfe4f:	00          	.byte	0x00
      GetTensorShape(op_context.input1),
   bfe50:	4621      	mov	r1, r4
   bfe52:	a805      	add	r0, sp, #20
   bfe54:	f7f6 fd59 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   bfe58:	b104      	cbz	r4, bfe5c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   bfe5a:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfe5c:	4629      	mov	r1, r5
   bfe5e:	a80a      	add	r0, sp, #40	; 0x28
   bfe60:	f7f6 fd53 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfe64:	b105      	cbz	r5, bfe68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5c>
   bfe66:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfe68:	af0f      	add	r7, sp, #60	; 0x3c
   bfe6a:	4631      	mov	r1, r6
   bfe6c:	4638      	mov	r0, r7
   bfe6e:	f7f6 fd4c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfe72:	4b4b      	ldr	r3, [pc, #300]	; (bffa0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   bfe74:	9302      	str	r3, [sp, #8]
   bfe76:	6873      	ldr	r3, [r6, #4]
   bfe78:	aa0a      	add	r2, sp, #40	; 0x28
   bfe7a:	e9cd 7300 	strd	r7, r3, [sp]
   bfe7e:	4621      	mov	r1, r4
   bfe80:	462b      	mov	r3, r5
   bfe82:	a805      	add	r0, sp, #20
   bfe84:	f7ff fd8e 	bl	bf9a4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   bfe88:	4638      	mov	r0, r7
   bfe8a:	f7f6 fa9a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   bfe8e:	a80a      	add	r0, sp, #40	; 0x28
   bfe90:	f7f6 fa97 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   bfe94:	a805      	add	r0, sp, #20
   bfe96:	f7f6 fa94 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   bfe9a:	2000      	movs	r0, #0
}
   bfe9c:	b015      	add	sp, #84	; 0x54
   bfe9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      GetTensorShape(op_context.input1),
   bfea2:	4621      	mov	r1, r4
   bfea4:	a805      	add	r0, sp, #20
   bfea6:	f7f6 fd30 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfeaa:	b104      	cbz	r4, bfeae <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa2>
   bfeac:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfeae:	4629      	mov	r1, r5
   bfeb0:	a80a      	add	r0, sp, #40	; 0x28
   bfeb2:	f7f6 fd2a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfeb6:	b105      	cbz	r5, bfeba <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xae>
   bfeb8:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfeba:	af0f      	add	r7, sp, #60	; 0x3c
   bfebc:	4631      	mov	r1, r6
   bfebe:	4638      	mov	r0, r7
   bfec0:	f7f6 fd23 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfec4:	4b37      	ldr	r3, [pc, #220]	; (bffa4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   bfec6:	9302      	str	r3, [sp, #8]
   bfec8:	6873      	ldr	r3, [r6, #4]
   bfeca:	aa0a      	add	r2, sp, #40	; 0x28
   bfecc:	e9cd 7300 	strd	r7, r3, [sp]
   bfed0:	4621      	mov	r1, r4
   bfed2:	462b      	mov	r3, r5
   bfed4:	a805      	add	r0, sp, #20
   bfed6:	f7ff fdd7 	bl	bfa88 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bfeda:	e7d5      	b.n	bfe88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bfedc:	4621      	mov	r1, r4
   bfede:	a805      	add	r0, sp, #20
   bfee0:	f7f6 fd13 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfee4:	b104      	cbz	r4, bfee8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xdc>
   bfee6:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bfee8:	4629      	mov	r1, r5
   bfeea:	a80a      	add	r0, sp, #40	; 0x28
   bfeec:	f7f6 fd0d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bfef0:	b105      	cbz	r5, bfef4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe8>
   bfef2:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bfef4:	af0f      	add	r7, sp, #60	; 0x3c
   bfef6:	4631      	mov	r1, r6
   bfef8:	4638      	mov	r0, r7
   bfefa:	f7f6 fd06 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bfefe:	4b2a      	ldr	r3, [pc, #168]	; (bffa8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   bff00:	9302      	str	r3, [sp, #8]
   bff02:	6873      	ldr	r3, [r6, #4]
   bff04:	aa0a      	add	r2, sp, #40	; 0x28
   bff06:	e9cd 7300 	strd	r7, r3, [sp]
   bff0a:	4621      	mov	r1, r4
   bff0c:	462b      	mov	r3, r5
   bff0e:	a805      	add	r0, sp, #20
   bff10:	f7ff fe26 	bl	bfb60 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bff14:	e7b8      	b.n	bfe88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bff16:	4621      	mov	r1, r4
   bff18:	a805      	add	r0, sp, #20
   bff1a:	f7f6 fcf6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff1e:	b104      	cbz	r4, bff22 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x116>
   bff20:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bff22:	4629      	mov	r1, r5
   bff24:	a80a      	add	r0, sp, #40	; 0x28
   bff26:	f7f6 fcf0 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff2a:	b105      	cbz	r5, bff2e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x122>
   bff2c:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bff2e:	af0f      	add	r7, sp, #60	; 0x3c
   bff30:	4631      	mov	r1, r6
   bff32:	4638      	mov	r0, r7
   bff34:	f7f6 fce9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bff38:	4b1c      	ldr	r3, [pc, #112]	; (bffac <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   bff3a:	9302      	str	r3, [sp, #8]
   bff3c:	6873      	ldr	r3, [r6, #4]
   bff3e:	aa0a      	add	r2, sp, #40	; 0x28
   bff40:	e9cd 7300 	strd	r7, r3, [sp]
   bff44:	4621      	mov	r1, r4
   bff46:	462b      	mov	r3, r5
   bff48:	a805      	add	r0, sp, #20
   bff4a:	f7ff fe75 	bl	bfc38 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bff4e:	e79b      	b.n	bfe88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   bff50:	4621      	mov	r1, r4
   bff52:	a805      	add	r0, sp, #20
   bff54:	f7f6 fcd9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff58:	b104      	cbz	r4, bff5c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x150>
   bff5a:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   bff5c:	4629      	mov	r1, r5
   bff5e:	a80a      	add	r0, sp, #40	; 0x28
   bff60:	f7f6 fcd3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   bff64:	b105      	cbz	r5, bff68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x15c>
   bff66:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   bff68:	af0f      	add	r7, sp, #60	; 0x3c
   bff6a:	4631      	mov	r1, r6
   bff6c:	4638      	mov	r0, r7
   bff6e:	f7f6 fccc 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   bff72:	4b0f      	ldr	r3, [pc, #60]	; (bffb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   bff74:	9302      	str	r3, [sp, #8]
   bff76:	6873      	ldr	r3, [r6, #4]
   bff78:	aa0a      	add	r2, sp, #40	; 0x28
   bff7a:	e9cd 7300 	strd	r7, r3, [sp]
   bff7e:	4621      	mov	r1, r4
   bff80:	462b      	mov	r3, r5
   bff82:	a805      	add	r0, sp, #20
   bff84:	f7ff fec4 	bl	bfd10 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   bff88:	e77e      	b.n	bfe88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
        context->ReportError(
   bff8a:	697c      	ldr	r4, [r7, #20]
   bff8c:	f7f4 fdfa 	bl	b4b84 <TfLiteTypeGetName>
   bff90:	f819 3008 	ldrb.w	r3, [r9, r8]
   bff94:	4907      	ldr	r1, [pc, #28]	; (bffb4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a8>)
   bff96:	4602      	mov	r2, r0
   bff98:	4638      	mov	r0, r7
   bff9a:	47a0      	blx	r4
        return kTfLiteError;
   bff9c:	2001      	movs	r0, #1
   bff9e:	e77d      	b.n	bfe9c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x90>
   bffa0:	000bf953 	.word	0x000bf953
   bffa4:	000bf963 	.word	0x000bf963
   bffa8:	000bf96b 	.word	0x000bf96b
   bffac:	000bf973 	.word	0x000bf973
   bffb0:	000bf97b 	.word	0x000bf97b
   bffb4:	000c8d40 	.word	0x000c8d40

000bffb8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bffb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bffbc:	680b      	ldr	r3, [r1, #0]
   bffbe:	f8d0 9008 	ldr.w	r9, [r0, #8]
   bffc2:	685c      	ldr	r4, [r3, #4]
   bffc4:	689d      	ldr	r5, [r3, #8]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bffc6:	684b      	ldr	r3, [r1, #4]
   bffc8:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   bffca:	f04f 0838 	mov.w	r8, #56	; 0x38
   bffce:	fb08 9404 	mla	r4, r8, r4, r9
   bffd2:	fb08 9505 	mla	r5, r8, r5, r9
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   bffd6:	fb08 f803 	mul.w	r8, r8, r3
   bffda:	4607      	mov	r7, r0
    switch (op_context.output->type) {
   bffdc:	f819 0008 	ldrb.w	r0, [r9, r8]
   bffe0:	1e43      	subs	r3, r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bffe2:	b095      	sub	sp, #84	; 0x54
   bffe4:	eb09 0608 	add.w	r6, r9, r8
   bffe8:	2b08      	cmp	r3, #8
   bffea:	f200 80a4 	bhi.w	c0136 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17e>
   bffee:	e8df f003 	tbb	[pc, r3]
   bfff2:	6805      	.short	0x6805
   bfff4:	a2a2852e 	.word	0xa2a2852e
   bfff8:	a2a2      	.short	0xa2a2
   bfffa:	4b          	.byte	0x4b
   bfffb:	00          	.byte	0x00
      GetTensorShape(op_context.input1),
   bfffc:	4621      	mov	r1, r4
   bfffe:	a805      	add	r0, sp, #20
   c0000:	f7f6 fc83 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0004:	b104      	cbz	r4, c0008 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   c0006:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c0008:	4629      	mov	r1, r5
   c000a:	a80a      	add	r0, sp, #40	; 0x28
   c000c:	f7f6 fc7d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0010:	b105      	cbz	r5, c0014 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5c>
   c0012:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c0014:	af0f      	add	r7, sp, #60	; 0x3c
   c0016:	4631      	mov	r1, r6
   c0018:	4638      	mov	r0, r7
   c001a:	f7f6 fc76 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c001e:	4b4b      	ldr	r3, [pc, #300]	; (c014c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   c0020:	9302      	str	r3, [sp, #8]
   c0022:	6873      	ldr	r3, [r6, #4]
   c0024:	aa0a      	add	r2, sp, #40	; 0x28
   c0026:	e9cd 7300 	strd	r7, r3, [sp]
   c002a:	4621      	mov	r1, r4
   c002c:	462b      	mov	r3, r5
   c002e:	a805      	add	r0, sp, #20
   c0030:	f7ff fcb8 	bl	bf9a4 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIfPFfffEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   c0034:	4638      	mov	r0, r7
   c0036:	f7f6 f9c4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   c003a:	a80a      	add	r0, sp, #40	; 0x28
   c003c:	f7f6 f9c1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   c0040:	a805      	add	r0, sp, #20
   c0042:	f7f6 f9be 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c0046:	2000      	movs	r0, #0
}
   c0048:	b015      	add	sp, #84	; 0x54
   c004a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      GetTensorShape(op_context.input1),
   c004e:	4621      	mov	r1, r4
   c0050:	a805      	add	r0, sp, #20
   c0052:	f7f6 fc5a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0056:	b104      	cbz	r4, c005a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa2>
   c0058:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c005a:	4629      	mov	r1, r5
   c005c:	a80a      	add	r0, sp, #40	; 0x28
   c005e:	f7f6 fc54 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0062:	b105      	cbz	r5, c0066 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xae>
   c0064:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c0066:	af0f      	add	r7, sp, #60	; 0x3c
   c0068:	4631      	mov	r1, r6
   c006a:	4638      	mov	r0, r7
   c006c:	f7f6 fc4d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c0070:	4b37      	ldr	r3, [pc, #220]	; (c0150 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   c0072:	9302      	str	r3, [sp, #8]
   c0074:	6873      	ldr	r3, [r6, #4]
   c0076:	aa0a      	add	r2, sp, #40	; 0x28
   c0078:	e9cd 7300 	strd	r7, r3, [sp]
   c007c:	4621      	mov	r1, r4
   c007e:	462b      	mov	r3, r5
   c0080:	a805      	add	r0, sp, #20
   c0082:	f7ff fd01 	bl	bfa88 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIhPFhhhEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c0086:	e7d5      	b.n	c0034 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c0088:	4621      	mov	r1, r4
   c008a:	a805      	add	r0, sp, #20
   c008c:	f7f6 fc3d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0090:	b104      	cbz	r4, c0094 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xdc>
   c0092:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c0094:	4629      	mov	r1, r5
   c0096:	a80a      	add	r0, sp, #40	; 0x28
   c0098:	f7f6 fc37 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c009c:	b105      	cbz	r5, c00a0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe8>
   c009e:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c00a0:	af0f      	add	r7, sp, #60	; 0x3c
   c00a2:	4631      	mov	r1, r6
   c00a4:	4638      	mov	r0, r7
   c00a6:	f7f6 fc30 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c00aa:	4b2a      	ldr	r3, [pc, #168]	; (c0154 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   c00ac:	9302      	str	r3, [sp, #8]
   c00ae:	6873      	ldr	r3, [r6, #4]
   c00b0:	aa0a      	add	r2, sp, #40	; 0x28
   c00b2:	e9cd 7300 	strd	r7, r3, [sp]
   c00b6:	4621      	mov	r1, r4
   c00b8:	462b      	mov	r3, r5
   c00ba:	a805      	add	r0, sp, #20
   c00bc:	f7ff fd50 	bl	bfb60 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIaPFaaaEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c00c0:	e7b8      	b.n	c0034 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c00c2:	4621      	mov	r1, r4
   c00c4:	a805      	add	r0, sp, #20
   c00c6:	f7f6 fc20 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c00ca:	b104      	cbz	r4, c00ce <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x116>
   c00cc:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c00ce:	4629      	mov	r1, r5
   c00d0:	a80a      	add	r0, sp, #40	; 0x28
   c00d2:	f7f6 fc1a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c00d6:	b105      	cbz	r5, c00da <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x122>
   c00d8:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c00da:	af0f      	add	r7, sp, #60	; 0x3c
   c00dc:	4631      	mov	r1, r6
   c00de:	4638      	mov	r0, r7
   c00e0:	f7f6 fc13 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c00e4:	4b1c      	ldr	r3, [pc, #112]	; (c0158 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   c00e6:	9302      	str	r3, [sp, #8]
   c00e8:	6873      	ldr	r3, [r6, #4]
   c00ea:	aa0a      	add	r2, sp, #40	; 0x28
   c00ec:	e9cd 7300 	strd	r7, r3, [sp]
   c00f0:	4621      	mov	r1, r4
   c00f2:	462b      	mov	r3, r5
   c00f4:	a805      	add	r0, sp, #20
   c00f6:	f7ff fd9f 	bl	bfc38 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIlPFlllEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c00fa:	e79b      	b.n	c0034 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
      GetTensorShape(op_context.input1),
   c00fc:	4621      	mov	r1, r4
   c00fe:	a805      	add	r0, sp, #20
   c0100:	f7f6 fc03 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0104:	b104      	cbz	r4, c0108 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x150>
   c0106:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(op_context.input2),
   c0108:	4629      	mov	r1, r5
   c010a:	a80a      	add	r0, sp, #40	; 0x28
   c010c:	f7f6 fbfd 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0110:	b105      	cbz	r5, c0114 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x15c>
   c0112:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(op_context.output),
   c0114:	af0f      	add	r7, sp, #60	; 0x3c
   c0116:	4631      	mov	r1, r6
   c0118:	4638      	mov	r0, r7
   c011a:	f7f6 fbf6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaximumMinimumBroadcast4DSlow(
   c011e:	4b0f      	ldr	r3, [pc, #60]	; (c015c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   c0120:	9302      	str	r3, [sp, #8]
   c0122:	6873      	ldr	r3, [r6, #4]
   c0124:	aa0a      	add	r2, sp, #40	; 0x28
   c0126:	e9cd 7300 	strd	r7, r3, [sp]
   c012a:	4621      	mov	r1, r4
   c012c:	462b      	mov	r3, r5
   c012e:	a805      	add	r0, sp, #20
   c0130:	f7ff fdee 	bl	bfd10 <_ZN6tflite13reference_ops29MaximumMinimumBroadcast4DSlowIxPFxxxEEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   c0134:	e77e      	b.n	c0034 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
        context->ReportError(
   c0136:	697c      	ldr	r4, [r7, #20]
   c0138:	f7f4 fd24 	bl	b4b84 <TfLiteTypeGetName>
   c013c:	f819 3008 	ldrb.w	r3, [r9, r8]
   c0140:	4907      	ldr	r1, [pc, #28]	; (c0160 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a8>)
   c0142:	4602      	mov	r2, r0
   c0144:	4638      	mov	r0, r7
   c0146:	47a0      	blx	r4
        return kTfLiteError;
   c0148:	2001      	movs	r0, #1
   c014a:	e77d      	b.n	c0048 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x90>
   c014c:	000bf915 	.word	0x000bf915
   c0150:	000bf925 	.word	0x000bf925
   c0154:	000bf92d 	.word	0x000bf92d
   c0158:	000bf935 	.word	0x000bf935
   c015c:	000bf93d 	.word	0x000bf93d
   c0160:	000c8d40 	.word	0x000c8d40

000c0164 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c0164:	2000      	movs	r0, #0
   c0166:	4770      	bx	lr

000c0168 <_ZN6tflite3ops5micro15fully_connected4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c0168:	4770      	bx	lr

000c016a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c016a:	2000      	movs	r0, #0
   c016c:	4770      	bx	lr

000c016e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   c016e:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   c0170:	2900      	cmp	r1, #0
  inline int32 DimensionsCount() const { return size_; }
   c0172:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   c0174:	db01      	blt.n	c017a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   c0176:	42a1      	cmp	r1, r4
   c0178:	db01      	blt.n	c017e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   c017a:	f004 fb8f 	bl	c489c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c017e:	2c04      	cmp	r4, #4
   c0180:	bfcc      	ite	gt
   c0182:	6843      	ldrgt	r3, [r0, #4]
   c0184:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   c0186:	2200      	movs	r2, #0
  int flat_size = 1;
   c0188:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c018a:	4291      	cmp	r1, r2
   c018c:	bf18      	it	ne
   c018e:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   c0192:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c0196:	bf08      	it	eq
   c0198:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   c019a:	4294      	cmp	r4, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   c019c:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   c01a0:	dcf3      	bgt.n	c018a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   c01a2:	bd38      	pop	{r3, r4, r5, pc}

000c01a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
      GetTensorData<float>(output));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c01a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c01a8:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01ac:	680c      	ldr	r4, [r1, #0]
   c01ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
  auto* params =
   c01b2:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c01b4:	4607      	mov	r7, r0
   c01b6:	68a0      	ldr	r0, [r4, #8]
   c01b8:	2238      	movs	r2, #56	; 0x38
   c01ba:	b0d1      	sub	sp, #324	; 0x144
   c01bc:	fb02 fa00 	mul.w	sl, r2, r0
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c01c0:	68e0      	ldr	r0, [r4, #12]
  auto* params =
   c01c2:	9302      	str	r3, [sp, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01c4:	6863      	ldr	r3, [r4, #4]
  if (use_tensor) {
   c01c6:	1c44      	adds	r4, r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01c8:	fb02 f303 	mul.w	r3, r2, r3
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01cc:	bf18      	it	ne
   c01ce:	fb02 8b00 	mlane	fp, r2, r0, r8
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c01d2:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01d4:	eb08 0603 	add.w	r6, r8, r3
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c01d8:	6852      	ldr	r2, [r2, #4]
  if (data_type != kTfLiteFloat32) {
   c01da:	f818 3003 	ldrb.w	r3, [r8, r3]
   c01de:	f04f 0938 	mov.w	r9, #56	; 0x38
  return nullptr;
   c01e2:	bf08      	it	eq
   c01e4:	f04f 0b00 	moveq.w	fp, #0
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c01e8:	fb09 f902 	mul.w	r9, r9, r2
   c01ec:	2b01      	cmp	r3, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c01ee:	eb08 050a 	add.w	r5, r8, sl
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c01f2:	eb08 0409 	add.w	r4, r8, r9
   c01f6:	d022      	beq.n	c023e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9a>
    double real_multiplier = 0.0;
   c01f8:	2200      	movs	r2, #0
   c01fa:	2300      	movs	r3, #0
   c01fc:	e9cd 234a 	strd	r2, r3, [sp, #296]	; 0x128
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   c0200:	ab4a      	add	r3, sp, #296	; 0x128
   c0202:	e9cd 4300 	strd	r4, r3, [sp]
   c0206:	462a      	mov	r2, r5
   c0208:	465b      	mov	r3, fp
   c020a:	4631      	mov	r1, r6
   c020c:	4638      	mov	r0, r7
   c020e:	f7f4 fe63 	bl	b4ed8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   c0212:	b990      	cbnz	r0, c023a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
   c0214:	a945      	add	r1, sp, #276	; 0x114
   c0216:	a80e      	add	r0, sp, #56	; 0x38
   c0218:	ed9d 0b4a 	vldr	d0, [sp, #296]	; 0x128
   c021c:	f7f5 f808 	bl	b5230 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
   c0220:	9b45      	ldr	r3, [sp, #276]	; 0x114
   c0222:	425b      	negs	r3, r3
   c0224:	930f      	str	r3, [sp, #60]	; 0x3c
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   c0226:	9b02      	ldr	r3, [sp, #8]
   c0228:	7819      	ldrb	r1, [r3, #0]
   c022a:	ab11      	add	r3, sp, #68	; 0x44
   c022c:	9300      	str	r3, [sp, #0]
   c022e:	4622      	mov	r2, r4
   c0230:	ab10      	add	r3, sp, #64	; 0x40
   c0232:	4638      	mov	r0, r7
   c0234:	f7f4 feb2 	bl	b4f9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   c0238:	b108      	cbz	r0, c023e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9a>
                           output);

    default:
      context->ReportError(context, "Type %d not currently supported.",
                           filter->type);
      return kTfLiteError;
   c023a:	2001      	movs	r0, #1
   c023c:	e0ac      	b.n	c0398 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1f4>
  switch (filter->type) {  // Already know in/out types are same.
   c023e:	f818 200a 	ldrb.w	r2, [r8, sl]
   c0242:	2a03      	cmp	r2, #3
   c0244:	f000 8150 	beq.w	c04e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x344>
   c0248:	2a09      	cmp	r2, #9
   c024a:	f000 80aa 	beq.w	c03a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
   c024e:	2a01      	cmp	r2, #1
   c0250:	f040 828c 	bne.w	c076c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5c8>
      return EvalFloat(context, node, params, data, input, filter, bias,
   c0254:	9b02      	ldr	r3, [sp, #8]
   c0256:	781b      	ldrb	r3, [r3, #0]
  if (activation == kTfLiteActRelu) {
   c0258:	2b01      	cmp	r3, #1
   c025a:	d064      	beq.n	c0326 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x182>
  } else if (activation == kTfLiteActRelu6) {
   c025c:	2b03      	cmp	r3, #3
   c025e:	d067      	beq.n	c0330 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x18c>
    *activation_max = std::numeric_limits<T>::max();
   c0260:	eddf 7ab0 	vldr	s15, [pc, #704]	; c0524 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x380>
   c0264:	2b02      	cmp	r3, #2
   c0266:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   c026a:	bf18      	it	ne
   c026c:	eef0 8a67 	vmovne.f32	s17, s15
   c0270:	eddf 7aad 	vldr	s15, [pc, #692]	; c0528 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x384>
   c0274:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   c0278:	bf18      	it	ne
   c027a:	eeb0 8a67 	vmovne.f32	s16, s15
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c027e:	4631      	mov	r1, r6
   c0280:	a84a      	add	r0, sp, #296	; 0x128
   c0282:	f7f6 fb42 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0286:	6873      	ldr	r3, [r6, #4]
   c0288:	9303      	str	r3, [sp, #12]
      GetTensorShape(filter), GetTensorData<float>(filter),
   c028a:	4629      	mov	r1, r5
   c028c:	a845      	add	r0, sp, #276	; 0x114
   c028e:	f7f6 fb3c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0292:	686b      	ldr	r3, [r5, #4]
   c0294:	9304      	str	r3, [sp, #16]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c0296:	4659      	mov	r1, fp
   c0298:	a840      	add	r0, sp, #256	; 0x100
   c029a:	f7f6 fb36 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c029e:	f1bb 0f00 	cmp.w	fp, #0
   c02a2:	d001      	beq.n	c02a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
   c02a4:	f8db b004 	ldr.w	fp, [fp, #4]
   c02a8:	4621      	mov	r1, r4
   c02aa:	a83b      	add	r0, sp, #236	; 0xec
   c02ac:	f7f6 fb2d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c02b0:	b104      	cbz	r4, c02b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x110>
   c02b2:	6864      	ldr	r4, [r4, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   c02b4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  inline int32 DimensionsCount() const { return size_; }
   c02b6:	9e45      	ldr	r6, [sp, #276]	; 0x114
   c02b8:	3b01      	subs	r3, #1
   c02ba:	4619      	mov	r1, r3
   c02bc:	a83b      	add	r0, sp, #236	; 0xec
   c02be:	9302      	str	r3, [sp, #8]
   c02c0:	f7ff ff55 	bl	c016e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c02c4:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   c02c6:	9005      	str	r0, [sp, #20]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c02c8:	1eb1      	subs	r1, r6, #2
   c02ca:	aa3b      	add	r2, sp, #236	; 0xec
   c02cc:	a845      	add	r0, sp, #276	; 0x114
   c02ce:	f7f8 fd68 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c02d2:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   c02d4:	9002      	str	r0, [sp, #8]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c02d6:	a845      	add	r0, sp, #276	; 0x114
   c02d8:	f7f6 f87e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c02dc:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   c02de:	eddf 6a93 	vldr	s13, [pc, #588]	; c052c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   c02e2:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
   c02e4:	461f      	mov	r7, r3
   c02e6:	9a05      	ldr	r2, [sp, #20]
   c02e8:	42ba      	cmp	r2, r7
   c02ea:	dd48      	ble.n	c037e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1da>
   c02ec:	9a03      	ldr	r2, [sp, #12]
   c02ee:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   c02f2:	2200      	movs	r2, #0
   c02f4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c02f8:	4611      	mov	r1, r2
   c02fa:	9d02      	ldr	r5, [sp, #8]
   c02fc:	428d      	cmp	r5, r1
   c02fe:	dd39      	ble.n	c0374 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   c0300:	9d04      	ldr	r5, [sp, #16]
      float total = 0.f;
   c0302:	eddf 7a8a 	vldr	s15, [pc, #552]	; c052c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
   c0306:	eb05 0882 	add.w	r8, r5, r2, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c030a:	46d1      	mov	r9, sl
      for (int d = 0; d < accum_depth; ++d) {
   c030c:	f04f 0c00 	mov.w	ip, #0
   c0310:	4560      	cmp	r0, ip
   c0312:	dd10      	ble.n	c0336 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x192>
        total += input_data[b * accum_depth + d] *
   c0314:	ecb9 6a01 	vldmia	r9!, {s12}
                 weights_data[out_c * accum_depth + d];
   c0318:	ecb8 7a01 	vldmia	r8!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   c031c:	f10c 0c01 	add.w	ip, ip, #1
        total += input_data[b * accum_depth + d] *
   c0320:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   c0324:	e7f4      	b.n	c0310 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    *activation_max = std::numeric_limits<T>::max();
   c0326:	eddf 8a7f 	vldr	s17, [pc, #508]	; c0524 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x380>
    *activation_min = 0;
   c032a:	ed9f 8a80 	vldr	s16, [pc, #512]	; c052c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x388>
   c032e:	e7a6      	b.n	c027e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    *activation_max = 6;
   c0330:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   c0334:	e7f9      	b.n	c032a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x186>
      if (bias_data) {
   c0336:	f1bb 0f00 	cmp.w	fp, #0
   c033a:	d018      	beq.n	c036e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
        bias_value = bias_data[out_c];
   c033c:	eb0b 0c81 	add.w	ip, fp, r1, lsl #2
   c0340:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   c0344:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0348:	3101      	adds	r1, #1
	return __b;
   c034a:	eef4 7a48 	vcmp.f32	s15, s16
   c034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c0352:	bf48      	it	mi
   c0354:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
   c0358:	eef4 7a68 	vcmp.f32	s15, s17
   c035c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c0360:	bfc8      	it	gt
   c0362:	eef0 7a68 	vmovgt.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   c0366:	ecee 7a01 	vstmia	lr!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c036a:	4402      	add	r2, r0
   c036c:	e7c5      	b.n	c02fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x156>
      float bias_value = 0.0f;
   c036e:	eeb0 7a66 	vmov.f32	s14, s13
   c0372:	e7e7      	b.n	c0344 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
  for (int b = 0; b < batches; ++b) {
   c0374:	9a02      	ldr	r2, [sp, #8]
   c0376:	3701      	adds	r7, #1
   c0378:	4416      	add	r6, r2
   c037a:	4403      	add	r3, r0
   c037c:	e7b3      	b.n	c02e6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x142>
   c037e:	a83b      	add	r0, sp, #236	; 0xec
   c0380:	f7f6 f81f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c0384:	a840      	add	r0, sp, #256	; 0x100
   c0386:	f7f6 f81c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c038a:	a845      	add	r0, sp, #276	; 0x114
   c038c:	f7f6 f819 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c0390:	a84a      	add	r0, sp, #296	; 0x128
      TF_LITE_FULLY_CONNECTED(int16_t);
   c0392:	f7f6 f816 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c0396:	2000      	movs	r0, #0
  }
  return kTfLiteOk;
}
   c0398:	b051      	add	sp, #324	; 0x144
   c039a:	ecbd 8b02 	vpop	{d8}
   c039e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.input_offset = -input->params.zero_point;
   c03a2:	6933      	ldr	r3, [r6, #16]
   c03a4:	9305      	str	r3, [sp, #20]
  op_params.weights_offset = -filter->params.zero_point;
   c03a6:	692b      	ldr	r3, [r5, #16]
   c03a8:	9306      	str	r3, [sp, #24]
  op_params.output_offset = output->params.zero_point;
   c03aa:	6923      	ldr	r3, [r4, #16]
   c03ac:	9307      	str	r3, [sp, #28]
  op_params.output_multiplier = data->output_multiplier;
   c03ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c03b0:	ee08 3a10 	vmov	s16, r3
  op_params.output_shift = -data->output_shift;
   c03b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c03b6:	425b      	negs	r3, r3
   c03b8:	ee08 3a90 	vmov	s17, r3
  op_params.quantized_activation_min = data->output_activation_min;
   c03bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c03be:	9302      	str	r3, [sp, #8]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c03c0:	4631      	mov	r1, r6
  op_params.quantized_activation_max = data->output_activation_max;
   c03c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c03c4:	9303      	str	r3, [sp, #12]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c03c6:	a813      	add	r0, sp, #76	; 0x4c
   c03c8:	f7f6 fa9f 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c03cc:	6873      	ldr	r3, [r6, #4]
   c03ce:	9308      	str	r3, [sp, #32]
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   c03d0:	4629      	mov	r1, r5
   c03d2:	a818      	add	r0, sp, #96	; 0x60
   c03d4:	f7f6 fa99 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c03d8:	686b      	ldr	r3, [r5, #4]
   c03da:	9309      	str	r3, [sp, #36]	; 0x24
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c03dc:	4659      	mov	r1, fp
   c03de:	a81d      	add	r0, sp, #116	; 0x74
   c03e0:	f7f6 fa93 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c03e4:	f1bb 0f00 	cmp.w	fp, #0
   c03e8:	d001      	beq.n	c03ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
   c03ea:	f8db b004 	ldr.w	fp, [fp, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   c03ee:	4621      	mov	r1, r4
   c03f0:	a822      	add	r0, sp, #136	; 0x88
   c03f2:	f7f6 fa8a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c03f6:	6863      	ldr	r3, [r4, #4]
   c03f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
   c03fa:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   c03fc:	2c01      	cmp	r4, #1
   c03fe:	dc01      	bgt.n	c0404 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x260>
   c0400:	f004 fa4c 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   c0404:	9b22      	ldr	r3, [sp, #136]	; 0x88
   c0406:	2b02      	cmp	r3, #2
   c0408:	d1fa      	bne.n	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c040a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   c040e:	4293      	cmp	r3, r2
   c0410:	dcf6      	bgt.n	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   c0412:	2100      	movs	r1, #0
   c0414:	a822      	add	r0, sp, #136	; 0x88
   c0416:	f7f5 ffdf 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   c041a:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   c041c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_depth = output_shape.Dims(1);
   c041e:	a822      	add	r0, sp, #136	; 0x88
   c0420:	f7f5 ffda 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   c0424:	1ea1      	subs	r1, r4, #2
  const int output_depth = output_shape.Dims(1);
   c0426:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   c0428:	a818      	add	r0, sp, #96	; 0x60
   c042a:	f7f5 ffd5 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c042e:	4286      	cmp	r6, r0
   c0430:	dce6      	bgt.n	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c0432:	1e61      	subs	r1, r4, #1
   c0434:	a818      	add	r0, sp, #96	; 0x60
   c0436:	f7f5 ffcf 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c043a:	2400      	movs	r4, #0
   c043c:	4605      	mov	r5, r0
   c043e:	46a1      	mov	r9, r4
  for (int b = 0; b < batches; ++b) {
   c0440:	46a2      	mov	sl, r4
   c0442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c0444:	4553      	cmp	r3, sl
   c0446:	dd44      	ble.n	c04d2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x32e>
   c0448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c044a:	2700      	movs	r7, #0
   c044c:	444b      	add	r3, r9
   c044e:	9304      	str	r3, [sp, #16]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0450:	46b8      	mov	r8, r7
   c0452:	4546      	cmp	r6, r8
   c0454:	dd38      	ble.n	c04c8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x324>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   c0456:	9b08      	ldr	r3, [sp, #32]
   c0458:	eb03 0e04 	add.w	lr, r3, r4
   c045c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c045e:	eb03 0c07 	add.w	ip, r3, r7
      int32 acc = 0;
   c0462:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   c0464:	461a      	mov	r2, r3
   c0466:	4295      	cmp	r5, r2
   c0468:	dd0f      	ble.n	c048a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
        int32 input_val = input_data[b * accum_depth + d];
   c046a:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c046e:	9806      	ldr	r0, [sp, #24]
        int32 input_val = input_data[b * accum_depth + d];
   c0470:	910c      	str	r1, [sp, #48]	; 0x30
        int32 filter_val = filter_data[out_c * accum_depth + d];
   c0472:	f91c 1b01 	ldrsb.w	r1, [ip], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c0476:	1a09      	subs	r1, r1, r0
   c0478:	910d      	str	r1, [sp, #52]	; 0x34
   c047a:	9805      	ldr	r0, [sp, #20]
   c047c:	990c      	ldr	r1, [sp, #48]	; 0x30
   c047e:	1a08      	subs	r0, r1, r0
   c0480:	990d      	ldr	r1, [sp, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
   c0482:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c0484:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   c0488:	e7ed      	b.n	c0466 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c2>
      }
      if (bias_data) {
   c048a:	f1bb 0f00 	cmp.w	fp, #0
   c048e:	d002      	beq.n	c0496 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
        acc += bias_data[out_c];
   c0490:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   c0494:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   c0496:	4618      	mov	r0, r3
   c0498:	ee18 2a90 	vmov	r2, s17
   c049c:	ee18 1a10 	vmov	r1, s16
   c04a0:	f7f9 ff92 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      acc += output_offset;
   c04a4:	9b07      	ldr	r3, [sp, #28]
   c04a6:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   c04a8:	9b02      	ldr	r3, [sp, #8]
   c04aa:	4298      	cmp	r0, r3
   c04ac:	bfb8      	it	lt
   c04ae:	4618      	movlt	r0, r3
   c04b0:	9b03      	ldr	r3, [sp, #12]
   c04b2:	4298      	cmp	r0, r3
   c04b4:	bfa8      	it	ge
   c04b6:	4618      	movge	r0, r3
   c04b8:	9b04      	ldr	r3, [sp, #16]
   c04ba:	f803 0b01 	strb.w	r0, [r3], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c04be:	f108 0801 	add.w	r8, r8, #1
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   c04c2:	9304      	str	r3, [sp, #16]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c04c4:	442f      	add	r7, r5
   c04c6:	e7c4      	b.n	c0452 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ae>
  for (int b = 0; b < batches; ++b) {
   c04c8:	f10a 0a01 	add.w	sl, sl, #1
   c04cc:	44b1      	add	r9, r6
   c04ce:	442c      	add	r4, r5
   c04d0:	e7b7      	b.n	c0442 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
   c04d2:	a822      	add	r0, sp, #136	; 0x88
   c04d4:	f7f5 ff75 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c04d8:	a81d      	add	r0, sp, #116	; 0x74
   c04da:	f7f5 ff72 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   c04de:	a818      	add	r0, sp, #96	; 0x60
   c04e0:	f7f5 ff6f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   c04e4:	a813      	add	r0, sp, #76	; 0x4c
   c04e6:	e754      	b.n	c0392 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
  const int32_t input_offset = -input->params.zero_point;
   c04e8:	6933      	ldr	r3, [r6, #16]
   c04ea:	9304      	str	r3, [sp, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   c04ec:	692b      	ldr	r3, [r5, #16]
   c04ee:	9305      	str	r3, [sp, #20]
  op_params.output_multiplier = data->output_multiplier;
   c04f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const int32_t output_offset = output->params.zero_point;
   c04f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
  op_params.output_multiplier = data->output_multiplier;
   c04f6:	ee08 3a10 	vmov	s16, r3
  op_params.output_shift = -data->output_shift;
   c04fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c04fc:	425b      	negs	r3, r3
   c04fe:	ee08 3a90 	vmov	s17, r3
  op_params.quantized_activation_min = data->output_activation_min;
   c0502:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c0504:	9302      	str	r3, [sp, #8]
  op_params.quantized_activation_max = data->output_activation_max;
   c0506:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c0508:	9303      	str	r3, [sp, #12]
  switch (output->type) {
   c050a:	f818 3009 	ldrb.w	r3, [r8, r9]
   c050e:	2b03      	cmp	r3, #3
   c0510:	d010      	beq.n	c0534 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x390>
   c0512:	2b07      	cmp	r3, #7
   c0514:	f000 809e 	beq.w	c0654 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4b0>
      context->ReportError(
   c0518:	697b      	ldr	r3, [r7, #20]
   c051a:	4905      	ldr	r1, [pc, #20]	; (c0530 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x38c>)
   c051c:	4638      	mov	r0, r7
   c051e:	4798      	blx	r3
      return kTfLiteError;
   c0520:	e68b      	b.n	c023a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
   c0522:	bf00      	nop
   c0524:	7f7fffff 	.word	0x7f7fffff
   c0528:	ff7fffff 	.word	0xff7fffff
   c052c:	00000000 	.word	0x00000000
   c0530:	000c8d72 	.word	0x000c8d72
      TF_LITE_FULLY_CONNECTED(uint8_t);
   c0534:	4631      	mov	r1, r6
   c0536:	a827      	add	r0, sp, #156	; 0x9c
   c0538:	f7f6 f9e7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c053c:	6873      	ldr	r3, [r6, #4]
   c053e:	9308      	str	r3, [sp, #32]
   c0540:	4629      	mov	r1, r5
   c0542:	a82c      	add	r0, sp, #176	; 0xb0
   c0544:	f7f6 f9e1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0548:	686b      	ldr	r3, [r5, #4]
   c054a:	9309      	str	r3, [sp, #36]	; 0x24
   c054c:	4659      	mov	r1, fp
   c054e:	a831      	add	r0, sp, #196	; 0xc4
   c0550:	f7f6 f9db 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0554:	f1bb 0f00 	cmp.w	fp, #0
   c0558:	d001      	beq.n	c055e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3ba>
   c055a:	f8db b004 	ldr.w	fp, [fp, #4]
   c055e:	4621      	mov	r1, r4
   c0560:	a836      	add	r0, sp, #216	; 0xd8
   c0562:	f7f6 f9d2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0566:	6863      	ldr	r3, [r4, #4]
   c0568:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   c056a:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   c056c:	2c01      	cmp	r4, #1
   c056e:	f77f af47 	ble.w	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
   c0572:	9b36      	ldr	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   c0574:	2b00      	cmp	r3, #0
   c0576:	f77f af43 	ble.w	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c057a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   c057e:	428a      	cmp	r2, r1
   c0580:	f73f af3e 	bgt.w	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c0584:	3b01      	subs	r3, #1
   c0586:	4619      	mov	r1, r3
   c0588:	a836      	add	r0, sp, #216	; 0xd8
   c058a:	9306      	str	r3, [sp, #24]
   c058c:	f7ff fdef 	bl	c016e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0590:	9b06      	ldr	r3, [sp, #24]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c0592:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c0594:	1ea1      	subs	r1, r4, #2
   c0596:	aa36      	add	r2, sp, #216	; 0xd8
   c0598:	a82c      	add	r0, sp, #176	; 0xb0
   c059a:	f7f8 fc02 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c059e:	1e61      	subs	r1, r4, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c05a0:	9006      	str	r0, [sp, #24]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c05a2:	a82c      	add	r0, sp, #176	; 0xb0
   c05a4:	f7f5 ff18 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c05a8:	2400      	movs	r4, #0
   c05aa:	4605      	mov	r5, r0
   c05ac:	46a0      	mov	r8, r4
  for (int b = 0; b < batches; ++b) {
   c05ae:	46a1      	mov	r9, r4
   c05b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c05b2:	454b      	cmp	r3, r9
   c05b4:	dd43      	ble.n	c063e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x49a>
   c05b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c05b8:	2600      	movs	r6, #0
   c05ba:	4443      	add	r3, r8
   c05bc:	9307      	str	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c05be:	4637      	mov	r7, r6
   c05c0:	9b06      	ldr	r3, [sp, #24]
   c05c2:	42bb      	cmp	r3, r7
   c05c4:	dd35      	ble.n	c0632 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x48e>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   c05c6:	9b08      	ldr	r3, [sp, #32]
   c05c8:	eb03 0e04 	add.w	lr, r3, r4
   c05cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
      int32 acc = 0;
   c05ce:	2000      	movs	r0, #0
   c05d0:	eb03 0c06 	add.w	ip, r3, r6
      for (int d = 0; d < accum_depth; ++d) {
   c05d4:	4603      	mov	r3, r0
   c05d6:	429d      	cmp	r5, r3
   c05d8:	dd0f      	ble.n	c05fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x456>
        int32 input_val = input_data[b * accum_depth + d];
        int32 filter_val = filter_data[out_c * accum_depth + d];
   c05da:	f81c 1b01 	ldrb.w	r1, [ip], #1
   c05de:	910c      	str	r1, [sp, #48]	; 0x30
        int32 input_val = input_data[b * accum_depth + d];
   c05e0:	f81e 2b01 	ldrb.w	r2, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c05e4:	9904      	ldr	r1, [sp, #16]
   c05e6:	1a52      	subs	r2, r2, r1
   c05e8:	920d      	str	r2, [sp, #52]	; 0x34
   c05ea:	9905      	ldr	r1, [sp, #20]
   c05ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   c05ee:	1a51      	subs	r1, r2, r1
   c05f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
   c05f2:	3301      	adds	r3, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   c05f4:	fb01 0002 	mla	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   c05f8:	e7ed      	b.n	c05d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x432>
      }
      if (bias_data) {
   c05fa:	f1bb 0f00 	cmp.w	fp, #0
   c05fe:	d002      	beq.n	c0606 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x462>
        acc += bias_data[out_c];
   c0600:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
   c0604:	4418      	add	r0, r3
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   c0606:	ee18 2a90 	vmov	r2, s17
   c060a:	ee18 1a10 	vmov	r1, s16
   c060e:	f7f9 fedb 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      acc += output_offset;
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c0612:	9b02      	ldr	r3, [sp, #8]
      acc += output_offset;
   c0614:	4450      	add	r0, sl
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c0616:	4298      	cmp	r0, r3
   c0618:	bfb8      	it	lt
   c061a:	4618      	movlt	r0, r3
   c061c:	9b03      	ldr	r3, [sp, #12]
   c061e:	4298      	cmp	r0, r3
   c0620:	bfa8      	it	ge
   c0622:	4618      	movge	r0, r3
   c0624:	9b07      	ldr	r3, [sp, #28]
   c0626:	f803 0b01 	strb.w	r0, [r3], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c062a:	3701      	adds	r7, #1
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   c062c:	9307      	str	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c062e:	442e      	add	r6, r5
   c0630:	e7c6      	b.n	c05c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  for (int b = 0; b < batches; ++b) {
   c0632:	9b06      	ldr	r3, [sp, #24]
   c0634:	f109 0901 	add.w	r9, r9, #1
   c0638:	4498      	add	r8, r3
   c063a:	442c      	add	r4, r5
   c063c:	e7b8      	b.n	c05b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>
   c063e:	a836      	add	r0, sp, #216	; 0xd8
   c0640:	f7f5 febf 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c0644:	a831      	add	r0, sp, #196	; 0xc4
   c0646:	f7f5 febc 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c064a:	a82c      	add	r0, sp, #176	; 0xb0
   c064c:	f7f5 feb9 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c0650:	a827      	add	r0, sp, #156	; 0x9c
   c0652:	e69e      	b.n	c0392 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      TF_LITE_FULLY_CONNECTED(int16_t);
   c0654:	4631      	mov	r1, r6
   c0656:	a83b      	add	r0, sp, #236	; 0xec
   c0658:	f7f6 f957 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c065c:	6873      	ldr	r3, [r6, #4]
   c065e:	9307      	str	r3, [sp, #28]
   c0660:	4629      	mov	r1, r5
   c0662:	a840      	add	r0, sp, #256	; 0x100
   c0664:	f7f6 f951 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0668:	686b      	ldr	r3, [r5, #4]
   c066a:	9308      	str	r3, [sp, #32]
   c066c:	4659      	mov	r1, fp
   c066e:	a845      	add	r0, sp, #276	; 0x114
   c0670:	f7f6 f94b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c0674:	f1bb 0f00 	cmp.w	fp, #0
   c0678:	d001      	beq.n	c067e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4da>
   c067a:	f8db b004 	ldr.w	fp, [fp, #4]
   c067e:	4621      	mov	r1, r4
   c0680:	a84a      	add	r0, sp, #296	; 0x128
   c0682:	f7f6 f942 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0686:	6863      	ldr	r3, [r4, #4]
   c0688:	9309      	str	r3, [sp, #36]	; 0x24
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c068a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   c068e:	4293      	cmp	r3, r2
   c0690:	f73f aeb6 	bgt.w	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  TFLITE_DCHECK_EQ(output_offset, 0);
   c0694:	f1ba 0f00 	cmp.w	sl, #0
   c0698:	f47f aeb2 	bne.w	c0400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
  const int32_t input_offset = -input->params.zero_point;
   c069c:	9b04      	ldr	r3, [sp, #16]
   c069e:	9c40      	ldr	r4, [sp, #256]	; 0x100
   c06a0:	425b      	negs	r3, r3
   c06a2:	9306      	str	r3, [sp, #24]
  const int32_t filter_offset = -filter->params.zero_point;
   c06a4:	9b05      	ldr	r3, [sp, #20]
   c06a6:	425b      	negs	r3, r3
   c06a8:	9305      	str	r3, [sp, #20]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c06aa:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   c06ac:	3b01      	subs	r3, #1
   c06ae:	4619      	mov	r1, r3
   c06b0:	a84a      	add	r0, sp, #296	; 0x128
   c06b2:	9304      	str	r3, [sp, #16]
   c06b4:	f7ff fd5b 	bl	c016e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c06b8:	9b04      	ldr	r3, [sp, #16]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   c06ba:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c06bc:	1ea1      	subs	r1, r4, #2
   c06be:	aa4a      	add	r2, sp, #296	; 0x128
   c06c0:	a840      	add	r0, sp, #256	; 0x100
   c06c2:	f7f8 fb6e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c06c6:	1e61      	subs	r1, r4, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   c06c8:	9004      	str	r0, [sp, #16]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c06ca:	a840      	add	r0, sp, #256	; 0x100
   c06cc:	f7f5 fe84 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
   c06d0:	4655      	mov	r5, sl
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   c06d2:	4604      	mov	r4, r0
   c06d4:	4657      	mov	r7, sl
   c06d6:	46d0      	mov	r8, sl
  for (int b = 0; b < batches; ++b) {
   c06d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c06da:	42ab      	cmp	r3, r5
   c06dc:	dd3b      	ble.n	c0756 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b2>
   c06de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c06e0:	2600      	movs	r6, #0
   c06e2:	eb03 0a48 	add.w	sl, r3, r8, lsl #1
  for (int b = 0; b < batches; ++b) {
   c06e6:	46b1      	mov	r9, r6
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c06e8:	9b04      	ldr	r3, [sp, #16]
   c06ea:	42b3      	cmp	r3, r6
   c06ec:	dd2e      	ble.n	c074c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5a8>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
   c06ee:	9b07      	ldr	r3, [sp, #28]
   c06f0:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
   c06f4:	eb03 0e07 	add.w	lr, r3, r7
   c06f8:	9b08      	ldr	r3, [sp, #32]
   c06fa:	eb03 0c09 	add.w	ip, r3, r9
   c06fe:	2300      	movs	r3, #0
   c0700:	429c      	cmp	r4, r3
   c0702:	dd10      	ble.n	c0726 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x582>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c0704:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   c0708:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c070c:	920b      	str	r2, [sp, #44]	; 0x2c
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   c070e:	9a05      	ldr	r2, [sp, #20]
   c0710:	188a      	adds	r2, r1, r2
   c0712:	920c      	str	r2, [sp, #48]	; 0x30
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   c0714:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c0716:	9a06      	ldr	r2, [sp, #24]
   c0718:	4411      	add	r1, r2
   c071a:	460a      	mov	r2, r1
        accum += filter_val * input_val;
   c071c:	990c      	ldr	r1, [sp, #48]	; 0x30
      for (int d = 0; d < accum_depth; ++d) {
   c071e:	3301      	adds	r3, #1
        accum += filter_val * input_val;
   c0720:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   c0724:	e7ec      	b.n	c0700 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x55c>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
   c0726:	ee18 2a90 	vmov	r2, s17
   c072a:	ee18 1a10 	vmov	r1, s16
   c072e:	f7f9 fe4b 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
   c0732:	9b02      	ldr	r3, [sp, #8]
   c0734:	4298      	cmp	r0, r3
   c0736:	bfb8      	it	lt
   c0738:	4618      	movlt	r0, r3
   c073a:	9b03      	ldr	r3, [sp, #12]
   c073c:	4298      	cmp	r0, r3
   c073e:	bfa8      	it	ge
   c0740:	4618      	movge	r0, r3
   c0742:	f82a 0b02 	strh.w	r0, [sl], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   c0746:	3601      	adds	r6, #1
   c0748:	44a1      	add	r9, r4
   c074a:	e7cd      	b.n	c06e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x544>
  for (int b = 0; b < batches; ++b) {
   c074c:	9b04      	ldr	r3, [sp, #16]
   c074e:	3501      	adds	r5, #1
   c0750:	4498      	add	r8, r3
   c0752:	4427      	add	r7, r4
   c0754:	e7c0      	b.n	c06d8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x534>
      TF_LITE_FULLY_CONNECTED(int16_t);
   c0756:	a84a      	add	r0, sp, #296	; 0x128
   c0758:	f7f5 fe33 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c075c:	a845      	add	r0, sp, #276	; 0x114
   c075e:	f7f5 fe30 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c0762:	a840      	add	r0, sp, #256	; 0x100
   c0764:	f7f5 fe2d 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c0768:	a83b      	add	r0, sp, #236	; 0xec
   c076a:	e612      	b.n	c0392 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      context->ReportError(context, "Type %d not currently supported.",
   c076c:	697b      	ldr	r3, [r7, #20]
   c076e:	4902      	ldr	r1, [pc, #8]	; (c0778 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d4>)
   c0770:	4638      	mov	r0, r7
   c0772:	4798      	blx	r3
   c0774:	e561      	b.n	c023a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
   c0776:	bf00      	nop
   c0778:	000c8db3 	.word	0x000c8db3

000c077c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:
TfLiteRegistration* Register_FULLY_CONNECTED() {
  static TfLiteRegistration r = {fully_connected::Init, fully_connected::Free,
                                 fully_connected::Prepare,
                                 fully_connected::Eval};
  return &r;
}
   c077c:	4800      	ldr	r0, [pc, #0]	; (c0780 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x4>)
   c077e:	4770      	bx	lr
   c0780:	2003c3d0 	.word	0x2003c3d0

000c0784 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c0784:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0786:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c0788:	683d      	ldr	r5, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c078a:	2d01      	cmp	r5, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c078c:	b085      	sub	sp, #20
   c078e:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0790:	d00c      	beq.n	c07ac <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
   c0792:	2401      	movs	r4, #1
   c0794:	4b3b      	ldr	r3, [pc, #236]	; (c0884 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   c0796:	9301      	str	r3, [sp, #4]
   c0798:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c079c:	4b3a      	ldr	r3, [pc, #232]	; (c0888 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   c079e:	9300      	str	r3, [sp, #0]
   c07a0:	6945      	ldr	r5, [r0, #20]
   c07a2:	2321      	movs	r3, #33	; 0x21
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   c07a4:	4a39      	ldr	r2, [pc, #228]	; (c088c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c07a6:	493a      	ldr	r1, [pc, #232]	; (c0890 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c07a8:	47a8      	blx	r5
   c07aa:	e00f      	b.n	c07cc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c07ac:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   c07ae:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   c07b0:	2c01      	cmp	r4, #1
   c07b2:	d00e      	beq.n	c07d2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
   c07b4:	4b33      	ldr	r3, [pc, #204]	; (c0884 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   c07b6:	9301      	str	r3, [sp, #4]
   c07b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
   c07bc:	4b35      	ldr	r3, [pc, #212]	; (c0894 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   c07be:	9300      	str	r3, [sp, #0]
   c07c0:	6944      	ldr	r4, [r0, #20]
   c07c2:	2322      	movs	r3, #34	; 0x22
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   c07c4:	4a31      	ldr	r2, [pc, #196]	; (c088c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c07c6:	4932      	ldr	r1, [pc, #200]	; (c0890 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   c07c8:	47a0      	blx	r4
   c07ca:	462c      	mov	r4, r5
  }
  return kTfLiteOk;
}
   c07cc:	4620      	mov	r0, r4
   c07ce:	b005      	add	sp, #20
   c07d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c07d2:	6879      	ldr	r1, [r7, #4]
   c07d4:	6882      	ldr	r2, [r0, #8]
   c07d6:	2738      	movs	r7, #56	; 0x38
   c07d8:	4379      	muls	r1, r7
   c07da:	eb02 0c01 	add.w	ip, r2, r1
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c07de:	5c55      	ldrb	r5, [r2, r1]
   c07e0:	2d01      	cmp	r5, #1
   c07e2:	d008      	beq.n	c07f6 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
   c07e4:	4b2c      	ldr	r3, [pc, #176]	; (c0898 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
   c07e6:	9301      	str	r3, [sp, #4]
   c07e8:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c07ec:	4b2b      	ldr	r3, [pc, #172]	; (c089c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   c07ee:	9300      	str	r3, [sp, #0]
   c07f0:	6945      	ldr	r5, [r0, #20]
   c07f2:	2323      	movs	r3, #35	; 0x23
   c07f4:	e7d6      	b.n	c07a4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c07f6:	685b      	ldr	r3, [r3, #4]
   c07f8:	437b      	muls	r3, r7
   c07fa:	18d1      	adds	r1, r2, r3
  TF_LITE_ENSURE_EQ(context, output->type, input->type);
   c07fc:	5cd4      	ldrb	r4, [r2, r3]
   c07fe:	2c01      	cmp	r4, #1
   c0800:	d008      	beq.n	c0814 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   c0802:	4b26      	ldr	r3, [pc, #152]	; (c089c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   c0804:	9301      	str	r3, [sp, #4]
   c0806:	e9cd 4502 	strd	r4, r5, [sp, #8]
   c080a:	4b25      	ldr	r3, [pc, #148]	; (c08a0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
   c080c:	9300      	str	r3, [sp, #0]
   c080e:	6944      	ldr	r4, [r0, #20]
   c0810:	2324      	movs	r3, #36	; 0x24
   c0812:	e7d7      	b.n	c07c4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   c0814:	698b      	ldr	r3, [r1, #24]
   c0816:	f8dc 2018 	ldr.w	r2, [ip, #24]
   c081a:	4293      	cmp	r3, r2
   c081c:	d008      	beq.n	c0830 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
   c081e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0822:	4b20      	ldr	r3, [pc, #128]	; (c08a4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
   c0824:	9301      	str	r3, [sp, #4]
   c0826:	4b20      	ldr	r3, [pc, #128]	; (c08a8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   c0828:	9300      	str	r3, [sp, #0]
   c082a:	6945      	ldr	r5, [r0, #20]
   c082c:	2325      	movs	r3, #37	; 0x25
   c082e:	e7b9      	b.n	c07a4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   c0830:	688f      	ldr	r7, [r1, #8]
   c0832:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c0836:	6839      	ldr	r1, [r7, #0]
   c0838:	6813      	ldr	r3, [r2, #0]
   c083a:	4299      	cmp	r1, r3
   c083c:	d008      	beq.n	c0850 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   c083e:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c0842:	4b1a      	ldr	r3, [pc, #104]	; (c08ac <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   c0844:	9301      	str	r3, [sp, #4]
   c0846:	4b1a      	ldr	r3, [pc, #104]	; (c08b0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   c0848:	9300      	str	r3, [sp, #0]
   c084a:	6945      	ldr	r5, [r0, #20]
   c084c:	2326      	movs	r3, #38	; 0x26
   c084e:	e7a9      	b.n	c07a4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
   c0850:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c0852:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   c0854:	1e58      	subs	r0, r3, #1
   c0856:	4281      	cmp	r1, r0
   c0858:	dd12      	ble.n	c0880 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   c085a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   c085e:	3301      	adds	r3, #1
   c0860:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   c0864:	42a8      	cmp	r0, r5
   c0866:	d0f5      	beq.n	c0854 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   c0868:	4b12      	ldr	r3, [pc, #72]	; (c08b4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   c086a:	9301      	str	r3, [sp, #4]
   c086c:	4b12      	ldr	r3, [pc, #72]	; (c08b8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   c086e:	9300      	str	r3, [sp, #0]
   c0870:	e9cd 0502 	strd	r0, r5, [sp, #8]
   c0874:	4a05      	ldr	r2, [pc, #20]	; (c088c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
   c0876:	6975      	ldr	r5, [r6, #20]
   c0878:	4905      	ldr	r1, [pc, #20]	; (c0890 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   c087a:	2328      	movs	r3, #40	; 0x28
   c087c:	4630      	mov	r0, r6
   c087e:	e793      	b.n	c07a8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   c0880:	2400      	movs	r4, #0
   c0882:	e7a3      	b.n	c07cc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   c0884:	000c8bee 	.word	0x000c8bee
   c0888:	000c8430 	.word	0x000c8430
   c088c:	000c8dd4 	.word	0x000c8dd4
   c0890:	000c70fc 	.word	0x000c70fc
   c0894:	000c8440 	.word	0x000c8440
   c0898:	000c8bff 	.word	0x000c8bff
   c089c:	000c7192 	.word	0x000c7192
   c08a0:	000c8588 	.word	0x000c8588
   c08a4:	000c8595 	.word	0x000c8595
   c08a8:	000c85a2 	.word	0x000c85a2
   c08ac:	000c85b0 	.word	0x000c85b0
   c08b0:	000c85c2 	.word	0x000c85c2
   c08b4:	000c85d5 	.word	0x000c85d5
   c08b8:	000c85ea 	.word	0x000c85ea

000c08bc <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c08bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c08c0:	ed2d 8b04 	vpush	{d8-d9}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c08c4:	680b      	ldr	r3, [r1, #0]
   c08c6:	6884      	ldr	r4, [r0, #8]
   c08c8:	685d      	ldr	r5, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c08ca:	684a      	ldr	r2, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c08cc:	2338      	movs	r3, #56	; 0x38
   c08ce:	fb03 4505 	mla	r5, r3, r5, r4
   c08d2:	b08a      	sub	sp, #40	; 0x28
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c08d4:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   c08d6:	4629      	mov	r1, r5
   c08d8:	4668      	mov	r0, sp
   c08da:	fb03 4402 	mla	r4, r3, r2, r4
   c08de:	f7f6 f814 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c08e2:	b105      	cbz	r5, c08e6 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
   c08e4:	686d      	ldr	r5, [r5, #4]
                       GetTensorShape(output), GetTensorData<float>(output));
   c08e6:	4621      	mov	r1, r4
   c08e8:	a805      	add	r0, sp, #20
   c08ea:	f7f6 f80e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c08ee:	b104      	cbz	r4, c08f2 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x36>
   c08f0:	6864      	ldr	r4, [r4, #4]
   c08f2:	f8dd 8000 	ldr.w	r8, [sp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c08f6:	9b05      	ldr	r3, [sp, #20]
   c08f8:	4598      	cmp	r8, r3
   c08fa:	d001      	beq.n	c0900 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   c08fc:	f003 ffce 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   c0900:	2600      	movs	r6, #0
   c0902:	45b0      	cmp	r8, r6
   c0904:	dd0c      	ble.n	c0920 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c0906:	4631      	mov	r1, r6
   c0908:	4668      	mov	r0, sp
   c090a:	f7f5 fd65 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c090e:	4631      	mov	r1, r6
   c0910:	4607      	mov	r7, r0
   c0912:	a805      	add	r0, sp, #20
   c0914:	f7f5 fd60 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0918:	4287      	cmp	r7, r0
   c091a:	d1ef      	bne.n	c08fc <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   c091c:	3601      	adds	r6, #1
   c091e:	e7f0      	b.n	c0902 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c0920:	f1b8 0f04 	cmp.w	r8, #4
   c0924:	bfcc      	ite	gt
   c0926:	9a01      	ldrgt	r2, [sp, #4]
   c0928:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   c092a:	2300      	movs	r3, #0
    int buffer_size = 1;
   c092c:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
   c092e:	4598      	cmp	r8, r3
   c0930:	dc24      	bgt.n	c097c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   c0932:	2600      	movs	r6, #0
  if ((diff < 0.5f) ||
   c0934:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    return floor_val = floor_val + 1.0f;
   c0938:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   c093c:	42be      	cmp	r6, r7
   c093e:	da22      	bge.n	c0986 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   c0940:	ecb5 8a01 	vldmia	r5!, {s16}
  { return __builtin_floorf(__x); }
   c0944:	eeb0 0a48 	vmov.f32	s0, s16
   c0948:	f004 fd82 	bl	c5450 <floorf>
  auto diff = value - floor_val;
   c094c:	ee38 8a40 	vsub.f32	s16, s16, s0
  if ((diff < 0.5f) ||
   c0950:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c0954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c0958:	d40c      	bmi.n	c0974 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   c095a:	eeb4 8a68 	vcmp.f32	s16, s17
   c095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c0962:	d105      	bne.n	c0970 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   c0964:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c0968:	ee17 3a90 	vmov	r3, s15
   c096c:	07db      	lsls	r3, r3, #31
   c096e:	d501      	bpl.n	c0974 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    return floor_val = floor_val + 1.0f;
   c0970:	ee30 0a09 	vadd.f32	s0, s0, s18
    output_data[i] = RoundToNearest(input_data[i]);
   c0974:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; ++i) {
   c0978:	3601      	adds	r6, #1
   c097a:	e7df      	b.n	c093c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      buffer_size *= dims_data[i];
   c097c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c0980:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c0982:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
   c0984:	e7d3      	b.n	c092e <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   c0986:	a805      	add	r0, sp, #20
   c0988:	f7f5 fd1b 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   c098c:	4668      	mov	r0, sp
   c098e:	f7f5 fd18 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>

  return kTfLiteOk;
}
   c0992:	2000      	movs	r0, #0
   c0994:	b00a      	add	sp, #40	; 0x28
   c0996:	ecbd 8b04 	vpop	{d8-d9}
   c099a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000c09a0 <_ZN6tflite3ops5micro14Register_ROUNDEv>:

TfLiteRegistration* Register_ROUND() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, round::Prepare, round::Eval};
  return &r;
}
   c09a0:	4800      	ldr	r0, [pc, #0]	; (c09a4 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x4>)
   c09a2:	4770      	bx	lr
   c09a4:	2003c3f0 	.word	0x2003c3f0

000c09a8 <_ZN6tflite3ops5micro14AllOpsResolverD1Ev>:

namespace tflite {
namespace ops {
namespace micro {

class AllOpsResolver : public MicroMutableOpResolver {
   c09a8:	4770      	bx	lr

000c09aa <_ZN6tflite3ops5micro14AllOpsResolverD0Ev>:
   c09aa:	b510      	push	{r4, lr}
   c09ac:	f241 0108 	movw	r1, #4104	; 0x1008
   c09b0:	4604      	mov	r4, r0
   c09b2:	f7f4 f8aa 	bl	b4b0a <_ZdlPvj>
   c09b6:	4620      	mov	r0, r4
   c09b8:	bd10      	pop	{r4, pc}
	...

000c09bc <_ZN6tflite3ops5micro14AllOpsResolverC1Ev>:
#define TFLITE_REGISTRATIONS_MAX (128)
#endif

namespace tflite {

class MicroMutableOpResolver : public OpResolver {
   c09bc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
TfLiteRegistration* Register_UNPACK();
TfLiteRegistration* Register_NEG();
TfLiteRegistration* Register_ADD();
TfLiteRegistration* Register_QUANTIZE();
TfLiteRegistration* Register_DEQUANTIZE();
AllOpsResolver::AllOpsResolver() {
   c09c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c09c2:	2700      	movs	r7, #0
   c09c4:	605f      	str	r7, [r3, #4]
   c09c6:	4bbd      	ldr	r3, [pc, #756]	; (c0cbc <_ZN6tflite3ops5micro14AllOpsResolverC1Ev+0x300>)
   c09c8:	6003      	str	r3, [r0, #0]
   c09ca:	4605      	mov	r5, r0
  AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D, Register_DEPTHWISE_CONV_2D());
   c09cc:	f001 fdba 	bl	c2544 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
   c09d0:	2401      	movs	r4, #1
   c09d2:	4602      	mov	r2, r0
   c09d4:	4623      	mov	r3, r4
   c09d6:	2104      	movs	r1, #4
   c09d8:	4628      	mov	r0, r5
   c09da:	9400      	str	r4, [sp, #0]
   c09dc:	f7f4 fd62 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_FULLY_CONNECTED, Register_FULLY_CONNECTED(),
   c09e0:	f7ff fecc 	bl	c077c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
   c09e4:	2604      	movs	r6, #4
   c09e6:	4602      	mov	r2, r0
   c09e8:	4623      	mov	r3, r4
   c09ea:	2109      	movs	r1, #9
   c09ec:	4628      	mov	r0, r5
   c09ee:	9600      	str	r6, [sp, #0]
   c09f0:	f7f4 fd58 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
             /* min_version */ 1,
             /* max_version */ 4);
  AddBuiltin(BuiltinOperator_MAX_POOL_2D, Register_MAX_POOL_2D());
   c09f4:	f7f8 fff2 	bl	b99dc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   c09f8:	4623      	mov	r3, r4
   c09fa:	4602      	mov	r2, r0
   c09fc:	2111      	movs	r1, #17
   c09fe:	4628      	mov	r0, r5
   c0a00:	9400      	str	r4, [sp, #0]
   c0a02:	f7f4 fd4f 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX());
   c0a06:	f7f9 f9a3 	bl	b9d50 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
   c0a0a:	4623      	mov	r3, r4
   c0a0c:	4602      	mov	r2, r0
   c0a0e:	2119      	movs	r1, #25
   c0a10:	4628      	mov	r0, r5
   c0a12:	9400      	str	r4, [sp, #0]
   c0a14:	f7f4 fd46 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGISTIC, Register_LOGISTIC());
   c0a18:	f000 fba0 	bl	c115c <_ZN6tflite3ops5micro17Register_LOGISTICEv>
   c0a1c:	4623      	mov	r3, r4
   c0a1e:	4602      	mov	r2, r0
   c0a20:	210e      	movs	r1, #14
   c0a22:	4628      	mov	r0, r5
   c0a24:	9400      	str	r4, [sp, #0]
   c0a26:	f7f4 fd3d 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SVDF, Register_SVDF());
   c0a2a:	f001 fb3d 	bl	c20a8 <_ZN6tflite3ops5micro13Register_SVDFEv>
   c0a2e:	4623      	mov	r3, r4
   c0a30:	4602      	mov	r2, r0
   c0a32:	211b      	movs	r1, #27
   c0a34:	4628      	mov	r0, r5
   c0a36:	9400      	str	r4, [sp, #0]
   c0a38:	f7f4 fd34 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D());
   c0a3c:	f7fa fa6a 	bl	baf14 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
   c0a40:	4623      	mov	r3, r4
   c0a42:	4602      	mov	r2, r0
   c0a44:	2103      	movs	r1, #3
   c0a46:	4628      	mov	r0, r5
   c0a48:	9400      	str	r4, [sp, #0]
   c0a4a:	f7f4 fd2b 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D, Register_AVERAGE_POOL_2D());
   c0a4e:	f7f8 ffc1 	bl	b99d4 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
   c0a52:	4623      	mov	r3, r4
   c0a54:	4602      	mov	r2, r0
   c0a56:	4621      	mov	r1, r4
   c0a58:	4628      	mov	r0, r5
   c0a5a:	9400      	str	r4, [sp, #0]
   c0a5c:	f7f4 fd22 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ABS, Register_ABS());
   c0a60:	f000 fa6e 	bl	c0f40 <_ZN6tflite3ops5micro12Register_ABSEv>
   c0a64:	4623      	mov	r3, r4
   c0a66:	4602      	mov	r2, r0
   c0a68:	2165      	movs	r1, #101	; 0x65
   c0a6a:	4628      	mov	r0, r5
   c0a6c:	9400      	str	r4, [sp, #0]
   c0a6e:	f7f4 fd19 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SIN, Register_SIN());
   c0a72:	f000 fa69 	bl	c0f48 <_ZN6tflite3ops5micro12Register_SINEv>
   c0a76:	4623      	mov	r3, r4
   c0a78:	4602      	mov	r2, r0
   c0a7a:	2142      	movs	r1, #66	; 0x42
   c0a7c:	4628      	mov	r0, r5
   c0a7e:	9400      	str	r4, [sp, #0]
   c0a80:	f7f4 fd10 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_COS, Register_COS());
   c0a84:	f000 fa64 	bl	c0f50 <_ZN6tflite3ops5micro12Register_COSEv>
   c0a88:	4623      	mov	r3, r4
   c0a8a:	4602      	mov	r2, r0
   c0a8c:	216c      	movs	r1, #108	; 0x6c
   c0a8e:	4628      	mov	r0, r5
   c0a90:	9400      	str	r4, [sp, #0]
   c0a92:	f7f4 fd07 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOG, Register_LOG());
   c0a96:	f000 fa5f 	bl	c0f58 <_ZN6tflite3ops5micro12Register_LOGEv>
   c0a9a:	4623      	mov	r3, r4
   c0a9c:	4602      	mov	r2, r0
   c0a9e:	2149      	movs	r1, #73	; 0x49
   c0aa0:	4628      	mov	r0, r5
   c0aa2:	9400      	str	r4, [sp, #0]
   c0aa4:	f7f4 fcfe 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SQRT, Register_SQRT());
   c0aa8:	f000 fa5a 	bl	c0f60 <_ZN6tflite3ops5micro13Register_SQRTEv>
   c0aac:	4623      	mov	r3, r4
   c0aae:	4602      	mov	r2, r0
   c0ab0:	214b      	movs	r1, #75	; 0x4b
   c0ab2:	4628      	mov	r0, r5
   c0ab4:	9400      	str	r4, [sp, #0]
   c0ab6:	f7f4 fcf5 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_RSQRT, Register_RSQRT());
   c0aba:	f000 fa55 	bl	c0f68 <_ZN6tflite3ops5micro14Register_RSQRTEv>
   c0abe:	4623      	mov	r3, r4
   c0ac0:	4602      	mov	r2, r0
   c0ac2:	214c      	movs	r1, #76	; 0x4c
   c0ac4:	4628      	mov	r0, r5
   c0ac6:	9400      	str	r4, [sp, #0]
   c0ac8:	f7f4 fcec 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SQUARE, Register_SQUARE());
   c0acc:	f000 fa50 	bl	c0f70 <_ZN6tflite3ops5micro15Register_SQUAREEv>
   c0ad0:	4623      	mov	r3, r4
   c0ad2:	4602      	mov	r2, r0
   c0ad4:	215c      	movs	r1, #92	; 0x5c
   c0ad6:	4628      	mov	r0, r5
   c0ad8:	9400      	str	r4, [sp, #0]
   c0ada:	f7f4 fce3 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_PRELU, Register_PRELU());
   c0ade:	f000 fb43 	bl	c1168 <_ZN6tflite3ops5micro14Register_PRELUEv>
   c0ae2:	4623      	mov	r3, r4
   c0ae4:	4602      	mov	r2, r0
   c0ae6:	2136      	movs	r1, #54	; 0x36
   c0ae8:	4628      	mov	r0, r5
   c0aea:	9400      	str	r4, [sp, #0]
   c0aec:	f7f4 fcda 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_FLOOR, Register_FLOOR());
   c0af0:	f000 fab0 	bl	c1054 <_ZN6tflite3ops5micro14Register_FLOOREv>
   c0af4:	4623      	mov	r3, r4
   c0af6:	4602      	mov	r2, r0
   c0af8:	2108      	movs	r1, #8
   c0afa:	4628      	mov	r0, r5
   c0afc:	9400      	str	r4, [sp, #0]
   c0afe:	f7f4 fcd1 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_MAXIMUM, Register_MAXIMUM());
   c0b02:	f7fe ff47 	bl	bf994 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
   c0b06:	4623      	mov	r3, r4
   c0b08:	4602      	mov	r2, r0
   c0b0a:	2137      	movs	r1, #55	; 0x37
   c0b0c:	4628      	mov	r0, r5
   c0b0e:	9400      	str	r4, [sp, #0]
   c0b10:	f7f4 fcc8 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_MINIMUM, Register_MINIMUM());
   c0b14:	f7fe ff42 	bl	bf99c <_ZN6tflite3ops5micro16Register_MINIMUMEv>
   c0b18:	4623      	mov	r3, r4
   c0b1a:	4602      	mov	r2, r0
   c0b1c:	2139      	movs	r1, #57	; 0x39
   c0b1e:	4628      	mov	r0, r5
   c0b20:	9400      	str	r4, [sp, #0]
   c0b22:	f7f4 fcbf 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ARG_MAX, Register_ARG_MAX());
   c0b26:	f7f7 f827 	bl	b7b78 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
   c0b2a:	4623      	mov	r3, r4
   c0b2c:	4602      	mov	r2, r0
   c0b2e:	2138      	movs	r1, #56	; 0x38
   c0b30:	4628      	mov	r0, r5
   c0b32:	9400      	str	r4, [sp, #0]
   c0b34:	f7f4 fcb6 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ARG_MIN, Register_ARG_MIN());
   c0b38:	f7f7 f822 	bl	b7b80 <_ZN6tflite3ops5micro16Register_ARG_MINEv>
   c0b3c:	4623      	mov	r3, r4
   c0b3e:	4602      	mov	r2, r0
   c0b40:	214f      	movs	r1, #79	; 0x4f
   c0b42:	4628      	mov	r0, r5
   c0b44:	9400      	str	r4, [sp, #0]
   c0b46:	f7f4 fcad 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_OR, Register_LOGICAL_OR());
   c0b4a:	f7fe fb5d 	bl	bf208 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
   c0b4e:	4623      	mov	r3, r4
   c0b50:	4602      	mov	r2, r0
   c0b52:	2154      	movs	r1, #84	; 0x54
   c0b54:	4628      	mov	r0, r5
   c0b56:	9400      	str	r4, [sp, #0]
   c0b58:	f7f4 fca4 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_AND, Register_LOGICAL_AND());
   c0b5c:	f7fe fb58 	bl	bf210 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
   c0b60:	4623      	mov	r3, r4
   c0b62:	4602      	mov	r2, r0
   c0b64:	2156      	movs	r1, #86	; 0x56
   c0b66:	4628      	mov	r0, r5
   c0b68:	9400      	str	r4, [sp, #0]
   c0b6a:	f7f4 fc9b 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LOGICAL_NOT, Register_LOGICAL_NOT());
   c0b6e:	f000 fa03 	bl	c0f78 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
   c0b72:	4623      	mov	r3, r4
   c0b74:	4602      	mov	r2, r0
   c0b76:	2157      	movs	r1, #87	; 0x57
   c0b78:	4628      	mov	r0, r5
   c0b7a:	9400      	str	r4, [sp, #0]
   c0b7c:	f7f4 fc92 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_RESHAPE, Register_RESHAPE());
   c0b80:	f7fe fec4 	bl	bf90c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   c0b84:	4623      	mov	r3, r4
   c0b86:	4602      	mov	r2, r0
   c0b88:	2116      	movs	r1, #22
   c0b8a:	4628      	mov	r0, r5
   c0b8c:	9400      	str	r4, [sp, #0]
   c0b8e:	f7f4 fc89 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_EQUAL, Register_EQUAL());
   c0b92:	f7fa fc9f 	bl	bb4d4 <_ZN6tflite3ops5micro14Register_EQUALEv>
   c0b96:	4623      	mov	r3, r4
   c0b98:	4602      	mov	r2, r0
   c0b9a:	2147      	movs	r1, #71	; 0x47
   c0b9c:	4628      	mov	r0, r5
   c0b9e:	9400      	str	r4, [sp, #0]
   c0ba0:	f7f4 fc80 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_NOT_EQUAL, Register_NOT_EQUAL());
   c0ba4:	f7fa fc9a 	bl	bb4dc <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
   c0ba8:	4623      	mov	r3, r4
   c0baa:	4602      	mov	r2, r0
   c0bac:	2148      	movs	r1, #72	; 0x48
   c0bae:	4628      	mov	r0, r5
   c0bb0:	9400      	str	r4, [sp, #0]
   c0bb2:	f7f4 fc77 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_GREATER, Register_GREATER());
   c0bb6:	f7fa fc95 	bl	bb4e4 <_ZN6tflite3ops5micro16Register_GREATEREv>
   c0bba:	4623      	mov	r3, r4
   c0bbc:	4602      	mov	r2, r0
   c0bbe:	213d      	movs	r1, #61	; 0x3d
   c0bc0:	4628      	mov	r0, r5
   c0bc2:	9400      	str	r4, [sp, #0]
   c0bc4:	f7f4 fc6e 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_GREATER_EQUAL, Register_GREATER_EQUAL());
   c0bc8:	f7fa fc90 	bl	bb4ec <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
   c0bcc:	4623      	mov	r3, r4
   c0bce:	4602      	mov	r2, r0
   c0bd0:	213e      	movs	r1, #62	; 0x3e
   c0bd2:	4628      	mov	r0, r5
   c0bd4:	9400      	str	r4, [sp, #0]
   c0bd6:	f7f4 fc65 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LESS, Register_LESS());
   c0bda:	f7fa fc8b 	bl	bb4f4 <_ZN6tflite3ops5micro13Register_LESSEv>
   c0bde:	4623      	mov	r3, r4
   c0be0:	4602      	mov	r2, r0
   c0be2:	213a      	movs	r1, #58	; 0x3a
   c0be4:	4628      	mov	r0, r5
   c0be6:	9400      	str	r4, [sp, #0]
   c0be8:	f7f4 fc5c 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_LESS_EQUAL, Register_LESS_EQUAL());
   c0bec:	f7fa fc86 	bl	bb4fc <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
   c0bf0:	4623      	mov	r3, r4
   c0bf2:	4602      	mov	r2, r0
   c0bf4:	213f      	movs	r1, #63	; 0x3f
   c0bf6:	4628      	mov	r0, r5
   c0bf8:	9400      	str	r4, [sp, #0]
   c0bfa:	f7f4 fc53 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_CEIL, Register_CEIL());
   c0bfe:	f7f7 fd2f 	bl	b8660 <_ZN6tflite3ops5micro13Register_CEILEv>
   c0c02:	4623      	mov	r3, r4
   c0c04:	4602      	mov	r2, r0
   c0c06:	2168      	movs	r1, #104	; 0x68
   c0c08:	4628      	mov	r0, r5
   c0c0a:	9400      	str	r4, [sp, #0]
   c0c0c:	f7f4 fc4a 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ROUND, Register_ROUND());
   c0c10:	f7ff fec6 	bl	c09a0 <_ZN6tflite3ops5micro14Register_ROUNDEv>
   c0c14:	4623      	mov	r3, r4
   c0c16:	4602      	mov	r2, r0
   c0c18:	2174      	movs	r1, #116	; 0x74
   c0c1a:	4628      	mov	r0, r5
   c0c1c:	9400      	str	r4, [sp, #0]
   c0c1e:	f7f4 fc41 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_STRIDED_SLICE, Register_STRIDED_SLICE());
   c0c22:	f7f7 f971 	bl	b7f08 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
   c0c26:	4623      	mov	r3, r4
   c0c28:	4602      	mov	r2, r0
   c0c2a:	212d      	movs	r1, #45	; 0x2d
   c0c2c:	4628      	mov	r0, r5
   c0c2e:	9400      	str	r4, [sp, #0]
   c0c30:	f7f4 fc38 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_PACK, Register_PACK());
   c0c34:	f7f7 ff50 	bl	b8ad8 <_ZN6tflite3ops5micro13Register_PACKEv>
   c0c38:	4623      	mov	r3, r4
   c0c3a:	4602      	mov	r2, r0
   c0c3c:	2153      	movs	r1, #83	; 0x53
   c0c3e:	4628      	mov	r0, r5
   c0c40:	9400      	str	r4, [sp, #0]
   c0c42:	f7f4 fc2f 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_SPLIT, Register_SPLIT(),
   c0c46:	f7fa f96b 	bl	baf20 <_ZN6tflite3ops5micro14Register_SPLITEv>
   c0c4a:	2303      	movs	r3, #3
   c0c4c:	4602      	mov	r2, r0
   c0c4e:	9300      	str	r3, [sp, #0]
   c0c50:	2131      	movs	r1, #49	; 0x31
   c0c52:	4623      	mov	r3, r4
   c0c54:	4628      	mov	r0, r5
   c0c56:	f7f4 fc25 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
             /* min_version */ 1,
             /* max_version */ 3);
  AddBuiltin(BuiltinOperator_UNPACK, Register_UNPACK());
   c0c5a:	f7f6 fc55 	bl	b7508 <_ZN6tflite3ops5micro15Register_UNPACKEv>
   c0c5e:	4623      	mov	r3, r4
   c0c60:	4602      	mov	r2, r0
   c0c62:	2158      	movs	r1, #88	; 0x58
   c0c64:	4628      	mov	r0, r5
   c0c66:	9400      	str	r4, [sp, #0]
   c0c68:	f7f4 fc1c 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_NEG, Register_NEG());
   c0c6c:	f7f7 ff94 	bl	b8b98 <_ZN6tflite3ops5micro12Register_NEGEv>
   c0c70:	4623      	mov	r3, r4
   c0c72:	4602      	mov	r2, r0
   c0c74:	213b      	movs	r1, #59	; 0x3b
   c0c76:	4628      	mov	r0, r5
   c0c78:	9400      	str	r4, [sp, #0]
   c0c7a:	f7f4 fc13 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_ADD, Register_ADD());
   c0c7e:	f7f5 fee9 	bl	b6a54 <_ZN6tflite3ops5micro12Register_ADDEv>
   c0c82:	4623      	mov	r3, r4
   c0c84:	4602      	mov	r2, r0
   c0c86:	4639      	mov	r1, r7
   c0c88:	4628      	mov	r0, r5
   c0c8a:	9400      	str	r4, [sp, #0]
   c0c8c:	f7f4 fc0a 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(), 1, 4);
   c0c90:	f7fe fd66 	bl	bf760 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
   c0c94:	4623      	mov	r3, r4
   c0c96:	4602      	mov	r2, r0
   c0c98:	2172      	movs	r1, #114	; 0x72
   c0c9a:	4628      	mov	r0, r5
   c0c9c:	9600      	str	r6, [sp, #0]
   c0c9e:	f7f4 fc01 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
  AddBuiltin(BuiltinOperator_DEQUANTIZE, Register_DEQUANTIZE(), 1, 4);
   c0ca2:	f7f8 f875 	bl	b8d90 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
   c0ca6:	9600      	str	r6, [sp, #0]
   c0ca8:	4602      	mov	r2, r0
   c0caa:	4623      	mov	r3, r4
   c0cac:	4628      	mov	r0, r5
   c0cae:	2106      	movs	r1, #6
   c0cb0:	f7f4 fbf8 	bl	b54a4 <_ZN6tflite22MicroMutableOpResolver10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistrationii>
}
   c0cb4:	4628      	mov	r0, r5
   c0cb6:	b003      	add	sp, #12
   c0cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0cba:	bf00      	nop
   c0cbc:	000c8e4c 	.word	0x000c8e4c

000c0cc0 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   c0cc0:	eeb0 0ac0 	vabs.f32	s0, s0
   c0cc4:	4770      	bx	lr

000c0cc6 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
TfLiteStatus RsqrtEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
}

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
   c0cc6:	ee20 0a00 	vmul.f32	s0, s0, s0
   c0cca:	4770      	bx	lr

000c0ccc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   c0ccc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c0cd0:	680b      	ldr	r3, [r1, #0]
   c0cd2:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0cd4:	2e01      	cmp	r6, #1
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   c0cd6:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   c0cd8:	d00c      	beq.n	c0cf4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
   c0cda:	2401      	movs	r4, #1
   c0cdc:	4b20      	ldr	r3, [pc, #128]	; (c0d60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x94>)
   c0cde:	9301      	str	r3, [sp, #4]
   c0ce0:	e9cd 6402 	strd	r6, r4, [sp, #8]
   c0ce4:	4b1f      	ldr	r3, [pc, #124]	; (c0d64 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>)
   c0ce6:	9300      	str	r3, [sp, #0]
   c0ce8:	6945      	ldr	r5, [r0, #20]
   c0cea:	2327      	movs	r3, #39	; 0x27
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   c0cec:	4a1e      	ldr	r2, [pc, #120]	; (c0d68 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9c>)
   c0cee:	491f      	ldr	r1, [pc, #124]	; (c0d6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa0>)
   c0cf0:	47a8      	blx	r5
   c0cf2:	e00f      	b.n	c0d14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   c0cf4:	684a      	ldr	r2, [r1, #4]
   c0cf6:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   c0cf8:	2c01      	cmp	r4, #1
   c0cfa:	d00f      	beq.n	c0d1c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
   c0cfc:	e9cd 4602 	strd	r4, r6, [sp, #8]
   c0d00:	4b17      	ldr	r3, [pc, #92]	; (c0d60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x94>)
   c0d02:	9301      	str	r3, [sp, #4]
   c0d04:	4b1a      	ldr	r3, [pc, #104]	; (c0d70 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa4>)
   c0d06:	9300      	str	r3, [sp, #0]
   c0d08:	6944      	ldr	r4, [r0, #20]
   c0d0a:	4a17      	ldr	r2, [pc, #92]	; (c0d68 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9c>)
   c0d0c:	4917      	ldr	r1, [pc, #92]	; (c0d6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa0>)
   c0d0e:	2328      	movs	r3, #40	; 0x28
   c0d10:	47a0      	blx	r4
   c0d12:	4634      	mov	r4, r6
}
   c0d14:	4620      	mov	r0, r4
   c0d16:	b004      	add	sp, #16
   c0d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0d1c:	685e      	ldr	r6, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0d1e:	6852      	ldr	r2, [r2, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0d20:	6887      	ldr	r7, [r0, #8]
   c0d22:	2138      	movs	r1, #56	; 0x38
   c0d24:	434e      	muls	r6, r1
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   c0d26:	434a      	muls	r2, r1
   c0d28:	5dbb      	ldrb	r3, [r7, r6]
   c0d2a:	5cba      	ldrb	r2, [r7, r2]
   c0d2c:	4293      	cmp	r3, r2
   c0d2e:	d008      	beq.n	c0d42 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x76>
   c0d30:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0d34:	4b0f      	ldr	r3, [pc, #60]	; (c0d74 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa8>)
   c0d36:	9301      	str	r3, [sp, #4]
   c0d38:	4b0f      	ldr	r3, [pc, #60]	; (c0d78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xac>)
   c0d3a:	9300      	str	r3, [sp, #0]
   c0d3c:	6945      	ldr	r5, [r0, #20]
   c0d3e:	232b      	movs	r3, #43	; 0x2b
   c0d40:	e7d4      	b.n	c0cec <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x20>
  if (!IsSupportedType(input->type)) {
   c0d42:	b953      	cbnz	r3, c0d5a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8e>
    context->ReportError(context, "Input data type %s (%d) is not supported.",
   c0d44:	f8d0 8014 	ldr.w	r8, [r0, #20]
   c0d48:	4618      	mov	r0, r3
   c0d4a:	f7f3 ff1b 	bl	b4b84 <TfLiteTypeGetName>
   c0d4e:	5dbb      	ldrb	r3, [r7, r6]
   c0d50:	490a      	ldr	r1, [pc, #40]	; (c0d7c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   c0d52:	4602      	mov	r2, r0
   c0d54:	4628      	mov	r0, r5
   c0d56:	47c0      	blx	r8
    return kTfLiteError;
   c0d58:	e7dc      	b.n	c0d14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
  return kTfLiteOk;
   c0d5a:	2400      	movs	r4, #0
   c0d5c:	e7da      	b.n	c0d14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x48>
   c0d5e:	bf00      	nop
   c0d60:	000c8bee 	.word	0x000c8bee
   c0d64:	000c8430 	.word	0x000c8430
   c0d68:	000c8e5c 	.word	0x000c8e5c
   c0d6c:	000c70fc 	.word	0x000c70fc
   c0d70:	000c8440 	.word	0x000c8440
   c0d74:	000c8588 	.word	0x000c8588
   c0d78:	000c7192 	.word	0x000c7192
   c0d7c:	000c8ed1 	.word	0x000c8ed1

000c0d80 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   c0d80:	f7ff bfa4 	b.w	c0ccc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

000c0d84 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   c0d84:	f004 bc28 	b.w	c55d8 <sinf>

000c0d88 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   c0d88:	f004 bb2a 	b.w	c53e0 <cosf>

000c0d8c <_ZSt3logf>:
  { return __builtin_logf(__x); }
   c0d8c:	f004 bcf0 	b.w	c5770 <logf>

000c0d90 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   c0d90:	f004 bd24 	b.w	c57dc <sqrtf>

000c0d94 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   c0d94:	b508      	push	{r3, lr}
   c0d96:	f004 fd21 	bl	c57dc <sqrtf>
   c0d9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c0d9e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   c0da2:	bd08      	pop	{r3, pc}

000c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>:
                                float float_func(float)) {
   c0da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   c0da8:	4690      	mov	r8, r2
   c0daa:	680a      	ldr	r2, [r1, #0]
   c0dac:	6883      	ldr	r3, [r0, #8]
   c0dae:	6852      	ldr	r2, [r2, #4]
   c0db0:	2438      	movs	r4, #56	; 0x38
   c0db2:	4362      	muls	r2, r4
   c0db4:	eb03 0c02 	add.w	ip, r3, r2
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0db8:	5c9d      	ldrb	r5, [r3, r2]
   c0dba:	2d01      	cmp	r5, #1
   c0dbc:	d00f      	beq.n	c0dde <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x3a>
   c0dbe:	2401      	movs	r4, #1
   c0dc0:	e9cd 5402 	strd	r5, r4, [sp, #8]
   c0dc4:	4b1d      	ldr	r3, [pc, #116]	; (c0e3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x98>)
   c0dc6:	9301      	str	r3, [sp, #4]
   c0dc8:	4b1d      	ldr	r3, [pc, #116]	; (c0e40 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x9c>)
   c0dca:	9300      	str	r3, [sp, #0]
   c0dcc:	6945      	ldr	r5, [r0, #20]
   c0dce:	4a1d      	ldr	r2, [pc, #116]	; (c0e44 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0xa0>)
   c0dd0:	491d      	ldr	r1, [pc, #116]	; (c0e48 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0xa4>)
   c0dd2:	2339      	movs	r3, #57	; 0x39
   c0dd4:	47a8      	blx	r5
   c0dd6:	4620      	mov	r0, r4
}
   c0dd8:	b004      	add	sp, #16
   c0dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
   c0dde:	f8dc 6008 	ldr.w	r6, [ip, #8]
   c0de2:	2200      	movs	r2, #0
   c0de4:	f856 eb04 	ldr.w	lr, [r6], #4
  int64_t count = 1;
   c0de8:	4617      	mov	r7, r2
  for (int i = 0; i < dims->size; ++i) {
   c0dea:	4596      	cmp	lr, r2
   c0dec:	dd0a      	ble.n	c0e04 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x60>
    count *= dims->data[i];
   c0dee:	f856 4b04 	ldr.w	r4, [r6], #4
   c0df2:	17e0      	asrs	r0, r4, #31
   c0df4:	4368      	muls	r0, r5
   c0df6:	fb04 0007 	mla	r0, r4, r7, r0
   c0dfa:	fba5 5704 	umull	r5, r7, r5, r4
   c0dfe:	4407      	add	r7, r0
  for (int i = 0; i < dims->size; ++i) {
   c0e00:	3201      	adds	r2, #1
   c0e02:	e7f2      	b.n	c0dea <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x46>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0e04:	684a      	ldr	r2, [r1, #4]
   c0e06:	6854      	ldr	r4, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0e08:	f8dc 2004 	ldr.w	r2, [ip, #4]
   c0e0c:	2138      	movs	r1, #56	; 0x38
   c0e0e:	fb01 3404 	mla	r4, r1, r4, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0e12:	b104      	cbz	r4, c0e16 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x72>
   c0e14:	6864      	ldr	r4, [r4, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0e16:	2600      	movs	r6, #0
   c0e18:	4691      	mov	r9, r2
   c0e1a:	46b2      	mov	sl, r6
   c0e1c:	42ae      	cmp	r6, r5
   c0e1e:	eb7a 0307 	sbcs.w	r3, sl, r7
   c0e22:	da08      	bge.n	c0e36 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x92>
    out_data[i] = func(in_data[i]);
   c0e24:	ecb9 0a01 	vldmia	r9!, {s0}
   c0e28:	47c0      	blx	r8
  for (int64_t i = 0; i < num_elements; ++i) {
   c0e2a:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
   c0e2c:	eca4 0a01 	vstmia	r4!, {s0}
  for (int64_t i = 0; i < num_elements; ++i) {
   c0e30:	f14a 0a00 	adc.w	sl, sl, #0
   c0e34:	e7f2      	b.n	c0e1c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x78>
  return kTfLiteOk;
   c0e36:	2000      	movs	r0, #0
   c0e38:	e7ce      	b.n	c0dd8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE+0x34>
   c0e3a:	bf00      	nop
   c0e3c:	000c8efb 	.word	0x000c8efb
   c0e40:	000c7192 	.word	0x000c7192
   c0e44:	000c8e5c 	.word	0x000c8e5c
   c0e48:	000c70fc 	.word	0x000c70fc

000c0e4c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::abs);
   c0e4c:	4a01      	ldr	r2, [pc, #4]	; (c0e54 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e4e:	f7ff bfa9 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e52:	bf00      	nop
   c0e54:	000c0cc1 	.word	0x000c0cc1

000c0e58 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::sin);
   c0e58:	4a01      	ldr	r2, [pc, #4]	; (c0e60 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e5a:	f7ff bfa3 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e5e:	bf00      	nop
   c0e60:	000c0d85 	.word	0x000c0d85

000c0e64 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::cos);
   c0e64:	4a01      	ldr	r2, [pc, #4]	; (c0e6c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e66:	f7ff bf9d 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e6a:	bf00      	nop
   c0e6c:	000c0d89 	.word	0x000c0d89

000c0e70 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::log);
   c0e70:	4a01      	ldr	r2, [pc, #4]	; (c0e78 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e72:	f7ff bf97 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e76:	bf00      	nop
   c0e78:	000c0d8d 	.word	0x000c0d8d

000c0e7c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, std::sqrt);
   c0e7c:	4a01      	ldr	r2, [pc, #4]	; (c0e84 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e7e:	f7ff bf91 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e82:	bf00      	nop
   c0e84:	000c0d91 	.word	0x000c0d91

000c0e88 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   c0e88:	4a01      	ldr	r2, [pc, #4]	; (c0e90 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e8a:	f7ff bf8b 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e8e:	bf00      	nop
   c0e90:	000c0d95 	.word	0x000c0d95

000c0e94 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   c0e94:	4a01      	ldr	r2, [pc, #4]	; (c0e9c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   c0e96:	f7ff bf85 	b.w	c0da4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_111EvalNumericEP13TfLiteContextP10TfLiteNodePFffE>
   c0e9a:	bf00      	nop
   c0e9c:	000c0cc7 	.word	0x000c0cc7

000c0ea0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   c0ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0ea2:	680c      	ldr	r4, [r1, #0]
   c0ea4:	6882      	ldr	r2, [r0, #8]
   c0ea6:	6864      	ldr	r4, [r4, #4]
   c0ea8:	2538      	movs	r5, #56	; 0x38
   c0eaa:	436c      	muls	r4, r5
   c0eac:	eb02 0c04 	add.w	ip, r2, r4
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0eb0:	5d14      	ldrb	r4, [r2, r4]
   c0eb2:	2c06      	cmp	r4, #6
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   c0eb4:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, input->type, expected_type);
   c0eb6:	d00e      	beq.n	c0ed6 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x36>
   c0eb8:	2206      	movs	r2, #6
   c0eba:	e9cd 4202 	strd	r4, r2, [sp, #8]
   c0ebe:	4a1c      	ldr	r2, [pc, #112]	; (c0f30 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x90>)
   c0ec0:	9201      	str	r2, [sp, #4]
   c0ec2:	4a1c      	ldr	r2, [pc, #112]	; (c0f34 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x94>)
   c0ec4:	9200      	str	r2, [sp, #0]
   c0ec6:	6944      	ldr	r4, [r0, #20]
   c0ec8:	4a1b      	ldr	r2, [pc, #108]	; (c0f38 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x98>)
   c0eca:	491c      	ldr	r1, [pc, #112]	; (c0f3c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9c>)
   c0ecc:	2339      	movs	r3, #57	; 0x39
   c0ece:	47a0      	blx	r4
   c0ed0:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
   c0ed2:	b005      	add	sp, #20
   c0ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (int i = 0; i < dims->size; ++i) {
   c0ed6:	f8dc 7008 	ldr.w	r7, [ip, #8]
   c0eda:	2500      	movs	r5, #0
   c0edc:	f857 eb04 	ldr.w	lr, [r7], #4
  int64_t count = 1;
   c0ee0:	2001      	movs	r0, #1
   c0ee2:	462c      	mov	r4, r5
  for (int i = 0; i < dims->size; ++i) {
   c0ee4:	45ae      	cmp	lr, r5
   c0ee6:	dd0a      	ble.n	c0efe <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x5e>
    count *= dims->data[i];
   c0ee8:	f857 6b04 	ldr.w	r6, [r7], #4
   c0eec:	17f3      	asrs	r3, r6, #31
   c0eee:	4343      	muls	r3, r0
   c0ef0:	fb06 3304 	mla	r3, r6, r4, r3
   c0ef4:	fba0 0406 	umull	r0, r4, r0, r6
   c0ef8:	441c      	add	r4, r3
  for (int i = 0; i < dims->size; ++i) {
   c0efa:	3501      	adds	r5, #1
   c0efc:	e7f2      	b.n	c0ee4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0efe:	684b      	ldr	r3, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0f00:	f8dc 6004 	ldr.w	r6, [ip, #4]
   c0f04:	685b      	ldr	r3, [r3, #4]
   c0f06:	2138      	movs	r1, #56	; 0x38
   c0f08:	fb01 2203 	mla	r2, r1, r3, r2
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0f0c:	b102      	cbz	r2, c0f10 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x70>
   c0f0e:	6852      	ldr	r2, [r2, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0f10:	2300      	movs	r3, #0
   c0f12:	4619      	mov	r1, r3
   c0f14:	4283      	cmp	r3, r0
   c0f16:	eb71 0504 	sbcs.w	r5, r1, r4
   c0f1a:	da07      	bge.n	c0f2c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  return EvalLogical(context, node, [](bool v) { return !v; });
   c0f1c:	5cf5      	ldrb	r5, [r6, r3]
   c0f1e:	f085 0501 	eor.w	r5, r5, #1
    out_data[i] = func(in_data[i]);
   c0f22:	54d5      	strb	r5, [r2, r3]
  for (int64_t i = 0; i < num_elements; ++i) {
   c0f24:	3301      	adds	r3, #1
   c0f26:	f141 0100 	adc.w	r1, r1, #0
   c0f2a:	e7f3      	b.n	c0f14 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x74>
  return kTfLiteOk;
   c0f2c:	2000      	movs	r0, #0
   c0f2e:	e7d0      	b.n	c0ed2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x32>
   c0f30:	000c8efb 	.word	0x000c8efb
   c0f34:	000c7192 	.word	0x000c7192
   c0f38:	000c8e5c 	.word	0x000c8e5c
   c0f3c:	000c70fc 	.word	0x000c70fc

000c0f40 <_ZN6tflite3ops5micro12Register_ABSEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::AbsEval};
  return &r;
}
   c0f40:	4800      	ldr	r0, [pc, #0]	; (c0f44 <_ZN6tflite3ops5micro12Register_ABSEv+0x4>)
   c0f42:	4770      	bx	lr
   c0f44:	2003c410 	.word	0x2003c410

000c0f48 <_ZN6tflite3ops5micro12Register_SINEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SinEval};
  return &r;
}
   c0f48:	4800      	ldr	r0, [pc, #0]	; (c0f4c <_ZN6tflite3ops5micro12Register_SINEv+0x4>)
   c0f4a:	4770      	bx	lr
   c0f4c:	2003c470 	.word	0x2003c470

000c0f50 <_ZN6tflite3ops5micro12Register_COSEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::CosEval};
  return &r;
}
   c0f50:	4800      	ldr	r0, [pc, #0]	; (c0f54 <_ZN6tflite3ops5micro12Register_COSEv+0x4>)
   c0f52:	4770      	bx	lr
   c0f54:	2003c430 	.word	0x2003c430

000c0f58 <_ZN6tflite3ops5micro12Register_LOGEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::LogEval};
  return &r;
}
   c0f58:	4800      	ldr	r0, [pc, #0]	; (c0f5c <_ZN6tflite3ops5micro12Register_LOGEv+0x4>)
   c0f5a:	4770      	bx	lr
   c0f5c:	2003c450 	.word	0x2003c450

000c0f60 <_ZN6tflite3ops5micro13Register_SQRTEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SqrtEval};
  return &r;
}
   c0f60:	4800      	ldr	r0, [pc, #0]	; (c0f64 <_ZN6tflite3ops5micro13Register_SQRTEv+0x4>)
   c0f62:	4770      	bx	lr
   c0f64:	2003c490 	.word	0x2003c490

000c0f68 <_ZN6tflite3ops5micro14Register_RSQRTEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::RsqrtEval};
  return &r;
}
   c0f68:	4800      	ldr	r0, [pc, #0]	; (c0f6c <_ZN6tflite3ops5micro14Register_RSQRTEv+0x4>)
   c0f6a:	4770      	bx	lr
   c0f6c:	2003c4b0 	.word	0x2003c4b0

000c0f70 <_ZN6tflite3ops5micro15Register_SQUAREEv>:
  static TfLiteRegistration r = {
      /* init */ nullptr, /* free */ nullptr,
      elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
      elementwise::SquareEval};
  return &r;
}
   c0f70:	4800      	ldr	r0, [pc, #0]	; (c0f74 <_ZN6tflite3ops5micro15Register_SQUAREEv+0x4>)
   c0f72:	4770      	bx	lr
   c0f74:	2003c4d0 	.word	0x2003c4d0

000c0f78 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:
  static TfLiteRegistration r = {
      /*init=*/nullptr, /*free=*/nullptr,
      elementwise::GenericPrepare<elementwise::IsLogicalSupportedType>,
      elementwise::LogicalNotEval};
  return &r;
}
   c0f78:	4800      	ldr	r0, [pc, #0]	; (c0f7c <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x4>)
   c0f7a:	4770      	bx	lr
   c0f7c:	2003c4f0 	.word	0x2003c4f0

000c0f80 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c0f84:	680a      	ldr	r2, [r1, #0]
   c0f86:	6884      	ldr	r4, [r0, #8]
   c0f88:	6852      	ldr	r2, [r2, #4]
   c0f8a:	2638      	movs	r6, #56	; 0x38
   c0f8c:	4372      	muls	r2, r6
   c0f8e:	18a5      	adds	r5, r4, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c0f90:	5ca2      	ldrb	r2, [r4, r2]
   c0f92:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c0f94:	b08e      	sub	sp, #56	; 0x38
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c0f96:	d00f      	beq.n	c0fb8 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   c0f98:	2401      	movs	r4, #1
   c0f9a:	e9cd 2402 	strd	r2, r4, [sp, #8]
   c0f9e:	4a29      	ldr	r2, [pc, #164]	; (c1044 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   c0fa0:	9201      	str	r2, [sp, #4]
   c0fa2:	4a29      	ldr	r2, [pc, #164]	; (c1048 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   c0fa4:	9200      	str	r2, [sp, #0]
   c0fa6:	6945      	ldr	r5, [r0, #20]
   c0fa8:	4a28      	ldr	r2, [pc, #160]	; (c104c <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   c0faa:	4929      	ldr	r1, [pc, #164]	; (c1050 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
   c0fac:	231f      	movs	r3, #31
   c0fae:	47a8      	blx	r5
   c0fb0:	4620      	mov	r0, r4
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
   c0fb2:	b00e      	add	sp, #56	; 0x38
   c0fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c0fb8:	684b      	ldr	r3, [r1, #4]
   c0fba:	685b      	ldr	r3, [r3, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   c0fbc:	4629      	mov	r1, r5
   c0fbe:	fb06 4403 	mla	r4, r6, r3, r4
   c0fc2:	a804      	add	r0, sp, #16
   c0fc4:	f7f5 fca1 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
   c0fc8:	4621      	mov	r1, r4
   c0fca:	a809      	add	r0, sp, #36	; 0x24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c0fcc:	f8d5 8004 	ldr.w	r8, [r5, #4]
   c0fd0:	f7f5 fc9b 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c0fd4:	b104      	cbz	r4, c0fd8 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x58>
   c0fd6:	6864      	ldr	r4, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
   c0fd8:	9e04      	ldr	r6, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c0fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0fdc:	429e      	cmp	r6, r3
   c0fde:	d001      	beq.n	c0fe4 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x64>
   c0fe0:	f003 fc5c 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   c0fe4:	2500      	movs	r5, #0
   c0fe6:	42ae      	cmp	r6, r5
   c0fe8:	dd0c      	ble.n	c1004 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x84>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c0fea:	4629      	mov	r1, r5
   c0fec:	a804      	add	r0, sp, #16
   c0fee:	f7f5 f9f3 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0ff2:	4629      	mov	r1, r5
   c0ff4:	4607      	mov	r7, r0
   c0ff6:	a809      	add	r0, sp, #36	; 0x24
   c0ff8:	f7f5 f9ee 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c0ffc:	4287      	cmp	r7, r0
   c0ffe:	d1ef      	bne.n	c0fe0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  for (int i = 0; i < dims_count; ++i) {
   c1000:	3501      	adds	r5, #1
   c1002:	e7f0      	b.n	c0fe6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c1004:	2e04      	cmp	r6, #4
   c1006:	bfcc      	ite	gt
   c1008:	9a05      	ldrgt	r2, [sp, #20]
   c100a:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
   c100c:	2300      	movs	r3, #0
    int buffer_size = 1;
   c100e:	2701      	movs	r7, #1
    for (int i = 0; i < size_; i++) {
   c1010:	429e      	cmp	r6, r3
   c1012:	dc0a      	bgt.n	c102a <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xaa>

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
   c1014:	2600      	movs	r6, #0
   c1016:	42be      	cmp	r6, r7
   c1018:	da0c      	bge.n	c1034 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
  { return __builtin_floorf(__x); }
   c101a:	ecb8 0a01 	vldmia	r8!, {s0}
   c101e:	f004 fa17 	bl	c5450 <floorf>
   c1022:	3601      	adds	r6, #1
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
   c1024:	eca4 0a01 	vstmia	r4!, {s0}
  for (int i = 0; i < flat_size; i++) {
   c1028:	e7f5      	b.n	c1016 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x96>
      buffer_size *= dims_data[i];
   c102a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c102e:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c1030:	434f      	muls	r7, r1
    for (int i = 0; i < size_; i++) {
   c1032:	e7ed      	b.n	c1010 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x90>
   c1034:	a809      	add	r0, sp, #36	; 0x24
   c1036:	f7f5 f9c4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   c103a:	a804      	add	r0, sp, #16
   c103c:	f7f5 f9c1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c1040:	2000      	movs	r0, #0
   c1042:	e7b6      	b.n	c0fb2 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   c1044:	000c8bff 	.word	0x000c8bff
   c1048:	000c7192 	.word	0x000c7192
   c104c:	000c8f09 	.word	0x000c8f09
   c1050:	000c70fc 	.word	0x000c70fc

000c1054 <_ZN6tflite3ops5micro14Register_FLOOREv>:
TfLiteRegistration* Register_FLOOR() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, /*prepare=*/nullptr,
                                 floor::Eval};
  return &r;
}
   c1054:	4800      	ldr	r0, [pc, #0]	; (c1058 <_ZN6tflite3ops5micro14Register_FLOOREv+0x4>)
   c1056:	4770      	bx	lr
   c1058:	2003c510 	.word	0x2003c510

000c105c <_ZN6tflite3ops5micro11activations7PrepareEP13TfLiteContextP10TfLiteNode>:
constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c105c:	2000      	movs	r0, #0
   c105e:	4770      	bx	lr

000c1060 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
   c1060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1064:	ed2d 8b02 	vpush	{d8}
   c1068:	461e      	mov	r6, r3
  inline int32 DimensionsCount() const { return size_; }
   c106a:	f8d0 8000 	ldr.w	r8, [r0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   c106e:	6813      	ldr	r3, [r2, #0]
   c1070:	4598      	cmp	r8, r3
   c1072:	4604      	mov	r4, r0
   c1074:	460f      	mov	r7, r1
   c1076:	4691      	mov	r9, r2
   c1078:	d001      	beq.n	c107e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   c107a:	f003 fc0f 	bl	c489c <abort>
  for (int i = 0; i < dims_count; ++i) {
   c107e:	2500      	movs	r5, #0
   c1080:	45a8      	cmp	r8, r5
   c1082:	dd0c      	ble.n	c109e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   c1084:	4629      	mov	r1, r5
   c1086:	4620      	mov	r0, r4
   c1088:	f7f5 f9a6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c108c:	4629      	mov	r1, r5
   c108e:	4682      	mov	sl, r0
   c1090:	4648      	mov	r0, r9
   c1092:	f7f5 f9a1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c1096:	4582      	cmp	sl, r0
   c1098:	d1ef      	bne.n	c107a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   c109a:	3501      	adds	r5, #1
   c109c:	e7f0      	b.n	c1080 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c109e:	f1b8 0f04 	cmp.w	r8, #4
   c10a2:	bfcc      	ite	gt
   c10a4:	6864      	ldrgt	r4, [r4, #4]
   c10a6:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   c10a8:	2300      	movs	r3, #0
    int buffer_size = 1;
   c10aa:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < size_; i++) {
   c10ae:	4598      	cmp	r8, r3
   c10b0:	dc13      	bgt.n	c10da <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x7a>
   c10b2:	4634      	mov	r4, r6
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result = 1.f / (1.f + std::exp(-val));
   c10b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; i++) {
   c10b8:	2600      	movs	r6, #0
   c10ba:	454e      	cmp	r6, r9
   c10bc:	da13      	bge.n	c10e6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x86>
    float val = input_data[i];
   c10be:	ecb7 0a01 	vldmia	r7!, {s0}
  { return __builtin_expf(__x); }
   c10c2:	eeb1 0a40 	vneg.f32	s0, s0
   c10c6:	f004 fb15 	bl	c56f4 <expf>
    float result = 1.f / (1.f + std::exp(-val));
   c10ca:	ee30 0a08 	vadd.f32	s0, s0, s16
  for (int i = 0; i < flat_size; i++) {
   c10ce:	3601      	adds	r6, #1
    float result = 1.f / (1.f + std::exp(-val));
   c10d0:	eec8 7a00 	vdiv.f32	s15, s16, s0
    output_data[i] = result;
   c10d4:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   c10d8:	e7ef      	b.n	c10ba <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x5a>
      buffer_size *= dims_data[i];
   c10da:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   c10de:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   c10e0:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   c10e4:	e7e3      	b.n	c10ae <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
  }
}
   c10e6:	ecbd 8b02 	vpop	{d8}
   c10ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000c10f0 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c10f0:	b570      	push	{r4, r5, r6, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c10f2:	680b      	ldr	r3, [r1, #0]
   c10f4:	6884      	ldr	r4, [r0, #8]
   c10f6:	685b      	ldr	r3, [r3, #4]
   c10f8:	2238      	movs	r2, #56	; 0x38
   c10fa:	4353      	muls	r3, r2
   c10fc:	4605      	mov	r5, r0
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   c10fe:	5ce0      	ldrb	r0, [r4, r3]
   c1100:	2801      	cmp	r0, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1102:	b08a      	sub	sp, #40	; 0x28
   c1104:	eb04 0603 	add.w	r6, r4, r3
  switch (input->type) {
   c1108:	d11d      	bne.n	c1146 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x56>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c110a:	684b      	ldr	r3, [r1, #4]
   c110c:	685b      	ldr	r3, [r3, #4]
    case kTfLiteFloat32: {
      reference_ops::Logistic(
          GetTensorShape(input), GetTensorData<float>(input),
   c110e:	4631      	mov	r1, r6
   c1110:	fb02 4403 	mla	r4, r2, r3, r4
   c1114:	4668      	mov	r0, sp
   c1116:	f7f5 fbf8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   c111a:	4621      	mov	r1, r4
   c111c:	a805      	add	r0, sp, #20
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c111e:	6875      	ldr	r5, [r6, #4]
   c1120:	f7f5 fbf3 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1124:	b104      	cbz	r4, c1128 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   c1126:	6864      	ldr	r4, [r4, #4]
      reference_ops::Logistic(
   c1128:	4623      	mov	r3, r4
   c112a:	aa05      	add	r2, sp, #20
   c112c:	4629      	mov	r1, r5
   c112e:	4668      	mov	r0, sp
   c1130:	f7ff ff96 	bl	c1060 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   c1134:	a805      	add	r0, sp, #20
   c1136:	f7f5 f944 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
   c113a:	4668      	mov	r0, sp
   c113c:	f7f5 f941 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   c1140:	2000      	movs	r0, #0
                           "Only float32 is supported currently, got %s",
                           TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   c1142:	b00a      	add	sp, #40	; 0x28
   c1144:	bd70      	pop	{r4, r5, r6, pc}
      context->ReportError(context,
   c1146:	696c      	ldr	r4, [r5, #20]
   c1148:	f7f3 fd1c 	bl	b4b84 <TfLiteTypeGetName>
   c114c:	4902      	ldr	r1, [pc, #8]	; (c1158 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x68>)
   c114e:	4602      	mov	r2, r0
   c1150:	4628      	mov	r0, r5
   c1152:	47a0      	blx	r4
      return kTfLiteError;
   c1154:	2001      	movs	r0, #1
   c1156:	e7f4      	b.n	c1142 <_ZN6tflite3ops5micro11activations4EvalEP13TfLiteContextP10TfLiteNode+0x52>
   c1158:	000c8f78 	.word	0x000c8f78

000c115c <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
TfLiteRegistration* Register_LOGISTIC() {
  static TfLiteRegistration r = {/*init=*/nullptr,
                                 /*free=*/nullptr, activations::Prepare,
                                 activations::Eval};
  return &r;
}
   c115c:	4800      	ldr	r0, [pc, #0]	; (c1160 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x4>)
   c115e:	4770      	bx	lr
   c1160:	2003c530 	.word	0x2003c530

000c1164 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
namespace micro {
namespace activations {

TfLiteStatus PreluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c1164:	2000      	movs	r0, #0
   c1166:	4770      	bx	lr

000c1168 <_ZN6tflite3ops5micro14Register_PRELUEv>:

TfLiteRegistration* Register_PRELU() {
  static TfLiteRegistration r = {nullptr, nullptr, activations::PreluPrepare,
                                 activations::PreluEval};
  return &r;
}
   c1168:	4800      	ldr	r0, [pc, #0]	; (c116c <_ZN6tflite3ops5micro14Register_PRELUEv+0x4>)
   c116a:	4770      	bx	lr
   c116c:	2003c550 	.word	0x2003c550

000c1170 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c1170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1174:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c1176:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c1178:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c117a:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   c117c:	4615      	mov	r5, r2
   c117e:	4604      	mov	r4, r0
   c1180:	9a22      	ldr	r2, [sp, #136]	; 0x88
   c1182:	468a      	mov	sl, r1
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   c1184:	dd01      	ble.n	c118a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   c1186:	f003 fb89 	bl	c489c <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   c118a:	682b      	ldr	r3, [r5, #0]
   c118c:	2b04      	cmp	r3, #4
   c118e:	dcfa      	bgt.n	c1186 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   c1190:	6813      	ldr	r3, [r2, #0]
   c1192:	2b04      	cmp	r3, #4
   c1194:	dcf7      	bgt.n	c1186 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   c1196:	2301      	movs	r3, #1
   c1198:	2104      	movs	r1, #4
   c119a:	a803      	add	r0, sp, #12
   c119c:	f7f5 f956 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   c11a0:	4620      	mov	r0, r4
   c11a2:	ab10      	add	r3, sp, #64	; 0x40
   c11a4:	aa08      	add	r2, sp, #32
   c11a6:	4629      	mov	r1, r5
   c11a8:	f7f5 fc58 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   c11ac:	2400      	movs	r4, #0
   c11ae:	2100      	movs	r1, #0
   c11b0:	a803      	add	r0, sp, #12
   c11b2:	f7f5 f911 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c11b6:	42a0      	cmp	r0, r4
   c11b8:	dd47      	ble.n	c124a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xda>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   c11ba:	2500      	movs	r5, #0
   c11bc:	2101      	movs	r1, #1
   c11be:	a803      	add	r0, sp, #12
   c11c0:	f7f5 f90a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c11c4:	42a8      	cmp	r0, r5
   c11c6:	dd3e      	ble.n	c1246 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   c11c8:	2700      	movs	r7, #0
   c11ca:	2102      	movs	r1, #2
   c11cc:	a803      	add	r0, sp, #12
   c11ce:	f7f5 f903 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c11d2:	42b8      	cmp	r0, r7
   c11d4:	dd35      	ble.n	c1242 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd2>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   c11d6:	2600      	movs	r6, #0
   c11d8:	2103      	movs	r1, #3
   c11da:	a803      	add	r0, sp, #12
   c11dc:	f7f5 f8fc 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c11e0:	42b0      	cmp	r0, r6
   c11e2:	dd2c      	ble.n	c123e <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xce>
          auto out_idx = Offset(output_shape, b, y, x, c);
   c11e4:	9600      	str	r6, [sp, #0]
   c11e6:	463b      	mov	r3, r7
   c11e8:	462a      	mov	r2, r5
   c11ea:	4621      	mov	r1, r4
   c11ec:	a803      	add	r0, sp, #12
   c11ee:	f7f5 f95a 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c11f2:	9600      	str	r6, [sp, #0]
          auto out_idx = Offset(output_shape, b, y, x, c);
   c11f4:	4680      	mov	r8, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c11f6:	463b      	mov	r3, r7
   c11f8:	462a      	mov	r2, r5
   c11fa:	4621      	mov	r1, r4
   c11fc:	a808      	add	r0, sp, #32
   c11fe:	f7f5 f9fb 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   c1202:	9600      	str	r6, [sp, #0]
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   c1204:	4681      	mov	r9, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   c1206:	463b      	mov	r3, r7
   c1208:	462a      	mov	r2, r5
   c120a:	4621      	mov	r1, r4
   c120c:	a810      	add	r0, sp, #64	; 0x40
   c120e:	f7f5 f9f3 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   c1212:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
   c1216:	edd9 7a00 	vldr	s15, [r9]
          output_data[out_idx] = in1_val >= 0.0 ? in1_val : in1_val * in2_val;
   c121a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
          auto in2_val = input2_data[in2_idx];
   c121c:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   c1220:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0 ? in1_val : in1_val * in2_val;
   c1224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c1228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c122c:	bfb8      	it	lt
   c122e:	ee67 7a87 	vmullt.f32	s15, s15, s14
   c1232:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   c1236:	edc8 7a00 	vstr	s15, [r8]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   c123a:	3601      	adds	r6, #1
   c123c:	e7cc      	b.n	c11d8 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x68>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   c123e:	3701      	adds	r7, #1
   c1240:	e7c3      	b.n	c11ca <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x5a>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   c1242:	3501      	adds	r5, #1
   c1244:	e7ba      	b.n	c11bc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x4c>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   c1246:	3401      	adds	r4, #1
   c1248:	e7b1      	b.n	c11ae <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x3e>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   c124a:	a803      	add	r0, sp, #12
   c124c:	f7f5 f8b9 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   c1250:	b019      	add	sp, #100	; 0x64
   c1252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000c1258 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                                 const RuntimeShape& input_shape,
                                 const uint8* input_data,
                                 const RuntimeShape& alpha_shape,
                                 const uint8* alpha_data,
                                 const RuntimeShape& output_shape,
                                 uint8* output_data) {
   c1258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c125c:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c125e:	680b      	ldr	r3, [r1, #0]
                                 uint8* output_data) {
   c1260:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c1262:	2b04      	cmp	r3, #4
                                 uint8* output_data) {
   c1264:	9203      	str	r2, [sp, #12]
   c1266:	4604      	mov	r4, r0
   c1268:	9a25      	ldr	r2, [sp, #148]	; 0x94
   c126a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   c126c:	dd01      	ble.n	c1272 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1a>
   c126e:	f003 fb15 	bl	c489c <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   c1272:	6833      	ldr	r3, [r6, #0]
   c1274:	2b04      	cmp	r3, #4
   c1276:	dcfa      	bgt.n	c126e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   c1278:	6813      	ldr	r3, [r2, #0]
   c127a:	2b04      	cmp	r3, #4
   c127c:	dcf7      	bgt.n	c126e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x16>
   c127e:	2301      	movs	r3, #1
   c1280:	2104      	movs	r1, #4
   c1282:	a805      	add	r0, sp, #20
   c1284:	f7f5 f8e2 	bl	b644c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   c1288:	4628      	mov	r0, r5
   c128a:	ab12      	add	r3, sp, #72	; 0x48
   c128c:	aa0a      	add	r2, sp, #40	; 0x28
   c128e:	4631      	mov	r1, r6
   c1290:	f7f5 fbe4 	bl	b6a5c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   c1294:	2500      	movs	r5, #0
   c1296:	2100      	movs	r1, #0
   c1298:	a805      	add	r0, sp, #20
   c129a:	f7f5 f89d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c129e:	42a8      	cmp	r0, r5
   c12a0:	f340 80a7 	ble.w	c13f2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x19a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   c12a4:	2600      	movs	r6, #0
   c12a6:	af05      	add	r7, sp, #20
   c12a8:	2101      	movs	r1, #1
   c12aa:	4638      	mov	r0, r7
   c12ac:	f7f5 f894 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c12b0:	42b0      	cmp	r0, r6
   c12b2:	f340 809c 	ble.w	c13ee <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x196>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   c12b6:	f04f 0b00 	mov.w	fp, #0
   c12ba:	2102      	movs	r1, #2
   c12bc:	4638      	mov	r0, r7
   c12be:	f7f5 f88b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c12c2:	4558      	cmp	r0, fp
   c12c4:	f340 8091 	ble.w	c13ea <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x192>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   c12c8:	f04f 0800 	mov.w	r8, #0
   c12cc:	2103      	movs	r1, #3
   c12ce:	4638      	mov	r0, r7
   c12d0:	f7f5 f882 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c12d4:	4540      	cmp	r0, r8
   c12d6:	f340 8085 	ble.w	c13e4 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18c>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   c12da:	465b      	mov	r3, fp
   c12dc:	4632      	mov	r2, r6
   c12de:	4629      	mov	r1, r5
   c12e0:	f8cd 8000 	str.w	r8, [sp]
   c12e4:	4638      	mov	r0, r7
   c12e6:	f7f5 f8de 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   c12ea:	465b      	mov	r3, fp
   c12ec:	4632      	mov	r2, r6
   c12ee:	4629      	mov	r1, r5
          int output_index = Offset(extended_output_shape, b, y, x, c);
   c12f0:	4681      	mov	r9, r0
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   c12f2:	f8cd 8000 	str.w	r8, [sp]
   c12f6:	a80a      	add	r0, sp, #40	; 0x28
   c12f8:	f7f5 f97e 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   c12fc:	9b03      	ldr	r3, [sp, #12]
          const int32 input_value =
   c12fe:	6821      	ldr	r1, [r4, #0]
              params.input_offset + input_data[input_index];
   c1300:	5c1a      	ldrb	r2, [r3, r0]
          if (input_value >= 0) {
   c1302:	eb12 0a01 	adds.w	sl, r2, r1
   c1306:	d405      	bmi.n	c1314 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xbc>
            output_data[output_index] = input_data[input_index];
   c1308:	9b26      	ldr	r3, [sp, #152]	; 0x98
   c130a:	f803 2009 	strb.w	r2, [r3, r9]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   c130e:	f108 0801 	add.w	r8, r8, #1
   c1312:	e7db      	b.n	c12cc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x74>
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   c1314:	465b      	mov	r3, fp
   c1316:	4632      	mov	r2, r6
   c1318:	4629      	mov	r1, r5
   c131a:	f8cd 8000 	str.w	r8, [sp]
   c131e:	a812      	add	r0, sp, #72	; 0x48
   c1320:	f7f5 f96a 	bl	b65f8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];
   c1324:	9a24      	ldr	r2, [sp, #144]	; 0x90
            const int32 alpha_value =
   c1326:	6861      	ldr	r1, [r4, #4]
                params.alpha_offset + alpha_data[alpha_index];
   c1328:	5c12      	ldrb	r2, [r2, r0]
            const int32 unclamped_output =
                params.output_offset +
   c132a:	68a3      	ldr	r3, [r4, #8]
            const int32 alpha_value =
   c132c:	440a      	add	r2, r1
                MultiplyByQuantizedMultiplierSmallerThanOneExp(
   c132e:	fb0a fa02 	mul.w	sl, sl, r2
                    input_value * alpha_value, params.output_multiplier,
                    params.output_shift);
   c1332:	e9d4 2003 	ldrd	r2, r0, [r4, #12]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   c1336:	4592      	cmp	sl, r2
   c1338:	d12a      	bne.n	c1390 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x138>
   c133a:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
   c133e:	f1d1 0e00 	rsbs	lr, r1, #0
   c1342:	eb4e 0e01 	adc.w	lr, lr, r1
  std::int64_t ab_64 = a_64 * b_64;
   c1346:	fb8a a202 	smull	sl, r2, sl, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   c134a:	2a00      	cmp	r2, #0
   c134c:	492c      	ldr	r1, [pc, #176]	; (c1400 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1a8>)
   c134e:	bfa8      	it	ge
   c1350:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   c1354:	f1be 0f00 	cmp.w	lr, #0
   c1358:	d11d      	bne.n	c1396 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x13e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   c135a:	eb11 0a0a 	adds.w	sl, r1, sl
   c135e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   c1362:	2a00      	cmp	r2, #0
   c1364:	da05      	bge.n	c1372 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x11a>
   c1366:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   c136a:	eb1a 0a01 	adds.w	sl, sl, r1
   c136e:	f142 0200 	adc.w	r2, r2, #0
   c1372:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   c1376:	ea4a 0242 	orr.w	r2, sl, r2, lsl #1
  assert(exponent >= 0);
   c137a:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(
   c137c:	f1c0 0100 	rsb	r1, r0, #0
   c1380:	dd0c      	ble.n	c139c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x144>
   c1382:	4b20      	ldr	r3, [pc, #128]	; (c1404 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1ac>)
   c1384:	4a20      	ldr	r2, [pc, #128]	; (c1408 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b0>)
   c1386:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   c138a:	4820      	ldr	r0, [pc, #128]	; (c140c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b4>)
   c138c:	f003 fa96 	bl	c48bc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   c1390:	f04f 0e00 	mov.w	lr, #0
   c1394:	e7d7      	b.n	c1346 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xee>
   c1396:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   c139a:	e7ee      	b.n	c137a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x122>
  assert(exponent <= 31);
   c139c:	301f      	adds	r0, #31
   c139e:	da04      	bge.n	c13aa <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x152>
   c13a0:	4b1b      	ldr	r3, [pc, #108]	; (c1410 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b8>)
   c13a2:	4a19      	ldr	r2, [pc, #100]	; (c1408 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1b0>)
   c13a4:	f240 1167 	movw	r1, #359	; 0x167
   c13a8:	e7ef      	b.n	c138a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x132>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   c13aa:	2001      	movs	r0, #1
   c13ac:	4088      	lsls	r0, r1
   c13ae:	3801      	subs	r0, #1
  return a & b;
   c13b0:	ea00 0e02 	and.w	lr, r0, r2
  return a >> offset;
   c13b4:	1040      	asrs	r0, r0, #1
  return a + b;
   c13b6:	eb00 70d2 	add.w	r0, r0, r2, lsr #31
  return a >> offset;
   c13ba:	410a      	asrs	r2, r1
  return a + b;
   c13bc:	4586      	cmp	lr, r0
   c13be:	bfc8      	it	gt
   c13c0:	3201      	addgt	r2, #1
                params.output_offset +
   c13c2:	eb02 0c03 	add.w	ip, r2, r3
      if (__a < __b)
   c13c6:	f1bc 0f00 	cmp.w	ip, #0
   c13ca:	dd08      	ble.n	c13de <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x186>
      return __a;
   c13cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   c13d0:	bfa8      	it	ge
   c13d2:	f04f 0cff 	movge.w	ip, #255	; 0xff
            const int32 quantized_min = std::numeric_limits<uint8_t>::min();
            const int32 quantized_max = std::numeric_limits<uint8_t>::max();
            const int32 clamped_output = std::min(
                quantized_max, std::max(quantized_min, unclamped_output));
            output_data[output_index] = static_cast<uint8>(clamped_output);
   c13d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   c13d8:	f803 c009 	strb.w	ip, [r3, r9]
   c13dc:	e797      	b.n	c130e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xb6>
      return __a;
   c13de:	f04f 0c00 	mov.w	ip, #0
   c13e2:	e7f8      	b.n	c13d6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x17e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   c13e4:	f10b 0b01 	add.w	fp, fp, #1
   c13e8:	e767      	b.n	c12ba <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   c13ea:	3601      	adds	r6, #1
   c13ec:	e75b      	b.n	c12a6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   c13ee:	3501      	adds	r5, #1
   c13f0:	e751      	b.n	c1296 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3e>
      RuntimeShape::ExtendedShape(4, output_shape);
   c13f2:	a805      	add	r0, sp, #20
   c13f4:	f7f4 ffe5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   c13f8:	b01b      	add	sp, #108	; 0x6c
   c13fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c13fe:	bf00      	nop
   c1400:	c0000001 	.word	0xc0000001
   c1404:	000c813a 	.word	0x000c813a
   c1408:	000c8148 	.word	0x000c8148
   c140c:	000c81a2 	.word	0x000c81a2
   c1410:	000c8209 	.word	0x000c8209

000c1414 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   c1414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1418:	680b      	ldr	r3, [r1, #0]
   c141a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   c141e:	689c      	ldr	r4, [r3, #8]
   c1420:	4607      	mov	r7, r0
   c1422:	6858      	ldr	r0, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1424:	684b      	ldr	r3, [r1, #4]
   c1426:	685b      	ldr	r3, [r3, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1428:	2238      	movs	r2, #56	; 0x38
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c142a:	4353      	muls	r3, r2
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c142c:	fb02 f900 	mul.w	r9, r2, r0
   c1430:	b09d      	sub	sp, #116	; 0x74
   c1432:	fb02 8404 	mla	r4, r2, r4, r8
  int32_t output_multiplier = 0;
   c1436:	2200      	movs	r2, #0
  int output_shift = 0;
   c1438:	e9cd 2206 	strd	r2, r2, [sp, #24]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c143c:	eb08 0503 	add.w	r5, r8, r3
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt16) {
   c1440:	f818 3003 	ldrb.w	r3, [r8, r3]
   c1444:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   c1448:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c144a:	eb08 0609 	add.w	r6, r8, r9
   c144e:	d113      	bne.n	c1478 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x64>
        input->params.scale * alpha->params.scale / output->params.scale;
   c1450:	ed94 7a03 	vldr	s14, [r4, #12]
   c1454:	edd6 7a03 	vldr	s15, [r6, #12]
   c1458:	ee67 7a87 	vmul.f32	s15, s15, s14
   c145c:	ed95 7a03 	vldr	s14, [r5, #12]
    double real_multiplier =
   c1460:	eec7 7a87 	vdiv.f32	s15, s15, s14
   c1464:	ee17 0a90 	vmov	r0, s15
   c1468:	f7f2 ff3e 	bl	b42e8 <__aeabi_f2d>
   c146c:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(real_multiplier, &output_multiplier,
   c1470:	a907      	add	r1, sp, #28
   c1472:	a806      	add	r0, sp, #24
   c1474:	f7f3 ff3a 	bl	b52ec <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
  switch (input->type) {
   c1478:	f818 0009 	ldrb.w	r0, [r8, r9]
   c147c:	2801      	cmp	r0, #1
   c147e:	d00a      	beq.n	c1496 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x82>
   c1480:	2803      	cmp	r0, #3
   c1482:	d02e      	beq.n	c14e2 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xce>
      context->ReportError(
   c1484:	697c      	ldr	r4, [r7, #20]
   c1486:	f7f3 fb7d 	bl	b4b84 <TfLiteTypeGetName>
   c148a:	492a      	ldr	r1, [pc, #168]	; (c1534 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x120>)
   c148c:	4602      	mov	r2, r0
   c148e:	4638      	mov	r0, r7
   c1490:	47a0      	blx	r4
      return kTfLiteError;
   c1492:	2001      	movs	r0, #1
   c1494:	e022      	b.n	c14dc <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xc8>
          GetTensorShape(input), GetTensorData<float>(input),
   c1496:	4631      	mov	r1, r6
   c1498:	a80d      	add	r0, sp, #52	; 0x34
   c149a:	f7f5 fa36 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   c149e:	4621      	mov	r1, r4
   c14a0:	a812      	add	r0, sp, #72	; 0x48
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c14a2:	6877      	ldr	r7, [r6, #4]
   c14a4:	f7f5 fa31 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c14a8:	b104      	cbz	r4, c14ac <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x98>
   c14aa:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
   c14ac:	ae17      	add	r6, sp, #92	; 0x5c
   c14ae:	4629      	mov	r1, r5
   c14b0:	4630      	mov	r0, r6
   c14b2:	f7f5 fa2a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
   c14b6:	686b      	ldr	r3, [r5, #4]
   c14b8:	a80d      	add	r0, sp, #52	; 0x34
   c14ba:	e9cd 6300 	strd	r6, r3, [sp]
   c14be:	aa12      	add	r2, sp, #72	; 0x48
   c14c0:	4623      	mov	r3, r4
   c14c2:	4639      	mov	r1, r7
   c14c4:	f7ff fe54 	bl	c1170 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   c14c8:	4630      	mov	r0, r6
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c14ca:	f7f4 ff7a 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   c14ce:	a812      	add	r0, sp, #72	; 0x48
   c14d0:	f7f4 ff77 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c14d4:	a80d      	add	r0, sp, #52	; 0x34
   c14d6:	f7f4 ff74 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   c14da:	2000      	movs	r0, #0
}
   c14dc:	b01d      	add	sp, #116	; 0x74
   c14de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      op_params.input_offset = -input->params.zero_point;
   c14e2:	6933      	ldr	r3, [r6, #16]
   c14e4:	425b      	negs	r3, r3
   c14e6:	9308      	str	r3, [sp, #32]
      op_params.alpha_offset = -alpha->params.zero_point;
   c14e8:	6923      	ldr	r3, [r4, #16]
   c14ea:	425b      	negs	r3, r3
   c14ec:	9309      	str	r3, [sp, #36]	; 0x24
      op_params.output_offset = output->params.zero_point;
   c14ee:	692b      	ldr	r3, [r5, #16]
   c14f0:	930a      	str	r3, [sp, #40]	; 0x28
      op_params.output_multiplier = output_multiplier;
   c14f2:	9b06      	ldr	r3, [sp, #24]
   c14f4:	930b      	str	r3, [sp, #44]	; 0x2c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c14f6:	4631      	mov	r1, r6
      op_params.output_shift = output_shift;
   c14f8:	9b07      	ldr	r3, [sp, #28]
   c14fa:	930c      	str	r3, [sp, #48]	; 0x30
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c14fc:	a80d      	add	r0, sp, #52	; 0x34
   c14fe:	f7f5 fa04 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c1502:	6872      	ldr	r2, [r6, #4]
   c1504:	9205      	str	r2, [sp, #20]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   c1506:	4621      	mov	r1, r4
   c1508:	a812      	add	r0, sp, #72	; 0x48
   c150a:	f7f5 f9fe 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c150e:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c1510:	ac17      	add	r4, sp, #92	; 0x5c
   c1512:	4629      	mov	r1, r5
   c1514:	4620      	mov	r0, r4
   c1516:	f7f5 f9f8 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   c151a:	686b      	ldr	r3, [r5, #4]
   c151c:	9a05      	ldr	r2, [sp, #20]
   c151e:	9600      	str	r6, [sp, #0]
   c1520:	e9cd 4301 	strd	r4, r3, [sp, #4]
   c1524:	a808      	add	r0, sp, #32
   c1526:	ab12      	add	r3, sp, #72	; 0x48
   c1528:	a90d      	add	r1, sp, #52	; 0x34
   c152a:	f7ff fe95 	bl	c1258 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowERKNS_11PreluParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   c152e:	4620      	mov	r0, r4
   c1530:	e7cb      	b.n	c14ca <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xb6>
   c1532:	bf00      	nop
   c1534:	000c8fa4 	.word	0x000c8fa4

000c1538 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
// Output tensor.
constexpr int kOutputTensor = 0;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c1538:	2000      	movs	r0, #0
   c153a:	4770      	bx	lr

000c153c <_ZN6tflite3ops5micro4svdf4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c153c:	4770      	bx	lr
	...

000c1540 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_>:
    TfLiteTensor* scratch, TfLiteTensor* output) {
   c1540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1544:	b089      	sub	sp, #36	; 0x24
   c1546:	461d      	mov	r5, r3
   c1548:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   c154c:	9307      	str	r3, [sp, #28]
   c154e:	fb01 f302 	mul.w	r3, r1, r2
   c1552:	009b      	lsls	r3, r3, #2
   c1554:	e9dd b417 	ldrd	fp, r4, [sp, #92]	; 0x5c
   c1558:	9001      	str	r0, [sp, #4]
   c155a:	468a      	mov	sl, r1
   c155c:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   c1560:	9305      	str	r3, [sp, #20]
   c1562:	2100      	movs	r1, #0
   c1564:	0093      	lsls	r3, r2, #2
      *scratch_ptr_batch = 0.f;
   c1566:	ed9f 7a80 	vldr	s14, [pc, #512]	; c1768 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x228>
    TfLiteTensor* scratch, TfLiteTensor* output) {
   c156a:	9202      	str	r2, [sp, #8]
   c156c:	9306      	str	r3, [sp, #24]
   c156e:	0080      	lsls	r0, r0, #2
   c1570:	468c      	mov	ip, r1
  for (int b = 0; b < batch_size; ++b) {
   c1572:	468e      	mov	lr, r1
   c1574:	9b01      	ldr	r3, [sp, #4]
   c1576:	459e      	cmp	lr, r3
   c1578:	da3c      	bge.n	c15f4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xb4>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c157a:	f1bb 0f00 	cmp.w	fp, #0
   c157e:	d027      	beq.n	c15d0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x90>
   c1580:	f8db 3004 	ldr.w	r3, [fp, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    float* scratch_ptr_batch = GetTensorData<float>(scratch) + b * num_filters;
   c1586:	440b      	add	r3, r1
   c1588:	b322      	cbz	r2, c15d4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x94>
   c158a:	6857      	ldr	r7, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c158c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c158e:	b31a      	cbz	r2, c15d8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x98>
   c1590:	6852      	ldr	r2, [r2, #4]
        GetTensorData<float>(activation_state) + b * memory_size * num_filters;
   c1592:	4462      	add	r2, ip
    for (int i = 0; i < num_filters; ++i) {
   c1594:	f04f 0800 	mov.w	r8, #0
   c1598:	9e02      	ldr	r6, [sp, #8]
   c159a:	45b0      	cmp	r8, r6
   c159c:	da23      	bge.n	c15e6 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xa6>
      *scratch_ptr_batch = 0.f;
   c159e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   c15a2:	eca3 7a01 	vstmia	r3!, {s14}
      for (int j = 0; j < memory_size; ++j) {
   c15a6:	f04f 0900 	mov.w	r9, #0
   c15aa:	45d1      	cmp	r9, sl
   c15ac:	da16      	bge.n	c15dc <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x9c>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   c15ae:	9e03      	ldr	r6, [sp, #12]
   c15b0:	ed53 7a01 	vldr	s15, [r3, #-4]
   c15b4:	ecb6 6a01 	vldmia	r6!, {s12}
   c15b8:	9603      	str	r6, [sp, #12]
   c15ba:	9e04      	ldr	r6, [sp, #16]
   c15bc:	ecf6 6a01 	vldmia	r6!, {s13}
   c15c0:	eee6 7a26 	vfma.f32	s15, s12, s13
   c15c4:	9604      	str	r6, [sp, #16]
      for (int j = 0; j < memory_size; ++j) {
   c15c6:	f109 0901 	add.w	r9, r9, #1
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   c15ca:	ed43 7a01 	vstr	s15, [r3, #-4]
      for (int j = 0; j < memory_size; ++j) {
   c15ce:	e7ec      	b.n	c15aa <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x6a>
   c15d0:	465b      	mov	r3, fp
   c15d2:	e7d7      	b.n	c1584 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x44>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c15d4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   c15d6:	e7d9      	b.n	c158c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x4c>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c15d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c15da:	e7da      	b.n	c1592 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x52>
   c15dc:	4407      	add	r7, r0
   c15de:	4402      	add	r2, r0
    for (int i = 0; i < num_filters; ++i) {
   c15e0:	f108 0801 	add.w	r8, r8, #1
   c15e4:	e7d8      	b.n	c1598 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x58>
  for (int b = 0; b < batch_size; ++b) {
   c15e6:	9b05      	ldr	r3, [sp, #20]
   c15e8:	449c      	add	ip, r3
   c15ea:	9b06      	ldr	r3, [sp, #24]
   c15ec:	f10e 0e01 	add.w	lr, lr, #1
   c15f0:	4419      	add	r1, r3
   c15f2:	e7bf      	b.n	c1574 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x34>
  if (bias) {
   c15f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c15f6:	2b00      	cmp	r3, #0
   c15f8:	d052      	beq.n	c16a0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x160>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c15fa:	f8d3 e004 	ldr.w	lr, [r3, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c15fe:	2c00      	cmp	r4, #0
   c1600:	d03e      	beq.n	c1680 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x140>
   c1602:	6863      	ldr	r3, [r4, #4]
    for (int i = 0; i < batch_size; ++i) {
   c1604:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   c1608:	2200      	movs	r2, #0
   c160a:	9901      	ldr	r1, [sp, #4]
   c160c:	428a      	cmp	r2, r1
   c160e:	db39      	blt.n	c1684 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x144>
   c1610:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c1612:	2100      	movs	r1, #0
   c1614:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   c1618:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   c161c:	4608      	mov	r0, r1
   c161e:	460f      	mov	r7, r1
  for (int b = 0; b < batch_size; ++b) {
   c1620:	9b01      	ldr	r3, [sp, #4]
   c1622:	429f      	cmp	r7, r3
   c1624:	db4a      	blt.n	c16bc <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x17c>
   c1626:	2200      	movs	r2, #0
inline float ActivationValFloat(TfLiteFusedActivation act, float a) {
  switch (act) {
    case kTfLiteActNone:
      return a;
    case kTfLiteActRelu:
      return a < 0.f ? 0.f : a;
   c1628:	ed9f 7a4f 	vldr	s14, [pc, #316]	; c1768 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x228>
   c162c:	00af      	lsls	r7, r5, #2
  for (int b = 0; b < batch_size; ++b) {
   c162e:	4611      	mov	r1, r2
   c1630:	9b01      	ldr	r3, [sp, #4]
   c1632:	4299      	cmp	r1, r3
   c1634:	db6f      	blt.n	c1716 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1d6>
      float* batch_end = state_ptr_batch + memory_size;
   c1636:	ea4f 048a 	mov.w	r4, sl, lsl #2
      state_ptr_batch[memory_size - 1] = 0.0f;
   c163a:	2500      	movs	r5, #0
   c163c:	f1a4 0a04 	sub.w	sl, r4, #4
  for (int b = 0; b < batch_size; ++b) {
   c1640:	462f      	mov	r7, r5
      state_ptr_batch[memory_size - 1] = 0.0f;
   c1642:	f04f 0b00 	mov.w	fp, #0
  for (int b = 0; b < batch_size; ++b) {
   c1646:	9b01      	ldr	r3, [sp, #4]
   c1648:	429f      	cmp	r7, r3
   c164a:	f280 8089 	bge.w	c1760 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x220>
   c164e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c1650:	2b00      	cmp	r3, #0
   c1652:	d07f      	beq.n	c1754 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x214>
   c1654:	685b      	ldr	r3, [r3, #4]
        GetTensorData<float>(activation_state) + b * memory_size * num_filters;
   c1656:	442b      	add	r3, r5
    for (int f = 0; f < num_filters; ++f) {
   c1658:	f04f 0800 	mov.w	r8, #0
   c165c:	9a02      	ldr	r2, [sp, #8]
   c165e:	4590      	cmp	r8, r2
   c1660:	da7a      	bge.n	c1758 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x218>
        *batch_ptr++ = *batch_start++;
   c1662:	1d19      	adds	r1, r3, #4
   c1664:	4618      	mov	r0, r3
   c1666:	4652      	mov	r2, sl
   c1668:	eb04 0903 	add.w	r9, r4, r3
   c166c:	f005 fac8 	bl	c6c00 <memmove>
   c1670:	4603      	mov	r3, r0
      state_ptr_batch[memory_size - 1] = 0.0f;
   c1672:	4453      	add	r3, sl
    for (int f = 0; f < num_filters; ++f) {
   c1674:	f108 0801 	add.w	r8, r8, #1
      state_ptr_batch[memory_size - 1] = 0.0f;
   c1678:	f8c3 b000 	str.w	fp, [r3]
    for (int f = 0; f < num_filters; ++f) {
   c167c:	464b      	mov	r3, r9
   c167e:	e7ed      	b.n	c165c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x11c>
   c1680:	4623      	mov	r3, r4
   c1682:	e7bf      	b.n	c1604 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xc4>
      float* output_ptr = output_data + i * num_units;
   c1684:	4618      	mov	r0, r3
      const float* bias_ptr = bias_data;
   c1686:	4677      	mov	r7, lr
      for (int j = 0; j < num_units; ++j) {
   c1688:	2100      	movs	r1, #0
   c168a:	42a9      	cmp	r1, r5
   c168c:	da05      	bge.n	c169a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x15a>
        *output_ptr++ = *bias_ptr++;
   c168e:	f857 8b04 	ldr.w	r8, [r7], #4
   c1692:	f840 8b04 	str.w	r8, [r0], #4
      for (int j = 0; j < num_units; ++j) {
   c1696:	3101      	adds	r1, #1
   c1698:	e7f7      	b.n	c168a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x14a>
    for (int i = 0; i < batch_size; ++i) {
   c169a:	3201      	adds	r2, #1
   c169c:	4463      	add	r3, ip
   c169e:	e7b4      	b.n	c160a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xca>
   c16a0:	b154      	cbz	r4, c16b8 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x178>
   c16a2:	6860      	ldr	r0, [r4, #4]
    for (int i = 0; i < batch_size * num_units; ++i) {
   c16a4:	9b01      	ldr	r3, [sp, #4]
   c16a6:	fb05 f203 	mul.w	r2, r5, r3
      *output_data++ = 0.0f;
   c16aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   c16ae:	0092      	lsls	r2, r2, #2
   c16b0:	2100      	movs	r1, #0
   c16b2:	f005 fabf 	bl	c6c34 <memset>
   c16b6:	e7ab      	b.n	c1610 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xd0>
   c16b8:	4620      	mov	r0, r4
   c16ba:	e7f3      	b.n	c16a4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x164>
   c16bc:	b1ec      	cbz	r4, c16fa <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1ba>
   c16be:	6863      	ldr	r3, [r4, #4]
   c16c0:	f1bb 0f00 	cmp.w	fp, #0
   c16c4:	d01b      	beq.n	c16fe <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1be>
   c16c6:	f8db 2004 	ldr.w	r2, [fp, #4]
    float* scratch_ptr_batch = GetTensorData<float>(scratch) + b * num_filters;
   c16ca:	4402      	add	r2, r0
    for (int i = 0; i < num_units; ++i) {
   c16cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c16d0:	f04f 0e00 	mov.w	lr, #0
   c16d4:	45ae      	cmp	lr, r5
   c16d6:	da19      	bge.n	c170c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1cc>
   c16d8:	4691      	mov	r9, r2
      for (int j = 0; j < rank; j++) {
   c16da:	f04f 0800 	mov.w	r8, #0
   c16de:	9e12      	ldr	r6, [sp, #72]	; 0x48
   c16e0:	45b0      	cmp	r8, r6
   c16e2:	da0e      	bge.n	c1702 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1c2>
        output_ptr_batch[i] += *input_vector_ptr++;
   c16e4:	edd3 7a00 	vldr	s15, [r3]
   c16e8:	ecb9 7a01 	vldmia	r9!, {s14}
   c16ec:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
   c16f0:	f108 0801 	add.w	r8, r8, #1
        output_ptr_batch[i] += *input_vector_ptr++;
   c16f4:	edc3 7a00 	vstr	s15, [r3]
      for (int j = 0; j < rank; j++) {
   c16f8:	e7f1      	b.n	c16de <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x19e>
   c16fa:	4623      	mov	r3, r4
   c16fc:	e7e0      	b.n	c16c0 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x180>
   c16fe:	465a      	mov	r2, fp
   c1700:	e7e3      	b.n	c16ca <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x18a>
   c1702:	4462      	add	r2, ip
    for (int i = 0; i < num_units; ++i) {
   c1704:	f10e 0e01 	add.w	lr, lr, #1
   c1708:	3304      	adds	r3, #4
   c170a:	e7e3      	b.n	c16d4 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x194>
  for (int b = 0; b < batch_size; ++b) {
   c170c:	9b06      	ldr	r3, [sp, #24]
   c170e:	3701      	adds	r7, #1
   c1710:	4418      	add	r0, r3
   c1712:	4429      	add	r1, r5
   c1714:	e784      	b.n	c1620 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xe0>
   c1716:	b1ac      	cbz	r4, c1744 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x204>
   c1718:	6863      	ldr	r3, [r4, #4]
    float* output_ptr_batch = GetTensorData<float>(output) + b * num_units;
   c171a:	4413      	add	r3, r2
    for (int i = 0; i < num_units; ++i) {
   c171c:	2000      	movs	r0, #0
   c171e:	42a8      	cmp	r0, r5
   c1720:	da15      	bge.n	c174e <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x20e>
  switch (act) {
   c1722:	9e07      	ldr	r6, [sp, #28]
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
   c1724:	edd3 7a00 	vldr	s15, [r3]
   c1728:	b146      	cbz	r6, c173c <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1fc>
   c172a:	2e01      	cmp	r6, #1
   c172c:	d10c      	bne.n	c1748 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x208>
      return a < 0.f ? 0.f : a;
   c172e:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1736:	bf48      	it	mi
   c1738:	eef0 7a47 	vmovmi.f32	s15, s14
   c173c:	ece3 7a01 	vstmia	r3!, {s15}
    for (int i = 0; i < num_units; ++i) {
   c1740:	3001      	adds	r0, #1
   c1742:	e7ec      	b.n	c171e <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1de>
   c1744:	4623      	mov	r3, r4
   c1746:	e7e8      	b.n	c171a <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x1da>
    default:
      // TODO(kreeger): Implement more activations.
      exit(1);
   c1748:	2001      	movs	r0, #1
   c174a:	f005 fa27 	bl	c6b9c <exit>
  for (int b = 0; b < batch_size; ++b) {
   c174e:	3101      	adds	r1, #1
   c1750:	443a      	add	r2, r7
   c1752:	e76d      	b.n	c1630 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0xf0>
   c1754:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c1756:	e77e      	b.n	c1656 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x116>
  for (int b = 0; b < batch_size; ++b) {
   c1758:	9b05      	ldr	r3, [sp, #20]
   c175a:	3701      	adds	r7, #1
   c175c:	441d      	add	r5, r3
   c175e:	e772      	b.n	c1646 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_+0x106>
}
   c1760:	b009      	add	sp, #36	; 0x24
   c1762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1766:	bf00      	nop
   c1768:	00000000 	.word	0x00000000

000c176c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  // TODO(kreeger): Use input tensor as variable until scratch tensor allocation
  // has been implemented (cl/263032056)
  // TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 6);
   c1770:	680a      	ldr	r2, [r1, #0]
   c1772:	6813      	ldr	r3, [r2, #0]
   c1774:	2b06      	cmp	r3, #6
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   c1776:	b089      	sub	sp, #36	; 0x24
   c1778:	4604      	mov	r4, r0
   c177a:	4688      	mov	r8, r1
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 6);
   c177c:	d011      	beq.n	c17a2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
   c177e:	2206      	movs	r2, #6
   c1780:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c1784:	4b9f      	ldr	r3, [pc, #636]	; (c1a04 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   c1786:	9301      	str	r3, [sp, #4]
   c1788:	4b9f      	ldr	r3, [pc, #636]	; (c1a08 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
   c178a:	9300      	str	r3, [sp, #0]
   c178c:	6944      	ldr	r4, [r0, #20]
   c178e:	4a9f      	ldr	r2, [pc, #636]	; (c1a0c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c1790:	499f      	ldr	r1, [pc, #636]	; (c1a10 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c1792:	f44f 739f 	mov.w	r3, #318	; 0x13e
   c1796:	47a0      	blx	r4
   c1798:	2501      	movs	r5, #1
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);

  return kTfLiteOk;
}
   c179a:	4628      	mov	r0, r5
   c179c:	b009      	add	sp, #36	; 0x24
   c179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c17a2:	6891      	ldr	r1, [r2, #8]
   c17a4:	6880      	ldr	r0, [r0, #8]
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c17a6:	6917      	ldr	r7, [r2, #16]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c17a8:	2338      	movs	r3, #56	; 0x38
   c17aa:	4359      	muls	r1, r3
   c17ac:	9107      	str	r1, [sp, #28]
   c17ae:	1841      	adds	r1, r0, r1
  if (use_tensor) {
   c17b0:	1c7d      	adds	r5, r7, #1
  const int num_filters = weights_feature->dims->data[0];
   c17b2:	6889      	ldr	r1, [r1, #8]
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c17b4:	bf18      	it	ne
   c17b6:	fb03 0707 	mlane	r7, r3, r7, r0
  const int rank = params->rank;
   c17ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
   c17be:	681d      	ldr	r5, [r3, #0]
  const int num_filters = weights_feature->dims->data[0];
   c17c0:	684b      	ldr	r3, [r1, #4]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
   c17c2:	fb93 f9f5 	sdiv	r9, r3, r5
   c17c6:	fb05 3519 	mls	r5, r5, r9, r3
  return nullptr;
   c17ca:	bf08      	it	eq
   c17cc:	2700      	moveq	r7, #0
   c17ce:	b175      	cbz	r5, c17ee <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
   c17d0:	2300      	movs	r3, #0
   c17d2:	e9cd 5302 	strd	r5, r3, [sp, #8]
   c17d6:	4b8f      	ldr	r3, [pc, #572]	; (c1a14 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
   c17d8:	9301      	str	r3, [sp, #4]
   c17da:	4b8f      	ldr	r3, [pc, #572]	; (c1a18 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
   c17dc:	9300      	str	r3, [sp, #0]
   c17de:	6965      	ldr	r5, [r4, #20]
   c17e0:	f240 134d 	movw	r3, #333	; 0x14d
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   c17e4:	4a89      	ldr	r2, [pc, #548]	; (c1a0c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c17e6:	498a      	ldr	r1, [pc, #552]	; (c1a10 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c17e8:	4620      	mov	r0, r4
   c17ea:	47a8      	blx	r5
   c17ec:	e7d4      	b.n	c1798 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c17ee:	6855      	ldr	r5, [r2, #4]
   c17f0:	f04f 0e38 	mov.w	lr, #56	; 0x38
   c17f4:	fb0e f505 	mul.w	r5, lr, r5
   c17f8:	1946      	adds	r6, r0, r5
  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteFloat32);
   c17fa:	5d45      	ldrb	r5, [r0, r5]
   c17fc:	2d01      	cmp	r5, #1
   c17fe:	d00a      	beq.n	c1816 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
   c1800:	2601      	movs	r6, #1
   c1802:	4b86      	ldr	r3, [pc, #536]	; (c1a1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c1804:	9301      	str	r3, [sp, #4]
   c1806:	e9cd 5602 	strd	r5, r6, [sp, #8]
   c180a:	4b85      	ldr	r3, [pc, #532]	; (c1a20 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
   c180c:	9300      	str	r3, [sp, #0]
   c180e:	6965      	ldr	r5, [r4, #20]
   c1810:	f44f 73a9 	mov.w	r3, #338	; 0x152
   c1814:	e7e6      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int input_size = input->dims->data[1];
   c1816:	68b6      	ldr	r6, [r6, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1818:	f8d6 a000 	ldr.w	sl, [r6]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
   c181c:	f1ba 0f02 	cmp.w	sl, #2
   c1820:	d00e      	beq.n	c1840 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
   c1822:	2302      	movs	r3, #2
   c1824:	e9cd a302 	strd	sl, r3, [sp, #8]
   c1828:	4b7e      	ldr	r3, [pc, #504]	; (c1a24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c182a:	9301      	str	r3, [sp, #4]
   c182c:	4b7e      	ldr	r3, [pc, #504]	; (c1a28 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
   c182e:	9300      	str	r3, [sp, #0]
   c1830:	6966      	ldr	r6, [r4, #20]
   c1832:	f240 1353 	movw	r3, #339	; 0x153
  TF_LITE_ENSURE_EQ(context, output->type, kTfLiteFloat32);
   c1836:	4a75      	ldr	r2, [pc, #468]	; (c1a0c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   c1838:	4975      	ldr	r1, [pc, #468]	; (c1a10 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   c183a:	4620      	mov	r0, r4
   c183c:	47b0      	blx	r6
   c183e:	e7ac      	b.n	c179a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   c1840:	f8d1 c000 	ldr.w	ip, [r1]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
   c1844:	f1bc 0f02 	cmp.w	ip, #2
   c1848:	d009      	beq.n	c185e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xf2>
   c184a:	4b76      	ldr	r3, [pc, #472]	; (c1a24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c184c:	9301      	str	r3, [sp, #4]
   c184e:	e9cd ca02 	strd	ip, sl, [sp, #8]
   c1852:	4b76      	ldr	r3, [pc, #472]	; (c1a2c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   c1854:	9300      	str	r3, [sp, #0]
   c1856:	6966      	ldr	r6, [r4, #20]
   c1858:	f44f 73ab 	mov.w	r3, #342	; 0x156
   c185c:	e7eb      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  const int input_size = input->dims->data[1];
   c185e:	f8d6 a008 	ldr.w	sl, [r6, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   c1862:	6889      	ldr	r1, [r1, #8]
   c1864:	4551      	cmp	r1, sl
   c1866:	d009      	beq.n	c187c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x110>
   c1868:	4b71      	ldr	r3, [pc, #452]	; (c1a30 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   c186a:	9301      	str	r3, [sp, #4]
   c186c:	e9cd 1a02 	strd	r1, sl, [sp, #8]
   c1870:	4b70      	ldr	r3, [pc, #448]	; (c1a34 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   c1872:	9300      	str	r3, [sp, #0]
   c1874:	6966      	ldr	r6, [r4, #20]
   c1876:	f240 1357 	movw	r3, #343	; 0x157
   c187a:	e7dc      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c187c:	68d1      	ldr	r1, [r2, #12]
   c187e:	fb0e fe01 	mul.w	lr, lr, r1
   c1882:	eb00 010e 	add.w	r1, r0, lr
   c1886:	9105      	str	r1, [sp, #20]
  const int memory_size = weights_time->dims->data[1];
   c1888:	f8d1 a008 	ldr.w	sl, [r1, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c188c:	f8da 1000 	ldr.w	r1, [sl]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
   c1890:	2902      	cmp	r1, #2
   c1892:	d009      	beq.n	c18a8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
   c1894:	4b63      	ldr	r3, [pc, #396]	; (c1a24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c1896:	9301      	str	r3, [sp, #4]
   c1898:	e9cd 1c02 	strd	r1, ip, [sp, #8]
   c189c:	4b66      	ldr	r3, [pc, #408]	; (c1a38 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   c189e:	9300      	str	r3, [sp, #0]
   c18a0:	6966      	ldr	r6, [r4, #20]
   c18a2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   c18a6:	e7c6      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
   c18a8:	f8da 1004 	ldr.w	r1, [sl, #4]
   c18ac:	4299      	cmp	r1, r3
   c18ae:	d009      	beq.n	c18c4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
   c18b0:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c18b4:	4b61      	ldr	r3, [pc, #388]	; (c1a3c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   c18b6:	9301      	str	r3, [sp, #4]
   c18b8:	4b61      	ldr	r3, [pc, #388]	; (c1a40 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   c18ba:	9300      	str	r3, [sp, #0]
   c18bc:	6966      	ldr	r6, [r4, #20]
   c18be:	f240 135b 	movw	r3, #347	; 0x15b
   c18c2:	e7b8      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  if (bias) {
   c18c4:	b1df      	cbz	r7, c18fe <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
   c18c6:	68b9      	ldr	r1, [r7, #8]
   c18c8:	6849      	ldr	r1, [r1, #4]
   c18ca:	4549      	cmp	r1, r9
   c18cc:	d009      	beq.n	c18e2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x176>
   c18ce:	4b5d      	ldr	r3, [pc, #372]	; (c1a44 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   c18d0:	9301      	str	r3, [sp, #4]
   c18d2:	e9cd 1902 	strd	r1, r9, [sp, #8]
   c18d6:	4b5c      	ldr	r3, [pc, #368]	; (c1a48 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   c18d8:	9300      	str	r3, [sp, #0]
   c18da:	6966      	ldr	r6, [r4, #20]
   c18dc:	f44f 73b0 	mov.w	r3, #352	; 0x160
   c18e0:	e7a9      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
   c18e2:	7839      	ldrb	r1, [r7, #0]
   c18e4:	2901      	cmp	r1, #1
   c18e6:	d00a      	beq.n	c18fe <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x192>
   c18e8:	2301      	movs	r3, #1
   c18ea:	e9cd 1302 	strd	r1, r3, [sp, #8]
   c18ee:	4b4b      	ldr	r3, [pc, #300]	; (c1a1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c18f0:	9301      	str	r3, [sp, #4]
   c18f2:	4b56      	ldr	r3, [pc, #344]	; (c1a4c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   c18f4:	9300      	str	r3, [sp, #0]
   c18f6:	6966      	ldr	r6, [r4, #20]
   c18f8:	f240 1361 	movw	r3, #353	; 0x161
   c18fc:	e79b      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
      &context->tensors[node->inputs->data[kInputActivationStateTensor]];
   c18fe:	6951      	ldr	r1, [r2, #20]
   c1900:	f04f 0b38 	mov.w	fp, #56	; 0x38
   c1904:	fb0b f101 	mul.w	r1, fp, r1
  TfLiteTensor* activation_state =
   c1908:	eb00 0c01 	add.w	ip, r0, r1
  TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
   c190c:	5c47      	ldrb	r7, [r0, r1]
   c190e:	2f01      	cmp	r7, #1
   c1910:	d00a      	beq.n	c1928 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
   c1912:	2301      	movs	r3, #1
   c1914:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1918:	4b40      	ldr	r3, [pc, #256]	; (c1a1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c191a:	9301      	str	r3, [sp, #4]
   c191c:	4b4c      	ldr	r3, [pc, #304]	; (c1a50 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   c191e:	9300      	str	r3, [sp, #0]
   c1920:	6966      	ldr	r6, [r4, #20]
   c1922:	f240 1365 	movw	r3, #357	; 0x165
   c1926:	e786      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c1928:	f8dc 5008 	ldr.w	r5, [ip, #8]
   c192c:	6829      	ldr	r1, [r5, #0]
   c192e:	9106      	str	r1, [sp, #24]
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
   c1930:	2902      	cmp	r1, #2
   c1932:	d00a      	beq.n	c194a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1de>
   c1934:	2302      	movs	r3, #2
   c1936:	9303      	str	r3, [sp, #12]
   c1938:	4b3a      	ldr	r3, [pc, #232]	; (c1a24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c193a:	9301      	str	r3, [sp, #4]
   c193c:	4b45      	ldr	r3, [pc, #276]	; (c1a54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   c193e:	9300      	str	r3, [sp, #0]
   c1940:	9102      	str	r1, [sp, #8]
   c1942:	6965      	ldr	r5, [r4, #20]
   c1944:	f44f 73b3 	mov.w	r3, #358	; 0x166
   c1948:	e74c      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int batch_size = input->dims->data[0];
   c194a:	6876      	ldr	r6, [r6, #4]
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
   c194c:	f8d5 c004 	ldr.w	ip, [r5, #4]
   c1950:	45b4      	cmp	ip, r6
   c1952:	d009      	beq.n	c1968 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
   c1954:	4b40      	ldr	r3, [pc, #256]	; (c1a58 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c1956:	9301      	str	r3, [sp, #4]
   c1958:	e9cd c602 	strd	ip, r6, [sp, #8]
   c195c:	4b3f      	ldr	r3, [pc, #252]	; (c1a5c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   c195e:	9300      	str	r3, [sp, #0]
   c1960:	6965      	ldr	r5, [r4, #20]
   c1962:	f240 1367 	movw	r3, #359	; 0x167
   c1966:	e73d      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  const int memory_size = weights_time->dims->data[1];
   c1968:	f8da 1008 	ldr.w	r1, [sl, #8]
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
   c196c:	68ad      	ldr	r5, [r5, #8]
   c196e:	fb01 fa03 	mul.w	sl, r1, r3
   c1972:	4555      	cmp	r5, sl
   c1974:	d009      	beq.n	c198a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x21e>
   c1976:	4b3a      	ldr	r3, [pc, #232]	; (c1a60 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c1978:	9301      	str	r3, [sp, #4]
   c197a:	e9cd 5a02 	strd	r5, sl, [sp, #8]
   c197e:	4b39      	ldr	r3, [pc, #228]	; (c1a64 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c1980:	9300      	str	r3, [sp, #0]
   c1982:	6965      	ldr	r5, [r4, #20]
   c1984:	f44f 73b4 	mov.w	r3, #360	; 0x168
   c1988:	e72c      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TfLiteTensor* scratch_tensor = &context->tensors[node->inputs->data[5]];
   c198a:	6992      	ldr	r2, [r2, #24]
   c198c:	fb0b fb02 	mul.w	fp, fp, r2
   c1990:	eb00 020b 	add.w	r2, r0, fp
  TF_LITE_ENSURE_EQ(context, scratch_tensor->type, kTfLiteFloat32);
   c1994:	f810 500b 	ldrb.w	r5, [r0, fp]
   c1998:	2d01      	cmp	r5, #1
   c199a:	d009      	beq.n	c19b0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x244>
   c199c:	4b1f      	ldr	r3, [pc, #124]	; (c1a1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   c199e:	9301      	str	r3, [sp, #4]
   c19a0:	e9cd 5702 	strd	r5, r7, [sp, #8]
   c19a4:	4b30      	ldr	r3, [pc, #192]	; (c1a68 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   c19a6:	9300      	str	r3, [sp, #0]
   c19a8:	6965      	ldr	r5, [r4, #20]
   c19aa:	f44f 73ba 	mov.w	r3, #372	; 0x174
   c19ae:	e719      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
   c19b0:	6892      	ldr	r2, [r2, #8]
   c19b2:	6817      	ldr	r7, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_tensor), 2);
   c19b4:	2f02      	cmp	r7, #2
   c19b6:	d00a      	beq.n	c19ce <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x262>
   c19b8:	9b06      	ldr	r3, [sp, #24]
   c19ba:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c19be:	4b19      	ldr	r3, [pc, #100]	; (c1a24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   c19c0:	9301      	str	r3, [sp, #4]
   c19c2:	4b2a      	ldr	r3, [pc, #168]	; (c1a6c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   c19c4:	9300      	str	r3, [sp, #0]
   c19c6:	6966      	ldr	r6, [r4, #20]
   c19c8:	f240 1375 	movw	r3, #373	; 0x175
   c19cc:	e733      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, scratch_tensor->dims->data[0], batch_size);
   c19ce:	6857      	ldr	r7, [r2, #4]
   c19d0:	4567      	cmp	r7, ip
   c19d2:	d009      	beq.n	c19e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>
   c19d4:	4b20      	ldr	r3, [pc, #128]	; (c1a58 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c19d6:	9301      	str	r3, [sp, #4]
   c19d8:	e9cd 7c02 	strd	r7, ip, [sp, #8]
   c19dc:	4b24      	ldr	r3, [pc, #144]	; (c1a70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   c19de:	9300      	str	r3, [sp, #0]
   c19e0:	6966      	ldr	r6, [r4, #20]
   c19e2:	f44f 73bb 	mov.w	r3, #374	; 0x176
   c19e6:	e726      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TF_LITE_ENSURE_EQ(context, scratch_tensor->dims->data[1], num_filters);
   c19e8:	6892      	ldr	r2, [r2, #8]
   c19ea:	429a      	cmp	r2, r3
   c19ec:	d044      	beq.n	c1a78 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>
   c19ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c19f2:	4b12      	ldr	r3, [pc, #72]	; (c1a3c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   c19f4:	9301      	str	r3, [sp, #4]
   c19f6:	4b1f      	ldr	r3, [pc, #124]	; (c1a74 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   c19f8:	9300      	str	r3, [sp, #0]
   c19fa:	6966      	ldr	r6, [r4, #20]
   c19fc:	f240 1377 	movw	r3, #375	; 0x177
   c1a00:	e719      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c1a02:	bf00      	nop
   c1a04:	000c6f10 	.word	0x000c6f10
   c1a08:	000c904a 	.word	0x000c904a
   c1a0c:	000c8fdc 	.word	0x000c8fdc
   c1a10:	000c70fc 	.word	0x000c70fc
   c1a14:	000c7095 	.word	0x000c7095
   c1a18:	000c905d 	.word	0x000c905d
   c1a1c:	000c8bff 	.word	0x000c8bff
   c1a20:	000c7192 	.word	0x000c7192
   c1a24:	000c8d08 	.word	0x000c8d08
   c1a28:	000c8a9d 	.word	0x000c8a9d
   c1a2c:	000c9070 	.word	0x000c9070
   c1a30:	000c908f 	.word	0x000c908f
   c1a34:	000c909a 	.word	0x000c909a
   c1a38:	000c90b9 	.word	0x000c90b9
   c1a3c:	000c916e 	.word	0x000c916e
   c1a40:	000c93b3 	.word	0x000c93b3
   c1a44:	000c90d5 	.word	0x000c90d5
   c1a48:	000c90df 	.word	0x000c90df
   c1a4c:	000c90f3 	.word	0x000c90f3
   c1a50:	000c90fe 	.word	0x000c90fe
   c1a54:	000c9115 	.word	0x000c9115
   c1a58:	000c9135 	.word	0x000c9135
   c1a5c:	000c9140 	.word	0x000c9140
   c1a60:	000c9160 	.word	0x000c9160
   c1a64:	000c917a 	.word	0x000c917a
   c1a68:	000c919a 	.word	0x000c919a
   c1a6c:	000c91af 	.word	0x000c91af
   c1a70:	000c91cd 	.word	0x000c91cd
   c1a74:	000c91eb 	.word	0x000c91eb
  const bool is_hybrid_op = IsHybridOp(input, weights_feature);
   c1a78:	9a07      	ldr	r2, [sp, #28]
   c1a7a:	5c87      	ldrb	r7, [r0, r2]
  return ((weight->type == kTfLiteUInt8 || weight->type == kTfLiteInt8) &&
   c1a7c:	2f03      	cmp	r7, #3
   c1a7e:	d013      	beq.n	c1aa8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>
   c1a80:	2f09      	cmp	r7, #9
   c1a82:	d011      	beq.n	c1aa8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   c1a84:	2f01      	cmp	r7, #1
   c1a86:	f040 80d9 	bne.w	c1c3c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4d0>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
   c1a8a:	f810 300e 	ldrb.w	r3, [r0, lr]
   c1a8e:	2b01      	cmp	r3, #1
   c1a90:	f000 80c4 	beq.w	c1c1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4b0>
   c1a94:	e9cd 3702 	strd	r3, r7, [sp, #8]
   c1a98:	4b8d      	ldr	r3, [pc, #564]	; (c1cd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1a9a:	9301      	str	r3, [sp, #4]
   c1a9c:	4b8d      	ldr	r3, [pc, #564]	; (c1cd4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x568>)
   c1a9e:	9300      	str	r3, [sp, #0]
   c1aa0:	6965      	ldr	r5, [r4, #20]
   c1aa2:	f240 13b5 	movw	r3, #437	; 0x1b5
   c1aa6:	e69d      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE(context, weights_time->type == kTfLiteUInt8 ||
   c1aa8:	f810 200e 	ldrb.w	r2, [r0, lr]
   c1aac:	2a03      	cmp	r2, #3
   c1aae:	d00b      	beq.n	c1ac8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>
   c1ab0:	2a09      	cmp	r2, #9
   c1ab2:	d009      	beq.n	c1ac8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>
   c1ab4:	4b88      	ldr	r3, [pc, #544]	; (c1cd8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x56c>)
   c1ab6:	9300      	str	r3, [sp, #0]
   c1ab8:	6966      	ldr	r6, [r4, #20]
   c1aba:	f44f 73c0 	mov.w	r3, #384	; 0x180
    TF_LITE_ENSURE(context, scratch_input_quantized->type == kTfLiteUInt8 ||
   c1abe:	4a87      	ldr	r2, [pc, #540]	; (c1cdc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x570>)
   c1ac0:	4987      	ldr	r1, [pc, #540]	; (c1ce0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x574>)
   c1ac2:	4620      	mov	r0, r4
   c1ac4:	47b0      	blx	r6
   c1ac6:	e668      	b.n	c179a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_ENSURE_EQ(context, node->temporaries->size, 4);
   c1ac8:	f8d8 c00c 	ldr.w	ip, [r8, #12]
   c1acc:	f8dc 2000 	ldr.w	r2, [ip]
   c1ad0:	2a04      	cmp	r2, #4
   c1ad2:	d00a      	beq.n	c1aea <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x37e>
   c1ad4:	2304      	movs	r3, #4
   c1ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1ada:	4b82      	ldr	r3, [pc, #520]	; (c1ce4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x578>)
   c1adc:	9301      	str	r3, [sp, #4]
   c1ade:	4b82      	ldr	r3, [pc, #520]	; (c1ce8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x57c>)
   c1ae0:	9300      	str	r3, [sp, #0]
   c1ae2:	6966      	ldr	r6, [r4, #20]
   c1ae4:	f44f 73c4 	mov.w	r3, #392	; 0x188
   c1ae8:	e6a5      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
      node->temporaries->data[index])];
   c1aea:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c1aee:	2738      	movs	r7, #56	; 0x38
   c1af0:	437a      	muls	r2, r7
   c1af2:	1887      	adds	r7, r0, r2
    TF_LITE_ENSURE(context, scratch_input_quantized->type == kTfLiteUInt8 ||
   c1af4:	5c82      	ldrb	r2, [r0, r2]
   c1af6:	2a03      	cmp	r2, #3
   c1af8:	d007      	beq.n	c1b0a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39e>
   c1afa:	2a09      	cmp	r2, #9
   c1afc:	d005      	beq.n	c1b0a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x39e>
   c1afe:	4b7b      	ldr	r3, [pc, #492]	; (c1cec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x580>)
   c1b00:	9300      	str	r3, [sp, #0]
   c1b02:	6966      	ldr	r6, [r4, #20]
   c1b04:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   c1b08:	e7d9      	b.n	c1abe <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x352>
    TF_LITE_ENSURE_EQ(context, scratch_input_quantized->dims->data[0],
   c1b0a:	68ba      	ldr	r2, [r7, #8]
   c1b0c:	6852      	ldr	r2, [r2, #4]
   c1b0e:	42b2      	cmp	r2, r6
   c1b10:	d009      	beq.n	c1b26 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ba>
   c1b12:	4b77      	ldr	r3, [pc, #476]	; (c1cf0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1b14:	9301      	str	r3, [sp, #4]
   c1b16:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1b1a:	4b76      	ldr	r3, [pc, #472]	; (c1cf4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x588>)
   c1b1c:	9300      	str	r3, [sp, #0]
   c1b1e:	6966      	ldr	r6, [r4, #20]
   c1b20:	f44f 73c8 	mov.w	r3, #400	; 0x190
   c1b24:	e687      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   c1b26:	f8dc 200c 	ldr.w	r2, [ip, #12]
   c1b2a:	f04f 0e38 	mov.w	lr, #56	; 0x38
   c1b2e:	fb0e f202 	mul.w	r2, lr, r2
   c1b32:	eb00 0a02 	add.w	sl, r0, r2
    TF_LITE_ENSURE_EQ(context, scratch_scaling_factors->type, kTfLiteFloat32);
   c1b36:	5c87      	ldrb	r7, [r0, r2]
   c1b38:	2f01      	cmp	r7, #1
   c1b3a:	d00a      	beq.n	c1b52 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
   c1b3c:	2301      	movs	r3, #1
   c1b3e:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1b42:	4b63      	ldr	r3, [pc, #396]	; (c1cd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1b44:	9301      	str	r3, [sp, #4]
   c1b46:	4b6c      	ldr	r3, [pc, #432]	; (c1cf8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x58c>)
   c1b48:	9300      	str	r3, [sp, #0]
   c1b4a:	6966      	ldr	r6, [r4, #20]
   c1b4c:	f44f 73ca 	mov.w	r3, #404	; 0x194
   c1b50:	e671      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1b52:	f8da 2008 	ldr.w	r2, [sl, #8]
   c1b56:	f8d2 a000 	ldr.w	sl, [r2]
    TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_scaling_factors), 1);
   c1b5a:	f1ba 0f01 	cmp.w	sl, #1
   c1b5e:	d009      	beq.n	c1b74 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x408>
   c1b60:	4b66      	ldr	r3, [pc, #408]	; (c1cfc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x590>)
   c1b62:	9301      	str	r3, [sp, #4]
   c1b64:	e9cd a702 	strd	sl, r7, [sp, #8]
   c1b68:	4b65      	ldr	r3, [pc, #404]	; (c1d00 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x594>)
   c1b6a:	9300      	str	r3, [sp, #0]
   c1b6c:	6965      	ldr	r5, [r4, #20]
   c1b6e:	f240 1395 	movw	r3, #405	; 0x195
   c1b72:	e637      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_scaling_factors->dims->data[0],
   c1b74:	6852      	ldr	r2, [r2, #4]
   c1b76:	42b2      	cmp	r2, r6
   c1b78:	d009      	beq.n	c1b8e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x422>
   c1b7a:	4b5d      	ldr	r3, [pc, #372]	; (c1cf0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1b7c:	9301      	str	r3, [sp, #4]
   c1b7e:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1b82:	4b60      	ldr	r3, [pc, #384]	; (c1d04 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x598>)
   c1b84:	9300      	str	r3, [sp, #0]
   c1b86:	6965      	ldr	r5, [r4, #20]
   c1b88:	f44f 73cb 	mov.w	r3, #406	; 0x196
   c1b8c:	e62a      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
      node->temporaries->data[index])];
   c1b8e:	f8dc 2010 	ldr.w	r2, [ip, #16]
   c1b92:	fb0e f202 	mul.w	r2, lr, r2
   c1b96:	eb00 0c02 	add.w	ip, r0, r2
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->type,
   c1b9a:	5c87      	ldrb	r7, [r0, r2]
   c1b9c:	2f01      	cmp	r7, #1
   c1b9e:	d009      	beq.n	c1bb4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x448>
   c1ba0:	4b4b      	ldr	r3, [pc, #300]	; (c1cd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1ba2:	9301      	str	r3, [sp, #4]
   c1ba4:	e9cd 7a02 	strd	r7, sl, [sp, #8]
   c1ba8:	4b57      	ldr	r3, [pc, #348]	; (c1d08 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x59c>)
   c1baa:	9300      	str	r3, [sp, #0]
   c1bac:	6965      	ldr	r5, [r4, #20]
   c1bae:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   c1bb2:	e617      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1bb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   c1bb8:	6810      	ldr	r0, [r2, #0]
    TF_LITE_ENSURE_EQ(context, NumDimensions(scratch_float_weights_time), 2);
   c1bba:	2802      	cmp	r0, #2
   c1bbc:	d00a      	beq.n	c1bd4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x468>
   c1bbe:	2302      	movs	r3, #2
   c1bc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   c1bc4:	4b51      	ldr	r3, [pc, #324]	; (c1d0c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a0>)
   c1bc6:	9301      	str	r3, [sp, #4]
   c1bc8:	4b51      	ldr	r3, [pc, #324]	; (c1d10 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a4>)
   c1bca:	9300      	str	r3, [sp, #0]
   c1bcc:	6965      	ldr	r5, [r4, #20]
   c1bce:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   c1bd2:	e607      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->dims->data[0],
   c1bd4:	6850      	ldr	r0, [r2, #4]
   c1bd6:	4298      	cmp	r0, r3
   c1bd8:	d009      	beq.n	c1bee <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x482>
   c1bda:	e9cd 0302 	strd	r0, r3, [sp, #8]
   c1bde:	4b4d      	ldr	r3, [pc, #308]	; (c1d14 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
   c1be0:	9301      	str	r3, [sp, #4]
   c1be2:	4b4d      	ldr	r3, [pc, #308]	; (c1d18 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5ac>)
   c1be4:	9300      	str	r3, [sp, #0]
   c1be6:	6965      	ldr	r5, [r4, #20]
   c1be8:	f240 139d 	movw	r3, #413	; 0x19d
   c1bec:	e5fa      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_EQ(context, scratch_float_weights_time->dims->data[1],
   c1bee:	6892      	ldr	r2, [r2, #8]
   c1bf0:	428a      	cmp	r2, r1
   c1bf2:	d009      	beq.n	c1c08 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x49c>
   c1bf4:	4b49      	ldr	r3, [pc, #292]	; (c1d1c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b0>)
   c1bf6:	9301      	str	r3, [sp, #4]
   c1bf8:	e9cd 2102 	strd	r2, r1, [sp, #8]
   c1bfc:	4b48      	ldr	r3, [pc, #288]	; (c1d20 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
   c1bfe:	9300      	str	r3, [sp, #0]
   c1c00:	6965      	ldr	r5, [r4, #20]
   c1c02:	f240 139f 	movw	r3, #415	; 0x19f
   c1c06:	e5ed      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    SymmetricDequantize(weights_time_ptr,
   c1c08:	9805      	ldr	r0, [sp, #20]
   c1c0a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   c1c0e:	ed90 0a03 	vldr	s0, [r0, #12]
   c1c12:	6840      	ldr	r0, [r0, #4]
   c1c14:	fb83 1301 	smull	r1, r3, r3, r1
   c1c18:	f7f3 fd66 	bl	b56e8 <_ZN6tflite19SymmetricDequantizeEPKaifPf>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   c1c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c1c20:	681a      	ldr	r2, [r3, #0]
   c1c22:	2a01      	cmp	r2, #1
   c1c24:	d015      	beq.n	c1c52 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e6>
   c1c26:	2301      	movs	r3, #1
   c1c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1c2c:	4b33      	ldr	r3, [pc, #204]	; (c1cfc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x590>)
   c1c2e:	9301      	str	r3, [sp, #4]
   c1c30:	4b3c      	ldr	r3, [pc, #240]	; (c1d24 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5b8>)
   c1c32:	9300      	str	r3, [sp, #0]
   c1c34:	6966      	ldr	r6, [r4, #20]
   c1c36:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   c1c3a:	e5fc      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   c1c3c:	2301      	movs	r3, #1
   c1c3e:	e9cd 7302 	strd	r7, r3, [sp, #8]
   c1c42:	4b23      	ldr	r3, [pc, #140]	; (c1cd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1c44:	9301      	str	r3, [sp, #4]
   c1c46:	4b38      	ldr	r3, [pc, #224]	; (c1d28 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5bc>)
   c1c48:	9300      	str	r3, [sp, #0]
   c1c4a:	6966      	ldr	r6, [r4, #20]
   c1c4c:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   c1c50:	e5f1      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1c52:	685b      	ldr	r3, [r3, #4]
   c1c54:	2138      	movs	r1, #56	; 0x38
   c1c56:	434b      	muls	r3, r1
   c1c58:	68a1      	ldr	r1, [r4, #8]
  TF_LITE_ENSURE_EQ(context, output->type, kTfLiteFloat32);
   c1c5a:	5ccf      	ldrb	r7, [r1, r3]
   c1c5c:	2f01      	cmp	r7, #1
   c1c5e:	eb01 0003 	add.w	r0, r1, r3
   c1c62:	d009      	beq.n	c1c78 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x50c>
   c1c64:	4b1a      	ldr	r3, [pc, #104]	; (c1cd0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x564>)
   c1c66:	9301      	str	r3, [sp, #4]
   c1c68:	e9cd 7202 	strd	r7, r2, [sp, #8]
   c1c6c:	4b2f      	ldr	r3, [pc, #188]	; (c1d2c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c0>)
   c1c6e:	9300      	str	r3, [sp, #0]
   c1c70:	6966      	ldr	r6, [r4, #20]
   c1c72:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   c1c76:	e5de      	b.n	c1836 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   c1c78:	6883      	ldr	r3, [r0, #8]
   c1c7a:	681a      	ldr	r2, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
   c1c7c:	2a02      	cmp	r2, #2
   c1c7e:	d00a      	beq.n	c1c96 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x52a>
   c1c80:	2302      	movs	r3, #2
   c1c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
   c1c86:	4b21      	ldr	r3, [pc, #132]	; (c1d0c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5a0>)
   c1c88:	9301      	str	r3, [sp, #4]
   c1c8a:	4b29      	ldr	r3, [pc, #164]	; (c1d30 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c4>)
   c1c8c:	9300      	str	r3, [sp, #0]
   c1c8e:	6965      	ldr	r5, [r4, #20]
   c1c90:	f240 13c3 	movw	r3, #451	; 0x1c3
   c1c94:	e5a6      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
   c1c96:	685a      	ldr	r2, [r3, #4]
   c1c98:	42b2      	cmp	r2, r6
   c1c9a:	d009      	beq.n	c1cb0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>
   c1c9c:	4b14      	ldr	r3, [pc, #80]	; (c1cf0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x584>)
   c1c9e:	9301      	str	r3, [sp, #4]
   c1ca0:	e9cd 2602 	strd	r2, r6, [sp, #8]
   c1ca4:	4b23      	ldr	r3, [pc, #140]	; (c1d34 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5c8>)
   c1ca6:	9300      	str	r3, [sp, #0]
   c1ca8:	6965      	ldr	r5, [r4, #20]
   c1caa:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   c1cae:	e599      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   c1cb0:	689b      	ldr	r3, [r3, #8]
   c1cb2:	454b      	cmp	r3, r9
   c1cb4:	d009      	beq.n	c1cca <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x55e>
   c1cb6:	e9cd 3902 	strd	r3, r9, [sp, #8]
   c1cba:	4b1f      	ldr	r3, [pc, #124]	; (c1d38 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5cc>)
   c1cbc:	9301      	str	r3, [sp, #4]
   c1cbe:	4b1f      	ldr	r3, [pc, #124]	; (c1d3c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x5d0>)
   c1cc0:	9300      	str	r3, [sp, #0]
   c1cc2:	6965      	ldr	r5, [r4, #20]
   c1cc4:	f240 13c5 	movw	r3, #453	; 0x1c5
   c1cc8:	e58c      	b.n	c17e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  return kTfLiteOk;
   c1cca:	2500      	movs	r5, #0
   c1ccc:	e565      	b.n	c179a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   c1cce:	bf00      	nop
   c1cd0:	000c8bff 	.word	0x000c8bff
   c1cd4:	000c9368 	.word	0x000c9368
   c1cd8:	000c9209 	.word	0x000c9209
   c1cdc:	000c8fdc 	.word	0x000c8fdc
   c1ce0:	000c7067 	.word	0x000c7067
   c1ce4:	000c84e4 	.word	0x000c84e4
   c1ce8:	000c9251 	.word	0x000c9251
   c1cec:	000c9269 	.word	0x000c9269
   c1cf0:	000c9135 	.word	0x000c9135
   c1cf4:	000c92c7 	.word	0x000c92c7
   c1cf8:	000c92ee 	.word	0x000c92ee
   c1cfc:	000c8bee 	.word	0x000c8bee
   c1d00:	000c930c 	.word	0x000c930c
   c1d04:	000c9333 	.word	0x000c9333
   c1d08:	000c935a 	.word	0x000c935a
   c1d0c:	000c8d08 	.word	0x000c8d08
   c1d10:	000c937b 	.word	0x000c937b
   c1d14:	000c916e 	.word	0x000c916e
   c1d18:	000c93a5 	.word	0x000c93a5
   c1d1c:	000c93cf 	.word	0x000c93cf
   c1d20:	000c93db 	.word	0x000c93db
   c1d24:	000c8967 	.word	0x000c8967
   c1d28:	000c9405 	.word	0x000c9405
   c1d2c:	000c8588 	.word	0x000c8588
   c1d30:	000c941b 	.word	0x000c941b
   c1d34:	000c9431 	.word	0x000c9431
   c1d38:	000c90d5 	.word	0x000c90d5
   c1d3c:	000c9447 	.word	0x000c9447

000c1d40 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1d44:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d48:	f8d1 e000 	ldr.w	lr, [r1]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   c1d4c:	694b      	ldr	r3, [r1, #20]
   c1d4e:	f8d0 c008 	ldr.w	ip, [r0, #8]
   c1d52:	f8de 2008 	ldr.w	r2, [lr, #8]
   c1d56:	f8de 6004 	ldr.w	r6, [lr, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c1d5a:	b097      	sub	sp, #92	; 0x5c
   c1d5c:	4605      	mov	r5, r0
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   c1d5e:	930a      	str	r3, [sp, #40]	; 0x28
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c1d60:	f8de 3010 	ldr.w	r3, [lr, #16]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d64:	2038      	movs	r0, #56	; 0x38
  if (use_tensor) {
   c1d66:	1c5c      	adds	r4, r3, #1
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d68:	bf14      	ite	ne
   c1d6a:	fb00 c303 	mlane	r3, r0, r3, ip
  return nullptr;
   c1d6e:	2300      	moveq	r3, #0
   c1d70:	930d      	str	r3, [sp, #52]	; 0x34
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  // TODO(kreeger): Use input tensor as variable until scratch tensor allocation
  // has been implemented (cl/263032056)
  // TfLiteTensor* scratch = GetTemporary(context, node, /*index=*/0);
  TfLiteTensor* scratch = &context->tensors[node->inputs->data[5]];
   c1d72:	f8de 3018 	ldr.w	r3, [lr, #24]

  TfLiteTensor* activation_state =
      &context->tensors[node->inputs->data[kInputActivationStateTensor]];
   c1d76:	f8de 4014 	ldr.w	r4, [lr, #20]
  TfLiteTensor* scratch = &context->tensors[node->inputs->data[5]];
   c1d7a:	fb00 c303 	mla	r3, r0, r3, ip
   c1d7e:	930f      	str	r3, [sp, #60]	; 0x3c
  TfLiteTensor* activation_state =
   c1d80:	fb00 c304 	mla	r3, r0, r4, ip
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d84:	4342      	muls	r2, r0
   c1d86:	9309      	str	r3, [sp, #36]	; 0x24
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d88:	684b      	ldr	r3, [r1, #4]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d8a:	eb0c 0702 	add.w	r7, ip, r2
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d8e:	685b      	ldr	r3, [r3, #4]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (weights_feature->type) {
   c1d90:	f81c 2002 	ldrb.w	r2, [ip, r2]
   c1d94:	fb00 c303 	mla	r3, r0, r3, ip
   c1d98:	2a03      	cmp	r2, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1d9a:	fb00 c606 	mla	r6, r0, r6, ip
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c1d9e:	930e      	str	r3, [sp, #56]	; 0x38
   c1da0:	f000 80a0 	beq.w	c1ee4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   c1da4:	2a09      	cmp	r2, #9
   c1da6:	f000 809d 	beq.w	c1ee4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1a4>
   c1daa:	2a01      	cmp	r2, #1
   c1dac:	f040 816d 	bne.w	c208a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x34a>
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c1db0:	f8de 300c 	ldr.w	r3, [lr, #12]
   c1db4:	fb00 c303 	mla	r3, r0, r3, ip
   c1db8:	930c      	str	r3, [sp, #48]	; 0x30
  const int rank = params->rank;
   c1dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const int memory_size = weights_time->dims->data[1];
   c1dbc:	990c      	ldr	r1, [sp, #48]	; 0x30
  const int rank = params->rank;
   c1dbe:	681b      	ldr	r3, [r3, #0]
   c1dc0:	9310      	str	r3, [sp, #64]	; 0x40
  const int batch_size = input->dims->data[0];
   c1dc2:	68b3      	ldr	r3, [r6, #8]
  const int memory_size = weights_time->dims->data[1];
   c1dc4:	6889      	ldr	r1, [r1, #8]
  const int input_size = input->dims->data[1];
   c1dc6:	e9d3 a301 	ldrd	sl, r3, [r3, #4]
   c1dca:	930b      	str	r3, [sp, #44]	; 0x2c
  const int num_filters = weights_feature->dims->data[0];
   c1dcc:	68bb      	ldr	r3, [r7, #8]
  const int memory_size = weights_time->dims->data[1];
   c1dce:	6889      	ldr	r1, [r1, #8]
  const int num_filters = weights_feature->dims->data[0];
   c1dd0:	685a      	ldr	r2, [r3, #4]
  const int num_units = num_filters / rank;
   c1dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1dd4:	fb92 f3f3 	sdiv	r3, r2, r3
  for (int b = 0; b < batch_size; ++b) {
   c1dd8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   c1ddc:	fb01 fe02 	mul.w	lr, r1, r2
   c1de0:	3801      	subs	r0, #1
   c1de2:	ea4f 0b81 	mov.w	fp, r1, lsl #2
   c1de6:	f04f 0c00 	mov.w	ip, #0
      state_ptr[memory_size - 1] = 0.0f;
   c1dea:	f04f 0900 	mov.w	r9, #0
  for (int b = 0; b < batch_size; ++b) {
   c1dee:	45e2      	cmp	sl, ip
   c1df0:	dd17      	ble.n	c1e22 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
   c1df2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   c1df4:	b174      	cbz	r4, c1e14 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   c1df6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    for (int c = 0; c < num_filters; ++c) {
   c1dfa:	1c45      	adds	r5, r0, #1
   c1dfc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   c1e00:	f04f 0800 	mov.w	r8, #0
   c1e04:	4542      	cmp	r2, r8
   c1e06:	dd08      	ble.n	c1e1a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xda>
      state_ptr[memory_size - 1] = 0.0f;
   c1e08:	f845 9c04 	str.w	r9, [r5, #-4]
    for (int c = 0; c < num_filters; ++c) {
   c1e0c:	f108 0801 	add.w	r8, r8, #1
   c1e10:	445d      	add	r5, fp
   c1e12:	e7f7      	b.n	c1e04 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   c1e14:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   c1e18:	e7ef      	b.n	c1dfa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xba>
  for (int b = 0; b < batch_size; ++b) {
   c1e1a:	f10c 0c01 	add.w	ip, ip, #1
   c1e1e:	4470      	add	r0, lr
   c1e20:	e7e5      	b.n	c1dee <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xae>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1e22:	6878      	ldr	r0, [r7, #4]
   c1e24:	9012      	str	r0, [sp, #72]	; 0x48
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1e26:	9809      	ldr	r0, [sp, #36]	; 0x24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1e28:	6875      	ldr	r5, [r6, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1e2a:	b378      	cbz	r0, c1e8c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
   c1e2c:	6840      	ldr	r0, [r0, #4]
  float* result = &GetTensorData<float>(activation_state)[memory_size - 1];
   c1e2e:	f1ab 0604 	sub.w	r6, fp, #4
   c1e32:	4430      	add	r0, r6
  for (int i = 0; i < batch_size; ++i) {
   c1e34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   c1e36:	00b6      	lsls	r6, r6, #2
   c1e38:	9614      	str	r6, [sp, #80]	; 0x50
   c1e3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   c1e3c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   c1e40:	00b6      	lsls	r6, r6, #2
   c1e42:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
   c1e46:	9613      	str	r6, [sp, #76]	; 0x4c
   c1e48:	fb0b f60c 	mul.w	r6, fp, ip
   c1e4c:	9615      	str	r6, [sp, #84]	; 0x54
   c1e4e:	2700      	movs	r7, #0
   c1e50:	45ba      	cmp	sl, r7
   c1e52:	dd2f      	ble.n	c1eb4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x174>
    const float* matrix_ptr = matrix;
   c1e54:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
      const float* vector_in_batch = vector + i * input_size;
   c1e58:	4606      	mov	r6, r0
    for (int j = 0; j < num_filters; ++j) {
   c1e5a:	f04f 0e00 	mov.w	lr, #0
   c1e5e:	4572      	cmp	r2, lr
   c1e60:	dd22      	ble.n	c1ea8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x168>
      float dot_prod = 0.0f;
   c1e62:	ed9f 7a8f 	vldr	s14, [pc, #572]	; c20a0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x360>
   c1e66:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      const float* vector_in_batch = vector + i * input_size;
   c1e6a:	46ac      	mov	ip, r5
      for (int k = 0; k < input_size; ++k) {
   c1e6c:	f04f 0900 	mov.w	r9, #0
   c1e70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c1e72:	454c      	cmp	r4, r9
   c1e74:	dd0c      	ble.n	c1e90 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
        dot_prod += *matrix_ptr++ * *vector_in_batch++;
   c1e76:	9c11      	ldr	r4, [sp, #68]	; 0x44
   c1e78:	ecfc 7a01 	vldmia	ip!, {s15}
   c1e7c:	ecf4 6a01 	vldmia	r4!, {s13}
      for (int k = 0; k < input_size; ++k) {
   c1e80:	f109 0901 	add.w	r9, r9, #1
        dot_prod += *matrix_ptr++ * *vector_in_batch++;
   c1e84:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c1e88:	9411      	str	r4, [sp, #68]	; 0x44
      for (int k = 0; k < input_size; ++k) {
   c1e8a:	e7f1      	b.n	c1e70 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x130>
   c1e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   c1e8e:	e7ce      	b.n	c1e2e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
      *result_in_batch += dot_prod;
   c1e90:	edd6 7a00 	vldr	s15, [r6]
   c1e94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   c1e96:	ee77 7a87 	vadd.f32	s15, s15, s14
   c1e9a:	44a0      	add	r8, r4
   c1e9c:	edc6 7a00 	vstr	s15, [r6]
    for (int j = 0; j < num_filters; ++j) {
   c1ea0:	f10e 0e01 	add.w	lr, lr, #1
      result_in_batch += memory_size;
   c1ea4:	445e      	add	r6, fp
    for (int j = 0; j < num_filters; ++j) {
   c1ea6:	e7da      	b.n	c1e5e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x11e>
   c1ea8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   c1eaa:	4420      	add	r0, r4
  for (int i = 0; i < batch_size; ++i) {
   c1eac:	9c14      	ldr	r4, [sp, #80]	; 0x50
   c1eae:	3701      	adds	r7, #1
   c1eb0:	4425      	add	r5, r4
   c1eb2:	e7cd      	b.n	c1e50 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x110>
  ApplyTimeWeightsBiasAndActivation(
   c1eb4:	980e      	ldr	r0, [sp, #56]	; 0x38
   c1eb6:	9006      	str	r0, [sp, #24]
   c1eb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   c1eba:	9005      	str	r0, [sp, #20]
   c1ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
   c1ebe:	9004      	str	r0, [sp, #16]
   c1ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1ec2:	7900      	ldrb	r0, [r0, #4]
   c1ec4:	9003      	str	r0, [sp, #12]
   c1ec6:	980d      	ldr	r0, [sp, #52]	; 0x34
   c1ec8:	9002      	str	r0, [sp, #8]
   c1eca:	980c      	ldr	r0, [sp, #48]	; 0x30
   c1ecc:	9001      	str	r0, [sp, #4]
   c1ece:	9810      	ldr	r0, [sp, #64]	; 0x40
   c1ed0:	9000      	str	r0, [sp, #0]
   c1ed2:	4650      	mov	r0, sl
  ApplyTimeWeightsBiasAndActivation(
   c1ed4:	f7ff fb34 	bl	c1540 <_ZN6tflite3ops5micro4svdf12_GLOBAL__N_1L33ApplyTimeWeightsBiasAndActivationEiiiiiPK12TfLiteTensorS6_21TfLiteFusedActivationPS4_S8_S8_>
      TfLiteTensor* scratch_float_weights_time = GetTemporary(context, node, 3);
      EvalHybridSVDF(context, node, input, weights_feature,
                     scratch_float_weights_time, bias, params, scratch,
                     scratch_scaling_factors, scratch_input_quantized,
                     activation_state, output);
      return kTfLiteOk;
   c1ed8:	2000      	movs	r0, #0
      context->ReportError(context, "Type %s not currently supported.",
                           TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   c1eda:	b017      	add	sp, #92	; 0x5c
   c1edc:	ecbd 8b02 	vpop	{d8}
   c1ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node->temporaries->data[index])];
   c1ee4:	68c8      	ldr	r0, [r1, #12]
   c1ee6:	68c3      	ldr	r3, [r0, #12]
   c1ee8:	6885      	ldr	r5, [r0, #8]
   c1eea:	2138      	movs	r1, #56	; 0x38
   c1eec:	fb01 c803 	mla	r8, r1, r3, ip
   c1ef0:	6903      	ldr	r3, [r0, #16]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c1ef2:	6870      	ldr	r0, [r6, #4]
   c1ef4:	fb01 c303 	mla	r3, r1, r3, ip
   c1ef8:	9310      	str	r3, [sp, #64]	; 0x40
  const int rank = params->rank;
   c1efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1efc:	681b      	ldr	r3, [r3, #0]
   c1efe:	9311      	str	r3, [sp, #68]	; 0x44
  const int batch_size = input->dims->data[0];
   c1f00:	68b3      	ldr	r3, [r6, #8]
  const int input_size = input->dims->data[1];
   c1f02:	e9d3 9301 	ldrd	r9, r3, [r3, #4]
   c1f06:	930b      	str	r3, [sp, #44]	; 0x2c
  const int num_filters = weights_feature->dims->data[0];
   c1f08:	68bb      	ldr	r3, [r7, #8]
   c1f0a:	f8d3 b004 	ldr.w	fp, [r3, #4]
  const int num_units = num_filters / rank;
   c1f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c1f10:	fb9b f3f3 	sdiv	r3, fp, r3
   c1f14:	ee08 3a90 	vmov	s17, r3
  const int memory_size = weights_time->dims->data[1];
   c1f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1f1a:	689b      	ldr	r3, [r3, #8]
   c1f1c:	fb01 c505 	mla	r5, r1, r5, ip
   c1f20:	f8d3 a008 	ldr.w	sl, [r3, #8]
  if (weights_feature->type == kTfLiteUInt8) {
   c1f24:	687b      	ldr	r3, [r7, #4]
   c1f26:	9314      	str	r3, [sp, #80]	; 0x50
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c1f28:	b105      	cbz	r5, c1f2c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
   c1f2a:	686d      	ldr	r5, [r5, #4]
   c1f2c:	f1b8 0f00 	cmp.w	r8, #0
   c1f30:	d001      	beq.n	c1f36 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   c1f32:	f8d8 8004 	ldr.w	r8, [r8, #4]
  const float weights_feature_scale = weights_feature->params.scale;
   c1f36:	ed97 8a03 	vldr	s16, [r7, #12]
  for (int b = 0; b < batch_size; ++b) {
   c1f3a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   c1f3e:	ea4f 028a 	mov.w	r2, sl, lsl #2
   c1f42:	fb0a f70b 	mul.w	r7, sl, fp
   c1f46:	3b01      	subs	r3, #1
   c1f48:	920c      	str	r2, [sp, #48]	; 0x30
   c1f4a:	2100      	movs	r1, #0
      state_ptr[memory_size - 1] = 0.0;
   c1f4c:	f04f 0e00 	mov.w	lr, #0
  for (int b = 0; b < batch_size; ++b) {
   c1f50:	4589      	cmp	r9, r1
   c1f52:	dc13      	bgt.n	c1f7c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x23c>
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1f56:	4601      	mov	r1, r0
   c1f58:	fb03 f709 	mul.w	r7, r3, r9
   c1f5c:	2200      	movs	r2, #0
  bool is_zero_vector = true;
   c1f5e:	2301      	movs	r3, #1
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1f60:	4297      	cmp	r7, r2
   c1f62:	dd23      	ble.n	c1fac <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x26c>
   c1f64:	b323      	cbz	r3, c1fb0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x270>
    if (input_ptr_batch[i] != 0.0f) {
   c1f66:	ecf1 7a01 	vldmia	r1!, {s15}
   c1f6a:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1f72:	bf0c      	ite	eq
   c1f74:	2301      	moveq	r3, #1
   c1f76:	2300      	movne	r3, #0
  for (int i = 0; i < batch_size * input_size && is_zero_vector; ++i) {
   c1f78:	3201      	adds	r2, #1
   c1f7a:	e7f1      	b.n	c1f60 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x220>
   c1f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c1f7e:	b17a      	cbz	r2, c1fa0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x260>
   c1f80:	f8d2 c004 	ldr.w	ip, [r2, #4]
    for (int c = 0; c < num_filters; ++c) {
   c1f84:	1c5a      	adds	r2, r3, #1
   c1f86:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   c1f8a:	f04f 0c00 	mov.w	ip, #0
   c1f8e:	45e3      	cmp	fp, ip
   c1f90:	dd09      	ble.n	c1fa6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x266>
      state_ptr[memory_size - 1] = 0.0;
   c1f92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1f94:	f842 ec04 	str.w	lr, [r2, #-4]
    for (int c = 0; c < num_filters; ++c) {
   c1f98:	f10c 0c01 	add.w	ip, ip, #1
   c1f9c:	4422      	add	r2, r4
   c1f9e:	e7f6      	b.n	c1f8e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
   c1fa0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   c1fa4:	e7ee      	b.n	c1f84 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x244>
  for (int b = 0; b < batch_size; ++b) {
   c1fa6:	3101      	adds	r1, #1
   c1fa8:	443b      	add	r3, r7
   c1faa:	e7d1      	b.n	c1f50 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x210>
  if (!is_zero_vector) {
   c1fac:	2b00      	cmp	r3, #0
   c1fae:	d157      	bne.n	c2060 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x320>
    SignedSymmetricPerChannelQuantize(input_ptr_batch, input->dims, 0,
   c1fb0:	f8cd 8000 	str.w	r8, [sp]
   c1fb4:	68b1      	ldr	r1, [r6, #8]
   c1fb6:	462b      	mov	r3, r5
   c1fb8:	2200      	movs	r2, #0
   c1fba:	f7f3 fb03 	bl	b55c4 <_ZN6tflite33SignedSymmetricPerChannelQuantizeEPKfP14TfLiteIntArrayiPaPf>
    for (int b = 0; b < batch_size; ++b) {
   c1fbe:	4643      	mov	r3, r8
    SignedSymmetricPerChannelQuantize(input_ptr_batch, input->dims, 0,
   c1fc0:	4641      	mov	r1, r8
    for (int b = 0; b < batch_size; ++b) {
   c1fc2:	2200      	movs	r2, #0
   c1fc4:	4591      	cmp	r9, r2
   c1fc6:	dd07      	ble.n	c1fd8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x298>
      scaling_factors_ptr[b] *= weights_feature_scale;
   c1fc8:	edd1 7a00 	vldr	s15, [r1]
   c1fcc:	ee68 7a27 	vmul.f32	s15, s16, s15
    for (int b = 0; b < batch_size; ++b) {
   c1fd0:	3201      	adds	r2, #1
      scaling_factors_ptr[b] *= weights_feature_scale;
   c1fd2:	ece1 7a01 	vstmia	r1!, {s15}
    for (int b = 0; b < batch_size; ++b) {
   c1fd6:	e7f5      	b.n	c1fc4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x284>
   c1fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c1fda:	b342      	cbz	r2, c202e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
   c1fdc:	6852      	ldr	r2, [r2, #4]
    float* result = &GetTensorData<float>(activation_state)[memory_size - 1];
   c1fde:	990c      	ldr	r1, [sp, #48]	; 0x30
   c1fe0:	3904      	subs	r1, #4
   c1fe2:	440a      	add	r2, r1
    for (int i = 0; i < batch_size;
   c1fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
   c1fe6:	ea2b 7ceb 	bic.w	ip, fp, fp, asr #31
   c1fea:	fb01 f10c 	mul.w	r1, r1, ip
   c1fee:	9112      	str	r1, [sp, #72]	; 0x48
   c1ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c1ff2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   c1ff6:	2700      	movs	r7, #0
   c1ff8:	9115      	str	r1, [sp, #84]	; 0x54
   c1ffa:	45b9      	cmp	r9, r7
   c1ffc:	dd30      	ble.n	c2060 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x320>
      const float batch_scaling_factor = scaling_factors_ptr[i];
   c1ffe:	ecf3 6a01 	vldmia	r3!, {s13}
      const int8_t* row_ptr = weights_feature_ptr;
   c2002:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
      const float batch_scaling_factor = scaling_factors_ptr[i];
   c2006:	4616      	mov	r6, r2
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c2008:	f04f 0e00 	mov.w	lr, #0
   c200c:	45f3      	cmp	fp, lr
   c200e:	dd21      	ble.n	c2054 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x314>
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c2010:	2100      	movs	r1, #0
        int32_t dotprod = 0;
   c2012:	4608      	mov	r0, r1
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c2014:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c2016:	428c      	cmp	r4, r1
   c2018:	dd0b      	ble.n	c2032 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
          dotprod += (*row_ptr) * (quantized_input_ptr_batch[k]);
   c201a:	f918 4001 	ldrsb.w	r4, [r8, r1]
   c201e:	46a4      	mov	ip, r4
   c2020:	566c      	ldrsb	r4, [r5, r1]
   c2022:	9413      	str	r4, [sp, #76]	; 0x4c
   c2024:	9c13      	ldr	r4, [sp, #76]	; 0x4c
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c2026:	3101      	adds	r1, #1
          dotprod += (*row_ptr) * (quantized_input_ptr_batch[k]);
   c2028:	fb1c 0004 	smlabb	r0, ip, r4, r0
        for (int k = 0; k < input_size; ++k, ++row_ptr) {
   c202c:	e7f2      	b.n	c2014 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
   c202e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2030:	e7d5      	b.n	c1fde <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
        *result += dotprod * batch_scaling_factor;
   c2032:	ee07 0a90 	vmov	s15, r0
   c2036:	ed96 7a00 	vldr	s14, [r6]
   c203a:	9915      	ldr	r1, [sp, #84]	; 0x54
   c203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2040:	4488      	add	r8, r1
   c2042:	eea6 7aa7 	vfma.f32	s14, s13, s15
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c2046:	990c      	ldr	r1, [sp, #48]	; 0x30
   c2048:	f10e 0e01 	add.w	lr, lr, #1
        *result += dotprod * batch_scaling_factor;
   c204c:	ed86 7a00 	vstr	s14, [r6]
      for (int j = 0; j < num_filters; ++j, result += memory_size) {
   c2050:	440e      	add	r6, r1
   c2052:	e7db      	b.n	c200c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
   c2054:	9912      	ldr	r1, [sp, #72]	; 0x48
   c2056:	440a      	add	r2, r1
         ++i, quantized_input_ptr_batch += input_size) {
   c2058:	990b      	ldr	r1, [sp, #44]	; 0x2c
    for (int i = 0; i < batch_size;
   c205a:	3701      	adds	r7, #1
         ++i, quantized_input_ptr_batch += input_size) {
   c205c:	440d      	add	r5, r1
    for (int i = 0; i < batch_size;
   c205e:	e7cc      	b.n	c1ffa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
  ApplyTimeWeightsBiasAndActivation(
   c2060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c2062:	9306      	str	r3, [sp, #24]
   c2064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c2066:	9305      	str	r3, [sp, #20]
   c2068:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c206a:	9304      	str	r3, [sp, #16]
   c206c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c206e:	791b      	ldrb	r3, [r3, #4]
   c2070:	9303      	str	r3, [sp, #12]
   c2072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2074:	9302      	str	r3, [sp, #8]
   c2076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c2078:	9301      	str	r3, [sp, #4]
   c207a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c207c:	9300      	str	r3, [sp, #0]
   c207e:	465a      	mov	r2, fp
   c2080:	ee18 3a90 	vmov	r3, s17
   c2084:	4651      	mov	r1, sl
   c2086:	4648      	mov	r0, r9
   c2088:	e724      	b.n	c1ed4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x194>
      context->ReportError(context, "Type %s not currently supported.",
   c208a:	4610      	mov	r0, r2
   c208c:	696c      	ldr	r4, [r5, #20]
   c208e:	f7f2 fd79 	bl	b4b84 <TfLiteTypeGetName>
   c2092:	4904      	ldr	r1, [pc, #16]	; (c20a4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
   c2094:	4602      	mov	r2, r0
   c2096:	4628      	mov	r0, r5
   c2098:	47a0      	blx	r4
      return kTfLiteError;
   c209a:	2001      	movs	r0, #1
   c209c:	e71d      	b.n	c1eda <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x19a>
   c209e:	bf00      	nop
   c20a0:	00000000 	.word	0x00000000
   c20a4:	000c873a 	.word	0x000c873a

000c20a8 <_ZN6tflite3ops5micro13Register_SVDFEv>:

TfLiteRegistration* Register_SVDF() {
  static TfLiteRegistration r = {svdf::Init, svdf::Free, svdf::Prepare,
                                 svdf::Eval};
  return &r;
}
   c20a8:	4800      	ldr	r0, [pc, #0]	; (c20ac <_ZN6tflite3ops5micro13Register_SVDFEv+0x4>)
   c20aa:	4770      	bx	lr
   c20ac:	2003c570 	.word	0x2003c570

000c20b0 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  return nullptr;
}
   c20b0:	2000      	movs	r0, #0
   c20b2:	4770      	bx	lr

000c20b4 <_ZN6tflite3ops5micro14depthwise_conv4FreeEP13TfLiteContextPv>:

void Free(TfLiteContext* context, void* buffer) {}
   c20b4:	4770      	bx	lr

000c20b6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
   c20b6:	2000      	movs	r0, #0
   c20b8:	4770      	bx	lr

000c20ba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   c20ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c20be:	b0a1      	sub	sp, #132	; 0x84
   c20c0:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   c20c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c20c6:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   c20c8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c20cc:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   c20ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c20d2:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   c20d4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c20d8:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   c20da:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c20de:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   c20e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c20e4:	9313      	str	r3, [sp, #76]	; 0x4c
  const int depth_multiplier = params.depth_multiplier;
   c20e6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c20ea:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   c20ec:	6943      	ldr	r3, [r0, #20]
   c20ee:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   c20f0:	69c3      	ldr	r3, [r0, #28]
   c20f2:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   c20f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c20f6:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   c20f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c20fa:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c20fc:	f8d9 3000 	ldr.w	r3, [r9]
    int8* output_data) {
   c2100:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   c2102:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2104:	2b04      	cmp	r3, #4
    int8* output_data) {
   c2106:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c210a:	d001      	beq.n	c2110 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   c210c:	f002 fbc6 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c2110:	6833      	ldr	r3, [r6, #0]
   c2112:	2b04      	cmp	r3, #4
   c2114:	d1fa      	bne.n	c210c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c2116:	683b      	ldr	r3, [r7, #0]
   c2118:	2b04      	cmp	r3, #4
   c211a:	d1f7      	bne.n	c210c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c211c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   c2120:	4293      	cmp	r3, r2
   c2122:	dcf3      	bgt.n	c210c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2124:	2300      	movs	r3, #0
   c2126:	4619      	mov	r1, r3
   c2128:	463a      	mov	r2, r7
   c212a:	4648      	mov	r0, r9
   c212c:	f7f6 fe39 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2130:	2303      	movs	r3, #3
   c2132:	4619      	mov	r1, r3
   c2134:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2136:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2138:	4630      	mov	r0, r6
   c213a:	f7f6 fe32 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c213e:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2140:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   c2142:	4648      	mov	r0, r9
   c2144:	f7f4 f948 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c2148:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c214a:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   c214c:	4648      	mov	r0, r9
   c214e:	f7f4 f943 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c2152:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c2154:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   c2156:	4648      	mov	r0, r9
   c2158:	f7f4 f93e 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c215c:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c215e:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   c2160:	4630      	mov	r0, r6
   c2162:	f7f4 f939 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c2166:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c2168:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   c216a:	4630      	mov	r0, r6
   c216c:	f7f4 f934 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c2170:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c2172:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   c2174:	4638      	mov	r0, r7
   c2176:	f7f4 f92f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c217a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c217c:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   c217e:	4638      	mov	r0, r7
   c2180:	f7f4 f92a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2184:	9b08      	ldr	r3, [sp, #32]
   c2186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   c2188:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c218a:	fb02 f503 	mul.w	r5, r2, r3
   c218e:	42a5      	cmp	r5, r4
   c2190:	d1bc      	bne.n	c210c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c2192:	982d      	ldr	r0, [sp, #180]	; 0xb4
   c2194:	f7f8 f907 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c2198:	42a8      	cmp	r0, r5
   c219a:	d1b7      	bne.n	c210c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   c219c:	f04f 0b00 	mov.w	fp, #0
   c21a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c21a2:	459b      	cmp	fp, r3
   c21a4:	f280 80a1 	bge.w	c22ea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x230>
   c21a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c21aa:	425b      	negs	r3, r3
   c21ac:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c21ae:	2300      	movs	r3, #0
   c21b0:	9303      	str	r3, [sp, #12]
   c21b2:	9b03      	ldr	r3, [sp, #12]
   c21b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   c21b6:	4293      	cmp	r3, r2
   c21b8:	f280 8094 	bge.w	c22e4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
   c21bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c21be:	425b      	negs	r3, r3
   c21c0:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c21c2:	2300      	movs	r3, #0
   c21c4:	9304      	str	r3, [sp, #16]
   c21c6:	9b04      	ldr	r3, [sp, #16]
   c21c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   c21ca:	4293      	cmp	r3, r2
   c21cc:	f280 8082 	bge.w	c22d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
   c21d0:	2300      	movs	r3, #0
   c21d2:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   c21d4:	9305      	str	r3, [sp, #20]
   c21d6:	9b05      	ldr	r3, [sp, #20]
   c21d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c21da:	4293      	cmp	r3, r2
   c21dc:	da72      	bge.n	c22c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
   c21de:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   c21e0:	9b02      	ldr	r3, [sp, #8]
   c21e2:	9a08      	ldr	r2, [sp, #32]
   c21e4:	1ae3      	subs	r3, r4, r3
   c21e6:	429a      	cmp	r2, r3
   c21e8:	dd64      	ble.n	c22b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fa>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   c21ea:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   c21ec:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c21f0:	9506      	str	r5, [sp, #24]
   c21f2:	9b06      	ldr	r3, [sp, #24]
   c21f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c21f6:	4293      	cmp	r3, r2
   c21f8:	da38      	bge.n	c226c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c21fa:	2300      	movs	r3, #0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c21fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2200:	9307      	str	r3, [sp, #28]
   c2202:	9b07      	ldr	r3, [sp, #28]
   c2204:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c2206:	4293      	cmp	r3, r2
   c2208:	da2a      	bge.n	c2260 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c220a:	f1b8 0f00 	cmp.w	r8, #0
   c220e:	db21      	blt.n	c2254 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c2210:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2212:	4543      	cmp	r3, r8
   c2214:	dd1e      	ble.n	c2254 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c2216:	f1ba 0f00 	cmp.w	sl, #0
   c221a:	db1b      	blt.n	c2254 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   c221c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c221e:	4553      	cmp	r3, sl
   c2220:	dd18      	ble.n	c2254 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   c2222:	9b05      	ldr	r3, [sp, #20]
   c2224:	9300      	str	r3, [sp, #0]
   c2226:	4652      	mov	r2, sl
   c2228:	4643      	mov	r3, r8
   c222a:	4659      	mov	r1, fp
   c222c:	4648      	mov	r0, r9
   c222e:	f7f4 f93a 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   c2232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   c2236:	9014      	str	r0, [sp, #80]	; 0x50
                  int32 filter_val = filter_data[Offset(
   c2238:	9400      	str	r4, [sp, #0]
   c223a:	2100      	movs	r1, #0
   c223c:	4630      	mov	r0, r6
   c223e:	f7f4 f932 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   c2242:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2244:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   c2246:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   c2248:	9a15      	ldr	r2, [sp, #84]	; 0x54
   c224a:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   c224c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   c224e:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   c2250:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2254:	9b07      	ldr	r3, [sp, #28]
   c2256:	3301      	adds	r3, #1
   c2258:	9307      	str	r3, [sp, #28]
   c225a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c225c:	4498      	add	r8, r3
   c225e:	e7d0      	b.n	c2202 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2260:	9b06      	ldr	r3, [sp, #24]
   c2262:	3301      	adds	r3, #1
   c2264:	9306      	str	r3, [sp, #24]
   c2266:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2268:	449a      	add	sl, r3
   c226a:	e7c2      	b.n	c21f2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   c226c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c226e:	b113      	cbz	r3, c2276 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   c2270:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c2274:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   c2276:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   c2278:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   c227c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   c227e:	4628      	mov	r0, r5
   c2280:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   c2284:	f7f8 f8a0 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   c2288:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
            acc = MultiplyByQuantizedMultiplier(
   c228c:	4605      	mov	r5, r0
            output_data[Offset(output_shape, batch, out_y, out_x,
   c228e:	9400      	str	r4, [sp, #0]
   c2290:	4659      	mov	r1, fp
   c2292:	4638      	mov	r0, r7
   c2294:	f7f4 f907 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            acc += output_offset;
   c2298:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c229a:	441d      	add	r5, r3
                               output_channel)] = static_cast<int8_t>(acc);
   c229c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c229e:	429d      	cmp	r5, r3
   c22a0:	bfb8      	it	lt
   c22a2:	461d      	movlt	r5, r3
   c22a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c22a6:	429d      	cmp	r5, r3
   c22a8:	bfa8      	it	ge
   c22aa:	461d      	movge	r5, r3
   c22ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   c22ae:	3401      	adds	r4, #1
   c22b0:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   c22b2:	e795      	b.n	c21e0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   c22b4:	9b05      	ldr	r3, [sp, #20]
   c22b6:	9a08      	ldr	r2, [sp, #32]
   c22b8:	3301      	adds	r3, #1
   c22ba:	9305      	str	r3, [sp, #20]
   c22bc:	9b02      	ldr	r3, [sp, #8]
   c22be:	4413      	add	r3, r2
   c22c0:	9302      	str	r3, [sp, #8]
   c22c2:	e788      	b.n	c21d6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c22c4:	9b04      	ldr	r3, [sp, #16]
   c22c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c22c8:	3301      	adds	r3, #1
   c22ca:	9304      	str	r3, [sp, #16]
   c22cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c22ce:	4413      	add	r3, r2
   c22d0:	930a      	str	r3, [sp, #40]	; 0x28
   c22d2:	e778      	b.n	c21c6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c22d4:	9b03      	ldr	r3, [sp, #12]
   c22d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c22d8:	3301      	adds	r3, #1
   c22da:	9303      	str	r3, [sp, #12]
   c22dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c22de:	4413      	add	r3, r2
   c22e0:	9309      	str	r3, [sp, #36]	; 0x24
   c22e2:	e766      	b.n	c21b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   c22e4:	f10b 0b01 	add.w	fp, fp, #1
   c22e8:	e75a      	b.n	c21a0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   c22ea:	b021      	add	sp, #132	; 0x84
   c22ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c22f0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   c22f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c22f4:	ed2d 8b04 	vpush	{d8-d9}
   c22f8:	b09d      	sub	sp, #116	; 0x74
   c22fa:	4699      	mov	r9, r3
  const int stride_width = params.stride_width;
   c22fc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c2300:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   c2302:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c2306:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   c2308:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c230c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   c230e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c2312:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   c2314:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c2318:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   c231a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c231e:	9312      	str	r3, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   c2320:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c2324:	9307      	str	r3, [sp, #28]
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2326:	680b      	ldr	r3, [r1, #0]
    float* output_data) {
   c2328:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
  const float output_activation_min = params.float_activation_min;
   c232a:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
   c232e:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
    float* output_data) {
   c2332:	921b      	str	r2, [sp, #108]	; 0x6c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2334:	2b04      	cmp	r3, #4
    float* output_data) {
   c2336:	460c      	mov	r4, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2338:	d001      	beq.n	c233e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
   c233a:	f002 faaf 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c233e:	f8d9 3000 	ldr.w	r3, [r9]
   c2342:	2b04      	cmp	r3, #4
   c2344:	d1f9      	bne.n	c233a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c2346:	683b      	ldr	r3, [r7, #0]
   c2348:	2b04      	cmp	r3, #4
   c234a:	d1f6      	bne.n	c233a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c234c:	2300      	movs	r3, #0
   c234e:	4619      	mov	r1, r3
   c2350:	463a      	mov	r2, r7
   c2352:	4620      	mov	r0, r4
   c2354:	f7f6 fd25 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2358:	2303      	movs	r3, #3
   c235a:	4619      	mov	r1, r3
   c235c:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c235e:	9014      	str	r0, [sp, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2360:	4648      	mov	r0, r9
   c2362:	f7f6 fd1e 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c2366:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2368:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
   c236a:	4620      	mov	r0, r4
   c236c:	f7f4 f834 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c2370:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c2372:	9015      	str	r0, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
   c2374:	4620      	mov	r0, r4
   c2376:	f7f4 f82f 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c237a:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c237c:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = input_shape.Dims(3);
   c237e:	4620      	mov	r0, r4
   c2380:	f7f4 f82a 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c2384:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c2386:	900b      	str	r0, [sp, #44]	; 0x2c
  const int filter_height = filter_shape.Dims(1);
   c2388:	4648      	mov	r0, r9
   c238a:	f7f4 f825 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c238e:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c2390:	9017      	str	r0, [sp, #92]	; 0x5c
  const int filter_width = filter_shape.Dims(2);
   c2392:	4648      	mov	r0, r9
   c2394:	f7f4 f820 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c2398:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c239a:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
   c239c:	4638      	mov	r0, r7
   c239e:	f7f4 f81b 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c23a2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c23a4:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_width = output_shape.Dims(2);
   c23a6:	4638      	mov	r0, r7
   c23a8:	f7f4 f816 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c23ac:	9b07      	ldr	r3, [sp, #28]
   c23ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
   c23b0:	901a      	str	r0, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c23b2:	fb02 f603 	mul.w	r6, r2, r3
   c23b6:	42ae      	cmp	r6, r5
   c23b8:	d1bf      	bne.n	c233a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c23ba:	982b      	ldr	r0, [sp, #172]	; 0xac
   c23bc:	f7f7 fff3 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c23c0:	42b0      	cmp	r0, r6
   c23c2:	d1ba      	bne.n	c233a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
   c23c4:	eddf 9a5e 	vldr	s19, [pc, #376]	; c2540 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x250>
  for (int b = 0; b < batches; ++b) {
   c23c8:	2500      	movs	r5, #0
   c23ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c23cc:	429d      	cmp	r5, r3
   c23ce:	f280 80b1 	bge.w	c2534 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x244>
   c23d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c23d4:	425b      	negs	r3, r3
   c23d6:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c23d8:	2300      	movs	r3, #0
   c23da:	9302      	str	r3, [sp, #8]
   c23dc:	9b02      	ldr	r3, [sp, #8]
   c23de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c23e0:	4293      	cmp	r3, r2
   c23e2:	f280 80a5 	bge.w	c2530 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x240>
   c23e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c23e8:	425b      	negs	r3, r3
   c23ea:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c23ec:	2300      	movs	r3, #0
   c23ee:	9303      	str	r3, [sp, #12]
   c23f0:	9b03      	ldr	r3, [sp, #12]
   c23f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c23f4:	4293      	cmp	r3, r2
   c23f6:	f280 8093 	bge.w	c2520 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
   c23fa:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
   c23fc:	9604      	str	r6, [sp, #16]
   c23fe:	9b04      	ldr	r3, [sp, #16]
   c2400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2402:	4293      	cmp	r3, r2
   c2404:	f280 8084 	bge.w	c2510 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x220>
   c2408:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   c240a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   c240e:	9308      	str	r3, [sp, #32]
          for (int m = 0; m < depth_multiplier; m++) {
   c2410:	2300      	movs	r3, #0
   c2412:	9305      	str	r3, [sp, #20]
   c2414:	9b05      	ldr	r3, [sp, #20]
   c2416:	9a07      	ldr	r2, [sp, #28]
   c2418:	4293      	cmp	r3, r2
   c241a:	da73      	bge.n	c2504 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
            const int oc = m + ic * depth_multiplier;
   c241c:	4433      	add	r3, r6
   c241e:	930c      	str	r3, [sp, #48]	; 0x30
          for (int m = 0; m < depth_multiplier; m++) {
   c2420:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            float total = 0.f;
   c2424:	ed9f 8a46 	vldr	s16, [pc, #280]	; c2540 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x250>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2428:	2300      	movs	r3, #0
   c242a:	9306      	str	r3, [sp, #24]
   c242c:	9b06      	ldr	r3, [sp, #24]
   c242e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2430:	4293      	cmp	r3, r2
   c2432:	da3b      	bge.n	c24ac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
   c2434:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2438:	f04f 0b00 	mov.w	fp, #0
   c243c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c243e:	459b      	cmp	fp, r3
   c2440:	da2e      	bge.n	c24a0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c2442:	f1b8 0f00 	cmp.w	r8, #0
   c2446:	db26      	blt.n	c2496 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c2448:	9b16      	ldr	r3, [sp, #88]	; 0x58
   c244a:	4543      	cmp	r3, r8
   c244c:	dd23      	ble.n	c2496 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c244e:	f1ba 0f00 	cmp.w	sl, #0
   c2452:	db20      	blt.n	c2496 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
   c2454:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2456:	4553      	cmp	r3, sl
   c2458:	dd1d      	ble.n	c2496 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c245a:	9b04      	ldr	r3, [sp, #16]
   c245c:	9300      	str	r3, [sp, #0]
   c245e:	4652      	mov	r2, sl
   c2460:	4643      	mov	r3, r8
   c2462:	4629      	mov	r1, r5
   c2464:	4620      	mov	r0, r4
   c2466:	f7f4 f81e 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
   c246a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c246c:	9a06      	ldr	r2, [sp, #24]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c246e:	9013      	str	r0, [sp, #76]	; 0x4c
                  float filter_value = filter_data[Offset(
   c2470:	9300      	str	r3, [sp, #0]
   c2472:	2100      	movs	r1, #0
   c2474:	465b      	mov	r3, fp
   c2476:	4648      	mov	r0, r9
   c2478:	f7f4 f815 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c247c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c247e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c2480:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
   c2484:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
                  total += (input_value * filter_value);
   c2486:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
   c248a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   c248e:	edd0 7a00 	vldr	s15, [r0]
   c2492:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c2498:	f10b 0b01 	add.w	fp, fp, #1
   c249c:	4498      	add	r8, r3
   c249e:	e7cd      	b.n	c243c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14c>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c24a0:	9b06      	ldr	r3, [sp, #24]
   c24a2:	3301      	adds	r3, #1
   c24a4:	9306      	str	r3, [sp, #24]
   c24a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c24a8:	449a      	add	sl, r3
   c24aa:	e7bf      	b.n	c242c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13c>
            if (bias_data) {
   c24ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   c24ae:	b333      	cbz	r3, c24fe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
              bias_value = bias_data[oc];
   c24b0:	9b08      	ldr	r3, [sp, #32]
   c24b2:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c24b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c24b8:	9300      	str	r3, [sp, #0]
                ActivationFunctionWithMinMax(total + bias_value,
   c24ba:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c24be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	return __b;
   c24c2:	eeb4 8a68 	vcmp.f32	s16, s17
   c24c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24ca:	bf48      	it	mi
   c24cc:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   c24d0:	eeb4 9a48 	vcmp.f32	s18, s16
   c24d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24d8:	4629      	mov	r1, r5
   c24da:	4638      	mov	r0, r7
   c24dc:	bf48      	it	mi
   c24de:	eeb0 8a49 	vmovmi.f32	s16, s18
   c24e2:	f7f3 ffe0 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c24e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c24e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
          for (int m = 0; m < depth_multiplier; m++) {
   c24ec:	9b05      	ldr	r3, [sp, #20]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c24ee:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
   c24f2:	3301      	adds	r3, #1
   c24f4:	9305      	str	r3, [sp, #20]
   c24f6:	9b08      	ldr	r3, [sp, #32]
   c24f8:	3304      	adds	r3, #4
   c24fa:	9308      	str	r3, [sp, #32]
   c24fc:	e78a      	b.n	c2414 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
            float bias_value = 0.0f;
   c24fe:	eef0 7a69 	vmov.f32	s15, s19
   c2502:	e7d8      	b.n	c24b6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
        for (int ic = 0; ic < input_depth; ++ic) {
   c2504:	9b04      	ldr	r3, [sp, #16]
   c2506:	3301      	adds	r3, #1
   c2508:	9304      	str	r3, [sp, #16]
   c250a:	9b07      	ldr	r3, [sp, #28]
   c250c:	441e      	add	r6, r3
   c250e:	e776      	b.n	c23fe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2510:	9b03      	ldr	r3, [sp, #12]
   c2512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2514:	3301      	adds	r3, #1
   c2516:	9303      	str	r3, [sp, #12]
   c2518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c251a:	4413      	add	r3, r2
   c251c:	9309      	str	r3, [sp, #36]	; 0x24
   c251e:	e767      	b.n	c23f0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c2520:	9b02      	ldr	r3, [sp, #8]
   c2522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c2524:	3301      	adds	r3, #1
   c2526:	9302      	str	r3, [sp, #8]
   c2528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c252a:	4413      	add	r3, r2
   c252c:	930a      	str	r3, [sp, #40]	; 0x28
   c252e:	e755      	b.n	c23dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xec>
  for (int b = 0; b < batches; ++b) {
   c2530:	3501      	adds	r5, #1
   c2532:	e74a      	b.n	c23ca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
          }
        }
      }
    }
  }
}
   c2534:	b01d      	add	sp, #116	; 0x74
   c2536:	ecbd 8b04 	vpop	{d8-d9}
   c253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c253e:	bf00      	nop
   c2540:	00000000 	.word	0x00000000

000c2544 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:

TfLiteRegistration* Register_DEPTHWISE_CONV_2D() {
  static TfLiteRegistration r = {depthwise_conv::Init, depthwise_conv::Free,
                                 depthwise_conv::Prepare, depthwise_conv::Eval};
  return &r;
}
   c2544:	4800      	ldr	r0, [pc, #0]	; (c2548 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x4>)
   c2546:	4770      	bx	lr
   c2548:	2003c590 	.word	0x2003c590

000c254c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>:
         right_shift;
}

template <DepthwiseConvOutputRounding output_rounding>
struct DepthwiseConvBasicKernel {
  static inline void Run(const DepthwiseParams& params,
   c254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2550:	ed2d 8b02 	vpush	{d8}
   c2554:	b0a1      	sub	sp, #132	; 0x84
   c2556:	469a      	mov	sl, r3
                         const uint8* input_data,
                         const RuntimeShape& filter_shape,
                         const uint8* filter_data,
                         const RuntimeShape& bias_shape, const int32* bias_data,
                         const RuntimeShape& output_shape, uint8* output_data) {
    const int stride_width = params.stride_width;
   c2558:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c255c:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   c255e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c2562:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   c2564:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c2568:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   c256a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   c256e:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   c2570:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   c2574:	9312      	str	r3, [sp, #72]	; 0x48
    const int pad_height = params.padding_values.height;
   c2576:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   c257a:	9313      	str	r3, [sp, #76]	; 0x4c
    const int depth_multiplier = params.depth_multiplier;
   c257c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   c2580:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   c2582:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c2584:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   c2586:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c2588:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   c258a:	6943      	ldr	r3, [r0, #20]
   c258c:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   c258e:	6983      	ldr	r3, [r0, #24]
   c2590:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   c2592:	69c3      	ldr	r3, [r0, #28]
   c2594:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   c2596:	6a03      	ldr	r3, [r0, #32]
  static inline void Run(const DepthwiseParams& params,
   c2598:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
   c259a:	921f      	str	r2, [sp, #124]	; 0x7c
    const int32 output_multiplier = params.output_multiplier;
   c259c:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   c25a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   c25a2:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c25a6:	680b      	ldr	r3, [r1, #0]
   c25a8:	2b04      	cmp	r3, #4
  static inline void Run(const DepthwiseParams& params,
   c25aa:	4689      	mov	r9, r1
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c25ac:	d001      	beq.n	c25b2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x66>
   c25ae:	f002 f975 	bl	c489c <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c25b2:	f8da 3000 	ldr.w	r3, [sl]
   c25b6:	2b04      	cmp	r3, #4
   c25b8:	d1f9      	bne.n	c25ae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c25ba:	6833      	ldr	r3, [r6, #0]
   c25bc:	2b04      	cmp	r3, #4
   c25be:	d1f6      	bne.n	c25ae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>

    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c25c0:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   c25c4:	4293      	cmp	r3, r2
   c25c6:	dcf2      	bgt.n	c25ae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c25c8:	2300      	movs	r3, #0
   c25ca:	4619      	mov	r1, r3
   c25cc:	4632      	mov	r2, r6
   c25ce:	4648      	mov	r0, r9
   c25d0:	f7f6 fbe7 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c25d4:	2303      	movs	r3, #3
   c25d6:	4619      	mov	r1, r3
   c25d8:	4632      	mov	r2, r6
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c25da:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c25dc:	4650      	mov	r0, sl
   c25de:	f7f6 fbe0 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   c25e2:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c25e4:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   c25e6:	4648      	mov	r0, r9
   c25e8:	f7f3 fef6 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   c25ec:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   c25ee:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   c25f0:	4648      	mov	r0, r9
   c25f2:	f7f3 fef1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   c25f6:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   c25f8:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   c25fa:	4648      	mov	r0, r9
   c25fc:	f7f3 feec 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   c2600:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   c2602:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   c2604:	4650      	mov	r0, sl
   c2606:	f7f3 fee7 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   c260a:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   c260c:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   c260e:	4650      	mov	r0, sl
   c2610:	f7f3 fee2 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   c2614:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   c2616:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   c2618:	4630      	mov	r0, r6
   c261a:	f7f3 fedd 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   c261e:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   c2620:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   c2622:	4630      	mov	r0, r6
   c2624:	f7f3 fed8 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2628:	9b08      	ldr	r3, [sp, #32]
   c262a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    const int output_width = output_shape.Dims(2);
   c262c:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c262e:	fb02 f503 	mul.w	r5, r2, r3
   c2632:	42a5      	cmp	r5, r4
   c2634:	d1bb      	bne.n	c25ae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c2636:	982d      	ldr	r0, [sp, #180]	; 0xb4
   c2638:	f7f7 feb5 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c263c:	42a8      	cmp	r0, r5
   c263e:	d1b6      	bne.n	c25ae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x62>

    for (int b = 0; b < batches; ++b) {
   c2640:	f04f 0b00 	mov.w	fp, #0
   c2644:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c2646:	459b      	cmp	fp, r3
   c2648:	f280 809e 	bge.w	c2788 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x23c>
   c264c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c264e:	425b      	negs	r3, r3
   c2650:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_y = 0; out_y < output_height; ++out_y) {
   c2652:	2300      	movs	r3, #0
   c2654:	9303      	str	r3, [sp, #12]
   c2656:	9b03      	ldr	r3, [sp, #12]
   c2658:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   c265a:	4293      	cmp	r3, r2
   c265c:	f280 8091 	bge.w	c2782 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x236>
   c2660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c2662:	425b      	negs	r3, r3
   c2664:	930a      	str	r3, [sp, #40]	; 0x28
        for (int out_x = 0; out_x < output_width; ++out_x) {
   c2666:	2300      	movs	r3, #0
   c2668:	9304      	str	r3, [sp, #16]
   c266a:	9b04      	ldr	r3, [sp, #16]
   c266c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   c266e:	4293      	cmp	r3, r2
   c2670:	da7f      	bge.n	c2772 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x226>
   c2672:	2300      	movs	r3, #0
   c2674:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   c2676:	9305      	str	r3, [sp, #20]
   c2678:	9b05      	ldr	r3, [sp, #20]
   c267a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c267c:	4293      	cmp	r3, r2
   c267e:	da70      	bge.n	c2762 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x216>
   c2680:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   c2682:	9b02      	ldr	r3, [sp, #8]
   c2684:	9a08      	ldr	r2, [sp, #32]
   c2686:	1ae3      	subs	r3, r4, r3
   c2688:	429a      	cmp	r2, r3
   c268a:	dd62      	ble.n	c2752 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x206>
              const int oc = m + ic * depth_multiplier;
              const int in_x_origin = (out_x * stride_width) - pad_width;
              const int in_y_origin = (out_y * stride_height) - pad_height;
              int32 acc = 0;
   c268c:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   c268e:	9f09      	ldr	r7, [sp, #36]	; 0x24
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2690:	9506      	str	r5, [sp, #24]
   c2692:	9b06      	ldr	r3, [sp, #24]
   c2694:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c2696:	4293      	cmp	r3, r2
   c2698:	da39      	bge.n	c270e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c269a:	2300      	movs	r3, #0
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c269c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c26a0:	9307      	str	r3, [sp, #28]
   c26a2:	9b07      	ldr	r3, [sp, #28]
   c26a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   c26a6:	4293      	cmp	r3, r2
   c26a8:	da2b      	bge.n	c2702 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1b6>
                      in_x_origin + dilation_width_factor * filter_x;
                  const int in_y =
                      in_y_origin + dilation_height_factor * filter_y;
                  // If the location is outside the bounds of the input image,
                  // use zero as a default value.
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   c26aa:	f1b8 0f00 	cmp.w	r8, #0
   c26ae:	db22      	blt.n	c26f6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c26b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   c26b2:	4543      	cmp	r3, r8
   c26b4:	dd1f      	ble.n	c26f6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c26b6:	2f00      	cmp	r7, #0
   c26b8:	db1d      	blt.n	c26f6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
   c26ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c26bc:	42bb      	cmp	r3, r7
   c26be:	dd1a      	ble.n	c26f6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1aa>
                      (in_y < input_height)) {
                    int32 input_val =
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c26c0:	9b05      	ldr	r3, [sp, #20]
   c26c2:	9300      	str	r3, [sp, #0]
   c26c4:	463a      	mov	r2, r7
   c26c6:	4643      	mov	r3, r8
   c26c8:	4659      	mov	r1, fp
   c26ca:	4648      	mov	r0, r9
   c26cc:	f7f3 feeb 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   c26d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   c26d4:	9014      	str	r0, [sp, #80]	; 0x50
                    int32 filter_val = filter_data[Offset(
   c26d6:	2100      	movs	r1, #0
   c26d8:	9400      	str	r4, [sp, #0]
   c26da:	4650      	mov	r0, sl
   c26dc:	f7f3 fee3 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c26e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                        filter_shape, 0, filter_y, filter_x, oc)];
                    acc += (filter_val + filter_offset) *
   c26e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   c26e4:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   c26e6:	9914      	ldr	r1, [sp, #80]	; 0x50
                    acc += (filter_val + filter_offset) *
   c26e8:	4413      	add	r3, r2
                    int32 input_val =
   c26ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   c26ec:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   c26ee:	9915      	ldr	r1, [sp, #84]	; 0x54
   c26f0:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   c26f2:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c26f6:	9b07      	ldr	r3, [sp, #28]
   c26f8:	3301      	adds	r3, #1
   c26fa:	9307      	str	r3, [sp, #28]
   c26fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c26fe:	4498      	add	r8, r3
   c2700:	e7cf      	b.n	c26a2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2702:	9b06      	ldr	r3, [sp, #24]
   c2704:	3301      	adds	r3, #1
   c2706:	9306      	str	r3, [sp, #24]
   c2708:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c270a:	441f      	add	r7, r3
   c270c:	e7c1      	b.n	c2692 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x146>
                  }
                }
              }
              if (bias_data) {
   c270e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c2710:	b113      	cbz	r3, c2718 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1cc>
                acc += bias_data[oc];
   c2712:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c2716:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c2718:	ee18 2a90 	vmov	r2, s17
   c271c:	ee18 1a10 	vmov	r1, s16
   c2720:	4628      	mov	r0, r5
   c2722:	f7f7 fe51 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
                                                        output_shift);
              acc += output_offset;
              acc = std::max(acc, output_activation_min);
              acc = std::min(acc, output_activation_max);
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c2726:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c272a:	4605      	mov	r5, r0
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c272c:	9400      	str	r4, [sp, #0]
   c272e:	4659      	mov	r1, fp
   c2730:	4630      	mov	r0, r6
   c2732:	f7f3 feb8 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc += output_offset;
   c2736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2738:	441d      	add	r5, r3
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c273a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c273c:	429d      	cmp	r5, r3
   c273e:	bfb8      	it	lt
   c2740:	461d      	movlt	r5, r3
   c2742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2744:	429d      	cmp	r5, r3
   c2746:	bfa8      	it	ge
   c2748:	461d      	movge	r5, r3
   c274a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   c274c:	3401      	adds	r4, #1
   c274e:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   c2750:	e797      	b.n	c2682 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   c2752:	9b05      	ldr	r3, [sp, #20]
   c2754:	9a08      	ldr	r2, [sp, #32]
   c2756:	3301      	adds	r3, #1
   c2758:	9305      	str	r3, [sp, #20]
   c275a:	9b02      	ldr	r3, [sp, #8]
   c275c:	4413      	add	r3, r2
   c275e:	9302      	str	r3, [sp, #8]
   c2760:	e78a      	b.n	c2678 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   c2762:	9b04      	ldr	r3, [sp, #16]
   c2764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c2766:	3301      	adds	r3, #1
   c2768:	9304      	str	r3, [sp, #16]
   c276a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c276c:	4413      	add	r3, r2
   c276e:	930a      	str	r3, [sp, #40]	; 0x28
   c2770:	e77b      	b.n	c266a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   c2772:	9b03      	ldr	r3, [sp, #12]
   c2774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c2776:	3301      	adds	r3, #1
   c2778:	9303      	str	r3, [sp, #12]
   c277a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c277c:	4413      	add	r3, r2
   c277e:	9309      	str	r3, [sp, #36]	; 0x24
   c2780:	e769      	b.n	c2656 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   c2782:	f10b 0b01 	add.w	fp, fp, #1
   c2786:	e75d      	b.n	c2644 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xf8>
            }
          }
        }
      }
    }
  }
   c2788:	b021      	add	sp, #132	; 0x84
   c278a:	ecbd 8b02 	vpop	{d8}
   c278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000c2794 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c2794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2798:	ed2d 8b02 	vpush	{d8}
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c279c:	f8d1 a000 	ldr.w	sl, [r1]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c27a0:	f8d0 9008 	ldr.w	r9, [r0, #8]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c27a4:	f8da 3004 	ldr.w	r3, [sl, #4]
   c27a8:	f8da 6008 	ldr.w	r6, [sl, #8]
   c27ac:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
   c27b0:	2238      	movs	r2, #56	; 0x38
   c27b2:	4353      	muls	r3, r2
   c27b4:	930a      	str	r3, [sp, #40]	; 0x28
   c27b6:	eb09 0803 	add.w	r8, r9, r3
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   c27ba:	f8da 3000 	ldr.w	r3, [sl]
   c27be:	9109      	str	r1, [sp, #36]	; 0x24
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   c27c0:	2b03      	cmp	r3, #3
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c27c2:	bf08      	it	eq
   c27c4:	f8da 100c 	ldreq.w	r1, [sl, #12]
   c27c8:	fb02 9606 	mla	r6, r2, r6, r9
   c27cc:	bf08      	it	eq
   c27ce:	fb02 9b01 	mlaeq	fp, r2, r1, r9
  const TfLiteType data_type = input->type;
   c27d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c27d4:	f819 2002 	ldrb.w	r2, [r9, r2]
   c27d8:	920e      	str	r2, [sp, #56]	; 0x38
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   c27da:	bf18      	it	ne
   c27dc:	f04f 0b00 	movne.w	fp, #0
  if (input->type != kTfLiteFloat32) {
   c27e0:	2a01      	cmp	r2, #1
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   c27e2:	4604      	mov	r4, r0
  if (input->type != kTfLiteFloat32) {
   c27e4:	d02c      	beq.n	c2840 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xac>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   c27e6:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
   c27ea:	2d01      	cmp	r5, #1
   c27ec:	d00e      	beq.n	c280c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x78>
   c27ee:	2601      	movs	r6, #1
   c27f0:	4ba3      	ldr	r3, [pc, #652]	; (c2a80 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
   c27f2:	9301      	str	r3, [sp, #4]
   c27f4:	e9cd 5602 	strd	r5, r6, [sp, #8]
   c27f8:	4ba2      	ldr	r3, [pc, #648]	; (c2a84 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
   c27fa:	9300      	str	r3, [sp, #0]
   c27fc:	6945      	ldr	r5, [r0, #20]
   c27fe:	4aa2      	ldr	r2, [pc, #648]	; (c2a88 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c2800:	49a2      	ldr	r1, [pc, #648]	; (c2a8c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c2802:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   c2806:	47a8      	blx	r5
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, width, height,
   c2808:	2501      	movs	r5, #1
   c280a:	e00a      	b.n	c2822 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
    const auto* affine_quantization =
   c280c:	6b72      	ldr	r2, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   c280e:	b97a      	cbnz	r2, c2830 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   c2810:	4b9f      	ldr	r3, [pc, #636]	; (c2a90 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
   c2812:	9300      	str	r3, [sp, #0]
   c2814:	6946      	ldr	r6, [r0, #20]
   c2816:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    TF_LITE_ENSURE(context, affine_quantization->scale);
   c281a:	4a9b      	ldr	r2, [pc, #620]	; (c2a88 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c281c:	499d      	ldr	r1, [pc, #628]	; (c2a94 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   c281e:	4620      	mov	r0, r4
   c2820:	47b0      	blx	r6
}
   c2822:	4628      	mov	r0, r5
   c2824:	f50d 7d65 	add.w	sp, sp, #916	; 0x394
   c2828:	ecbd 8b02 	vpop	{d8}
   c282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   c2830:	6812      	ldr	r2, [r2, #0]
   c2832:	b92a      	cbnz	r2, c2840 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xac>
   c2834:	4b98      	ldr	r3, [pc, #608]	; (c2a98 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x304>)
   c2836:	9300      	str	r3, [sp, #0]
   c2838:	6946      	ldr	r6, [r0, #20]
   c283a:	f240 13d3 	movw	r3, #467	; 0x1d3
   c283e:	e7ec      	b.n	c281a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x86>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   c2840:	3b02      	subs	r3, #2
   c2842:	2b01      	cmp	r3, #1
   c2844:	d908      	bls.n	c2858 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   c2846:	4b95      	ldr	r3, [pc, #596]	; (c2a9c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x308>)
   c2848:	9300      	str	r3, [sp, #0]
   c284a:	6965      	ldr	r5, [r4, #20]
   c284c:	4a8e      	ldr	r2, [pc, #568]	; (c2a88 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c284e:	4991      	ldr	r1, [pc, #580]	; (c2a94 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   c2850:	2343      	movs	r3, #67	; 0x43
   c2852:	4620      	mov	r0, r4
   c2854:	47a8      	blx	r5
   c2856:	e7d7      	b.n	c2808 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c2858:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c285a:	685b      	ldr	r3, [r3, #4]
   c285c:	930b      	str	r3, [sp, #44]	; 0x2c
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   c285e:	681b      	ldr	r3, [r3, #0]
   c2860:	2b01      	cmp	r3, #1
   c2862:	d00d      	beq.n	c2880 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec>
   c2864:	2501      	movs	r5, #1
   c2866:	e9cd 3502 	strd	r3, r5, [sp, #8]
   c286a:	4b8d      	ldr	r3, [pc, #564]	; (c2aa0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
   c286c:	9301      	str	r3, [sp, #4]
   c286e:	4b8d      	ldr	r3, [pc, #564]	; (c2aa4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
   c2870:	9300      	str	r3, [sp, #0]
   c2872:	6966      	ldr	r6, [r4, #20]
   c2874:	4a84      	ldr	r2, [pc, #528]	; (c2a88 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
   c2876:	4985      	ldr	r1, [pc, #532]	; (c2a8c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
   c2878:	2344      	movs	r3, #68	; 0x44
   c287a:	4620      	mov	r0, r4
   c287c:	47b0      	blx	r6
   c287e:	e7d0      	b.n	c2822 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  auto* params =
   c2880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2882:	695d      	ldr	r5, [r3, #20]
   c2884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int out_width = ComputeOutSize(params->padding, width, filter_width,
   c2886:	782f      	ldrb	r7, [r5, #0]
   c2888:	685b      	ldr	r3, [r3, #4]
   c288a:	9315      	str	r3, [sp, #84]	; 0x54
  return t->dims->data[dim];
   c288c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2890:	68da      	ldr	r2, [r3, #12]
   c2892:	689b      	ldr	r3, [r3, #8]
   c2894:	9311      	str	r3, [sp, #68]	; 0x44
   c2896:	68b3      	ldr	r3, [r6, #8]
   c2898:	9212      	str	r2, [sp, #72]	; 0x48
   c289a:	68da      	ldr	r2, [r3, #12]
   c289c:	689b      	ldr	r3, [r3, #8]
   c289e:	930f      	str	r3, [sp, #60]	; 0x3c
   c28a0:	686b      	ldr	r3, [r5, #4]
   c28a2:	930c      	str	r3, [sp, #48]	; 0x30
  int out_height = ComputeOutSize(params->padding, height, filter_height,
   c28a4:	68ab      	ldr	r3, [r5, #8]
   c28a6:	930d      	str	r3, [sp, #52]	; 0x34
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c28a8:	69ab      	ldr	r3, [r5, #24]
   c28aa:	9313      	str	r3, [sp, #76]	; 0x4c
   c28ac:	696b      	ldr	r3, [r5, #20]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   c28ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   c28b0:	9314      	str	r3, [sp, #80]	; 0x50
   c28b2:	9300      	str	r3, [sp, #0]
   c28b4:	4638      	mov	r0, r7
   c28b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c28b8:	9210      	str	r2, [sp, #64]	; 0x40
   c28ba:	f7f6 feb7 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   c28be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c28c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c28c2:	9911      	ldr	r1, [sp, #68]	; 0x44
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   c28c4:	9016      	str	r0, [sp, #88]	; 0x58
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   c28c6:	9300      	str	r3, [sp, #0]
   c28c8:	4638      	mov	r0, r7
   c28ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c28cc:	f7f6 feae 	bl	b962c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c28d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c28d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c28d4:	9914      	ldr	r1, [sp, #80]	; 0x50
   c28d6:	1e5f      	subs	r7, r3, #1
   c28d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c28da:	435f      	muls	r7, r3
   c28dc:	3701      	adds	r7, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c28de:	1e43      	subs	r3, r0, #1
   c28e0:	fb02 7303 	mla	r3, r2, r3, r7
  int total_padding =
   c28e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c28e6:	1a9b      	subs	r3, r3, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c28e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   c28ea:	3a01      	subs	r2, #1
   c28ec:	434a      	muls	r2, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c28ee:	9916      	ldr	r1, [sp, #88]	; 0x58
   c28f0:	1e48      	subs	r0, r1, #1
   c28f2:	990c      	ldr	r1, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   c28f4:	3201      	adds	r2, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   c28f6:	fb01 2200 	mla	r2, r1, r0, r2
  int total_padding =
   c28fa:	9912      	ldr	r1, [sp, #72]	; 0x48
   c28fc:	1a52      	subs	r2, r2, r1
  total_padding = total_padding > 0 ? total_padding : 0;
   c28fe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
   c2902:	1051      	asrs	r1, r2, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   c2904:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2908:	915c      	str	r1, [sp, #368]	; 0x170
  return total_padding / 2;
   c290a:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
   c290c:	f003 0301 	and.w	r3, r3, #1
   c2910:	935f      	str	r3, [sp, #380]	; 0x17c
  if (data_type != kTfLiteFloat32) {
   c2912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c2914:	915d      	str	r1, [sp, #372]	; 0x174
   c2916:	f002 0201 	and.w	r2, r2, #1
  if (data_type != kTfLiteFloat32) {
   c291a:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   c291c:	925e      	str	r2, [sp, #376]	; 0x178
  if (data_type != kTfLiteFloat32) {
   c291e:	d177      	bne.n	c2a10 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c2920:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2922:	2738      	movs	r7, #56	; 0x38
   c2924:	fb07 9703 	mla	r7, r7, r3, r9
  switch (input->type) {  // Already know in/out types are same.
   c2928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c292a:	f819 a003 	ldrb.w	sl, [r9, r3]
   c292e:	f1ba 0f03 	cmp.w	sl, #3
   c2932:	f000 8117 	beq.w	c2b64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d0>
   c2936:	f1ba 0f09 	cmp.w	sl, #9
   c293a:	f000 80bb 	beq.w	c2ab4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x320>
   c293e:	f1ba 0f01 	cmp.w	sl, #1
   c2942:	f040 83f3 	bne.w	c312c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x998>
  CalculateActivationRange(params->activation, &output_activation_min,
   c2946:	7c2b      	ldrb	r3, [r5, #16]
  if (activation == kTfLiteActRelu) {
   c2948:	2b01      	cmp	r3, #1
   c294a:	f000 8090 	beq.w	c2a6e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
  } else if (activation == kTfLiteActRelu6) {
   c294e:	2b03      	cmp	r3, #3
   c2950:	f000 8092 	beq.w	c2a78 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2e4>
    *activation_max = std::numeric_limits<T>::max();
   c2954:	ed9f 7a54 	vldr	s14, [pc, #336]	; c2aa8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x314>
   c2958:	eddf 6a54 	vldr	s13, [pc, #336]	; c2aac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x318>
   c295c:	2b02      	cmp	r3, #2
   c295e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2962:	bf18      	it	ne
   c2964:	eef0 7a47 	vmovne.f32	s15, s14
   c2968:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c296c:	bf18      	it	ne
   c296e:	eeb0 7a66 	vmovne.f32	s14, s13
  op_params.padding_values.width = data->padding.width;
   c2972:	9a5c      	ldr	r2, [sp, #368]	; 0x170
   c2974:	f8ad 213a 	strh.w	r2, [sp, #314]	; 0x13a
  op_params.padding_type = PaddingType::kSame;
   c2978:	2301      	movs	r3, #1
  op_params.padding_values.height = data->padding.height;
   c297a:	9a5d      	ldr	r2, [sp, #372]	; 0x174
  op_params.padding_type = PaddingType::kSame;
   c297c:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
  op_params.padding_values.height = data->padding.height;
   c2980:	f8ad 213c 	strh.w	r2, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2984:	686a      	ldr	r2, [r5, #4]
   c2986:	f8ad 2142 	strh.w	r2, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c298a:	68aa      	ldr	r2, [r5, #8]
   c298c:	f8ad 2144 	strh.w	r2, [sp, #324]	; 0x144
  op_params.dilation_width_factor = 1;
   c2990:	f8ad 3146 	strh.w	r3, [sp, #326]	; 0x146
  op_params.dilation_height_factor = 1;
   c2994:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2998:	68eb      	ldr	r3, [r5, #12]
   c299a:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c299e:	4641      	mov	r1, r8
   c29a0:	a83a      	add	r0, sp, #232	; 0xe8
  op_params.float_activation_min = output_activation_min;
   c29a2:	ed8d 7a5a 	vstr	s14, [sp, #360]	; 0x168
  op_params.float_activation_max = output_activation_max;
   c29a6:	edcd 7a5b 	vstr	s15, [sp, #364]	; 0x16c
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c29aa:	ac44      	add	r4, sp, #272	; 0x110
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   c29ac:	f7f3 ffad 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c29b0:	4631      	mov	r1, r6
   c29b2:	a83f      	add	r0, sp, #252	; 0xfc
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c29b4:	f8d8 8004 	ldr.w	r8, [r8, #4]
   c29b8:	f7f3 ffa7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c29bc:	4659      	mov	r1, fp
   c29be:	4620      	mov	r0, r4
   c29c0:	6876      	ldr	r6, [r6, #4]
   c29c2:	f7f3 ffa2 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c29c6:	f1bb 0f00 	cmp.w	fp, #0
   c29ca:	d001      	beq.n	c29d0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x23c>
   c29cc:	f8db b004 	ldr.w	fp, [fp, #4]
   c29d0:	ad49      	add	r5, sp, #292	; 0x124
   c29d2:	4639      	mov	r1, r7
   c29d4:	4628      	mov	r0, r5
   c29d6:	f7f3 ff98 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c29da:	b107      	cbz	r7, c29de <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
   c29dc:	687f      	ldr	r7, [r7, #4]
  tflite::reference_ops::DepthwiseConv(
   c29de:	9600      	str	r6, [sp, #0]
   c29e0:	ab3f      	add	r3, sp, #252	; 0xfc
   c29e2:	4642      	mov	r2, r8
   c29e4:	a93a      	add	r1, sp, #232	; 0xe8
   c29e6:	a84e      	add	r0, sp, #312	; 0x138
   c29e8:	e9cd 5703 	strd	r5, r7, [sp, #12]
   c29ec:	e9cd 4b01 	strd	r4, fp, [sp, #4]
   c29f0:	f7ff fc7e 	bl	c22f0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   c29f4:	4628      	mov	r0, r5
   c29f6:	f7f3 fce4 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c29fa:	4620      	mov	r0, r4
   c29fc:	f7f3 fce1 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   c2a00:	a83f      	add	r0, sp, #252	; 0xfc
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2a02:	f7f3 fcde 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   c2a06:	a83a      	add	r0, sp, #232	; 0xe8
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2a08:	f7f3 fcdb 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   c2a0c:	2500      	movs	r5, #0
}
   c2a0e:	e708      	b.n	c2822 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  const bool use_tensor = node->inputs->data[index] != kOptionalTensor;
   c2a10:	f8da 000c 	ldr.w	r0, [sl, #12]
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2a14:	f8da 1004 	ldr.w	r1, [sl, #4]
   c2a18:	f8da 2008 	ldr.w	r2, [sl, #8]
  if (use_tensor) {
   c2a1c:	1c47      	adds	r7, r0, #1
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2a1e:	f04f 0338 	mov.w	r3, #56	; 0x38
   c2a22:	fb03 9101 	mla	r1, r3, r1, r9
   c2a26:	fb03 9202 	mla	r2, r3, r2, r9
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
   c2a2a:	bf18      	it	ne
   c2a2c:	fb03 9300 	mlane	r3, r3, r0, r9
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   c2a30:	a8a2      	add	r0, sp, #648	; 0x288
   c2a32:	9007      	str	r0, [sp, #28]
   c2a34:	a862      	add	r0, sp, #392	; 0x188
   c2a36:	9006      	str	r0, [sp, #24]
   c2a38:	a8e3      	add	r0, sp, #908	; 0x38c
   c2a3a:	9005      	str	r0, [sp, #20]
   c2a3c:	a8e2      	add	r0, sp, #904	; 0x388
   c2a3e:	9004      	str	r0, [sp, #16]
   c2a40:	a861      	add	r0, sp, #388	; 0x184
   c2a42:	9003      	str	r0, [sp, #12]
   c2a44:	a860      	add	r0, sp, #384	; 0x180
   c2a46:	9002      	str	r0, [sp, #8]
   c2a48:	f105 0010 	add.w	r0, r5, #16
   c2a4c:	9001      	str	r0, [sp, #4]
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
   c2a4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   c2a50:	6840      	ldr	r0, [r0, #4]
   c2a52:	f04f 0738 	mov.w	r7, #56	; 0x38
   c2a56:	fb07 9000 	mla	r0, r7, r0, r9
  return nullptr;
   c2a5a:	bf08      	it	eq
   c2a5c:	2300      	moveq	r3, #0
   c2a5e:	9000      	str	r0, [sp, #0]
   c2a60:	4620      	mov	r0, r4
   c2a62:	f7f2 fad7 	bl	b5014 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_>
   c2a66:	2800      	cmp	r0, #0
   c2a68:	f43f af5a 	beq.w	c2920 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18c>
   c2a6c:	e6cc      	b.n	c2808 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    *activation_max = std::numeric_limits<T>::max();
   c2a6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; c2aa8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x314>
    *activation_min = 0;
   c2a72:	ed9f 7a0f 	vldr	s14, [pc, #60]	; c2ab0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x31c>
   c2a76:	e77c      	b.n	c2972 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    *activation_max = 6;
   c2a78:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   c2a7c:	e7f9      	b.n	c2a72 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2de>
   c2a7e:	bf00      	nop
   c2a80:	000c7116 	.word	0x000c7116
   c2a84:	000c7149 	.word	0x000c7149
   c2a88:	000c945d 	.word	0x000c945d
   c2a8c:	000c70fc 	.word	0x000c70fc
   c2a90:	000c7163 	.word	0x000c7163
   c2a94:	000c7067 	.word	0x000c7067
   c2a98:	000c7177 	.word	0x000c7177
   c2a9c:	000c8943 	.word	0x000c8943
   c2aa0:	000c8bee 	.word	0x000c8bee
   c2aa4:	000c8967 	.word	0x000c8967
   c2aa8:	7f7fffff 	.word	0x7f7fffff
   c2aac:	ff7fffff 	.word	0xff7fffff
   c2ab0:	00000000 	.word	0x00000000
  op_params.padding_type = PaddingType::kSame;
   c2ab4:	2301      	movs	r3, #1
   c2ab6:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
  op_params.padding_values.width = data->padding.width;
   c2aba:	9b5c      	ldr	r3, [sp, #368]	; 0x170
   c2abc:	f8ad 313a 	strh.w	r3, [sp, #314]	; 0x13a
  op_params.padding_values.height = data->padding.height;
   c2ac0:	9b5d      	ldr	r3, [sp, #372]	; 0x174
   c2ac2:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2ac6:	686b      	ldr	r3, [r5, #4]
   c2ac8:	f8ad 3142 	strh.w	r3, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c2acc:	68ab      	ldr	r3, [r5, #8]
   c2ace:	f8ad 3144 	strh.w	r3, [sp, #324]	; 0x144
  op_params.dilation_width_factor = params->dilation_width_factor;
   c2ad2:	696b      	ldr	r3, [r5, #20]
   c2ad4:	f8ad 3146 	strh.w	r3, [sp, #326]	; 0x146
  op_params.dilation_height_factor = params->dilation_height_factor;
   c2ad8:	69ab      	ldr	r3, [r5, #24]
   c2ada:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2ade:	68eb      	ldr	r3, [r5, #12]
   c2ae0:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
  op_params.input_offset = -input->params.zero_point;
   c2ae4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   c2ae8:	425b      	negs	r3, r3
   c2aea:	9353      	str	r3, [sp, #332]	; 0x14c
  op_params.weights_offset = 0;
   c2aec:	2300      	movs	r3, #0
   c2aee:	9354      	str	r3, [sp, #336]	; 0x150
  op_params.output_offset = output->params.zero_point;
   c2af0:	693b      	ldr	r3, [r7, #16]
   c2af2:	9355      	str	r3, [sp, #340]	; 0x154
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   c2af4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   c2af8:	237f      	movs	r3, #127	; 0x7f
   c2afa:	e9cd 0358 	strd	r0, r3, [sp, #352]	; 0x160
      data->per_channel_output_shift, GetTensorShape(input),
   c2afe:	4641      	mov	r1, r8
   c2b00:	a83a      	add	r0, sp, #232	; 0xe8
   c2b02:	f7f3 ff02 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   c2b06:	f8d8 9004 	ldr.w	r9, [r8, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2b0a:	f10d 08fc 	add.w	r8, sp, #252	; 0xfc
   c2b0e:	4631      	mov	r1, r6
   c2b10:	4640      	mov	r0, r8
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2b12:	ac44      	add	r4, sp, #272	; 0x110
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2b14:	f7f3 fef9 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2b18:	4659      	mov	r1, fp
   c2b1a:	4620      	mov	r0, r4
   c2b1c:	6876      	ldr	r6, [r6, #4]
   c2b1e:	f7f3 fef4 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2b22:	f1bb 0f00 	cmp.w	fp, #0
   c2b26:	d001      	beq.n	c2b2c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x398>
   c2b28:	f8db b004 	ldr.w	fp, [fp, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   c2b2c:	ad49      	add	r5, sp, #292	; 0x124
   c2b2e:	4639      	mov	r1, r7
   c2b30:	4628      	mov	r0, r5
   c2b32:	f7f3 feea 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
   c2b36:	687b      	ldr	r3, [r7, #4]
   c2b38:	f8cd 9000 	str.w	r9, [sp]
   c2b3c:	aaa2      	add	r2, sp, #648	; 0x288
   c2b3e:	a962      	add	r1, sp, #392	; 0x188
   c2b40:	e9cd 5305 	strd	r5, r3, [sp, #20]
   c2b44:	a84e      	add	r0, sp, #312	; 0x138
   c2b46:	ab3a      	add	r3, sp, #232	; 0xe8
   c2b48:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   c2b4c:	e9cd 8601 	strd	r8, r6, [sp, #4]
   c2b50:	f7ff fab3 	bl	c20ba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   c2b54:	4628      	mov	r0, r5
   c2b56:	f7f3 fc34 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   c2b5a:	4620      	mov	r0, r4
   c2b5c:	f7f3 fc31 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   c2b60:	4640      	mov	r0, r8
   c2b62:	e74e      	b.n	c2a02 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x26e>
  op_params.padding_values.width = data->padding.width;
   c2b64:	995c      	ldr	r1, [sp, #368]	; 0x170
  const int32_t input_offset = -input->params.zero_point;
   c2b66:	f8d8 9010 	ldr.w	r9, [r8, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   c2b6a:	6933      	ldr	r3, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
   c2b6c:	6938      	ldr	r0, [r7, #16]
  op_params.padding_values.width = data->padding.width;
   c2b6e:	f8ad 113a 	strh.w	r1, [sp, #314]	; 0x13a
  op_params.padding_type = PaddingType::kSame;
   c2b72:	2201      	movs	r2, #1
  op_params.padding_values.height = data->padding.height;
   c2b74:	995d      	ldr	r1, [sp, #372]	; 0x174
  op_params.padding_type = PaddingType::kSame;
   c2b76:	f88d 2138 	strb.w	r2, [sp, #312]	; 0x138
  op_params.padding_values.height = data->padding.height;
   c2b7a:	f8ad 113c 	strh.w	r1, [sp, #316]	; 0x13c
  op_params.stride_width = params->stride_width;
   c2b7e:	6869      	ldr	r1, [r5, #4]
   c2b80:	f8ad 1142 	strh.w	r1, [sp, #322]	; 0x142
  op_params.stride_height = params->stride_height;
   c2b84:	68a9      	ldr	r1, [r5, #8]
   c2b86:	f8ad 1144 	strh.w	r1, [sp, #324]	; 0x144
  op_params.dilation_width_factor = 1;
   c2b8a:	f8ad 2146 	strh.w	r2, [sp, #326]	; 0x146
  op_params.dilation_height_factor = 1;
   c2b8e:	f8ad 2148 	strh.w	r2, [sp, #328]	; 0x148
  op_params.depth_multiplier = params->depth_multiplier;
   c2b92:	68e9      	ldr	r1, [r5, #12]
   c2b94:	f8ad 114a 	strh.w	r1, [sp, #330]	; 0x14a
  op_params.quantized_activation_min = data->output_activation_min;
   c2b98:	99e2      	ldr	r1, [sp, #904]	; 0x388
   c2b9a:	9158      	str	r1, [sp, #352]	; 0x160
  op_params.quantized_activation_max = data->output_activation_max;
   c2b9c:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   c2b9e:	9159      	str	r1, [sp, #356]	; 0x164
  const int32_t filter_offset = -filter->params.zero_point;
   c2ba0:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
   c2ba2:	f1c9 0100 	rsb	r1, r9, #0
  op_params.weights_offset = filter_offset;
   c2ba6:	e9cd 1353 	strd	r1, r3, [sp, #332]	; 0x14c
  op_params.output_multiplier = data->output_multiplier;
   c2baa:	9b60      	ldr	r3, [sp, #384]	; 0x180
   c2bac:	9356      	str	r3, [sp, #344]	; 0x158
  op_params.output_shift = -data->output_shift;
   c2bae:	9b61      	ldr	r3, [sp, #388]	; 0x184
  op_params.output_offset = output_offset;
   c2bb0:	9055      	str	r0, [sp, #340]	; 0x154
  op_params.output_shift = -data->output_shift;
   c2bb2:	425b      	negs	r3, r3
  const int filter_width = GetTensorShape(filter).Dims(2);
   c2bb4:	4631      	mov	r1, r6
   c2bb6:	a849      	add	r0, sp, #292	; 0x124
  op_params.output_shift = -data->output_shift;
   c2bb8:	9357      	str	r3, [sp, #348]	; 0x15c
  const int filter_width = GetTensorShape(filter).Dims(2);
   c2bba:	f7f3 fea6 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2bbe:	2102      	movs	r1, #2
   c2bc0:	a849      	add	r0, sp, #292	; 0x124
   c2bc2:	f7f3 fc09 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2bc6:	4605      	mov	r5, r0
   c2bc8:	a849      	add	r0, sp, #292	; 0x124
   c2bca:	f7f3 fbfa 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const int input_depth = GetTensorShape(input).Dims(3);
   c2bce:	4641      	mov	r1, r8
   c2bd0:	a849      	add	r0, sp, #292	; 0x124
   c2bd2:	f7f3 fe9a 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2bd6:	4651      	mov	r1, sl
   c2bd8:	a849      	add	r0, sp, #292	; 0x124
   c2bda:	f7f3 fbfd 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2bde:	900c      	str	r0, [sp, #48]	; 0x30
   c2be0:	a849      	add	r0, sp, #292	; 0x124
   c2be2:	f7f3 fbee 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const int output_depth = GetTensorShape(filter).Dims(3);
   c2be6:	4631      	mov	r1, r6
   c2be8:	a849      	add	r0, sp, #292	; 0x124
   c2bea:	f7f3 fe8e 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2bee:	4651      	mov	r1, sl
   c2bf0:	a849      	add	r0, sp, #292	; 0x124
   c2bf2:	f7f3 fbf1 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2bf6:	900a      	str	r0, [sp, #40]	; 0x28
   c2bf8:	a849      	add	r0, sp, #292	; 0x124
   c2bfa:	f7f3 fbe2 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const int filter_height = GetTensorShape(filter).Dims(1);
   c2bfe:	4631      	mov	r1, r6
   c2c00:	a849      	add	r0, sp, #292	; 0x124
   c2c02:	f7f3 fe82 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2c06:	2201      	movs	r2, #1
   c2c08:	4611      	mov	r1, r2
   c2c0a:	a849      	add	r0, sp, #292	; 0x124
   c2c0c:	f7f3 fbe4 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
   c2c10:	900b      	str	r0, [sp, #44]	; 0x2c
   c2c12:	a849      	add	r0, sp, #292	; 0x124
   c2c14:	f7f3 fbd5 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
  if ((filter_width == 8) && (input_offset == 0) && (input_depth == 1) &&
   c2c18:	2d08      	cmp	r5, #8
   c2c1a:	f10d 0ae8 	add.w	sl, sp, #232	; 0xe8
   c2c1e:	ad3f      	add	r5, sp, #252	; 0xfc
   c2c20:	d133      	bne.n	c2c8a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
   c2c22:	f1b9 0f00 	cmp.w	r9, #0
   c2c26:	d130      	bne.n	c2c8a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
   c2c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2c2c:	2b01      	cmp	r3, #1
   c2c2e:	d12c      	bne.n	c2c8a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
      output_depth * filter_width * filter_height * input_depth;
   c2c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2c32:	fb02 f903 	mul.w	r9, r2, r3
   c2c36:	ea4f 09c9 	mov.w	r9, r9, lsl #3
  if ((filter_width == 8) && (input_offset == 0) && (input_depth == 1) &&
   c2c3a:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
   c2c3e:	dc24      	bgt.n	c2c8a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
    static TfLiteNode* initialized_node_address = node;
   c2c40:	4a9f      	ldr	r2, [pc, #636]	; (c2ec0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x72c>)
   c2c42:	f8df 928c 	ldr.w	r9, [pc, #652]	; c2ed0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x73c>
   c2c46:	7813      	ldrb	r3, [r2, #0]
   c2c48:	f3bf 8f5b 	dmb	ish
   c2c4c:	f013 0f01 	tst.w	r3, #1
   c2c50:	d10a      	bne.n	c2c68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4d4>
   c2c52:	4610      	mov	r0, r2
   c2c54:	f7f1 ff68 	bl	b4b28 <__cxa_guard_acquire>
   c2c58:	4a99      	ldr	r2, [pc, #612]	; (c2ec0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x72c>)
   c2c5a:	b128      	cbz	r0, c2c68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4d4>
   c2c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2c5e:	f8c9 3000 	str.w	r3, [r9]
   c2c62:	4610      	mov	r0, r2
   c2c64:	f7f1 ff65 	bl	b4b32 <__cxa_guard_release>
    if (initialized_node_address == node) {
   c2c68:	f8d9 3000 	ldr.w	r3, [r9]
   c2c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2c6e:	429a      	cmp	r2, r3
   c2c70:	d03a      	beq.n	c2ce8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x554>
      if (!has_warned) {
   c2c72:	f8df 9260 	ldr.w	r9, [pc, #608]	; c2ed4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x740>
   c2c76:	f899 3000 	ldrb.w	r3, [r9]
   c2c7a:	b933      	cbnz	r3, c2c8a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f6>
        context->ReportError(
   c2c7c:	6963      	ldr	r3, [r4, #20]
   c2c7e:	4991      	ldr	r1, [pc, #580]	; (c2ec4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x730>)
   c2c80:	4620      	mov	r0, r4
   c2c82:	4798      	blx	r3
        has_warned = true;
   c2c84:	2301      	movs	r3, #1
   c2c86:	f889 3000 	strb.w	r3, [r9]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2c8a:	4641      	mov	r1, r8
   c2c8c:	a849      	add	r0, sp, #292	; 0x124
   c2c8e:	f7f3 fe3c 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   c2c92:	4631      	mov	r1, r6
   c2c94:	a844      	add	r0, sp, #272	; 0x110
   c2c96:	f8d8 4004 	ldr.w	r4, [r8, #4]
   c2c9a:	f7f3 fe36 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c2c9e:	4659      	mov	r1, fp
   c2ca0:	4628      	mov	r0, r5
   c2ca2:	6876      	ldr	r6, [r6, #4]
   c2ca4:	f7f3 fe31 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2ca8:	f1bb 0f00 	cmp.w	fp, #0
   c2cac:	d001      	beq.n	c2cb2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x51e>
   c2cae:	f8db b004 	ldr.w	fp, [fp, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   c2cb2:	4639      	mov	r1, r7
   c2cb4:	4650      	mov	r0, sl
   c2cb6:	f7f3 fe28 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
   c2cba:	687b      	ldr	r3, [r7, #4]
   c2cbc:	9600      	str	r6, [sp, #0]
   c2cbe:	4622      	mov	r2, r4
   c2cc0:	a949      	add	r1, sp, #292	; 0x124
   c2cc2:	e9cd a303 	strd	sl, r3, [sp, #12]
   c2cc6:	a84e      	add	r0, sp, #312	; 0x138
   c2cc8:	ab44      	add	r3, sp, #272	; 0x110
   c2cca:	e9cd 5b01 	strd	r5, fp, [sp, #4]
   c2cce:	f7ff fc3d 	bl	c254c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>
   c2cd2:	4650      	mov	r0, sl
   c2cd4:	f7f3 fb75 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
   c2cd8:	4628      	mov	r0, r5
   c2cda:	f7f3 fb72 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   c2cde:	a844      	add	r0, sp, #272	; 0x110
   c2ce0:	f7f3 fb6f 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   c2ce4:	a849      	add	r0, sp, #292	; 0x124
   c2ce6:	e68f      	b.n	c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x274>
        context, op_params, GetTensorShape(input),
   c2ce8:	4641      	mov	r1, r8
   c2cea:	a844      	add	r0, sp, #272	; 0x110
   c2cec:	f7f3 fe0d 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2cf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c2cf4:	9318      	str	r3, [sp, #96]	; 0x60
        GetTensorData<uint8_t>(input), GetTensorShape(filter),
   c2cf6:	4631      	mov	r1, r6
   c2cf8:	4628      	mov	r0, r5
   c2cfa:	f7f3 fe06 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2cfe:	6873      	ldr	r3, [r6, #4]
   c2d00:	9319      	str	r3, [sp, #100]	; 0x64
        GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   c2d02:	4659      	mov	r1, fp
   c2d04:	4650      	mov	r0, sl
   c2d06:	f7f3 fe00 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   c2d0a:	f1bb 0f00 	cmp.w	fp, #0
   c2d0e:	d001      	beq.n	c2d14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x580>
   c2d10:	f8db b004 	ldr.w	fp, [fp, #4]
        GetTensorData<int32_t>(bias), GetTensorShape(output),
   c2d14:	4639      	mov	r1, r7
   c2d16:	a835      	add	r0, sp, #212	; 0xd4
   c2d18:	f7f3 fdf7 	bl	b690a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int depth_multiplier = params.depth_multiplier;
   c2d1c:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
   c2d20:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   c2d22:	9b58      	ldr	r3, [sp, #352]	; 0x160
   c2d24:	931e      	str	r3, [sp, #120]	; 0x78
  const int32 output_activation_max = params.quantized_activation_max;
   c2d26:	9b59      	ldr	r3, [sp, #356]	; 0x164
   c2d28:	931f      	str	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   c2d2a:	9b44      	ldr	r3, [sp, #272]	; 0x110
   c2d2c:	2b04      	cmp	r3, #4
   c2d2e:	d001      	beq.n	c2d34 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
   c2d30:	f001 fdb4 	bl	c489c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   c2d34:	682b      	ldr	r3, [r5, #0]
   c2d36:	2b04      	cmp	r3, #4
   c2d38:	d1fa      	bne.n	c2d30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   c2d3a:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   c2d3c:	2e04      	cmp	r6, #4
   c2d3e:	d1f7      	bne.n	c2d30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   c2d40:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
   c2d44:	4293      	cmp	r3, r2
   c2d46:	dcf3      	bgt.n	c2d30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2d48:	2300      	movs	r3, #0
   c2d4a:	4619      	mov	r1, r3
   c2d4c:	aa35      	add	r2, sp, #212	; 0xd4
   c2d4e:	a844      	add	r0, sp, #272	; 0x110
   c2d50:	f7f6 f827 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2d54:	2303      	movs	r3, #3
   c2d56:	4619      	mov	r1, r3
   c2d58:	aa35      	add	r2, sp, #212	; 0xd4
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   c2d5a:	9028      	str	r0, [sp, #160]	; 0xa0
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2d5c:	4628      	mov	r0, r5
   c2d5e:	f7f6 f820 	bl	b8da2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   c2d62:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   c2d64:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   c2d66:	a844      	add	r0, sp, #272	; 0x110
   c2d68:	f7f3 fb36 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   c2d6c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   c2d6e:	9021      	str	r0, [sp, #132]	; 0x84
  const int input_width = input_shape.Dims(2);
   c2d70:	a844      	add	r0, sp, #272	; 0x110
   c2d72:	f7f3 fb31 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   c2d76:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   c2d78:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = input_shape.Dims(3);
   c2d7a:	a844      	add	r0, sp, #272	; 0x110
   c2d7c:	f7f3 fb2c 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   c2d80:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   c2d82:	9011      	str	r0, [sp, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
   c2d84:	4628      	mov	r0, r5
   c2d86:	f7f3 fb27 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   c2d8a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   c2d8c:	900c      	str	r0, [sp, #48]	; 0x30
  const int filter_width = filter_shape.Dims(2);
   c2d8e:	4628      	mov	r0, r5
   c2d90:	f7f3 fb22 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   c2d94:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   c2d96:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_height = output_shape.Dims(1);
   c2d98:	a835      	add	r0, sp, #212	; 0xd4
   c2d9a:	f7f3 fb1d 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   c2d9e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   c2da0:	9029      	str	r0, [sp, #164]	; 0xa4
  const int output_width = output_shape.Dims(2);
   c2da2:	a835      	add	r0, sp, #212	; 0xd4
   c2da4:	f7f3 fb18 	bl	b63d8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2daa:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
   c2dac:	902a      	str	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   c2dae:	4353      	muls	r3, r2
   c2db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2db2:	429a      	cmp	r2, r3
   c2db4:	d1bc      	bne.n	c2d30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   c2db6:	a83a      	add	r0, sp, #232	; 0xe8
   c2db8:	f7f7 faf5 	bl	ba3a6 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   c2dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2dbe:	4283      	cmp	r3, r0
   c2dc0:	d1b6      	bne.n	c2d30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>
      output_depth * filter_width * filter_height * input_depth;
   c2dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c2dc4:	435a      	muls	r2, r3
   c2dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2dc8:	435a      	muls	r2, r3
  const int needed_size =
   c2dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2dcc:	435a      	muls	r2, r3
  if (needed_size > kReshapedFilterDataSize) {
   c2dce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   c2dd2:	dd10      	ble.n	c2df6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x662>
    context->ReportError(
   c2dd4:	6965      	ldr	r5, [r4, #20]
   c2dd6:	493c      	ldr	r1, [pc, #240]	; (c2ec8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x734>)
   c2dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   c2ddc:	4620      	mov	r0, r4
   c2dde:	47a8      	blx	r5
        GetTensorData<int32_t>(bias), GetTensorShape(output),
   c2de0:	a835      	add	r0, sp, #212	; 0xd4
   c2de2:	f7f3 faee 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   c2de6:	a83a      	add	r0, sp, #232	; 0xe8
   c2de8:	f7f3 faeb 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorData<uint8_t>(input), GetTensorShape(filter),
   c2dec:	a83f      	add	r0, sp, #252	; 0xfc
   c2dee:	f7f3 fae8 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
        context, op_params, GetTensorShape(input),
   c2df2:	a844      	add	r0, sp, #272	; 0x110
   c2df4:	e608      	b.n	c2a08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x274>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   c2df6:	687b      	ldr	r3, [r7, #4]
   c2df8:	9325      	str	r3, [sp, #148]	; 0x94
  const int stride_width = params.stride_width;
   c2dfa:	f9bd 3142 	ldrsh.w	r3, [sp, #322]	; 0x142
   c2dfe:	931a      	str	r3, [sp, #104]	; 0x68
  const int stride_height = params.stride_height;
   c2e00:	f9bd 3144 	ldrsh.w	r3, [sp, #324]	; 0x144
   c2e04:	931b      	str	r3, [sp, #108]	; 0x6c
  const int pad_width = params.padding_values.width;
   c2e06:	f9bd 313a 	ldrsh.w	r3, [sp, #314]	; 0x13a
   c2e0a:	931c      	str	r3, [sp, #112]	; 0x70
  const int pad_height = params.padding_values.height;
   c2e0c:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
   c2e10:	931d      	str	r3, [sp, #116]	; 0x74
  const int32 input_offset = params.input_offset;
   c2e12:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   c2e14:	9326      	str	r3, [sp, #152]	; 0x98
  const int32 filter_offset = params.weights_offset;
   c2e16:	9b54      	ldr	r3, [sp, #336]	; 0x150
   c2e18:	9320      	str	r3, [sp, #128]	; 0x80
  const int32 output_offset = params.output_offset;
   c2e1a:	9b55      	ldr	r3, [sp, #340]	; 0x154
   c2e1c:	9327      	str	r3, [sp, #156]	; 0x9c
  const int32 output_multiplier = params.output_multiplier;
   c2e1e:	9b56      	ldr	r3, [sp, #344]	; 0x158
   c2e20:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   c2e24:	9b57      	ldr	r3, [sp, #348]	; 0x15c
   c2e26:	ee08 3a90 	vmov	s17, r3
  RuntimeShape() : size_(0) {}
   c2e2a:	2300      	movs	r3, #0
   c2e2c:	9349      	str	r3, [sp, #292]	; 0x124
  reshaped_filter_shape.BuildFrom(
   c2e2e:	2301      	movs	r3, #1
   c2e30:	9331      	str	r3, [sp, #196]	; 0xc4
   c2e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2e34:	9332      	str	r3, [sp, #200]	; 0xc8
   c2e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2e38:	9333      	str	r3, [sp, #204]	; 0xcc
    Resize(dimensions_count);
   c2e3a:	4631      	mov	r1, r6
   c2e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2e3e:	9334      	str	r3, [sp, #208]	; 0xd0
   c2e40:	a849      	add	r0, sp, #292	; 0x124
   c2e42:	f7f3 faeb 	bl	b641c <_ZN6tflite12RuntimeShape6ResizeEi>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   c2e46:	9b49      	ldr	r3, [sp, #292]	; 0x124
   c2e48:	2b04      	cmp	r3, #4
   c2e4a:	bfcc      	ite	gt
   c2e4c:	9a4a      	ldrgt	r2, [sp, #296]	; 0x128
   c2e4e:	aa4a      	addle	r2, sp, #296	; 0x128
      *data = it;
   c2e50:	ab31      	add	r3, sp, #196	; 0xc4
   c2e52:	ad35      	add	r5, sp, #212	; 0xd4
   c2e54:	461c      	mov	r4, r3
   c2e56:	cc03      	ldmia	r4!, {r0, r1}
   c2e58:	42ac      	cmp	r4, r5
   c2e5a:	6010      	str	r0, [r2, #0]
   c2e5c:	6051      	str	r1, [r2, #4]
   c2e5e:	4623      	mov	r3, r4
   c2e60:	f102 0208 	add.w	r2, r2, #8
   c2e64:	d1f6      	bne.n	c2e54 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>
  if (!is_reshaped_filter_initialized) {
   c2e66:	4b19      	ldr	r3, [pc, #100]	; (c2ecc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x738>)
   c2e68:	781c      	ldrb	r4, [r3, #0]
   c2e6a:	2c00      	cmp	r4, #0
   c2e6c:	d139      	bne.n	c2ee2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74e>
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2e6e:	f8df 8068 	ldr.w	r8, [pc, #104]	; c2ed8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x744>
    for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2e74:	42a3      	cmp	r3, r4
   c2e76:	dd31      	ble.n	c2edc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x748>
      for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2e78:	2500      	movs	r5, #0
   c2e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2e7c:	42ab      	cmp	r3, r5
   c2e7e:	dd1c      	ble.n	c2eba <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x726>
        for (int oc = 0; oc < output_depth; ++oc) {
   c2e80:	2600      	movs	r6, #0
   c2e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2e84:	42b3      	cmp	r3, r6
   c2e86:	dd16      	ble.n	c2eb6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x722>
              filter_data + Offset(filter_shape, 0, filter_y, filter_x, oc);
   c2e88:	9600      	str	r6, [sp, #0]
   c2e8a:	462b      	mov	r3, r5
   c2e8c:	4622      	mov	r2, r4
   c2e8e:	2100      	movs	r1, #0
   c2e90:	a83f      	add	r0, sp, #252	; 0xfc
   c2e92:	f7f3 fb08 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2e96:	4632      	mov	r2, r6
              filter_data + Offset(filter_shape, 0, filter_y, filter_x, oc);
   c2e98:	4607      	mov	r7, r0
              Offset(reshaped_filter_shape, 0, oc, filter_y, filter_x);
   c2e9a:	4623      	mov	r3, r4
   c2e9c:	9500      	str	r5, [sp, #0]
   c2e9e:	2100      	movs	r1, #0
   c2ea0:	a849      	add	r0, sp, #292	; 0x124
   c2ea2:	f7f3 fb00 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              static_cast<int16_t>(*current_filter) + filter_offset;
   c2ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2ea8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   c2eaa:	5ddb      	ldrb	r3, [r3, r7]
   c2eac:	4413      	add	r3, r2
          *reshaped_filter =
   c2eae:	f828 3010 	strh.w	r3, [r8, r0, lsl #1]
        for (int oc = 0; oc < output_depth; ++oc) {
   c2eb2:	3601      	adds	r6, #1
   c2eb4:	e7e5      	b.n	c2e82 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6ee>
      for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   c2eb6:	3501      	adds	r5, #1
   c2eb8:	e7df      	b.n	c2e7a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e6>
    for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   c2eba:	3401      	adds	r4, #1
   c2ebc:	e7d9      	b.n	c2e72 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6de>
   c2ebe:	bf00      	nop
   c2ec0:	2003decc 	.word	0x2003decc
   c2ec4:	000c94e8 	.word	0x000c94e8
   c2ec8:	000c957b 	.word	0x000c957b
   c2ecc:	2003e6d0 	.word	0x2003e6d0
   c2ed0:	2003e6d4 	.word	0x2003e6d4
   c2ed4:	2003e6d1 	.word	0x2003e6d1
   c2ed8:	2003ded0 	.word	0x2003ded0
    is_reshaped_filter_initialized = true;
   c2edc:	4b9a      	ldr	r3, [pc, #616]	; (c3148 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b4>)
   c2ede:	2201      	movs	r2, #1
   c2ee0:	701a      	strb	r2, [r3, #0]
        for (int oc = 0; oc < output_depth; ++oc) {
   c2ee2:	f04f 0a00 	mov.w	sl, #0
  for (int b = 0; b < batches; ++b) {
   c2ee6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   c2ee8:	4553      	cmp	r3, sl
   c2eea:	f340 811b 	ble.w	c3124 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x990>
   c2eee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   c2ef0:	9314      	str	r3, [sp, #80]	; 0x50
   c2ef2:	425b      	negs	r3, r3
   c2ef4:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c2ef6:	2300      	movs	r3, #0
   c2ef8:	9312      	str	r3, [sp, #72]	; 0x48
   c2efa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   c2efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c2efe:	4293      	cmp	r3, r2
   c2f00:	f340 810d 	ble.w	c311e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x98a>
   c2f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2f06:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2f08:	9821      	ldr	r0, [sp, #132]	; 0x84
   c2f0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2f0e:	932d      	str	r3, [sp, #180]	; 0xb4
   c2f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2f12:	2b00      	cmp	r3, #0
   c2f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2f16:	bfa8      	it	ge
   c2f18:	2300      	movge	r3, #0
   c2f1a:	9323      	str	r3, [sp, #140]	; 0x8c
   c2f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   c2f1e:	4413      	add	r3, r2
   c2f20:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
   c2f24:	440a      	add	r2, r1
   c2f26:	990c      	ldr	r1, [sp, #48]	; 0x30
   c2f28:	4290      	cmp	r0, r2
   c2f2a:	bfc8      	it	gt
   c2f2c:	460b      	movgt	r3, r1
   c2f2e:	932b      	str	r3, [sp, #172]	; 0xac
   c2f30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   c2f32:	9310      	str	r3, [sp, #64]	; 0x40
   c2f34:	425b      	negs	r3, r3
   c2f36:	930f      	str	r3, [sp, #60]	; 0x3c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2f38:	2300      	movs	r3, #0
   c2f3a:	9313      	str	r3, [sp, #76]	; 0x4c
   c2f3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   c2f3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c2f40:	4293      	cmp	r3, r2
   c2f42:	f340 80e1 	ble.w	c3108 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x974>
   c2f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   c2f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2f4a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   c2f4c:	4413      	add	r3, r2
   c2f4e:	9324      	str	r3, [sp, #144]	; 0x90
   c2f50:	9a10      	ldr	r2, [sp, #64]	; 0x40
   c2f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2f54:	9824      	ldr	r0, [sp, #144]	; 0x90
   c2f56:	4413      	add	r3, r2
   c2f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c2f5a:	4281      	cmp	r1, r0
   c2f5c:	bfc8      	it	gt
   c2f5e:	4613      	movgt	r3, r2
   c2f60:	932c      	str	r3, [sp, #176]	; 0xb0
        for (int ic = 0; ic < input_depth; ++ic) {
   c2f62:	2300      	movs	r3, #0
   c2f64:	930d      	str	r3, [sp, #52]	; 0x34
   c2f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c2f68:	9315      	str	r3, [sp, #84]	; 0x54
        for (int ic = 0; ic < input_depth; ++ic) {
   c2f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c2f6c:	4293      	cmp	r3, r2
   c2f6e:	f340 80c0 	ble.w	c30f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x95e>
   c2f72:	9c15      	ldr	r4, [sp, #84]	; 0x54
          for (int m = 0; m < depth_multiplier; m++) {
   c2f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
   c2f78:	1ae3      	subs	r3, r4, r3
   c2f7a:	429a      	cmp	r2, r3
   c2f7c:	f340 80b2 	ble.w	c30e4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x950>
            if (in_x_origin < 0) {
   c2f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              is_out_of_x_bounds = true;
   c2f82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2f84:	9924      	ldr	r1, [sp, #144]	; 0x90
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2f86:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            if (in_x_origin < 0) {
   c2f88:	2b00      	cmp	r3, #0
              in_x_start = 0;
   c2f8a:	bfbb      	ittet	lt
   c2f8c:	2300      	movlt	r3, #0
   c2f8e:	9322      	strlt	r3, [sp, #136]	; 0x88
            int filter_x_start = 0;
   c2f90:	2700      	movge	r7, #0
              is_out_of_x_bounds = true;
   c2f92:	2301      	movlt	r3, #1
            bool is_out_of_x_bounds = false;
   c2f94:	bfaa      	itet	ge
   c2f96:	970e      	strge	r7, [sp, #56]	; 0x38
              is_out_of_x_bounds = true;
   c2f98:	930e      	strlt	r3, [sp, #56]	; 0x38
            if (in_x_origin < 0) {
   c2f9a:	9322      	strge	r3, [sp, #136]	; 0x88
              is_out_of_x_bounds = true;
   c2f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
              filter_x_start = 0 - in_x_origin;
   c2f9e:	bfb8      	it	lt
   c2fa0:	9f10      	ldrlt	r7, [sp, #64]	; 0x40
              is_out_of_x_bounds = true;
   c2fa2:	428a      	cmp	r2, r1
   c2fa4:	bfd8      	it	le
   c2fa6:	2301      	movle	r3, #1
   c2fa8:	930e      	str	r3, [sp, #56]	; 0x38
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2faa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   c2fac:	1b9b      	subs	r3, r3, r6
            int32 acc = 0;
   c2fae:	2500      	movs	r5, #0
   c2fb0:	932e      	str	r3, [sp, #184]	; 0xb8
   c2fb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   c2fb4:	199a      	adds	r2, r3, r6
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c2fb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   c2fb8:	42b3      	cmp	r3, r6
   c2fba:	dd70      	ble.n	c309e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x90a>
                  input_data + Offset(input_shape, b, in_y, in_x_start, ic);
   c2fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2fbe:	9300      	str	r3, [sp, #0]
   c2fc0:	4651      	mov	r1, sl
   c2fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   c2fc4:	a844      	add	r0, sp, #272	; 0x110
   c2fc6:	f7f3 fa6e 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c2fca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   c2fcc:	eb03 0800 	add.w	r8, r3, r0
              if ((filter_width == 8) && !is_out_of_x_bounds) {
   c2fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2fd2:	2b08      	cmp	r3, #8
                  input_data + Offset(input_shape, b, in_y, in_x_start, ic);
   c2fd4:	4681      	mov	r9, r0
              if ((filter_width == 8) && !is_out_of_x_bounds) {
   c2fd6:	d146      	bne.n	c3066 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8d2>
   c2fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c2fda:	2b00      	cmp	r3, #0
   c2fdc:	d143      	bne.n	c3066 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8d2>
                    reshaped_filter_data + Offset(reshaped_filter_shape, 0, oc,
   c2fde:	990e      	ldr	r1, [sp, #56]	; 0x38
   c2fe0:	9700      	str	r7, [sp, #0]
   c2fe2:	4633      	mov	r3, r6
   c2fe4:	4622      	mov	r2, r4
   c2fe6:	a849      	add	r0, sp, #292	; 0x124
   c2fe8:	f7f3 fa5d 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                  filter_y, filter_x_start);
   c2fec:	4a57      	ldr	r2, [pc, #348]	; (c314c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>)
                const uint32_t input_vals0 =
   c2fee:	9918      	ldr	r1, [sp, #96]	; 0x60
                                                  filter_y, filter_x_start);
   c2ff0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
                const uint32_t input_vals0 =
   c2ff4:	f851 1009 	ldr.w	r1, [r1, r9]
                const int32_t filter_vals0 =
   c2ff8:	f852 9010 	ldr.w	r9, [r2, r0, lsl #1]
                const int32_t filter_vals1 =
   c2ffc:	f8d3 e004 	ldr.w	lr, [r3, #4]
                const uint32_t input_vals1 =
   c3000:	f8d8 2004 	ldr.w	r2, [r8, #4]
                const int32_t filter_vals3 =
   c3004:	e9d3 c002 	ldrd	ip, r0, [r3, #8]
                acc += filter_val1 * input_val1;
   c3008:	ea4f 4329 	mov.w	r3, r9, asr #16
   c300c:	932f      	str	r3, [sp, #188]	; 0xbc
                acc += filter_val0 * input_val0;
   c300e:	fa0f f989 	sxth.w	r9, r9
   c3012:	b2cb      	uxtb	r3, r1
   c3014:	fb09 5903 	mla	r9, r9, r3, r5
                acc += filter_val1 * input_val1;
   c3018:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   c301a:	f3c1 2807 	ubfx	r8, r1, #8, #8
   c301e:	fb03 9808 	mla	r8, r3, r8, r9
                acc += filter_val2 * input_val2;
   c3022:	f3c1 4307 	ubfx	r3, r1, #16, #8
   c3026:	fa0f f98e 	sxth.w	r9, lr
   c302a:	fb09 8803 	mla	r8, r9, r3, r8
                const uint8 input_val3 = (input_vals0 >> 24) & 0xff;
   c302e:	0e09      	lsrs	r1, r1, #24
                acc += filter_val3 * input_val3;
   c3030:	ea4f 452e 	mov.w	r5, lr, asr #16
   c3034:	fb01 8505 	mla	r5, r1, r5, r8
                acc += filter_val4 * input_val4;
   c3038:	fa0f f38c 	sxth.w	r3, ip
   c303c:	fa5f f882 	uxtb.w	r8, r2
   c3040:	fb03 5508 	mla	r5, r3, r8, r5
                acc += filter_val5 * input_val5;
   c3044:	f3c2 2107 	ubfx	r1, r2, #8, #8
   c3048:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   c304c:	fb0c 5501 	mla	r5, ip, r1, r5
                acc += filter_val6 * input_val6;
   c3050:	b203      	sxth	r3, r0
   c3052:	f3c2 4c07 	ubfx	ip, r2, #16, #8
   c3056:	fb03 550c 	mla	r5, r3, ip, r5
                acc += filter_val7 * input_val7;
   c305a:	1400      	asrs	r0, r0, #16
                const uint8 input_val7 = (input_vals1 >> 24) & 0xff;
   c305c:	0e12      	lsrs	r2, r2, #24
                acc += filter_val7 * input_val7;
   c305e:	fb02 5500 	mla	r5, r2, r0, r5
            for (int filter_y = filter_y_start; filter_y < filter_y_end;
   c3062:	3601      	adds	r6, #1
   c3064:	e7a5      	b.n	c2fb2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x81e>
                    Offset(filter_shape, 0, filter_y, filter_x_start, oc);
   c3066:	463b      	mov	r3, r7
   c3068:	9400      	str	r4, [sp, #0]
   c306a:	4632      	mov	r2, r6
   c306c:	2100      	movs	r1, #0
   c306e:	a83f      	add	r0, sp, #252	; 0xfc
   c3070:	f7f3 fa19 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   c3074:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c3076:	4418      	add	r0, r3
                for (int filter_x = filter_x_start; filter_x < filter_x_end;
   c3078:	463b      	mov	r3, r7
   c307a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   c307c:	429a      	cmp	r2, r3
   c307e:	ddf0      	ble.n	c3062 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8ce>
                  current_input += input_depth;
   c3080:	9a11      	ldr	r2, [sp, #68]	; 0x44
                  current_filter += output_depth;
   c3082:	9909      	ldr	r1, [sp, #36]	; 0x24
                  int32 input_val = *current_input;
   c3084:	f898 c000 	ldrb.w	ip, [r8]
                  current_input += input_depth;
   c3088:	4490      	add	r8, r2
                  int32 filter_val = *current_filter;
   c308a:	7802      	ldrb	r2, [r0, #0]
                  current_filter += output_depth;
   c308c:	4408      	add	r0, r1
                      (filter_val + filter_offset) * (input_val + input_offset);
   c308e:	9920      	ldr	r1, [sp, #128]	; 0x80
   c3090:	440a      	add	r2, r1
   c3092:	9926      	ldr	r1, [sp, #152]	; 0x98
   c3094:	4461      	add	r1, ip
                  acc +=
   c3096:	fb01 5502 	mla	r5, r1, r2, r5
                for (int filter_x = filter_x_start; filter_x < filter_x_end;
   c309a:	3301      	adds	r3, #1
   c309c:	e7ed      	b.n	c307a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e6>
            if (bias_data) {
   c309e:	f1bb 0f00 	cmp.w	fp, #0
   c30a2:	d002      	beq.n	c30aa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x916>
              acc += bias_data[oc];
   c30a4:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   c30a8:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   c30aa:	ee18 2a90 	vmov	r2, s17
   c30ae:	ee18 1a10 	vmov	r1, s16
   c30b2:	4628      	mov	r0, r5
   c30b4:	f7f7 f988 	bl	ba3c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c30b8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   c30bc:	4605      	mov	r5, r0
   c30be:	9400      	str	r4, [sp, #0]
   c30c0:	4651      	mov	r1, sl
   c30c2:	a835      	add	r0, sp, #212	; 0xd4
   c30c4:	f7f3 f9ef 	bl	b64a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            acc += output_offset;
   c30c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   c30ca:	441d      	add	r5, r3
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   c30cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   c30ce:	429d      	cmp	r5, r3
   c30d0:	bfb8      	it	lt
   c30d2:	461d      	movlt	r5, r3
   c30d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   c30d6:	429d      	cmp	r5, r3
   c30d8:	bfa8      	it	ge
   c30da:	461d      	movge	r5, r3
   c30dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   c30de:	3401      	adds	r4, #1
   c30e0:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; m++) {
   c30e2:	e747      	b.n	c2f74 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7e0>
        for (int ic = 0; ic < input_depth; ++ic) {
   c30e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c30e6:	3301      	adds	r3, #1
   c30e8:	930d      	str	r3, [sp, #52]	; 0x34
   c30ea:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	; 0x54
   c30ee:	4413      	add	r3, r2
   c30f0:	e739      	b.n	c2f66 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7d2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   c30f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c30f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c30f6:	3301      	adds	r3, #1
   c30f8:	9313      	str	r3, [sp, #76]	; 0x4c
   c30fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   c30fc:	4413      	add	r3, r2
   c30fe:	930f      	str	r3, [sp, #60]	; 0x3c
   c3100:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c3102:	1a9b      	subs	r3, r3, r2
   c3104:	9310      	str	r3, [sp, #64]	; 0x40
   c3106:	e719      	b.n	c2f3c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   c3108:	9b12      	ldr	r3, [sp, #72]	; 0x48
   c310a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   c310c:	3301      	adds	r3, #1
   c310e:	9312      	str	r3, [sp, #72]	; 0x48
   c3110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3112:	4413      	add	r3, r2
   c3114:	930b      	str	r3, [sp, #44]	; 0x2c
   c3116:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3118:	1a9b      	subs	r3, r3, r2
   c311a:	9314      	str	r3, [sp, #80]	; 0x50
   c311c:	e6ed      	b.n	c2efa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x766>
  for (int b = 0; b < batches; ++b) {
   c311e:	f10a 0a01 	add.w	sl, sl, #1
   c3122:	e6e0      	b.n	c2ee6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x752>
  RuntimeShape reshaped_filter_shape;
   c3124:	a849      	add	r0, sp, #292	; 0x124
   c3126:	f7f3 f94c 	bl	b63c2 <_ZN6tflite12RuntimeShapeD1Ev>
   c312a:	e659      	b.n	c2de0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x64c>
      context->ReportError(context, "Type %s (%d) not supported.",
   c312c:	4650      	mov	r0, sl
   c312e:	6965      	ldr	r5, [r4, #20]
   c3130:	f7f1 fd28 	bl	b4b84 <TfLiteTypeGetName>
   c3134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3136:	4906      	ldr	r1, [pc, #24]	; (c3150 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9bc>)
   c3138:	f819 3003 	ldrb.w	r3, [r9, r3]
   c313c:	4602      	mov	r2, r0
   c313e:	4620      	mov	r0, r4
   c3140:	47a8      	blx	r5
      return kTfLiteError;
   c3142:	f7ff bb61 	b.w	c2808 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x74>
   c3146:	bf00      	nop
   c3148:	2003e6d0 	.word	0x2003e6d0
   c314c:	2003ded0 	.word	0x2003ded0
   c3150:	000c871e 	.word	0x000c871e

000c3154 <DebugLog>:
#define DEBUG_SERIAL_OBJECT (Serial)
#endif

// On Arduino platforms, we set up a serial port and write to it for debug
// logging.
extern "C" void DebugLog(const char* s) {
   c3154:	b538      	push	{r3, r4, r5, lr}
  static bool is_initialized = false;
  if (!is_initialized) {
   c3156:	4d09      	ldr	r5, [pc, #36]	; (c317c <DebugLog+0x28>)
   c3158:	782b      	ldrb	r3, [r5, #0]
extern "C" void DebugLog(const char* s) {
   c315a:	4604      	mov	r4, r0
  if (!is_initialized) {
   c315c:	b93b      	cbnz	r3, c316e <DebugLog+0x1a>
    DEBUG_SERIAL_OBJECT.begin(9600);
   c315e:	f001 fe43 	bl	c4de8 <_Z16_fetch_usbserialv>
   c3162:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c3166:	f001 fe2f 	bl	c4dc8 <_ZN9USBSerial5beginEl>
    is_initialized = true;
   c316a:	2301      	movs	r3, #1
   c316c:	702b      	strb	r3, [r5, #0]
  }
  DEBUG_SERIAL_OBJECT.print(s);
   c316e:	f001 fe3b 	bl	c4de8 <_Z16_fetch_usbserialv>
   c3172:	4621      	mov	r1, r4
}
   c3174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DEBUG_SERIAL_OBJECT.print(s);
   c3178:	f001 bc42 	b.w	c4a00 <_ZN5Print5printEPKc>
   c317c:	2003e6d8 	.word	0x2003e6d8

000c3180 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
   c3180:	4770      	bx	lr

000c3182 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    error_reporter->Report("%s", line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   c3182:	6880      	ldr	r0, [r0, #8]
   c3184:	4770      	bx	lr

000c3186 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   c3186:	b510      	push	{r4, lr}
}
   c3188:	2128      	movs	r1, #40	; 0x28
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   c318a:	4604      	mov	r4, r0
}
   c318c:	f7f1 fcbd 	bl	b4b0a <_ZdlPvj>
   c3190:	4620      	mov	r0, r4
   c3192:	bd10      	pop	{r4, pc}

000c3194 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
   c3194:	b538      	push	{r3, r4, r5, lr}
   c3196:	4604      	mov	r4, r0
   c3198:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   c319a:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   c319e:	428d      	cmp	r5, r1
   c31a0:	db05      	blt.n	c31ae <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    error_reporter->Report("Too many buffers (max is %d)", max_buffer_count_);
   c31a2:	460a      	mov	r2, r1
   c31a4:	490a      	ldr	r1, [pc, #40]	; (c31d0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x3c>)
   c31a6:	f001 f9f3 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   c31aa:	2001      	movs	r0, #1
}
   c31ac:	bd38      	pop	{r3, r4, r5, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   c31ae:	68e0      	ldr	r0, [r4, #12]
   c31b0:	210c      	movs	r1, #12
   c31b2:	434d      	muls	r5, r1
   c31b4:	1941      	adds	r1, r0, r5
  current->size = size;
   c31b6:	5142      	str	r2, [r0, r5]
  current->first_time_used = first_time_used;
   c31b8:	604b      	str	r3, [r1, #4]
  current->last_time_used = last_time_used;
   c31ba:	9b04      	ldr	r3, [sp, #16]
   c31bc:	608b      	str	r3, [r1, #8]
  ++buffer_count_;
   c31be:	68a3      	ldr	r3, [r4, #8]
   c31c0:	3301      	adds	r3, #1
   c31c2:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
   c31c4:	2301      	movs	r3, #1
   c31c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return kTfLiteOk;
   c31ca:	2000      	movs	r0, #0
   c31cc:	e7ee      	b.n	c31ac <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   c31ce:	bf00      	nop
   c31d0:	000c95bf 	.word	0x000c95bf

000c31d4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   c31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   c31d6:	4604      	mov	r4, r0
   c31d8:	460b      	mov	r3, r1
   c31da:	2501      	movs	r5, #1
    any_swapped = false;
   c31dc:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   c31de:	4295      	cmp	r5, r2
   c31e0:	da12      	bge.n	c3208 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   c31e2:	e9d4 7c00 	ldrd	r7, ip, [r4]
   c31e6:	4567      	cmp	r7, ip
        values[i] = value_temp;
   c31e8:	bfbc      	itt	lt
   c31ea:	e9c4 c700 	strdlt	ip, r7, [r4]
        ids[i - 1] = ids[i];
   c31ee:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    for (int i = 1; i < size; ++i) {
   c31f2:	f105 0501 	add.w	r5, r5, #1
        ids[i] = id_temp;
   c31f6:	bfb8      	it	lt
   c31f8:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   c31fc:	f104 0404 	add.w	r4, r4, #4
   c3200:	bfb8      	it	lt
   c3202:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   c3204:	3304      	adds	r3, #4
   c3206:	e7ea      	b.n	c31de <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   c3208:	2e00      	cmp	r6, #0
   c320a:	d1e4      	bne.n	c31d6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   c320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000c3210 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   c3210:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   c3212:	4c0c      	ldr	r4, [pc, #48]	; (c3244 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x34>)
   c3214:	6004      	str	r4, [r0, #0]
   c3216:	2400      	movs	r4, #0
   c3218:	6084      	str	r4, [r0, #8]
   c321a:	2401      	movs	r4, #1
   c321c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  max_buffer_count_ = scratch_buffer_size / per_buffer_size;
   c3220:	2424      	movs	r4, #36	; 0x24
   c3222:	fb92 f2f4 	sdiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   c3226:	240c      	movs	r4, #12
   c3228:	4354      	muls	r4, r2
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   c322a:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   c322c:	4421      	add	r1, r4
  buffer_sizes_sorted_by_size_ = reinterpret_cast<int*>(next_free);
   c322e:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   c3230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_by_size_ = reinterpret_cast<int*>(next_free);
   c3234:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
   c3236:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   c323a:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   c323c:	4421      	add	r1, r4
  max_buffer_count_ = scratch_buffer_size / per_buffer_size;
   c323e:	6042      	str	r2, [r0, #4]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   c3240:	6201      	str	r1, [r0, #32]
}
   c3242:	bd10      	pop	{r4, pc}
   c3244:	000c9610 	.word	0x000c9610

000c3248 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   c3248:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   c324a:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   c324c:	68c1      	ldr	r1, [r0, #12]
   c324e:	200c      	movs	r0, #12
   c3250:	fb00 1104 	mla	r1, r0, r4, r1
  if (entry_requirements->first_time_used > last_time_used) {
   c3254:	6848      	ldr	r0, [r1, #4]
   c3256:	4298      	cmp	r0, r3
   c3258:	dc05      	bgt.n	c3266 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1e>
  if (first_time_used > entry_requirements->last_time_used) {
   c325a:	6888      	ldr	r0, [r1, #8]
   c325c:	4290      	cmp	r0, r2
   c325e:	bfb4      	ite	lt
   c3260:	2000      	movlt	r0, #0
   c3262:	2001      	movge	r0, #1
}
   c3264:	bd10      	pop	{r4, pc}
    return false;
   c3266:	2000      	movs	r0, #0
   c3268:	e7fc      	b.n	c3264 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>

000c326a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   c326a:	b570      	push	{r4, r5, r6, lr}
   c326c:	4605      	mov	r5, r0
  if (start == nullptr) {
   c326e:	b969      	cbnz	r1, c328c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x22>
    candidate_next_entry = &buffers_sorted_by_offset_[0];
   c3270:	6984      	ldr	r4, [r0, #24]
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   c3272:	260c      	movs	r6, #12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   c3274:	4621      	mov	r1, r4
   c3276:	4628      	mov	r0, r5
   c3278:	f7ff ffe6 	bl	c3248 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   c327c:	b978      	cbnz	r0, c329e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x34>
    if (candidate_next_entry->next_entry_index == -1) {
   c327e:	68a1      	ldr	r1, [r4, #8]
   c3280:	1c4c      	adds	r4, r1, #1
   c3282:	d00e      	beq.n	c32a2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x38>
    candidate_next_entry =
   c3284:	69ac      	ldr	r4, [r5, #24]
   c3286:	fb06 4401 	mla	r4, r6, r1, r4
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   c328a:	e7f3      	b.n	c3274 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0xa>
    if (start->next_entry_index == -1) {
   c328c:	6889      	ldr	r1, [r1, #8]
   c328e:	1c4e      	adds	r6, r1, #1
   c3290:	d004      	beq.n	c329c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   c3292:	6984      	ldr	r4, [r0, #24]
   c3294:	200c      	movs	r0, #12
   c3296:	fb00 4401 	mla	r4, r0, r1, r4
   c329a:	e7ea      	b.n	c3272 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   c329c:	2400      	movs	r4, #0
}
   c329e:	4620      	mov	r0, r4
   c32a0:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   c32a2:	4604      	mov	r4, r0
   c32a4:	e7fb      	b.n	c329e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x34>

000c32a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   c32a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   c32aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   c32ae:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   c32b0:	2b00      	cmp	r3, #0
   c32b2:	f000 8089 	beq.w	c33c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
   c32b6:	6883      	ldr	r3, [r0, #8]
   c32b8:	2b00      	cmp	r3, #0
   c32ba:	f000 8085 	beq.w	c33c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
  need_to_calculate_offsets_ = false;
   c32be:	2300      	movs	r3, #0
   c32c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c32c4:	260c      	movs	r6, #12
    buffer_offsets_[i] = -1;
   c32c6:	f04f 31ff 	mov.w	r1, #4294967295
  for (int i = 0; i < buffer_count_; ++i) {
   c32ca:	68a2      	ldr	r2, [r4, #8]
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c32cc:	6920      	ldr	r0, [r4, #16]
  for (int i = 0; i < buffer_count_; ++i) {
   c32ce:	429a      	cmp	r2, r3
   c32d0:	dd0d      	ble.n	c32ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x48>
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
   c32d2:	68e5      	ldr	r5, [r4, #12]
   c32d4:	fb06 f203 	mul.w	r2, r6, r3
   c32d8:	58aa      	ldr	r2, [r5, r2]
   c32da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    buffer_ids_sorted_by_size_[i] = i;
   c32de:	6962      	ldr	r2, [r4, #20]
   c32e0:	f842 3023 	str.w	r3, [r2, r3, lsl #2]
    buffer_offsets_[i] = -1;
   c32e4:	6a22      	ldr	r2, [r4, #32]
   c32e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   c32ea:	3301      	adds	r3, #1
   c32ec:	e7ed      	b.n	c32ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
  ReverseSortInPlace(buffer_sizes_sorted_by_size_, buffer_ids_sorted_by_size_,
   c32ee:	6961      	ldr	r1, [r4, #20]
   c32f0:	f7ff ff70 	bl	c31d4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[0];
   c32f4:	69a7      	ldr	r7, [r4, #24]
  first_entry->offset = 0;
   c32f6:	2300      	movs	r3, #0
   c32f8:	603b      	str	r3, [r7, #0]
  first_entry->requirements_index = buffer_ids_sorted_by_size_[0];
   c32fa:	6962      	ldr	r2, [r4, #20]
   c32fc:	6812      	ldr	r2, [r2, #0]
   c32fe:	607a      	str	r2, [r7, #4]
  first_entry->next_entry_index = -1;
   c3300:	f04f 32ff 	mov.w	r2, #4294967295
   c3304:	60ba      	str	r2, [r7, #8]
  buffer_offsets_[buffer_ids_sorted_by_size_[0]] = 0;
   c3306:	6962      	ldr	r2, [r4, #20]
  next_free_entry_ = 1;
   c3308:	2501      	movs	r5, #1
   c330a:	61e5      	str	r5, [r4, #28]
  buffer_offsets_[buffer_ids_sorted_by_size_[0]] = 0;
   c330c:	6811      	ldr	r1, [r2, #0]
   c330e:	6a22      	ldr	r2, [r4, #32]
   c3310:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c3314:	f04f 080c 	mov.w	r8, #12
  for (int i = 1; i < buffer_count_; ++i) {
   c3318:	68a3      	ldr	r3, [r4, #8]
   c331a:	42ab      	cmp	r3, r5
   c331c:	dd54      	ble.n	c33c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    const int buffer_id = buffer_ids_sorted_by_size_[i];
   c331e:	6963      	ldr	r3, [r4, #20]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c3320:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    const int buffer_id = buffer_ids_sorted_by_size_[i];
   c3324:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   c3328:	fb08 f20b 	mul.w	r2, r8, fp
   c332c:	eb0a 0302 	add.w	r3, sl, r2
    const int wanted_size = wanted_requirements->size;
   c3330:	f85a 2002 	ldr.w	r2, [sl, r2]
   c3334:	9201      	str	r2, [sp, #4]
    int candidate_offset = 0;
   c3336:	2600      	movs	r6, #0
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   c3338:	685a      	ldr	r2, [r3, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   c333a:	edd3 7a02 	vldr	s15, [r3, #8]
    ListEntry* prior_entry = nullptr;
   c333e:	4630      	mov	r0, r6
      ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   c3340:	4681      	mov	r9, r0
   c3342:	4601      	mov	r1, r0
   c3344:	ee17 3a90 	vmov	r3, s15
   c3348:	4620      	mov	r0, r4
   c334a:	f7ff ff8e 	bl	c326a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
      if (prior_entry) {
   c334e:	f1b9 0f00 	cmp.w	r9, #0
   c3352:	d00b      	beq.n	c336c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc6>
            &requirements_[prior_entry->requirements_index];
   c3354:	f8d9 1004 	ldr.w	r1, [r9, #4]
        const int prior_entry_offset =
   c3358:	f8d9 c000 	ldr.w	ip, [r9]
            prior_entry->offset + candidate_requirements->size;
   c335c:	fb08 f101 	mul.w	r1, r8, r1
        const int prior_entry_offset =
   c3360:	f85a 1001 	ldr.w	r1, [sl, r1]
   c3364:	4461      	add	r1, ip
   c3366:	428e      	cmp	r6, r1
   c3368:	bfb8      	it	lt
   c336a:	460e      	movlt	r6, r1
      if (next_entry == nullptr) {
   c336c:	b120      	cbz	r0, c3378 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd2>
      const int gap = next_entry->offset - candidate_offset;
   c336e:	6801      	ldr	r1, [r0, #0]
      if (gap >= wanted_size) {
   c3370:	9b01      	ldr	r3, [sp, #4]
      const int gap = next_entry->offset - candidate_offset;
   c3372:	1b89      	subs	r1, r1, r6
      if (gap >= wanted_size) {
   c3374:	428b      	cmp	r3, r1
   c3376:	dce3      	bgt.n	c3340 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x9a>
    buffer_offsets_[buffer_id] = candidate_offset;
   c3378:	6a23      	ldr	r3, [r4, #32]
   c337a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   c337e:	69e3      	ldr	r3, [r4, #28]
   c3380:	69a2      	ldr	r2, [r4, #24]
   c3382:	fb08 f303 	mul.w	r3, r8, r3
   c3386:	eb02 0c03 	add.w	ip, r2, r3
    new_entry->offset = candidate_offset;
   c338a:	50d6      	str	r6, [r2, r3]
    new_entry->requirements_index = buffer_id;
   c338c:	f8cc b004 	str.w	fp, [ip, #4]
    const int new_entry_index = next_free_entry_;
   c3390:	69e0      	ldr	r0, [r4, #28]
    ++next_free_entry_;
   c3392:	1c43      	adds	r3, r0, #1
   c3394:	61e3      	str	r3, [r4, #28]
   c3396:	463b      	mov	r3, r7
      const int next_entry_index = current_entry->next_entry_index;
   c3398:	689a      	ldr	r2, [r3, #8]
      if (next_entry_index == -1) {
   c339a:	1c51      	adds	r1, r2, #1
   c339c:	d106      	bne.n	c33ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
        current_entry->next_entry_index = new_entry_index;
   c339e:	6098      	str	r0, [r3, #8]
        new_entry->next_entry_index = -1;
   c33a0:	f8cc 2008 	str.w	r2, [ip, #8]
  for (int i = 1; i < buffer_count_; ++i) {
   c33a4:	3501      	adds	r5, #1
   c33a6:	e7b7      	b.n	c3318 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x72>
   c33a8:	464b      	mov	r3, r9
   c33aa:	e7f5      	b.n	c3398 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf2>
      ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   c33ac:	f8d4 e018 	ldr.w	lr, [r4, #24]
   c33b0:	fb08 f102 	mul.w	r1, r8, r2
   c33b4:	eb0e 0901 	add.w	r9, lr, r1
      if (next_entry->offset > candidate_offset) {
   c33b8:	f85e 1001 	ldr.w	r1, [lr, r1]
   c33bc:	428e      	cmp	r6, r1
   c33be:	daf3      	bge.n	c33a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
        new_entry->next_entry_index = current_entry->next_entry_index;
   c33c0:	f8cc 2008 	str.w	r2, [ip, #8]
        current_entry->next_entry_index = new_entry_index;
   c33c4:	6098      	str	r0, [r3, #8]
        break;
   c33c6:	e7ed      	b.n	c33a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xfe>
}
   c33c8:	b003      	add	sp, #12
   c33ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c33ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
int GreedyMemoryPlanner::GetMaximumMemorySize() {
   c33ce:	b570      	push	{r4, r5, r6, lr}
   c33d0:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   c33d2:	f7ff ff68 	bl	c32a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   c33d6:	68a0      	ldr	r0, [r4, #8]
   c33d8:	b198      	cbz	r0, c3402 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
  ListEntry* entry = &buffers_sorted_by_offset_[0];
   c33da:	69a1      	ldr	r1, [r4, #24]
  int max_size = 0;
   c33dc:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[0];
   c33de:	460b      	mov	r3, r1
    const int current_size = entry->offset + requirements->size;
   c33e0:	250c      	movs	r5, #12
  while (entry) {
   c33e2:	b173      	cbz	r3, c3402 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
        &requirements_[entry->requirements_index];
   c33e4:	685a      	ldr	r2, [r3, #4]
    const int current_size = entry->offset + requirements->size;
   c33e6:	68e6      	ldr	r6, [r4, #12]
   c33e8:	436a      	muls	r2, r5
   c33ea:	58b2      	ldr	r2, [r6, r2]
   c33ec:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   c33ee:	689b      	ldr	r3, [r3, #8]
    const int current_size = entry->offset + requirements->size;
   c33f0:	4432      	add	r2, r6
   c33f2:	4290      	cmp	r0, r2
   c33f4:	bfb8      	it	lt
   c33f6:	4610      	movlt	r0, r2
    if (entry->next_entry_index == -1) {
   c33f8:	1c5a      	adds	r2, r3, #1
   c33fa:	d002      	beq.n	c3402 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   c33fc:	fb05 1303 	mla	r3, r5, r3, r1
  while (entry) {
   c3400:	e7ef      	b.n	c33e2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x14>
}
   c3402:	bd70      	pop	{r4, r5, r6, pc}

000c3404 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   c3404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3406:	4614      	mov	r4, r2
   c3408:	4605      	mov	r5, r0
   c340a:	460f      	mov	r7, r1
   c340c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   c340e:	f7ff ff4a 	bl	c32a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   c3412:	2c00      	cmp	r4, #0
   c3414:	db02      	blt.n	c341c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   c3416:	68ab      	ldr	r3, [r5, #8]
   c3418:	42a3      	cmp	r3, r4
   c341a:	dc07      	bgt.n	c342c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    error_reporter->Report("buffer index %d is outside range 0 to %d",
   c341c:	68ab      	ldr	r3, [r5, #8]
   c341e:	4906      	ldr	r1, [pc, #24]	; (c3438 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   c3420:	4622      	mov	r2, r4
   c3422:	4638      	mov	r0, r7
   c3424:	f001 f8b4 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c3428:	2001      	movs	r0, #1
                           buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   c342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   c342c:	6a2b      	ldr	r3, [r5, #32]
   c342e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   c3432:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   c3434:	2000      	movs	r0, #0
   c3436:	e7f8      	b.n	c342a <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   c3438:	000c95dc 	.word	0x000c95dc

000c343c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0>:
};

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   c343c:	b538      	push	{r3, r4, r5, lr}
   c343e:	4604      	mov	r4, r0
   c3440:	4610      	mov	r0, r2
   c3442:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   c3444:	b924      	cbnz	r4, c3450 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    error_reporter->Report("Input array not provided for operation '%s'.\n",
   c3446:	490f      	ldr	r1, [pc, #60]	; (c3484 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x48>)
                           op_name);
    return kTfLiteError;
  } else {
    int num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      error_reporter->Report(
   c3448:	f001 f8a2 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   c344c:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   c344e:	bd38      	pop	{r3, r4, r5, pc}
   c3450:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   c3452:	2d08      	cmp	r5, #8
   c3454:	d80c      	bhi.n	c3470 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x34>
   c3456:	4622      	mov	r2, r4
      for (int i = 0; i < num_dimensions; ++i) {
   c3458:	2300      	movs	r3, #0
   c345a:	429d      	cmp	r5, r3
   c345c:	d010      	beq.n	c3480 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x44>
    FLATBUFFERS_ASSERT(i < size());
   c345e:	6820      	ldr	r0, [r4, #0]
   c3460:	4298      	cmp	r0, r3
   c3462:	d807      	bhi.n	c3474 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x38>
   c3464:	4b08      	ldr	r3, [pc, #32]	; (c3488 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
   c3466:	4a09      	ldr	r2, [pc, #36]	; (c348c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   c3468:	4809      	ldr	r0, [pc, #36]	; (c3490 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   c346a:	21ed      	movs	r1, #237	; 0xed
   c346c:	f001 fa26 	bl	c48bc <__assert_func>
      error_reporter->Report(
   c3470:	4908      	ldr	r1, [pc, #32]	; (c3494 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   c3472:	e7e9      	b.n	c3448 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   c3474:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   c3478:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (int i = 0; i < num_dimensions; ++i) {
   c347c:	3301      	adds	r3, #1
   c347e:	e7ec      	b.n	c345a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   c3480:	2000      	movs	r0, #0
   c3482:	e7e4      	b.n	c344e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   c3484:	000c9628 	.word	0x000c9628
   c3488:	000c726b 	.word	0x000c726b
   c348c:	000c73b2 	.word	0x000c73b2
   c3490:	000c733e 	.word	0x000c733e
   c3494:	000c9656 	.word	0x000c9656

000c3498 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   c3498:	6803      	ldr	r3, [r0, #0]
   c349a:	685b      	ldr	r3, [r3, #4]
   c349c:	4718      	bx	r3

000c349e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   c349e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   c34a0:	210c      	movs	r1, #12
   c34a2:	4604      	mov	r4, r0
   c34a4:	f7f2 f9bd 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c34a8:	b110      	cbz	r0, c34b0 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   c34aa:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c34ac:	5820      	ldr	r0, [r4, r0]
   c34ae:	4418      	add	r0, r3
  }
   c34b0:	bd10      	pop	{r4, pc}
	...

000c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   c34b4:	b508      	push	{r3, lr}
   c34b6:	4603      	mov	r3, r0
   c34b8:	4610      	mov	r0, r2
   c34ba:	2b09      	cmp	r3, #9
   c34bc:	d806      	bhi.n	c34cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x18>
   c34be:	e8df f003 	tbb	[pc, r3]
   c34c2:	110f      	.short	0x110f
   c34c4:	1d1b1715 	.word	0x1d1b1715
   c34c8:	1921131f 	.word	0x1921131f
  *type = kTfLiteNoType;
   c34cc:	2200      	movs	r2, #0
      break;
    case TensorType_BOOL:
      *type = kTfLiteBool;
      break;
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
   c34ce:	700a      	strb	r2, [r1, #0]
      break;
  }
  if (*type == kTfLiteNoType) {
   c34d0:	780a      	ldrb	r2, [r1, #0]
   c34d2:	b9ca      	cbnz	r2, c3508 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x54>
    error_reporter->Report("Unsupported data type %d in tensor\n", tensor_type);
   c34d4:	490d      	ldr	r1, [pc, #52]	; (c350c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x58>)
   c34d6:	461a      	mov	r2, r3
   c34d8:	f001 f85a 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   c34dc:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
   c34de:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
   c34e0:	2201      	movs	r2, #1
   c34e2:	e7f4      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteFloat16;
   c34e4:	220a      	movs	r2, #10
   c34e6:	e7f2      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt16;
   c34e8:	2207      	movs	r2, #7
   c34ea:	e7f0      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt32;
   c34ec:	2202      	movs	r2, #2
   c34ee:	e7ee      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteUInt8;
   c34f0:	2203      	movs	r2, #3
   c34f2:	e7ec      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt8;
   c34f4:	2209      	movs	r2, #9
   c34f6:	e7ea      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteInt64;
   c34f8:	2204      	movs	r2, #4
   c34fa:	e7e8      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteString;
   c34fc:	2205      	movs	r2, #5
   c34fe:	e7e6      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteBool;
   c3500:	2206      	movs	r2, #6
   c3502:	e7e4      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
      *type = kTfLiteComplex64;
   c3504:	2208      	movs	r2, #8
   c3506:	e7e2      	b.n	c34ce <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1a>
  return kTfLiteOk;
   c3508:	2000      	movs	r0, #0
   c350a:	e7e8      	b.n	c34de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x2a>
   c350c:	000c9697 	.word	0x000c9697

000c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c3510:	b538      	push	{r3, r4, r5, lr}
   c3512:	4605      	mov	r5, r0
   c3514:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c3516:	f7f2 f984 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c351a:	b100      	cbz	r0, c351e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   c351c:	5c2c      	ldrb	r4, [r5, r0]
  }
   c351e:	4620      	mov	r0, r4
   c3520:	bd38      	pop	{r3, r4, r5, pc}

000c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  BuiltinOptions builtin_options_type() const {
   c3522:	b508      	push	{r3, lr}
    return static_cast<BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   c3524:	2200      	movs	r2, #0
   c3526:	210a      	movs	r1, #10
   c3528:	f7ff fff2 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   c352c:	bd08      	pop	{r3, pc}

000c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c352e:	b538      	push	{r3, r4, r5, lr}
   c3530:	4605      	mov	r5, r0
   c3532:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c3534:	f7f2 f975 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c3538:	b100      	cbz	r0, c353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0xe>
   c353a:	582c      	ldr	r4, [r5, r0]
  }
   c353c:	4620      	mov	r0, r4
   c353e:	bd38      	pop	{r3, r4, r5, pc}

000c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c3540:	b538      	push	{r3, r4, r5, lr}
   c3542:	4605      	mov	r5, r0
   c3544:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   c3546:	f7f2 f96c 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c354a:	b100      	cbz	r0, c354e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   c354c:	562c      	ldrsb	r4, [r5, r0]
  }
   c354e:	4620      	mov	r0, r4
   c3550:	bd38      	pop	{r3, r4, r5, pc}

000c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   c3552:	b510      	push	{r4, lr}
   c3554:	ed2d 8b02 	vpush	{d8}
   c3558:	4604      	mov	r4, r0
   c355a:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
   c355e:	f7f2 f960 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c3562:	b110      	cbz	r0, c356a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
   c3564:	4404      	add	r4, r0
   c3566:	ed94 8a00 	vldr	s16, [r4]
  }
   c356a:	eeb0 0a48 	vmov.f32	s0, s16
   c356e:	ecbd 8b02 	vpop	{d8}
   c3572:	bd10      	pop	{r4, pc}

000c3574 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
// If it returns kTfLiteOk, it passes the data out with `builtin_data`, which
// need to be released by calling `free`.`
// If it returns kTfLiteError, `builtin_data` will be `nullptr`.
TfLiteStatus ParseOpData(const Operator* op, BuiltinOperator op_type,
                         ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   c3574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3578:	9f08      	ldr	r7, [sp, #32]
   c357a:	461c      	mov	r4, r3
        return kTfLiteCombinerTypeSum;
    }
  };

  SafeBuiltinDataAllocator safe_allocator(allocator);
  *builtin_data = nullptr;
   c357c:	2300      	movs	r3, #0
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   c357e:	4605      	mov	r5, r0
   c3580:	460e      	mov	r6, r1
   c3582:	4690      	mov	r8, r2
  *builtin_data = nullptr;
   c3584:	603b      	str	r3, [r7, #0]
  switch (op_type) {
   c3586:	2977      	cmp	r1, #119	; 0x77
   c3588:	f200 8284 	bhi.w	c3a94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x520>
   c358c:	e8df f011 	tbh	[pc, r1, lsl #1]
   c3590:	010802df 	.word	0x010802df
   c3594:	0078029e 	.word	0x0078029e
   c3598:	04e30149 	.word	0x04e30149
   c359c:	02820282 	.word	0x02820282
   c35a0:	024b0282 	.word	0x024b0282
   c35a4:	03360282 	.word	0x03360282
   c35a8:	03530108 	.word	0x03530108
   c35ac:	00e90282 	.word	0x00e90282
   c35b0:	01080384 	.word	0x01080384
   c35b4:	028202c2 	.word	0x028202c2
   c35b8:	02820282 	.word	0x02820282
   c35bc:	04420478 	.word	0x04420478
   c35c0:	0284020e 	.word	0x0284020e
   c35c4:	019204ca 	.word	0x019204ca
   c35c8:	02820282 	.word	0x02820282
   c35cc:	028204a1 	.word	0x028204a1
   c35d0:	022b0282 	.word	0x022b0282
   c35d4:	01b70282 	.word	0x01b70282
   c35d8:	028204fc 	.word	0x028204fc
   c35dc:	02820282 	.word	0x02820282
   c35e0:	03190517 	.word	0x03190517
   c35e4:	056502fc 	.word	0x056502fc
   c35e8:	058403c3 	.word	0x058403c3
   c35ec:	028201de 	.word	0x028201de
   c35f0:	05330282 	.word	0x05330282
   c35f4:	067b0282 	.word	0x067b0282
   c35f8:	00b80402 	.word	0x00b80402
   c35fc:	02820282 	.word	0x02820282
   c3600:	028205b6 	.word	0x028205b6
   c3604:	02820282 	.word	0x02820282
   c3608:	02820282 	.word	0x02820282
   c360c:	02820282 	.word	0x02820282
   c3610:	02820282 	.word	0x02820282
   c3614:	05f00282 	.word	0x05f00282
   c3618:	02820622 	.word	0x02820622
   c361c:	02820282 	.word	0x02820282
   c3620:	02820282 	.word	0x02820282
   c3624:	02820517 	.word	0x02820517
   c3628:	063e0282 	.word	0x063e0282
   c362c:	05d30282 	.word	0x05d30282
   c3630:	05170681 	.word	0x05170681
   c3634:	065b0517 	.word	0x065b0517
   c3638:	06b40282 	.word	0x06b40282
   c363c:	02820282 	.word	0x02820282
   c3640:	051706cd 	.word	0x051706cd
   c3644:	05170282 	.word	0x05170282
   c3648:	02820282 	.word	0x02820282
   c364c:	02820282 	.word	0x02820282
   c3650:	045d0282 	.word	0x045d0282
   c3654:	028206ed 	.word	0x028206ed
   c3658:	02820708 	.word	0x02820708
   c365c:	0725054c 	.word	0x0725054c
   c3660:	02820282 	.word	0x02820282
   c3664:	02820282 	.word	0x02820282
   c3668:	02820282 	.word	0x02820282
   c366c:	02820282 	.word	0x02820282
   c3670:	02820742 	.word	0x02820742
   c3674:	02820282 	.word	0x02820282
   c3678:	02820282 	.word	0x02820282
   c367c:	07820762 	.word	0x07820762
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    return static_cast<T*>(this->Allocate(sizeof(T)));
   c3680:	6823      	ldr	r3, [r4, #0]
   c3682:	2118      	movs	r1, #24
   c3684:	681b      	ldr	r3, [r3, #0]
   c3686:	4620      	mov	r0, r4
   c3688:	4798      	blx	r3
   c368a:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_Conv2DOptions ? static_cast<const Conv2DOptions *>(builtin_options()) : nullptr;
   c368c:	4628      	mov	r0, r5
   c368e:	f7ff ff48 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3692:	2801      	cmp	r0, #1
   c3694:	4606      	mov	r6, r0
   c3696:	d131      	bne.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3698:	4628      	mov	r0, r5
   c369a:	f7ff ff00 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
    case BuiltinOperator_CONV_2D: {
      auto params = safe_allocator.Allocate<TfLiteConvParams>();
      if (auto* conv_params = op->builtin_options_as_Conv2DOptions()) {
   c369e:	4605      	mov	r5, r0
   c36a0:	b360      	cbz	r0, c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c36a2:	2200      	movs	r2, #0
   c36a4:	2104      	movs	r1, #4
   c36a6:	f7ff ff4b 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c36aa:	b118      	cbz	r0, c36b4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x140>
   c36ac:	2801      	cmp	r0, #1
   c36ae:	bf14      	ite	ne
   c36b0:	2600      	movne	r6, #0
   c36b2:	2602      	moveq	r6, #2
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c36b4:	2200      	movs	r2, #0
   c36b6:	2106      	movs	r1, #6
        params->padding = parse_padding(conv_params->padding());
   c36b8:	7026      	strb	r6, [r4, #0]
   c36ba:	4628      	mov	r0, r5
   c36bc:	f7ff ff37 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c36c0:	2200      	movs	r2, #0
        params->stride_width = conv_params->stride_w();
   c36c2:	6060      	str	r0, [r4, #4]
   c36c4:	2108      	movs	r1, #8
   c36c6:	4628      	mov	r0, r5
   c36c8:	f7ff ff31 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c36cc:	2200      	movs	r2, #0
        params->stride_height = conv_params->stride_h();
   c36ce:	60a0      	str	r0, [r4, #8]
   c36d0:	210a      	movs	r1, #10
   c36d2:	4628      	mov	r0, r5
   c36d4:	f7ff ff34 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c36d8:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c36da:	1e43      	subs	r3, r0, #1
   c36dc:	2b04      	cmp	r3, #4
   c36de:	bf88      	it	hi
   c36e0:	2000      	movhi	r0, #0
        params->activation =
   c36e2:	7520      	strb	r0, [r4, #20]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   c36e4:	2201      	movs	r2, #1
   c36e6:	210c      	movs	r1, #12
   c36e8:	4628      	mov	r0, r5
   c36ea:	f7ff ff20 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   c36ee:	2201      	movs	r2, #1
            parse_activation(conv_params->fused_activation_function());

        params->dilation_width_factor = conv_params->dilation_w_factor();
   c36f0:	60e0      	str	r0, [r4, #12]
   c36f2:	210e      	movs	r1, #14
   c36f4:	4628      	mov	r0, r5
   c36f6:	f7ff ff1a 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->dilation_height_factor = conv_params->dilation_h_factor();
   c36fa:	6120      	str	r0, [r4, #16]
      TfLiteWhileParams* params = allocator->AllocatePOD<TfLiteWhileParams>();
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
        params->cond_subgraph_index = while_params->cond_subgraph_index();
        params->body_subgraph_index = while_params->body_subgraph_index();
      }
      *builtin_data = reinterpret_cast<void*>(params);
   c36fc:	603c      	str	r4, [r7, #0]
      break;
   c36fe:	e1c9      	b.n	c3a94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x520>
   c3700:	6823      	ldr	r3, [r4, #0]
   c3702:	2102      	movs	r1, #2
   c3704:	681b      	ldr	r3, [r3, #0]
   c3706:	4620      	mov	r0, r4
   c3708:	4798      	blx	r3
   c370a:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_CastOptions ? static_cast<const CastOptions *>(builtin_options()) : nullptr;
   c370c:	4628      	mov	r0, r5
   c370e:	f7ff ff08 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3712:	2825      	cmp	r0, #37	; 0x25
   c3714:	f040 81bd 	bne.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3718:	4628      	mov	r0, r5
   c371a:	f7ff fec0 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_CastOptions()) {
   c371e:	4681      	mov	r9, r0
   c3720:	2800      	cmp	r0, #0
   c3722:	f000 81b6 	beq.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    return static_cast<TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
   c3726:	2200      	movs	r2, #0
   c3728:	2104      	movs	r1, #4
   c372a:	f7ff ff09 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
            ConvertTensorType(schema_params->in_data_type(),
   c372e:	4642      	mov	r2, r8
   c3730:	4631      	mov	r1, r6
   c3732:	b2c0      	uxtb	r0, r0
   c3734:	f7ff febe 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
   c3738:	2200      	movs	r2, #0
   c373a:	4605      	mov	r5, r0
   c373c:	2106      	movs	r1, #6
   c373e:	4648      	mov	r0, r9
   c3740:	f7ff fefe 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
            ConvertTensorType(schema_params->out_data_type(),
   c3744:	4642      	mov	r2, r8
   c3746:	1c71      	adds	r1, r6, #1
   c3748:	b2c0      	uxtb	r0, r0
   c374a:	f7ff feb3 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
        if (in_status != kTfLiteOk || out_status != kTfLiteOk) {
   c374e:	4328      	orrs	r0, r5
   c3750:	b2c0      	uxtb	r0, r0
   c3752:	2800      	cmp	r0, #0
   c3754:	f000 819d 	beq.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   c3758:	2e00      	cmp	r6, #0
   c375a:	f040 8194 	bne.w	c3a86 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x512>
      return kTfLiteError;
   c375e:	2001      	movs	r0, #1
   c3760:	e210      	b.n	c3b84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x610>
   c3762:	6823      	ldr	r3, [r4, #0]
   c3764:	2101      	movs	r1, #1
   c3766:	681b      	ldr	r3, [r3, #0]
   c3768:	4620      	mov	r0, r4
   c376a:	4798      	blx	r3
   c376c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LSHProjectionOptions ? static_cast<const LSHProjectionOptions *>(builtin_options()) : nullptr;
   c376e:	4628      	mov	r0, r5
   c3770:	f7ff fed7 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3774:	2804      	cmp	r0, #4
   c3776:	4606      	mov	r6, r0
   c3778:	d1c0      	bne.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c377a:	4628      	mov	r0, r5
   c377c:	f7ff fe8f 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lshParams =
   c3780:	2800      	cmp	r0, #0
   c3782:	d0bb      	beq.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
   c3784:	2200      	movs	r2, #0
   c3786:	4631      	mov	r1, r6
   c3788:	f7ff feda 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   c378c:	2801      	cmp	r0, #1
   c378e:	d005      	beq.n	c379c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>
   c3790:	2802      	cmp	r0, #2
   c3792:	bf14      	ite	ne
   c3794:	2300      	movne	r3, #0
   c3796:	2302      	moveq	r3, #2
        params->type = parseLSHProjectionType(lshParams->type());
   c3798:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c379a:	e7af      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLiteLshProjectionSparse;
   c379c:	4603      	mov	r3, r0
   c379e:	e7fb      	b.n	c3798 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x224>
   c37a0:	6823      	ldr	r3, [r4, #0]
   c37a2:	2128      	movs	r1, #40	; 0x28
   c37a4:	681b      	ldr	r3, [r3, #0]
   c37a6:	4620      	mov	r0, r4
   c37a8:	4798      	blx	r3
   c37aa:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_Pool2DOptions ? static_cast<const Pool2DOptions *>(builtin_options()) : nullptr;
   c37ac:	4628      	mov	r0, r5
   c37ae:	f7ff feb8 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c37b2:	2805      	cmp	r0, #5
   c37b4:	d1a2      	bne.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c37b6:	4628      	mov	r0, r5
   c37b8:	f7ff fe71 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pool_params = op->builtin_options_as_Pool2DOptions()) {
   c37bc:	4605      	mov	r5, r0
   c37be:	2800      	cmp	r0, #0
   c37c0:	d09c      	beq.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c37c2:	2200      	movs	r2, #0
   c37c4:	2104      	movs	r1, #4
   c37c6:	f7ff febb 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c37ca:	b340      	cbz	r0, c381e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2aa>
   c37cc:	2801      	cmp	r0, #1
   c37ce:	bf14      	ite	ne
   c37d0:	2300      	movne	r3, #0
   c37d2:	2302      	moveq	r3, #2
        params->padding = parse_padding(pool_params->padding());
   c37d4:	7023      	strb	r3, [r4, #0]
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c37d6:	2200      	movs	r2, #0
   c37d8:	2106      	movs	r1, #6
   c37da:	4628      	mov	r0, r5
   c37dc:	f7ff fea7 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c37e0:	2200      	movs	r2, #0
        params->stride_width = pool_params->stride_w();
   c37e2:	6060      	str	r0, [r4, #4]
   c37e4:	2108      	movs	r1, #8
   c37e6:	4628      	mov	r0, r5
   c37e8:	f7ff fea1 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   c37ec:	2200      	movs	r2, #0
        params->stride_height = pool_params->stride_h();
   c37ee:	60a0      	str	r0, [r4, #8]
   c37f0:	210a      	movs	r1, #10
   c37f2:	4628      	mov	r0, r5
   c37f4:	f7ff fe9b 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   c37f8:	2200      	movs	r2, #0
        params->filter_width = pool_params->filter_width();
   c37fa:	60e0      	str	r0, [r4, #12]
   c37fc:	210c      	movs	r1, #12
   c37fe:	4628      	mov	r0, r5
   c3800:	f7ff fe95 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3804:	2200      	movs	r2, #0
        params->filter_height = pool_params->filter_height();
   c3806:	6120      	str	r0, [r4, #16]
   c3808:	210e      	movs	r1, #14
   c380a:	4628      	mov	r0, r5
   c380c:	f7ff fe98 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3810:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3812:	1e43      	subs	r3, r0, #1
   c3814:	2b04      	cmp	r3, #4
   c3816:	bf88      	it	hi
   c3818:	2000      	movhi	r0, #0
        params->activation =
   c381a:	7520      	strb	r0, [r4, #20]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c381c:	e76e      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c381e:	2301      	movs	r3, #1
   c3820:	e7d8      	b.n	c37d4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x260>
   c3822:	6823      	ldr	r3, [r4, #0]
   c3824:	211c      	movs	r1, #28
   c3826:	681b      	ldr	r3, [r3, #0]
   c3828:	4620      	mov	r0, r4
   c382a:	4798      	blx	r3
   c382c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   c382e:	4628      	mov	r0, r5
   c3830:	f7ff fe77 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3834:	2802      	cmp	r0, #2
   c3836:	4606      	mov	r6, r0
   c3838:	f47f af60 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c383c:	4628      	mov	r0, r5
   c383e:	f7ff fe2e 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* conv_params =
   c3842:	4605      	mov	r5, r0
   c3844:	2800      	cmp	r0, #0
   c3846:	f43f af59 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c384a:	2200      	movs	r2, #0
   c384c:	2104      	movs	r1, #4
   c384e:	f7ff fe77 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c3852:	b368      	cbz	r0, c38b0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x33c>
    return kTfLitePaddingUnknown;
   c3854:	2801      	cmp	r0, #1
   c3856:	bf18      	it	ne
   c3858:	2600      	movne	r6, #0
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c385a:	2200      	movs	r2, #0
   c385c:	2106      	movs	r1, #6
        params->padding = parse_padding(conv_params->padding());
   c385e:	7026      	strb	r6, [r4, #0]
   c3860:	4628      	mov	r0, r5
   c3862:	f7ff fe64 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c3866:	2200      	movs	r2, #0
        params->stride_width = conv_params->stride_w();
   c3868:	6060      	str	r0, [r4, #4]
   c386a:	2108      	movs	r1, #8
   c386c:	4628      	mov	r0, r5
   c386e:	f7ff fe5e 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   c3872:	2200      	movs	r2, #0
        params->stride_height = conv_params->stride_h();
   c3874:	60a0      	str	r0, [r4, #8]
   c3876:	210a      	movs	r1, #10
   c3878:	4628      	mov	r0, r5
   c387a:	f7ff fe58 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c387e:	2200      	movs	r2, #0
        params->depth_multiplier = conv_params->depth_multiplier();
   c3880:	60e0      	str	r0, [r4, #12]
   c3882:	210c      	movs	r1, #12
   c3884:	4628      	mov	r0, r5
   c3886:	f7ff fe5b 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c388a:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c388c:	1e43      	subs	r3, r0, #1
   c388e:	2b04      	cmp	r3, #4
   c3890:	bf88      	it	hi
   c3892:	2000      	movhi	r0, #0
        params->activation =
   c3894:	7420      	strb	r0, [r4, #16]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   c3896:	2201      	movs	r2, #1
   c3898:	210e      	movs	r1, #14
   c389a:	4628      	mov	r0, r5
   c389c:	f7ff fe47 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   c38a0:	2201      	movs	r2, #1
        params->dilation_width_factor = conv_params->dilation_w_factor();
   c38a2:	6160      	str	r0, [r4, #20]
   c38a4:	2110      	movs	r1, #16
   c38a6:	4628      	mov	r0, r5
   c38a8:	f7ff fe41 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->dilation_height_factor = conv_params->dilation_h_factor();
   c38ac:	61a0      	str	r0, [r4, #24]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c38ae:	e725      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c38b0:	2601      	movs	r6, #1
   c38b2:	e7d2      	b.n	c385a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2e6>
   c38b4:	6823      	ldr	r3, [r4, #0]
   c38b6:	2108      	movs	r1, #8
   c38b8:	681b      	ldr	r3, [r3, #0]
   c38ba:	4620      	mov	r0, r4
   c38bc:	4798      	blx	r3
   c38be:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SVDFOptions ? static_cast<const SVDFOptions *>(builtin_options()) : nullptr;
   c38c0:	4628      	mov	r0, r5
   c38c2:	f7ff fe2e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c38c6:	2806      	cmp	r0, #6
   c38c8:	4606      	mov	r6, r0
   c38ca:	f47f af17 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c38ce:	4628      	mov	r0, r5
   c38d0:	f7ff fde5 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* svdf_params = op->builtin_options_as_SVDFOptions()) {
   c38d4:	4605      	mov	r5, r0
   c38d6:	2800      	cmp	r0, #0
   c38d8:	f43f af10 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_RANK, 0);
   c38dc:	2200      	movs	r2, #0
   c38de:	2104      	movs	r1, #4
   c38e0:	f7ff fe25 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c38e4:	2200      	movs	r2, #0
        params->rank = svdf_params->rank();
   c38e6:	6020      	str	r0, [r4, #0]
   c38e8:	4631      	mov	r1, r6
   c38ea:	4628      	mov	r0, r5
   c38ec:	f7ff fe28 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c38f0:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c38f2:	1e5a      	subs	r2, r3, #1
   c38f4:	2a04      	cmp	r2, #4
   c38f6:	bf88      	it	hi
   c38f8:	2300      	movhi	r3, #0
        params->activation =
   c38fa:	7123      	strb	r3, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c38fc:	e6fe      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c38fe:	6823      	ldr	r3, [r4, #0]
   c3900:	2102      	movs	r1, #2
   c3902:	681b      	ldr	r3, [r3, #0]
   c3904:	4620      	mov	r0, r4
   c3906:	4798      	blx	r3
   c3908:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SequenceRNNOptions ? static_cast<const SequenceRNNOptions *>(builtin_options()) : nullptr;
   c390a:	4628      	mov	r0, r5
   c390c:	f7ff fe09 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3910:	281f      	cmp	r0, #31
   c3912:	f47f aef3 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3916:	4628      	mov	r0, r5
   c3918:	f7ff fdc1 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sequence_rnn_params =
   c391c:	4605      	mov	r5, r0
   c391e:	2800      	cmp	r0, #0
   c3920:	f43f aeec 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3924:	2200      	movs	r2, #0
   c3926:	2106      	movs	r1, #6
   c3928:	f7ff fe0a 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c392c:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c392e:	1e5a      	subs	r2, r3, #1
   c3930:	2a04      	cmp	r2, #4
   c3932:	bf88      	it	hi
   c3934:	2300      	movhi	r3, #0
        params->activation =
   c3936:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c3938:	2200      	movs	r2, #0
   c393a:	2104      	movs	r1, #4
   c393c:	4628      	mov	r0, r5
   c393e:	f7ff fde7 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3942:	3800      	subs	r0, #0
   c3944:	bf18      	it	ne
   c3946:	2001      	movne	r0, #1
   c3948:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c394a:	e6d7      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c394c:	6823      	ldr	r3, [r4, #0]
   c394e:	2103      	movs	r1, #3
   c3950:	681b      	ldr	r3, [r3, #0]
   c3952:	4620      	mov	r0, r4
   c3954:	4798      	blx	r3
   c3956:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_BidirectionalSequenceRNNOptions ? static_cast<const BidirectionalSequenceRNNOptions *>(builtin_options()) : nullptr;
   c3958:	4628      	mov	r0, r5
   c395a:	f7ff fde2 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c395e:	2846      	cmp	r0, #70	; 0x46
   c3960:	f47f aecc 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3964:	4628      	mov	r0, r5
   c3966:	f7ff fd9a 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_sequence_rnn_params =
   c396a:	4605      	mov	r5, r0
   c396c:	2800      	cmp	r0, #0
   c396e:	f43f aec5 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3972:	2200      	movs	r2, #0
   c3974:	2106      	movs	r1, #6
   c3976:	f7ff fde3 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c397a:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c397c:	1e5a      	subs	r2, r3, #1
   c397e:	2a04      	cmp	r2, #4
   c3980:	bf88      	it	hi
   c3982:	2300      	movhi	r3, #0
        params->activation = parse_activation(
   c3984:	7063      	strb	r3, [r4, #1]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c3986:	2200      	movs	r2, #0
   c3988:	2104      	movs	r1, #4
   c398a:	4628      	mov	r0, r5
   c398c:	f7ff fdc0 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3990:	3800      	subs	r0, #0
   c3992:	bf18      	it	ne
   c3994:	2001      	movne	r0, #1
   c3996:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   c3998:	2200      	movs	r2, #0
   c399a:	2108      	movs	r1, #8
   c399c:	4628      	mov	r0, r5
   c399e:	f7ff fdb7 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c39a2:	3800      	subs	r0, #0
   c39a4:	bf18      	it	ne
   c39a6:	2001      	movne	r0, #1
   c39a8:	70a0      	strb	r0, [r4, #2]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c39aa:	e6a7      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c39ac:	6823      	ldr	r3, [r4, #0]
   c39ae:	2101      	movs	r1, #1
   c39b0:	681b      	ldr	r3, [r3, #0]
   c39b2:	4620      	mov	r0, r4
   c39b4:	4798      	blx	r3
   c39b6:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_RNNOptions ? static_cast<const RNNOptions *>(builtin_options()) : nullptr;
   c39b8:	4628      	mov	r0, r5
   c39ba:	f7ff fdb2 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c39be:	2807      	cmp	r0, #7
   c39c0:	f47f ae9c 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c39c4:	4628      	mov	r0, r5
   c39c6:	f7ff fd6a 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* rnn_params = op->builtin_options_as_RNNOptions()) {
   c39ca:	2800      	cmp	r0, #0
   c39cc:	f43f ae96 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c39d0:	2200      	movs	r2, #0
   c39d2:	2104      	movs	r1, #4
   c39d4:	f7ff fdb4 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c39d8:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c39da:	1e5a      	subs	r2, r3, #1
   c39dc:	2a04      	cmp	r2, #4
   c39de:	bf88      	it	hi
   c39e0:	2300      	movhi	r3, #0
        params->activation =
   c39e2:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c39e4:	e68a      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c39e6:	6823      	ldr	r3, [r4, #0]
   c39e8:	2101      	movs	r1, #1
   c39ea:	681b      	ldr	r3, [r3, #0]
   c39ec:	4620      	mov	r0, r4
   c39ee:	4798      	blx	r3
   c39f0:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
   c39f2:	4628      	mov	r0, r5
   c39f4:	f7ff fd95 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c39f8:	2814      	cmp	r0, #20
   c39fa:	f47f ae7f 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c39fe:	4628      	mov	r0, r5
   c3a00:	f7ff fd4d 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* embedding_params =
   c3a04:	2800      	cmp	r0, #0
   c3a06:	f43f ae79 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
   c3a0a:	2200      	movs	r2, #0
   c3a0c:	2104      	movs	r1, #4
   c3a0e:	f7ff fd97 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (type) {
   c3a12:	2801      	cmp	r0, #1
   c3a14:	d005      	beq.n	c3a22 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4ae>
   c3a16:	2802      	cmp	r0, #2
   c3a18:	bf14      	ite	ne
   c3a1a:	2300      	movne	r3, #0
   c3a1c:	2302      	moveq	r3, #2
        params->combiner = parseCombinerType(embedding_params->combiner());
   c3a1e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3a20:	e66c      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLiteLshProjectionSparse;
   c3a22:	4603      	mov	r3, r0
   c3a24:	e7fb      	b.n	c3a1e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4aa>
   c3a26:	6823      	ldr	r3, [r4, #0]
   c3a28:	2103      	movs	r1, #3
   c3a2a:	681b      	ldr	r3, [r3, #0]
   c3a2c:	4620      	mov	r0, r4
   c3a2e:	4798      	blx	r3
   c3a30:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_FullyConnectedOptions ? static_cast<const FullyConnectedOptions *>(builtin_options()) : nullptr;
   c3a32:	4628      	mov	r0, r5
   c3a34:	f7ff fd75 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3a38:	2808      	cmp	r0, #8
   c3a3a:	4681      	mov	r9, r0
   c3a3c:	d129      	bne.n	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3a3e:	4628      	mov	r0, r5
   c3a40:	f7ff fd2d 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* fully_connected_params =
   c3a44:	4605      	mov	r5, r0
   c3a46:	b320      	cbz	r0, c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3a48:	2200      	movs	r2, #0
   c3a4a:	2104      	movs	r1, #4
   c3a4c:	f7ff fd78 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3a50:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3a52:	1e5a      	subs	r2, r3, #1
   c3a54:	2a04      	cmp	r2, #4
   c3a56:	bf88      	it	hi
   c3a58:	2300      	movhi	r3, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   c3a5a:	2200      	movs	r2, #0
   c3a5c:	4649      	mov	r1, r9
        params->activation = parse_activation(
   c3a5e:	7033      	strb	r3, [r6, #0]
   c3a60:	4628      	mov	r0, r5
   c3a62:	f7ff fd55 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3a66:	3800      	subs	r0, #0
   c3a68:	bf18      	it	ne
   c3a6a:	2001      	movne	r0, #1
   c3a6c:	70b0      	strb	r0, [r6, #2]
    return static_cast<FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   c3a6e:	2200      	movs	r2, #0
   c3a70:	2106      	movs	r1, #6
   c3a72:	4628      	mov	r0, r5
   c3a74:	f7ff fd64 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3a78:	b150      	cbz	r0, c3a90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51c>
   c3a7a:	2801      	cmp	r0, #1
   c3a7c:	d008      	beq.n	c3a90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51c>
            error_reporter->Report("Unhandled fully-connected weights format.");
   c3a7e:	49c1      	ldr	r1, [pc, #772]	; (c3d84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x810>)
   c3a80:	4640      	mov	r0, r8
   c3a82:	f000 fd85 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  get_deleter()(std::move(__ptr));
   c3a86:	4631      	mov	r1, r6
   c3a88:	4620      	mov	r0, r4
   c3a8a:	f7ff fd05 	bl	c3498 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   c3a8e:	e666      	b.n	c375e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ea>
            params->weights_format =
   c3a90:	7070      	strb	r0, [r6, #1]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3a92:	603e      	str	r6, [r7, #0]
  *builtin_data = nullptr;
   c3a94:	2000      	movs	r0, #0
   c3a96:	e075      	b.n	c3b84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x610>
   c3a98:	6823      	ldr	r3, [r4, #0]
   c3a9a:	2104      	movs	r1, #4
   c3a9c:	681b      	ldr	r3, [r3, #0]
   c3a9e:	4620      	mov	r0, r4
   c3aa0:	4798      	blx	r3
   c3aa2:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SoftmaxOptions ? static_cast<const SoftmaxOptions *>(builtin_options()) : nullptr;
   c3aa4:	4628      	mov	r0, r5
   c3aa6:	f7ff fd3c 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3aaa:	2809      	cmp	r0, #9
   c3aac:	f47f ae26 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ab0:	4628      	mov	r0, r5
   c3ab2:	f7ff fcf4 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* softmax_params =
   c3ab6:	2800      	cmp	r0, #0
   c3ab8:	f43f ae20 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_BETA, 0.0f);
   c3abc:	ed9f 0ab4 	vldr	s0, [pc, #720]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3ac0:	2104      	movs	r1, #4
   c3ac2:	f7ff fd46 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = softmax_params->beta();
   c3ac6:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3aca:	e617      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3acc:	6823      	ldr	r3, [r4, #0]
   c3ace:	2108      	movs	r1, #8
   c3ad0:	681b      	ldr	r3, [r3, #0]
   c3ad2:	4620      	mov	r0, r4
   c3ad4:	4798      	blx	r3
   c3ad6:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ConcatenationOptions ? static_cast<const ConcatenationOptions *>(builtin_options()) : nullptr;
   c3ad8:	4628      	mov	r0, r5
   c3ada:	f7ff fd22 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ade:	280a      	cmp	r0, #10
   c3ae0:	f47f ae0c 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ae4:	4628      	mov	r0, r5
   c3ae6:	f7ff fcda 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* concatenation_params =
   c3aea:	4605      	mov	r5, r0
   c3aec:	2800      	cmp	r0, #0
   c3aee:	f43f ae05 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3af2:	2200      	movs	r2, #0
   c3af4:	2106      	movs	r1, #6
   c3af6:	f7ff fd23 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3afa:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3afc:	1e5a      	subs	r2, r3, #1
   c3afe:	2a04      	cmp	r2, #4
   c3b00:	bf88      	it	hi
   c3b02:	2300      	movhi	r3, #0
        params->activation =
   c3b04:	7123      	strb	r3, [r4, #4]
    return GetField<int32_t>(VT_AXIS, 0);
   c3b06:	2200      	movs	r2, #0
   c3b08:	2104      	movs	r1, #4
   c3b0a:	4628      	mov	r0, r5
   c3b0c:	f7ff fd0f 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = concatenation_params->axis();
   c3b10:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b12:	e5f3      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b14:	6823      	ldr	r3, [r4, #0]
   c3b16:	2101      	movs	r1, #1
   c3b18:	681b      	ldr	r3, [r3, #0]
   c3b1a:	4620      	mov	r0, r4
   c3b1c:	4798      	blx	r3
   c3b1e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_MulOptions ? static_cast<const MulOptions *>(builtin_options()) : nullptr;
   c3b20:	4628      	mov	r0, r5
   c3b22:	f7ff fcfe 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b26:	2815      	cmp	r0, #21
   c3b28:	f47f ade8 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b2c:	4628      	mov	r0, r5
   c3b2e:	f7ff fcb6 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_MulOptions()) {
   c3b32:	2800      	cmp	r0, #0
   c3b34:	f43f ade2 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3b38:	2200      	movs	r2, #0
   c3b3a:	2104      	movs	r1, #4
   c3b3c:	f7ff fd00 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3b40:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3b42:	1e5a      	subs	r2, r3, #1
   c3b44:	2a04      	cmp	r2, #4
   c3b46:	bf88      	it	hi
   c3b48:	2300      	movhi	r3, #0
        params->activation =
   c3b4a:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b4c:	e5d6      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3b4e:	6823      	ldr	r3, [r4, #0]
   c3b50:	2101      	movs	r1, #1
   c3b52:	681b      	ldr	r3, [r3, #0]
   c3b54:	4620      	mov	r0, r4
   c3b56:	4798      	blx	r3
   c3b58:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_AddOptions ? static_cast<const AddOptions *>(builtin_options()) : nullptr;
   c3b5a:	4628      	mov	r0, r5
   c3b5c:	f7ff fce1 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b60:	280b      	cmp	r0, #11
   c3b62:	d10d      	bne.n	c3b80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60c>
   c3b64:	4628      	mov	r0, r5
   c3b66:	f7ff fc9a 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_AddOptions()) {
   c3b6a:	b148      	cbz	r0, c3b80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60c>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3b6c:	2200      	movs	r2, #0
   c3b6e:	2104      	movs	r1, #4
   c3b70:	f7ff fce6 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3b74:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3b76:	1e5a      	subs	r2, r3, #1
   c3b78:	2a04      	cmp	r2, #4
   c3b7a:	bf88      	it	hi
   c3b7c:	4633      	movhi	r3, r6
        params->activation =
   c3b7e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3b80:	603c      	str	r4, [r7, #0]
    case BuiltinOperator_QUANTIZE:
    case BuiltinOperator_NON_MAX_SUPPRESSION_V4:
    case BuiltinOperator_NON_MAX_SUPPRESSION_V5:
      break;
  }
  return kTfLiteOk;
   c3b82:	4630      	mov	r0, r6
}  // NOLINT[readability/fn_size]
   c3b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3b88:	6823      	ldr	r3, [r4, #0]
   c3b8a:	2101      	movs	r1, #1
   c3b8c:	681b      	ldr	r3, [r3, #0]
   c3b8e:	4620      	mov	r0, r4
   c3b90:	4798      	blx	r3
   c3b92:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DivOptions ? static_cast<const DivOptions *>(builtin_options()) : nullptr;
   c3b94:	4628      	mov	r0, r5
   c3b96:	f7ff fcc4 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3b9a:	281d      	cmp	r0, #29
   c3b9c:	f47f adae 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ba0:	4628      	mov	r0, r5
   c3ba2:	f7ff fc7c 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_DivOptions()) {
   c3ba6:	2800      	cmp	r0, #0
   c3ba8:	f43f ada8 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3bac:	2200      	movs	r2, #0
   c3bae:	2104      	movs	r1, #4
   c3bb0:	f7ff fcc6 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3bb4:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3bb6:	1e5a      	subs	r2, r3, #1
   c3bb8:	2a04      	cmp	r2, #4
   c3bba:	bf88      	it	hi
   c3bbc:	2300      	movhi	r3, #0
        params->activation =
   c3bbe:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3bc0:	e59c      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3bc2:	6823      	ldr	r3, [r4, #0]
   c3bc4:	2101      	movs	r1, #1
   c3bc6:	681b      	ldr	r3, [r3, #0]
   c3bc8:	4620      	mov	r0, r4
   c3bca:	4798      	blx	r3
   c3bcc:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SubOptions ? static_cast<const SubOptions *>(builtin_options()) : nullptr;
   c3bce:	4628      	mov	r0, r5
   c3bd0:	f7ff fca7 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3bd4:	281c      	cmp	r0, #28
   c3bd6:	f47f ad91 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3bda:	4628      	mov	r0, r5
   c3bdc:	f7ff fc5f 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SubOptions()) {
   c3be0:	2800      	cmp	r0, #0
   c3be2:	f43f ad8b 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3be6:	2200      	movs	r2, #0
   c3be8:	2104      	movs	r1, #4
   c3bea:	f7ff fca9 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3bee:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3bf0:	1e5a      	subs	r2, r3, #1
   c3bf2:	2a04      	cmp	r2, #4
   c3bf4:	bf88      	it	hi
   c3bf6:	2300      	movhi	r3, #0
        params->activation =
   c3bf8:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3bfa:	e57f      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3bfc:	6823      	ldr	r3, [r4, #0]
   c3bfe:	2101      	movs	r1, #1
   c3c00:	681b      	ldr	r3, [r3, #0]
   c3c02:	4620      	mov	r0, r4
   c3c04:	4798      	blx	r3
   c3c06:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_L2NormOptions ? static_cast<const L2NormOptions *>(builtin_options()) : nullptr;
   c3c08:	4628      	mov	r0, r5
   c3c0a:	f7ff fc8a 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3c0e:	280c      	cmp	r0, #12
   c3c10:	f47f ad74 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3c14:	4628      	mov	r0, r5
   c3c16:	f7ff fc42 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_L2NormOptions()) {
   c3c1a:	2800      	cmp	r0, #0
   c3c1c:	f43f ad6e 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3c20:	2200      	movs	r2, #0
   c3c22:	2104      	movs	r1, #4
   c3c24:	f7ff fc8c 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3c28:	b2c3      	uxtb	r3, r0
    switch (activation) {
   c3c2a:	1e5a      	subs	r2, r3, #1
   c3c2c:	2a04      	cmp	r2, #4
   c3c2e:	bf88      	it	hi
   c3c30:	2300      	movhi	r3, #0
        params->activation =
   c3c32:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3c34:	e562      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3c36:	6823      	ldr	r3, [r4, #0]
   c3c38:	2110      	movs	r1, #16
   c3c3a:	681b      	ldr	r3, [r3, #0]
   c3c3c:	4620      	mov	r0, r4
   c3c3e:	4798      	blx	r3
   c3c40:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LocalResponseNormalizationOptions ? static_cast<const LocalResponseNormalizationOptions *>(builtin_options()) : nullptr;
   c3c42:	4628      	mov	r0, r5
   c3c44:	f7ff fc6d 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3c48:	280d      	cmp	r0, #13
   c3c4a:	f47f ad57 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3c4e:	4628      	mov	r0, r5
   c3c50:	f7ff fc25 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3c54:	4605      	mov	r5, r0
   c3c56:	2800      	cmp	r0, #0
   c3c58:	f43f ad50 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_RADIUS, 0);
   c3c5c:	2200      	movs	r2, #0
   c3c5e:	2104      	movs	r1, #4
   c3c60:	f7ff fc65 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<float>(VT_BIAS, 0.0f);
   c3c64:	2106      	movs	r1, #6
        params->radius = schema_params->radius();
   c3c66:	6020      	str	r0, [r4, #0]
   c3c68:	ed9f 0a49 	vldr	s0, [pc, #292]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c6c:	4628      	mov	r0, r5
   c3c6e:	f7ff fc70 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_ALPHA, 0.0f);
   c3c72:	2108      	movs	r1, #8
        params->bias = schema_params->bias();
   c3c74:	ed84 0a01 	vstr	s0, [r4, #4]
   c3c78:	4628      	mov	r0, r5
   c3c7a:	ed9f 0a45 	vldr	s0, [pc, #276]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c7e:	f7ff fc68 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_BETA, 0.0f);
   c3c82:	210a      	movs	r1, #10
        params->alpha = schema_params->alpha();
   c3c84:	ed84 0a02 	vstr	s0, [r4, #8]
   c3c88:	4628      	mov	r0, r5
   c3c8a:	ed9f 0a41 	vldr	s0, [pc, #260]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3c8e:	f7ff fc60 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->beta = schema_params->beta();
   c3c92:	ed84 0a03 	vstr	s0, [r4, #12]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3c96:	e531      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3c98:	6823      	ldr	r3, [r4, #0]
   c3c9a:	2110      	movs	r1, #16
   c3c9c:	681b      	ldr	r3, [r3, #0]
   c3c9e:	4620      	mov	r0, r4
   c3ca0:	4798      	blx	r3
   c3ca2:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_LSTMOptions ? static_cast<const LSTMOptions *>(builtin_options()) : nullptr;
   c3ca4:	4628      	mov	r0, r5
   c3ca6:	f7ff fc3c 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3caa:	280e      	cmp	r0, #14
   c3cac:	d12e      	bne.n	c3d0c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x798>
   c3cae:	4628      	mov	r0, r5
   c3cb0:	f7ff fbf5 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* lstm_params = op->builtin_options_as_LSTMOptions()) {
   c3cb4:	4605      	mov	r5, r0
   c3cb6:	b348      	cbz	r0, c3d0c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x798>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3cb8:	2200      	movs	r2, #0
   c3cba:	2104      	movs	r1, #4
   c3cbc:	f7ff fc40 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3cc0:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3cc2:	1e43      	subs	r3, r0, #1
   c3cc4:	2b04      	cmp	r3, #4
   c3cc6:	bf88      	it	hi
   c3cc8:	2000      	movhi	r0, #0
        params->activation =
   c3cca:	7030      	strb	r0, [r6, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3ccc:	2106      	movs	r1, #6
   c3cce:	4628      	mov	r0, r5
   c3cd0:	ed9f 0a2f 	vldr	s0, [pc, #188]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3cd4:	f7ff fc3d 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3cd8:	2108      	movs	r1, #8
        params->cell_clip = lstm_params->cell_clip();
   c3cda:	ed86 0a01 	vstr	s0, [r6, #4]
   c3cde:	4628      	mov	r0, r5
   c3ce0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3ce4:	f7ff fc35 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return static_cast<LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
   c3ce8:	2200      	movs	r2, #0
        params->proj_clip = lstm_params->proj_clip();
   c3cea:	ed86 0a02 	vstr	s0, [r6, #8]
   c3cee:	210a      	movs	r1, #10
   c3cf0:	4628      	mov	r0, r5
   c3cf2:	f7ff fc25 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3cf6:	b138      	cbz	r0, c3d08 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x794>
   c3cf8:	2801      	cmp	r0, #1
   c3cfa:	d005      	beq.n	c3d08 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x794>
            error_reporter->Report("Unhandled LSTM kernel type: %d",
   c3cfc:	b2c2      	uxtb	r2, r0
   c3cfe:	4922      	ldr	r1, [pc, #136]	; (c3d88 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x814>)
   c3d00:	4640      	mov	r0, r8
   c3d02:	f000 fc45 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   c3d06:	e6be      	b.n	c3a86 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x512>
            params->kernel_type = kTfLiteLSTMBasicKernel;
   c3d08:	7330      	strb	r0, [r6, #12]
            break;
   c3d0a:	e6c2      	b.n	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
        error_reporter->Report("No valid LSTM builtin options exist");
   c3d0c:	491f      	ldr	r1, [pc, #124]	; (c3d8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x818>)
   c3d0e:	4640      	mov	r0, r8
   c3d10:	f000 fc3e 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c3d14:	e520      	b.n	c3758 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
   c3d16:	6823      	ldr	r3, [r4, #0]
   c3d18:	2110      	movs	r1, #16
   c3d1a:	681b      	ldr	r3, [r3, #0]
   c3d1c:	4620      	mov	r0, r4
   c3d1e:	4798      	blx	r3
   c3d20:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UnidirectionalSequenceLSTMOptions ? static_cast<const UnidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   c3d22:	4628      	mov	r0, r5
   c3d24:	f7ff fbfd 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3d28:	2847      	cmp	r0, #71	; 0x47
   c3d2a:	f47f ace7 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3d2e:	4628      	mov	r0, r5
   c3d30:	f7ff fbb5 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* seq_lstm_params =
   c3d34:	4605      	mov	r5, r0
   c3d36:	2800      	cmp	r0, #0
   c3d38:	f43f ace0 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3d3c:	2200      	movs	r2, #0
   c3d3e:	2104      	movs	r1, #4
   c3d40:	f7ff fbfe 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3d44:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3d46:	1e43      	subs	r3, r0, #1
   c3d48:	2b04      	cmp	r3, #4
   c3d4a:	bf88      	it	hi
   c3d4c:	2000      	movhi	r0, #0
        params->activation =
   c3d4e:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3d50:	2106      	movs	r1, #6
   c3d52:	4628      	mov	r0, r5
   c3d54:	ed9f 0a0e 	vldr	s0, [pc, #56]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3d58:	f7ff fbfb 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3d5c:	2108      	movs	r1, #8
        params->cell_clip = seq_lstm_params->cell_clip();
   c3d5e:	ed84 0a01 	vstr	s0, [r4, #4]
   c3d62:	4628      	mov	r0, r5
   c3d64:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3d68:	f7ff fbf3 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
   c3d6c:	2200      	movs	r2, #0
        params->proj_clip = seq_lstm_params->proj_clip();
   c3d6e:	ed84 0a02 	vstr	s0, [r4, #8]
   c3d72:	210a      	movs	r1, #10
   c3d74:	4628      	mov	r0, r5
   c3d76:	f7ff fbcb 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3d7a:	3800      	subs	r0, #0
   c3d7c:	bf18      	it	ne
   c3d7e:	2001      	movne	r0, #1
   c3d80:	7320      	strb	r0, [r4, #12]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3d82:	e4bb      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3d84:	000c96bb 	.word	0x000c96bb
   c3d88:	000c96e5 	.word	0x000c96e5
   c3d8c:	000c9704 	.word	0x000c9704
   c3d90:	00000000 	.word	0x00000000
   c3d94:	6823      	ldr	r3, [r4, #0]
   c3d96:	2110      	movs	r1, #16
   c3d98:	681b      	ldr	r3, [r3, #0]
   c3d9a:	4620      	mov	r0, r4
   c3d9c:	4798      	blx	r3
   c3d9e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_BidirectionalSequenceLSTMOptions ? static_cast<const BidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
   c3da0:	4628      	mov	r0, r5
   c3da2:	f7ff fbbe 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3da6:	2845      	cmp	r0, #69	; 0x45
   c3da8:	f47f aca8 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3dac:	4628      	mov	r0, r5
   c3dae:	f7ff fb76 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* bidi_lstm_params =
   c3db2:	4605      	mov	r5, r0
   c3db4:	2800      	cmp	r0, #0
   c3db6:	f43f aca1 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   c3dba:	2200      	movs	r2, #0
   c3dbc:	2104      	movs	r1, #4
   c3dbe:	f7ff fbbf 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   c3dc2:	b2c0      	uxtb	r0, r0
    switch (activation) {
   c3dc4:	1e43      	subs	r3, r0, #1
   c3dc6:	2b04      	cmp	r3, #4
   c3dc8:	bf88      	it	hi
   c3dca:	2000      	movhi	r0, #0
        params->activation =
   c3dcc:	7020      	strb	r0, [r4, #0]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
   c3dce:	2106      	movs	r1, #6
   c3dd0:	4628      	mov	r0, r5
   c3dd2:	ed1f 0a11 	vldr	s0, [pc, #-68]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3dd6:	f7ff fbbc 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
   c3dda:	2108      	movs	r1, #8
        params->cell_clip = bidi_lstm_params->cell_clip();
   c3ddc:	ed84 0a01 	vstr	s0, [r4, #4]
   c3de0:	4628      	mov	r0, r5
   c3de2:	ed1f 0a15 	vldr	s0, [pc, #-84]	; c3d90 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x81c>
   c3de6:	f7ff fbb4 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
   c3dea:	2200      	movs	r2, #0
        params->proj_clip = bidi_lstm_params->proj_clip();
   c3dec:	ed84 0a02 	vstr	s0, [r4, #8]
   c3df0:	210a      	movs	r1, #10
   c3df2:	4628      	mov	r0, r5
   c3df4:	f7ff fb8c 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3df8:	3800      	subs	r0, #0
   c3dfa:	bf18      	it	ne
   c3dfc:	2001      	movne	r0, #1
   c3dfe:	7320      	strb	r0, [r4, #12]
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
   c3e00:	2201      	movs	r2, #1
   c3e02:	210c      	movs	r1, #12
   c3e04:	4628      	mov	r0, r5
   c3e06:	f7ff fb83 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3e0a:	3800      	subs	r0, #0
   c3e0c:	bf18      	it	ne
   c3e0e:	2001      	movne	r0, #1
   c3e10:	7360      	strb	r0, [r4, #13]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3e12:	e473      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e14:	6823      	ldr	r3, [r4, #0]
   c3e16:	2101      	movs	r1, #1
   c3e18:	681b      	ldr	r3, [r3, #0]
   c3e1a:	4620      	mov	r0, r4
   c3e1c:	4798      	blx	r3
   c3e1e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ResizeBilinearOptions ? static_cast<const ResizeBilinearOptions *>(builtin_options()) : nullptr;
   c3e20:	4628      	mov	r0, r5
   c3e22:	f7ff fb7e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3e26:	280f      	cmp	r0, #15
   c3e28:	f47f ac68 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e2c:	4628      	mov	r0, r5
   c3e2e:	f7ff fb36 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3e32:	2800      	cmp	r0, #0
   c3e34:	f43f ac62 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   c3e38:	2200      	movs	r2, #0
   c3e3a:	2108      	movs	r1, #8
   c3e3c:	f7ff fb68 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3e40:	3800      	subs	r0, #0
   c3e42:	bf18      	it	ne
   c3e44:	2001      	movne	r0, #1
   c3e46:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3e48:	e458      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e4a:	6823      	ldr	r3, [r4, #0]
   c3e4c:	2101      	movs	r1, #1
   c3e4e:	681b      	ldr	r3, [r3, #0]
   c3e50:	4620      	mov	r0, r4
   c3e52:	4798      	blx	r3
   c3e54:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   c3e56:	4628      	mov	r0, r5
   c3e58:	f7ff fb63 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3e5c:	284a      	cmp	r0, #74	; 0x4a
   c3e5e:	f47f ac4d 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e62:	4628      	mov	r0, r5
   c3e64:	f7ff fb1b 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
        if (const auto* schema_params =
   c3e68:	2800      	cmp	r0, #0
   c3e6a:	f43f ac47 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   c3e6e:	2200      	movs	r2, #0
   c3e70:	2104      	movs	r1, #4
   c3e72:	f7ff fb4d 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3e76:	3800      	subs	r0, #0
   c3e78:	bf18      	it	ne
   c3e7a:	2001      	movne	r0, #1
   c3e7c:	7020      	strb	r0, [r4, #0]
        *builtin_data = reinterpret_cast<void*>(params.release());
   c3e7e:	e43d      	b.n	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3e80:	6823      	ldr	r3, [r4, #0]
   c3e82:	2124      	movs	r1, #36	; 0x24
   c3e84:	681b      	ldr	r3, [r3, #0]
   c3e86:	4620      	mov	r0, r4
   c3e88:	4798      	blx	r3
   c3e8a:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_ReshapeOptions ? static_cast<const ReshapeOptions *>(builtin_options()) : nullptr;
   c3e8c:	4628      	mov	r0, r5
   c3e8e:	f7ff fb48 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3e92:	2811      	cmp	r0, #17
   c3e94:	f47f adfd 	bne.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3e98:	4628      	mov	r0, r5
   c3e9a:	f7ff fb00 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReshapeOptions()) {
   c3e9e:	4605      	mov	r5, r0
   c3ea0:	2800      	cmp	r0, #0
   c3ea2:	f43f adf6 	beq.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    auto field_offset = GetOptionalFieldOffset(field);
   c3ea6:	2104      	movs	r1, #4
   c3ea8:	f7f1 fcbb 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c3eac:	4603      	mov	r3, r0
   c3eae:	b170      	cbz	r0, c3ece <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x95a>
    auto p = data_ + field_offset;
   c3eb0:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c3eb2:	58ed      	ldr	r5, [r5, r3]
   c3eb4:	4405      	add	r5, r0
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c3eb6:	4bc5      	ldr	r3, [pc, #788]	; (c41cc <platform_monolithic_firmware_flash_size+0x1cc>)
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c3eb8:	4642      	mov	r2, r8
   c3eba:	4631      	mov	r1, r6
   c3ebc:	4628      	mov	r0, r5
   c3ebe:	f7ff fabd 	bl	c343c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc.constprop.0>
   c3ec2:	2800      	cmp	r0, #0
   c3ec4:	f47f ac48 	bne.w	c3758 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
        params->num_squeeze_dims = squeeze_dims->size();
   c3ec8:	682b      	ldr	r3, [r5, #0]
   c3eca:	6233      	str	r3, [r6, #32]
   c3ecc:	e5e1      	b.n	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c3ece:	4605      	mov	r5, r0
   c3ed0:	e7f1      	b.n	c3eb6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x942>
   c3ed2:	6823      	ldr	r3, [r4, #0]
   c3ed4:	210c      	movs	r1, #12
   c3ed6:	681b      	ldr	r3, [r3, #0]
   c3ed8:	4620      	mov	r0, r4
   c3eda:	4798      	blx	r3
   c3edc:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SkipGramOptions ? static_cast<const SkipGramOptions *>(builtin_options()) : nullptr;
   c3ede:	4628      	mov	r0, r5
   c3ee0:	f7ff fb1f 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3ee4:	2812      	cmp	r0, #18
   c3ee6:	f47f ac09 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3eea:	4628      	mov	r0, r5
   c3eec:	f7ff fad7 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* skip_gram_params =
   c3ef0:	4605      	mov	r5, r0
   c3ef2:	2800      	cmp	r0, #0
   c3ef4:	f43f ac02 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
   c3ef8:	2200      	movs	r2, #0
   c3efa:	2104      	movs	r1, #4
   c3efc:	f7ff fb17 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
   c3f00:	2200      	movs	r2, #0
        params->ngram_size = skip_gram_params->ngram_size();
   c3f02:	6020      	str	r0, [r4, #0]
   c3f04:	2106      	movs	r1, #6
   c3f06:	4628      	mov	r0, r5
   c3f08:	f7ff fb11 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
   c3f0c:	2200      	movs	r2, #0
        params->max_skip_size = skip_gram_params->max_skip_size();
   c3f0e:	6060      	str	r0, [r4, #4]
   c3f10:	2108      	movs	r1, #8
   c3f12:	4628      	mov	r0, r5
   c3f14:	f7ff fafc 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3f18:	3800      	subs	r0, #0
   c3f1a:	bf18      	it	ne
   c3f1c:	2001      	movne	r0, #1
   c3f1e:	7220      	strb	r0, [r4, #8]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f20:	f7ff bbec 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f24:	6823      	ldr	r3, [r4, #0]
   c3f26:	2104      	movs	r1, #4
   c3f28:	681b      	ldr	r3, [r3, #0]
   c3f2a:	4620      	mov	r0, r4
   c3f2c:	4798      	blx	r3
   c3f2e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SpaceToDepthOptions ? static_cast<const SpaceToDepthOptions *>(builtin_options()) : nullptr;
   c3f30:	4628      	mov	r0, r5
   c3f32:	f7ff faf6 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f36:	2813      	cmp	r0, #19
   c3f38:	f47f abe0 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f3c:	4628      	mov	r0, r5
   c3f3e:	f7ff faae 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3f42:	2800      	cmp	r0, #0
   c3f44:	f43f abda 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   c3f48:	2200      	movs	r2, #0
   c3f4a:	2104      	movs	r1, #4
   c3f4c:	f7ff faef 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->block_size = schema_params->block_size();
   c3f50:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f52:	f7ff bbd3 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f56:	6823      	ldr	r3, [r4, #0]
   c3f58:	2104      	movs	r1, #4
   c3f5a:	681b      	ldr	r3, [r3, #0]
   c3f5c:	4620      	mov	r0, r4
   c3f5e:	4798      	blx	r3
   c3f60:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_DepthToSpaceOptions ? static_cast<const DepthToSpaceOptions *>(builtin_options()) : nullptr;
   c3f62:	4628      	mov	r0, r5
   c3f64:	f7ff fadd 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f68:	285e      	cmp	r0, #94	; 0x5e
   c3f6a:	f47f abc7 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f6e:	4628      	mov	r0, r5
   c3f70:	f7ff fa95 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c3f74:	2800      	cmp	r0, #0
   c3f76:	f43f abc1 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
   c3f7a:	2200      	movs	r2, #0
   c3f7c:	2104      	movs	r1, #4
   c3f7e:	f7ff fad6 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->block_size = schema_params->block_size();
   c3f82:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3f84:	f7ff bbba 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3f88:	6823      	ldr	r3, [r4, #0]
   c3f8a:	2104      	movs	r1, #4
   c3f8c:	681b      	ldr	r3, [r3, #0]
   c3f8e:	4620      	mov	r0, r4
   c3f90:	4798      	blx	r3
      params->axis = 0;
   c3f92:	2600      	movs	r6, #0
   c3f94:	6006      	str	r6, [r0, #0]
   c3f96:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_GatherOptions ? static_cast<const GatherOptions *>(builtin_options()) : nullptr;
   c3f98:	4628      	mov	r0, r5
   c3f9a:	f7ff fac2 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3f9e:	2817      	cmp	r0, #23
   c3fa0:	f47f abac 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fa4:	4628      	mov	r0, r5
   c3fa6:	f7ff fa7a 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* gather_params = op->builtin_options_as_GatherOptions()) {
   c3faa:	2800      	cmp	r0, #0
   c3fac:	f43f aba6 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_AXIS, 0);
   c3fb0:	4632      	mov	r2, r6
   c3fb2:	2104      	movs	r1, #4
   c3fb4:	f7ff fabb 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = gather_params->axis();
   c3fb8:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3fba:	f7ff bb9f 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fbe:	6823      	ldr	r3, [r4, #0]
   c3fc0:	2101      	movs	r1, #1
   c3fc2:	681b      	ldr	r3, [r3, #0]
   c3fc4:	4620      	mov	r0, r4
   c3fc6:	4798      	blx	r3
   c3fc8:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ReducerOptions ? static_cast<const ReducerOptions *>(builtin_options()) : nullptr;
   c3fca:	4628      	mov	r0, r5
   c3fcc:	f7ff faa9 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c3fd0:	281b      	cmp	r0, #27
   c3fd2:	f47f ab93 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3fd6:	4628      	mov	r0, r5
   c3fd8:	f7ff fa61 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ReducerOptions()) {
   c3fdc:	2800      	cmp	r0, #0
   c3fde:	f43f ab8d 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   c3fe2:	2200      	movs	r2, #0
   c3fe4:	2104      	movs	r1, #4
   c3fe6:	f7ff fa93 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c3fea:	3800      	subs	r0, #0
   c3fec:	bf18      	it	ne
   c3fee:	2001      	movne	r0, #1
   c3ff0:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c3ff2:	f7ff bb83 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c3ff6:	6823      	ldr	r3, [r4, #0]
   c3ff8:	2104      	movs	r1, #4
   c3ffa:	681b      	ldr	r3, [r3, #0]
   c3ffc:	4620      	mov	r0, r4
   c3ffe:	4798      	blx	r3
   c4000:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SplitOptions ? static_cast<const SplitOptions *>(builtin_options()) : nullptr;
   c4002:	4628      	mov	r0, r5
   c4004:	f7ff fa8d 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4008:	2823      	cmp	r0, #35	; 0x23
   c400a:	f47f ab77 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c400e:	4628      	mov	r0, r5
   c4010:	f7ff fa45 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitOptions()) {
   c4014:	2800      	cmp	r0, #0
   c4016:	f43f ab71 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   c401a:	2200      	movs	r2, #0
   c401c:	2104      	movs	r1, #4
   c401e:	f7ff fa86 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->num_splits = schema_params->num_splits();
   c4022:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4024:	f7ff bb6a 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4028:	6823      	ldr	r3, [r4, #0]
   c402a:	2104      	movs	r1, #4
   c402c:	681b      	ldr	r3, [r3, #0]
   c402e:	4620      	mov	r0, r4
   c4030:	4798      	blx	r3
   c4032:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SplitVOptions ? static_cast<const SplitVOptions *>(builtin_options()) : nullptr;
   c4034:	4628      	mov	r0, r5
   c4036:	f7ff fa74 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c403a:	284f      	cmp	r0, #79	; 0x4f
   c403c:	f47f ab5e 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4040:	4628      	mov	r0, r5
   c4042:	f7ff fa2c 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SplitVOptions()) {
   c4046:	2800      	cmp	r0, #0
   c4048:	f43f ab58 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   c404c:	2200      	movs	r2, #0
   c404e:	2104      	movs	r1, #4
   c4050:	f7ff fa6d 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->num_splits = schema_params->num_splits();
   c4054:	6020      	str	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4056:	f7ff bb51 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c405a:	6823      	ldr	r3, [r4, #0]
   c405c:	2124      	movs	r1, #36	; 0x24
   c405e:	681b      	ldr	r3, [r3, #0]
   c4060:	4620      	mov	r0, r4
   c4062:	4798      	blx	r3
   c4064:	4606      	mov	r6, r0
    return builtin_options_type() == BuiltinOptions_SqueezeOptions ? static_cast<const SqueezeOptions *>(builtin_options()) : nullptr;
   c4066:	4628      	mov	r0, r5
   c4068:	f7ff fa5b 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c406c:	281e      	cmp	r0, #30
   c406e:	f47f ad10 	bne.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
   c4072:	4628      	mov	r0, r5
   c4074:	f7ff fa13 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_SqueezeOptions()) {
   c4078:	4605      	mov	r5, r0
   c407a:	2800      	cmp	r0, #0
   c407c:	f43f ad09 	beq.w	c3a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x51e>
    auto field_offset = GetOptionalFieldOffset(field);
   c4080:	2104      	movs	r1, #4
   c4082:	f7f1 fbce 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c4086:	4603      	mov	r3, r0
   c4088:	b120      	cbz	r0, c4094 <platform_monolithic_firmware_flash_size+0x94>
    auto p = data_ + field_offset;
   c408a:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c408c:	58ed      	ldr	r5, [r5, r3]
   c408e:	4405      	add	r5, r0
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
   c4090:	4b4f      	ldr	r3, [pc, #316]	; (c41d0 <platform_monolithic_firmware_flash_size+0x1d0>)
   c4092:	e711      	b.n	c3eb8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x944>
   c4094:	4605      	mov	r5, r0
   c4096:	e7fb      	b.n	c4090 <platform_monolithic_firmware_flash_size+0x90>
   c4098:	6823      	ldr	r3, [r4, #0]
   c409a:	2114      	movs	r1, #20
   c409c:	681b      	ldr	r3, [r3, #0]
   c409e:	4620      	mov	r0, r4
   c40a0:	4798      	blx	r3
   c40a2:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_StridedSliceOptions ? static_cast<const StridedSliceOptions *>(builtin_options()) : nullptr;
   c40a4:	4628      	mov	r0, r5
   c40a6:	f7ff fa3c 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c40aa:	2820      	cmp	r0, #32
   c40ac:	f47f ab26 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c40b0:	4628      	mov	r0, r5
   c40b2:	f7ff f9f4 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c40b6:	4605      	mov	r5, r0
   c40b8:	2800      	cmp	r0, #0
   c40ba:	f43f ab1f 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   c40be:	2200      	movs	r2, #0
   c40c0:	2104      	movs	r1, #4
   c40c2:	f7ff fa34 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   c40c6:	2200      	movs	r2, #0
        params->begin_mask = schema_params->begin_mask();
   c40c8:	6020      	str	r0, [r4, #0]
   c40ca:	2106      	movs	r1, #6
   c40cc:	4628      	mov	r0, r5
   c40ce:	f7ff fa2e 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   c40d2:	2200      	movs	r2, #0
        params->end_mask = schema_params->end_mask();
   c40d4:	6060      	str	r0, [r4, #4]
   c40d6:	2108      	movs	r1, #8
   c40d8:	4628      	mov	r0, r5
   c40da:	f7ff fa28 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   c40de:	2200      	movs	r2, #0
        params->ellipsis_mask = schema_params->ellipsis_mask();
   c40e0:	60a0      	str	r0, [r4, #8]
   c40e2:	210a      	movs	r1, #10
   c40e4:	4628      	mov	r0, r5
   c40e6:	f7ff fa22 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   c40ea:	2200      	movs	r2, #0
        params->new_axis_mask = schema_params->new_axis_mask();
   c40ec:	60e0      	str	r0, [r4, #12]
   c40ee:	210c      	movs	r1, #12
   c40f0:	4628      	mov	r0, r5
   c40f2:	f7ff fa1c 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->shrink_axis_mask = schema_params->shrink_axis_mask();
   c40f6:	6120      	str	r0, [r4, #16]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c40f8:	f7ff bb00 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c40fc:	6823      	ldr	r3, [r4, #0]
   c40fe:	2101      	movs	r1, #1
   c4100:	681b      	ldr	r3, [r3, #0]
   c4102:	4620      	mov	r0, r4
   c4104:	4798      	blx	r3
   c4106:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ArgMaxOptions ? static_cast<const ArgMaxOptions *>(builtin_options()) : nullptr;
   c4108:	4628      	mov	r0, r5
   c410a:	f7ff fa0a 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c410e:	2828      	cmp	r0, #40	; 0x28
   c4110:	f47f aaf4 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4114:	4628      	mov	r0, r5
   c4116:	f7ff f9c2 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ArgMaxOptions()) {
   c411a:	2800      	cmp	r0, #0
   c411c:	f43f aaee 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   c4120:	2200      	movs	r2, #0
   c4122:	2104      	movs	r1, #4
   c4124:	f7ff fa0c 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->output_type(), &params->output_type,
   c4128:	4642      	mov	r2, r8
   c412a:	4621      	mov	r1, r4
   c412c:	b2c0      	uxtb	r0, r0
   c412e:	f7ff f9c1 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4132:	f7ff bae3 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4136:	6823      	ldr	r3, [r4, #0]
   c4138:	2101      	movs	r1, #1
   c413a:	681b      	ldr	r3, [r3, #0]
   c413c:	4620      	mov	r0, r4
   c413e:	4798      	blx	r3
   c4140:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ArgMinOptions ? static_cast<const ArgMinOptions *>(builtin_options()) : nullptr;
   c4142:	4628      	mov	r0, r5
   c4144:	f7ff f9ed 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4148:	2839      	cmp	r0, #57	; 0x39
   c414a:	f47f aad7 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c414e:	4628      	mov	r0, r5
   c4150:	f7ff f9a5 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ArgMinOptions()) {
   c4154:	2800      	cmp	r0, #0
   c4156:	f43f aad1 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   c415a:	2200      	movs	r2, #0
   c415c:	2104      	movs	r1, #4
   c415e:	f7ff f9ef 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->output_type(), &params->output_type,
   c4162:	4642      	mov	r2, r8
   c4164:	4621      	mov	r1, r4
   c4166:	b2c0      	uxtb	r0, r0
   c4168:	f7ff f9a4 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = reinterpret_cast<void*>(params.release());
   c416c:	f7ff bac6 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4170:	6823      	ldr	r3, [r4, #0]
   c4172:	210c      	movs	r1, #12
   c4174:	681b      	ldr	r3, [r3, #0]
   c4176:	4620      	mov	r0, r4
   c4178:	4798      	blx	r3
   c417a:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_TransposeConvOptions ? static_cast<const TransposeConvOptions *>(builtin_options()) : nullptr;
   c417c:	4628      	mov	r0, r5
   c417e:	f7ff f9d0 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4182:	2831      	cmp	r0, #49	; 0x31
   c4184:	f47f aaba 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4188:	4628      	mov	r0, r5
   c418a:	f7ff f988 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* transpose_conv_params =
   c418e:	4605      	mov	r5, r0
   c4190:	2800      	cmp	r0, #0
   c4192:	f43f aab3 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<Padding>(GetField<int8_t>(VT_PADDING, 0));
   c4196:	2200      	movs	r2, #0
   c4198:	2104      	movs	r1, #4
   c419a:	f7ff f9d1 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (padding) {
   c419e:	b190      	cbz	r0, c41c6 <platform_monolithic_firmware_flash_size+0x1c6>
   c41a0:	2801      	cmp	r0, #1
   c41a2:	bf14      	ite	ne
   c41a4:	2300      	movne	r3, #0
   c41a6:	2302      	moveq	r3, #2
        params->padding = parse_padding(transpose_conv_params->padding());
   c41a8:	7023      	strb	r3, [r4, #0]
    return GetField<int32_t>(VT_STRIDE_W, 0);
   c41aa:	2200      	movs	r2, #0
   c41ac:	2106      	movs	r1, #6
   c41ae:	4628      	mov	r0, r5
   c41b0:	f7ff f9bd 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   c41b4:	2200      	movs	r2, #0
        params->stride_width = transpose_conv_params->stride_w();
   c41b6:	6060      	str	r0, [r4, #4]
   c41b8:	2108      	movs	r1, #8
   c41ba:	4628      	mov	r0, r5
   c41bc:	f7ff f9b7 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->stride_height = transpose_conv_params->stride_h();
   c41c0:	60a0      	str	r0, [r4, #8]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c41c2:	f7ff ba9b 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
        return kTfLitePaddingSame;
   c41c6:	2301      	movs	r3, #1
   c41c8:	e7ee      	b.n	c41a8 <platform_monolithic_firmware_flash_size+0x1a8>
   c41ca:	bf00      	nop
   c41cc:	000c9728 	.word	0x000c9728
   c41d0:	000c9730 	.word	0x000c9730
   c41d4:	6823      	ldr	r3, [r4, #0]
   c41d6:	2101      	movs	r1, #1
   c41d8:	681b      	ldr	r3, [r3, #0]
   c41da:	4620      	mov	r0, r4
   c41dc:	4798      	blx	r3
   c41de:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_SparseToDenseOptions ? static_cast<const SparseToDenseOptions *>(builtin_options()) : nullptr;
   c41e0:	4628      	mov	r0, r5
   c41e2:	f7ff f99e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c41e6:	2832      	cmp	r0, #50	; 0x32
   c41e8:	f47f aa88 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c41ec:	4628      	mov	r0, r5
   c41ee:	f7ff f956 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* sparse_to_dense_params =
   c41f2:	2800      	cmp	r0, #0
   c41f4:	f43f aa82 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
   c41f8:	2200      	movs	r2, #0
   c41fa:	2104      	movs	r1, #4
   c41fc:	f7ff f988 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c4200:	3800      	subs	r0, #0
   c4202:	bf18      	it	ne
   c4204:	2001      	movne	r0, #1
   c4206:	7020      	strb	r0, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4208:	f7ff ba78 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c420c:	6823      	ldr	r3, [r4, #0]
   c420e:	2101      	movs	r1, #1
   c4210:	681b      	ldr	r3, [r3, #0]
   c4212:	4620      	mov	r0, r4
   c4214:	4798      	blx	r3
   c4216:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ShapeOptions ? static_cast<const ShapeOptions *>(builtin_options()) : nullptr;
   c4218:	4628      	mov	r0, r5
   c421a:	f7ff f982 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c421e:	2837      	cmp	r0, #55	; 0x37
   c4220:	f47f aa6c 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4224:	4628      	mov	r0, r5
   c4226:	f7ff f93a 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_ShapeOptions()) {
   c422a:	2800      	cmp	r0, #0
   c422c:	f43f aa66 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
   c4230:	2200      	movs	r2, #0
   c4232:	2104      	movs	r1, #4
   c4234:	f7ff f984 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertTensorType(schema_params->out_type(), &params->out_type,
   c4238:	4642      	mov	r2, r8
   c423a:	4621      	mov	r1, r4
   c423c:	b2c0      	uxtb	r0, r0
   c423e:	f7ff f939 	bl	c34b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
      *builtin_data = static_cast<void*>(params.release());
   c4242:	f7ff ba5b 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4246:	6823      	ldr	r3, [r4, #0]
   c4248:	2108      	movs	r1, #8
   c424a:	681b      	ldr	r3, [r3, #0]
   c424c:	4620      	mov	r0, r4
   c424e:	4798      	blx	r3
   c4250:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_PackOptions ? static_cast<const PackOptions *>(builtin_options()) : nullptr;
   c4252:	4628      	mov	r0, r5
   c4254:	f7ff f965 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4258:	283b      	cmp	r0, #59	; 0x3b
   c425a:	f47f aa4f 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c425e:	4628      	mov	r0, r5
   c4260:	f7ff f91d 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* pack_params = op->builtin_options_as_PackOptions()) {
   c4264:	4605      	mov	r5, r0
   c4266:	2800      	cmp	r0, #0
   c4268:	f43f aa48 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   c426c:	2200      	movs	r2, #0
   c426e:	2104      	movs	r1, #4
   c4270:	f7ff f95d 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   c4274:	2200      	movs	r2, #0
        params->values_count = pack_params->values_count();
   c4276:	6020      	str	r0, [r4, #0]
   c4278:	2106      	movs	r1, #6
   c427a:	4628      	mov	r0, r5
   c427c:	f7ff f957 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = pack_params->axis();
   c4280:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4282:	f7ff ba3b 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
      error_reporter->Report("DELEGATE op shouldn't exist in model.");
   c4286:	4993      	ldr	r1, [pc, #588]	; (c44d4 <platform_monolithic_firmware_flash_size+0x4d4>)
   c4288:	4610      	mov	r0, r2
   c428a:	f000 f981 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c428e:	f7ff ba66 	b.w	c375e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ea>
   c4292:	6823      	ldr	r3, [r4, #0]
   c4294:	2110      	movs	r1, #16
   c4296:	681b      	ldr	r3, [r3, #0]
   c4298:	4620      	mov	r0, r4
   c429a:	4798      	blx	r3
   c429c:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_FakeQuantOptions ? static_cast<const FakeQuantOptions *>(builtin_options()) : nullptr;
   c429e:	4628      	mov	r0, r5
   c42a0:	f7ff f93f 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c42a4:	283a      	cmp	r0, #58	; 0x3a
   c42a6:	f47f aa29 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c42aa:	4628      	mov	r0, r5
   c42ac:	f7ff f8f7 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params =
   c42b0:	4605      	mov	r5, r0
   c42b2:	2800      	cmp	r0, #0
   c42b4:	f43f aa22 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_MIN, 0.0f);
   c42b8:	2104      	movs	r1, #4
   c42ba:	ed9f 0a87 	vldr	s0, [pc, #540]	; c44d8 <platform_monolithic_firmware_flash_size+0x4d8>
   c42be:	f7ff f948 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<float>(VT_MAX, 0.0f);
   c42c2:	2106      	movs	r1, #6
        params->min = schema_params->min();
   c42c4:	ed84 0a00 	vstr	s0, [r4]
   c42c8:	4628      	mov	r0, r5
   c42ca:	ed9f 0a83 	vldr	s0, [pc, #524]	; c44d8 <platform_monolithic_firmware_flash_size+0x4d8>
   c42ce:	f7ff f940 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    return GetField<int32_t>(VT_NUM_BITS, 0);
   c42d2:	2200      	movs	r2, #0
        params->max = schema_params->max();
   c42d4:	ed84 0a01 	vstr	s0, [r4, #4]
   c42d8:	2108      	movs	r1, #8
   c42da:	4628      	mov	r0, r5
   c42dc:	f7ff f927 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
   c42e0:	2200      	movs	r2, #0
        params->num_bits = schema_params->num_bits();
   c42e2:	60a0      	str	r0, [r4, #8]
   c42e4:	210a      	movs	r1, #10
   c42e6:	4628      	mov	r0, r5
   c42e8:	f7ff f912 	bl	c3510 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   c42ec:	3800      	subs	r0, #0
   c42ee:	bf18      	it	ne
   c42f0:	2001      	movne	r0, #1
   c42f2:	7320      	strb	r0, [r4, #12]
      *builtin_data = static_cast<void*>(params.release());
   c42f4:	f7ff ba02 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c42f8:	6823      	ldr	r3, [r4, #0]
   c42fa:	2104      	movs	r1, #4
   c42fc:	681b      	ldr	r3, [r3, #0]
   c42fe:	4620      	mov	r0, r4
   c4300:	4798      	blx	r3
   c4302:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_OneHotOptions ? static_cast<const OneHotOptions *>(builtin_options()) : nullptr;
   c4304:	4628      	mov	r0, r5
   c4306:	f7ff f90c 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c430a:	283d      	cmp	r0, #61	; 0x3d
   c430c:	f47f a9f6 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4310:	4628      	mov	r0, r5
   c4312:	f7ff f8c4 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
   c4316:	2800      	cmp	r0, #0
   c4318:	f43f a9f0 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_AXIS, 0);
   c431c:	2200      	movs	r2, #0
   c431e:	2104      	movs	r1, #4
   c4320:	f7ff f905 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = schema_params->axis();
   c4324:	6020      	str	r0, [r4, #0]
      *builtin_data = static_cast<void*>(params.release());
   c4326:	f7ff b9e9 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c432a:	6823      	ldr	r3, [r4, #0]
   c432c:	2108      	movs	r1, #8
   c432e:	681b      	ldr	r3, [r3, #0]
   c4330:	4620      	mov	r0, r4
   c4332:	4798      	blx	r3
   c4334:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UnpackOptions ? static_cast<const UnpackOptions *>(builtin_options()) : nullptr;
   c4336:	4628      	mov	r0, r5
   c4338:	f7ff f8f3 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c433c:	2840      	cmp	r0, #64	; 0x40
   c433e:	f47f a9dd 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4342:	4628      	mov	r0, r5
   c4344:	f7ff f8ab 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* unpack_params = op->builtin_options_as_UnpackOptions()) {
   c4348:	4605      	mov	r5, r0
   c434a:	2800      	cmp	r0, #0
   c434c:	f43f a9d6 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_NUM, 0);
   c4350:	2200      	movs	r2, #0
   c4352:	2104      	movs	r1, #4
   c4354:	f7ff f8eb 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   c4358:	2200      	movs	r2, #0
        params->num = unpack_params->num();
   c435a:	6020      	str	r0, [r4, #0]
   c435c:	2106      	movs	r1, #6
   c435e:	4628      	mov	r0, r5
   c4360:	f7ff f8e5 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->axis = unpack_params->axis();
   c4364:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4366:	f7ff b9c9 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c436a:	6823      	ldr	r3, [r4, #0]
   c436c:	2104      	movs	r1, #4
   c436e:	681b      	ldr	r3, [r3, #0]
   c4370:	4620      	mov	r0, r4
   c4372:	4798      	blx	r3
   c4374:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_LeakyReluOptions ? static_cast<const LeakyReluOptions *>(builtin_options()) : nullptr;
   c4376:	4628      	mov	r0, r5
   c4378:	f7ff f8d3 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c437c:	284b      	cmp	r0, #75	; 0x4b
   c437e:	f47f a9bd 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4382:	4628      	mov	r0, r5
   c4384:	f7ff f88b 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* leaky_relu_params =
   c4388:	2800      	cmp	r0, #0
   c438a:	f43f a9b7 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<float>(VT_ALPHA, 0.0f);
   c438e:	ed9f 0a52 	vldr	s0, [pc, #328]	; c44d8 <platform_monolithic_firmware_flash_size+0x4d8>
   c4392:	2104      	movs	r1, #4
   c4394:	f7ff f8dd 	bl	c3552 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
        params->alpha = leaky_relu_params->alpha();
   c4398:	ed84 0a00 	vstr	s0, [r4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c439c:	f7ff b9ae 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43a0:	6823      	ldr	r3, [r4, #0]
   c43a2:	2101      	movs	r1, #1
   c43a4:	681b      	ldr	r3, [r3, #0]
   c43a6:	4620      	mov	r0, r4
   c43a8:	4798      	blx	r3
   c43aa:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_MirrorPadOptions ? static_cast<const MirrorPadOptions *>(builtin_options()) : nullptr;
   c43ac:	4628      	mov	r0, r5
   c43ae:	f7ff f8b8 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c43b2:	284d      	cmp	r0, #77	; 0x4d
   c43b4:	f47f a9a2 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43b8:	4628      	mov	r0, r5
   c43ba:	f7ff f870 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (mirror_pad_params != nullptr) {
   c43be:	2800      	cmp	r0, #0
   c43c0:	f43f a99c 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
   c43c4:	2200      	movs	r2, #0
   c43c6:	2104      	movs	r1, #4
   c43c8:	f7ff f8ba 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
   c43cc:	2800      	cmp	r0, #0
   c43ce:	bf0c      	ite	eq
   c43d0:	2301      	moveq	r3, #1
   c43d2:	2302      	movne	r3, #2
        params->mode =
   c43d4:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c43d6:	f7ff b991 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43da:	6823      	ldr	r3, [r4, #0]
   c43dc:	2101      	movs	r1, #1
   c43de:	681b      	ldr	r3, [r3, #0]
   c43e0:	4620      	mov	r0, r4
   c43e2:	4798      	blx	r3
   c43e4:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_UniqueOptions ? static_cast<const UniqueOptions *>(builtin_options()) : nullptr;
   c43e6:	4628      	mov	r0, r5
   c43e8:	f7ff f89b 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c43ec:	2850      	cmp	r0, #80	; 0x50
   c43ee:	f47f a985 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c43f2:	4628      	mov	r0, r5
   c43f4:	f7ff f853 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (unique_params != nullptr) {
   c43f8:	2800      	cmp	r0, #0
   c43fa:	f43f a97f 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return static_cast<TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
   c43fe:	2202      	movs	r2, #2
   c4400:	2104      	movs	r1, #4
   c4402:	f7ff f89d 	bl	c3540 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
                ? TfLiteType::kTfLiteInt64
   c4406:	2804      	cmp	r0, #4
   c4408:	bf0c      	ite	eq
   c440a:	2304      	moveq	r3, #4
   c440c:	2302      	movne	r3, #2
        params->index_out_type =
   c440e:	7023      	strb	r3, [r4, #0]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4410:	f7ff b974 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4414:	6823      	ldr	r3, [r4, #0]
   c4416:	2108      	movs	r1, #8
   c4418:	681b      	ldr	r3, [r3, #0]
   c441a:	4620      	mov	r0, r4
   c441c:	4798      	blx	r3
   c441e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_ReverseSequenceOptions ? static_cast<const ReverseSequenceOptions *>(builtin_options()) : nullptr;
   c4420:	4628      	mov	r0, r5
   c4422:	f7ff f87e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4426:	2857      	cmp	r0, #87	; 0x57
   c4428:	f47f a968 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c442c:	4628      	mov	r0, r5
   c442e:	f7ff f836 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* reverse_seq_params =
   c4432:	4605      	mov	r5, r0
   c4434:	2800      	cmp	r0, #0
   c4436:	f43f a961 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_SEQ_DIM, 0);
   c443a:	2200      	movs	r2, #0
   c443c:	2104      	movs	r1, #4
   c443e:	f7ff f876 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BATCH_DIM, 0);
   c4442:	2200      	movs	r2, #0
        params->seq_dim = reverse_seq_params->seq_dim();
   c4444:	6020      	str	r0, [r4, #0]
   c4446:	2106      	movs	r1, #6
   c4448:	4628      	mov	r0, r5
   c444a:	f7ff f870 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->batch_dim = reverse_seq_params->batch_dim();
   c444e:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params.release());
   c4450:	f7ff b954 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4454:	6823      	ldr	r3, [r4, #0]
   c4456:	2108      	movs	r1, #8
   c4458:	681b      	ldr	r3, [r3, #0]
   c445a:	4620      	mov	r0, r4
   c445c:	4798      	blx	r3
   c445e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_IfOptions ? static_cast<const IfOptions *>(builtin_options()) : nullptr;
   c4460:	4628      	mov	r0, r5
   c4462:	f7ff f85e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c4466:	285c      	cmp	r0, #92	; 0x5c
   c4468:	f47f a948 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c446c:	4628      	mov	r0, r5
   c446e:	f7ff f816 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
   c4472:	4605      	mov	r5, r0
   c4474:	2800      	cmp	r0, #0
   c4476:	f43f a941 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
   c447a:	2200      	movs	r2, #0
   c447c:	2104      	movs	r1, #4
   c447e:	f7ff f856 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
   c4482:	2200      	movs	r2, #0
        params->then_subgraph_index = if_params->then_subgraph_index();
   c4484:	6020      	str	r0, [r4, #0]
   c4486:	2106      	movs	r1, #6
   c4488:	4628      	mov	r0, r5
   c448a:	f7ff f850 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->else_subgraph_index = if_params->else_subgraph_index();
   c448e:	6060      	str	r0, [r4, #4]
      *builtin_data = reinterpret_cast<void*>(params);
   c4490:	f7ff b934 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c4494:	6823      	ldr	r3, [r4, #0]
   c4496:	2108      	movs	r1, #8
   c4498:	681b      	ldr	r3, [r3, #0]
   c449a:	4620      	mov	r0, r4
   c449c:	4798      	blx	r3
   c449e:	4604      	mov	r4, r0
    return builtin_options_type() == BuiltinOptions_WhileOptions ? static_cast<const WhileOptions *>(builtin_options()) : nullptr;
   c44a0:	4628      	mov	r0, r5
   c44a2:	f7ff f83e 	bl	c3522 <_ZNK6tflite8Operator20builtin_options_typeEv>
   c44a6:	285d      	cmp	r0, #93	; 0x5d
   c44a8:	f47f a928 	bne.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c44ac:	4628      	mov	r0, r5
   c44ae:	f7fe fff6 	bl	c349e <_ZNK6tflite8Operator15builtin_optionsEv>
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
   c44b2:	4605      	mov	r5, r0
   c44b4:	2800      	cmp	r0, #0
   c44b6:	f43f a921 	beq.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
   c44ba:	2200      	movs	r2, #0
   c44bc:	2104      	movs	r1, #4
   c44be:	f7ff f836 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
   c44c2:	2200      	movs	r2, #0
        params->cond_subgraph_index = while_params->cond_subgraph_index();
   c44c4:	6020      	str	r0, [r4, #0]
   c44c6:	2106      	movs	r1, #6
   c44c8:	4628      	mov	r0, r5
   c44ca:	f7ff f830 	bl	c352e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
        params->body_subgraph_index = while_params->body_subgraph_index();
   c44ce:	6060      	str	r0, [r4, #4]
   c44d0:	f7ff b914 	b.w	c36fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x188>
   c44d4:	000c9738 	.word	0x000c9738
   c44d8:	00000000 	.word	0x00000000

000c44dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c44dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c44e0:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   c44e2:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c44e4:	460f      	mov	r7, r1
  *registration = nullptr;
   c44e6:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   c44e8:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   c44ea:	4605      	mov	r5, r0
   c44ec:	4690      	mov	r8, r2
   c44ee:	f7f1 f998 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c44f2:	b190      	cbz	r0, c451a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   c44f4:	562c      	ldrsb	r4, [r5, r0]
    auto field_offset = GetOptionalFieldOffset(field);
   c44f6:	2108      	movs	r1, #8
   c44f8:	4628      	mov	r0, r5
    return static_cast<BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   c44fa:	b2e4      	uxtb	r4, r4
   c44fc:	f7f1 f991 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   c4500:	b168      	cbz	r0, c451e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
   c4502:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   c4504:	2c79      	cmp	r4, #121	; 0x79
   c4506:	d90c      	bls.n	c4522 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x46>
      builtin_code < BuiltinOperator_MIN) {
    error_reporter->Report(
   c4508:	491d      	ldr	r1, [pc, #116]	; (c4580 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   c450a:	4622      	mov	r2, r4
   c450c:	4640      	mov	r0, r8
   c450e:	f000 f83f 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    *registration = op_resolver.FindOp(builtin_code, version);
    if (*registration == nullptr) {
      error_reporter->Report(
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
   c4512:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   c4514:	b002      	add	sp, #8
   c4516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c451a:	4604      	mov	r4, r0
   c451c:	e7eb      	b.n	c44f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   c451e:	2201      	movs	r2, #1
   c4520:	e7f0      	b.n	c4504 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   c4522:	2c20      	cmp	r4, #32
   c4524:	d011      	beq.n	c454a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6e>
    *registration = op_resolver.FindOp(builtin_code, version);
   c4526:	683b      	ldr	r3, [r7, #0]
   c4528:	9201      	str	r2, [sp, #4]
   c452a:	681b      	ldr	r3, [r3, #0]
   c452c:	4621      	mov	r1, r4
   c452e:	4638      	mov	r0, r7
   c4530:	4798      	blx	r3
    if (*registration == nullptr) {
   c4532:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   c4534:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   c4536:	bb08      	cbnz	r0, c457c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa0>
      error_reporter->Report(
   c4538:	4613      	mov	r3, r2
   c453a:	4a12      	ldr	r2, [pc, #72]	; (c4584 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   c453c:	4912      	ldr	r1, [pc, #72]	; (c4588 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   c453e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   c4542:	4640      	mov	r0, r8
   c4544:	f000 f824 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   c4548:	e7e3      	b.n	c4512 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   c454a:	2106      	movs	r1, #6
   c454c:	4628      	mov	r0, r5
   c454e:	9201      	str	r2, [sp, #4]
   c4550:	f7f1 f967 	bl	b5822 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
   c4554:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   c4556:	b160      	cbz	r0, c4572 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x96>
   c4558:	582b      	ldr	r3, [r5, r0]
    *registration = op_resolver.FindOp(name, version);
   c455a:	9a01      	ldr	r2, [sp, #4]
   c455c:	4419      	add	r1, r3
   c455e:	683b      	ldr	r3, [r7, #0]
   c4560:	3104      	adds	r1, #4
   c4562:	685b      	ldr	r3, [r3, #4]
   c4564:	4638      	mov	r0, r7
   c4566:	4798      	blx	r3
   c4568:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   c456a:	fab0 f080 	clz	r0, r0
   c456e:	0940      	lsrs	r0, r0, #5
   c4570:	e7d0      	b.n	c4514 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
    error_reporter->Report(
   c4572:	4906      	ldr	r1, [pc, #24]	; (c458c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   c4574:	4640      	mov	r0, r8
   c4576:	f000 f80b 	bl	c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
   c457a:	e7ca      	b.n	c4512 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
  TfLiteStatus status = kTfLiteOk;
   c457c:	2000      	movs	r0, #0
   c457e:	e7c9      	b.n	c4514 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   c4580:	000c975e 	.word	0x000c975e
   c4584:	000c7f1c 	.word	0x000c7f1c
   c4588:	000c97b2 	.word	0x000c97b2
   c458c:	000c97e7 	.word	0x000c97e7

000c4590 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   c4590:	b40e      	push	{r1, r2, r3}
   c4592:	b503      	push	{r0, r1, lr}
   c4594:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   c4596:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
   c4598:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
   c459c:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
   c459e:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   c45a0:	4798      	blx	r3
  va_end(args);
  return code;
}
   c45a2:	b002      	add	sp, #8
   c45a4:	f85d eb04 	ldr.w	lr, [sp], #4
   c45a8:	b003      	add	sp, #12
   c45aa:	4770      	bx	lr

000c45ac <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include <string.h>

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   c45ac:	b530      	push	{r4, r5, lr}
  if (!tensor->is_variable) {
   c45ae:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   c45b2:	b16b      	cbz	r3, c45d0 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x24>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   c45b4:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   c45b6:	6844      	ldr	r4, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   c45b8:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
   c45ba:	bf0c      	ite	eq
   c45bc:	6901      	ldreq	r1, [r0, #16]
  int value = 0;
   c45be:	2100      	movne	r1, #0
  char* raw_ptr = tensor->data.raw;
   c45c0:	4623      	mov	r3, r4
  for (int i = 0; i < tensor->bytes; ++i) {
   c45c2:	6985      	ldr	r5, [r0, #24]
   c45c4:	1b1a      	subs	r2, r3, r4
   c45c6:	42aa      	cmp	r2, r5
   c45c8:	d202      	bcs.n	c45d0 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x24>
    *raw_ptr = value;
   c45ca:	f803 1b01 	strb.w	r1, [r3], #1
  for (int i = 0; i < tensor->bytes; ++i) {
   c45ce:	e7f8      	b.n	c45c2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x16>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   c45d0:	2000      	movs	r0, #0
   c45d2:	bd30      	pop	{r4, r5, pc}

000c45d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   c45d4:	b508      	push	{r3, lr}
   c45d6:	4b02      	ldr	r3, [pc, #8]	; (c45e0 <netdb_freeaddrinfo+0xc>)
   c45d8:	681b      	ldr	r3, [r3, #0]
   c45da:	689b      	ldr	r3, [r3, #8]
   c45dc:	9301      	str	r3, [sp, #4]
   c45de:	bd08      	pop	{r3, pc}
   c45e0:	00030268 	.word	0x00030268

000c45e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   c45e4:	b508      	push	{r3, lr}
   c45e6:	4b02      	ldr	r3, [pc, #8]	; (c45f0 <netdb_getaddrinfo+0xc>)
   c45e8:	681b      	ldr	r3, [r3, #0]
   c45ea:	68db      	ldr	r3, [r3, #12]
   c45ec:	9301      	str	r3, [sp, #4]
   c45ee:	bd08      	pop	{r3, pc}
   c45f0:	00030268 	.word	0x00030268

000c45f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   c45f4:	b508      	push	{r3, lr}
   c45f6:	4b02      	ldr	r3, [pc, #8]	; (c4600 <HAL_RNG_GetRandomNumber+0xc>)
   c45f8:	681b      	ldr	r3, [r3, #0]
   c45fa:	685b      	ldr	r3, [r3, #4]
   c45fc:	9301      	str	r3, [sp, #4]
   c45fe:	bd08      	pop	{r3, pc}
   c4600:	00030218 	.word	0x00030218

000c4604 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   c4604:	b508      	push	{r3, lr}
   c4606:	4b02      	ldr	r3, [pc, #8]	; (c4610 <HAL_Delay_Microseconds+0xc>)
   c4608:	681b      	ldr	r3, [r3, #0]
   c460a:	68db      	ldr	r3, [r3, #12]
   c460c:	9301      	str	r3, [sp, #4]
   c460e:	bd08      	pop	{r3, pc}
   c4610:	00030218 	.word	0x00030218

000c4614 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   c4614:	b508      	push	{r3, lr}
   c4616:	4b02      	ldr	r3, [pc, #8]	; (c4620 <HAL_Timer_Get_Milli_Seconds+0xc>)
   c4618:	681b      	ldr	r3, [r3, #0]
   c461a:	695b      	ldr	r3, [r3, #20]
   c461c:	9301      	str	r3, [sp, #4]
   c461e:	bd08      	pop	{r3, pc}
   c4620:	00030218 	.word	0x00030218

000c4624 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   c4624:	b508      	push	{r3, lr}
   c4626:	4b02      	ldr	r3, [pc, #8]	; (c4630 <HAL_Core_Runtime_Info+0xc>)
   c4628:	681b      	ldr	r3, [r3, #0]
   c462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c462c:	9301      	str	r3, [sp, #4]
   c462e:	bd08      	pop	{r3, pc}
   c4630:	00030234 	.word	0x00030234

000c4634 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   c4634:	b508      	push	{r3, lr}
   c4636:	4b02      	ldr	r3, [pc, #8]	; (c4640 <os_mutex_recursive_create+0xc>)
   c4638:	681b      	ldr	r3, [r3, #0]
   c463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c463c:	9301      	str	r3, [sp, #4]
   c463e:	bd08      	pop	{r3, pc}
   c4640:	00030248 	.word	0x00030248

000c4644 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   c4644:	b508      	push	{r3, lr}
   c4646:	4b02      	ldr	r3, [pc, #8]	; (c4650 <inet_inet_ntop+0xc>)
   c4648:	681b      	ldr	r3, [r3, #0]
   c464a:	695b      	ldr	r3, [r3, #20]
   c464c:	9301      	str	r3, [sp, #4]
   c464e:	bd08      	pop	{r3, pc}
   c4650:	00030264 	.word	0x00030264

000c4654 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   c4654:	b508      	push	{r3, lr}
   c4656:	4b02      	ldr	r3, [pc, #8]	; (c4660 <hal_usart_write+0xc>)
   c4658:	681b      	ldr	r3, [r3, #0]
   c465a:	68db      	ldr	r3, [r3, #12]
   c465c:	9301      	str	r3, [sp, #4]
   c465e:	bd08      	pop	{r3, pc}
   c4660:	0003023c 	.word	0x0003023c

000c4664 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   c4664:	b508      	push	{r3, lr}
   c4666:	4b02      	ldr	r3, [pc, #8]	; (c4670 <hal_usart_available+0xc>)
   c4668:	681b      	ldr	r3, [r3, #0]
   c466a:	691b      	ldr	r3, [r3, #16]
   c466c:	9301      	str	r3, [sp, #4]
   c466e:	bd08      	pop	{r3, pc}
   c4670:	0003023c 	.word	0x0003023c

000c4674 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   c4674:	b508      	push	{r3, lr}
   c4676:	4b02      	ldr	r3, [pc, #8]	; (c4680 <hal_usart_read+0xc>)
   c4678:	681b      	ldr	r3, [r3, #0]
   c467a:	695b      	ldr	r3, [r3, #20]
   c467c:	9301      	str	r3, [sp, #4]
   c467e:	bd08      	pop	{r3, pc}
   c4680:	0003023c 	.word	0x0003023c

000c4684 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   c4684:	b508      	push	{r3, lr}
   c4686:	4b02      	ldr	r3, [pc, #8]	; (c4690 <hal_usart_peek+0xc>)
   c4688:	681b      	ldr	r3, [r3, #0]
   c468a:	699b      	ldr	r3, [r3, #24]
   c468c:	9301      	str	r3, [sp, #4]
   c468e:	bd08      	pop	{r3, pc}
   c4690:	0003023c 	.word	0x0003023c

000c4694 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   c4694:	b508      	push	{r3, lr}
   c4696:	4b02      	ldr	r3, [pc, #8]	; (c46a0 <hal_usart_flush+0xc>)
   c4698:	681b      	ldr	r3, [r3, #0]
   c469a:	69db      	ldr	r3, [r3, #28]
   c469c:	9301      	str	r3, [sp, #4]
   c469e:	bd08      	pop	{r3, pc}
   c46a0:	0003023c 	.word	0x0003023c

000c46a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   c46a4:	b508      	push	{r3, lr}
   c46a6:	4b02      	ldr	r3, [pc, #8]	; (c46b0 <hal_usart_available_data_for_write+0xc>)
   c46a8:	681b      	ldr	r3, [r3, #0]
   c46aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c46ac:	9301      	str	r3, [sp, #4]
   c46ae:	bd08      	pop	{r3, pc}
   c46b0:	0003023c 	.word	0x0003023c

000c46b4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   c46b4:	b508      	push	{r3, lr}
   c46b6:	4b02      	ldr	r3, [pc, #8]	; (c46c0 <hal_usart_init_ex+0xc>)
   c46b8:	681b      	ldr	r3, [r3, #0]
   c46ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c46bc:	9301      	str	r3, [sp, #4]
   c46be:	bd08      	pop	{r3, pc}
   c46c0:	0003023c 	.word	0x0003023c

000c46c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   c46c4:	b508      	push	{r3, lr}
   c46c6:	4b02      	ldr	r3, [pc, #8]	; (c46d0 <HAL_USB_USART_Init+0xc>)
   c46c8:	681b      	ldr	r3, [r3, #0]
   c46ca:	681b      	ldr	r3, [r3, #0]
   c46cc:	9301      	str	r3, [sp, #4]
   c46ce:	bd08      	pop	{r3, pc}
   c46d0:	0003024c 	.word	0x0003024c

000c46d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   c46d4:	b508      	push	{r3, lr}
   c46d6:	4b02      	ldr	r3, [pc, #8]	; (c46e0 <HAL_USB_USART_Begin+0xc>)
   c46d8:	681b      	ldr	r3, [r3, #0]
   c46da:	685b      	ldr	r3, [r3, #4]
   c46dc:	9301      	str	r3, [sp, #4]
   c46de:	bd08      	pop	{r3, pc}
   c46e0:	0003024c 	.word	0x0003024c

000c46e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   c46e4:	b508      	push	{r3, lr}
   c46e6:	4b02      	ldr	r3, [pc, #8]	; (c46f0 <HAL_USB_USART_Available_Data+0xc>)
   c46e8:	681b      	ldr	r3, [r3, #0]
   c46ea:	691b      	ldr	r3, [r3, #16]
   c46ec:	9301      	str	r3, [sp, #4]
   c46ee:	bd08      	pop	{r3, pc}
   c46f0:	0003024c 	.word	0x0003024c

000c46f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   c46f4:	b508      	push	{r3, lr}
   c46f6:	4b02      	ldr	r3, [pc, #8]	; (c4700 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   c46f8:	681b      	ldr	r3, [r3, #0]
   c46fa:	695b      	ldr	r3, [r3, #20]
   c46fc:	9301      	str	r3, [sp, #4]
   c46fe:	bd08      	pop	{r3, pc}
   c4700:	0003024c 	.word	0x0003024c

000c4704 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c4704:	b508      	push	{r3, lr}
   c4706:	4b02      	ldr	r3, [pc, #8]	; (c4710 <HAL_USB_USART_Receive_Data+0xc>)
   c4708:	681b      	ldr	r3, [r3, #0]
   c470a:	699b      	ldr	r3, [r3, #24]
   c470c:	9301      	str	r3, [sp, #4]
   c470e:	bd08      	pop	{r3, pc}
   c4710:	0003024c 	.word	0x0003024c

000c4714 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c4714:	b508      	push	{r3, lr}
   c4716:	4b02      	ldr	r3, [pc, #8]	; (c4720 <HAL_USB_USART_Send_Data+0xc>)
   c4718:	681b      	ldr	r3, [r3, #0]
   c471a:	69db      	ldr	r3, [r3, #28]
   c471c:	9301      	str	r3, [sp, #4]
   c471e:	bd08      	pop	{r3, pc}
   c4720:	0003024c 	.word	0x0003024c

000c4724 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   c4724:	b508      	push	{r3, lr}
   c4726:	4b02      	ldr	r3, [pc, #8]	; (c4730 <HAL_USB_USART_Flush_Data+0xc>)
   c4728:	681b      	ldr	r3, [r3, #0]
   c472a:	6a1b      	ldr	r3, [r3, #32]
   c472c:	9301      	str	r3, [sp, #4]
   c472e:	bd08      	pop	{r3, pc}
   c4730:	0003024c 	.word	0x0003024c

000c4734 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   c4734:	b508      	push	{r3, lr}
   c4736:	4b02      	ldr	r3, [pc, #8]	; (c4740 <HAL_USB_USART_Is_Connected+0xc>)
   c4738:	681b      	ldr	r3, [r3, #0]
   c473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c473c:	9301      	str	r3, [sp, #4]
   c473e:	bd08      	pop	{r3, pc}
   c4740:	0003024c 	.word	0x0003024c

000c4744 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   c4744:	b508      	push	{r3, lr}
   c4746:	4b02      	ldr	r3, [pc, #8]	; (c4750 <panic_+0xc>)
   c4748:	681b      	ldr	r3, [r3, #0]
   c474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c474c:	9301      	str	r3, [sp, #4]
   c474e:	bd08      	pop	{r3, pc}
   c4750:	00030260 	.word	0x00030260

000c4754 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   c4754:	b508      	push	{r3, lr}
   c4756:	4b02      	ldr	r3, [pc, #8]	; (c4760 <set_system_mode+0xc>)
   c4758:	681b      	ldr	r3, [r3, #0]
   c475a:	685b      	ldr	r3, [r3, #4]
   c475c:	9301      	str	r3, [sp, #4]
   c475e:	bd08      	pop	{r3, pc}
   c4760:	00030220 	.word	0x00030220

000c4764 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   c4764:	b508      	push	{r3, lr}
   c4766:	4b02      	ldr	r3, [pc, #8]	; (c4770 <system_delay_ms+0xc>)
   c4768:	681b      	ldr	r3, [r3, #0]
   c476a:	695b      	ldr	r3, [r3, #20]
   c476c:	9301      	str	r3, [sp, #4]
   c476e:	bd08      	pop	{r3, pc}
   c4770:	00030220 	.word	0x00030220

000c4774 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   c4774:	b508      	push	{r3, lr}
   c4776:	4b03      	ldr	r3, [pc, #12]	; (c4784 <system_ctrl_set_app_request_handler+0x10>)
   c4778:	681b      	ldr	r3, [r3, #0]
   c477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   c477e:	9301      	str	r3, [sp, #4]
   c4780:	bd08      	pop	{r3, pc}
   c4782:	0000      	.short	0x0000
   c4784:	00030220 	.word	0x00030220

000c4788 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   c4788:	b508      	push	{r3, lr}
   c478a:	4b03      	ldr	r3, [pc, #12]	; (c4798 <system_ctrl_set_result+0x10>)
   c478c:	681b      	ldr	r3, [r3, #0]
   c478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   c4792:	9301      	str	r3, [sp, #4]
   c4794:	bd08      	pop	{r3, pc}
   c4796:	0000      	.short	0x0000
   c4798:	00030220 	.word	0x00030220

000c479c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   c479c:	b508      	push	{r3, lr}
   c479e:	4b02      	ldr	r3, [pc, #8]	; (c47a8 <network_connect+0xc>)
   c47a0:	681b      	ldr	r3, [r3, #0]
   c47a2:	685b      	ldr	r3, [r3, #4]
   c47a4:	9301      	str	r3, [sp, #4]
   c47a6:	bd08      	pop	{r3, pc}
   c47a8:	00030240 	.word	0x00030240

000c47ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   c47ac:	b508      	push	{r3, lr}
   c47ae:	4b02      	ldr	r3, [pc, #8]	; (c47b8 <network_connecting+0xc>)
   c47b0:	681b      	ldr	r3, [r3, #0]
   c47b2:	689b      	ldr	r3, [r3, #8]
   c47b4:	9301      	str	r3, [sp, #4]
   c47b6:	bd08      	pop	{r3, pc}
   c47b8:	00030240 	.word	0x00030240

000c47bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   c47bc:	b508      	push	{r3, lr}
   c47be:	4b02      	ldr	r3, [pc, #8]	; (c47c8 <network_disconnect+0xc>)
   c47c0:	681b      	ldr	r3, [r3, #0]
   c47c2:	68db      	ldr	r3, [r3, #12]
   c47c4:	9301      	str	r3, [sp, #4]
   c47c6:	bd08      	pop	{r3, pc}
   c47c8:	00030240 	.word	0x00030240

000c47cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   c47cc:	b508      	push	{r3, lr}
   c47ce:	4b02      	ldr	r3, [pc, #8]	; (c47d8 <network_ready+0xc>)
   c47d0:	681b      	ldr	r3, [r3, #0]
   c47d2:	691b      	ldr	r3, [r3, #16]
   c47d4:	9301      	str	r3, [sp, #4]
   c47d6:	bd08      	pop	{r3, pc}
   c47d8:	00030240 	.word	0x00030240

000c47dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   c47dc:	b508      	push	{r3, lr}
   c47de:	4b02      	ldr	r3, [pc, #8]	; (c47e8 <network_on+0xc>)
   c47e0:	681b      	ldr	r3, [r3, #0]
   c47e2:	695b      	ldr	r3, [r3, #20]
   c47e4:	9301      	str	r3, [sp, #4]
   c47e6:	bd08      	pop	{r3, pc}
   c47e8:	00030240 	.word	0x00030240

000c47ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   c47ec:	b508      	push	{r3, lr}
   c47ee:	4b02      	ldr	r3, [pc, #8]	; (c47f8 <network_off+0xc>)
   c47f0:	681b      	ldr	r3, [r3, #0]
   c47f2:	699b      	ldr	r3, [r3, #24]
   c47f4:	9301      	str	r3, [sp, #4]
   c47f6:	bd08      	pop	{r3, pc}
   c47f8:	00030240 	.word	0x00030240

000c47fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   c47fc:	b508      	push	{r3, lr}
   c47fe:	4b02      	ldr	r3, [pc, #8]	; (c4808 <network_listen+0xc>)
   c4800:	681b      	ldr	r3, [r3, #0]
   c4802:	69db      	ldr	r3, [r3, #28]
   c4804:	9301      	str	r3, [sp, #4]
   c4806:	bd08      	pop	{r3, pc}
   c4808:	00030240 	.word	0x00030240

000c480c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   c480c:	b508      	push	{r3, lr}
   c480e:	4b02      	ldr	r3, [pc, #8]	; (c4818 <network_listening+0xc>)
   c4810:	681b      	ldr	r3, [r3, #0]
   c4812:	6a1b      	ldr	r3, [r3, #32]
   c4814:	9301      	str	r3, [sp, #4]
   c4816:	bd08      	pop	{r3, pc}
   c4818:	00030240 	.word	0x00030240

000c481c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   c481c:	b508      	push	{r3, lr}
   c481e:	4b02      	ldr	r3, [pc, #8]	; (c4828 <network_set_listen_timeout+0xc>)
   c4820:	681b      	ldr	r3, [r3, #0]
   c4822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c4824:	9301      	str	r3, [sp, #4]
   c4826:	bd08      	pop	{r3, pc}
   c4828:	00030240 	.word	0x00030240

000c482c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   c482c:	b508      	push	{r3, lr}
   c482e:	4b02      	ldr	r3, [pc, #8]	; (c4838 <network_get_listen_timeout+0xc>)
   c4830:	681b      	ldr	r3, [r3, #0]
   c4832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c4834:	9301      	str	r3, [sp, #4]
   c4836:	bd08      	pop	{r3, pc}
   c4838:	00030240 	.word	0x00030240

000c483c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   c483c:	b508      	push	{r3, lr}
   c483e:	4b02      	ldr	r3, [pc, #8]	; (c4848 <network_is_on+0xc>)
   c4840:	681b      	ldr	r3, [r3, #0]
   c4842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c4844:	9301      	str	r3, [sp, #4]
   c4846:	bd08      	pop	{r3, pc}
   c4848:	00030240 	.word	0x00030240

000c484c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   c484c:	b508      	push	{r3, lr}
   c484e:	4b02      	ldr	r3, [pc, #8]	; (c4858 <network_is_off+0xc>)
   c4850:	681b      	ldr	r3, [r3, #0]
   c4852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c4854:	9301      	str	r3, [sp, #4]
   c4856:	bd08      	pop	{r3, pc}
   c4858:	00030240 	.word	0x00030240

000c485c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   c485c:	b508      	push	{r3, lr}
   c485e:	4b02      	ldr	r3, [pc, #8]	; (c4868 <spark_set_random_seed_from_cloud_handler+0xc>)
   c4860:	681b      	ldr	r3, [r3, #0]
   c4862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c4864:	9301      	str	r3, [sp, #4]
   c4866:	bd08      	pop	{r3, pc}
   c4868:	00030244 	.word	0x00030244

000c486c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   c486c:	b508      	push	{r3, lr}
   c486e:	4b02      	ldr	r3, [pc, #8]	; (c4878 <malloc+0xc>)
   c4870:	681b      	ldr	r3, [r3, #0]
   c4872:	681b      	ldr	r3, [r3, #0]
   c4874:	9301      	str	r3, [sp, #4]
   c4876:	bd08      	pop	{r3, pc}
   c4878:	0003021c 	.word	0x0003021c

000c487c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   c487c:	b508      	push	{r3, lr}
   c487e:	4b02      	ldr	r3, [pc, #8]	; (c4888 <free+0xc>)
   c4880:	681b      	ldr	r3, [r3, #0]
   c4882:	685b      	ldr	r3, [r3, #4]
   c4884:	9301      	str	r3, [sp, #4]
   c4886:	bd08      	pop	{r3, pc}
   c4888:	0003021c 	.word	0x0003021c

000c488c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   c488c:	b508      	push	{r3, lr}
   c488e:	4b02      	ldr	r3, [pc, #8]	; (c4898 <vsnprintf+0xc>)
   c4890:	681b      	ldr	r3, [r3, #0]
   c4892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c4894:	9301      	str	r3, [sp, #4]
   c4896:	bd08      	pop	{r3, pc}
   c4898:	0003021c 	.word	0x0003021c

000c489c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   c489c:	b508      	push	{r3, lr}
   c489e:	4b02      	ldr	r3, [pc, #8]	; (c48a8 <abort+0xc>)
   c48a0:	681b      	ldr	r3, [r3, #0]
   c48a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c48a4:	9301      	str	r3, [sp, #4]
   c48a6:	bd08      	pop	{r3, pc}
   c48a8:	0003021c 	.word	0x0003021c

000c48ac <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   c48ac:	b508      	push	{r3, lr}
   c48ae:	4b02      	ldr	r3, [pc, #8]	; (c48b8 <__errno+0xc>)
   c48b0:	681b      	ldr	r3, [r3, #0]
   c48b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c48b4:	9301      	str	r3, [sp, #4]
   c48b6:	bd08      	pop	{r3, pc}
   c48b8:	0003021c 	.word	0x0003021c

000c48bc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   c48bc:	b508      	push	{r3, lr}
   c48be:	4b02      	ldr	r3, [pc, #8]	; (c48c8 <__assert_func+0xc>)
   c48c0:	681b      	ldr	r3, [r3, #0]
   c48c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c48c4:	9301      	str	r3, [sp, #4]
   c48c6:	bd08      	pop	{r3, pc}
   c48c8:	0003021c 	.word	0x0003021c

000c48cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   c48cc:	b508      	push	{r3, lr}
   c48ce:	4b02      	ldr	r3, [pc, #8]	; (c48d8 <newlib_impure_ptr_callback+0xc>)
   c48d0:	681b      	ldr	r3, [r3, #0]
   c48d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c48d4:	9301      	str	r3, [sp, #4]
   c48d6:	bd08      	pop	{r3, pc}
   c48d8:	0003021c 	.word	0x0003021c

000c48dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c48dc:	2200      	movs	r2, #0
   c48de:	6840      	ldr	r0, [r0, #4]
   c48e0:	4611      	mov	r1, r2
   c48e2:	f7ff bf93 	b.w	c480c <network_listening>

000c48e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c48e6:	2200      	movs	r2, #0
   c48e8:	6840      	ldr	r0, [r0, #4]
   c48ea:	4611      	mov	r1, r2
   c48ec:	f7ff bf9e 	b.w	c482c <network_get_listen_timeout>

000c48f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c48f0:	6840      	ldr	r0, [r0, #4]
   c48f2:	2200      	movs	r2, #0
   c48f4:	f7ff bf92 	b.w	c481c <network_set_listen_timeout>

000c48f8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c48f8:	6840      	ldr	r0, [r0, #4]
   c48fa:	2200      	movs	r2, #0
   c48fc:	f081 0101 	eor.w	r1, r1, #1
   c4900:	f7ff bf7c 	b.w	c47fc <network_listen>

000c4904 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c4904:	2300      	movs	r3, #0
   c4906:	6840      	ldr	r0, [r0, #4]
   c4908:	461a      	mov	r2, r3
   c490a:	4619      	mov	r1, r3
   c490c:	f7ff bf6e 	b.w	c47ec <network_off>

000c4910 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c4910:	2300      	movs	r3, #0
   c4912:	6840      	ldr	r0, [r0, #4]
   c4914:	461a      	mov	r2, r3
   c4916:	4619      	mov	r1, r3
   c4918:	f7ff bf60 	b.w	c47dc <network_on>

000c491c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c491c:	2200      	movs	r2, #0
   c491e:	6840      	ldr	r0, [r0, #4]
   c4920:	4611      	mov	r1, r2
   c4922:	f7ff bf53 	b.w	c47cc <network_ready>

000c4926 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c4926:	2200      	movs	r2, #0
   c4928:	6840      	ldr	r0, [r0, #4]
   c492a:	4611      	mov	r1, r2
   c492c:	f7ff bf3e 	b.w	c47ac <network_connecting>

000c4930 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c4930:	6840      	ldr	r0, [r0, #4]
   c4932:	2200      	movs	r2, #0
   c4934:	2102      	movs	r1, #2
   c4936:	f7ff bf41 	b.w	c47bc <network_disconnect>

000c493a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c493a:	2300      	movs	r3, #0
   c493c:	6840      	ldr	r0, [r0, #4]
   c493e:	461a      	mov	r2, r3
   c4940:	f7ff bf2c 	b.w	c479c <network_connect>

000c4944 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   c4944:	4b02      	ldr	r3, [pc, #8]	; (c4950 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   c4946:	2203      	movs	r2, #3
   c4948:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   c494a:	4a02      	ldr	r2, [pc, #8]	; (c4954 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   c494c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   c494e:	4770      	bx	lr
   c4950:	2003e6dc 	.word	0x2003e6dc
   c4954:	000c9828 	.word	0x000c9828

000c4958 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   c4958:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   c495a:	2420      	movs	r4, #32
{
   c495c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   c495e:	4622      	mov	r2, r4
   c4960:	2100      	movs	r1, #0
   c4962:	4668      	mov	r0, sp
   c4964:	f002 f966 	bl	c6c34 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   c4968:	2100      	movs	r1, #0
   c496a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   c496c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   c4970:	f7ff fe58 	bl	c4624 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   c4974:	9801      	ldr	r0, [sp, #4]
   c4976:	b008      	add	sp, #32
   c4978:	bd10      	pop	{r4, pc}
	...

000c497c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c497c:	4b05      	ldr	r3, [pc, #20]	; (c4994 <_GLOBAL__sub_I_System+0x18>)
   c497e:	2202      	movs	r2, #2
   c4980:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c4982:	4b05      	ldr	r3, [pc, #20]	; (c4998 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c4984:	4a05      	ldr	r2, [pc, #20]	; (c499c <_GLOBAL__sub_I_System+0x20>)
   c4986:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c4988:	2000      	movs	r0, #0
   c498a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c498e:	f7ff bee1 	b.w	c4754 <set_system_mode>
   c4992:	bf00      	nop
   c4994:	2003e6f0 	.word	0x2003e6f0
   c4998:	2003e6e4 	.word	0x2003e6e4
   c499c:	ffff0000 	.word	0xffff0000

000c49a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   c49a0:	4802      	ldr	r0, [pc, #8]	; (c49ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   c49a2:	2300      	movs	r3, #0
   c49a4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   c49a6:	f7ff be45 	b.w	c4634 <os_mutex_recursive_create>
   c49aa:	bf00      	nop
   c49ac:	2003e6f4 	.word	0x2003e6f4

000c49b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c49b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c49b2:	4606      	mov	r6, r0
   c49b4:	460d      	mov	r5, r1
  size_t n = 0;
   c49b6:	188f      	adds	r7, r1, r2
   c49b8:	2400      	movs	r4, #0
  while (size--) {
   c49ba:	42bd      	cmp	r5, r7
   c49bc:	d00c      	beq.n	c49d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c49be:	6833      	ldr	r3, [r6, #0]
   c49c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   c49c4:	689b      	ldr	r3, [r3, #8]
   c49c6:	4630      	mov	r0, r6
   c49c8:	4798      	blx	r3
     if (chunk>=0)
   c49ca:	1e03      	subs	r3, r0, #0
   c49cc:	db01      	blt.n	c49d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c49ce:	441c      	add	r4, r3
  while (size--) {
   c49d0:	e7f3      	b.n	c49ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c49d2:	2c00      	cmp	r4, #0
   c49d4:	bf08      	it	eq
   c49d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c49d8:	4620      	mov	r0, r4
   c49da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c49dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   c49dc:	b513      	push	{r0, r1, r4, lr}
   c49de:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   c49e0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   c49e2:	b159      	cbz	r1, c49fc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   c49e4:	9101      	str	r1, [sp, #4]
   c49e6:	f7f0 f849 	bl	b4a7c <strlen>
   c49ea:	6823      	ldr	r3, [r4, #0]
   c49ec:	9901      	ldr	r1, [sp, #4]
   c49ee:	68db      	ldr	r3, [r3, #12]
   c49f0:	4602      	mov	r2, r0
   c49f2:	4620      	mov	r0, r4
    }
   c49f4:	b002      	add	sp, #8
   c49f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   c49fa:	4718      	bx	r3
    }
   c49fc:	b002      	add	sp, #8
   c49fe:	bd10      	pop	{r4, pc}

000c4a00 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c4a00:	b508      	push	{r3, lr}
  return write(str);
   c4a02:	f7ff ffeb 	bl	c49dc <_ZN5Print5writeEPKc>
}
   c4a06:	bd08      	pop	{r3, pc}

000c4a08 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c4a08:	6803      	ldr	r3, [r0, #0]
   c4a0a:	689b      	ldr	r3, [r3, #8]
   c4a0c:	4718      	bx	r3

000c4a0e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c4a0e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c4a10:	210d      	movs	r1, #13
{
   c4a12:	4605      	mov	r5, r0
  size_t n = print('\r');
   c4a14:	f7ff fff8 	bl	c4a08 <_ZN5Print5printEc>
  n += print('\n');
   c4a18:	210a      	movs	r1, #10
  size_t n = print('\r');
   c4a1a:	4604      	mov	r4, r0
  n += print('\n');
   c4a1c:	4628      	mov	r0, r5
   c4a1e:	f7ff fff3 	bl	c4a08 <_ZN5Print5printEc>
  return n;
}
   c4a22:	4420      	add	r0, r4
   c4a24:	bd38      	pop	{r3, r4, r5, pc}

000c4a26 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c4a26:	b530      	push	{r4, r5, lr}
   c4a28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c4a2a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c4a2c:	2a01      	cmp	r2, #1
  *str = '\0';
   c4a2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c4a32:	bf98      	it	ls
   c4a34:	220a      	movls	r2, #10
   c4a36:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c4a38:	460d      	mov	r5, r1
   c4a3a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c4a3e:	fb01 5312 	mls	r3, r1, r2, r5
   c4a42:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c4a46:	2b09      	cmp	r3, #9
   c4a48:	bf94      	ite	ls
   c4a4a:	3330      	addls	r3, #48	; 0x30
   c4a4c:	3337      	addhi	r3, #55	; 0x37
   c4a4e:	b2db      	uxtb	r3, r3
  } while(n);
   c4a50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c4a52:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c4a56:	d9ef      	bls.n	c4a38 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c4a58:	4621      	mov	r1, r4
   c4a5a:	f7ff ffbf 	bl	c49dc <_ZN5Print5writeEPKc>
}
   c4a5e:	b00b      	add	sp, #44	; 0x2c
   c4a60:	bd30      	pop	{r4, r5, pc}

000c4a62 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c4a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c4a66:	b086      	sub	sp, #24
   c4a68:	af00      	add	r7, sp, #0
   c4a6a:	4605      	mov	r5, r0
   c4a6c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c4a6e:	1d38      	adds	r0, r7, #4
   c4a70:	2114      	movs	r1, #20
{
   c4a72:	4614      	mov	r4, r2
    va_copy(args2, args);
   c4a74:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c4a76:	f7ff ff09 	bl	c488c <vsnprintf>

    if (n<bufsize)
   c4a7a:	2813      	cmp	r0, #19
   c4a7c:	d80e      	bhi.n	c4a9c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c4a7e:	1d39      	adds	r1, r7, #4
   c4a80:	4628      	mov	r0, r5
   c4a82:	f7ff ffab 	bl	c49dc <_ZN5Print5writeEPKc>
   c4a86:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c4a88:	b11e      	cbz	r6, c4a92 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c4a8a:	4628      	mov	r0, r5
   c4a8c:	f7ff ffbf 	bl	c4a0e <_ZN5Print7printlnEv>
   c4a90:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c4a92:	4620      	mov	r0, r4
   c4a94:	3718      	adds	r7, #24
   c4a96:	46bd      	mov	sp, r7
   c4a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c4a9c:	f100 0308 	add.w	r3, r0, #8
   c4aa0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c4aa4:	46e8      	mov	r8, sp
        char bigger[n+1];
   c4aa6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c4aaa:	4622      	mov	r2, r4
   c4aac:	1c41      	adds	r1, r0, #1
   c4aae:	683b      	ldr	r3, [r7, #0]
   c4ab0:	4668      	mov	r0, sp
   c4ab2:	f7ff feeb 	bl	c488c <vsnprintf>
  return write(str);
   c4ab6:	4669      	mov	r1, sp
   c4ab8:	4628      	mov	r0, r5
   c4aba:	f7ff ff8f 	bl	c49dc <_ZN5Print5writeEPKc>
   c4abe:	4604      	mov	r4, r0
   c4ac0:	46c5      	mov	sp, r8
   c4ac2:	e7e1      	b.n	c4a88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c4ac4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   c4ac4:	4b01      	ldr	r3, [pc, #4]	; (c4acc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c4ac6:	4a02      	ldr	r2, [pc, #8]	; (c4ad0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c4ac8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c4aca:	4770      	bx	lr
   c4acc:	2003e6f8 	.word	0x2003e6f8
   c4ad0:	000c985c 	.word	0x000c985c

000c4ad4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c4ad4:	4b02      	ldr	r3, [pc, #8]	; (c4ae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c4ad6:	681a      	ldr	r2, [r3, #0]
   c4ad8:	4b02      	ldr	r3, [pc, #8]	; (c4ae4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c4ada:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c4adc:	4770      	bx	lr
   c4ade:	bf00      	nop
   c4ae0:	2003c5b0 	.word	0x2003c5b0
   c4ae4:	2003e6fc 	.word	0x2003e6fc

000c4ae8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c4ae8:	2100      	movs	r1, #0
   c4aea:	f7ff be3b 	b.w	c4764 <system_delay_ms>
	...

000c4af0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   c4af0:	4b01      	ldr	r3, [pc, #4]	; (c4af8 <_GLOBAL__sub_I_RGB+0x8>)
   c4af2:	2200      	movs	r2, #0
   c4af4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c4af6:	4770      	bx	lr
   c4af8:	2003e700 	.word	0x2003e700

000c4afc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c4afc:	4b01      	ldr	r3, [pc, #4]	; (c4b04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c4afe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c4b00:	4770      	bx	lr
   c4b02:	bf00      	nop
   c4b04:	2003c5b8 	.word	0x2003c5b8

000c4b08 <serialEventRun>:
{
   c4b08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c4b0a:	4b0b      	ldr	r3, [pc, #44]	; (c4b38 <serialEventRun+0x30>)
   c4b0c:	b143      	cbz	r3, c4b20 <serialEventRun+0x18>
   c4b0e:	f000 f96b 	bl	c4de8 <_Z16_fetch_usbserialv>
   c4b12:	6803      	ldr	r3, [r0, #0]
   c4b14:	691b      	ldr	r3, [r3, #16]
   c4b16:	4798      	blx	r3
   c4b18:	2800      	cmp	r0, #0
   c4b1a:	dd01      	ble.n	c4b20 <serialEventRun+0x18>
        serialEvent();
   c4b1c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c4b20:	4b06      	ldr	r3, [pc, #24]	; (c4b3c <serialEventRun+0x34>)
   c4b22:	b143      	cbz	r3, c4b36 <serialEventRun+0x2e>
   c4b24:	f000 fae4 	bl	c50f0 <_Z22__fetch_global_Serial1v>
   c4b28:	6803      	ldr	r3, [r0, #0]
   c4b2a:	691b      	ldr	r3, [r3, #16]
   c4b2c:	4798      	blx	r3
   c4b2e:	2800      	cmp	r0, #0
   c4b30:	dd01      	ble.n	c4b36 <serialEventRun+0x2e>
        serialEvent1();
   c4b32:	f3af 8000 	nop.w
}
   c4b36:	bd08      	pop	{r3, pc}
	...

000c4b40 <_post_loop>:
{
   c4b40:	b508      	push	{r3, lr}
	serialEventRun();
   c4b42:	f7ff ffe1 	bl	c4b08 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c4b46:	f7ff fd65 	bl	c4614 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c4b4a:	4b01      	ldr	r3, [pc, #4]	; (c4b50 <_post_loop+0x10>)
   c4b4c:	6018      	str	r0, [r3, #0]
}
   c4b4e:	bd08      	pop	{r3, pc}
   c4b50:	2003e758 	.word	0x2003e758

000c4b54 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c4b54:	4805      	ldr	r0, [pc, #20]	; (c4b6c <_Z33system_initialize_user_backup_ramv+0x18>)
   c4b56:	4a06      	ldr	r2, [pc, #24]	; (c4b70 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c4b58:	4906      	ldr	r1, [pc, #24]	; (c4b74 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c4b5a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c4b5c:	1a12      	subs	r2, r2, r0
   c4b5e:	f002 f841 	bl	c6be4 <memcpy>
    __backup_sram_signature = signature;
   c4b62:	4b05      	ldr	r3, [pc, #20]	; (c4b78 <_Z33system_initialize_user_backup_ramv+0x24>)
   c4b64:	4a05      	ldr	r2, [pc, #20]	; (c4b7c <_Z33system_initialize_user_backup_ramv+0x28>)
   c4b66:	601a      	str	r2, [r3, #0]
}
   c4b68:	bd08      	pop	{r3, pc}
   c4b6a:	bf00      	nop
   c4b6c:	2003f400 	.word	0x2003f400
   c4b70:	2003f404 	.word	0x2003f404
   c4b74:	000ca81c 	.word	0x000ca81c
   c4b78:	2003f400 	.word	0x2003f400
   c4b7c:	9a271c1e 	.word	0x9a271c1e

000c4b80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c4b80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c4b82:	2300      	movs	r3, #0
   c4b84:	9300      	str	r3, [sp, #0]
   c4b86:	461a      	mov	r2, r3
   c4b88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c4b8c:	f7ff fdfc 	bl	c4788 <system_ctrl_set_result>
}
   c4b90:	b003      	add	sp, #12
   c4b92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c4b98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c4b98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c4b9a:	8843      	ldrh	r3, [r0, #2]
   c4b9c:	2b0a      	cmp	r3, #10
   c4b9e:	d008      	beq.n	c4bb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c4ba0:	2b50      	cmp	r3, #80	; 0x50
   c4ba2:	d10b      	bne.n	c4bbc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c4ba4:	4b09      	ldr	r3, [pc, #36]	; (c4bcc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c4ba6:	681b      	ldr	r3, [r3, #0]
   c4ba8:	b14b      	cbz	r3, c4bbe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c4baa:	b003      	add	sp, #12
   c4bac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c4bb0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c4bb2:	f7ff ffe5 	bl	c4b80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c4bb6:	b003      	add	sp, #12
   c4bb8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c4bbc:	2300      	movs	r3, #0
   c4bbe:	9300      	str	r3, [sp, #0]
   c4bc0:	461a      	mov	r2, r3
   c4bc2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c4bc6:	f7ff fddf 	bl	c4788 <system_ctrl_set_result>
}
   c4bca:	e7f4      	b.n	c4bb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c4bcc:	2003e714 	.word	0x2003e714

000c4bd0 <module_user_init_hook>:
{
   c4bd0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c4bd2:	4812      	ldr	r0, [pc, #72]	; (c4c1c <module_user_init_hook+0x4c>)
   c4bd4:	2100      	movs	r1, #0
   c4bd6:	f7ff fe79 	bl	c48cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c4bda:	4b11      	ldr	r3, [pc, #68]	; (c4c20 <module_user_init_hook+0x50>)
   c4bdc:	681a      	ldr	r2, [r3, #0]
   c4bde:	4b11      	ldr	r3, [pc, #68]	; (c4c24 <module_user_init_hook+0x54>)
   c4be0:	429a      	cmp	r2, r3
   c4be2:	4b11      	ldr	r3, [pc, #68]	; (c4c28 <module_user_init_hook+0x58>)
   c4be4:	bf0c      	ite	eq
   c4be6:	2201      	moveq	r2, #1
   c4be8:	2200      	movne	r2, #0
   c4bea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c4bec:	d001      	beq.n	c4bf2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c4bee:	f7ff ffb1 	bl	c4b54 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c4bf2:	f7ff fcff 	bl	c45f4 <HAL_RNG_GetRandomNumber>
   c4bf6:	4604      	mov	r4, r0
    srand(seed);
   c4bf8:	f002 f824 	bl	c6c44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c4bfc:	4b0b      	ldr	r3, [pc, #44]	; (c4c2c <module_user_init_hook+0x5c>)
   c4bfe:	b113      	cbz	r3, c4c06 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c4c00:	4620      	mov	r0, r4
   c4c02:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c4c06:	2100      	movs	r1, #0
   c4c08:	4808      	ldr	r0, [pc, #32]	; (c4c2c <module_user_init_hook+0x5c>)
   c4c0a:	f7ff fe27 	bl	c485c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c4c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c4c12:	4807      	ldr	r0, [pc, #28]	; (c4c30 <module_user_init_hook+0x60>)
   c4c14:	2100      	movs	r1, #0
   c4c16:	f7ff bdad 	b.w	c4774 <system_ctrl_set_app_request_handler>
   c4c1a:	bf00      	nop
   c4c1c:	000c4afd 	.word	0x000c4afd
   c4c20:	2003f400 	.word	0x2003f400
   c4c24:	9a271c1e 	.word	0x9a271c1e
   c4c28:	2003e710 	.word	0x2003e710
   c4c2c:	00000000 	.word	0x00000000
   c4c30:	000c4b99 	.word	0x000c4b99

000c4c34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c4c34:	4770      	bx	lr

000c4c36 <_ZN9IPAddressD0Ev>:
   c4c36:	b510      	push	{r4, lr}
   c4c38:	2118      	movs	r1, #24
   c4c3a:	4604      	mov	r4, r0
   c4c3c:	f7ef ff65 	bl	b4b0a <_ZdlPvj>
   c4c40:	4620      	mov	r0, r4
   c4c42:	bd10      	pop	{r4, pc}

000c4c44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c4c46:	7d03      	ldrb	r3, [r0, #20]
   c4c48:	2b06      	cmp	r3, #6
{
   c4c4a:	b08d      	sub	sp, #52	; 0x34
   c4c4c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4c4e:	f100 0704 	add.w	r7, r0, #4
   c4c52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c4c56:	d012      	beq.n	c4c7e <_ZNK9IPAddress7printToER5Print+0x3a>
   c4c58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c4c5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c4c60:	220a      	movs	r2, #10
   c4c62:	4630      	mov	r0, r6
   c4c64:	f7ff fedf 	bl	c4a26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c4c68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c4c6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c4c6c:	d019      	beq.n	c4ca2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c4c6e:	2c00      	cmp	r4, #0
   c4c70:	d0f4      	beq.n	c4c5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c4c72:	212e      	movs	r1, #46	; 0x2e
   c4c74:	4630      	mov	r0, r6
   c4c76:	f7ff fec7 	bl	c4a08 <_ZN5Print5printEc>
   c4c7a:	4404      	add	r4, r0
   c4c7c:	e7ee      	b.n	c4c5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4c7e:	232f      	movs	r3, #47	; 0x2f
   c4c80:	466a      	mov	r2, sp
   c4c82:	4639      	mov	r1, r7
   c4c84:	200a      	movs	r0, #10
		buf[0] = 0;
   c4c86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c4c8a:	f7ff fcdb 	bl	c4644 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c4c8e:	4668      	mov	r0, sp
   c4c90:	f7ef fef4 	bl	b4a7c <strlen>
   c4c94:	6833      	ldr	r3, [r6, #0]
   c4c96:	4602      	mov	r2, r0
   c4c98:	68db      	ldr	r3, [r3, #12]
   c4c9a:	4669      	mov	r1, sp
   c4c9c:	4630      	mov	r0, r6
   c4c9e:	4798      	blx	r3
   c4ca0:	4604      	mov	r4, r0
    }
    return n;
}
   c4ca2:	4620      	mov	r0, r4
   c4ca4:	b00d      	add	sp, #52	; 0x34
   c4ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c4ca8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c4ca8:	b510      	push	{r4, lr}
   c4caa:	4b05      	ldr	r3, [pc, #20]	; (c4cc0 <_ZN9IPAddressC1Ev+0x18>)
   c4cac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c4cae:	2211      	movs	r2, #17
   c4cb0:	f840 3b04 	str.w	r3, [r0], #4
   c4cb4:	2100      	movs	r1, #0
   c4cb6:	f001 ffbd 	bl	c6c34 <memset>
}
   c4cba:	4620      	mov	r0, r4
   c4cbc:	bd10      	pop	{r4, pc}
   c4cbe:	bf00      	nop
   c4cc0:	000c9884 	.word	0x000c9884

000c4cc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c4cc4:	4603      	mov	r3, r0
   c4cc6:	4a07      	ldr	r2, [pc, #28]	; (c4ce4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c4cc8:	b510      	push	{r4, lr}
   c4cca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c4cce:	f101 0210 	add.w	r2, r1, #16
   c4cd2:	f851 4b04 	ldr.w	r4, [r1], #4
   c4cd6:	f843 4b04 	str.w	r4, [r3], #4
   c4cda:	4291      	cmp	r1, r2
   c4cdc:	d1f9      	bne.n	c4cd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c4cde:	780a      	ldrb	r2, [r1, #0]
   c4ce0:	701a      	strb	r2, [r3, #0]
}
   c4ce2:	bd10      	pop	{r4, pc}
   c4ce4:	000c9884 	.word	0x000c9884

000c4ce8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c4ce8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c4cea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c4cee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c4cf2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c4cf6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c4cfa:	2304      	movs	r3, #4
   c4cfc:	6041      	str	r1, [r0, #4]
   c4cfe:	7503      	strb	r3, [r0, #20]
}
   c4d00:	bd10      	pop	{r4, pc}
	...

000c4d04 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c4d04:	b507      	push	{r0, r1, r2, lr}
   c4d06:	4b06      	ldr	r3, [pc, #24]	; (c4d20 <_ZN9IPAddressC1EPKh+0x1c>)
   c4d08:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c4d0a:	78cb      	ldrb	r3, [r1, #3]
   c4d0c:	9300      	str	r3, [sp, #0]
   c4d0e:	788b      	ldrb	r3, [r1, #2]
   c4d10:	784a      	ldrb	r2, [r1, #1]
   c4d12:	7809      	ldrb	r1, [r1, #0]
   c4d14:	f7ff ffe8 	bl	c4ce8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c4d18:	b003      	add	sp, #12
   c4d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   c4d1e:	bf00      	nop
   c4d20:	000c9884 	.word	0x000c9884

000c4d24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c4d24:	7441      	strb	r1, [r0, #17]
}
   c4d26:	4770      	bx	lr

000c4d28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4d28:	4770      	bx	lr

000c4d2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c4d2a:	4770      	bx	lr

000c4d2c <_ZN9USBSerial4readEv>:
{
   c4d2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c4d2e:	2100      	movs	r1, #0
   c4d30:	7c00      	ldrb	r0, [r0, #16]
   c4d32:	f7ff fce7 	bl	c4704 <HAL_USB_USART_Receive_Data>
}
   c4d36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4d3a:	bd08      	pop	{r3, pc}

000c4d3c <_ZN9USBSerial4peekEv>:
{
   c4d3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c4d3e:	2101      	movs	r1, #1
   c4d40:	7c00      	ldrb	r0, [r0, #16]
   c4d42:	f7ff fcdf 	bl	c4704 <HAL_USB_USART_Receive_Data>
}
   c4d46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4d4a:	bd08      	pop	{r3, pc}

000c4d4c <_ZN9USBSerial17availableForWriteEv>:
{
   c4d4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c4d4e:	7c00      	ldrb	r0, [r0, #16]
   c4d50:	f7ff fcd0 	bl	c46f4 <HAL_USB_USART_Available_Data_For_Write>
}
   c4d54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4d58:	bd08      	pop	{r3, pc}

000c4d5a <_ZN9USBSerial9availableEv>:
{
   c4d5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c4d5c:	7c00      	ldrb	r0, [r0, #16]
   c4d5e:	f7ff fcc1 	bl	c46e4 <HAL_USB_USART_Available_Data>
}
   c4d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4d66:	bd08      	pop	{r3, pc}

000c4d68 <_ZN9USBSerial5writeEh>:
{
   c4d68:	b513      	push	{r0, r1, r4, lr}
   c4d6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c4d6c:	7c00      	ldrb	r0, [r0, #16]
{
   c4d6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c4d70:	f7ff fcc0 	bl	c46f4 <HAL_USB_USART_Available_Data_For_Write>
   c4d74:	2800      	cmp	r0, #0
   c4d76:	9901      	ldr	r1, [sp, #4]
   c4d78:	dc01      	bgt.n	c4d7e <_ZN9USBSerial5writeEh+0x16>
   c4d7a:	7c60      	ldrb	r0, [r4, #17]
   c4d7c:	b120      	cbz	r0, c4d88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c4d7e:	7c20      	ldrb	r0, [r4, #16]
   c4d80:	f7ff fcc8 	bl	c4714 <HAL_USB_USART_Send_Data>
   c4d84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c4d88:	b002      	add	sp, #8
   c4d8a:	bd10      	pop	{r4, pc}

000c4d8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c4d8c:	7c00      	ldrb	r0, [r0, #16]
   c4d8e:	f7ff bcc9 	b.w	c4724 <HAL_USB_USART_Flush_Data>

000c4d92 <_ZN9USBSerialD0Ev>:
   c4d92:	b510      	push	{r4, lr}
   c4d94:	2114      	movs	r1, #20
   c4d96:	4604      	mov	r4, r0
   c4d98:	f7ef feb7 	bl	b4b0a <_ZdlPvj>
   c4d9c:	4620      	mov	r0, r4
   c4d9e:	bd10      	pop	{r4, pc}

000c4da0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c4da0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c4da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c4da6:	4604      	mov	r4, r0
   c4da8:	4608      	mov	r0, r1
   c4daa:	2100      	movs	r1, #0
   c4dac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c4db0:	4b04      	ldr	r3, [pc, #16]	; (c4dc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c4db2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c4db4:	2301      	movs	r3, #1
  _serial = serial;
   c4db6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c4db8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c4dba:	4611      	mov	r1, r2
   c4dbc:	f7ff fc82 	bl	c46c4 <HAL_USB_USART_Init>
}
   c4dc0:	4620      	mov	r0, r4
   c4dc2:	bd10      	pop	{r4, pc}
   c4dc4:	000c9898 	.word	0x000c9898

000c4dc8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c4dc8:	7c00      	ldrb	r0, [r0, #16]
   c4dca:	2200      	movs	r2, #0
   c4dcc:	f7ff bc82 	b.w	c46d4 <HAL_USB_USART_Begin>

000c4dd0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c4dd0:	7c00      	ldrb	r0, [r0, #16]
   c4dd2:	f7ff bcaf 	b.w	c4734 <HAL_USB_USART_Is_Connected>

000c4dd6 <_Z19acquireSerialBufferv>:
{
   c4dd6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c4dd8:	2214      	movs	r2, #20
{
   c4dda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c4ddc:	2100      	movs	r1, #0
   c4dde:	f001 ff29 	bl	c6c34 <memset>
}
   c4de2:	4620      	mov	r0, r4
   c4de4:	bd10      	pop	{r4, pc}
	...

000c4de8 <_Z16_fetch_usbserialv>:
{
   c4de8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4dea:	4c0f      	ldr	r4, [pc, #60]	; (c4e28 <_Z16_fetch_usbserialv+0x40>)
{
   c4dec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c4dee:	a803      	add	r0, sp, #12
   c4df0:	f7ff fff1 	bl	c4dd6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c4df4:	7821      	ldrb	r1, [r4, #0]
   c4df6:	f3bf 8f5b 	dmb	ish
   c4dfa:	f011 0101 	ands.w	r1, r1, #1
   c4dfe:	d10f      	bne.n	c4e20 <_Z16_fetch_usbserialv+0x38>
   c4e00:	4620      	mov	r0, r4
   c4e02:	9101      	str	r1, [sp, #4]
   c4e04:	f7ef fe90 	bl	b4b28 <__cxa_guard_acquire>
   c4e08:	9901      	ldr	r1, [sp, #4]
   c4e0a:	b148      	cbz	r0, c4e20 <_Z16_fetch_usbserialv+0x38>
   c4e0c:	aa03      	add	r2, sp, #12
   c4e0e:	4807      	ldr	r0, [pc, #28]	; (c4e2c <_Z16_fetch_usbserialv+0x44>)
   c4e10:	f7ff ffc6 	bl	c4da0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c4e14:	4620      	mov	r0, r4
   c4e16:	f7ef fe8c 	bl	b4b32 <__cxa_guard_release>
   c4e1a:	4805      	ldr	r0, [pc, #20]	; (c4e30 <_Z16_fetch_usbserialv+0x48>)
   c4e1c:	f001 feb8 	bl	c6b90 <atexit>
	return _usbserial;
}
   c4e20:	4802      	ldr	r0, [pc, #8]	; (c4e2c <_Z16_fetch_usbserialv+0x44>)
   c4e22:	b008      	add	sp, #32
   c4e24:	bd10      	pop	{r4, pc}
   c4e26:	bf00      	nop
   c4e28:	2003e718 	.word	0x2003e718
   c4e2c:	2003e71c 	.word	0x2003e71c
   c4e30:	000c4d29 	.word	0x000c4d29

000c4e34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c4e34:	4770      	bx	lr

000c4e36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c4e36:	7441      	strb	r1, [r0, #17]
}
   c4e38:	4770      	bx	lr

000c4e3a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c4e3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c4e3c:	7c00      	ldrb	r0, [r0, #16]
   c4e3e:	f7ff fc31 	bl	c46a4 <hal_usart_available_data_for_write>
}
   c4e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4e46:	bd08      	pop	{r3, pc}

000c4e48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c4e48:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c4e4a:	7c00      	ldrb	r0, [r0, #16]
   c4e4c:	f7ff fc0a 	bl	c4664 <hal_usart_available>
}
   c4e50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c4e54:	bd08      	pop	{r3, pc}

000c4e56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c4e56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c4e58:	7c00      	ldrb	r0, [r0, #16]
   c4e5a:	f7ff fc13 	bl	c4684 <hal_usart_peek>
}
   c4e5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4e62:	bd08      	pop	{r3, pc}

000c4e64 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c4e64:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c4e66:	7c00      	ldrb	r0, [r0, #16]
   c4e68:	f7ff fc04 	bl	c4674 <hal_usart_read>
}
   c4e6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c4e70:	bd08      	pop	{r3, pc}

000c4e72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c4e72:	7c00      	ldrb	r0, [r0, #16]
   c4e74:	f7ff bc0e 	b.w	c4694 <hal_usart_flush>

000c4e78 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c4e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4e7a:	7c45      	ldrb	r5, [r0, #17]
{
   c4e7c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4e7e:	b12d      	cbz	r5, c4e8c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c4e80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c4e82:	b003      	add	sp, #12
   c4e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c4e88:	f7ff bbe4 	b.w	c4654 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c4e8c:	7c00      	ldrb	r0, [r0, #16]
   c4e8e:	9101      	str	r1, [sp, #4]
   c4e90:	f7ff fc08 	bl	c46a4 <hal_usart_available_data_for_write>
   c4e94:	2800      	cmp	r0, #0
   c4e96:	9901      	ldr	r1, [sp, #4]
   c4e98:	dcf2      	bgt.n	c4e80 <_ZN11USARTSerial5writeEh+0x8>
}
   c4e9a:	4628      	mov	r0, r5
   c4e9c:	b003      	add	sp, #12
   c4e9e:	bd30      	pop	{r4, r5, pc}

000c4ea0 <_ZN11USARTSerialD0Ev>:
   c4ea0:	b510      	push	{r4, lr}
   c4ea2:	2114      	movs	r1, #20
   c4ea4:	4604      	mov	r4, r0
   c4ea6:	f7ef fe30 	bl	b4b0a <_ZdlPvj>
   c4eaa:	4620      	mov	r0, r4
   c4eac:	bd10      	pop	{r4, pc}
	...

000c4eb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c4eb0:	b510      	push	{r4, lr}
   c4eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c4eb6:	4604      	mov	r4, r0
   c4eb8:	4608      	mov	r0, r1
   c4eba:	4611      	mov	r1, r2
   c4ebc:	2200      	movs	r2, #0
   c4ebe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c4ec2:	4b04      	ldr	r3, [pc, #16]	; (c4ed4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c4ec4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c4ec6:	2301      	movs	r3, #1
  _serial = serial;
   c4ec8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c4eca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c4ecc:	f7ff fbf2 	bl	c46b4 <hal_usart_init_ex>
}
   c4ed0:	4620      	mov	r0, r4
   c4ed2:	bd10      	pop	{r4, pc}
   c4ed4:	000c98c8 	.word	0x000c98c8

000c4ed8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   c4ed8:	2200      	movs	r2, #0
   c4eda:	6840      	ldr	r0, [r0, #4]
   c4edc:	4611      	mov	r1, r2
   c4ede:	f7ff bc75 	b.w	c47cc <network_ready>

000c4ee2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c4ee2:	2200      	movs	r2, #0
   c4ee4:	6840      	ldr	r0, [r0, #4]
   c4ee6:	4611      	mov	r1, r2
   c4ee8:	f7ff bc90 	b.w	c480c <network_listening>

000c4eec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c4eec:	2200      	movs	r2, #0
   c4eee:	6840      	ldr	r0, [r0, #4]
   c4ef0:	4611      	mov	r1, r2
   c4ef2:	f7ff bc9b 	b.w	c482c <network_get_listen_timeout>

000c4ef6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c4ef6:	6840      	ldr	r0, [r0, #4]
   c4ef8:	2200      	movs	r2, #0
   c4efa:	f7ff bc8f 	b.w	c481c <network_set_listen_timeout>

000c4efe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c4efe:	6840      	ldr	r0, [r0, #4]
   c4f00:	2200      	movs	r2, #0
   c4f02:	f081 0101 	eor.w	r1, r1, #1
   c4f06:	f7ff bc79 	b.w	c47fc <network_listen>

000c4f0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c4f0a:	2300      	movs	r3, #0
   c4f0c:	6840      	ldr	r0, [r0, #4]
   c4f0e:	461a      	mov	r2, r3
   c4f10:	4619      	mov	r1, r3
   c4f12:	f7ff bc6b 	b.w	c47ec <network_off>

000c4f16 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c4f16:	2300      	movs	r3, #0
   c4f18:	6840      	ldr	r0, [r0, #4]
   c4f1a:	461a      	mov	r2, r3
   c4f1c:	4619      	mov	r1, r3
   c4f1e:	f7ff bc5d 	b.w	c47dc <network_on>

000c4f22 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c4f22:	2200      	movs	r2, #0
   c4f24:	6840      	ldr	r0, [r0, #4]
   c4f26:	4611      	mov	r1, r2
   c4f28:	f7ff bc40 	b.w	c47ac <network_connecting>

000c4f2c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c4f2c:	6840      	ldr	r0, [r0, #4]
   c4f2e:	2200      	movs	r2, #0
   c4f30:	2102      	movs	r1, #2
   c4f32:	f7ff bc43 	b.w	c47bc <network_disconnect>

000c4f36 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c4f36:	2300      	movs	r3, #0
   c4f38:	6840      	ldr	r0, [r0, #4]
   c4f3a:	461a      	mov	r2, r3
   c4f3c:	f7ff bc2e 	b.w	c479c <network_connect>

000c4f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   c4f40:	4b02      	ldr	r3, [pc, #8]	; (c4f4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   c4f42:	2204      	movs	r2, #4
   c4f44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   c4f46:	4a02      	ldr	r2, [pc, #8]	; (c4f50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   c4f48:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   c4f4a:	4770      	bx	lr
   c4f4c:	2003e730 	.word	0x2003e730
   c4f50:	000c98f8 	.word	0x000c98f8

000c4f54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c4f54:	2300      	movs	r3, #0
   c4f56:	6840      	ldr	r0, [r0, #4]
   c4f58:	461a      	mov	r2, r3
   c4f5a:	f7ff bc1f 	b.w	c479c <network_connect>

000c4f5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c4f5e:	6840      	ldr	r0, [r0, #4]
   c4f60:	2200      	movs	r2, #0
   c4f62:	2102      	movs	r1, #2
   c4f64:	f7ff bc2a 	b.w	c47bc <network_disconnect>

000c4f68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c4f68:	2200      	movs	r2, #0
   c4f6a:	6840      	ldr	r0, [r0, #4]
   c4f6c:	4611      	mov	r1, r2
   c4f6e:	f7ff bc1d 	b.w	c47ac <network_connecting>

000c4f72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c4f72:	2200      	movs	r2, #0
   c4f74:	6840      	ldr	r0, [r0, #4]
   c4f76:	4611      	mov	r1, r2
   c4f78:	f7ff bc28 	b.w	c47cc <network_ready>

000c4f7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c4f7c:	2300      	movs	r3, #0
   c4f7e:	6840      	ldr	r0, [r0, #4]
   c4f80:	461a      	mov	r2, r3
   c4f82:	4619      	mov	r1, r3
   c4f84:	f7ff bc2a 	b.w	c47dc <network_on>

000c4f88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c4f88:	2300      	movs	r3, #0
   c4f8a:	6840      	ldr	r0, [r0, #4]
   c4f8c:	461a      	mov	r2, r3
   c4f8e:	4619      	mov	r1, r3
   c4f90:	f7ff bc2c 	b.w	c47ec <network_off>

000c4f94 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c4f94:	6840      	ldr	r0, [r0, #4]
   c4f96:	2100      	movs	r1, #0
   c4f98:	f7ff bc50 	b.w	c483c <network_is_on>

000c4f9c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c4f9c:	6840      	ldr	r0, [r0, #4]
   c4f9e:	2100      	movs	r1, #0
   c4fa0:	f7ff bc54 	b.w	c484c <network_is_off>

000c4fa4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c4fa4:	6840      	ldr	r0, [r0, #4]
   c4fa6:	2200      	movs	r2, #0
   c4fa8:	f081 0101 	eor.w	r1, r1, #1
   c4fac:	f7ff bc26 	b.w	c47fc <network_listen>

000c4fb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c4fb0:	6840      	ldr	r0, [r0, #4]
   c4fb2:	2200      	movs	r2, #0
   c4fb4:	f7ff bc32 	b.w	c481c <network_set_listen_timeout>

000c4fb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c4fb8:	2200      	movs	r2, #0
   c4fba:	6840      	ldr	r0, [r0, #4]
   c4fbc:	4611      	mov	r1, r2
   c4fbe:	f7ff bc35 	b.w	c482c <network_get_listen_timeout>

000c4fc2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c4fc2:	2200      	movs	r2, #0
   c4fc4:	6840      	ldr	r0, [r0, #4]
   c4fc6:	4611      	mov	r1, r2
   c4fc8:	f7ff bc20 	b.w	c480c <network_listening>

000c4fcc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c4fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c4fd0:	b095      	sub	sp, #84	; 0x54
   c4fd2:	4614      	mov	r4, r2
   c4fd4:	460d      	mov	r5, r1
   c4fd6:	4607      	mov	r7, r0
    IPAddress addr;
   c4fd8:	f7ff fe66 	bl	c4ca8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c4fdc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c4fde:	221c      	movs	r2, #28
   c4fe0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c4fe2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c4fe4:	f001 fe26 	bl	c6c34 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c4fe8:	2340      	movs	r3, #64	; 0x40
   c4fea:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c4fec:	4620      	mov	r0, r4
   c4fee:	466b      	mov	r3, sp
   c4ff0:	aa0c      	add	r2, sp, #48	; 0x30
   c4ff2:	2100      	movs	r1, #0
   c4ff4:	f7ff faf6 	bl	c45e4 <netdb_getaddrinfo>
    if (!r) {
   c4ff8:	4604      	mov	r4, r0
   c4ffa:	2800      	cmp	r0, #0
   c4ffc:	d14b      	bne.n	c5096 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c4ffe:	4602      	mov	r2, r0
   c5000:	2101      	movs	r1, #1
   c5002:	6868      	ldr	r0, [r5, #4]
   c5004:	f7ff fbe2 	bl	c47cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c5008:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c500a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c500c:	4622      	mov	r2, r4
   c500e:	6868      	ldr	r0, [r5, #4]
   c5010:	f7ff fbdc 	bl	c47cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c5014:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c5016:	4681      	mov	r9, r0
        bool ok = false;
   c5018:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c501a:	2e00      	cmp	r6, #0
   c501c:	d03b      	beq.n	c5096 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c501e:	2900      	cmp	r1, #0
   c5020:	d139      	bne.n	c5096 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c5022:	6873      	ldr	r3, [r6, #4]
   c5024:	2b02      	cmp	r3, #2
   c5026:	d003      	beq.n	c5030 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c5028:	2b0a      	cmp	r3, #10
   c502a:	d011      	beq.n	c5050 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c502c:	69f6      	ldr	r6, [r6, #28]
   c502e:	e7f4      	b.n	c501a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c5030:	f1b8 0f00 	cmp.w	r8, #0
   c5034:	d0fa      	beq.n	c502c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c5036:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c5038:	a806      	add	r0, sp, #24
   c503a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c503c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c503e:	f7ff fe61 	bl	c4d04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c5042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c5044:	1d3c      	adds	r4, r7, #4
   c5046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c5048:	682b      	ldr	r3, [r5, #0]
   c504a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c504c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c504e:	e7ed      	b.n	c502c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c5050:	f1b9 0f00 	cmp.w	r9, #0
   c5054:	d0ea      	beq.n	c502c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c5056:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c5058:	2210      	movs	r2, #16
   c505a:	a801      	add	r0, sp, #4
   c505c:	f001 fdea 	bl	c6c34 <memset>
                    a.v = 6;
   c5060:	2306      	movs	r3, #6
   c5062:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c5066:	ad01      	add	r5, sp, #4
   c5068:	f104 0308 	add.w	r3, r4, #8
   c506c:	3418      	adds	r4, #24
   c506e:	6818      	ldr	r0, [r3, #0]
   c5070:	6859      	ldr	r1, [r3, #4]
   c5072:	462a      	mov	r2, r5
   c5074:	c203      	stmia	r2!, {r0, r1}
   c5076:	3308      	adds	r3, #8
   c5078:	42a3      	cmp	r3, r4
   c507a:	4615      	mov	r5, r2
   c507c:	d1f7      	bne.n	c506e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c507e:	a901      	add	r1, sp, #4
   c5080:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c5082:	ad07      	add	r5, sp, #28
   c5084:	f7ff fe1e 	bl	c4cc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c5088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c508a:	1d3c      	adds	r4, r7, #4
   c508c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c508e:	682b      	ldr	r3, [r5, #0]
   c5090:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c5092:	4649      	mov	r1, r9
   c5094:	e7ca      	b.n	c502c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c5096:	9800      	ldr	r0, [sp, #0]
   c5098:	f7ff fa9c 	bl	c45d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c509c:	4638      	mov	r0, r7
   c509e:	b015      	add	sp, #84	; 0x54
   c50a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c50a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c50a4:	4b02      	ldr	r3, [pc, #8]	; (c50b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c50a6:	4a03      	ldr	r2, [pc, #12]	; (c50b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c50a8:	601a      	str	r2, [r3, #0]
   c50aa:	2200      	movs	r2, #0
   c50ac:	605a      	str	r2, [r3, #4]

} // spark
   c50ae:	4770      	bx	lr
   c50b0:	2003e738 	.word	0x2003e738
   c50b4:	000c9934 	.word	0x000c9934

000c50b8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c50b8:	4770      	bx	lr
	...

000c50bc <_Z20acquireSerial1Bufferv>:
{
   c50bc:	b538      	push	{r3, r4, r5, lr}
   c50be:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c50c0:	2514      	movs	r5, #20
   c50c2:	462a      	mov	r2, r5
   c50c4:	2100      	movs	r1, #0
   c50c6:	f001 fdb5 	bl	c6c34 <memset>
   c50ca:	8025      	strh	r5, [r4, #0]
   c50cc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c50ce:	4907      	ldr	r1, [pc, #28]	; (c50ec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c50d0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c50d2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c50d4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c50d6:	f000 f82f 	bl	c5138 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c50da:	4904      	ldr	r1, [pc, #16]	; (c50ec <_Z20acquireSerial1Bufferv+0x30>)
    };
   c50dc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c50de:	4628      	mov	r0, r5
   c50e0:	f000 f82a 	bl	c5138 <_ZnajRKSt9nothrow_t>
    };
   c50e4:	60e0      	str	r0, [r4, #12]
}
   c50e6:	4620      	mov	r0, r4
   c50e8:	bd38      	pop	{r3, r4, r5, pc}
   c50ea:	bf00      	nop
   c50ec:	000c9968 	.word	0x000c9968

000c50f0 <_Z22__fetch_global_Serial1v>:
{
   c50f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c50f2:	4d0e      	ldr	r5, [pc, #56]	; (c512c <_Z22__fetch_global_Serial1v+0x3c>)
   c50f4:	7829      	ldrb	r1, [r5, #0]
   c50f6:	f3bf 8f5b 	dmb	ish
   c50fa:	f011 0401 	ands.w	r4, r1, #1
{
   c50fe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c5100:	d111      	bne.n	c5126 <_Z22__fetch_global_Serial1v+0x36>
   c5102:	4628      	mov	r0, r5
   c5104:	f7ef fd10 	bl	b4b28 <__cxa_guard_acquire>
   c5108:	b168      	cbz	r0, c5126 <_Z22__fetch_global_Serial1v+0x36>
   c510a:	a801      	add	r0, sp, #4
   c510c:	f7ff ffd6 	bl	c50bc <_Z20acquireSerial1Bufferv>
   c5110:	aa01      	add	r2, sp, #4
   c5112:	4621      	mov	r1, r4
   c5114:	4806      	ldr	r0, [pc, #24]	; (c5130 <_Z22__fetch_global_Serial1v+0x40>)
   c5116:	f7ff fecb 	bl	c4eb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c511a:	4628      	mov	r0, r5
   c511c:	f7ef fd09 	bl	b4b32 <__cxa_guard_release>
   c5120:	4804      	ldr	r0, [pc, #16]	; (c5134 <_Z22__fetch_global_Serial1v+0x44>)
   c5122:	f001 fd35 	bl	c6b90 <atexit>
    return serial1;
}
   c5126:	4802      	ldr	r0, [pc, #8]	; (c5130 <_Z22__fetch_global_Serial1v+0x40>)
   c5128:	b007      	add	sp, #28
   c512a:	bd30      	pop	{r4, r5, pc}
   c512c:	2003e740 	.word	0x2003e740
   c5130:	2003e744 	.word	0x2003e744
   c5134:	000c50b9 	.word	0x000c50b9

000c5138 <_ZnajRKSt9nothrow_t>:
   c5138:	f7ef bce3 	b.w	b4b02 <_Znaj>
   c513c:	0000      	movs	r0, r0
	...

000c5140 <floor>:
   c5140:	ec51 0b10 	vmov	r0, r1, d0
   c5144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c5146:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c514a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   c514e:	2d13      	cmp	r5, #19
   c5150:	ee10 6a10 	vmov	r6, s0
   c5154:	460c      	mov	r4, r1
   c5156:	dc30      	bgt.n	c51ba <floor+0x7a>
   c5158:	2d00      	cmp	r5, #0
   c515a:	db1e      	blt.n	c519a <floor+0x5a>
   c515c:	4f38      	ldr	r7, [pc, #224]	; (c5240 <floor+0x100>)
   c515e:	412f      	asrs	r7, r5
   c5160:	ea01 0307 	and.w	r3, r1, r7
   c5164:	4303      	orrs	r3, r0
   c5166:	d02d      	beq.n	c51c4 <floor+0x84>
   c5168:	a333      	add	r3, pc, #204	; (adr r3, c5238 <floor+0xf8>)
   c516a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c516e:	f7ee ff5d 	bl	b402c <__adddf3>
   c5172:	2200      	movs	r2, #0
   c5174:	2300      	movs	r3, #0
   c5176:	f7ef fb9f 	bl	b48b8 <__aeabi_dcmpgt>
   c517a:	b148      	cbz	r0, c5190 <floor+0x50>
   c517c:	2c00      	cmp	r4, #0
   c517e:	da04      	bge.n	c518a <floor+0x4a>
   c5180:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   c5184:	fa43 f505 	asr.w	r5, r3, r5
   c5188:	442c      	add	r4, r5
   c518a:	ea24 0407 	bic.w	r4, r4, r7
   c518e:	2600      	movs	r6, #0
   c5190:	4623      	mov	r3, r4
   c5192:	4632      	mov	r2, r6
   c5194:	ec43 2b10 	vmov	d0, r2, r3
   c5198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c519a:	a327      	add	r3, pc, #156	; (adr r3, c5238 <floor+0xf8>)
   c519c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c51a0:	f7ee ff44 	bl	b402c <__adddf3>
   c51a4:	2200      	movs	r2, #0
   c51a6:	2300      	movs	r3, #0
   c51a8:	f7ef fb86 	bl	b48b8 <__aeabi_dcmpgt>
   c51ac:	2800      	cmp	r0, #0
   c51ae:	d0ef      	beq.n	c5190 <floor+0x50>
   c51b0:	2c00      	cmp	r4, #0
   c51b2:	db29      	blt.n	c5208 <floor+0xc8>
   c51b4:	2600      	movs	r6, #0
   c51b6:	4634      	mov	r4, r6
   c51b8:	e7ea      	b.n	c5190 <floor+0x50>
   c51ba:	2d33      	cmp	r5, #51	; 0x33
   c51bc:	dd05      	ble.n	c51ca <floor+0x8a>
   c51be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   c51c2:	d019      	beq.n	c51f8 <floor+0xb8>
   c51c4:	ec41 0b10 	vmov	d0, r0, r1
   c51c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c51ca:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   c51ce:	f04f 37ff 	mov.w	r7, #4294967295
   c51d2:	40df      	lsrs	r7, r3
   c51d4:	4207      	tst	r7, r0
   c51d6:	d0f5      	beq.n	c51c4 <floor+0x84>
   c51d8:	a317      	add	r3, pc, #92	; (adr r3, c5238 <floor+0xf8>)
   c51da:	e9d3 2300 	ldrd	r2, r3, [r3]
   c51de:	f7ee ff25 	bl	b402c <__adddf3>
   c51e2:	2200      	movs	r2, #0
   c51e4:	2300      	movs	r3, #0
   c51e6:	f7ef fb67 	bl	b48b8 <__aeabi_dcmpgt>
   c51ea:	2800      	cmp	r0, #0
   c51ec:	d0d0      	beq.n	c5190 <floor+0x50>
   c51ee:	2c00      	cmp	r4, #0
   c51f0:	db13      	blt.n	c521a <floor+0xda>
   c51f2:	ea26 0607 	bic.w	r6, r6, r7
   c51f6:	e7cb      	b.n	c5190 <floor+0x50>
   c51f8:	ee10 2a10 	vmov	r2, s0
   c51fc:	460b      	mov	r3, r1
   c51fe:	f7ee ff15 	bl	b402c <__adddf3>
   c5202:	ec41 0b10 	vmov	d0, r0, r1
   c5206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5208:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   c520c:	4a0d      	ldr	r2, [pc, #52]	; (c5244 <floor+0x104>)
   c520e:	431e      	orrs	r6, r3
   c5210:	2e00      	cmp	r6, #0
   c5212:	bf18      	it	ne
   c5214:	4614      	movne	r4, r2
   c5216:	2600      	movs	r6, #0
   c5218:	e7ba      	b.n	c5190 <floor+0x50>
   c521a:	2d14      	cmp	r5, #20
   c521c:	d008      	beq.n	c5230 <floor+0xf0>
   c521e:	2301      	movs	r3, #1
   c5220:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   c5224:	fa03 f505 	lsl.w	r5, r3, r5
   c5228:	19ae      	adds	r6, r5, r6
   c522a:	bf28      	it	cs
   c522c:	18e4      	addcs	r4, r4, r3
   c522e:	e7e0      	b.n	c51f2 <floor+0xb2>
   c5230:	3401      	adds	r4, #1
   c5232:	e7de      	b.n	c51f2 <floor+0xb2>
   c5234:	f3af 8000 	nop.w
   c5238:	8800759c 	.word	0x8800759c
   c523c:	7e37e43c 	.word	0x7e37e43c
   c5240:	000fffff 	.word	0x000fffff
   c5244:	bff00000 	.word	0xbff00000

000c5248 <frexp>:
   c5248:	ec53 2b10 	vmov	r2, r3, d0
   c524c:	b570      	push	{r4, r5, r6, lr}
   c524e:	4e16      	ldr	r6, [pc, #88]	; (c52a8 <frexp+0x60>)
   c5250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   c5254:	2500      	movs	r5, #0
   c5256:	42b1      	cmp	r1, r6
   c5258:	4604      	mov	r4, r0
   c525a:	6005      	str	r5, [r0, #0]
   c525c:	dc21      	bgt.n	c52a2 <frexp+0x5a>
   c525e:	ee10 6a10 	vmov	r6, s0
   c5262:	430e      	orrs	r6, r1
   c5264:	d01d      	beq.n	c52a2 <frexp+0x5a>
   c5266:	4e11      	ldr	r6, [pc, #68]	; (c52ac <frexp+0x64>)
   c5268:	401e      	ands	r6, r3
   c526a:	4618      	mov	r0, r3
   c526c:	b966      	cbnz	r6, c5288 <frexp+0x40>
   c526e:	4619      	mov	r1, r3
   c5270:	2200      	movs	r2, #0
   c5272:	ee10 0a10 	vmov	r0, s0
   c5276:	4b0e      	ldr	r3, [pc, #56]	; (c52b0 <frexp+0x68>)
   c5278:	f7ef f88e 	bl	b4398 <__aeabi_dmul>
   c527c:	f06f 0535 	mvn.w	r5, #53	; 0x35
   c5280:	4602      	mov	r2, r0
   c5282:	4608      	mov	r0, r1
   c5284:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c5288:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
   c528c:	1509      	asrs	r1, r1, #20
   c528e:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
   c5292:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   c5296:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   c529a:	4429      	add	r1, r5
   c529c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   c52a0:	6021      	str	r1, [r4, #0]
   c52a2:	ec43 2b10 	vmov	d0, r2, r3
   c52a6:	bd70      	pop	{r4, r5, r6, pc}
   c52a8:	7fefffff 	.word	0x7fefffff
   c52ac:	7ff00000 	.word	0x7ff00000
   c52b0:	43500000 	.word	0x43500000

000c52b4 <round>:
   c52b4:	ec53 2b10 	vmov	r2, r3, d0
   c52b8:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   c52bc:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   c52c0:	2913      	cmp	r1, #19
   c52c2:	b510      	push	{r4, lr}
   c52c4:	ee10 0a10 	vmov	r0, s0
   c52c8:	469e      	mov	lr, r3
   c52ca:	dc22      	bgt.n	c5312 <round+0x5e>
   c52cc:	2900      	cmp	r1, #0
   c52ce:	db09      	blt.n	c52e4 <round+0x30>
   c52d0:	4c1f      	ldr	r4, [pc, #124]	; (c5350 <round+0x9c>)
   c52d2:	fa44 fc01 	asr.w	ip, r4, r1
   c52d6:	ea03 040c 	and.w	r4, r3, ip
   c52da:	4320      	orrs	r0, r4
   c52dc:	d110      	bne.n	c5300 <round+0x4c>
   c52de:	ec43 2b10 	vmov	d0, r2, r3
   c52e2:	bd10      	pop	{r4, pc}
   c52e4:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   c52e8:	3101      	adds	r1, #1
   c52ea:	bf04      	itt	eq
   c52ec:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   c52f0:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   c52f4:	2000      	movs	r0, #0
   c52f6:	4673      	mov	r3, lr
   c52f8:	4602      	mov	r2, r0
   c52fa:	ec43 2b10 	vmov	d0, r2, r3
   c52fe:	bd10      	pop	{r4, pc}
   c5300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   c5304:	fa43 f101 	asr.w	r1, r3, r1
   c5308:	448e      	add	lr, r1
   c530a:	ea2e 0e0c 	bic.w	lr, lr, ip
   c530e:	2000      	movs	r0, #0
   c5310:	e7f1      	b.n	c52f6 <round+0x42>
   c5312:	2933      	cmp	r1, #51	; 0x33
   c5314:	dd08      	ble.n	c5328 <round+0x74>
   c5316:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   c531a:	d1e0      	bne.n	c52de <round+0x2a>
   c531c:	4619      	mov	r1, r3
   c531e:	f7ee fe85 	bl	b402c <__adddf3>
   c5322:	ec41 0b10 	vmov	d0, r0, r1
   c5326:	bd10      	pop	{r4, pc}
   c5328:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   c532c:	f04f 34ff 	mov.w	r4, #4294967295
   c5330:	fa24 fc0c 	lsr.w	ip, r4, ip
   c5334:	ea12 0f0c 	tst.w	r2, ip
   c5338:	d0d1      	beq.n	c52de <round+0x2a>
   c533a:	2301      	movs	r3, #1
   c533c:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   c5340:	fa03 f101 	lsl.w	r1, r3, r1
   c5344:	1840      	adds	r0, r0, r1
   c5346:	bf28      	it	cs
   c5348:	449e      	addcs	lr, r3
   c534a:	ea20 000c 	bic.w	r0, r0, ip
   c534e:	e7d2      	b.n	c52f6 <round+0x42>
   c5350:	000fffff 	.word	0x000fffff

000c5354 <ceilf>:
   c5354:	ee10 2a10 	vmov	r2, s0
   c5358:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c535c:	3b7f      	subs	r3, #127	; 0x7f
   c535e:	2b16      	cmp	r3, #22
   c5360:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c5364:	dc2f      	bgt.n	c53c6 <ceilf+0x72>
   c5366:	2b00      	cmp	r3, #0
   c5368:	db18      	blt.n	c539c <ceilf+0x48>
   c536a:	491a      	ldr	r1, [pc, #104]	; (c53d4 <ceilf+0x80>)
   c536c:	4119      	asrs	r1, r3
   c536e:	420a      	tst	r2, r1
   c5370:	d028      	beq.n	c53c4 <ceilf+0x70>
   c5372:	eddf 7a19 	vldr	s15, [pc, #100]	; c53d8 <ceilf+0x84>
   c5376:	ee70 7a27 	vadd.f32	s15, s0, s15
   c537a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5382:	dd1f      	ble.n	c53c4 <ceilf+0x70>
   c5384:	2a00      	cmp	r2, #0
   c5386:	dd04      	ble.n	c5392 <ceilf+0x3e>
   c5388:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c538c:	fa40 f303 	asr.w	r3, r0, r3
   c5390:	441a      	add	r2, r3
   c5392:	ea22 0301 	bic.w	r3, r2, r1
   c5396:	ee00 3a10 	vmov	s0, r3
   c539a:	4770      	bx	lr
   c539c:	eddf 7a0e 	vldr	s15, [pc, #56]	; c53d8 <ceilf+0x84>
   c53a0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c53a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c53a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c53ac:	dd0a      	ble.n	c53c4 <ceilf+0x70>
   c53ae:	2a00      	cmp	r2, #0
   c53b0:	db06      	blt.n	c53c0 <ceilf+0x6c>
   c53b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c53b6:	2900      	cmp	r1, #0
   c53b8:	bf18      	it	ne
   c53ba:	eeb0 0a67 	vmovne.f32	s0, s15
   c53be:	4770      	bx	lr
   c53c0:	ed9f 0a06 	vldr	s0, [pc, #24]	; c53dc <ceilf+0x88>
   c53c4:	4770      	bx	lr
   c53c6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c53ca:	d3fb      	bcc.n	c53c4 <ceilf+0x70>
   c53cc:	ee30 0a00 	vadd.f32	s0, s0, s0
   c53d0:	4770      	bx	lr
   c53d2:	bf00      	nop
   c53d4:	007fffff 	.word	0x007fffff
   c53d8:	7149f2ca 	.word	0x7149f2ca
   c53dc:	80000000 	.word	0x80000000

000c53e0 <cosf>:
   c53e0:	ee10 3a10 	vmov	r3, s0
   c53e4:	4a18      	ldr	r2, [pc, #96]	; (c5448 <cosf+0x68>)
   c53e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c53ea:	4293      	cmp	r3, r2
   c53ec:	dd1b      	ble.n	c5426 <cosf+0x46>
   c53ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c53f2:	db02      	blt.n	c53fa <cosf+0x1a>
   c53f4:	ee30 0a40 	vsub.f32	s0, s0, s0
   c53f8:	4770      	bx	lr
   c53fa:	b500      	push	{lr}
   c53fc:	b083      	sub	sp, #12
   c53fe:	4668      	mov	r0, sp
   c5400:	f000 fdf2 	bl	c5fe8 <__ieee754_rem_pio2f>
   c5404:	f000 0003 	and.w	r0, r0, #3
   c5408:	2801      	cmp	r0, #1
   c540a:	eddd 0a01 	vldr	s1, [sp, #4]
   c540e:	ed9d 0a00 	vldr	s0, [sp]
   c5412:	d00c      	beq.n	c542e <cosf+0x4e>
   c5414:	2802      	cmp	r0, #2
   c5416:	d012      	beq.n	c543e <cosf+0x5e>
   c5418:	b170      	cbz	r0, c5438 <cosf+0x58>
   c541a:	2001      	movs	r0, #1
   c541c:	f001 fad6 	bl	c69cc <__kernel_sinf>
   c5420:	b003      	add	sp, #12
   c5422:	f85d fb04 	ldr.w	pc, [sp], #4
   c5426:	eddf 0a09 	vldr	s1, [pc, #36]	; c544c <cosf+0x6c>
   c542a:	f000 bf13 	b.w	c6254 <__kernel_cosf>
   c542e:	f001 facd 	bl	c69cc <__kernel_sinf>
   c5432:	eeb1 0a40 	vneg.f32	s0, s0
   c5436:	e7f3      	b.n	c5420 <cosf+0x40>
   c5438:	f000 ff0c 	bl	c6254 <__kernel_cosf>
   c543c:	e7f0      	b.n	c5420 <cosf+0x40>
   c543e:	f000 ff09 	bl	c6254 <__kernel_cosf>
   c5442:	eeb1 0a40 	vneg.f32	s0, s0
   c5446:	e7eb      	b.n	c5420 <cosf+0x40>
   c5448:	3f490fd8 	.word	0x3f490fd8
   c544c:	00000000 	.word	0x00000000

000c5450 <floorf>:
   c5450:	ee10 2a10 	vmov	r2, s0
   c5454:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c5458:	3b7f      	subs	r3, #127	; 0x7f
   c545a:	2b16      	cmp	r3, #22
   c545c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c5460:	dc28      	bgt.n	c54b4 <floorf+0x64>
   c5462:	2b00      	cmp	r3, #0
   c5464:	db18      	blt.n	c5498 <floorf+0x48>
   c5466:	491a      	ldr	r1, [pc, #104]	; (c54d0 <floorf+0x80>)
   c5468:	4119      	asrs	r1, r3
   c546a:	420a      	tst	r2, r1
   c546c:	d021      	beq.n	c54b2 <floorf+0x62>
   c546e:	eddf 7a19 	vldr	s15, [pc, #100]	; c54d4 <floorf+0x84>
   c5472:	ee70 7a27 	vadd.f32	s15, s0, s15
   c5476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c547e:	dd18      	ble.n	c54b2 <floorf+0x62>
   c5480:	2a00      	cmp	r2, #0
   c5482:	da04      	bge.n	c548e <floorf+0x3e>
   c5484:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c5488:	fa40 f303 	asr.w	r3, r0, r3
   c548c:	441a      	add	r2, r3
   c548e:	ea22 0301 	bic.w	r3, r2, r1
   c5492:	ee00 3a10 	vmov	s0, r3
   c5496:	4770      	bx	lr
   c5498:	eddf 7a0e 	vldr	s15, [pc, #56]	; c54d4 <floorf+0x84>
   c549c:	ee70 7a27 	vadd.f32	s15, s0, s15
   c54a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c54a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c54a8:	dd03      	ble.n	c54b2 <floorf+0x62>
   c54aa:	2a00      	cmp	r2, #0
   c54ac:	db08      	blt.n	c54c0 <floorf+0x70>
   c54ae:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c54d8 <floorf+0x88>
   c54b2:	4770      	bx	lr
   c54b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c54b8:	d3fb      	bcc.n	c54b2 <floorf+0x62>
   c54ba:	ee30 0a00 	vadd.f32	s0, s0, s0
   c54be:	4770      	bx	lr
   c54c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c54c4:	2900      	cmp	r1, #0
   c54c6:	bf18      	it	ne
   c54c8:	eeb0 0a67 	vmovne.f32	s0, s15
   c54cc:	4770      	bx	lr
   c54ce:	bf00      	nop
   c54d0:	007fffff 	.word	0x007fffff
   c54d4:	7149f2ca 	.word	0x7149f2ca
   c54d8:	00000000 	.word	0x00000000

000c54dc <fmaxf>:
   c54dc:	b508      	push	{r3, lr}
   c54de:	ed2d 8b02 	vpush	{d8}
   c54e2:	eef0 8a40 	vmov.f32	s17, s0
   c54e6:	eeb0 8a60 	vmov.f32	s16, s1
   c54ea:	f000 f833 	bl	c5554 <__fpclassifyf>
   c54ee:	b920      	cbnz	r0, c54fa <fmaxf+0x1e>
   c54f0:	eeb0 0a48 	vmov.f32	s0, s16
   c54f4:	ecbd 8b02 	vpop	{d8}
   c54f8:	bd08      	pop	{r3, pc}
   c54fa:	eeb0 0a48 	vmov.f32	s0, s16
   c54fe:	f000 f829 	bl	c5554 <__fpclassifyf>
   c5502:	b120      	cbz	r0, c550e <fmaxf+0x32>
   c5504:	eef4 8ac8 	vcmpe.f32	s17, s16
   c5508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c550c:	ddf0      	ble.n	c54f0 <fmaxf+0x14>
   c550e:	eeb0 0a68 	vmov.f32	s0, s17
   c5512:	ecbd 8b02 	vpop	{d8}
   c5516:	bd08      	pop	{r3, pc}

000c5518 <fminf>:
   c5518:	b508      	push	{r3, lr}
   c551a:	ed2d 8b02 	vpush	{d8}
   c551e:	eef0 8a40 	vmov.f32	s17, s0
   c5522:	eeb0 8a60 	vmov.f32	s16, s1
   c5526:	f000 f815 	bl	c5554 <__fpclassifyf>
   c552a:	b920      	cbnz	r0, c5536 <fminf+0x1e>
   c552c:	eeb0 0a48 	vmov.f32	s0, s16
   c5530:	ecbd 8b02 	vpop	{d8}
   c5534:	bd08      	pop	{r3, pc}
   c5536:	eeb0 0a48 	vmov.f32	s0, s16
   c553a:	f000 f80b 	bl	c5554 <__fpclassifyf>
   c553e:	b120      	cbz	r0, c554a <fminf+0x32>
   c5540:	eef4 8ac8 	vcmpe.f32	s17, s16
   c5544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5548:	d5f0      	bpl.n	c552c <fminf+0x14>
   c554a:	eeb0 0a68 	vmov.f32	s0, s17
   c554e:	ecbd 8b02 	vpop	{d8}
   c5552:	bd08      	pop	{r3, pc}

000c5554 <__fpclassifyf>:
   c5554:	ee10 3a10 	vmov	r3, s0
   c5558:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   c555c:	d00e      	beq.n	c557c <__fpclassifyf+0x28>
   c555e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   c5562:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   c5566:	d30d      	bcc.n	c5584 <__fpclassifyf+0x30>
   c5568:	4b07      	ldr	r3, [pc, #28]	; (c5588 <__fpclassifyf+0x34>)
   c556a:	1e42      	subs	r2, r0, #1
   c556c:	429a      	cmp	r2, r3
   c556e:	d907      	bls.n	c5580 <__fpclassifyf+0x2c>
   c5570:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   c5574:	fab0 f080 	clz	r0, r0
   c5578:	0940      	lsrs	r0, r0, #5
   c557a:	4770      	bx	lr
   c557c:	2002      	movs	r0, #2
   c557e:	4770      	bx	lr
   c5580:	2003      	movs	r0, #3
   c5582:	4770      	bx	lr
   c5584:	2004      	movs	r0, #4
   c5586:	4770      	bx	lr
   c5588:	007ffffe 	.word	0x007ffffe

000c558c <roundf>:
   c558c:	ee10 3a10 	vmov	r3, s0
   c5590:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c5594:	3a7f      	subs	r2, #127	; 0x7f
   c5596:	2a16      	cmp	r2, #22
   c5598:	ee10 1a10 	vmov	r1, s0
   c559c:	dc15      	bgt.n	c55ca <roundf+0x3e>
   c559e:	2a00      	cmp	r2, #0
   c55a0:	db0c      	blt.n	c55bc <roundf+0x30>
   c55a2:	480c      	ldr	r0, [pc, #48]	; (c55d4 <roundf+0x48>)
   c55a4:	4110      	asrs	r0, r2
   c55a6:	4203      	tst	r3, r0
   c55a8:	d005      	beq.n	c55b6 <roundf+0x2a>
   c55aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   c55ae:	4113      	asrs	r3, r2
   c55b0:	440b      	add	r3, r1
   c55b2:	ea23 0300 	bic.w	r3, r3, r0
   c55b6:	ee00 3a10 	vmov	s0, r3
   c55ba:	4770      	bx	lr
   c55bc:	3201      	adds	r2, #1
   c55be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   c55c2:	d1f8      	bne.n	c55b6 <roundf+0x2a>
   c55c4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   c55c8:	e7f5      	b.n	c55b6 <roundf+0x2a>
   c55ca:	2a80      	cmp	r2, #128	; 0x80
   c55cc:	d1f3      	bne.n	c55b6 <roundf+0x2a>
   c55ce:	ee30 0a00 	vadd.f32	s0, s0, s0
   c55d2:	4770      	bx	lr
   c55d4:	007fffff 	.word	0x007fffff

000c55d8 <sinf>:
   c55d8:	ee10 3a10 	vmov	r3, s0
   c55dc:	4a19      	ldr	r2, [pc, #100]	; (c5644 <sinf+0x6c>)
   c55de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c55e2:	4293      	cmp	r3, r2
   c55e4:	dd1c      	ble.n	c5620 <sinf+0x48>
   c55e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c55ea:	db02      	blt.n	c55f2 <sinf+0x1a>
   c55ec:	ee30 0a40 	vsub.f32	s0, s0, s0
   c55f0:	4770      	bx	lr
   c55f2:	b500      	push	{lr}
   c55f4:	b083      	sub	sp, #12
   c55f6:	4668      	mov	r0, sp
   c55f8:	f000 fcf6 	bl	c5fe8 <__ieee754_rem_pio2f>
   c55fc:	f000 0003 	and.w	r0, r0, #3
   c5600:	2801      	cmp	r0, #1
   c5602:	eddd 0a01 	vldr	s1, [sp, #4]
   c5606:	ed9d 0a00 	vldr	s0, [sp]
   c560a:	d00e      	beq.n	c562a <sinf+0x52>
   c560c:	2802      	cmp	r0, #2
   c560e:	d013      	beq.n	c5638 <sinf+0x60>
   c5610:	b170      	cbz	r0, c5630 <sinf+0x58>
   c5612:	f000 fe1f 	bl	c6254 <__kernel_cosf>
   c5616:	eeb1 0a40 	vneg.f32	s0, s0
   c561a:	b003      	add	sp, #12
   c561c:	f85d fb04 	ldr.w	pc, [sp], #4
   c5620:	eddf 0a09 	vldr	s1, [pc, #36]	; c5648 <sinf+0x70>
   c5624:	2000      	movs	r0, #0
   c5626:	f001 b9d1 	b.w	c69cc <__kernel_sinf>
   c562a:	f000 fe13 	bl	c6254 <__kernel_cosf>
   c562e:	e7f4      	b.n	c561a <sinf+0x42>
   c5630:	2001      	movs	r0, #1
   c5632:	f001 f9cb 	bl	c69cc <__kernel_sinf>
   c5636:	e7f0      	b.n	c561a <sinf+0x42>
   c5638:	2001      	movs	r0, #1
   c563a:	f001 f9c7 	bl	c69cc <__kernel_sinf>
   c563e:	eeb1 0a40 	vneg.f32	s0, s0
   c5642:	e7ea      	b.n	c561a <sinf+0x42>
   c5644:	3f490fd8 	.word	0x3f490fd8
	...

000c5650 <exp>:
   c5650:	b508      	push	{r3, lr}
   c5652:	ed2d 8b04 	vpush	{d8-d9}
   c5656:	eeb0 8a40 	vmov.f32	s16, s0
   c565a:	eef0 8a60 	vmov.f32	s17, s1
   c565e:	f000 f8e7 	bl	c5830 <__ieee754_exp>
   c5662:	4b23      	ldr	r3, [pc, #140]	; (c56f0 <exp+0xa0>)
   c5664:	eeb0 9a40 	vmov.f32	s18, s0
   c5668:	eef0 9a60 	vmov.f32	s19, s1
   c566c:	f993 3000 	ldrsb.w	r3, [r3]
   c5670:	3301      	adds	r3, #1
   c5672:	d016      	beq.n	c56a2 <exp+0x52>
   c5674:	eeb0 0a48 	vmov.f32	s0, s16
   c5678:	eef0 0a68 	vmov.f32	s1, s17
   c567c:	f001 f9ee 	bl	c6a5c <finite>
   c5680:	b178      	cbz	r0, c56a2 <exp+0x52>
   c5682:	a313      	add	r3, pc, #76	; (adr r3, c56d0 <exp+0x80>)
   c5684:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5688:	ec51 0b18 	vmov	r0, r1, d8
   c568c:	f7ef f914 	bl	b48b8 <__aeabi_dcmpgt>
   c5690:	b9a8      	cbnz	r0, c56be <exp+0x6e>
   c5692:	a311      	add	r3, pc, #68	; (adr r3, c56d8 <exp+0x88>)
   c5694:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5698:	ec51 0b18 	vmov	r0, r1, d8
   c569c:	f7ef f8ee 	bl	b487c <__aeabi_dcmplt>
   c56a0:	b930      	cbnz	r0, c56b0 <exp+0x60>
   c56a2:	eeb0 0a49 	vmov.f32	s0, s18
   c56a6:	eef0 0a69 	vmov.f32	s1, s19
   c56aa:	ecbd 8b04 	vpop	{d8-d9}
   c56ae:	bd08      	pop	{r3, pc}
   c56b0:	f7ff f8fc 	bl	c48ac <__errno>
   c56b4:	2322      	movs	r3, #34	; 0x22
   c56b6:	ed9f 9b0a 	vldr	d9, [pc, #40]	; c56e0 <exp+0x90>
   c56ba:	6003      	str	r3, [r0, #0]
   c56bc:	e7f1      	b.n	c56a2 <exp+0x52>
   c56be:	f7ff f8f5 	bl	c48ac <__errno>
   c56c2:	2322      	movs	r3, #34	; 0x22
   c56c4:	ed9f 9b08 	vldr	d9, [pc, #32]	; c56e8 <exp+0x98>
   c56c8:	6003      	str	r3, [r0, #0]
   c56ca:	e7ea      	b.n	c56a2 <exp+0x52>
   c56cc:	f3af 8000 	nop.w
   c56d0:	fefa39ef 	.word	0xfefa39ef
   c56d4:	40862e42 	.word	0x40862e42
   c56d8:	d52d3051 	.word	0xd52d3051
   c56dc:	c0874910 	.word	0xc0874910
	...
   c56ec:	7ff00000 	.word	0x7ff00000
   c56f0:	2003c5b4 	.word	0x2003c5b4

000c56f4 <expf>:
   c56f4:	b508      	push	{r3, lr}
   c56f6:	ed2d 8b02 	vpush	{d8}
   c56fa:	eeb0 8a40 	vmov.f32	s16, s0
   c56fe:	f000 fa7d 	bl	c5bfc <__ieee754_expf>
   c5702:	4b16      	ldr	r3, [pc, #88]	; (c575c <expf+0x68>)
   c5704:	f993 3000 	ldrsb.w	r3, [r3]
   c5708:	3301      	adds	r3, #1
   c570a:	eef0 8a40 	vmov.f32	s17, s0
   c570e:	d012      	beq.n	c5736 <expf+0x42>
   c5710:	eeb0 0a48 	vmov.f32	s0, s16
   c5714:	f001 f9b6 	bl	c6a84 <finitef>
   c5718:	b168      	cbz	r0, c5736 <expf+0x42>
   c571a:	eddf 7a11 	vldr	s15, [pc, #68]	; c5760 <expf+0x6c>
   c571e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c5722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5726:	dc12      	bgt.n	c574e <expf+0x5a>
   c5728:	eddf 7a0e 	vldr	s15, [pc, #56]	; c5764 <expf+0x70>
   c572c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c5730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5734:	d404      	bmi.n	c5740 <expf+0x4c>
   c5736:	eeb0 0a68 	vmov.f32	s0, s17
   c573a:	ecbd 8b02 	vpop	{d8}
   c573e:	bd08      	pop	{r3, pc}
   c5740:	f7ff f8b4 	bl	c48ac <__errno>
   c5744:	2322      	movs	r3, #34	; 0x22
   c5746:	eddf 8a08 	vldr	s17, [pc, #32]	; c5768 <expf+0x74>
   c574a:	6003      	str	r3, [r0, #0]
   c574c:	e7f3      	b.n	c5736 <expf+0x42>
   c574e:	f7ff f8ad 	bl	c48ac <__errno>
   c5752:	2322      	movs	r3, #34	; 0x22
   c5754:	eddf 8a05 	vldr	s17, [pc, #20]	; c576c <expf+0x78>
   c5758:	6003      	str	r3, [r0, #0]
   c575a:	e7ec      	b.n	c5736 <expf+0x42>
   c575c:	2003c5b4 	.word	0x2003c5b4
   c5760:	42b17180 	.word	0x42b17180
   c5764:	c2cff1b5 	.word	0xc2cff1b5
   c5768:	00000000 	.word	0x00000000
   c576c:	7f800000 	.word	0x7f800000

000c5770 <logf>:
   c5770:	b508      	push	{r3, lr}
   c5772:	ed2d 8b02 	vpush	{d8}
   c5776:	eeb0 8a40 	vmov.f32	s16, s0
   c577a:	f000 fb35 	bl	c5de8 <__ieee754_logf>
   c577e:	4b14      	ldr	r3, [pc, #80]	; (c57d0 <logf+0x60>)
   c5780:	f993 3000 	ldrsb.w	r3, [r3]
   c5784:	3301      	adds	r3, #1
   c5786:	d014      	beq.n	c57b2 <logf+0x42>
   c5788:	eeb4 8a48 	vcmp.f32	s16, s16
   c578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5790:	d60f      	bvs.n	c57b2 <logf+0x42>
   c5792:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   c5796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c579a:	dc0a      	bgt.n	c57b2 <logf+0x42>
   c579c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c57a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c57a4:	d108      	bne.n	c57b8 <logf+0x48>
   c57a6:	f7ff f881 	bl	c48ac <__errno>
   c57aa:	2322      	movs	r3, #34	; 0x22
   c57ac:	ed9f 0a09 	vldr	s0, [pc, #36]	; c57d4 <logf+0x64>
   c57b0:	6003      	str	r3, [r0, #0]
   c57b2:	ecbd 8b02 	vpop	{d8}
   c57b6:	bd08      	pop	{r3, pc}
   c57b8:	f7ff f878 	bl	c48ac <__errno>
   c57bc:	ecbd 8b02 	vpop	{d8}
   c57c0:	4603      	mov	r3, r0
   c57c2:	2221      	movs	r2, #33	; 0x21
   c57c4:	601a      	str	r2, [r3, #0]
   c57c6:	4804      	ldr	r0, [pc, #16]	; (c57d8 <logf+0x68>)
   c57c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c57cc:	f001 b968 	b.w	c6aa0 <nanf>
   c57d0:	2003c5b4 	.word	0x2003c5b4
   c57d4:	ff800000 	.word	0xff800000
   c57d8:	000c996c 	.word	0x000c996c

000c57dc <sqrtf>:
   c57dc:	b508      	push	{r3, lr}
   c57de:	ed2d 8b02 	vpush	{d8}
   c57e2:	eeb0 8a40 	vmov.f32	s16, s0
   c57e6:	f000 fd31 	bl	c624c <__ieee754_sqrtf>
   c57ea:	4b0e      	ldr	r3, [pc, #56]	; (c5824 <sqrtf+0x48>)
   c57ec:	f993 3000 	ldrsb.w	r3, [r3]
   c57f0:	3301      	adds	r3, #1
   c57f2:	d00b      	beq.n	c580c <sqrtf+0x30>
   c57f4:	eeb4 8a48 	vcmp.f32	s16, s16
   c57f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c57fc:	d606      	bvs.n	c580c <sqrtf+0x30>
   c57fe:	eddf 8a0a 	vldr	s17, [pc, #40]	; c5828 <sqrtf+0x4c>
   c5802:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c5806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c580a:	d402      	bmi.n	c5812 <sqrtf+0x36>
   c580c:	ecbd 8b02 	vpop	{d8}
   c5810:	bd08      	pop	{r3, pc}
   c5812:	f7ff f84b 	bl	c48ac <__errno>
   c5816:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c581a:	ecbd 8b02 	vpop	{d8}
   c581e:	2321      	movs	r3, #33	; 0x21
   c5820:	6003      	str	r3, [r0, #0]
   c5822:	bd08      	pop	{r3, pc}
   c5824:	2003c5b4 	.word	0x2003c5b4
	...

000c5830 <__ieee754_exp>:
   c5830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5834:	ec55 4b10 	vmov	r4, r5, d0
   c5838:	ed2d 8b02 	vpush	{d8}
   c583c:	49dc      	ldr	r1, [pc, #880]	; (c5bb0 <__ieee754_exp+0x380>)
   c583e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c5842:	428a      	cmp	r2, r1
   c5844:	b083      	sub	sp, #12
   c5846:	ea4f 76d5 	mov.w	r6, r5, lsr #31
   c584a:	d913      	bls.n	c5874 <__ieee754_exp+0x44>
   c584c:	49d9      	ldr	r1, [pc, #868]	; (c5bb4 <__ieee754_exp+0x384>)
   c584e:	428a      	cmp	r2, r1
   c5850:	d92f      	bls.n	c58b2 <__ieee754_exp+0x82>
   c5852:	f3c5 0313 	ubfx	r3, r5, #0, #20
   c5856:	4323      	orrs	r3, r4
   c5858:	ee10 2a10 	vmov	r2, s0
   c585c:	f040 8162 	bne.w	c5b24 <__ieee754_exp+0x2f4>
   c5860:	2e00      	cmp	r6, #0
   c5862:	f000 80f9 	beq.w	c5a58 <__ieee754_exp+0x228>
   c5866:	ed9f 0bba 	vldr	d0, [pc, #744]	; c5b50 <__ieee754_exp+0x320>
   c586a:	b003      	add	sp, #12
   c586c:	ecbd 8b02 	vpop	{d8}
   c5870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5874:	4bd0      	ldr	r3, [pc, #832]	; (c5bb8 <__ieee754_exp+0x388>)
   c5876:	429a      	cmp	r2, r3
   c5878:	d85b      	bhi.n	c5932 <__ieee754_exp+0x102>
   c587a:	4bd0      	ldr	r3, [pc, #832]	; (c5bbc <__ieee754_exp+0x38c>)
   c587c:	429a      	cmp	r2, r3
   c587e:	f200 80f0 	bhi.w	c5a62 <__ieee754_exp+0x232>
   c5882:	a3b5      	add	r3, pc, #724	; (adr r3, c5b58 <__ieee754_exp+0x328>)
   c5884:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5888:	ee10 0a10 	vmov	r0, s0
   c588c:	4629      	mov	r1, r5
   c588e:	f7ee fbcd 	bl	b402c <__adddf3>
   c5892:	4bcb      	ldr	r3, [pc, #812]	; (c5bc0 <__ieee754_exp+0x390>)
   c5894:	2200      	movs	r2, #0
   c5896:	f7ef f80f 	bl	b48b8 <__aeabi_dcmpgt>
   c589a:	2800      	cmp	r0, #0
   c589c:	f000 80e1 	beq.w	c5a62 <__ieee754_exp+0x232>
   c58a0:	4bc7      	ldr	r3, [pc, #796]	; (c5bc0 <__ieee754_exp+0x390>)
   c58a2:	2200      	movs	r2, #0
   c58a4:	4620      	mov	r0, r4
   c58a6:	4629      	mov	r1, r5
   c58a8:	f7ee fbc0 	bl	b402c <__adddf3>
   c58ac:	ec41 0b10 	vmov	d0, r0, r1
   c58b0:	e0d2      	b.n	c5a58 <__ieee754_exp+0x228>
   c58b2:	a3ab      	add	r3, pc, #684	; (adr r3, c5b60 <__ieee754_exp+0x330>)
   c58b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58b8:	ee10 0a10 	vmov	r0, s0
   c58bc:	4629      	mov	r1, r5
   c58be:	f7ee fffb 	bl	b48b8 <__aeabi_dcmpgt>
   c58c2:	2800      	cmp	r0, #0
   c58c4:	f040 813a 	bne.w	c5b3c <__ieee754_exp+0x30c>
   c58c8:	a3a7      	add	r3, pc, #668	; (adr r3, c5b68 <__ieee754_exp+0x338>)
   c58ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58ce:	4620      	mov	r0, r4
   c58d0:	4629      	mov	r1, r5
   c58d2:	f7ee ffd3 	bl	b487c <__aeabi_dcmplt>
   c58d6:	2800      	cmp	r0, #0
   c58d8:	d1c5      	bne.n	c5866 <__ieee754_exp+0x36>
   c58da:	4bba      	ldr	r3, [pc, #744]	; (c5bc4 <__ieee754_exp+0x394>)
   c58dc:	4620      	mov	r0, r4
   c58de:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c58e2:	4629      	mov	r1, r5
   c58e4:	a3a2      	add	r3, pc, #648	; (adr r3, c5b70 <__ieee754_exp+0x340>)
   c58e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c58ea:	f7ee fd55 	bl	b4398 <__aeabi_dmul>
   c58ee:	e9d6 2300 	ldrd	r2, r3, [r6]
   c58f2:	f7ee fb9b 	bl	b402c <__adddf3>
   c58f6:	f7ee ffe9 	bl	b48cc <__aeabi_d2iz>
   c58fa:	9001      	str	r0, [sp, #4]
   c58fc:	f7ee fce2 	bl	b42c4 <__aeabi_i2d>
   c5900:	a39d      	add	r3, pc, #628	; (adr r3, c5b78 <__ieee754_exp+0x348>)
   c5902:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5906:	4606      	mov	r6, r0
   c5908:	460f      	mov	r7, r1
   c590a:	f7ee fd45 	bl	b4398 <__aeabi_dmul>
   c590e:	4602      	mov	r2, r0
   c5910:	460b      	mov	r3, r1
   c5912:	4620      	mov	r0, r4
   c5914:	4629      	mov	r1, r5
   c5916:	f7ee fb87 	bl	b4028 <__aeabi_dsub>
   c591a:	a399      	add	r3, pc, #612	; (adr r3, c5b80 <__ieee754_exp+0x350>)
   c591c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5920:	4680      	mov	r8, r0
   c5922:	4689      	mov	r9, r1
   c5924:	4630      	mov	r0, r6
   c5926:	4639      	mov	r1, r7
   c5928:	f7ee fd36 	bl	b4398 <__aeabi_dmul>
   c592c:	ec41 0b18 	vmov	d8, r0, r1
   c5930:	e01c      	b.n	c596c <__ieee754_exp+0x13c>
   c5932:	4ba5      	ldr	r3, [pc, #660]	; (c5bc8 <__ieee754_exp+0x398>)
   c5934:	429a      	cmp	r2, r3
   c5936:	d8d0      	bhi.n	c58da <__ieee754_exp+0xaa>
   c5938:	4ba4      	ldr	r3, [pc, #656]	; (c5bcc <__ieee754_exp+0x39c>)
   c593a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   c593e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5942:	ee10 0a10 	vmov	r0, s0
   c5946:	4629      	mov	r1, r5
   c5948:	f7ee fb6e 	bl	b4028 <__aeabi_dsub>
   c594c:	4ba0      	ldr	r3, [pc, #640]	; (c5bd0 <__ieee754_exp+0x3a0>)
   c594e:	00f4      	lsls	r4, r6, #3
   c5950:	4423      	add	r3, r4
   c5952:	ed93 7b00 	vldr	d7, [r3]
   c5956:	f1c6 0a01 	rsb	sl, r6, #1
   c595a:	ebaa 0306 	sub.w	r3, sl, r6
   c595e:	4680      	mov	r8, r0
   c5960:	4689      	mov	r9, r1
   c5962:	9301      	str	r3, [sp, #4]
   c5964:	eeb0 8a47 	vmov.f32	s16, s14
   c5968:	eef0 8a67 	vmov.f32	s17, s15
   c596c:	ec53 2b18 	vmov	r2, r3, d8
   c5970:	4640      	mov	r0, r8
   c5972:	4649      	mov	r1, r9
   c5974:	f7ee fb58 	bl	b4028 <__aeabi_dsub>
   c5978:	4602      	mov	r2, r0
   c597a:	460b      	mov	r3, r1
   c597c:	4682      	mov	sl, r0
   c597e:	468b      	mov	fp, r1
   c5980:	f7ee fd0a 	bl	b4398 <__aeabi_dmul>
   c5984:	a380      	add	r3, pc, #512	; (adr r3, c5b88 <__ieee754_exp+0x358>)
   c5986:	e9d3 2300 	ldrd	r2, r3, [r3]
   c598a:	4604      	mov	r4, r0
   c598c:	460d      	mov	r5, r1
   c598e:	f7ee fd03 	bl	b4398 <__aeabi_dmul>
   c5992:	a37f      	add	r3, pc, #508	; (adr r3, c5b90 <__ieee754_exp+0x360>)
   c5994:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5998:	f7ee fb46 	bl	b4028 <__aeabi_dsub>
   c599c:	4622      	mov	r2, r4
   c599e:	462b      	mov	r3, r5
   c59a0:	f7ee fcfa 	bl	b4398 <__aeabi_dmul>
   c59a4:	a37c      	add	r3, pc, #496	; (adr r3, c5b98 <__ieee754_exp+0x368>)
   c59a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59aa:	f7ee fb3f 	bl	b402c <__adddf3>
   c59ae:	4622      	mov	r2, r4
   c59b0:	462b      	mov	r3, r5
   c59b2:	f7ee fcf1 	bl	b4398 <__aeabi_dmul>
   c59b6:	a37a      	add	r3, pc, #488	; (adr r3, c5ba0 <__ieee754_exp+0x370>)
   c59b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59bc:	f7ee fb34 	bl	b4028 <__aeabi_dsub>
   c59c0:	4622      	mov	r2, r4
   c59c2:	462b      	mov	r3, r5
   c59c4:	f7ee fce8 	bl	b4398 <__aeabi_dmul>
   c59c8:	a377      	add	r3, pc, #476	; (adr r3, c5ba8 <__ieee754_exp+0x378>)
   c59ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   c59ce:	f7ee fb2d 	bl	b402c <__adddf3>
   c59d2:	4622      	mov	r2, r4
   c59d4:	462b      	mov	r3, r5
   c59d6:	f7ee fcdf 	bl	b4398 <__aeabi_dmul>
   c59da:	4602      	mov	r2, r0
   c59dc:	460b      	mov	r3, r1
   c59de:	4650      	mov	r0, sl
   c59e0:	4659      	mov	r1, fp
   c59e2:	f7ee fb21 	bl	b4028 <__aeabi_dsub>
   c59e6:	9b01      	ldr	r3, [sp, #4]
   c59e8:	460f      	mov	r7, r1
   c59ea:	4606      	mov	r6, r0
   c59ec:	4654      	mov	r4, sl
   c59ee:	465d      	mov	r5, fp
   c59f0:	4601      	mov	r1, r0
   c59f2:	463a      	mov	r2, r7
   c59f4:	2b00      	cmp	r3, #0
   c59f6:	d06d      	beq.n	c5ad4 <__ieee754_exp+0x2a4>
   c59f8:	4632      	mov	r2, r6
   c59fa:	463b      	mov	r3, r7
   c59fc:	4650      	mov	r0, sl
   c59fe:	4659      	mov	r1, fp
   c5a00:	f7ee fcca 	bl	b4398 <__aeabi_dmul>
   c5a04:	4632      	mov	r2, r6
   c5a06:	4604      	mov	r4, r0
   c5a08:	463b      	mov	r3, r7
   c5a0a:	460d      	mov	r5, r1
   c5a0c:	2000      	movs	r0, #0
   c5a0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   c5a12:	f7ee fb09 	bl	b4028 <__aeabi_dsub>
   c5a16:	4602      	mov	r2, r0
   c5a18:	460b      	mov	r3, r1
   c5a1a:	4620      	mov	r0, r4
   c5a1c:	4629      	mov	r1, r5
   c5a1e:	f7ee fde5 	bl	b45ec <__aeabi_ddiv>
   c5a22:	4602      	mov	r2, r0
   c5a24:	460b      	mov	r3, r1
   c5a26:	ec51 0b18 	vmov	r0, r1, d8
   c5a2a:	f7ee fafd 	bl	b4028 <__aeabi_dsub>
   c5a2e:	4642      	mov	r2, r8
   c5a30:	464b      	mov	r3, r9
   c5a32:	f7ee faf9 	bl	b4028 <__aeabi_dsub>
   c5a36:	4602      	mov	r2, r0
   c5a38:	460b      	mov	r3, r1
   c5a3a:	2000      	movs	r0, #0
   c5a3c:	4960      	ldr	r1, [pc, #384]	; (c5bc0 <__ieee754_exp+0x390>)
   c5a3e:	f7ee faf3 	bl	b4028 <__aeabi_dsub>
   c5a42:	9c01      	ldr	r4, [sp, #4]
   c5a44:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   c5a48:	429c      	cmp	r4, r3
   c5a4a:	4602      	mov	r2, r0
   c5a4c:	f2c0 80c2 	blt.w	c5bd4 <__ieee754_exp+0x3a4>
   c5a50:	eb01 5304 	add.w	r3, r1, r4, lsl #20
   c5a54:	ec43 2b10 	vmov	d0, r2, r3
   c5a58:	b003      	add	sp, #12
   c5a5a:	ecbd 8b02 	vpop	{d8}
   c5a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5a62:	4622      	mov	r2, r4
   c5a64:	462b      	mov	r3, r5
   c5a66:	4620      	mov	r0, r4
   c5a68:	4629      	mov	r1, r5
   c5a6a:	f7ee fc95 	bl	b4398 <__aeabi_dmul>
   c5a6e:	a346      	add	r3, pc, #280	; (adr r3, c5b88 <__ieee754_exp+0x358>)
   c5a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5a74:	4606      	mov	r6, r0
   c5a76:	460f      	mov	r7, r1
   c5a78:	f7ee fc8e 	bl	b4398 <__aeabi_dmul>
   c5a7c:	a344      	add	r3, pc, #272	; (adr r3, c5b90 <__ieee754_exp+0x360>)
   c5a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5a82:	f7ee fad1 	bl	b4028 <__aeabi_dsub>
   c5a86:	4632      	mov	r2, r6
   c5a88:	463b      	mov	r3, r7
   c5a8a:	f7ee fc85 	bl	b4398 <__aeabi_dmul>
   c5a8e:	a342      	add	r3, pc, #264	; (adr r3, c5b98 <__ieee754_exp+0x368>)
   c5a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5a94:	f7ee faca 	bl	b402c <__adddf3>
   c5a98:	4632      	mov	r2, r6
   c5a9a:	463b      	mov	r3, r7
   c5a9c:	f7ee fc7c 	bl	b4398 <__aeabi_dmul>
   c5aa0:	a33f      	add	r3, pc, #252	; (adr r3, c5ba0 <__ieee754_exp+0x370>)
   c5aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5aa6:	f7ee fabf 	bl	b4028 <__aeabi_dsub>
   c5aaa:	4632      	mov	r2, r6
   c5aac:	463b      	mov	r3, r7
   c5aae:	f7ee fc73 	bl	b4398 <__aeabi_dmul>
   c5ab2:	a33d      	add	r3, pc, #244	; (adr r3, c5ba8 <__ieee754_exp+0x378>)
   c5ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5ab8:	f7ee fab8 	bl	b402c <__adddf3>
   c5abc:	4632      	mov	r2, r6
   c5abe:	463b      	mov	r3, r7
   c5ac0:	f7ee fc6a 	bl	b4398 <__aeabi_dmul>
   c5ac4:	4602      	mov	r2, r0
   c5ac6:	460b      	mov	r3, r1
   c5ac8:	4620      	mov	r0, r4
   c5aca:	4629      	mov	r1, r5
   c5acc:	f7ee faac 	bl	b4028 <__aeabi_dsub>
   c5ad0:	460a      	mov	r2, r1
   c5ad2:	4601      	mov	r1, r0
   c5ad4:	4691      	mov	r9, r2
   c5ad6:	4688      	mov	r8, r1
   c5ad8:	460a      	mov	r2, r1
   c5ada:	464b      	mov	r3, r9
   c5adc:	4620      	mov	r0, r4
   c5ade:	4629      	mov	r1, r5
   c5ae0:	f7ee fc5a 	bl	b4398 <__aeabi_dmul>
   c5ae4:	2200      	movs	r2, #0
   c5ae6:	4606      	mov	r6, r0
   c5ae8:	460f      	mov	r7, r1
   c5aea:	4640      	mov	r0, r8
   c5aec:	4649      	mov	r1, r9
   c5aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5af2:	f7ee fa99 	bl	b4028 <__aeabi_dsub>
   c5af6:	4602      	mov	r2, r0
   c5af8:	460b      	mov	r3, r1
   c5afa:	4630      	mov	r0, r6
   c5afc:	4639      	mov	r1, r7
   c5afe:	f7ee fd75 	bl	b45ec <__aeabi_ddiv>
   c5b02:	4622      	mov	r2, r4
   c5b04:	462b      	mov	r3, r5
   c5b06:	f7ee fa8f 	bl	b4028 <__aeabi_dsub>
   c5b0a:	4602      	mov	r2, r0
   c5b0c:	460b      	mov	r3, r1
   c5b0e:	2000      	movs	r0, #0
   c5b10:	492b      	ldr	r1, [pc, #172]	; (c5bc0 <__ieee754_exp+0x390>)
   c5b12:	f7ee fa89 	bl	b4028 <__aeabi_dsub>
   c5b16:	ec41 0b10 	vmov	d0, r0, r1
   c5b1a:	b003      	add	sp, #12
   c5b1c:	ecbd 8b02 	vpop	{d8}
   c5b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b24:	462b      	mov	r3, r5
   c5b26:	4620      	mov	r0, r4
   c5b28:	4629      	mov	r1, r5
   c5b2a:	f7ee fa7f 	bl	b402c <__adddf3>
   c5b2e:	ec41 0b10 	vmov	d0, r0, r1
   c5b32:	b003      	add	sp, #12
   c5b34:	ecbd 8b02 	vpop	{d8}
   c5b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b3c:	a306      	add	r3, pc, #24	; (adr r3, c5b58 <__ieee754_exp+0x328>)
   c5b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5b42:	4610      	mov	r0, r2
   c5b44:	4619      	mov	r1, r3
   c5b46:	f7ee fc27 	bl	b4398 <__aeabi_dmul>
   c5b4a:	ec41 0b10 	vmov	d0, r0, r1
   c5b4e:	e783      	b.n	c5a58 <__ieee754_exp+0x228>
	...
   c5b58:	8800759c 	.word	0x8800759c
   c5b5c:	7e37e43c 	.word	0x7e37e43c
   c5b60:	fefa39ef 	.word	0xfefa39ef
   c5b64:	40862e42 	.word	0x40862e42
   c5b68:	d52d3051 	.word	0xd52d3051
   c5b6c:	c0874910 	.word	0xc0874910
   c5b70:	652b82fe 	.word	0x652b82fe
   c5b74:	3ff71547 	.word	0x3ff71547
   c5b78:	fee00000 	.word	0xfee00000
   c5b7c:	3fe62e42 	.word	0x3fe62e42
   c5b80:	35793c76 	.word	0x35793c76
   c5b84:	3dea39ef 	.word	0x3dea39ef
   c5b88:	72bea4d0 	.word	0x72bea4d0
   c5b8c:	3e663769 	.word	0x3e663769
   c5b90:	c5d26bf1 	.word	0xc5d26bf1
   c5b94:	3ebbbd41 	.word	0x3ebbbd41
   c5b98:	af25de2c 	.word	0xaf25de2c
   c5b9c:	3f11566a 	.word	0x3f11566a
   c5ba0:	16bebd93 	.word	0x16bebd93
   c5ba4:	3f66c16c 	.word	0x3f66c16c
   c5ba8:	5555553e 	.word	0x5555553e
   c5bac:	3fc55555 	.word	0x3fc55555
   c5bb0:	40862e41 	.word	0x40862e41
   c5bb4:	7fefffff 	.word	0x7fefffff
   c5bb8:	3fd62e42 	.word	0x3fd62e42
   c5bbc:	3e2fffff 	.word	0x3e2fffff
   c5bc0:	3ff00000 	.word	0x3ff00000
   c5bc4:	000c9970 	.word	0x000c9970
   c5bc8:	3ff0a2b1 	.word	0x3ff0a2b1
   c5bcc:	000c9980 	.word	0x000c9980
   c5bd0:	000c9990 	.word	0x000c9990
   c5bd4:	9801      	ldr	r0, [sp, #4]
   c5bd6:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
   c5bda:	eb01 530a 	add.w	r3, r1, sl, lsl #20
   c5bde:	4610      	mov	r0, r2
   c5be0:	4619      	mov	r1, r3
   c5be2:	2200      	movs	r2, #0
   c5be4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   c5be8:	f7ee fbd6 	bl	b4398 <__aeabi_dmul>
   c5bec:	ec41 0b10 	vmov	d0, r0, r1
   c5bf0:	b003      	add	sp, #12
   c5bf2:	ecbd 8b02 	vpop	{d8}
   c5bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5bfa:	bf00      	nop

000c5bfc <__ieee754_expf>:
   c5bfc:	ee10 3a10 	vmov	r3, s0
   c5c00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c5c04:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c5c08:	d855      	bhi.n	c5cb6 <__ieee754_expf+0xba>
   c5c0a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   c5c0e:	f000 8096 	beq.w	c5d3e <__ieee754_expf+0x142>
   c5c12:	4863      	ldr	r0, [pc, #396]	; (c5da0 <__ieee754_expf+0x1a4>)
   c5c14:	4283      	cmp	r3, r0
   c5c16:	dc51      	bgt.n	c5cbc <__ieee754_expf+0xc0>
   c5c18:	2b00      	cmp	r3, #0
   c5c1a:	f2c0 8089 	blt.w	c5d30 <__ieee754_expf+0x134>
   c5c1e:	4b61      	ldr	r3, [pc, #388]	; (c5da4 <__ieee754_expf+0x1a8>)
   c5c20:	429a      	cmp	r2, r3
   c5c22:	d950      	bls.n	c5cc6 <__ieee754_expf+0xca>
   c5c24:	4b60      	ldr	r3, [pc, #384]	; (c5da8 <__ieee754_expf+0x1ac>)
   c5c26:	429a      	cmp	r2, r3
   c5c28:	f200 809c 	bhi.w	c5d64 <__ieee754_expf+0x168>
   c5c2c:	4b5f      	ldr	r3, [pc, #380]	; (c5dac <__ieee754_expf+0x1b0>)
   c5c2e:	4a60      	ldr	r2, [pc, #384]	; (c5db0 <__ieee754_expf+0x1b4>)
   c5c30:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c5c34:	ed93 4a00 	vldr	s8, [r3]
   c5c38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   c5c3c:	f1c1 0301 	rsb	r3, r1, #1
   c5c40:	ee30 4a44 	vsub.f32	s8, s0, s8
   c5c44:	ed92 7a00 	vldr	s14, [r2]
   c5c48:	1a5b      	subs	r3, r3, r1
   c5c4a:	ee34 0a47 	vsub.f32	s0, s8, s14
   c5c4e:	eddf 7a59 	vldr	s15, [pc, #356]	; c5db4 <__ieee754_expf+0x1b8>
   c5c52:	eddf 4a59 	vldr	s9, [pc, #356]	; c5db8 <__ieee754_expf+0x1bc>
   c5c56:	ed9f 5a59 	vldr	s10, [pc, #356]	; c5dbc <__ieee754_expf+0x1c0>
   c5c5a:	ed9f 6a59 	vldr	s12, [pc, #356]	; c5dc0 <__ieee754_expf+0x1c4>
   c5c5e:	eddf 5a59 	vldr	s11, [pc, #356]	; c5dc4 <__ieee754_expf+0x1c8>
   c5c62:	ee60 6a00 	vmul.f32	s13, s0, s0
   c5c66:	eee6 4aa7 	vfma.f32	s9, s13, s15
   c5c6a:	eea4 5aa6 	vfma.f32	s10, s9, s13
   c5c6e:	eea5 6a26 	vfma.f32	s12, s10, s13
   c5c72:	eee6 5a26 	vfma.f32	s11, s12, s13
   c5c76:	eeb0 6a40 	vmov.f32	s12, s0
   c5c7a:	eea5 6ae6 	vfms.f32	s12, s11, s13
   c5c7e:	2b00      	cmp	r3, #0
   c5c80:	d047      	beq.n	c5d12 <__ieee754_expf+0x116>
   c5c82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   c5c86:	ee60 5a06 	vmul.f32	s11, s0, s12
   c5c8a:	ee36 6ac6 	vsub.f32	s12, s13, s12
   c5c8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c5c92:	ee85 0a86 	vdiv.f32	s0, s11, s12
   c5c96:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   c5c9a:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5c9e:	ee30 0a44 	vsub.f32	s0, s0, s8
   c5ca2:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c5ca6:	db51      	blt.n	c5d4c <__ieee754_expf+0x150>
   c5ca8:	ee10 2a10 	vmov	r2, s0
   c5cac:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   c5cb0:	ee00 3a10 	vmov	s0, r3
   c5cb4:	4770      	bx	lr
   c5cb6:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5cba:	4770      	bx	lr
   c5cbc:	ed9f 0a42 	vldr	s0, [pc, #264]	; c5dc8 <__ieee754_expf+0x1cc>
   c5cc0:	ee20 0a00 	vmul.f32	s0, s0, s0
   c5cc4:	4770      	bx	lr
   c5cc6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   c5cca:	d20a      	bcs.n	c5ce2 <__ieee754_expf+0xe6>
   c5ccc:	eddf 7a3e 	vldr	s15, [pc, #248]	; c5dc8 <__ieee754_expf+0x1cc>
   c5cd0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c5cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c5cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
   c5cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5ce0:	dc5a      	bgt.n	c5d98 <__ieee754_expf+0x19c>
   c5ce2:	ee60 7a00 	vmul.f32	s15, s0, s0
   c5ce6:	ed9f 7a33 	vldr	s14, [pc, #204]	; c5db4 <__ieee754_expf+0x1b8>
   c5cea:	eddf 5a33 	vldr	s11, [pc, #204]	; c5db8 <__ieee754_expf+0x1bc>
   c5cee:	ed9f 6a33 	vldr	s12, [pc, #204]	; c5dbc <__ieee754_expf+0x1c0>
   c5cf2:	eddf 6a33 	vldr	s13, [pc, #204]	; c5dc0 <__ieee754_expf+0x1c4>
   c5cf6:	eee7 5a87 	vfma.f32	s11, s15, s14
   c5cfa:	ed9f 7a32 	vldr	s14, [pc, #200]	; c5dc4 <__ieee754_expf+0x1c8>
   c5cfe:	eea7 6aa5 	vfma.f32	s12, s15, s11
   c5d02:	eee7 6a86 	vfma.f32	s13, s15, s12
   c5d06:	eeb0 6a40 	vmov.f32	s12, s0
   c5d0a:	eea7 7aa6 	vfma.f32	s14, s15, s13
   c5d0e:	eea7 6ac7 	vfms.f32	s12, s15, s14
   c5d12:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c5d16:	ee60 6a06 	vmul.f32	s13, s0, s12
   c5d1a:	ee36 6a67 	vsub.f32	s12, s12, s15
   c5d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c5d22:	eec6 7a86 	vdiv.f32	s15, s13, s12
   c5d26:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c5d2a:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5d2e:	4770      	bx	lr
   c5d30:	4b26      	ldr	r3, [pc, #152]	; (c5dcc <__ieee754_expf+0x1d0>)
   c5d32:	429a      	cmp	r2, r3
   c5d34:	f67f af73 	bls.w	c5c1e <__ieee754_expf+0x22>
   c5d38:	ed9f 0a25 	vldr	s0, [pc, #148]	; c5dd0 <__ieee754_expf+0x1d4>
   c5d3c:	4770      	bx	lr
   c5d3e:	eddf 7a24 	vldr	s15, [pc, #144]	; c5dd0 <__ieee754_expf+0x1d4>
   c5d42:	2900      	cmp	r1, #0
   c5d44:	bf18      	it	ne
   c5d46:	eeb0 0a67 	vmovne.f32	s0, s15
   c5d4a:	4770      	bx	lr
   c5d4c:	ee10 2a10 	vmov	r2, s0
   c5d50:	3364      	adds	r3, #100	; 0x64
   c5d52:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   c5d56:	eddf 7a1f 	vldr	s15, [pc, #124]	; c5dd4 <__ieee754_expf+0x1d8>
   c5d5a:	ee00 3a10 	vmov	s0, r3
   c5d5e:	ee20 0a27 	vmul.f32	s0, s0, s15
   c5d62:	4770      	bx	lr
   c5d64:	4b1c      	ldr	r3, [pc, #112]	; (c5dd8 <__ieee754_expf+0x1dc>)
   c5d66:	ed9f 7a1d 	vldr	s14, [pc, #116]	; c5ddc <__ieee754_expf+0x1e0>
   c5d6a:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c5de0 <__ieee754_expf+0x1e4>
   c5d6e:	eddf 6a1d 	vldr	s13, [pc, #116]	; c5de4 <__ieee754_expf+0x1e8>
   c5d72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   c5d76:	edd3 7a00 	vldr	s15, [r3]
   c5d7a:	eee0 7a07 	vfma.f32	s15, s0, s14
   c5d7e:	eeb0 4a40 	vmov.f32	s8, s0
   c5d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c5d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   c5d8a:	ee17 3a90 	vmov	r3, s15
   c5d8e:	eea7 4a46 	vfms.f32	s8, s14, s12
   c5d92:	ee27 7a26 	vmul.f32	s14, s14, s13
   c5d96:	e758      	b.n	c5c4a <__ieee754_expf+0x4e>
   c5d98:	ee30 0a07 	vadd.f32	s0, s0, s14
   c5d9c:	4770      	bx	lr
   c5d9e:	bf00      	nop
   c5da0:	42b17217 	.word	0x42b17217
   c5da4:	3eb17218 	.word	0x3eb17218
   c5da8:	3f851591 	.word	0x3f851591
   c5dac:	000c99a8 	.word	0x000c99a8
   c5db0:	000c99b0 	.word	0x000c99b0
   c5db4:	3331bb4c 	.word	0x3331bb4c
   c5db8:	b5ddea0e 	.word	0xb5ddea0e
   c5dbc:	388ab355 	.word	0x388ab355
   c5dc0:	bb360b61 	.word	0xbb360b61
   c5dc4:	3e2aaaab 	.word	0x3e2aaaab
   c5dc8:	7149f2ca 	.word	0x7149f2ca
   c5dcc:	42cff1b5 	.word	0x42cff1b5
   c5dd0:	00000000 	.word	0x00000000
   c5dd4:	0d800000 	.word	0x0d800000
   c5dd8:	000c99a0 	.word	0x000c99a0
   c5ddc:	3fb8aa3b 	.word	0x3fb8aa3b
   c5de0:	3f317180 	.word	0x3f317180
   c5de4:	3717f7d1 	.word	0x3717f7d1

000c5de8 <__ieee754_logf>:
   c5de8:	ee10 3a10 	vmov	r3, s0
   c5dec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c5df0:	d02e      	beq.n	c5e50 <__ieee754_logf+0x68>
   c5df2:	2b00      	cmp	r3, #0
   c5df4:	db33      	blt.n	c5e5e <__ieee754_logf+0x76>
   c5df6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c5dfa:	da40      	bge.n	c5e7e <__ieee754_logf+0x96>
   c5dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   c5e00:	db34      	blt.n	c5e6c <__ieee754_logf+0x84>
   c5e02:	f04f 0c00 	mov.w	ip, #0
   c5e06:	4868      	ldr	r0, [pc, #416]	; (c5fa8 <__ieee754_logf+0x1c0>)
   c5e08:	f3c3 0116 	ubfx	r1, r3, #0, #23
   c5e0c:	4408      	add	r0, r1
   c5e0e:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   c5e12:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   c5e16:	430a      	orrs	r2, r1
   c5e18:	15db      	asrs	r3, r3, #23
   c5e1a:	ee00 2a10 	vmov	s0, r2
   c5e1e:	3b7f      	subs	r3, #127	; 0x7f
   c5e20:	4a62      	ldr	r2, [pc, #392]	; (c5fac <__ieee754_logf+0x1c4>)
   c5e22:	4463      	add	r3, ip
   c5e24:	f101 0c0f 	add.w	ip, r1, #15
   c5e28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c5e2c:	ea0c 0202 	and.w	r2, ip, r2
   c5e30:	ee30 0a67 	vsub.f32	s0, s0, s15
   c5e34:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   c5e38:	bb22      	cbnz	r2, c5e84 <__ieee754_logf+0x9c>
   c5e3a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   c5e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c5e42:	d160      	bne.n	c5f06 <__ieee754_logf+0x11e>
   c5e44:	2b00      	cmp	r3, #0
   c5e46:	f040 8092 	bne.w	c5f6e <__ieee754_logf+0x186>
   c5e4a:	ed9f 0a59 	vldr	s0, [pc, #356]	; c5fb0 <__ieee754_logf+0x1c8>
   c5e4e:	4770      	bx	lr
   c5e50:	ed9f 7a58 	vldr	s14, [pc, #352]	; c5fb4 <__ieee754_logf+0x1cc>
   c5e54:	eddf 7a56 	vldr	s15, [pc, #344]	; c5fb0 <__ieee754_logf+0x1c8>
   c5e58:	ee87 0a27 	vdiv.f32	s0, s14, s15
   c5e5c:	4770      	bx	lr
   c5e5e:	ee70 7a40 	vsub.f32	s15, s0, s0
   c5e62:	ed9f 7a53 	vldr	s14, [pc, #332]	; c5fb0 <__ieee754_logf+0x1c8>
   c5e66:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c5e6a:	4770      	bx	lr
   c5e6c:	eddf 7a52 	vldr	s15, [pc, #328]	; c5fb8 <__ieee754_logf+0x1d0>
   c5e70:	ee60 7a27 	vmul.f32	s15, s0, s15
   c5e74:	f06f 0c18 	mvn.w	ip, #24
   c5e78:	ee17 3a90 	vmov	r3, s15
   c5e7c:	e7c3      	b.n	c5e06 <__ieee754_logf+0x1e>
   c5e7e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c5e82:	4770      	bx	lr
   c5e84:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c5e88:	ee70 7a27 	vadd.f32	s15, s0, s15
   c5e8c:	ee07 3a10 	vmov	s14, r3
   c5e90:	ee80 4a27 	vdiv.f32	s8, s0, s15
   c5e94:	4849      	ldr	r0, [pc, #292]	; (c5fbc <__ieee754_logf+0x1d4>)
   c5e96:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   c5e9a:	4408      	add	r0, r1
   c5e9c:	f502 7222 	add.w	r2, r2, #648	; 0x288
   c5ea0:	4302      	orrs	r2, r0
   c5ea2:	2a00      	cmp	r2, #0
   c5ea4:	ed9f 3a46 	vldr	s6, [pc, #280]	; c5fc0 <__ieee754_logf+0x1d8>
   c5ea8:	eddf 4a46 	vldr	s9, [pc, #280]	; c5fc4 <__ieee754_logf+0x1dc>
   c5eac:	eddf 5a46 	vldr	s11, [pc, #280]	; c5fc8 <__ieee754_logf+0x1e0>
   c5eb0:	eddf 3a46 	vldr	s7, [pc, #280]	; c5fcc <__ieee754_logf+0x1e4>
   c5eb4:	ed9f 5a46 	vldr	s10, [pc, #280]	; c5fd0 <__ieee754_logf+0x1e8>
   c5eb8:	eddf 7a46 	vldr	s15, [pc, #280]	; c5fd4 <__ieee754_logf+0x1ec>
   c5ebc:	eddf 6a46 	vldr	s13, [pc, #280]	; c5fd8 <__ieee754_logf+0x1f0>
   c5ec0:	ee24 6a04 	vmul.f32	s12, s8, s8
   c5ec4:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   c5ec8:	ee26 7a06 	vmul.f32	s14, s12, s12
   c5ecc:	eee7 4a03 	vfma.f32	s9, s14, s6
   c5ed0:	eea7 5a23 	vfma.f32	s10, s14, s7
   c5ed4:	eee4 5a87 	vfma.f32	s11, s9, s14
   c5ed8:	eee5 6a07 	vfma.f32	s13, s10, s14
   c5edc:	eee5 7a87 	vfma.f32	s15, s11, s14
   c5ee0:	ee67 7a86 	vmul.f32	s15, s15, s12
   c5ee4:	eee6 7a87 	vfma.f32	s15, s13, s14
   c5ee8:	dd2a      	ble.n	c5f40 <__ieee754_logf+0x158>
   c5eea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c5eee:	ee20 7a07 	vmul.f32	s14, s0, s14
   c5ef2:	ee27 7a00 	vmul.f32	s14, s14, s0
   c5ef6:	bb4b      	cbnz	r3, c5f4c <__ieee754_logf+0x164>
   c5ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
   c5efc:	eea7 7ac4 	vfms.f32	s14, s15, s8
   c5f00:	ee30 0a47 	vsub.f32	s0, s0, s14
   c5f04:	4770      	bx	lr
   c5f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c5f0a:	eddf 6a34 	vldr	s13, [pc, #208]	; c5fdc <__ieee754_logf+0x1f4>
   c5f0e:	eef0 7a47 	vmov.f32	s15, s14
   c5f12:	eee0 7a66 	vfms.f32	s15, s0, s13
   c5f16:	ee20 7a00 	vmul.f32	s14, s0, s0
   c5f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
   c5f1e:	2b00      	cmp	r3, #0
   c5f20:	d0ee      	beq.n	c5f00 <__ieee754_logf+0x118>
   c5f22:	ee07 3a90 	vmov	s15, r3
   c5f26:	ed9f 6a2e 	vldr	s12, [pc, #184]	; c5fe0 <__ieee754_logf+0x1f8>
   c5f2a:	eddf 6a2e 	vldr	s13, [pc, #184]	; c5fe4 <__ieee754_logf+0x1fc>
   c5f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5f32:	eea7 7ac6 	vfms.f32	s14, s15, s12
   c5f36:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5f3a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   c5f3e:	4770      	bx	lr
   c5f40:	bb13      	cbnz	r3, c5f88 <__ieee754_logf+0x1a0>
   c5f42:	ee70 7a67 	vsub.f32	s15, s0, s15
   c5f46:	eea7 0ac4 	vfms.f32	s0, s15, s8
   c5f4a:	4770      	bx	lr
   c5f4c:	eddf 6a24 	vldr	s13, [pc, #144]	; c5fe0 <__ieee754_logf+0x1f8>
   c5f50:	ed9f 6a24 	vldr	s12, [pc, #144]	; c5fe4 <__ieee754_logf+0x1fc>
   c5f54:	ee77 7a87 	vadd.f32	s15, s15, s14
   c5f58:	ee62 6aa6 	vmul.f32	s13, s5, s13
   c5f5c:	eee7 6a84 	vfma.f32	s13, s15, s8
   c5f60:	ee37 7a66 	vsub.f32	s14, s14, s13
   c5f64:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5f68:	ee92 0a86 	vfnms.f32	s0, s5, s12
   c5f6c:	4770      	bx	lr
   c5f6e:	ee07 3a90 	vmov	s15, r3
   c5f72:	ed9f 0a1b 	vldr	s0, [pc, #108]	; c5fe0 <__ieee754_logf+0x1f8>
   c5f76:	ed9f 7a1b 	vldr	s14, [pc, #108]	; c5fe4 <__ieee754_logf+0x1fc>
   c5f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5f7e:	ee27 0a80 	vmul.f32	s0, s15, s0
   c5f82:	eea7 0a87 	vfma.f32	s0, s15, s14
   c5f86:	4770      	bx	lr
   c5f88:	ed9f 7a15 	vldr	s14, [pc, #84]	; c5fe0 <__ieee754_logf+0x1f8>
   c5f8c:	eddf 6a15 	vldr	s13, [pc, #84]	; c5fe4 <__ieee754_logf+0x1fc>
   c5f90:	ee70 7a67 	vsub.f32	s15, s0, s15
   c5f94:	ee27 7a62 	vnmul.f32	s14, s14, s5
   c5f98:	eea7 7a84 	vfma.f32	s14, s15, s8
   c5f9c:	ee37 0a40 	vsub.f32	s0, s14, s0
   c5fa0:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   c5fa4:	4770      	bx	lr
   c5fa6:	bf00      	nop
   c5fa8:	004afb20 	.word	0x004afb20
   c5fac:	007ffff0 	.word	0x007ffff0
   c5fb0:	00000000 	.word	0x00000000
   c5fb4:	cc000000 	.word	0xcc000000
   c5fb8:	4c000000 	.word	0x4c000000
   c5fbc:	ffcf5c30 	.word	0xffcf5c30
   c5fc0:	3e178897 	.word	0x3e178897
   c5fc4:	3e3a3325 	.word	0x3e3a3325
   c5fc8:	3e924925 	.word	0x3e924925
   c5fcc:	3e1cd04f 	.word	0x3e1cd04f
   c5fd0:	3e638e29 	.word	0x3e638e29
   c5fd4:	3f2aaaab 	.word	0x3f2aaaab
   c5fd8:	3ecccccd 	.word	0x3ecccccd
   c5fdc:	3eaaaaab 	.word	0x3eaaaaab
   c5fe0:	3717f7d1 	.word	0x3717f7d1
   c5fe4:	3f317180 	.word	0x3f317180

000c5fe8 <__ieee754_rem_pio2f>:
   c5fe8:	b570      	push	{r4, r5, r6, lr}
   c5fea:	ee10 3a10 	vmov	r3, s0
   c5fee:	4a89      	ldr	r2, [pc, #548]	; (c6214 <__ieee754_rem_pio2f+0x22c>)
   c5ff0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c5ff4:	4294      	cmp	r4, r2
   c5ff6:	b086      	sub	sp, #24
   c5ff8:	4605      	mov	r5, r0
   c5ffa:	dd70      	ble.n	c60de <__ieee754_rem_pio2f+0xf6>
   c5ffc:	4a86      	ldr	r2, [pc, #536]	; (c6218 <__ieee754_rem_pio2f+0x230>)
   c5ffe:	4294      	cmp	r4, r2
   c6000:	ee10 6a10 	vmov	r6, s0
   c6004:	dc22      	bgt.n	c604c <__ieee754_rem_pio2f+0x64>
   c6006:	2b00      	cmp	r3, #0
   c6008:	eddf 7a84 	vldr	s15, [pc, #528]	; c621c <__ieee754_rem_pio2f+0x234>
   c600c:	4a84      	ldr	r2, [pc, #528]	; (c6220 <__ieee754_rem_pio2f+0x238>)
   c600e:	f024 040f 	bic.w	r4, r4, #15
   c6012:	eeb0 7a40 	vmov.f32	s14, s0
   c6016:	f340 80e4 	ble.w	c61e2 <__ieee754_rem_pio2f+0x1fa>
   c601a:	4294      	cmp	r4, r2
   c601c:	ee70 7a67 	vsub.f32	s15, s0, s15
   c6020:	bf09      	itett	eq
   c6022:	eddf 6a80 	vldreq	s13, [pc, #512]	; c6224 <__ieee754_rem_pio2f+0x23c>
   c6026:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c6228 <__ieee754_rem_pio2f+0x240>
   c602a:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c622c <__ieee754_rem_pio2f+0x244>
   c602e:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c6032:	2001      	movs	r0, #1
   c6034:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c6038:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c603c:	edc5 6a00 	vstr	s13, [r5]
   c6040:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6044:	edc5 7a01 	vstr	s15, [r5, #4]
   c6048:	b006      	add	sp, #24
   c604a:	bd70      	pop	{r4, r5, r6, pc}
   c604c:	4a78      	ldr	r2, [pc, #480]	; (c6230 <__ieee754_rem_pio2f+0x248>)
   c604e:	4294      	cmp	r4, r2
   c6050:	dd54      	ble.n	c60fc <__ieee754_rem_pio2f+0x114>
   c6052:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c6056:	da49      	bge.n	c60ec <__ieee754_rem_pio2f+0x104>
   c6058:	15e2      	asrs	r2, r4, #23
   c605a:	3a86      	subs	r2, #134	; 0x86
   c605c:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c6060:	ee07 3a90 	vmov	s15, r3
   c6064:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c6068:	eddf 6a72 	vldr	s13, [pc, #456]	; c6234 <__ieee754_rem_pio2f+0x24c>
   c606c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c6070:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6074:	ed8d 7a03 	vstr	s14, [sp, #12]
   c6078:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c607c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c6080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c6084:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6088:	ed8d 7a04 	vstr	s14, [sp, #16]
   c608c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c6090:	eef5 7a40 	vcmp.f32	s15, #0.0
   c6094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c6098:	edcd 7a05 	vstr	s15, [sp, #20]
   c609c:	f040 8090 	bne.w	c61c0 <__ieee754_rem_pio2f+0x1d8>
   c60a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c60a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c60a8:	bf14      	ite	ne
   c60aa:	2302      	movne	r3, #2
   c60ac:	2301      	moveq	r3, #1
   c60ae:	4962      	ldr	r1, [pc, #392]	; (c6238 <__ieee754_rem_pio2f+0x250>)
   c60b0:	9101      	str	r1, [sp, #4]
   c60b2:	2102      	movs	r1, #2
   c60b4:	9100      	str	r1, [sp, #0]
   c60b6:	a803      	add	r0, sp, #12
   c60b8:	4629      	mov	r1, r5
   c60ba:	f000 f94d 	bl	c6358 <__kernel_rem_pio2f>
   c60be:	2e00      	cmp	r6, #0
   c60c0:	dac2      	bge.n	c6048 <__ieee754_rem_pio2f+0x60>
   c60c2:	ed95 7a00 	vldr	s14, [r5]
   c60c6:	edd5 7a01 	vldr	s15, [r5, #4]
   c60ca:	eeb1 7a47 	vneg.f32	s14, s14
   c60ce:	eef1 7a67 	vneg.f32	s15, s15
   c60d2:	ed85 7a00 	vstr	s14, [r5]
   c60d6:	edc5 7a01 	vstr	s15, [r5, #4]
   c60da:	4240      	negs	r0, r0
   c60dc:	e7b4      	b.n	c6048 <__ieee754_rem_pio2f+0x60>
   c60de:	2200      	movs	r2, #0
   c60e0:	ed85 0a00 	vstr	s0, [r5]
   c60e4:	6042      	str	r2, [r0, #4]
   c60e6:	2000      	movs	r0, #0
   c60e8:	b006      	add	sp, #24
   c60ea:	bd70      	pop	{r4, r5, r6, pc}
   c60ec:	ee70 7a40 	vsub.f32	s15, s0, s0
   c60f0:	2000      	movs	r0, #0
   c60f2:	edc5 7a01 	vstr	s15, [r5, #4]
   c60f6:	edc5 7a00 	vstr	s15, [r5]
   c60fa:	e7a5      	b.n	c6048 <__ieee754_rem_pio2f+0x60>
   c60fc:	f000 fcba 	bl	c6a74 <fabsf>
   c6100:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c623c <__ieee754_rem_pio2f+0x254>
   c6104:	ed9f 6a45 	vldr	s12, [pc, #276]	; c621c <__ieee754_rem_pio2f+0x234>
   c6108:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c610c:	eee0 7a07 	vfma.f32	s15, s0, s14
   c6110:	ed9f 7a45 	vldr	s14, [pc, #276]	; c6228 <__ieee754_rem_pio2f+0x240>
   c6114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c6118:	ee17 0a90 	vmov	r0, s15
   c611c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c6120:	281f      	cmp	r0, #31
   c6122:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c6126:	ee66 7a87 	vmul.f32	s15, s13, s14
   c612a:	eeb1 6a66 	vneg.f32	s12, s13
   c612e:	dc1e      	bgt.n	c616e <__ieee754_rem_pio2f+0x186>
   c6130:	4a43      	ldr	r2, [pc, #268]	; (c6240 <__ieee754_rem_pio2f+0x258>)
   c6132:	1e41      	subs	r1, r0, #1
   c6134:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c6138:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c613c:	4293      	cmp	r3, r2
   c613e:	d016      	beq.n	c616e <__ieee754_rem_pio2f+0x186>
   c6140:	ee30 7a67 	vsub.f32	s14, s0, s15
   c6144:	ed85 7a00 	vstr	s14, [r5]
   c6148:	ee30 0a47 	vsub.f32	s0, s0, s14
   c614c:	2e00      	cmp	r6, #0
   c614e:	ee30 0a67 	vsub.f32	s0, s0, s15
   c6152:	ed85 0a01 	vstr	s0, [r5, #4]
   c6156:	f6bf af77 	bge.w	c6048 <__ieee754_rem_pio2f+0x60>
   c615a:	eeb1 7a47 	vneg.f32	s14, s14
   c615e:	eeb1 0a40 	vneg.f32	s0, s0
   c6162:	ed85 7a00 	vstr	s14, [r5]
   c6166:	ed85 0a01 	vstr	s0, [r5, #4]
   c616a:	4240      	negs	r0, r0
   c616c:	e76c      	b.n	c6048 <__ieee754_rem_pio2f+0x60>
   c616e:	ee30 7a67 	vsub.f32	s14, s0, s15
   c6172:	15e2      	asrs	r2, r4, #23
   c6174:	ee17 3a10 	vmov	r3, s14
   c6178:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c617c:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c6180:	2c08      	cmp	r4, #8
   c6182:	dddf      	ble.n	c6144 <__ieee754_rem_pio2f+0x15c>
   c6184:	eddf 7a27 	vldr	s15, [pc, #156]	; c6224 <__ieee754_rem_pio2f+0x23c>
   c6188:	ed9f 7a28 	vldr	s14, [pc, #160]	; c622c <__ieee754_rem_pio2f+0x244>
   c618c:	eef0 5a40 	vmov.f32	s11, s0
   c6190:	eee6 5a27 	vfma.f32	s11, s12, s15
   c6194:	ee30 0a65 	vsub.f32	s0, s0, s11
   c6198:	eea6 0a27 	vfma.f32	s0, s12, s15
   c619c:	eef0 7a40 	vmov.f32	s15, s0
   c61a0:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c61a4:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c61a8:	ee17 3a10 	vmov	r3, s14
   c61ac:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c61b0:	1ad2      	subs	r2, r2, r3
   c61b2:	2a19      	cmp	r2, #25
   c61b4:	dc06      	bgt.n	c61c4 <__ieee754_rem_pio2f+0x1dc>
   c61b6:	eeb0 0a65 	vmov.f32	s0, s11
   c61ba:	ed85 7a00 	vstr	s14, [r5]
   c61be:	e7c3      	b.n	c6148 <__ieee754_rem_pio2f+0x160>
   c61c0:	2303      	movs	r3, #3
   c61c2:	e774      	b.n	c60ae <__ieee754_rem_pio2f+0xc6>
   c61c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c6244 <__ieee754_rem_pio2f+0x25c>
   c61c8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c6248 <__ieee754_rem_pio2f+0x260>
   c61cc:	eeb0 0a65 	vmov.f32	s0, s11
   c61d0:	eea6 0a07 	vfma.f32	s0, s12, s14
   c61d4:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c61d8:	eee6 7a07 	vfma.f32	s15, s12, s14
   c61dc:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c61e0:	e7ae      	b.n	c6140 <__ieee754_rem_pio2f+0x158>
   c61e2:	4294      	cmp	r4, r2
   c61e4:	ee70 7a27 	vadd.f32	s15, s0, s15
   c61e8:	bf09      	itett	eq
   c61ea:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c6224 <__ieee754_rem_pio2f+0x23c>
   c61ee:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c6228 <__ieee754_rem_pio2f+0x240>
   c61f2:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c622c <__ieee754_rem_pio2f+0x244>
   c61f6:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c61fa:	f04f 30ff 	mov.w	r0, #4294967295
   c61fe:	ee77 6a87 	vadd.f32	s13, s15, s14
   c6202:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c6206:	edc5 6a00 	vstr	s13, [r5]
   c620a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c620e:	edc5 7a01 	vstr	s15, [r5, #4]
   c6212:	e719      	b.n	c6048 <__ieee754_rem_pio2f+0x60>
   c6214:	3f490fd8 	.word	0x3f490fd8
   c6218:	4016cbe3 	.word	0x4016cbe3
   c621c:	3fc90f80 	.word	0x3fc90f80
   c6220:	3fc90fd0 	.word	0x3fc90fd0
   c6224:	37354400 	.word	0x37354400
   c6228:	37354443 	.word	0x37354443
   c622c:	2e85a308 	.word	0x2e85a308
   c6230:	43490f80 	.word	0x43490f80
   c6234:	43800000 	.word	0x43800000
   c6238:	000c9a38 	.word	0x000c9a38
   c623c:	3f22f984 	.word	0x3f22f984
   c6240:	000c99b8 	.word	0x000c99b8
   c6244:	2e85a300 	.word	0x2e85a300
   c6248:	248d3132 	.word	0x248d3132

000c624c <__ieee754_sqrtf>:
   c624c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c6250:	4770      	bx	lr
   c6252:	bf00      	nop

000c6254 <__kernel_cosf>:
   c6254:	ee10 3a10 	vmov	r3, s0
   c6258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c625c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c6260:	da2c      	bge.n	c62bc <__kernel_cosf+0x68>
   c6262:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c6266:	ee17 3a90 	vmov	r3, s15
   c626a:	2b00      	cmp	r3, #0
   c626c:	d060      	beq.n	c6330 <__kernel_cosf+0xdc>
   c626e:	ee20 7a00 	vmul.f32	s14, s0, s0
   c6272:	eddf 7a31 	vldr	s15, [pc, #196]	; c6338 <__kernel_cosf+0xe4>
   c6276:	ed9f 5a31 	vldr	s10, [pc, #196]	; c633c <__kernel_cosf+0xe8>
   c627a:	eddf 5a31 	vldr	s11, [pc, #196]	; c6340 <__kernel_cosf+0xec>
   c627e:	ed9f 6a31 	vldr	s12, [pc, #196]	; c6344 <__kernel_cosf+0xf0>
   c6282:	eddf 6a31 	vldr	s13, [pc, #196]	; c6348 <__kernel_cosf+0xf4>
   c6286:	eea7 5a27 	vfma.f32	s10, s14, s15
   c628a:	eddf 7a30 	vldr	s15, [pc, #192]	; c634c <__kernel_cosf+0xf8>
   c628e:	eee7 5a05 	vfma.f32	s11, s14, s10
   c6292:	eea7 6a25 	vfma.f32	s12, s14, s11
   c6296:	eee7 7a06 	vfma.f32	s15, s14, s12
   c629a:	eee7 6a27 	vfma.f32	s13, s14, s15
   c629e:	ee67 6a26 	vmul.f32	s13, s14, s13
   c62a2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c62a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c62aa:	eee7 0a26 	vfma.f32	s1, s14, s13
   c62ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c62b2:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c62b6:	ee30 0a60 	vsub.f32	s0, s0, s1
   c62ba:	4770      	bx	lr
   c62bc:	ee20 7a00 	vmul.f32	s14, s0, s0
   c62c0:	eddf 7a1d 	vldr	s15, [pc, #116]	; c6338 <__kernel_cosf+0xe4>
   c62c4:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c633c <__kernel_cosf+0xe8>
   c62c8:	eddf 5a1d 	vldr	s11, [pc, #116]	; c6340 <__kernel_cosf+0xec>
   c62cc:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c6344 <__kernel_cosf+0xf0>
   c62d0:	eddf 6a1d 	vldr	s13, [pc, #116]	; c6348 <__kernel_cosf+0xf4>
   c62d4:	4a1e      	ldr	r2, [pc, #120]	; (c6350 <__kernel_cosf+0xfc>)
   c62d6:	eea7 5a27 	vfma.f32	s10, s14, s15
   c62da:	4293      	cmp	r3, r2
   c62dc:	eddf 7a1b 	vldr	s15, [pc, #108]	; c634c <__kernel_cosf+0xf8>
   c62e0:	eee5 5a07 	vfma.f32	s11, s10, s14
   c62e4:	eea5 6a87 	vfma.f32	s12, s11, s14
   c62e8:	eee6 7a07 	vfma.f32	s15, s12, s14
   c62ec:	eee7 6a87 	vfma.f32	s13, s15, s14
   c62f0:	ee66 6a87 	vmul.f32	s13, s13, s14
   c62f4:	ddd5      	ble.n	c62a2 <__kernel_cosf+0x4e>
   c62f6:	4a17      	ldr	r2, [pc, #92]	; (c6354 <__kernel_cosf+0x100>)
   c62f8:	4293      	cmp	r3, r2
   c62fa:	dc14      	bgt.n	c6326 <__kernel_cosf+0xd2>
   c62fc:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c6300:	ee07 3a90 	vmov	s15, r3
   c6304:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c6308:	ee36 6a67 	vsub.f32	s12, s12, s15
   c630c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c6310:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c6314:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c6318:	eee7 0a26 	vfma.f32	s1, s14, s13
   c631c:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c6320:	ee36 0a60 	vsub.f32	s0, s12, s1
   c6324:	4770      	bx	lr
   c6326:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c632a:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c632e:	e7ed      	b.n	c630c <__kernel_cosf+0xb8>
   c6330:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6334:	4770      	bx	lr
   c6336:	bf00      	nop
   c6338:	ad47d74e 	.word	0xad47d74e
   c633c:	310f74f6 	.word	0x310f74f6
   c6340:	b493f27c 	.word	0xb493f27c
   c6344:	37d00d01 	.word	0x37d00d01
   c6348:	3d2aaaab 	.word	0x3d2aaaab
   c634c:	bab60b61 	.word	0xbab60b61
   c6350:	3e999999 	.word	0x3e999999
   c6354:	3f480000 	.word	0x3f480000

000c6358 <__kernel_rem_pio2f>:
   c6358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c635c:	ed2d 8b04 	vpush	{d8-d9}
   c6360:	b0db      	sub	sp, #364	; 0x16c
   c6362:	461c      	mov	r4, r3
   c6364:	9303      	str	r3, [sp, #12]
   c6366:	9106      	str	r1, [sp, #24]
   c6368:	4ba3      	ldr	r3, [pc, #652]	; (c65f8 <__kernel_rem_pio2f+0x2a0>)
   c636a:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c636c:	9208      	str	r2, [sp, #32]
   c636e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c6372:	1d11      	adds	r1, r2, #4
   c6374:	4682      	mov	sl, r0
   c6376:	f104 38ff 	add.w	r8, r4, #4294967295
   c637a:	f2c0 82a2 	blt.w	c68c2 <__kernel_rem_pio2f+0x56a>
   c637e:	1ed3      	subs	r3, r2, #3
   c6380:	bf44      	itt	mi
   c6382:	4613      	movmi	r3, r2
   c6384:	3304      	addmi	r3, #4
   c6386:	10db      	asrs	r3, r3, #3
   c6388:	9302      	str	r3, [sp, #8]
   c638a:	3301      	adds	r3, #1
   c638c:	00db      	lsls	r3, r3, #3
   c638e:	9307      	str	r3, [sp, #28]
   c6390:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c6394:	1a9b      	subs	r3, r3, r2
   c6396:	9305      	str	r3, [sp, #20]
   c6398:	9b02      	ldr	r3, [sp, #8]
   c639a:	eb15 0108 	adds.w	r1, r5, r8
   c639e:	eba3 0308 	sub.w	r3, r3, r8
   c63a2:	d416      	bmi.n	c63d2 <__kernel_rem_pio2f+0x7a>
   c63a4:	3101      	adds	r1, #1
   c63a6:	ed9f 7a95 	vldr	s14, [pc, #596]	; c65fc <__kernel_rem_pio2f+0x2a4>
   c63aa:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c63ac:	4419      	add	r1, r3
   c63ae:	aa1e      	add	r2, sp, #120	; 0x78
   c63b0:	2b00      	cmp	r3, #0
   c63b2:	bfa4      	itt	ge
   c63b4:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c63b8:	ee07 4a90 	vmovge	s15, r4
   c63bc:	f103 0301 	add.w	r3, r3, #1
   c63c0:	bfac      	ite	ge
   c63c2:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c63c6:	eef0 7a47 	vmovlt.f32	s15, s14
   c63ca:	428b      	cmp	r3, r1
   c63cc:	ece2 7a01 	vstmia	r2!, {s15}
   c63d0:	d1ee      	bne.n	c63b0 <__kernel_rem_pio2f+0x58>
   c63d2:	2d00      	cmp	r5, #0
   c63d4:	f2c0 82e5 	blt.w	c69a2 <__kernel_rem_pio2f+0x64a>
   c63d8:	9b03      	ldr	r3, [sp, #12]
   c63da:	a91e      	add	r1, sp, #120	; 0x78
   c63dc:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c63e0:	ae46      	add	r6, sp, #280	; 0x118
   c63e2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c63e6:	4640      	mov	r0, r8
   c63e8:	18ef      	adds	r7, r5, r3
   c63ea:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c63ee:	f1b8 0f00 	cmp.w	r8, #0
   c63f2:	eddf 7a82 	vldr	s15, [pc, #520]	; c65fc <__kernel_rem_pio2f+0x2a4>
   c63f6:	db09      	blt.n	c640c <__kernel_rem_pio2f+0xb4>
   c63f8:	4622      	mov	r2, r4
   c63fa:	4653      	mov	r3, sl
   c63fc:	ecf3 6a01 	vldmia	r3!, {s13}
   c6400:	ed32 7a01 	vldmdb	r2!, {s14}
   c6404:	428b      	cmp	r3, r1
   c6406:	eee6 7a87 	vfma.f32	s15, s13, s14
   c640a:	d1f7      	bne.n	c63fc <__kernel_rem_pio2f+0xa4>
   c640c:	3001      	adds	r0, #1
   c640e:	42b8      	cmp	r0, r7
   c6410:	ece6 7a01 	vstmia	r6!, {s15}
   c6414:	f104 0404 	add.w	r4, r4, #4
   c6418:	d1e9      	bne.n	c63ee <__kernel_rem_pio2f+0x96>
   c641a:	ab09      	add	r3, sp, #36	; 0x24
   c641c:	af0a      	add	r7, sp, #40	; 0x28
   c641e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c6422:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c6426:	3b08      	subs	r3, #8
   c6428:	ed9f 9a76 	vldr	s18, [pc, #472]	; c6604 <__kernel_rem_pio2f+0x2ac>
   c642c:	eddf 8a74 	vldr	s17, [pc, #464]	; c6600 <__kernel_rem_pio2f+0x2a8>
   c6430:	9805      	ldr	r0, [sp, #20]
   c6432:	9304      	str	r3, [sp, #16]
   c6434:	eb0a 040c 	add.w	r4, sl, ip
   c6438:	ae46      	add	r6, sp, #280	; 0x118
   c643a:	9500      	str	r5, [sp, #0]
   c643c:	ab5a      	add	r3, sp, #360	; 0x168
   c643e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c6442:	2d00      	cmp	r5, #0
   c6444:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c6448:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c644c:	dd16      	ble.n	c647c <__kernel_rem_pio2f+0x124>
   c644e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c6452:	463a      	mov	r2, r7
   c6454:	ee60 7a09 	vmul.f32	s15, s0, s18
   c6458:	eeb0 7a40 	vmov.f32	s14, s0
   c645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c6460:	ed73 6a01 	vldmdb	r3!, {s13}
   c6464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c6468:	42b3      	cmp	r3, r6
   c646a:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c646e:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c6472:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c6476:	eca2 7a01 	vstmia	r2!, {s14}
   c647a:	d1eb      	bne.n	c6454 <__kernel_rem_pio2f+0xfc>
   c647c:	9001      	str	r0, [sp, #4]
   c647e:	f000 fb15 	bl	c6aac <scalbnf>
   c6482:	eeb0 8a40 	vmov.f32	s16, s0
   c6486:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c648a:	ee28 0a00 	vmul.f32	s0, s16, s0
   c648e:	f7fe ffdf 	bl	c5450 <floorf>
   c6492:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c6496:	eea0 8a67 	vfms.f32	s16, s0, s15
   c649a:	9801      	ldr	r0, [sp, #4]
   c649c:	2800      	cmp	r0, #0
   c649e:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c64a2:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c64a6:	ee38 8a67 	vsub.f32	s16, s16, s15
   c64aa:	dd79      	ble.n	c65a0 <__kernel_rem_pio2f+0x248>
   c64ac:	f105 3eff 	add.w	lr, r5, #4294967295
   c64b0:	f1c0 0308 	rsb	r3, r0, #8
   c64b4:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c64b8:	fa41 fc03 	asr.w	ip, r1, r3
   c64bc:	fa0c f303 	lsl.w	r3, ip, r3
   c64c0:	1acb      	subs	r3, r1, r3
   c64c2:	f1c0 0207 	rsb	r2, r0, #7
   c64c6:	ee19 1a90 	vmov	r1, s19
   c64ca:	fa43 f202 	asr.w	r2, r3, r2
   c64ce:	4461      	add	r1, ip
   c64d0:	2a00      	cmp	r2, #0
   c64d2:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c64d6:	ee09 1a90 	vmov	s19, r1
   c64da:	dc69      	bgt.n	c65b0 <__kernel_rem_pio2f+0x258>
   c64dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c64e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c64e4:	f040 80c1 	bne.w	c666a <__kernel_rem_pio2f+0x312>
   c64e8:	9b00      	ldr	r3, [sp, #0]
   c64ea:	f105 3bff 	add.w	fp, r5, #4294967295
   c64ee:	455b      	cmp	r3, fp
   c64f0:	dc10      	bgt.n	c6514 <__kernel_rem_pio2f+0x1bc>
   c64f2:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c64f6:	3b01      	subs	r3, #1
   c64f8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c64fc:	2100      	movs	r1, #0
   c64fe:	4694      	mov	ip, r2
   c6500:	f853 2904 	ldr.w	r2, [r3], #-4
   c6504:	454b      	cmp	r3, r9
   c6506:	ea41 0102 	orr.w	r1, r1, r2
   c650a:	d1f9      	bne.n	c6500 <__kernel_rem_pio2f+0x1a8>
   c650c:	4662      	mov	r2, ip
   c650e:	2900      	cmp	r1, #0
   c6510:	f040 80f3 	bne.w	c66fa <__kernel_rem_pio2f+0x3a2>
   c6514:	9b00      	ldr	r3, [sp, #0]
   c6516:	3b01      	subs	r3, #1
   c6518:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c651c:	2b00      	cmp	r3, #0
   c651e:	f040 80e8 	bne.w	c66f2 <__kernel_rem_pio2f+0x39a>
   c6522:	9b04      	ldr	r3, [sp, #16]
   c6524:	f04f 0c01 	mov.w	ip, #1
   c6528:	f853 2904 	ldr.w	r2, [r3], #-4
   c652c:	f10c 0c01 	add.w	ip, ip, #1
   c6530:	2a00      	cmp	r2, #0
   c6532:	d0f9      	beq.n	c6528 <__kernel_rem_pio2f+0x1d0>
   c6534:	1c6b      	adds	r3, r5, #1
   c6536:	44ac      	add	ip, r5
   c6538:	469e      	mov	lr, r3
   c653a:	9a03      	ldr	r2, [sp, #12]
   c653c:	1951      	adds	r1, r2, r5
   c653e:	9a02      	ldr	r2, [sp, #8]
   c6540:	eb02 0b03 	add.w	fp, r2, r3
   c6544:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c6548:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c654a:	f10b 3bff 	add.w	fp, fp, #4294967295
   c654e:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c6552:	ab1e      	add	r3, sp, #120	; 0x78
   c6554:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c6558:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c655c:	eddb 7a01 	vldr	s15, [fp, #4]
   c6560:	ed9f 7a26 	vldr	s14, [pc, #152]	; c65fc <__kernel_rem_pio2f+0x2a4>
   c6564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c6568:	f1b8 0f00 	cmp.w	r8, #0
   c656c:	f10b 0b04 	add.w	fp, fp, #4
   c6570:	edc1 7a00 	vstr	s15, [r1]
   c6574:	460a      	mov	r2, r1
   c6576:	f101 0104 	add.w	r1, r1, #4
   c657a:	db09      	blt.n	c6590 <__kernel_rem_pio2f+0x238>
   c657c:	4653      	mov	r3, sl
   c657e:	e001      	b.n	c6584 <__kernel_rem_pio2f+0x22c>
   c6580:	ed72 7a01 	vldmdb	r2!, {s15}
   c6584:	ecf3 6a01 	vldmia	r3!, {s13}
   c6588:	42a3      	cmp	r3, r4
   c658a:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c658e:	d1f7      	bne.n	c6580 <__kernel_rem_pio2f+0x228>
   c6590:	f10e 0e01 	add.w	lr, lr, #1
   c6594:	45e6      	cmp	lr, ip
   c6596:	eca5 7a01 	vstmia	r5!, {s14}
   c659a:	dddf      	ble.n	c655c <__kernel_rem_pio2f+0x204>
   c659c:	4665      	mov	r5, ip
   c659e:	e74d      	b.n	c643c <__kernel_rem_pio2f+0xe4>
   c65a0:	f040 809d 	bne.w	c66de <__kernel_rem_pio2f+0x386>
   c65a4:	1e6b      	subs	r3, r5, #1
   c65a6:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c65aa:	1212      	asrs	r2, r2, #8
   c65ac:	2a00      	cmp	r2, #0
   c65ae:	dd95      	ble.n	c64dc <__kernel_rem_pio2f+0x184>
   c65b0:	ee19 3a90 	vmov	r3, s19
   c65b4:	2d00      	cmp	r5, #0
   c65b6:	f103 0301 	add.w	r3, r3, #1
   c65ba:	ee09 3a90 	vmov	s19, r3
   c65be:	f340 8196 	ble.w	c68ee <__kernel_rem_pio2f+0x596>
   c65c2:	6839      	ldr	r1, [r7, #0]
   c65c4:	2900      	cmp	r1, #0
   c65c6:	f040 8080 	bne.w	c66ca <__kernel_rem_pio2f+0x372>
   c65ca:	2d01      	cmp	r5, #1
   c65cc:	d026      	beq.n	c661c <__kernel_rem_pio2f+0x2c4>
   c65ce:	463b      	mov	r3, r7
   c65d0:	f04f 0c01 	mov.w	ip, #1
   c65d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c65d8:	2900      	cmp	r1, #0
   c65da:	d07a      	beq.n	c66d2 <__kernel_rem_pio2f+0x37a>
   c65dc:	f10c 0301 	add.w	r3, ip, #1
   c65e0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c65e4:	429d      	cmp	r5, r3
   c65e6:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c65ea:	dd16      	ble.n	c661a <__kernel_rem_pio2f+0x2c2>
   c65ec:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c65f0:	44bb      	add	fp, r7
   c65f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c65f6:	e00a      	b.n	c660e <__kernel_rem_pio2f+0x2b6>
   c65f8:	000c9d7c 	.word	0x000c9d7c
   c65fc:	00000000 	.word	0x00000000
   c6600:	43800000 	.word	0x43800000
   c6604:	3b800000 	.word	0x3b800000
   c6608:	3fc90000 	.word	0x3fc90000
   c660c:	6819      	ldr	r1, [r3, #0]
   c660e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c6612:	f843 1b04 	str.w	r1, [r3], #4
   c6616:	455b      	cmp	r3, fp
   c6618:	d1f8      	bne.n	c660c <__kernel_rem_pio2f+0x2b4>
   c661a:	2101      	movs	r1, #1
   c661c:	2800      	cmp	r0, #0
   c661e:	dd0c      	ble.n	c663a <__kernel_rem_pio2f+0x2e2>
   c6620:	2801      	cmp	r0, #1
   c6622:	f000 8145 	beq.w	c68b0 <__kernel_rem_pio2f+0x558>
   c6626:	2802      	cmp	r0, #2
   c6628:	d107      	bne.n	c663a <__kernel_rem_pio2f+0x2e2>
   c662a:	f105 3cff 	add.w	ip, r5, #4294967295
   c662e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c6632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c6636:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c663a:	2a02      	cmp	r2, #2
   c663c:	f47f af4e 	bne.w	c64dc <__kernel_rem_pio2f+0x184>
   c6640:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6644:	ee30 8a48 	vsub.f32	s16, s0, s16
   c6648:	2900      	cmp	r1, #0
   c664a:	f43f af47 	beq.w	c64dc <__kernel_rem_pio2f+0x184>
   c664e:	9209      	str	r2, [sp, #36]	; 0x24
   c6650:	9001      	str	r0, [sp, #4]
   c6652:	f000 fa2b 	bl	c6aac <scalbnf>
   c6656:	ee38 8a40 	vsub.f32	s16, s16, s0
   c665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c665c:	9801      	ldr	r0, [sp, #4]
   c665e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c6662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c6666:	f43f af3f 	beq.w	c64e8 <__kernel_rem_pio2f+0x190>
   c666a:	9202      	str	r2, [sp, #8]
   c666c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c6670:	eeb0 0a48 	vmov.f32	s0, s16
   c6674:	1a98      	subs	r0, r3, r2
   c6676:	9501      	str	r5, [sp, #4]
   c6678:	9d00      	ldr	r5, [sp, #0]
   c667a:	f000 fa17 	bl	c6aac <scalbnf>
   c667e:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c6600 <__kernel_rem_pio2f+0x2a8>
   c6682:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c6686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c668a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c668e:	f2c0 8156 	blt.w	c693e <__kernel_rem_pio2f+0x5e6>
   c6692:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c6604 <__kernel_rem_pio2f+0x2ac>
   c6696:	9905      	ldr	r1, [sp, #20]
   c6698:	ee60 7a27 	vmul.f32	s15, s0, s15
   c669c:	3108      	adds	r1, #8
   c669e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c66a2:	9105      	str	r1, [sp, #20]
   c66a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c66a8:	f103 0b01 	add.w	fp, r3, #1
   c66ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c66b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c66b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c66b8:	ee10 1a10 	vmov	r1, s0
   c66bc:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c66c0:	ee17 3a90 	vmov	r3, s15
   c66c4:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c66c8:	e02e      	b.n	c6728 <__kernel_rem_pio2f+0x3d0>
   c66ca:	2301      	movs	r3, #1
   c66cc:	f04f 0c00 	mov.w	ip, #0
   c66d0:	e786      	b.n	c65e0 <__kernel_rem_pio2f+0x288>
   c66d2:	f10c 0c01 	add.w	ip, ip, #1
   c66d6:	45ac      	cmp	ip, r5
   c66d8:	f47f af7c 	bne.w	c65d4 <__kernel_rem_pio2f+0x27c>
   c66dc:	e79e      	b.n	c661c <__kernel_rem_pio2f+0x2c4>
   c66de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c66e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c66e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c66ea:	f280 80ef 	bge.w	c68cc <__kernel_rem_pio2f+0x574>
   c66ee:	2200      	movs	r2, #0
   c66f0:	e6f4      	b.n	c64dc <__kernel_rem_pio2f+0x184>
   c66f2:	1c6b      	adds	r3, r5, #1
   c66f4:	469e      	mov	lr, r3
   c66f6:	469c      	mov	ip, r3
   c66f8:	e71f      	b.n	c653a <__kernel_rem_pio2f+0x1e2>
   c66fa:	9905      	ldr	r1, [sp, #20]
   c66fc:	f1a1 0008 	sub.w	r0, r1, #8
   c6700:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c6704:	9005      	str	r0, [sp, #20]
   c6706:	462b      	mov	r3, r5
   c6708:	9d00      	ldr	r5, [sp, #0]
   c670a:	b969      	cbnz	r1, c6728 <__kernel_rem_pio2f+0x3d0>
   c670c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c6710:	3b02      	subs	r3, #2
   c6712:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c6716:	4601      	mov	r1, r0
   c6718:	f853 0904 	ldr.w	r0, [r3], #-4
   c671c:	f10b 3bff 	add.w	fp, fp, #4294967295
   c6720:	3908      	subs	r1, #8
   c6722:	2800      	cmp	r0, #0
   c6724:	d0f8      	beq.n	c6718 <__kernel_rem_pio2f+0x3c0>
   c6726:	9105      	str	r1, [sp, #20]
   c6728:	9805      	ldr	r0, [sp, #20]
   c672a:	9200      	str	r2, [sp, #0]
   c672c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c6730:	f000 f9bc 	bl	c6aac <scalbnf>
   c6734:	f1bb 0f00 	cmp.w	fp, #0
   c6738:	9a00      	ldr	r2, [sp, #0]
   c673a:	f2c0 8125 	blt.w	c6988 <__kernel_rem_pio2f+0x630>
   c673e:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c6742:	ab46      	add	r3, sp, #280	; 0x118
   c6744:	eb03 060e 	add.w	r6, r3, lr
   c6748:	f10e 0c04 	add.w	ip, lr, #4
   c674c:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c6604 <__kernel_rem_pio2f+0x2ac>
   c6750:	eb07 030c 	add.w	r3, r7, ip
   c6754:	1d31      	adds	r1, r6, #4
   c6756:	ed73 7a01 	vldmdb	r3!, {s15}
   c675a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c675e:	42bb      	cmp	r3, r7
   c6760:	ee67 7a80 	vmul.f32	s15, s15, s0
   c6764:	ee20 0a07 	vmul.f32	s0, s0, s14
   c6768:	ed61 7a01 	vstmdb	r1!, {s15}
   c676c:	d1f3      	bne.n	c6756 <__kernel_rem_pio2f+0x3fe>
   c676e:	2d00      	cmp	r5, #0
   c6770:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c6608 <__kernel_rem_pio2f+0x2b0>
   c6774:	f04f 0400 	mov.w	r4, #0
   c6778:	db20      	blt.n	c67bc <__kernel_rem_pio2f+0x464>
   c677a:	4892      	ldr	r0, [pc, #584]	; (c69c4 <__kernel_rem_pio2f+0x66c>)
   c677c:	eddf 7a92 	vldr	s15, [pc, #584]	; c69c8 <__kernel_rem_pio2f+0x670>
   c6780:	eeb0 7a46 	vmov.f32	s14, s12
   c6784:	4631      	mov	r1, r6
   c6786:	2300      	movs	r3, #0
   c6788:	e003      	b.n	c6792 <__kernel_rem_pio2f+0x43a>
   c678a:	429c      	cmp	r4, r3
   c678c:	db08      	blt.n	c67a0 <__kernel_rem_pio2f+0x448>
   c678e:	ecb0 7a01 	vldmia	r0!, {s14}
   c6792:	ecf1 6a01 	vldmia	r1!, {s13}
   c6796:	3301      	adds	r3, #1
   c6798:	429d      	cmp	r5, r3
   c679a:	eee6 7a87 	vfma.f32	s15, s13, s14
   c679e:	daf4      	bge.n	c678a <__kernel_rem_pio2f+0x432>
   c67a0:	ab5a      	add	r3, sp, #360	; 0x168
   c67a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c67a6:	45a3      	cmp	fp, r4
   c67a8:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c67ac:	f1a6 0604 	sub.w	r6, r6, #4
   c67b0:	f104 0301 	add.w	r3, r4, #1
   c67b4:	d005      	beq.n	c67c2 <__kernel_rem_pio2f+0x46a>
   c67b6:	2d00      	cmp	r5, #0
   c67b8:	461c      	mov	r4, r3
   c67ba:	dade      	bge.n	c677a <__kernel_rem_pio2f+0x422>
   c67bc:	eddf 7a82 	vldr	s15, [pc, #520]	; c69c8 <__kernel_rem_pio2f+0x670>
   c67c0:	e7ee      	b.n	c67a0 <__kernel_rem_pio2f+0x448>
   c67c2:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c67c4:	2902      	cmp	r1, #2
   c67c6:	dc1c      	bgt.n	c6802 <__kernel_rem_pio2f+0x4aa>
   c67c8:	2900      	cmp	r1, #0
   c67ca:	f300 8092 	bgt.w	c68f2 <__kernel_rem_pio2f+0x59a>
   c67ce:	d10f      	bne.n	c67f0 <__kernel_rem_pio2f+0x498>
   c67d0:	ab32      	add	r3, sp, #200	; 0xc8
   c67d2:	eddf 7a7d 	vldr	s15, [pc, #500]	; c69c8 <__kernel_rem_pio2f+0x670>
   c67d6:	449c      	add	ip, r3
   c67d8:	ed3c 7a01 	vldmdb	ip!, {s14}
   c67dc:	4563      	cmp	r3, ip
   c67de:	ee77 7a87 	vadd.f32	s15, s15, s14
   c67e2:	d1f9      	bne.n	c67d8 <__kernel_rem_pio2f+0x480>
   c67e4:	b10a      	cbz	r2, c67ea <__kernel_rem_pio2f+0x492>
   c67e6:	eef1 7a67 	vneg.f32	s15, s15
   c67ea:	9b06      	ldr	r3, [sp, #24]
   c67ec:	edc3 7a00 	vstr	s15, [r3]
   c67f0:	ee19 3a90 	vmov	r3, s19
   c67f4:	f003 0007 	and.w	r0, r3, #7
   c67f8:	b05b      	add	sp, #364	; 0x16c
   c67fa:	ecbd 8b04 	vpop	{d8-d9}
   c67fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c6802:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c6804:	2b03      	cmp	r3, #3
   c6806:	d1f3      	bne.n	c67f0 <__kernel_rem_pio2f+0x498>
   c6808:	f1bb 0f00 	cmp.w	fp, #0
   c680c:	f000 80d1 	beq.w	c69b2 <__kernel_rem_pio2f+0x65a>
   c6810:	ab5a      	add	r3, sp, #360	; 0x168
   c6812:	4473      	add	r3, lr
   c6814:	a932      	add	r1, sp, #200	; 0xc8
   c6816:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c681a:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c681e:	ed73 7a01 	vldmdb	r3!, {s15}
   c6822:	eef0 6a47 	vmov.f32	s13, s14
   c6826:	ee37 7a27 	vadd.f32	s14, s14, s15
   c682a:	4299      	cmp	r1, r3
   c682c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6830:	ed83 7a00 	vstr	s14, [r3]
   c6834:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c6838:	edc3 7a01 	vstr	s15, [r3, #4]
   c683c:	d1ef      	bne.n	c681e <__kernel_rem_pio2f+0x4c6>
   c683e:	f1bb 0f01 	cmp.w	fp, #1
   c6842:	f340 80b6 	ble.w	c69b2 <__kernel_rem_pio2f+0x65a>
   c6846:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c684a:	ab5a      	add	r3, sp, #360	; 0x168
   c684c:	f10b 3bff 	add.w	fp, fp, #4294967295
   c6850:	449e      	add	lr, r3
   c6852:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c6856:	f10b 0304 	add.w	r3, fp, #4
   c685a:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c685e:	440b      	add	r3, r1
   c6860:	a833      	add	r0, sp, #204	; 0xcc
   c6862:	ed73 7a01 	vldmdb	r3!, {s15}
   c6866:	eef0 6a47 	vmov.f32	s13, s14
   c686a:	ee37 7a27 	vadd.f32	s14, s14, s15
   c686e:	4298      	cmp	r0, r3
   c6870:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c6874:	ed83 7a00 	vstr	s14, [r3]
   c6878:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c687c:	edc3 7a01 	vstr	s15, [r3, #4]
   c6880:	d1ef      	bne.n	c6862 <__kernel_rem_pio2f+0x50a>
   c6882:	f10b 0b08 	add.w	fp, fp, #8
   c6886:	eddf 7a50 	vldr	s15, [pc, #320]	; c69c8 <__kernel_rem_pio2f+0x670>
   c688a:	eb01 030b 	add.w	r3, r1, fp
   c688e:	3108      	adds	r1, #8
   c6890:	ed33 7a01 	vldmdb	r3!, {s14}
   c6894:	4299      	cmp	r1, r3
   c6896:	ee77 7a87 	vadd.f32	s15, s15, s14
   c689a:	d1f9      	bne.n	c6890 <__kernel_rem_pio2f+0x538>
   c689c:	2a00      	cmp	r2, #0
   c689e:	d156      	bne.n	c694e <__kernel_rem_pio2f+0x5f6>
   c68a0:	9906      	ldr	r1, [sp, #24]
   c68a2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c68a4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c68a6:	600a      	str	r2, [r1, #0]
   c68a8:	604b      	str	r3, [r1, #4]
   c68aa:	edc1 7a02 	vstr	s15, [r1, #8]
   c68ae:	e79f      	b.n	c67f0 <__kernel_rem_pio2f+0x498>
   c68b0:	f105 3cff 	add.w	ip, r5, #4294967295
   c68b4:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c68b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c68bc:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c68c0:	e6bb      	b.n	c663a <__kernel_rem_pio2f+0x2e2>
   c68c2:	2308      	movs	r3, #8
   c68c4:	9307      	str	r3, [sp, #28]
   c68c6:	2300      	movs	r3, #0
   c68c8:	9302      	str	r3, [sp, #8]
   c68ca:	e561      	b.n	c6390 <__kernel_rem_pio2f+0x38>
   c68cc:	ee19 3a90 	vmov	r3, s19
   c68d0:	2d00      	cmp	r5, #0
   c68d2:	f103 0301 	add.w	r3, r3, #1
   c68d6:	ee09 3a90 	vmov	s19, r3
   c68da:	bfc8      	it	gt
   c68dc:	2202      	movgt	r2, #2
   c68de:	f73f ae70 	bgt.w	c65c2 <__kernel_rem_pio2f+0x26a>
   c68e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c68e6:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c68ea:	2202      	movs	r2, #2
   c68ec:	e5f6      	b.n	c64dc <__kernel_rem_pio2f+0x184>
   c68ee:	2100      	movs	r1, #0
   c68f0:	e694      	b.n	c661c <__kernel_rem_pio2f+0x2c4>
   c68f2:	a932      	add	r1, sp, #200	; 0xc8
   c68f4:	eddf 7a34 	vldr	s15, [pc, #208]	; c69c8 <__kernel_rem_pio2f+0x670>
   c68f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c68fc:	ed33 7a01 	vldmdb	r3!, {s14}
   c6900:	4299      	cmp	r1, r3
   c6902:	ee77 7a87 	vadd.f32	s15, s15, s14
   c6906:	d1f9      	bne.n	c68fc <__kernel_rem_pio2f+0x5a4>
   c6908:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c690c:	bb8a      	cbnz	r2, c6972 <__kernel_rem_pio2f+0x61a>
   c690e:	9b06      	ldr	r3, [sp, #24]
   c6910:	f1bb 0f00 	cmp.w	fp, #0
   c6914:	edc3 7a00 	vstr	s15, [r3]
   c6918:	ee77 7a67 	vsub.f32	s15, s14, s15
   c691c:	dd0b      	ble.n	c6936 <__kernel_rem_pio2f+0x5de>
   c691e:	a933      	add	r1, sp, #204	; 0xcc
   c6920:	2301      	movs	r3, #1
   c6922:	ecb1 7a01 	vldmia	r1!, {s14}
   c6926:	3301      	adds	r3, #1
   c6928:	459b      	cmp	fp, r3
   c692a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c692e:	daf8      	bge.n	c6922 <__kernel_rem_pio2f+0x5ca>
   c6930:	b10a      	cbz	r2, c6936 <__kernel_rem_pio2f+0x5de>
   c6932:	eef1 7a67 	vneg.f32	s15, s15
   c6936:	9b06      	ldr	r3, [sp, #24]
   c6938:	edc3 7a01 	vstr	s15, [r3, #4]
   c693c:	e758      	b.n	c67f0 <__kernel_rem_pio2f+0x498>
   c693e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c6942:	469b      	mov	fp, r3
   c6944:	ee10 1a10 	vmov	r1, s0
   c6948:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c694c:	e6ec      	b.n	c6728 <__kernel_rem_pio2f+0x3d0>
   c694e:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c6952:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c6956:	9b06      	ldr	r3, [sp, #24]
   c6958:	eef1 6a66 	vneg.f32	s13, s13
   c695c:	eeb1 7a47 	vneg.f32	s14, s14
   c6960:	eef1 7a67 	vneg.f32	s15, s15
   c6964:	edc3 6a00 	vstr	s13, [r3]
   c6968:	ed83 7a01 	vstr	s14, [r3, #4]
   c696c:	edc3 7a02 	vstr	s15, [r3, #8]
   c6970:	e73e      	b.n	c67f0 <__kernel_rem_pio2f+0x498>
   c6972:	9b06      	ldr	r3, [sp, #24]
   c6974:	eef1 6a67 	vneg.f32	s13, s15
   c6978:	f1bb 0f00 	cmp.w	fp, #0
   c697c:	ee77 7a67 	vsub.f32	s15, s14, s15
   c6980:	edc3 6a00 	vstr	s13, [r3]
   c6984:	dccb      	bgt.n	c691e <__kernel_rem_pio2f+0x5c6>
   c6986:	e7d4      	b.n	c6932 <__kernel_rem_pio2f+0x5da>
   c6988:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c698a:	2b02      	cmp	r3, #2
   c698c:	dc0d      	bgt.n	c69aa <__kernel_rem_pio2f+0x652>
   c698e:	2b00      	cmp	r3, #0
   c6990:	dc14      	bgt.n	c69bc <__kernel_rem_pio2f+0x664>
   c6992:	f47f af2d 	bne.w	c67f0 <__kernel_rem_pio2f+0x498>
   c6996:	eddf 7a0c 	vldr	s15, [pc, #48]	; c69c8 <__kernel_rem_pio2f+0x670>
   c699a:	2a00      	cmp	r2, #0
   c699c:	f43f af25 	beq.w	c67ea <__kernel_rem_pio2f+0x492>
   c69a0:	e721      	b.n	c67e6 <__kernel_rem_pio2f+0x48e>
   c69a2:	9b03      	ldr	r3, [sp, #12]
   c69a4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c69a8:	e537      	b.n	c641a <__kernel_rem_pio2f+0xc2>
   c69aa:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c69ac:	2b03      	cmp	r3, #3
   c69ae:	f47f af1f 	bne.w	c67f0 <__kernel_rem_pio2f+0x498>
   c69b2:	eddf 7a05 	vldr	s15, [pc, #20]	; c69c8 <__kernel_rem_pio2f+0x670>
   c69b6:	2a00      	cmp	r2, #0
   c69b8:	d1c9      	bne.n	c694e <__kernel_rem_pio2f+0x5f6>
   c69ba:	e771      	b.n	c68a0 <__kernel_rem_pio2f+0x548>
   c69bc:	eddf 7a02 	vldr	s15, [pc, #8]	; c69c8 <__kernel_rem_pio2f+0x670>
   c69c0:	e7a2      	b.n	c6908 <__kernel_rem_pio2f+0x5b0>
   c69c2:	bf00      	nop
   c69c4:	000c9d54 	.word	0x000c9d54
   c69c8:	00000000 	.word	0x00000000

000c69cc <__kernel_sinf>:
   c69cc:	ee10 3a10 	vmov	r3, s0
   c69d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c69d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c69d8:	da04      	bge.n	c69e4 <__kernel_sinf+0x18>
   c69da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c69de:	ee17 3a90 	vmov	r3, s15
   c69e2:	b35b      	cbz	r3, c6a3c <__kernel_sinf+0x70>
   c69e4:	ee60 7a00 	vmul.f32	s15, s0, s0
   c69e8:	ed9f 7a15 	vldr	s14, [pc, #84]	; c6a40 <__kernel_sinf+0x74>
   c69ec:	eddf 5a15 	vldr	s11, [pc, #84]	; c6a44 <__kernel_sinf+0x78>
   c69f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; c6a48 <__kernel_sinf+0x7c>
   c69f4:	eddf 6a15 	vldr	s13, [pc, #84]	; c6a4c <__kernel_sinf+0x80>
   c69f8:	eee7 5a87 	vfma.f32	s11, s15, s14
   c69fc:	ed9f 7a14 	vldr	s14, [pc, #80]	; c6a50 <__kernel_sinf+0x84>
   c6a00:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c6a04:	ee20 5a27 	vmul.f32	s10, s0, s15
   c6a08:	eee6 6a27 	vfma.f32	s13, s12, s15
   c6a0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c6a10:	b930      	cbnz	r0, c6a20 <__kernel_sinf+0x54>
   c6a12:	eddf 6a10 	vldr	s13, [pc, #64]	; c6a54 <__kernel_sinf+0x88>
   c6a16:	eee7 6a87 	vfma.f32	s13, s15, s14
   c6a1a:	eea6 0a85 	vfma.f32	s0, s13, s10
   c6a1e:	4770      	bx	lr
   c6a20:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c6a24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c6a28:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c6a2c:	eddf 6a0a 	vldr	s13, [pc, #40]	; c6a58 <__kernel_sinf+0x8c>
   c6a30:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c6a34:	eee5 0a26 	vfma.f32	s1, s10, s13
   c6a38:	ee30 0a60 	vsub.f32	s0, s0, s1
   c6a3c:	4770      	bx	lr
   c6a3e:	bf00      	nop
   c6a40:	2f2ec9d3 	.word	0x2f2ec9d3
   c6a44:	b2d72f34 	.word	0xb2d72f34
   c6a48:	3638ef1b 	.word	0x3638ef1b
   c6a4c:	b9500d01 	.word	0xb9500d01
   c6a50:	3c088889 	.word	0x3c088889
   c6a54:	be2aaaab 	.word	0xbe2aaaab
   c6a58:	3e2aaaab 	.word	0x3e2aaaab

000c6a5c <finite>:
   c6a5c:	b082      	sub	sp, #8
   c6a5e:	ed8d 0b00 	vstr	d0, [sp]
   c6a62:	9801      	ldr	r0, [sp, #4]
   c6a64:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   c6a68:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   c6a6c:	0fc0      	lsrs	r0, r0, #31
   c6a6e:	b002      	add	sp, #8
   c6a70:	4770      	bx	lr
   c6a72:	bf00      	nop

000c6a74 <fabsf>:
   c6a74:	ee10 3a10 	vmov	r3, s0
   c6a78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c6a7c:	ee00 3a10 	vmov	s0, r3
   c6a80:	4770      	bx	lr
   c6a82:	bf00      	nop

000c6a84 <finitef>:
   c6a84:	b082      	sub	sp, #8
   c6a86:	ed8d 0a01 	vstr	s0, [sp, #4]
   c6a8a:	9801      	ldr	r0, [sp, #4]
   c6a8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c6a90:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   c6a94:	bfac      	ite	ge
   c6a96:	2000      	movge	r0, #0
   c6a98:	2001      	movlt	r0, #1
   c6a9a:	b002      	add	sp, #8
   c6a9c:	4770      	bx	lr
   c6a9e:	bf00      	nop

000c6aa0 <nanf>:
   c6aa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c6aa8 <nanf+0x8>
   c6aa4:	4770      	bx	lr
   c6aa6:	bf00      	nop
   c6aa8:	7fc00000 	.word	0x7fc00000

000c6aac <scalbnf>:
   c6aac:	b082      	sub	sp, #8
   c6aae:	ed8d 0a01 	vstr	s0, [sp, #4]
   c6ab2:	9b01      	ldr	r3, [sp, #4]
   c6ab4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c6ab8:	d02a      	beq.n	c6b10 <scalbnf+0x64>
   c6aba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c6abe:	d223      	bcs.n	c6b08 <scalbnf+0x5c>
   c6ac0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c6ac4:	d128      	bne.n	c6b18 <scalbnf+0x6c>
   c6ac6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c6aca:	eddf 7a2a 	vldr	s15, [pc, #168]	; c6b74 <scalbnf+0xc8>
   c6ace:	4b2a      	ldr	r3, [pc, #168]	; (c6b78 <scalbnf+0xcc>)
   c6ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
   c6ad4:	4298      	cmp	r0, r3
   c6ad6:	edcd 7a01 	vstr	s15, [sp, #4]
   c6ada:	db37      	blt.n	c6b4c <scalbnf+0xa0>
   c6adc:	9b01      	ldr	r3, [sp, #4]
   c6ade:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c6ae2:	3a19      	subs	r2, #25
   c6ae4:	4402      	add	r2, r0
   c6ae6:	2afe      	cmp	r2, #254	; 0xfe
   c6ae8:	dd1a      	ble.n	c6b20 <scalbnf+0x74>
   c6aea:	ed9f 0a24 	vldr	s0, [pc, #144]	; c6b7c <scalbnf+0xd0>
   c6aee:	ed9f 7a24 	vldr	s14, [pc, #144]	; c6b80 <scalbnf+0xd4>
   c6af2:	9b01      	ldr	r3, [sp, #4]
   c6af4:	2b00      	cmp	r3, #0
   c6af6:	eef0 7a40 	vmov.f32	s15, s0
   c6afa:	bfb8      	it	lt
   c6afc:	eeb0 0a47 	vmovlt.f32	s0, s14
   c6b00:	ee20 0a27 	vmul.f32	s0, s0, s15
   c6b04:	b002      	add	sp, #8
   c6b06:	4770      	bx	lr
   c6b08:	ee30 0a00 	vadd.f32	s0, s0, s0
   c6b0c:	b002      	add	sp, #8
   c6b0e:	4770      	bx	lr
   c6b10:	ed9d 0a01 	vldr	s0, [sp, #4]
   c6b14:	b002      	add	sp, #8
   c6b16:	4770      	bx	lr
   c6b18:	0dd2      	lsrs	r2, r2, #23
   c6b1a:	4402      	add	r2, r0
   c6b1c:	2afe      	cmp	r2, #254	; 0xfe
   c6b1e:	dce4      	bgt.n	c6aea <scalbnf+0x3e>
   c6b20:	2a00      	cmp	r2, #0
   c6b22:	dc0b      	bgt.n	c6b3c <scalbnf+0x90>
   c6b24:	f112 0f16 	cmn.w	r2, #22
   c6b28:	da17      	bge.n	c6b5a <scalbnf+0xae>
   c6b2a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c6b2e:	4298      	cmp	r0, r3
   c6b30:	dcdb      	bgt.n	c6aea <scalbnf+0x3e>
   c6b32:	ed9f 0a14 	vldr	s0, [pc, #80]	; c6b84 <scalbnf+0xd8>
   c6b36:	ed9f 7a14 	vldr	s14, [pc, #80]	; c6b88 <scalbnf+0xdc>
   c6b3a:	e7da      	b.n	c6af2 <scalbnf+0x46>
   c6b3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c6b40:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c6b44:	ee00 3a10 	vmov	s0, r3
   c6b48:	b002      	add	sp, #8
   c6b4a:	4770      	bx	lr
   c6b4c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c6b84 <scalbnf+0xd8>
   c6b50:	eddd 7a01 	vldr	s15, [sp, #4]
   c6b54:	ee27 0a80 	vmul.f32	s0, s15, s0
   c6b58:	e7d8      	b.n	c6b0c <scalbnf+0x60>
   c6b5a:	3219      	adds	r2, #25
   c6b5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c6b60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c6b64:	eddf 7a09 	vldr	s15, [pc, #36]	; c6b8c <scalbnf+0xe0>
   c6b68:	ee07 3a10 	vmov	s14, r3
   c6b6c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c6b70:	e7cc      	b.n	c6b0c <scalbnf+0x60>
   c6b72:	bf00      	nop
   c6b74:	4c000000 	.word	0x4c000000
   c6b78:	ffff3cb0 	.word	0xffff3cb0
   c6b7c:	7149f2ca 	.word	0x7149f2ca
   c6b80:	f149f2ca 	.word	0xf149f2ca
   c6b84:	0da24260 	.word	0x0da24260
   c6b88:	8da24260 	.word	0x8da24260
   c6b8c:	33000000 	.word	0x33000000

000c6b90 <atexit>:
   c6b90:	2300      	movs	r3, #0
   c6b92:	4601      	mov	r1, r0
   c6b94:	461a      	mov	r2, r3
   c6b96:	4618      	mov	r0, r3
   c6b98:	f000 b8c0 	b.w	c6d1c <__register_exitproc>

000c6b9c <exit>:
   c6b9c:	b508      	push	{r3, lr}
   c6b9e:	4b07      	ldr	r3, [pc, #28]	; (c6bbc <exit+0x20>)
   c6ba0:	4604      	mov	r4, r0
   c6ba2:	b113      	cbz	r3, c6baa <exit+0xe>
   c6ba4:	2100      	movs	r1, #0
   c6ba6:	f000 f91b 	bl	c6de0 <__call_exitprocs>
   c6baa:	4b05      	ldr	r3, [pc, #20]	; (c6bc0 <exit+0x24>)
   c6bac:	6818      	ldr	r0, [r3, #0]
   c6bae:	6a83      	ldr	r3, [r0, #40]	; 0x28
   c6bb0:	b103      	cbz	r3, c6bb4 <exit+0x18>
   c6bb2:	4798      	blx	r3
   c6bb4:	4620      	mov	r0, r4
   c6bb6:	f7ed ffab 	bl	b4b10 <_exit>
   c6bba:	bf00      	nop
   c6bbc:	000c6de1 	.word	0x000c6de1
   c6bc0:	000c9d88 	.word	0x000c9d88

000c6bc4 <memcmp>:
   c6bc4:	b510      	push	{r4, lr}
   c6bc6:	3901      	subs	r1, #1
   c6bc8:	4402      	add	r2, r0
   c6bca:	4290      	cmp	r0, r2
   c6bcc:	d101      	bne.n	c6bd2 <memcmp+0xe>
   c6bce:	2000      	movs	r0, #0
   c6bd0:	e005      	b.n	c6bde <memcmp+0x1a>
   c6bd2:	7803      	ldrb	r3, [r0, #0]
   c6bd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c6bd8:	42a3      	cmp	r3, r4
   c6bda:	d001      	beq.n	c6be0 <memcmp+0x1c>
   c6bdc:	1b18      	subs	r0, r3, r4
   c6bde:	bd10      	pop	{r4, pc}
   c6be0:	3001      	adds	r0, #1
   c6be2:	e7f2      	b.n	c6bca <memcmp+0x6>

000c6be4 <memcpy>:
   c6be4:	440a      	add	r2, r1
   c6be6:	4291      	cmp	r1, r2
   c6be8:	f100 33ff 	add.w	r3, r0, #4294967295
   c6bec:	d100      	bne.n	c6bf0 <memcpy+0xc>
   c6bee:	4770      	bx	lr
   c6bf0:	b510      	push	{r4, lr}
   c6bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
   c6bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
   c6bfa:	4291      	cmp	r1, r2
   c6bfc:	d1f9      	bne.n	c6bf2 <memcpy+0xe>
   c6bfe:	bd10      	pop	{r4, pc}

000c6c00 <memmove>:
   c6c00:	4288      	cmp	r0, r1
   c6c02:	b510      	push	{r4, lr}
   c6c04:	eb01 0402 	add.w	r4, r1, r2
   c6c08:	d902      	bls.n	c6c10 <memmove+0x10>
   c6c0a:	4284      	cmp	r4, r0
   c6c0c:	4623      	mov	r3, r4
   c6c0e:	d807      	bhi.n	c6c20 <memmove+0x20>
   c6c10:	1e43      	subs	r3, r0, #1
   c6c12:	42a1      	cmp	r1, r4
   c6c14:	d008      	beq.n	c6c28 <memmove+0x28>
   c6c16:	f811 2b01 	ldrb.w	r2, [r1], #1
   c6c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c6c1e:	e7f8      	b.n	c6c12 <memmove+0x12>
   c6c20:	4402      	add	r2, r0
   c6c22:	4601      	mov	r1, r0
   c6c24:	428a      	cmp	r2, r1
   c6c26:	d100      	bne.n	c6c2a <memmove+0x2a>
   c6c28:	bd10      	pop	{r4, pc}
   c6c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c6c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c6c32:	e7f7      	b.n	c6c24 <memmove+0x24>

000c6c34 <memset>:
   c6c34:	4402      	add	r2, r0
   c6c36:	4603      	mov	r3, r0
   c6c38:	4293      	cmp	r3, r2
   c6c3a:	d100      	bne.n	c6c3e <memset+0xa>
   c6c3c:	4770      	bx	lr
   c6c3e:	f803 1b01 	strb.w	r1, [r3], #1
   c6c42:	e7f9      	b.n	c6c38 <memset+0x4>

000c6c44 <srand>:
   c6c44:	b538      	push	{r3, r4, r5, lr}
   c6c46:	4b10      	ldr	r3, [pc, #64]	; (c6c88 <srand+0x44>)
   c6c48:	681d      	ldr	r5, [r3, #0]
   c6c4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c6c4c:	4604      	mov	r4, r0
   c6c4e:	b9b3      	cbnz	r3, c6c7e <srand+0x3a>
   c6c50:	2018      	movs	r0, #24
   c6c52:	f7fd fe0b 	bl	c486c <malloc>
   c6c56:	4602      	mov	r2, r0
   c6c58:	63a8      	str	r0, [r5, #56]	; 0x38
   c6c5a:	b920      	cbnz	r0, c6c66 <srand+0x22>
   c6c5c:	4b0b      	ldr	r3, [pc, #44]	; (c6c8c <srand+0x48>)
   c6c5e:	480c      	ldr	r0, [pc, #48]	; (c6c90 <srand+0x4c>)
   c6c60:	2142      	movs	r1, #66	; 0x42
   c6c62:	f7fd fe2b 	bl	c48bc <__assert_func>
   c6c66:	490b      	ldr	r1, [pc, #44]	; (c6c94 <srand+0x50>)
   c6c68:	4b0b      	ldr	r3, [pc, #44]	; (c6c98 <srand+0x54>)
   c6c6a:	e9c0 1300 	strd	r1, r3, [r0]
   c6c6e:	4b0b      	ldr	r3, [pc, #44]	; (c6c9c <srand+0x58>)
   c6c70:	6083      	str	r3, [r0, #8]
   c6c72:	230b      	movs	r3, #11
   c6c74:	8183      	strh	r3, [r0, #12]
   c6c76:	2100      	movs	r1, #0
   c6c78:	2001      	movs	r0, #1
   c6c7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c6c7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c6c80:	2200      	movs	r2, #0
   c6c82:	611c      	str	r4, [r3, #16]
   c6c84:	615a      	str	r2, [r3, #20]
   c6c86:	bd38      	pop	{r3, r4, r5, pc}
   c6c88:	2003c5b8 	.word	0x2003c5b8
   c6c8c:	000c9d8c 	.word	0x000c9d8c
   c6c90:	000c9da3 	.word	0x000c9da3
   c6c94:	abcd330e 	.word	0xabcd330e
   c6c98:	e66d1234 	.word	0xe66d1234
   c6c9c:	0005deec 	.word	0x0005deec

000c6ca0 <rand>:
   c6ca0:	4b16      	ldr	r3, [pc, #88]	; (c6cfc <rand+0x5c>)
   c6ca2:	b510      	push	{r4, lr}
   c6ca4:	681c      	ldr	r4, [r3, #0]
   c6ca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c6ca8:	b9b3      	cbnz	r3, c6cd8 <rand+0x38>
   c6caa:	2018      	movs	r0, #24
   c6cac:	f7fd fdde 	bl	c486c <malloc>
   c6cb0:	63a0      	str	r0, [r4, #56]	; 0x38
   c6cb2:	b928      	cbnz	r0, c6cc0 <rand+0x20>
   c6cb4:	4602      	mov	r2, r0
   c6cb6:	4b12      	ldr	r3, [pc, #72]	; (c6d00 <rand+0x60>)
   c6cb8:	4812      	ldr	r0, [pc, #72]	; (c6d04 <rand+0x64>)
   c6cba:	214e      	movs	r1, #78	; 0x4e
   c6cbc:	f7fd fdfe 	bl	c48bc <__assert_func>
   c6cc0:	4a11      	ldr	r2, [pc, #68]	; (c6d08 <rand+0x68>)
   c6cc2:	4b12      	ldr	r3, [pc, #72]	; (c6d0c <rand+0x6c>)
   c6cc4:	e9c0 2300 	strd	r2, r3, [r0]
   c6cc8:	4b11      	ldr	r3, [pc, #68]	; (c6d10 <rand+0x70>)
   c6cca:	6083      	str	r3, [r0, #8]
   c6ccc:	230b      	movs	r3, #11
   c6cce:	8183      	strh	r3, [r0, #12]
   c6cd0:	2201      	movs	r2, #1
   c6cd2:	2300      	movs	r3, #0
   c6cd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c6cd8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c6cda:	4a0e      	ldr	r2, [pc, #56]	; (c6d14 <rand+0x74>)
   c6cdc:	6920      	ldr	r0, [r4, #16]
   c6cde:	6963      	ldr	r3, [r4, #20]
   c6ce0:	490d      	ldr	r1, [pc, #52]	; (c6d18 <rand+0x78>)
   c6ce2:	4342      	muls	r2, r0
   c6ce4:	fb01 2203 	mla	r2, r1, r3, r2
   c6ce8:	fba0 0101 	umull	r0, r1, r0, r1
   c6cec:	1c43      	adds	r3, r0, #1
   c6cee:	eb42 0001 	adc.w	r0, r2, r1
   c6cf2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c6cf6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c6cfa:	bd10      	pop	{r4, pc}
   c6cfc:	2003c5b8 	.word	0x2003c5b8
   c6d00:	000c9d8c 	.word	0x000c9d8c
   c6d04:	000c9da3 	.word	0x000c9da3
   c6d08:	abcd330e 	.word	0xabcd330e
   c6d0c:	e66d1234 	.word	0xe66d1234
   c6d10:	0005deec 	.word	0x0005deec
   c6d14:	5851f42d 	.word	0x5851f42d
   c6d18:	4c957f2d 	.word	0x4c957f2d

000c6d1c <__register_exitproc>:
   c6d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c6d20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c6ddc <__register_exitproc+0xc0>
   c6d24:	4606      	mov	r6, r0
   c6d26:	f8d8 0000 	ldr.w	r0, [r8]
   c6d2a:	461f      	mov	r7, r3
   c6d2c:	460d      	mov	r5, r1
   c6d2e:	4691      	mov	r9, r2
   c6d30:	f000 f8b2 	bl	c6e98 <__retarget_lock_acquire_recursive>
   c6d34:	4b25      	ldr	r3, [pc, #148]	; (c6dcc <__register_exitproc+0xb0>)
   c6d36:	681c      	ldr	r4, [r3, #0]
   c6d38:	b934      	cbnz	r4, c6d48 <__register_exitproc+0x2c>
   c6d3a:	4c25      	ldr	r4, [pc, #148]	; (c6dd0 <__register_exitproc+0xb4>)
   c6d3c:	601c      	str	r4, [r3, #0]
   c6d3e:	4b25      	ldr	r3, [pc, #148]	; (c6dd4 <__register_exitproc+0xb8>)
   c6d40:	b113      	cbz	r3, c6d48 <__register_exitproc+0x2c>
   c6d42:	681b      	ldr	r3, [r3, #0]
   c6d44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c6d48:	6863      	ldr	r3, [r4, #4]
   c6d4a:	2b1f      	cmp	r3, #31
   c6d4c:	dd07      	ble.n	c6d5e <__register_exitproc+0x42>
   c6d4e:	f8d8 0000 	ldr.w	r0, [r8]
   c6d52:	f000 f8a3 	bl	c6e9c <__retarget_lock_release_recursive>
   c6d56:	f04f 30ff 	mov.w	r0, #4294967295
   c6d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c6d5e:	b34e      	cbz	r6, c6db4 <__register_exitproc+0x98>
   c6d60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c6d64:	b988      	cbnz	r0, c6d8a <__register_exitproc+0x6e>
   c6d66:	4b1c      	ldr	r3, [pc, #112]	; (c6dd8 <__register_exitproc+0xbc>)
   c6d68:	b923      	cbnz	r3, c6d74 <__register_exitproc+0x58>
   c6d6a:	f8d8 0000 	ldr.w	r0, [r8]
   c6d6e:	f000 f894 	bl	c6e9a <__retarget_lock_release>
   c6d72:	e7f0      	b.n	c6d56 <__register_exitproc+0x3a>
   c6d74:	f44f 7084 	mov.w	r0, #264	; 0x108
   c6d78:	f7fd fd78 	bl	c486c <malloc>
   c6d7c:	2800      	cmp	r0, #0
   c6d7e:	d0f4      	beq.n	c6d6a <__register_exitproc+0x4e>
   c6d80:	2300      	movs	r3, #0
   c6d82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c6d86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c6d8a:	6863      	ldr	r3, [r4, #4]
   c6d8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c6d90:	2201      	movs	r2, #1
   c6d92:	409a      	lsls	r2, r3
   c6d94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c6d98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c6d9c:	4313      	orrs	r3, r2
   c6d9e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c6da2:	2e02      	cmp	r6, #2
   c6da4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c6da8:	bf02      	ittt	eq
   c6daa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c6dae:	4313      	orreq	r3, r2
   c6db0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c6db4:	6863      	ldr	r3, [r4, #4]
   c6db6:	f8d8 0000 	ldr.w	r0, [r8]
   c6dba:	1c5a      	adds	r2, r3, #1
   c6dbc:	3302      	adds	r3, #2
   c6dbe:	6062      	str	r2, [r4, #4]
   c6dc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c6dc4:	f000 f86a 	bl	c6e9c <__retarget_lock_release_recursive>
   c6dc8:	2000      	movs	r0, #0
   c6dca:	e7c6      	b.n	c6d5a <__register_exitproc+0x3e>
   c6dcc:	2003e7e8 	.word	0x2003e7e8
   c6dd0:	2003e75c 	.word	0x2003e75c
   c6dd4:	00000000 	.word	0x00000000
   c6dd8:	000c486d 	.word	0x000c486d
   c6ddc:	2003c61c 	.word	0x2003c61c

000c6de0 <__call_exitprocs>:
   c6de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6de4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; c6e90 <__call_exitprocs+0xb0>
   c6de8:	9100      	str	r1, [sp, #0]
   c6dea:	4680      	mov	r8, r0
   c6dec:	f8d9 0000 	ldr.w	r0, [r9]
   c6df0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; c6e94 <__call_exitprocs+0xb4>
   c6df4:	f000 f850 	bl	c6e98 <__retarget_lock_acquire_recursive>
   c6df8:	f8da 4000 	ldr.w	r4, [sl]
   c6dfc:	b934      	cbnz	r4, c6e0c <__call_exitprocs+0x2c>
   c6dfe:	f8d9 0000 	ldr.w	r0, [r9]
   c6e02:	b003      	add	sp, #12
   c6e04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6e08:	f000 b848 	b.w	c6e9c <__retarget_lock_release_recursive>
   c6e0c:	6865      	ldr	r5, [r4, #4]
   c6e0e:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   c6e12:	1e6e      	subs	r6, r5, #1
   c6e14:	3501      	adds	r5, #1
   c6e16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   c6e1a:	f107 0b80 	add.w	fp, r7, #128	; 0x80
   c6e1e:	2e00      	cmp	r6, #0
   c6e20:	dbed      	blt.n	c6dfe <__call_exitprocs+0x1e>
   c6e22:	9b00      	ldr	r3, [sp, #0]
   c6e24:	b143      	cbz	r3, c6e38 <__call_exitprocs+0x58>
   c6e26:	b917      	cbnz	r7, c6e2e <__call_exitprocs+0x4e>
   c6e28:	3e01      	subs	r6, #1
   c6e2a:	3d04      	subs	r5, #4
   c6e2c:	e7f7      	b.n	c6e1e <__call_exitprocs+0x3e>
   c6e2e:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
   c6e32:	9b00      	ldr	r3, [sp, #0]
   c6e34:	429a      	cmp	r2, r3
   c6e36:	d1f7      	bne.n	c6e28 <__call_exitprocs+0x48>
   c6e38:	6861      	ldr	r1, [r4, #4]
   c6e3a:	682a      	ldr	r2, [r5, #0]
   c6e3c:	3901      	subs	r1, #1
   c6e3e:	42b1      	cmp	r1, r6
   c6e40:	bf16      	itet	ne
   c6e42:	2300      	movne	r3, #0
   c6e44:	6066      	streq	r6, [r4, #4]
   c6e46:	602b      	strne	r3, [r5, #0]
   c6e48:	2a00      	cmp	r2, #0
   c6e4a:	d0ed      	beq.n	c6e28 <__call_exitprocs+0x48>
   c6e4c:	6863      	ldr	r3, [r4, #4]
   c6e4e:	9301      	str	r3, [sp, #4]
   c6e50:	b13f      	cbz	r7, c6e62 <__call_exitprocs+0x82>
   c6e52:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
   c6e56:	2301      	movs	r3, #1
   c6e58:	fa03 fc06 	lsl.w	ip, r3, r6
   c6e5c:	ea1c 0f01 	tst.w	ip, r1
   c6e60:	d109      	bne.n	c6e76 <__call_exitprocs+0x96>
   c6e62:	4790      	blx	r2
   c6e64:	6861      	ldr	r1, [r4, #4]
   c6e66:	9b01      	ldr	r3, [sp, #4]
   c6e68:	f8da 2000 	ldr.w	r2, [sl]
   c6e6c:	4299      	cmp	r1, r3
   c6e6e:	d1c3      	bne.n	c6df8 <__call_exitprocs+0x18>
   c6e70:	4294      	cmp	r4, r2
   c6e72:	d0d9      	beq.n	c6e28 <__call_exitprocs+0x48>
   c6e74:	e7c0      	b.n	c6df8 <__call_exitprocs+0x18>
   c6e76:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
   c6e7a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   c6e7e:	ea1c 0f00 	tst.w	ip, r0
   c6e82:	d102      	bne.n	c6e8a <__call_exitprocs+0xaa>
   c6e84:	4640      	mov	r0, r8
   c6e86:	4790      	blx	r2
   c6e88:	e7ec      	b.n	c6e64 <__call_exitprocs+0x84>
   c6e8a:	4608      	mov	r0, r1
   c6e8c:	4790      	blx	r2
   c6e8e:	e7e9      	b.n	c6e64 <__call_exitprocs+0x84>
   c6e90:	2003c61c 	.word	0x2003c61c
   c6e94:	2003e7e8 	.word	0x2003e7e8

000c6e98 <__retarget_lock_acquire_recursive>:
   c6e98:	4770      	bx	lr

000c6e9a <__retarget_lock_release>:
   c6e9a:	4770      	bx	lr

000c6e9c <__retarget_lock_release_recursive>:
   c6e9c:	4770      	bx	lr

000c6e9e <link_code_end>:
	...

000c6ea0 <dynalib_user>:
   c6ea0:	4a8d 000b 4ac9 000b 4af1 000b 4af5 000b     .J...J...J...J..
   c6eb0:	0000 0000 7845 7469 4320 6c61 656c 0064     ....Exit Called.
   c6ec0:	6e55 6e6b 776f 206e 7974 6570 4e00 544f     Unknown type.NOT
   c6ed0:	5059 0045 4c46 414f 3354 0032 4e49 3354     YPE.FLOAT32.INT3
   c6ee0:	0032 4955 544e 0038 4e49 3654 0034 5453     2.UINT8.INT64.ST
   c6ef0:	4952 474e 4200 4f4f 004c 4e49 3154 0036     RING.BOOL.INT16.
   c6f00:	4f43 504d 454c 3658 0034 4c46 414f 3154     COMPLEX64.FLOAT1
   c6f10:	0036 0000                                   6...

000c6f14 <CSWTCH.19>:
   c6f14:	6ecd 000c 6ed4 000c 6edc 000c 6ee2 000c     .n...n...n...n..
   c6f24:	6ee8 000c 6eee 000c 6ef5 000c 6efa 000c     .n...n...n...n..
   c6f34:	6f00 000c 6ee3 000c 6f0a 000c 6f4d 6564     .o...n...o..Mode
   c6f44:	206c 7270 766f 6469 6465 6920 2073 6373     l provided is sc
   c6f54:	6568 616d 7620 7265 6973 6e6f 2520 2064     hema version %d 
   c6f64:	6f6e 2074 7165 6175 206c 6f74 7320 7075     not equal to sup
   c6f74:	6f70 7472 6465 7620 7265 6973 6e6f 2520     ported version %
   c6f84:	2e64 5000 736f 2074 6f6d 6564 206c 6573     d..Post model se
   c6f94:	7574 3a70 2520 0064 6542 6f66 6572 6d20     tup: %d.Before m
   c6fa4:	646f 6c65 7020 6572 6c61 6f6c 3a63 2520     odel prealloc: %
   c6fb4:	0064 6542 6f66 6572 6d20 646f 6c65 6920     d.Before model i
   c6fc4:	706d 726f 3a74 2520 0064 6e49 6f76 656b     mport: %d.Invoke
   c6fd4:	6620 6961 656c 2064 6e6f 7820 765f 6c61      failed on x_val
   c6fe4:	203a 6625 000a 2e25 6632 202c 2e25 6632     : %f..%.2f, %.2f
   c6ff4:	4600 6572 2065 656d 6f6d 7972 203a 6425     .Free memory: %d
   c7004:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c7014:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c7024:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c7034:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c7044:	6672 6f6c 2f77 696c 6574 6b2f 7265 656e     rflow/lite/kerne
   c7054:	736c 6b2f 7265 656e 5f6c 7475 6c69 632e     ls/kernel_util.c
   c7064:	7070 2500 3a73 6425 2520 2073 6177 2073     pp.%s:%d %s was 
   c7074:	6f6e 2074 7274 6575 002e 6e69 7570 5f74     not true..input_
   c7084:	7270 646f 6375 5f74 6373 6c61 2065 3d3e     product_scale >=
   c7094:	3020 7300 6474 3a3a 6261 2873 6e69 7570      0.std::abs(inpu
   c70a4:	5f74 7270 646f 6375 5f74 6373 6c61 2065     t_product_scale 
   c70b4:	202d 6962 7361 735f 6163 656c 2029 3d3c     - bias_scale) <=
   c70c4:	3120 2d65 2036 202a 7473 3a64 6d3a 6e69      1e-6 * std::min
   c70d4:	6928 706e 7475 705f 6f72 7564 7463 735f     (input_product_s
   c70e4:	6163 656c 202c 6962 7361 735f 6163 656c     cale, bias_scale
   c70f4:	0029 6166 736c 0065 7325 253a 2064 7325     ).false.%s:%d %s
   c7104:	2120 203d 7325 2820 6425 2120 203d 6425      != %s (%d != %d
   c7114:	0029 546b 4c66 7469 4165 6666 6e69 5165     ).kTfLiteAffineQ
   c7124:	6175 746e 7a69 7461 6f69 006e 6e69 7570     uantization.inpu
   c7134:	2d74 713e 6175 746e 7a69 7461 6f69 2e6e     t->quantization.
   c7144:	7974 6570 6600 6c69 6574 2d72 713e 6175     type.filter->qua
   c7154:	746e 7a69 7461 6f69 2e6e 7974 6570 6100     ntization.type.a
   c7164:	6666 6e69 5f65 7571 6e61 6974 617a 6974     ffine_quantizati
   c7174:	6e6f 6100 6666 6e69 5f65 7571 6e61 6974     on.affine_quanti
   c7184:	617a 6974 6e6f 3e2d 6373 6c61 0065 6e69     zation->scale.in
   c7194:	7570 2d74 743e 7079 0065 6966 746c 7265     put->type.filter
   c71a4:	3e2d 7974 6570 6600 6c69 6574 2d72 643e     ->type.filter->d
   c71b4:	6d69 2d73 643e 7461 5b61 6661 6966 656e     ims->data[affine
   c71c4:	715f 6175 746e 7a69 7461 6f69 2d6e 713e     _quantization->q
   c71d4:	6175 746e 7a69 6465 645f 6d69 6e65 6973     uantized_dimensi
   c71e4:	6e6f 005d 6661 6966 656e 715f 6175 746e     on].affine_quant
   c71f4:	7a69 7461 6f69 2d6e 733e 6163 656c 3e2d     ization->scale->
   c7204:	6973 657a 0d00 000a                         size....

000c720c <_ZTVN6tflite18MicroErrorReporterE>:
	...
   c7214:	54eb 000b 5599 000b 54ed 000b 7954 6570     .T...U...T..Type
   c7224:	2520 2073 2528 2964 6e20 746f 6920 2073      %s (%d) not is 
   c7234:	6f6e 2074 7573 7070 726f 6574 0064 6e4f     not supported.On
   c7244:	796c 3120 7320 6275 7267 7061 2068 7369     ly 1 subgraph is
   c7254:	6320 7275 6572 746e 796c 7320 7075 6f70      currently suppo
   c7264:	7472 6465 0a2e 6900 3c20 7320 7a69 2865     rted...i < size(
   c7274:	0029 6c66 7461 7562 6666 7265 3a73 563a     ).flatbuffers::V
   c7284:	6365 6f74 3c72 3e54 3a3a 6572 7574 6e72     ector<T>::return
   c7294:	745f 7079 2065 6c66 7461 7562 6666 7265     _type flatbuffer
   c72a4:	3a73 563a 6365 6f74 3c72 3e54 3a3a 6547     s::Vector<T>::Ge
   c72b4:	2874 6c66 7461 7562 6666 7265 3a73 753a     t(flatbuffers::u
   c72c4:	666f 7366 7465 745f 2029 6f63 736e 2074     offset_t) const 
   c72d4:	775b 7469 2068 2054 203d 6c66 616f 3b74     [with T = float;
   c72e4:	6620 616c 6274 6675 6566 7372 3a3a 6556      flatbuffers::Ve
   c72f4:	7463 726f 543c 3a3e 723a 7465 7275 5f6e     ctor<T>::return_
   c7304:	7974 6570 3d20 6620 6f6c 7461 203b 6c66     type = float; fl
   c7314:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c7324:	7465 745f 3d20 6c20 6e6f 2067 6e75 6973     et_t = long unsi
   c7334:	6e67 6465 6920 746e 005d 3a63 552f 6573     gned int].c:/Use
   c7344:	7372 742f 646f 7264 642f 7665 702f 7261     rs/toddr/dev/par
   c7354:	6974 6c63 2d65 4654 696c 6574 6c2f 6269     ticle-TFlite/lib
   c7364:	542f 6e65 6f73 4672 6f6c 4c77 7469 2f65     /TensorFlowLite/
   c7374:	7273 2f63 6874 7269 5f64 6170 7472 2f79     src/third_party/
   c7384:	6c66 7461 7562 6666 7265 2f73 6e69 6c63     flatbuffers/incl
   c7394:	6475 2f65 6c66 7461 7562 6666 7265 2f73     ude/flatbuffers/
   c73a4:	6c66 7461 7562 6666 7265 2e73 0068 6c66     flatbuffers.h.fl
   c73b4:	7461 7562 6666 7265 3a73 563a 6365 6f74     atbuffers::Vecto
   c73c4:	3c72 3e54 3a3a 6572 7574 6e72 745f 7079     r<T>::return_typ
   c73d4:	2065 6c66 7461 7562 6666 7265 3a73 563a     e flatbuffers::V
   c73e4:	6365 6f74 3c72 3e54 3a3a 6547 2874 6c66     ector<T>::Get(fl
   c73f4:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c7404:	7465 745f 2029 6f63 736e 2074 775b 7469     et_t) const [wit
   c7414:	2068 2054 203d 6f6c 676e 6920 746e 203b     h T = long int; 
   c7424:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c7434:	6f74 3c72 3e54 3a3a 6572 7574 6e72 745f     tor<T>::return_t
   c7444:	7079 2065 203d 6f6c 676e 6920 746e 203b     ype = long int; 
   c7454:	6c66 7461 7562 6666 7265 3a73 753a 666f     flatbuffers::uof
   c7464:	7366 7465 745f 3d20 6c20 6e6f 2067 6e75     fset_t = long un
   c7474:	6973 6e67 6465 6920 746e 005d 6c66 7461     signed int].flat
   c7484:	7562 6666 7265 3a73 563a 6365 6f74 3c72     buffers::Vector<
   c7494:	3e54 3a3a 6572 7574 6e72 745f 7079 2065     T>::return_type 
   c74a4:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c74b4:	6f74 3c72 3e54 3a3a 6547 2874 6c66 7461     tor<T>::Get(flat
   c74c4:	7562 6666 7265 3a73 753a 666f 7366 7465     buffers::uoffset
   c74d4:	745f 2029 6f63 736e 2074 775b 7469 2068     _t) const [with 
   c74e4:	2054 203d 6c66 7461 7562 6666 7265 3a73     T = flatbuffers:
   c74f4:	4f3a 6666 6573 3c74 6674 696c 6574 3a3a     :Offset<tflite::
   c7504:	6554 736e 726f 3b3e 6620 616c 6274 6675     Tensor>; flatbuf
   c7514:	6566 7372 3a3a 6556 7463 726f 543c 3a3e     fers::Vector<T>:
   c7524:	723a 7465 7275 5f6e 7974 6570 3d20 6320     :return_type = c
   c7534:	6e6f 7473 7420 6c66 7469 3a65 543a 6e65     onst tflite::Ten
   c7544:	6f73 2a72 203b 6c66 7461 7562 6666 7265     sor*; flatbuffer
   c7554:	3a73 753a 666f 7366 7465 745f 3d20 6c20     s::uoffset_t = l
   c7564:	6e6f 2067 6e75 6973 6e67 6465 6920 746e     ong unsigned int
   c7574:	005d 6c66 7461 7562 6666 7265 3a73 563a     ].flatbuffers::V
   c7584:	6365 6f74 3c72 3e54 3a3a 6572 7574 6e72     ector<T>::return
   c7594:	745f 7079 2065 6c66 7461 7562 6666 7265     _type flatbuffer
   c75a4:	3a73 563a 6365 6f74 3c72 3e54 3a3a 6547     s::Vector<T>::Ge
   c75b4:	2874 6c66 7461 7562 6666 7265 3a73 753a     t(flatbuffers::u
   c75c4:	666f 7366 7465 745f 2029 6f63 736e 2074     offset_t) const 
   c75d4:	775b 7469 2068 2054 203d 6c66 7461 7562     [with T = flatbu
   c75e4:	6666 7265 3a73 4f3a 6666 6573 3c74 6674     ffers::Offset<tf
   c75f4:	696c 6574 3a3a 7542 6666 7265 3b3e 6620     lite::Buffer>; f
   c7604:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c7614:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c7624:	6570 3d20 6320 6e6f 7473 7420 6c66 7469     pe = const tflit
   c7634:	3a65 423a 6675 6566 2a72 203b 6c66 7461     e::Buffer*; flat
   c7644:	7562 6666 7265 3a73 753a 666f 7366 7465     buffers::uoffset
   c7654:	745f 3d20 6c20 6e6f 2067 6e75 6973 6e67     _t = long unsign
   c7664:	6465 6920 746e 005d 6c66 7461 7562 6666     ed int].flatbuff
   c7674:	7265 3a73 563a 6365 6f74 3c72 3e54 3a3a     ers::Vector<T>::
   c7684:	6572 7574 6e72 745f 7079 2065 6c66 7461     return_type flat
   c7694:	7562 6666 7265 3a73 563a 6365 6f74 3c72     buffers::Vector<
   c76a4:	3e54 3a3a 6547 2874 6c66 7461 7562 6666     T>::Get(flatbuff
   c76b4:	7265 3a73 753a 666f 7366 7465 745f 2029     ers::uoffset_t) 
   c76c4:	6f63 736e 2074 775b 7469 2068 2054 203d     const [with T = 
   c76d4:	6f6c 676e 6c20 6e6f 2067 6e69 3b74 6620     long long int; f
   c76e4:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c76f4:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c7704:	6570 3d20 6c20 6e6f 2067 6f6c 676e 6920     pe = long long i
   c7714:	746e 203b 6c66 7461 7562 6666 7265 3a73     nt; flatbuffers:
   c7724:	753a 666f 7366 7465 745f 3d20 6c20 6e6f     :uoffset_t = lon
   c7734:	2067 6e75 6973 6e67 6465 6920 746e 005d     g unsigned int].
   c7744:	6c66 7461 7562 6666 7265 3a73 563a 6365     flatbuffers::Vec
   c7754:	6f74 3c72 3e54 3a3a 6572 7574 6e72 745f     tor<T>::return_t
   c7764:	7079 2065 6c66 7461 7562 6666 7265 3a73     ype flatbuffers:
   c7774:	563a 6365 6f74 3c72 3e54 3a3a 6547 2874     :Vector<T>::Get(
   c7784:	6c66 7461 7562 6666 7265 3a73 753a 666f     flatbuffers::uof
   c7794:	7366 7465 745f 2029 6f63 736e 2074 775b     fset_t) const [w
   c77a4:	7469 2068 2054 203d 6c66 7461 7562 6666     ith T = flatbuff
   c77b4:	7265 3a73 4f3a 6666 6573 3c74 6674 696c     ers::Offset<tfli
   c77c4:	6574 3a3a 704f 7265 7461 726f 3b3e 6620     te::Operator>; f
   c77d4:	616c 6274 6675 6566 7372 3a3a 6556 7463     latbuffers::Vect
   c77e4:	726f 543c 3a3e 723a 7465 7275 5f6e 7974     or<T>::return_ty
   c77f4:	6570 3d20 6320 6e6f 7473 7420 6c66 7469     pe = const tflit
   c7804:	3a65 4f3a 6570 6172 6f74 2a72 203b 6c66     e::Operator*; fl
   c7814:	7461 7562 6666 7265 3a73 753a 666f 7366     atbuffers::uoffs
   c7824:	7465 745f 3d20 6c20 6e6f 2067 6e75 6973     et_t = long unsi
   c7834:	6e67 6465 6920 746e 005d 6f4c 6967 2063     gned int].Logic 
   c7844:	7265 6f72 2072 6e69 6d20 6d65 726f 2079     error in memory 
   c7854:	6c70 6e61 656e 2c72 7420 6e65 6f73 2072     planner, tensor 
   c7864:	6425 6820 7361 6120 206e 6e69 6176 696c     %d has an invali
   c7874:	2064 696c 6566 6974 656d 4100 6572 616e     d lifetime.Arena
   c7884:	7320 7a69 2065 7369 7420 6f6f 7320 616d      size is too sma
   c7894:	6c6c 6620 726f 6120 7463 7669 7461 6f69     ll for activatio
   c78a4:	206e 7562 6666 7265 2e73 4e20 6565 6564     n buffers. Neede
   c78b4:	2064 6425 6220 7475 6f20 6c6e 2079 6425     d %d but only %d
   c78c4:	7720 7361 6120 6176 6c69 6261 656c 002e      was available..
   c78d4:	6156 6972 6261 656c 6920 2073 6f6e 2074     Variable is not 
   c78e4:	6c61 6f6c 6163 6574 0064 6e49 6f76 656b     allocated.Invoke
   c78f4:	2928 6320 6c61 656c 2064 6661 6574 2072     () called after 
   c7904:	6e69 7469 6169 696c 617a 6974 6e6f 6620     initialization f
   c7914:	6961 656c 0a64 4d00 7369 6973 676e 7220     ailed..Missing r
   c7924:	6765 7369 7274 7461 6f69 206e 6f66 2072     egistration for 
   c7934:	706f 6f63 6564 695f 646e 7865 2520 0a64     opcode_index %d.
   c7944:	5300 696b 7070 6e69 2067 706f 6620 726f     .Skipping op for
   c7954:	6f20 6370 646f 5f65 6e69 6564 2078 6425      opcode_index %d
   c7964:	000a 6e55 7573 7070 726f 6574 2064 6562     ..Unsupported be
   c7974:	6168 6976 726f 203a 6f66 6e75 2064 7562     havior: found bu
   c7984:	6c69 6974 206e 706f 7265 7461 726f 2520     iltin operator %
   c7994:	2073 6977 6874 6320 7375 6f74 206d 706f     s with custom op
   c79a4:	6974 6e6f 2e73 000a 6f4e 6564 2520 2073     tions...Node %s 
   c79b4:	6e28 6d75 6562 2072 6425 2029 6166 6c69     (number %d) fail
   c79c4:	6465 7420 206f 7270 7065 7261 2065 6977     ed to prepare wi
   c79d4:	6874 7320 6174 7574 2073 6425 4e00 646f     th status %d.Nod
   c79e4:	2065 7325 2820 756e 626d 7265 2520 2964     e %s (number %d)
   c79f4:	6620 6961 656c 2064 6f74 6920 766e 6b6f      failed to invok
   c7a04:	2065 6977 6874 7320 6174 7574 2073 6425     e with status %d
   c7a14:	4900 706e 7475 6920 646e 7865 2520 2064     .Input index %d 
   c7a24:	756f 2074 666f 7220 6e61 6567 2820 656c     out of range (le
   c7a34:	676e 6874 6920 2073 6425 0029 754f 7074     ngth is %d).Outp
   c7a44:	7475 6920 646e 7865 2520 2064 756f 2074     ut index %d out 
   c7a54:	666f 7220 6e61 6567 2820 656c 676e 6874     of range (length
   c7a64:	6920 2073 6425 0029 4441 0044 5641 5245      is %d).ADD.AVER
   c7a74:	4741 5f45 4f50 4c4f 325f 0044 4f43 434e     AGE_POOL_2D.CONC
   c7a84:	5441 4e45 5441 4f49 004e 4544 5450 5748     ATENATION.DEPTHW
   c7a94:	5349 5f45 4f43 564e 325f 0044 4544 5450     ISE_CONV_2D.DEPT
   c7aa4:	5f48 4f54 535f 4150 4543 4400 5145 4155     H_TO_SPACE.DEQUA
   c7ab4:	544e 5a49 0045 4d45 4542 4444 4e49 5f47     NTIZE.EMBEDDING_
   c7ac4:	4f4c 4b4f 5055 4600 4f4c 524f 4600 4c55     LOOKUP.FLOOR.FUL
   c7ad4:	594c 435f 4e4f 454e 5443 4445 4800 5341     LY_CONNECTED.HAS
   c7ae4:	5448 4241 454c 4c5f 4f4f 554b 0050 324c     HTABLE_LOOKUP.L2
   c7af4:	4e5f 524f 414d 494c 415a 4954 4e4f 4c00     _NORMALIZATION.L
   c7b04:	5f32 4f50 4c4f 325f 0044 4f4c 4143 5f4c     2_POOL_2D.LOCAL_
   c7b14:	4552 5053 4e4f 4553 4e5f 524f 414d 494c     RESPONSE_NORMALI
   c7b24:	415a 4954 4e4f 4c00 474f 5349 4954 0043     ZATION.LOGISTIC.
   c7b34:	534c 5f48 5250 4a4f 4345 4954 4e4f 4d00     LSH_PROJECTION.M
   c7b44:	5841 505f 4f4f 5f4c 4432 4d00 4c55 5200     AX_POOL_2D.MUL.R
   c7b54:	4c45 5f55 314e 545f 5f4f 0031 4552 554c     ELU_N1_TO_1.RELU
   c7b64:	0036 4552 4853 5041 0045 4552 4953 455a     6.RESHAPE.RESIZE
   c7b74:	425f 4c49 4e49 4145 0052 5053 4341 5f45     _BILINEAR.SPACE_
   c7b84:	4f54 445f 5045 4854 5300 4456 0046 4154     TO_DEPTH.SVDF.TA
   c7b94:	484e 4300 4e4f 4143 5f54 4d45 4542 4444     NH.CONCAT_EMBEDD
   c7ba4:	4e49 5347 5300 494b 5f50 5247 4d41 4300     INGS.SKIP_GRAM.C
   c7bb4:	4c41 004c 5543 5453 4d4f 4500 424d 4445     ALL.CUSTOM.EMBED
   c7bc4:	4944 474e 4c5f 4f4f 554b 5f50 5053 5241     DING_LOOKUP_SPAR
   c7bd4:	4553 5500 494e 4944 4552 5443 4f49 414e     SE.UNIDIRECTIONA
   c7be4:	5f4c 4553 5551 4e45 4543 525f 4e4e 4700     L_SEQUENCE_RNN.G
   c7bf4:	5441 4548 0052 4142 4354 5f48 4f54 535f     ATHER.BATCH_TO_S
   c7c04:	4150 4543 4e5f 0044 5053 4341 5f45 4f54     PACE_ND.SPACE_TO
   c7c14:	425f 5441 4843 4e5f 0044 5254 4e41 5053     _BATCH_ND.TRANSP
   c7c24:	534f 0045 454d 4e41 5300 4255 5300 5551     OSE.MEAN.SUB.SQU
   c7c34:	4545 455a 5500 494e 4944 4552 5443 4f49     EEZE.UNIDIRECTIO
   c7c44:	414e 5f4c 4553 5551 4e45 4543 4c5f 5453     NAL_SEQUENCE_LST
   c7c54:	004d 5453 4952 4544 5f44 4c53 4349 0045     M.STRIDED_SLICE.
   c7c64:	4942 4944 4552 5443 4f49 414e 5f4c 4553     BIDIRECTIONAL_SE
   c7c74:	5551 4e45 4543 525f 4e4e 4500 5058 5400     QUENCE_RNN.EXP.T
   c7c84:	504f 5f4b 3256 5300 4c50 5449 4c00 474f     OPK_V2.SPLIT.LOG
   c7c94:	535f 464f 4d54 5841 4400 4c45 4745 5441     _SOFTMAX.DELEGAT
   c7ca4:	0045 4942 4944 4552 5443 4f49 414e 5f4c     E.BIDIRECTIONAL_
   c7cb4:	4553 5551 4e45 4543 4c5f 5453 004d 4143     SEQUENCE_LSTM.CA
   c7cc4:	5453 5000 4552 554c 4d00 5841 4d49 4d55     ST.PRELU.MAXIMUM
   c7cd4:	4100 4752 4d5f 5841 4d00 4e49 4d49 4d55     .ARG_MAX.MINIMUM
   c7ce4:	4c00 5345 0053 454e 0047 4150 5644 0032     .LESS.NEG.PADV2.
   c7cf4:	5247 4145 4554 0052 5247 4145 4554 5f52     GREATER.GREATER_
   c7d04:	5145 4155 004c 454c 5353 455f 5551 4c41     EQUAL.LESS_EQUAL
   c7d14:	5300 4c45 4345 0054 4953 004e 5254 4e41     .SELECT.SIN.TRAN
   c7d24:	5053 534f 5f45 4f43 564e 5300 4150 5352     SPOSE_CONV.SPARS
   c7d34:	5f45 4f54 445f 4e45 4553 5400 4c49 0045     E_TO_DENSE.TILE.
   c7d44:	5845 4150 444e 445f 4d49 0053 4f4e 5f54     EXPAND_DIMS.NOT_
   c7d54:	5145 4155 004c 4f4c 0047 5553 004d 5352     EQUAL.LOG.SUM.RS
   c7d64:	5251 0054 4f50 0057 5241 5f47 494d 004e     QRT.POW.ARG_MIN.
   c7d74:	4146 454b 515f 4155 544e 5200 4445 4355     FAKE_QUANT.REDUC
   c7d84:	5f45 5250 444f 5200 4445 4355 5f45 414d     E_PROD.REDUCE_MA
   c7d94:	0058 4f4c 4947 4143 5f4c 524f 4f00 454e     X.LOGICAL_OR.ONE
   c7da4:	485f 544f 4c00 474f 4349 4c41 415f 444e     _HOT.LOGICAL_AND
   c7db4:	4c00 474f 4349 4c41 4e5f 544f 5500 504e     .LOGICAL_NOT.UNP
   c7dc4:	4341 004b 4552 5544 4543 4d5f 4e49 4600     ACK.REDUCE_MIN.F
   c7dd4:	4f4c 524f 445f 5649 5200 4445 4355 5f45     LOOR_DIV.REDUCE_
   c7de4:	4e41 0059 5153 4155 4552 5a00 5245 534f     ANY.SQUARE.ZEROS
   c7df4:	4c5f 4b49 0045 4946 4c4c 4600 4f4c 524f     _LIKE.FILL.FLOOR
   c7e04:	4d5f 444f 5200 4e41 4547 5200 5345 5a49     _MOD.RANGE.RESIZ
   c7e14:	5f45 454e 5241 5345 5f54 454e 4749 4248     E_NEAREST_NEIGHB
   c7e24:	524f 4c00 4145 594b 525f 4c45 0055 5153     OR.LEAKY_RELU.SQ
   c7e34:	4155 4552 5f44 4944 4646 5245 4e45 4543     UARED_DIFFERENCE
   c7e44:	4d00 5249 4f52 5f52 4150 0044 4241 0053     .MIRROR_PAD.ABS.
   c7e54:	5053 494c 5f54 0056 4e55 5149 4555 4300     SPLIT_V.UNIQUE.C
   c7e64:	4945 004c 4552 4556 5352 5f45 3256 4100     EIL.REVERSE_V2.A
   c7e74:	4444 4e5f 4700 5441 4548 5f52 444e 4300     DD_N.GATHER_ND.C
   c7e84:	534f 5700 4548 4552 5200 4e41 004b 4552     OS.WHERE.RANK.RE
   c7e94:	4556 5352 5f45 4553 5551 4e45 4543 4d00     VERSE_SEQUENCE.M
   c7ea4:	5441 4952 5f58 4944 4741 4d00 5441 4952     ATRIX_DIAG.MATRI
   c7eb4:	5f58 4553 5f54 4944 4741 5200 554f 444e     X_SET_DIAG.ROUND
   c7ec4:	4800 5241 5f44 5753 5349 0048 4649 5700     .HARD_SWISH.IF.W
   c7ed4:	4948 454c 4e00 4e4f 4d5f 5841 535f 5055     HILE.NON_MAX_SUP
   c7ee4:	5250 5345 4953 4e4f 565f 0034 4f4e 5f4e     PRESSION_V4.NON_
   c7ef4:	414d 5f58 5553 5050 4552 5353 4f49 5f4e     MAX_SUPPRESSION_
   c7f04:	3556 4600 616c 4274 6675 6566 7372 3120     V5.FlatBuffers 1
   c7f14:	312e 2e31 0030 0000                         .11.0...

000c7f1c <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
   c7f1c:	7a6c 000c 7a70 000c 7a80 000c 7a98 000c     lz..pz...z...z..
   c7f2c:	7a8e 000c 7aa0 000c 7aaf 000c 7aba 000c     .z...z...z...z..
   c7f3c:	7acb 000c 7ad1 000c 7ae1 000c 7af2 000c     .z...z...z...z..
   c7f4c:	7b03 000c 7b0e 000c 7b2b 000c 7b34 000c     .{...{..+{..4{..
   c7f5c:	7cbd 000c 7b43 000c 7b4f 000c 7cc8 000c     .|..C{..O{...|..
   c7f6c:	7b53 000c 7b60 000c 7b66 000c 7b6e 000c     S{..`{..f{..n{..
   c7f7c:	7c7b 000c 7c95 000c 7b7e 000c 7b8d 000c     {|...|..~{...{..
   c7f8c:	7b92 000c 7b97 000c 7ba9 000c 7bb3 000c     .{...{...{...{..
   c7f9c:	7bb8 000c 7bbf 000c 7e4c 000c 7bd7 000c     .{...{..L~...{..
   c7fac:	7bf3 000c 7bfa 000c 7c0c 000c 7c1e 000c     .{...{...|...|..
   c7fbc:	7c28 000c 7c2d 000c 7dd9 000c 7c31 000c     (|..-|...}..1|..
   c7fcc:	7c39 000c 7c56 000c 7c64 000c 7c7f 000c     9|..V|..d|...|..
   c7fdc:	7c83 000c 7c8b 000c 7c91 000c 7c9d 000c     .|...|...|...|..
   c7fec:	7ca6 000c 7cc2 000c 7cc7 000c 7ccd 000c     .|...|...|...|..
   c7ffc:	7cd5 000c 7cdd 000c 7ce5 000c 7cea 000c     .|...|...|...|..
   c800c:	7cee 000c 7cf4 000c 7cfc 000c 7d0a 000c     .|...|...|...}..
   c801c:	7d15 000c 7c5e 000c 7d1c 000c 7d20 000c     .}..^|...}.. }..
   c802c:	7d2f 000c 7d3f 000c 7d44 000c 7d04 000c     /}..?}..D}...}..
   c803c:	7d50 000c 7d5a 000c 7d5e 000c 7d63 000c     P}..Z}..^}..c}..
   c804c:	7d62 000c 7b68 000c 7d68 000c 7d6c 000c     b}..h{..h}..l}..
   c805c:	7d74 000c 7d7f 000c 7d8b 000c 7dc3 000c     t}...}...}...}..
   c806c:	7d96 000c 7da1 000c 7da9 000c 7db5 000c     .}...}...}...}..
   c807c:	7dc1 000c 7dc8 000c 7dd3 000c 7ddd 000c     .}...}...}...}..
   c808c:	7de8 000c 7def 000c 7dfa 000c 7dff 000c     .}...}...}...}..
   c809c:	7e09 000c 7e0f 000c 7e27 000c 7e32 000c     .~...~..'~..2~..
   c80ac:	7e45 000c 7e50 000c 7e54 000c 7e5c 000c     E~..P~..T~..\~..
   c80bc:	7e63 000c 7e68 000c 7e73 000c 7e79 000c     c~..h~..s~..y~..
   c80cc:	7e83 000c 7e87 000c 7e8d 000c 7cc9 000c     .~...~...~...|..
   c80dc:	7e92 000c 7ea3 000c 7ab1 000c 7eaf 000c     .~...~...z...~..
   c80ec:	7ebf 000c 7ec5 000c 7ed0 000c 7ed3 000c     .~...~...~...~..
   c80fc:	7ed9 000c 7ef0 000c 0000 0000               .~...~......

000c8108 <_ZTVN6tflite12_GLOBAL__N_118StackDataAllocatorE>:
	...
   c8110:	5ea9 000b 5eb3 000b 5eb5 000b 5ed7 000b     .^...^...^...^..
   c8120:	6e49 0066 614e 004e 322a 005e 0403 0b08     Inf.NaN.*2^.....
   c8130:	0e0d 1211 1413 1615 0017 7865 6f70 656e     ..........expone
   c8140:	746e 3e20 203d 0030 6e49 6574 6567 5472     nt >= 0.IntegerT
   c8150:	7079 2065 6567 6d6d 6f6c 7077 3a3a 6f52     ype gemmlowp::Ro
   c8160:	6e75 6964 676e 6944 6976 6564 7942 4f50     undingDivideByPO
   c8170:	2854 6e49 6574 6567 5472 7079 2c65 6920     T(IntegerType, i
   c8180:	746e 2029 775b 7469 2068 6e49 6574 6567     nt) [with Intege
   c8190:	5472 7079 2065 203d 6f6c 676e 6920 746e     rType = long int
   c81a0:	005d 3a63 552f 6573 7372 742f 646f 7264     ].c:/Users/toddr
   c81b0:	642f 7665 702f 7261 6974 6c63 2d65 4654     /dev/particle-TF
   c81c0:	696c 6574 6c2f 6269 542f 6e65 6f73 4672     lite/lib/TensorF
   c81d0:	6f6c 4c77 7469 2f65 7273 2f63 6874 7269     lowLite/src/thir
   c81e0:	5f64 6170 7472 2f79 6567 6d6d 6f6c 7077     d_party/gemmlowp
   c81f0:	662f 7869 6465 6f70 6e69 2f74 6966 6578     /fixedpoint/fixe
   c8200:	7064 696f 746e 682e 6500 7078 6e6f 6e65     dpoint.h.exponen
   c8210:	2074 3d3c 3320 0031 6e49 7570 7374 6120     t <= 31.Inputs a
   c8220:	646e 6f20 7475 7570 7374 6e20 746f 6120     nd outputs not a
   c8230:	6c6c 6620 6f6c 7461 757c 6e69 3874 697c     ll float|uint8|i
   c8240:	746e 2038 7974 6570 2e73 5400 7079 2065     nt8 types..Type 
   c8250:	2527 2773 6920 2073 6f6e 2074 7573 7070     '%s' is not supp
   c8260:	726f 6574 2064 7962 7520 706e 6361 2e6b     orted by unpack.
   c8270:	4f00 6c6e 2079 6c66 616f 3374 2c32 7520     .Only float32, u
   c8280:	6e69 3874 6120 646e 6920 746e 2038 7261     int8 and int8 ar
   c8290:	2065 7573 7070 726f 6574 2064 7563 7272     e supported curr
   c82a0:	6e65 6c74 2c79 6720 746f 2520 2e73 4f00     ently, got %s..O
   c82b0:	6c6e 2079 6e69 3374 2032 7261 2065 7573     nly int32 are su
   c82c0:	7070 726f 6574 2064 7563 7272 6e65 6c74     pported currentl
   c82d0:	2c79 6720 746f 2520 2e73 6300 2f3a 7355     y, got %s..c:/Us
   c82e0:	7265 2f73 6f74 6464 2f72 6564 2f76 6170     ers/toddr/dev/pa
   c82f0:	7472 6369 656c 542d 6c46 7469 2f65 696c     rticle-TFlite/li
   c8300:	2f62 6554 736e 726f 6c46 776f 694c 6574     b/TensorFlowLite
   c8310:	732f 6372 742f 6e65 6f73 6672 6f6c 2f77     /src/tensorflow/
   c8320:	696c 6574 652f 7078 7265 6d69 6e65 6174     lite/experimenta
   c8330:	2f6c 696d 7263 2f6f 656b 6e72 6c65 2f73     l/micro/kernels/
   c8340:	7473 6972 6564 5f64 6c73 6369 2e65 7063     strided_slice.cp
   c8350:	2070 7473 6972 6564 7620 6c61 6575 6820     p stride value h
   c8360:	7361 7420 206f 6562 6e20 6e6f 7a2d 7265     as to be non-zer
   c8370:	006f 3a63 552f 6573 7372 742f 646f 7264     o.c:/Users/toddr
   c8380:	642f 7665 702f 7261 6974 6c63 2d65 4654     /dev/particle-TF
   c8390:	696c 6574 6c2f 6269 542f 6e65 6f73 4672     lite/lib/TensorF
   c83a0:	6f6c 4c77 7469 2f65 7273 2f63 6574 736e     lowLite/src/tens
   c83b0:	726f 6c66 776f 6c2f 7469 2f65 7865 6570     orflow/lite/expe
   c83c0:	6972 656d 746e 6c61 6d2f 6369 6f72 6b2f     rimental/micro/k
   c83d0:	7265 656e 736c 732f 7274 6469 6465 735f     ernels/strided_s
   c83e0:	696c 6563 632e 7070 6400 6d69 735f 6168     lice.cpp.dim_sha
   c83f0:	6570 6f00 7475 7570 5f74 6873 7061 2d65     pe.output_shape-
   c8400:	643e 7461 5b61 6873 7061 5f65 6973 657a     >data[shape_size
   c8410:	005d 6873 7061 5f65 6973 657a 6f00 7475     ].shape_size.out
   c8420:	7570 5f74 6873 7061 2d65 733e 7a69 0065     put_shape->size.
   c8430:	754e 496d 706e 7475 2873 6f6e 6564 0029     NumInputs(node).
   c8440:	754e 4f6d 7475 7570 7374 6e28 646f 2965     NumOutputs(node)
   c8450:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c8460:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c8470:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c8480:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c8490:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c84a0:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c84b0:	6e72 6c65 2f73 7473 6972 6564 5f64 6c73     rnels/strided_sl
   c84c0:	6369 2e65 7063 2070 6e69 7570 2074 6964     ice.cpp input di
   c84d0:	206d 6873 756f 646c 6e20 746f 6520 6378     m should not exc
   c84e0:	6565 2064 0034 7954 6570 2520 2064 7369     eed 4.Type %d is
   c84f0:	6320 7275 6572 746e 796c 6e20 746f 7320      currently not s
   c8500:	7075 6f70 7472 6465 6220 2079 7453 6972     upported by Stri
   c8510:	6564 5364 696c 6563 002e 3a63 552f 6573     dedSlice..c:/Use
   c8520:	7372 742f 646f 7264 642f 7665 702f 7261     rs/toddr/dev/par
   c8530:	6974 6c63 2d65 4654 696c 6574 6c2f 6269     ticle-TFlite/lib
   c8540:	542f 6e65 6f73 4672 6f6c 4c77 7469 2f65     /TensorFlowLite/
   c8550:	7273 2f63 6574 736e 726f 6c66 776f 6c2f     src/tensorflow/l
   c8560:	7469 2f65 7865 6570 6972 656d 746e 6c61     ite/experimental
   c8570:	6d2f 6369 6f72 6b2f 7265 656e 736c 632f     /micro/kernels/c
   c8580:	6965 2e6c 7063 0070 756f 7074 7475 3e2d     eil.cpp.output->
   c8590:	7974 6570 6900 706e 7475 3e2d 7962 6574     type.input->byte
   c85a0:	0073 756f 7074 7475 3e2d 7962 6574 0073     s.output->bytes.
   c85b0:	6e69 7570 2d74 643e 6d69 2d73 733e 7a69     input->dims->siz
   c85c0:	0065 756f 7074 7475 3e2d 6964 736d 3e2d     e.output->dims->
   c85d0:	6973 657a 6900 706e 7475 3e2d 6964 736d     size.input->dims
   c85e0:	3e2d 6164 6174 695b 005d 756f 7074 7475     ->data[i].output
   c85f0:	3e2d 6964 736d 3e2d 6164 6174 695b 005d     ->dims->data[i].
   c8600:	7954 6570 2720 7325 2027 7369 6e20 746f     Type '%s' is not
   c8610:	7320 7075 6f70 7472 6465 6220 2079 6170      supported by pa
   c8620:	6b63 002e 654e 2067 6e6f 796c 6320 7275     ck..Neg only cur
   c8630:	6572 746e 796c 7320 7075 6f70 7472 2073     rently supports 
   c8640:	6c66 616f 3374 2c32 6720 746f 2520 2e64     float32, got %d.
   c8650:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c8660:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c8670:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c8680:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c8690:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c86a0:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c86b0:	6e72 6c65 2f73 6564 7571 6e61 6974 657a     rnels/dequantize
   c86c0:	632e 7070 6900 706e 7475 3e2d 7974 6570     .cpp.input->type
   c86d0:	3d20 203d 546b 4c66 7469 5565 6e49 3874      == kTfLiteUInt8
   c86e0:	7c20 207c 6e69 7570 2d74 743e 7079 2065      || input->type 
   c86f0:	3d3d 6b20 6654 694c 6574 6e49 3874 6f00     == kTfLiteInt8.o
   c8700:	7475 7570 2d74 743e 7079 2065 3d3d 6b20     utput->type == k
   c8710:	6654 694c 6574 6c46 616f 3374 0032 7954     TfLiteFloat32.Ty
   c8720:	6570 2520 2073 2528 2964 6e20 746f 7320     pe %s (%d) not s
   c8730:	7075 6f70 7472 6465 002e 7954 6570 2520     upported..Type %
   c8740:	2073 6f6e 2074 7563 7272 6e65 6c74 2079     s not currently 
   c8750:	7573 7070 726f 6574 2e64 4900 706e 7475     supported..Input
   c8760:	7420 7079 2065 7325 6920 2073 6f6e 2074      type %s is not 
   c8770:	7563 7272 6e65 6c74 2079 7573 7070 726f     currently suppor
   c8780:	6574 0064 3a63 552f 6573 7372 742f 646f     ted.c:/Users/tod
   c8790:	7264 642f 7665 702f 7261 6974 6c63 2d65     dr/dev/particle-
   c87a0:	4654 696c 6574 6c2f 6269 542f 6e65 6f73     TFlite/lib/Tenso
   c87b0:	4672 6f6c 4c77 7469 2f65 7273 2f63 6574     rFlowLite/src/te
   c87c0:	736e 726f 6c66 776f 6c2f 7469 2f65 7865     nsorflow/lite/ex
   c87d0:	6570 6972 656d 746e 6c61 6d2f 6369 6f72     perimental/micro
   c87e0:	6b2f 7265 656e 736c 732f 666f 6d74 7861     /kernels/softmax
   c87f0:	632e 7070 6f00 7475 7570 2d74 703e 7261     .cpp.output->par
   c8800:	6d61 2e73 657a 6f72 705f 696f 746e 6f00     ams.zero_point.o
   c8810:	7475 7570 2d74 703e 7261 6d61 2e73 6373     utput->params.sc
   c8820:	6c61 2065 3d3d 3120 662e 2f20 3220 3635     ale == 1.f / 256
   c8830:	4f00 6c6e 2079 4431 202c 4432 6120 646e     .Only 1D, 2D and
   c8840:	3420 2044 6574 736e 726f 2073 7573 7070      4D tensors supp
   c8850:	726f 6574 2064 7563 7272 6e65 6c74 2c79     orted currently,
   c8860:	6720 746f 2520 4464 002e 6e4f 796c 3220      got %dD..Only 2
   c8870:	2044 6e61 2064 4434 7420 6e65 6f73 7372     D and 4D tensors
   c8880:	7320 7075 6f70 7472 6465 6320 7275 6572      supported curre
   c8890:	746e 796c 202c 6f67 2074 6425 2e44 4f00     ntly, got %dD..O
   c88a0:	6c6e 2079 6c66 616f 3374 2032 6e61 2064     nly float32 and 
   c88b0:	6975 746e 5f38 2074 7573 7070 726f 6574     uint8_t supporte
   c88c0:	2064 7563 7272 6e65 6c74 2c79 6720 746f     d currently, got
   c88d0:	2520 2e64 6300 2f3a 7355 7265 2f73 6f74      %d..c:/Users/to
   c88e0:	6464 2f72 6564 2f76 6170 7472 6369 656c     ddr/dev/particle
   c88f0:	542d 6c46 7469 2f65 696c 2f62 6554 736e     -TFlite/lib/Tens
   c8900:	726f 6c46 776f 694c 6574 732f 6372 742f     orFlowLite/src/t
   c8910:	6e65 6f73 6672 6f6c 2f77 696c 6574 652f     ensorflow/lite/e
   c8920:	7078 7265 6d69 6e65 6174 2f6c 696d 7263     xperimental/micr
   c8930:	2f6f 656b 6e72 6c65 2f73 6f63 766e 632e     o/kernels/conv.c
   c8940:	7070 6800 7361 625f 6169 2073 7c7c 6e20     pp.has_bias || n
   c8950:	646f 2d65 693e 706e 7475 2d73 733e 7a69     ode->inputs->siz
   c8960:	2065 3d3d 3220 6e00 646f 2d65 6f3e 7475     e == 2.node->out
   c8970:	7570 7374 3e2d 6973 657a 6300 2f3a 7355     puts->size.c:/Us
   c8980:	7265 2f73 6f74 6464 2f72 6564 2f76 6170     ers/toddr/dev/pa
   c8990:	7472 6369 656c 542d 6c46 7469 2f65 696c     rticle-TFlite/li
   c89a0:	2f62 6554 736e 726f 6c46 776f 694c 6574     b/TensorFlowLite
   c89b0:	732f 6372 742f 6e65 6f73 6672 6f6c 2f77     /src/tensorflow/
   c89c0:	696c 6574 652f 7078 7265 6d69 6e65 6174     lite/experimenta
   c89d0:	2f6c 696d 7263 2f6f 656b 6e72 6c65 2f73     l/micro/kernels/
   c89e0:	7073 696c 2e74 7063 2070 6f4e 206e 6f63     split.cpp Non co
   c89f0:	736e 6174 746e 6120 6978 2073 6574 736e     nstant axis tens
   c8a00:	726f 6e20 746f 7320 7075 6f70 7472 6465     or not supported
   c8a10:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c8a20:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c8a30:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c8a40:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c8a50:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c8a60:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c8a70:	6e72 6c65 2f73 7073 696c 2e74 7063 0070     rnels/split.cpp.
   c8a80:	7861 7369 765f 6c61 6575 3e20 203d 0030     axis_value >= 0.
   c8a90:	7861 7369 765f 6c61 6575 3c20 4e20 6d75     axis_value < Num
   c8aa0:	6944 656d 736e 6f69 736e 6928 706e 7475     Dimensions(input
   c8ab0:	0029 7954 6570 2520 2073 7563 7272 6e65     ).Type %s curren
   c8ac0:	6c74 2079 6f6e 2074 7573 7070 726f 6574     tly not supporte
   c8ad0:	2e64 4400 656f 2073 6f6e 2074 7573 7070     d..Does not supp
   c8ae0:	726f 2074 7974 6570 2520 2c64 7220 7165     ort type %d, req
   c8af0:	6975 6572 2073 6f62 6c6f 667c 6f6c 7461     uires bool|float
   c8b00:	697c 746e 757c 6e69 3874 4400 656f 2073     |int|uint8.Does 
   c8b10:	6f6e 2074 7573 7070 726f 2074 7974 6570     not support type
   c8b20:	2520 2c64 7220 7165 6975 6572 2073 6c66      %d, requires fl
   c8b30:	616f 7c74 6e69 7c74 6975 746e 0038 3a63     oat|int|uint8.c:
   c8b40:	552f 6573 7372 742f 646f 7264 642f 7665     /Users/toddr/dev
   c8b50:	702f 7261 6974 6c63 2d65 4654 696c 6574     /particle-TFlite
   c8b60:	6c2f 6269 542f 6e65 6f73 4672 6f6c 4c77     /lib/TensorFlowL
   c8b70:	7469 2f65 7273 2f63 6574 736e 726f 6c66     ite/src/tensorfl
   c8b80:	776f 6c2f 7469 2f65 7865 6570 6972 656d     ow/lite/experime
   c8b90:	746e 6c61 6d2f 6369 6f72 6b2f 7265 656e     ntal/micro/kerne
   c8ba0:	736c 712f 6175 746e 7a69 2e65 7063 0070     ls/quantize.cpp.
   c8bb0:	756f 7074 7475 3e2d 7571 6e61 6974 617a     output->quantiza
   c8bc0:	6974 6e6f 742e 7079 0065 6661 6966 656e     tion.type.affine
   c8bd0:	715f 6175 746e 7a69 7461 6f69 2d6e 733e     _quantization->s
   c8be0:	6163 656c 3e2d 6973 657a 3d20 203d 0031     cale->size == 1.
   c8bf0:	6e69 7570 2d74 743e 7079 2065 3d3d 6b20     input->type == k
   c8c00:	6654 694c 6574 6c46 616f 3374 0032 756f     TfLiteFloat32.ou
   c8c10:	7074 7475 3e2d 7974 6570 3d20 203d 546b     tput->type == kT
   c8c20:	4c66 7469 5565 6e49 3874 7c20 207c 756f     fLiteUInt8 || ou
   c8c30:	7074 7475 3e2d 7974 6570 3d20 203d 546b     tput->type == kT
   c8c40:	4c66 7469 4965 746e 0038 754f 7074 7475     fLiteInt8.Output
   c8c50:	7420 7079 2065 7325 2820 6425 2029 6f6e      type %s (%d) no
   c8c60:	2074 7573 7070 726f 6574 0064 3a63 552f     t supported.c:/U
   c8c70:	6573 7372 742f 646f 7264 642f 7665 702f     sers/toddr/dev/p
   c8c80:	7261 6974 6c63 2d65 4654 696c 6574 6c2f     article-TFlite/l
   c8c90:	6269 542f 6e65 6f73 4672 6f6c 4c77 7469     ib/TensorFlowLit
   c8ca0:	2f65 7273 2f63 6574 736e 726f 6c66 776f     e/src/tensorflow
   c8cb0:	6c2f 7469 2f65 7865 6570 6972 656d 746e     /lite/experiment
   c8cc0:	6c61 6d2f 6369 6f72 6b2f 7265 656e 736c     al/micro/kernels
   c8cd0:	722f 7365 6168 6570 632e 7070 4e00 6d75     /reshape.cpp.Num
   c8ce0:	6e49 7570 7374 6e28 646f 2965 3d20 203d     Inputs(node) == 
   c8cf0:	2031 7c7c 4e20 6d75 6e49 7570 7374 6e28     1 || NumInputs(n
   c8d00:	646f 2965 3d20 203d 0032 312d 7300 7274     ode) == 2.-1.str
   c8d10:	7465 6863 645f 6d69 6e00 6d75 6f5f 7475     etch_dim.num_out
   c8d20:	7570 5f74 6c65 6d65 6e65 7374 6e00 6d75     put_elements.num
   c8d30:	695f 706e 7475 655f 656c 656d 746e 0073     _input_elements.
   c8d40:	7954 6570 2520 2073 2528 2964 6920 2073     Type %s (%d) is 
   c8d50:	6f6e 2074 7573 7070 726f 6574 2064 7962     not supported by
   c8d60:	4d20 7861 6d69 6d75 4d2f 6e69 6d69 6d75      Maximum/Minimum
   c8d70:	002e 7551 6e61 6974 657a 2064 7546 6c6c     ..Quantized Full
   c8d80:	4379 6e6f 656e 7463 6465 6520 7078 6365     yConnected expec
   c8d90:	7374 6f20 7475 7570 2074 6164 6174 7420     ts output data t
   c8da0:	7079 2065 6975 746e 2038 726f 6920 746e     ype uint8 or int
   c8db0:	3631 5400 7079 2065 6425 6e20 746f 6320     16.Type %d not c
   c8dc0:	7275 6572 746e 796c 7320 7075 6f70 7472     urrently support
   c8dd0:	6465 002e 3a63 552f 6573 7372 742f 646f     ed..c:/Users/tod
   c8de0:	7264 642f 7665 702f 7261 6974 6c63 2d65     dr/dev/particle-
   c8df0:	4654 696c 6574 6c2f 6269 542f 6e65 6f73     TFlite/lib/Tenso
   c8e00:	4672 6f6c 4c77 7469 2f65 7273 2f63 6574     rFlowLite/src/te
   c8e10:	736e 726f 6c66 776f 6c2f 7469 2f65 7865     nsorflow/lite/ex
   c8e20:	6570 6972 656d 746e 6c61 6d2f 6369 6f72     perimental/micro
   c8e30:	6b2f 7265 656e 736c 722f 756f 646e 632e     /kernels/round.c
   c8e40:	7070 0000                                   pp..

000c8e44 <_ZTVN6tflite3ops5micro14AllOpsResolverE>:
	...
   c8e4c:	5433 000b 5461 000b 09a9 000c 09ab 000c     3T..aT..........
   c8e5c:	3a63 552f 6573 7372 742f 646f 7264 642f     c:/Users/toddr/d
   c8e6c:	7665 702f 7261 6974 6c63 2d65 4654 696c     ev/particle-TFli
   c8e7c:	6574 6c2f 6269 542f 6e65 6f73 4672 6f6c     te/lib/TensorFlo
   c8e8c:	4c77 7469 2f65 7273 2f63 6574 736e 726f     wLite/src/tensor
   c8e9c:	6c66 776f 6c2f 7469 2f65 7865 6570 6972     flow/lite/experi
   c8eac:	656d 746e 6c61 6d2f 6369 6f72 6b2f 7265     mental/micro/ker
   c8ebc:	656e 736c 652f 656c 656d 746e 6977 6573     nels/elementwise
   c8ecc:	632e 7070 4900 706e 7475 6420 7461 2061     .cpp.Input data 
   c8edc:	7974 6570 2520 2073 2528 2964 6920 2073     type %s (%d) is 
   c8eec:	6f6e 2074 7573 7070 726f 6574 2e64 6500     not supported..e
   c8efc:	7078 6365 6574 5f64 7974 6570 6300 2f3a     xpected_type.c:/
   c8f0c:	7355 7265 2f73 6f74 6464 2f72 6564 2f76     Users/toddr/dev/
   c8f1c:	6170 7472 6369 656c 542d 6c46 7469 2f65     particle-TFlite/
   c8f2c:	696c 2f62 6554 736e 726f 6c46 776f 694c     lib/TensorFlowLi
   c8f3c:	6574 732f 6372 742f 6e65 6f73 6672 6f6c     te/src/tensorflo
   c8f4c:	2f77 696c 6574 652f 7078 7265 6d69 6e65     w/lite/experimen
   c8f5c:	6174 2f6c 696d 7263 2f6f 656b 6e72 6c65     tal/micro/kernel
   c8f6c:	2f73 6c66 6f6f 2e72 7063 0070 6e4f 796c     s/floor.cpp.Only
   c8f7c:	6620 6f6c 7461 3233 6920 2073 7573 7070      float32 is supp
   c8f8c:	726f 6574 2064 7563 7272 6e65 6c74 2c79     orted currently,
   c8f9c:	6720 746f 2520 0073 6e4f 796c 6620 6f6c      got %s.Only flo
   c8fac:	7461 3233 6120 646e 7520 6e69 3874 6120     at32 and uint8 a
   c8fbc:	6572 7320 7075 6f70 7472 6465 6320 7275     re supported cur
   c8fcc:	6572 746e 796c 202c 6f67 2074 6425 002e     rently, got %d..
   c8fdc:	3a63 552f 6573 7372 742f 646f 7264 642f     c:/Users/toddr/d
   c8fec:	7665 702f 7261 6974 6c63 2d65 4654 696c     ev/particle-TFli
   c8ffc:	6574 6c2f 6269 542f 6e65 6f73 4672 6f6c     te/lib/TensorFlo
   c900c:	4c77 7469 2f65 7273 2f63 6574 736e 726f     wLite/src/tensor
   c901c:	6c66 776f 6c2f 7469 2f65 7865 6570 6972     flow/lite/experi
   c902c:	656d 746e 6c61 6d2f 6369 6f72 6b2f 7265     mental/micro/ker
   c903c:	656e 736c 732f 6476 2e66 7063 0070 6f6e     nels/svdf.cpp.no
   c904c:	6564 3e2d 6e69 7570 7374 3e2d 6973 657a     de->inputs->size
   c905c:	6e00 6d75 665f 6c69 6574 7372 2520 7220     .num_filters % r
   c906c:	6e61 006b 754e 446d 6d69 6e65 6973 6e6f     ank.NumDimension
   c907c:	2873 6577 6769 7468 5f73 6566 7461 7275     s(weights_featur
   c908c:	2965 6900 706e 7475 735f 7a69 0065 6577     e).input_size.we
   c909c:	6769 7468 5f73 6566 7461 7275 2d65 643e     ights_feature->d
   c90ac:	6d69 2d73 643e 7461 5b61 5d31 4e00 6d75     ims->data[1].Num
   c90bc:	6944 656d 736e 6f69 736e 7728 6965 6867     Dimensions(weigh
   c90cc:	7374 745f 6d69 2965 6e00 6d75 755f 696e     ts_time).num_uni
   c90dc:	7374 6200 6169 2d73 643e 6d69 2d73 643e     ts.bias->dims->d
   c90ec:	7461 5b61 5d30 6200 6169 2d73 743e 7079     ata[0].bias->typ
   c90fc:	0065 6361 6974 6176 6974 6e6f 735f 6174     e.activation_sta
   c910c:	6574 3e2d 7974 6570 4e00 6d75 6944 656d     te->type.NumDime
   c911c:	736e 6f69 736e 6128 7463 7669 7461 6f69     nsions(activatio
   c912c:	5f6e 7473 7461 2965 6200 7461 6863 735f     n_state).batch_s
   c913c:	7a69 0065 6361 6974 6176 6974 6e6f 735f     ize.activation_s
   c914c:	6174 6574 3e2d 6964 736d 3e2d 6164 6174     tate->dims->data
   c915c:	305b 005d 656d 6f6d 7972 735f 7a69 2065     [0].memory_size 
   c916c:	202a 756e 5f6d 6966 746c 7265 0073 6361     * num_filters.ac
   c917c:	6974 6176 6974 6e6f 735f 6174 6574 3e2d     tivation_state->
   c918c:	6964 736d 3e2d 6164 6174 315b 005d 6373     dims->data[1].sc
   c919c:	6172 6374 5f68 6574 736e 726f 3e2d 7974     ratch_tensor->ty
   c91ac:	6570 4e00 6d75 6944 656d 736e 6f69 736e     pe.NumDimensions
   c91bc:	7328 7263 7461 6863 745f 6e65 6f73 2972     (scratch_tensor)
   c91cc:	7300 7263 7461 6863 745f 6e65 6f73 2d72     .scratch_tensor-
   c91dc:	643e 6d69 2d73 643e 7461 5b61 5d30 7300     >dims->data[0].s
   c91ec:	7263 7461 6863 745f 6e65 6f73 2d72 643e     cratch_tensor->d
   c91fc:	6d69 2d73 643e 7461 5b61 5d31 7700 6965     ims->data[1].wei
   c920c:	6867 7374 745f 6d69 2d65 743e 7079 2065     ghts_time->type 
   c921c:	3d3d 6b20 6654 694c 6574 4955 746e 2038     == kTfLiteUInt8 
   c922c:	7c7c 7720 6965 6867 7374 745f 6d69 2d65     || weights_time-
   c923c:	743e 7079 2065 3d3d 6b20 6654 694c 6574     >type == kTfLite
   c924c:	6e49 3874 6e00 646f 2d65 743e 6d65 6f70     Int8.node->tempo
   c925c:	6172 6972 7365 3e2d 6973 657a 7300 7263     raries->size.scr
   c926c:	7461 6863 695f 706e 7475 715f 6175 746e     atch_input_quant
   c927c:	7a69 6465 3e2d 7974 6570 3d20 203d 546b     ized->type == kT
   c928c:	4c66 7469 5565 6e49 3874 7c20 207c 6373     fLiteUInt8 || sc
   c929c:	6172 6374 5f68 6e69 7570 5f74 7571 6e61     ratch_input_quan
   c92ac:	6974 657a 2d64 743e 7079 2065 3d3d 6b20     tized->type == k
   c92bc:	6654 694c 6574 6e49 3874 7300 7263 7461     TfLiteInt8.scrat
   c92cc:	6863 695f 706e 7475 715f 6175 746e 7a69     ch_input_quantiz
   c92dc:	6465 3e2d 6964 736d 3e2d 6164 6174 305b     ed->dims->data[0
   c92ec:	005d 6373 6172 6374 5f68 6373 6c61 6e69     ].scratch_scalin
   c92fc:	5f67 6166 7463 726f 2d73 743e 7079 0065     g_factors->type.
   c930c:	754e 446d 6d69 6e65 6973 6e6f 2873 6373     NumDimensions(sc
   c931c:	6172 6374 5f68 6373 6c61 6e69 5f67 6166     ratch_scaling_fa
   c932c:	7463 726f 2973 7300 7263 7461 6863 735f     ctors).scratch_s
   c933c:	6163 696c 676e 665f 6361 6f74 7372 3e2d     caling_factors->
   c934c:	6964 736d 3e2d 6164 6174 305b 005d 6373     dims->data[0].sc
   c935c:	6172 6374 5f68 6c66 616f 5f74 6577 6769     ratch_float_weig
   c936c:	7468 5f73 6974 656d 3e2d 7974 6570 4e00     hts_time->type.N
   c937c:	6d75 6944 656d 736e 6f69 736e 7328 7263     umDimensions(scr
   c938c:	7461 6863 665f 6f6c 7461 775f 6965 6867     atch_float_weigh
   c939c:	7374 745f 6d69 2965 7300 7263 7461 6863     ts_time).scratch
   c93ac:	665f 6f6c 7461 775f 6965 6867 7374 745f     _float_weights_t
   c93bc:	6d69 2d65 643e 6d69 2d73 643e 7461 5b61     ime->dims->data[
   c93cc:	5d30 6d00 6d65 726f 5f79 6973 657a 7300     0].memory_size.s
   c93dc:	7263 7461 6863 665f 6f6c 7461 775f 6965     cratch_float_wei
   c93ec:	6867 7374 745f 6d69 2d65 643e 6d69 2d73     ghts_time->dims-
   c93fc:	643e 7461 5b61 5d31 7700 6965 6867 7374     >data[1].weights
   c940c:	665f 6165 7574 6572 3e2d 7974 6570 4e00     _feature->type.N
   c941c:	6d75 6944 656d 736e 6f69 736e 6f28 7475     umDimensions(out
   c942c:	7570 2974 6f00 7475 7570 2d74 643e 6d69     put).output->dim
   c943c:	2d73 643e 7461 5b61 5d30 6f00 7475 7570     s->data[0].outpu
   c944c:	2d74 643e 6d69 2d73 643e 7461 5b61 5d31     t->dims->data[1]
   c945c:	6300 2f3a 7355 7265 2f73 6f74 6464 2f72     .c:/Users/toddr/
   c946c:	6564 2f76 6170 7472 6369 656c 542d 6c46     dev/particle-TFl
   c947c:	7469 2f65 696c 2f62 6554 736e 726f 6c46     ite/lib/TensorFl
   c948c:	776f 694c 6574 732f 6372 742f 6e65 6f73     owLite/src/tenso
   c949c:	6672 6f6c 2f77 696c 6574 652f 7078 7265     rflow/lite/exper
   c94ac:	6d69 6e65 6174 2f6c 696d 7263 2f6f 656b     imental/micro/ke
   c94bc:	6e72 6c65 2f73 6f70 7472 6261 656c 6f5f     rnels/portable_o
   c94cc:	7470 6d69 7a69 6465 642f 7065 6874 6977     ptimized/depthwi
   c94dc:	6573 635f 6e6f 2e76 7063 0070 754d 746c     se_conv.cpp.Mult
   c94ec:	7069 656c 6420 7065 6874 6977 6573 6320     iple depthwise c
   c94fc:	6e6f 2076 706f 2073 616d 6374 2068 706f     onv ops match op
   c950c:	6974 696d 617a 6974 6e6f 7020 7261 6d61     timization param
   c951c:	7465 7265 2c73 6220 7475 6f20 6c6e 2079     eters, but only 
   c952c:	6874 2065 6966 7372 2074 6977 6c6c 7520     the first will u
   c953c:	6573 7420 6568 6620 7361 2074 6170 6874     se the fast path
   c954c:	202c 6562 6163 7375 2065 6874 7265 2765     , because there'
   c955c:	2073 6e6f 796c 6f20 656e 5220 4d41 6320     s only one RAM c
   c956c:	6361 6568 6120 6176 6c69 6261 656c 5300     ache available.S
   c957c:	7a69 2065 6f74 206f 616c 6772 2065 6f66     ize too large fo
   c958c:	2072 6572 6873 7061 6465 7720 6965 6867     r reshaped weigh
   c959c:	2074 7562 6666 7265 2820 6425 6e20 6565     t buffer (%d nee
   c95ac:	6564 2c64 2520 2064 7661 6961 616c 6c62     ded, %d availabl
   c95bc:	2965 5400 6f6f 6d20 6e61 2079 7562 6666     e).Too many buff
   c95cc:	7265 2073 6d28 7861 6920 2073 6425 0029     ers (max is %d).
   c95dc:	7562 6666 7265 6920 646e 7865 2520 2064     buffer index %d 
   c95ec:	7369 6f20 7475 6973 6564 7220 6e61 6567     is outside range
   c95fc:	3020 7420 206f 6425 0000 0000                0 to %d....

000c9608 <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
   c9610:	3181 000c 3187 000c 3195 000c 33cf 000c     .1...1...1...3..
   c9620:	3183 000c 3405 000c 6e49 7570 2074 7261     .1...4..Input ar
   c9630:	6172 2079 6f6e 2074 7270 766f 6469 6465     ray not provided
   c9640:	6620 726f 6f20 6570 6172 6974 6e6f 2720      for operation '
   c9650:	7325 2e27 000a 6f46 6e75 2064 6f74 206f     %s'...Found too 
   c9660:	616d 796e 6420 6d69 6e65 6973 6e6f 2073     many dimensions 
   c9670:	6e69 7420 6568 6920 706e 7475 6120 7272     in the input arr
   c9680:	7961 6f20 2066 706f 7265 7461 6f69 206e     ay of operation 
   c9690:	2527 2773 0a2e 5500 736e 7075 6f70 7472     '%s'...Unsupport
   c96a0:	6465 6420 7461 2061 7974 6570 2520 2064     ed data type %d 
   c96b0:	6e69 7420 6e65 6f73 0a72 5500 686e 6e61     in tensor..Unhan
   c96c0:	6c64 6465 6620 6c75 796c 632d 6e6f 656e     dled fully-conne
   c96d0:	7463 6465 7720 6965 6867 7374 6620 726f     cted weights for
   c96e0:	616d 2e74 5500 686e 6e61 6c64 6465 4c20     mat..Unhandled L
   c96f0:	5453 204d 656b 6e72 6c65 7420 7079 3a65     STM kernel type:
   c9700:	2520 0064 6f4e 7620 6c61 6469 4c20 5453      %d.No valid LST
   c9710:	204d 7562 6c69 6974 206e 706f 6974 6e6f     M builtin option
   c9720:	2073 7865 7369 0074 6572 6873 7061 0065     s exist.reshape.
   c9730:	7173 6575 7a65 0065 4544 454c 4147 4554     squeeze.DELEGATE
   c9740:	6f20 2070 6873 756f 646c 276e 2074 7865      op shouldn't ex
   c9750:	7369 2074 6e69 6d20 646f 6c65 002e 704f     ist in model..Op
   c9760:	6220 6975 746c 6e69 635f 646f 2065 756f      builtin_code ou
   c9770:	2074 666f 7220 6e61 6567 203a 6425 202e     t of range: %d. 
   c9780:	7241 2065 6f79 2075 7375 6e69 2067 6c6f     Are you using ol
   c9790:	2064 4654 694c 6574 6220 6e69 7261 2079     d TFLite binary 
   c97a0:	6977 6874 6e20 7765 7265 6d20 646f 6c65     with newer model
   c97b0:	003f 6944 6e64 7427 6620 6e69 2064 706f     ?.Didn't find op
   c97c0:	6620 726f 6220 6975 746c 6e69 6f20 6370      for builtin opc
   c97d0:	646f 2065 2527 2773 7620 7265 6973 6e6f     ode '%s' version
   c97e0:	2720 6425 0a27 4f00 6570 6172 6f74 2072      '%d'..Operator 
   c97f0:	6977 6874 4320 5355 4f54 204d 7562 6c69     with CUSTOM buil
   c9800:	6974 5f6e 6f63 6564 6820 7361 6e20 206f     tin_code has no 
   c9810:	7563 7473 6d6f 635f 646f 2e65 000a 0000     custom_code.....

000c9820 <_ZTVN5spark13EthernetClassE>:
	...
   c9828:	493b 000c 4931 000c 4927 000c 491d 000c     ;I..1I..'I...I..
   c9838:	4911 000c 4905 000c 4f95 000c 4f9d 000c     .I...I...O...O..
   c9848:	48f9 000c 48f1 000c 48e7 000c 48dd 000c     .H...H...H...H..
   c9858:	4fcd 000c 7061 0070 5925 252d 2d6d 6425     .O..app.%Y-%m-%d
   c9868:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c9878:	6d69 0065                                   ime.

000c987c <_ZTV9IPAddress>:
	...
   c9884:	4c45 000c 4c35 000c 4c37 000c               EL..5L..7L..

000c9890 <_ZTV9USBSerial>:
	...
   c9898:	4d2b 000c 4d93 000c 4d69 000c 49b1 000c     +M...M..iM...I..
   c98a8:	4d5b 000c 4d2d 000c 4d3d 000c 4d8d 000c     [M..-M..=M...M..
   c98b8:	4d4d 000c 4d25 000c                         MM..%M..

000c98c0 <_ZTV11USARTSerial>:
	...
   c98c8:	4e35 000c 4ea1 000c 4e79 000c 49b1 000c     5N...N..yN...I..
   c98d8:	4e49 000c 4e65 000c 4e57 000c 4e73 000c     IN..eN..WN..sN..
   c98e8:	4e37 000c 4e3b 000c                         7N..;N..

000c98f0 <_ZTVN5spark9WiFiClassE>:
	...
   c98f8:	4f37 000c 4f2d 000c 4f23 000c 4ed9 000c     7O..-O..#O...N..
   c9908:	4f17 000c 4f0b 000c 4f95 000c 4f9d 000c     .O...O...O...O..
   c9918:	4eff 000c 4ef7 000c 4eed 000c 4ee3 000c     .N...N...N...N..
   c9928:	4fcd 000c                                   .O..

000c992c <_ZTVN5spark12NetworkClassE>:
	...
   c9934:	4f55 000c 4f5f 000c 4f69 000c 4f73 000c     UO.._O..iO..sO..
   c9944:	4f7d 000c 4f89 000c 4f95 000c 4f9d 000c     }O...O...O...O..
   c9954:	4fa5 000c 4fb1 000c 4fb9 000c 4fc3 000c     .O...O...O...O..
   c9964:	4fcd 000c                                   .O..

000c9968 <_ZSt7nothrow>:
	...

000c9970 <halF>:
   c9970:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000c9980 <ln2HI>:
   c9980:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000c9990 <ln2LO>:
   c9990:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000c99a0 <halF>:
   c99a0:	0000 3f00 0000 bf00                         ...?....

000c99a8 <ln2HI>:
   c99a8:	7180 3f31 7180 bf31                         .q1?.q1.

000c99b0 <ln2LO>:
   c99b0:	f7d1 3717 f7d1 b717                         ...7....

000c99b8 <npio2_hw>:
   c99b8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c99c8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c99d8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c99e8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c99f8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c9a08:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c9a18:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c9a28:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c9a38 <two_over_pi>:
   c9a38:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c9a48:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c9a58:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c9a68:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c9a78:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c9a88:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c9a98:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c9aa8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c9ab8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c9ac8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c9ad8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c9ae8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c9af8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c9b08:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c9b18:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c9b28:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c9b38:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c9b48:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c9b58:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c9b68:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c9b78:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c9b88:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c9b98:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c9ba8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c9bb8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c9bc8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c9bd8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c9be8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c9bf8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c9c08:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c9c18:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c9c28:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c9c38:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c9c48:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c9c58:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c9c68:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c9c78:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c9c88:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c9c98:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c9ca8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c9cb8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c9cc8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c9cd8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c9ce8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c9cf8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c9d08:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c9d18:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c9d28:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c9d38:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c9d48:	008c 0000 006b 0000                         ....k...

000c9d50 <PIo2>:
   c9d50:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c9d60:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c9d70:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c9d7c <init_jk>:
   c9d7c:	0004 0000 0007 0000 0009 0000               ............

000c9d88 <_global_impure_ptr>:
   c9d88:	c5bc 2003 4552 4e45 2054 616d 6c6c 636f     ... REENT malloc
   c9d98:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   c9da8:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   c9db8:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   c9dc8:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   c9dd8:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   c9de8:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   c9df8:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   c9e08:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   c9e18:	722f 6e61 2e64 0063                         /rand.c.

000c9e20 <link_const_data_end>:
   c9e20:	000b4d51 	.word	0x000b4d51
   c9e24:	000c4945 	.word	0x000c4945
   c9e28:	000c497d 	.word	0x000c497d
   c9e2c:	000c49a1 	.word	0x000c49a1
   c9e30:	000c4ac5 	.word	0x000c4ac5
   c9e34:	000c4ad5 	.word	0x000c4ad5
   c9e38:	000c4af1 	.word	0x000c4af1
   c9e3c:	000c4f41 	.word	0x000c4f41
   c9e40:	000c50a5 	.word	0x000c50a5
